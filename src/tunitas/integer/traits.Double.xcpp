// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
#divert <fpp>
#import tunitas.integer.required.Unsigned
#import tunitas.integer.required.multiprecision.number.concepts
#import tunitas.integer.integers
namespace tunitas::integer::traits {
  //
  // How to double the size of an integer
  //
  // Design:
  //
  //   Specializations only.
  //
  // Usage:
  //
  //   #import tunitas.integer.traits.Double
  //
  //   auto doublewide = integer::traits::Double<uint8_t>::Type;
  //   auto doublewide = integer::traits::Double<uint256_t>::Type;
  //
  template<required::Unsigned> struct Double;
  template<> struct Double<integers::uint8_t>;
  template<> struct Double<integers::uint16_t>;
  template<> struct Double<integers::uint32_t>;
  template<> struct Double<integers::uint64_t>;
  template<> struct Double<integers::uint128_t>;
  template<auto MIN, auto MAX> requires required::multiprecision::number::Min_Max<MIN, MAX>
  struct Double<bmp::number<bmp::cpp_int_backend<MIN, MAX, bmp::unsigned_magnitude, bmp::unchecked, void>>>;
}
#endiv
#divert <hpp>
namespace tunitas::integer {
  namespace traits {
    template<> struct Double<integers::uint8_t> {
      using Self = integers::uint8_t;
      using Type = integers::uint16_t;
    };
    template<> struct Double<integers::uint16_t> {
      using Self = integers::uint16_t;
      using Type = integers::uint32_t;
    };
    template<> struct Double<integers::uint32_t> {
      using Self = integers::uint32_t;
      using Type = integers::uint64_t;
    };
    template<> struct Double<integers::uint64_t> {
      using Self = integers::uint64_t;
      using Type = integers::uint128_t;
    };
    template<> struct Double<integers::uint128_t> {
      using Self = integers::uint128_t;
      using Type = integers::uint256_t;
    };
    template<auto MIN, auto MAX> requires required::multiprecision::number::Min_Max<MIN, MAX>
    struct Double<bmp::number<bmp::cpp_int_backend<MIN, MAX, bmp::unsigned_magnitude, bmp::unchecked, void>>> {
      using Self = bmp::number<bmp::cpp_int_backend<MIN, MAX, bmp::unsigned_magnitude, bmp::unchecked, void>>;
      using Type = bmp::number<bmp::cpp_int_backend<2*MIN, 2*MAX, bmp::unsigned_magnitude, bmp::unchecked, void>>;
    };
  }
}
#endiv

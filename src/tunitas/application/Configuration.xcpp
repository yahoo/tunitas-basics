// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
#divert <fpp>
namespace tunitas::application {
  //
  // The Ancestor of (all) application configurations
  // Descendants only.
  // Entails te logging the facility.
  //
  // [[DOCUMENT]] the Configuration constructor accepts Program as pass-by-value because ... why?
  // The Program is copied anyway as it is passed back up into the Ancestor.
  // The Ancestor likely has the capability to accept the Args (c::argv) but that is not exposed.
  //
  // Usage:
  //
  //   class my::Configuration : public tunitas::application::Configuration {
  //     using Ancestor = tunitas::application::Configuration;
  //   public:
  //     using Ancestor::Configuration;
  //     ...fields...
  //     std::optional<std::uintmax_t> width;
  //   };
  //
  class Configuration;
}
#endiv
#divert <hpp>
#import tunitas.application.Program
#import options.config.Generic
class tunitas::application::Configuration : public ::options::config::Generic {
  using Ancestor = ::options::config::Generic;
protected:
  ~Configuration() = default;
public:
  using Program = application::Program;
  inline explicit Configuration(Program);
};
#entail options.logging
#endiv
#divert <ipp>
tunitas::application::Configuration::Configuration(Program program)
  : Ancestor{::options::Program{program}} // [[FIXTHIS]] duplicate copy by eliding ::options::Program and tunitas::application::Program with a type alias pun
{ }
#endiv


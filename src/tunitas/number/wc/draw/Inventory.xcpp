// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
#divert <fpp>
#import tunitas.number.wc.draw.required // cascade that certain 'namespace required'
namespace tunitas::number::wc::draw {
  //
  // Obvious
  //
  template<required::Character CHAR, required::Character_Traits = std::char_traits<CHAR>> struct Inventory;
}
#endiv
#divert <hpp>
#import std.ctype
namespace tunitas::number::wc {
  template<required::Character CHAR, required::Character_Traits TRAITS> struct draw::Inventory {
    using Character = CHAR;
    using Character_Traits = TRAITS;
    // [[FIXTHIS]] how do we know this is the correct re-encoding?
    inline static constexpr auto PLUS = Character{'+'};
    inline static constexpr auto MINUS = Character{'-'};
    inline static constexpr auto PERIOD = Character{'.'};
    inline static constexpr auto ZERO = Character{'0'};
    inline static constexpr auto EIGHT = Character{'8'};
    inline static constexpr auto NINE = Character{'9'};
    inline static constexpr auto is_0x(Character candidate) -> bool { return Character{'x'} == candidate || Character{'X'} == candidate; }
    inline static constexpr auto is_sign(Character candidate) -> bool { return PLUS == candidate || MINUS == candidate; }
    inline static constexpr auto is_exp(Character candidate) -> bool { return Character{'e'} == candidate || Character{'E'} == candidate; }
    //
    using Type = std::ctype_base;
  };
}
#endiv

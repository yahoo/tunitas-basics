// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
#divert <fpp>
#import nonstd.allocator.Traits
#include <hpp/nonstd.allocator.Traits>
#import nonstd.required.allocator.Producing
#import nonstd.required.character.Type
#import nonstd.required.character.Traits
namespace tunitas::number::wc::required::string {
  //
  // Are these arguments suitable for string-based wc::narrow<...>(...)?
  //
  template<typename WIDE_CHAR, typename WIDE_TRAITS, typename WIDE_ALLOCATOR> concept Narrowable = requires(WIDE_CHAR, WIDE_TRAITS, WIDE_ALLOCATOR) {
    requires character::Type<WIDE_CHAR>;
    requires !same_as<WIDE_CHAR, char>; // think about it ... you can't narrow a narrow character
    requires character::Traits<WIDE_TRAITS, WIDE_CHAR>;
    requires allocator::Producing<WIDE_ALLOCATOR, WIDE_CHAR>;
    requires allocator::Producing<typename nonstd::allocator::Traits<WIDE_ALLOCATOR>::template rebind_alloc<char>, char>;
  };
}
#endiv

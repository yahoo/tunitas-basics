// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import std.basic_string
#import tunitas.number.wc.required.string.Widenable
#import tunitas.number.wc.required.iterator.Widenable
#import std.locale
namespace tunitas::number::wc {
  //
  // Widen the string
  //
  // Specification:
  //
  //   Just what it says on the label.
  //
  // Design:
  //
  //   Crudely cast each character.
  //   [[FIXTHIS]] use the locale system.  surely.
  //
  // Invariants:
  //
  //   Only valid for characters in the narrow range.
  //   Only reasonable for characters in the "numeric" character set being [^0-9.+eE]
  //
  // Erudition: from std::ctype<CHAR>::widen(...) via https://en.cppreference.com/w/cpp/locale/ctype/widen
  //
  //   <quote>
  //     Widening always returns a wide character, but only the characters from the basic source character set (until C++23)basic character set (since C++23) are guaranteed to have a unique, well-defined, widening transformation, which is also guaranteed to be reversible (by narrow()).
  //     In practice, all characters whose multibyte representation is a single byte are usually widened to their wide character counterparts, and the rest of the possible single-byte values are usually mapped into the same placeholder value, typically CharT(-1).
  //   </quote>
  //  
  // Usage:
  //
  //   auto already_narrow = std::string{...somehow...};
  //   auto widened = wc::widen<Wide_String>(already_narrowed);
  //
  template<typename RESULT, typename CHAR, typename TRAITS, typename ALLOCATOR> inline auto widen(std::basic_string<char, TRAITS, ALLOCATOR> const &) -> RESULT requires required::string::Widenable<RESULT, CHAR, TRAITS, ALLOCATOR>;
  template<typename RESULT, typename ITERATOR> inline auto widen(ITERATOR start, ITERATOR finish) -> RESULT requires required::iterator::Widenable<RESULT, ITERATOR>;
  //
  template<typename RESULT, typename CHAR, typename TRAITS, typename ALLOCATOR> inline auto widen(std::basic_string<char, TRAITS, ALLOCATOR> const &, std::locale const &) -> RESULT requires required::string::Widenable<RESULT, CHAR, TRAITS, ALLOCATOR>;
  template<typename RESULT, typename ITERATOR> inline auto widen(ITERATOR start, ITERATOR finish, std::locale const &) -> RESULT requires required::iterator::Widenable<RESULT, ITERATOR>;
}
#endiv
#divert <ipp>
#import std.transform
#import std.back_inserter
#import nonstd.iterator.Traits
#import std.use_facet
#import std.ctype
namespace tunitas::number {
  template<typename RESULT, typename CHAR, typename TRAITS, typename ALLOCATOR> auto wc::widen(std::basic_string<char, TRAITS, ALLOCATOR> const &narrow) -> RESULT requires required::string::Widenable<RESULT, CHAR, TRAITS, ALLOCATOR> {
    using Wide_String = RESULT;
    using Wide_Character = typename Wide_String::value_type;
    using Narrow_Character = char;
    auto ret = Wide_String{};
    std::transform(narrow.begin(), narrow.end(), std::back_inserter(ret), [](Narrow_Character nc) { return Wide_Character(nc); });
    return ret;
  }
  template<typename RESULT, typename ITERATOR> auto wc::widen(ITERATOR start, ITERATOR finish) -> RESULT requires required::iterator::Widenable<RESULT, ITERATOR> {
    using Wide_String = RESULT;
    using Wide_Character = typename nonstd::container::Traits<Wide_String>::Value;
    using Narrow_Character = typename nonstd::iterator::Traits<ITERATOR>::Value;
    auto ret = Wide_String{};
    std::transform(start, finish, std::back_inserter(ret), [](Narrow_Character nc) { return Wide_Character(nc); });
    return ret;
  }
  template<typename RESULT, typename CHAR, typename TRAITS, typename ALLOCATOR> auto wc::widen(std::basic_string<char, TRAITS, ALLOCATOR> const &narrow, std::locale const &locale) -> RESULT requires required::string::Widenable<RESULT, CHAR, TRAITS, ALLOCATOR> {
    using Wide_String = RESULT;
    using Wide_Character = typename Wide_String::value_type;
    using Narrow_Character = char;
    auto ret = Wide_String{};
    auto const &facet = std::use_facet<std::ctype<Wide_Character>>(locale);
    std::transform(narrow.begin(), narrow.end(), std::back_inserter(ret), [&facet](Narrow_Character nc) { return facet.widen(nc); });
    return ret;
  }
  template<typename RESULT, typename ITERATOR> auto wc::widen(ITERATOR start, ITERATOR finish, std::locale const &locale) -> RESULT requires required::iterator::Widenable<RESULT, ITERATOR> {
    using Wide_String = RESULT;
    using Wide_Character = typename nonstd::container::Traits<Wide_String>::Value;
    using Narrow_Character = typename nonstd::iterator::Traits<ITERATOR>::Value;
    auto const &facet = std::use_facet<std::ctype<Wide_Character>>(locale);
    auto ret = Wide_String{};
    std::transform(start, finish, std::back_inserter(ret), [&facet](Narrow_Character nc) { return facet.widen(nc); });
    return ret;
  }
}
#endiv

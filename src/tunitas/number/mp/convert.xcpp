// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#include <gmpxx.h>
#import tunitas.number.mp.required.Carrier
namespace tunitas::number::mp {
  //
  // Because none of the MP classes have constructors that accept int128
  template<required::Carrier CARRIER> auto convert(int128_t) -> CARRIER;
}
#endiv
#divert <ipp>
namespace tunitas::number {
  template<mp::required::Carrier CARRIER> auto mp::convert(int128_t value) -> CARRIER {
    auto sign = [&value]() {
                  if (value < 0) {
                    value = -value;
                    return -1;
                  } else {
                    return 1;
                  }
                }();
    constexpr auto MASK = (uint128_t{1} << 64) - 1;
    auto const small_lo = uint64_t(value & MASK);
    auto const small_hi = uint64_t((value >> 64) & MASK);
    auto const big_lo = mpz_class{small_lo};
    auto const big_hi = mpz_class{small_hi};
    auto prepared = (big_hi << 64) | big_lo; // https://gmplib.org/manual/Integer-Logic-and-Bit-Fiddling
    if (sign < 0) {
      return -prepared;
    } else {
      return prepared;
    }
  }
}
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using namespace tunitas::number::mp;
    static_assert(sizeof (convert<mpz_class>(int128_t{})), "calls as intended");
    static_assert(sizeof (convert<mpq_class>(int128_t{})), "calls as intended");
    static_assert(sizeof (convert<mpf_class>(int128_t{})), "calls as intended");
  }
}
#endiv

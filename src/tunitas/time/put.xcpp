// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
#divert <hpp>
#import sys.time.put
#import tunitas.time.Point
#import std.string
namespace tunitas::time {
  //
  // For TIME in { time::Point ... etc... }
  //
  // This is the C++14 & C++17 style interface in the "old" style.
  // C++20 will have std::chrono::to_stream(stream, format, point),
  //                 std::chrono::format(format, streamable)
  //                 std::chrono::format(locale, format, streamable)
  //
  // Usage:
  //     using tunitas::time::put;
  //
  //     time::Point p = ...
  //     out << put(p, "%s") << '\n';
  //
  //     ... and so on ...
  //
  // The available module-sys 0.25.0 Tunitas Release 01 (Famous Oak) has this, almost.
  // So we're going to use that and embellish it a little bit for usability.
  // The "real" module-sys v0.26 has it in complete form.
  //
  // See the commentariat and documentatoin on module-sys sys.time.put, which is not duplicated here.
  //
  namespace packaging::put_function {
    using Result = decltype(sys::time::put(Point{}, ""));
    using sys::time::put;
    inline auto put(Point p, std::string const &format) -> Result;
    inline auto put(Point p, char const *format) -> Result;
  }
  using packaging::put_function::put;
}
#endiv
#divert <ipp>
auto tunitas::time::packaging::put_function::put(Point p, std::string const &format) -> Result {
  return put(p, format.c_str());
}
auto tunitas::time::packaging::put_function::put(Point p, char const *format) -> Result {
  return sys::time::put(p, format);
}
#endiv

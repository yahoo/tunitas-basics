// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/tunitas-basics/blob/master/LICENSE for terms.
#divert <hpp>
#import c.const_stringz
#import re.string
#import options.longish.Step
#import tunitas.app.Configuration
#import tunitas.required.exception.app.Quitting
namespace tunitas::app::options {
  //
  // Acquire an identifier from the longish Step
  //
  // The identifier is returned, not an outcome.
  // The word value is checked to ensure that it is not empty and is an identifier.
  // In this case, identifier means matching m/^[-_0-9a-zA-Z]+$/
  // So the rpm package identifier "0ad" is allowed as intended.
  //
  // Scheme:
  //
  //   --identifier=NAME
  //
  // Example:
  //
  //   --package=0ad
  //   --user=jdoe
  //
  // Usage:
  //
  //   Configuration cfg{...somehow...}
  //   options::longish::Step step{...somehow...};
  //   std::string identifier = get_identifier(cfg, step);
  //
  namespace packaging::get_identifier_function {
    using Step = ::options::longish::Step;
    using Identifier = std::string;
    using Field_Name = re::string<c::const_stringz>;
    // [[FIXTHIS]] build a concept for an throwable Quitting exception
    template<required::exception::app::Quitting QUITTING> inline auto get_identifier(Configuration const &, Step const &) -> Identifier;
    template<required::exception::app::Quitting QUITTING> auto get_identifier(Configuration const &, Step const &, Field_Name field_name) -> Identifier;
  }
  using packaging::get_identifier_function::get_identifier;
}
#endiv
#divert <ipp>
template<tunitas::required::exception::app::Quitting QUITTING> auto tunitas::app::options::packaging::get_identifier_function::get_identifier(Configuration const &cfg, Step const &step) -> Identifier { 
  return get_identifier<QUITTING>(cfg, step, "identifier");
}
#endiv
#divert <tpp>
#import std.string
#import std.invalid_argument
#import sys.exits.constants
#import std.isalnum
#import std.all_of
template<tunitas::required::exception::app::Quitting QUITTING> auto tunitas::app::options::packaging::get_identifier_function::get_identifier(Configuration const &cfg, Step const &step, Field_Name field_name) -> Identifier {
  std::string const candidate = ::options::shortish::required(step);
  if (field_name.empty()) {
    // A "logic error" because the programmer controlls this
    throw std::invalid_argument{"field_name is empty"};
  }
  if (candidate.empty()) {
    error(cfg) << "the " << field_name << " is empty\n";
    throw QUITTING{cfg.NAME, sys::exits::CONFIG};
  }
  auto const is_identifier = [](char c) { return '_' == c || '-' == c || std::isalnum(c); };
  if (!std::all_of(candidate.begin(), candidate.end(), is_identifier)) {
    error(cfg) << "the " << field_name << " is is not an identifier - '" << candidate << "'\n";
    throw QUITTING{cfg.NAME, sys::exits::CONFIG};
  }
  return std::move(candidate);;
}
#endiv

// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-basics/blob/master/LICENSE for terms.
#divert <fpp>
namespace tunitas::app {
  //
  // A stream for recording the process pid.
  //
  // If the pidfile is a file then open it, else fail and throw system_error with the error code
  // If the pidfile is absent then use std::cerr
  // Wait to emit the pid until after the the forking has happened.
  // Else do it in the destructor (possibly throwing)
  //
  // Calling emit() is idempotent.
  // Calling close() implies calls emit() unless in manual() mode.

  // automatic mode (the default)
  //
  //   the pid will always be emitted one way or another
  //   The pid will be emitted before close() or destruction (which calls close()).
  //   The pid may be emitted at a specific point in time by calling emit()
  //
  // manual mode (explicitly configured)
  //
  //   The pid might not be emitted at all.
  //   The pid is only emitted if emit() is explicitly called.
  //
  // Usage:
  //
  //   Pidfile pidfile{optional_filename, do_emit_pid}
  //   pidfile.manual();
  //   if (...daemonizing...) {
  //      call ... daemon(3) ...  <---------- WATCHOUT pidfile.manual() is required when fork()ing
  //   }
  //   pidfile.emit();
  //   pidfile.close();
  //
  class Pidfile;
}
#endiv
#divert <hpp>
#import std.filesystem.path
#import std.ofstream
#import std.optional
#import std.unique_ptr
class tunitas::app::Pidfile {
public:
  inline Pidfile(std::optional<std::filesystem::path> const &filepath, bool emit_pid);
  inline ~Pidfile() noexcept(false);
  Pidfile(Pidfile const &) = delete;
  auto operator=(Pidfile const &) -> Pidfile & = delete;
  inline auto manual() -> void; // WATCHOUT -required when fork()ing
  inline auto emit() -> void; // idempotent
  inline auto close() -> void;
private:
  using Stream_Pointer = std::unique_ptr<std::ofstream>;
  inline static auto open_stream(std::optional<std::filesystem::path> const &filepath, bool emit_pid) -> Stream_Pointer;
protected:
  Stream_Pointer stream;
  std::ostream &outbound;
  bool unemitted; // idempotence
  bool must_emit; //   manual turns this off
};
#endiv
#divert <ipp>
#import std.cerr
tunitas::app::Pidfile::Pidfile(std::optional<std::filesystem::path> const &filepath, bool emit_pid)
  : stream{open_stream(filepath, emit_pid)}
  , outbound{stream.get() ? *stream.get() : std::cerr}
  , unemitted{true}
  , must_emit{emit_pid}
{ }
tunitas::app::Pidfile::~Pidfile() noexcept(false) {
  close();
}
auto tunitas::app::Pidfile::manual() -> void {
  must_emit = false; // but does not affect unemitted
}
#import std.move
#import std.system_error
#include <cerrno>
#import std.generic_category
auto tunitas::app::Pidfile::open_stream(std::optional<std::filesystem::path> const &filepath, bool emit_pid) -> Stream_Pointer {
  if (!emit_pid) {
    return Stream_Pointer{};
  } else if (!filepath) {
    return Stream_Pointer{};
  } else {
    Stream_Pointer ptr{std::make_unique<std::ofstream>(*filepath)};
    if (!*ptr) {
      throw std::system_error{errno, std::generic_category()};
    }
    return std::move(ptr);
  }
}
#import std.flush
#import getpid
auto tunitas::app::Pidfile::emit() -> void {
  if (unemitted) {
    unemitted = false;
    outbound << getpid() << std::flush;
  }
}
auto tunitas::app::Pidfile::close() -> void {
  if (must_emit) {
    must_emit = false;  // ensure manual()-close()-emit() does nothing
    emit();
  }
  stream.reset();
}
#endiv

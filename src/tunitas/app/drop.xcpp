// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/tunitas-basics/blob/master/LICENSE for terms.
#divert <hpp>
#import tunitas.app.Configuration
#import tunitas.required.exception.app.Quitting
namespace tunitas::app {
  //
  // drop (privileges) - do that thing
  //
  // Preconditions:
  // - The process is running as root
  //
  // Postcondition:
  // a. Failure
  // - an exception is thrown
  // - the process is still running as root
  //
  // b. Success
  // - the process is running as the unprivileged user
  //
  // Usage:
  //
  //   try {
  //     if (cfg.drop_privileges) {
  //       auto user = cfg.unprivileged_user.value_or(defaults::UNPRIVILEGED_USER);
  //       drop(cfg, user);
  //     }
  //     ...do something...
  //   } catch (std::exception const &) {
  //     ...report the problem...
  //     ...exit gracefully...
  //   }
  //
  template<required::exception::app::Quitting QUITTING> auto drop(Configuration const &, std::string const &unprivileged_user) -> void;
}
#endiv
#divert <tpp>
#import want.sys.posix.Endent
#import want.sys.posix.geteuid
#import want.sys.posix.getpwname
#import want.sys.posix.seteuid
#include <pwd.h> // [[FIXTHIS]] module-posix-os #import passwd
template<tunitas::required::exception::app::Quitting QUITTING> auto tunitas::app::drop(Configuration const &cfg, std::string const &unprivileged_user) -> void {
  namespace sys = want::sys;
  debug(cfg) << "before uid=" << sys::posix::geteuid() << '\n';
  sys::posix::Endent<::passwd> guard;
  auto got = sys::posix::getpwname(unprivileged_user);
  if (!ok(got)) {
    error(cfg) << "cannot drop privileges to " << unprivileged_user << " because " << error_code(got).message() << '\n';
    throw QUITTING{cfg.NAME, sys::exits::NOUSER};
  }
  auto uid = value(got)->pw_uid;
  if (0 == uid) {
    error(cfg) << "the user " << unprivileged_user << " is not unprivileged (that user is root!)\n";
    throw QUITTING{cfg.NAME, sys::exits::FAIL};
  }
  auto set = sys::posix::seteuid(uid);
  if (!ok(set)) {
    error(cfg) << "cannot drop privileges to " << unprivileged_user << " with uid " << uid << " because " << error_code(set).message() << '\n';
    throw QUITTING{cfg.NAME, sys::exits::NOUSER};
  }
  verbose(cfg) << "successfully dropped privileges to " << unprivileged_user << " with uid " << uid << '\n';
  debug(cfg) << "after uid=" << sys::posix::geteuid() << '\n';
}
#endiv

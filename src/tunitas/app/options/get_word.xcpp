// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
#divert <hpp>
#import c.const_stringz
#import options.longish.Step
#import re.string
#import std.string
#import tunitas.app.Configuration
#import tunitas.app.required.exception.Quitting
namespace tunitas::app::options {
  //
  // Acquire a word from the longish Step
  //
  // The word is returned, not an outcome.
  // The word value is checked to ensure that it is not empty.
  // But the word may be whitespace or contain anything else at all.
  //
  // Scheme:
  //
  //   --word=WORD
  //
  // Example:
  //
  //   --user=jdoe
  //   --commalist=apple,banana,cherry
  //
  // Usage:
  //
  //   Configuration cfg{...somehow...}
  //   options::longish::Step step{...somehow...};
  //   std::string word = get_word(cfg, step);
  //
  namespace packaging::get_word_function {
    using Step = ::options::longish::Step;
    using Word = std::string;
    using Field_Name = re::string<c::const_stringz>;
    // [[FIXTHIS]] build a concept for an throwable Quitting exception
    template<required::exception::Quitting QUITTING> inline auto get_word(Configuration const &, Step const &) -> Word;
    template<required::exception::Quitting QUITTING> auto get_word(Configuration const &, Step const &, Field_Name field_name) -> Word;
  }
  using packaging::get_word_function::get_word;
}
#endiv
#divert <ipp>
template<tunitas::app::required::exception::Quitting QUITTING> auto tunitas::app::options::packaging::get_word_function::get_word(Configuration const &cfg, Step const &step) -> Word { 
  return get_word<QUITTING>(cfg, step, "word");
}
#endiv
#divert <tpp>
#import std.string
#import std.invalid_argument
#import sys.exits.constants
template<tunitas::app::required::exception::Quitting QUITTING> auto tunitas::app::options::packaging::get_word_function::get_word(Configuration const &cfg, Step const &step, Field_Name field_name) -> Word {
  std::string const candidate = ::options::shortish::required(step);
  if (field_name.empty()) {
    // A "logic error" because the programmer controlls this
    throw std::invalid_argument{"field_name is empty"};
  }
  if (candidate.empty()) {
    error(cfg) << "the " << field_name << " cannot be empty\n";
    throw QUITTING{cfg.NAME, sys::exits::CONFIG};
  }
  return candidate;
}
#endiv

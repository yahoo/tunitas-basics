// This is -*- c++ -*- in the S.C.O.L.D. stylings that are so popular these days.
#divert <hpp>
#import c.const_stringz
#import options.longish.Step
#import re.string
#import std.filesystem.path
#import tunitas.app.Configuration
namespace tunitas::app::options {
  //
  // Acquire a file path from the longish Step
  //
  // The filepath is returned, not an outcome.
  // The filepath value is checked to ensure that it is not empty.
  // There are no other constraints on the filepath that are checked here.
  //
  // Scheme:
  //
  //   --file=FILEPATH
  //
  // Example:
  //
  //   --output=./file.out
  //
  // Usage:
  //
  //   Configuration cfg{...somehow...}
  //   options::longish::Step step{...somehow...};
  //   std::string filepath = get_filepath(cfg, step);
  //
  namespace packaging::get_filepath_function {
    using Step = ::options::longish::Step;
    using Filepath = std::filesystem::path;
    using Field_Name = re::string<c::const_stringz>;
    // [[FIXTHIS]] build a concept for an throwable Quitting exception
    template<typename QUITTING> inline auto get_filepath(Configuration const &, Step const &) -> Filepath;
    template<typename QUITTING> auto get_filepath(Configuration const &, Step const &, Field_Name field_name) -> Filepath;
  }
  using packaging::get_filepath_function::get_filepath;
}
#endiv
#divert <ipp>
template<typename QUITTING> auto tunitas::app::options::packaging::get_filepath_function::get_filepath(Configuration const &cfg, Step const &step) -> Filepath { 
  return get_filepath<QUITTING>(cfg, step, "filepath");
}
#import tunitas.app.options.get_word
template<typename QUITTING> auto tunitas::app::options::packaging::get_filepath_function::get_filepath(Configuration const &cfg, Step const &step, Field_Name field_name) -> Filepath {
  return Filepath{get_word<QUITTING>(cfg, step, field_name)};
}
#endiv

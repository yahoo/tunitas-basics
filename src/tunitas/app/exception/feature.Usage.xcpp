// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
#divert <fpp>
namespace tunitas::app::exception::feature {
  //
  // The "usage message" application exception
  // Descendants only.
  // Set up as an ancestor to the mixin tree,
  //     so that other exceptions can be mixed in as well.
  //
  // Usage:
  //
  //   using namespace tunitas::app::exception
  //   struct my::Usage : public Aspect, public feature::Usage, ::options::throwable::Usage {
  //     using Feature = tunitas::app::exception::feature::Usage;
  //     using Exception = ::options::throwable::Usage;
  //     explicit Usage(Program, sys::exits::Code = sys::exits::OK);
  //     ...must unify the MI...
  //     auto what() const noexcept -> char const * final     { return Exception::what(); }
  //     auto stream() const noexcept -> std::ostream & final { return Feature::stream(); }
  //     auto code() const noexcept -> sys::exits::Code final { return Feature::code(); }
  //   };
  //
  //   try {
  //     ...
  //     throw my::Usage{NAME, sys::exits::FAIL};
  //     ...
  //   } catch (exception::Generic const &g) {
  //     g.stream() << g << '\n';
  //     return g.code();
  //   }
  //
  class Usage;
}
#endiv
#divert <hpp>
#import tunitas.app.exception.feature.Quitting
class tunitas::app::exception::feature::Usage : public Quitting {
  using Ancestor = Quitting;
protected:
  ~Usage() = default;
  inline Usage(std::ostream &, sys::exits::Code);
  inline Usage(sys::exits::Code);
  Usage() = default;
};
#endiv
#divert <ipp>
namespace tunitas::app::exception::feature {
  Usage::Usage(std::ostream &o, sys::exits::Code c)
    : Ancestor{o, c}
  { }
  Usage::Usage(sys::exits::Code c)
    : Ancestor{c}
  { }
}
#endiv

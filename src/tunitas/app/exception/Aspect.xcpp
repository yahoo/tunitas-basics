// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/tunitas-basics/blob/master/LICENSE for terms.
#divert <fpp>
namespace tunitas::app::exception {
  //
  // The aspect of generic application exception
  // This is a mixin, hence the name.
  // Descendants only.
  // It is set up as an ancestor to the mixin tree so that STL exceptions can be mixed in as well.
  //
  // The descendants of Aspect give some of teh flavorings that are expected
  // e.g. Quitting, Usage, Version.
  //
  // WATCHOUT - the constructor signature of the Tunitas exceptio hierarchy is subtly different
  // than that used by the traditional applications of S.C.O.L.D.  That is convention, not a requirement.
  //
  // Usage:
  //
  //   class my::Usage : public tunitas::app::exception::aspect::Usage, public std::runtime_error { ... };
  //   class my::Version : public tunitas::app::exception::aspect::Version, public std::runtime_error { ... };
  //   class my::Quitting : public tunitas::app::exception::aspect::Quitting, public std::runtime_error { ... };
  //
  //   try {
  //     ...
  //     throw my::Usage{NAME, sys::exits::FAIL};
  //     throw my::Version{NAME};
  //     throw my::Quitting{NAME, "because"};
  //     ...
  //   } catch (exception::Aspect const &g) {
  //     g.stream() << g << '\n';
  //     return g.code();
  //   }
  //
  class Aspect;
}
#endiv
#divert <hpp>
#import std.ostream
namespace tunitas::app::exception {
  // No wide character support [[HOW?]] how would we change that?
  inline auto operator<<(std::ostream &, Aspect const &) -> std::ostream &;
}
#import sys.exits.Code
class tunitas::app::exception::Aspect {
protected:
  virtual ~Aspect() = default;
  inline Aspect(std::ostream &, sys::exits::Code);
  inline Aspect(sys::exits::Code);
  inline Aspect();
public:
  virtual auto what() const noexcept -> char const * = 0;
  virtual auto stream() const noexcept -> std::ostream &;
  virtual auto code() const noexcept -> sys::exits::Code;
protected:
  std::ostream &offending_stream;
  sys::exits::Code offending_code;
};
#endiv
#divert <ipp>
auto tunitas::app::exception::operator<<(std::ostream &o, Aspect const &g) -> std::ostream & {
  return o << g.what();
}
#import std.cout
#import std.cerr
#import sys.exits.constants
namespace tunitas::app::exception {
  Aspect::Aspect()
    : Aspect(sys::exits::OK)
  { }
  Aspect::Aspect(sys::exits::Code c)
    : Aspect((sys::exits::OK == c ? std::cout : std::cerr), c)
  { }
  Aspect::Aspect(std::ostream &o, sys::exits::Code c)
    : offending_stream{o}
    , offending_code{c}
  { }
}
#endiv
#divert <cpp>
namespace tunitas::app::exception {
  auto Aspect::stream() const noexcept -> std::ostream & {
    return offending_stream;
  }
  auto Aspect::code() const noexcept -> sys::exits::Code {
    return offending_code;
  }
}
#endiv

// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-basics/blob/master/LICENSE for terms.
#divert <fpp>
namespace tunitas::app::exception::aspect {
  //
  // The "version message" application exception
  // Descendants only.
  // Set up as an ancestor to the mixin tree,
  //     so that STL exceptions can be mixed in as well.
  //
  // Usage:
  //
  //   using namespace tunitas::app::exception;
  //   class my::Version : public Aspect, public aspect::Version, public aspect::Messaging, public std::exception {
  //     using Quittable = tunitas::app::exception::aspect::Version;
  //     using Messaging = tunitas::exception::aspect::Messaging
  //     using Ancestor = std::exception
  //     explicit Version(Program)
  //     ...must unify the MI...
  //     auto what() const noexcept -> char const * final { return Messaging::what(); }
  //   };
  //
  //   try {
  //     ...
  //     throw my::Version{NAME};
  //     ...
  //   } catch (exception::Aspect const &g) {
  //     g.stream() << g << '\n';
  //     return g.code();
  //   }
  //
  class Version;
}
#endiv
#divert <hpp>
#import tunitas.app.exception.aspect.Quitting
class tunitas::app::exception::aspect::Version : public Quitting {
  using Ancestor = Quitting;
protected:
  ~Version() = default;
  Version() = default;
};
#endiv

// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
#divert <fpp>
namespace tunitas::app::exception::feature {
  //
  // The "version message" application exception
  // Descendants only.
  // Set up as an ancestor to the mixin tree,
  //     so that STL exceptions can be mixed in as well.
  //
  // Usage:
  //
  //   using namespace tunitas::app::exception;
  //   struct my::Version : public Aspect, public feature::Version, public feature::Messaging, public std::exception {
  //     struct Ancestors {
  //       using Messaging = tunitas::app::exception::feature::Messaging;
  //       using Feature = tunitas::app::exception::feature::Version;
  //       using Exception = std::exception;
  //     }
  //     using Program = ...something...;
  //     explicit Version(Program)
  //     ...must unify the MI...
  //     auto what() const noexcept -> char const * final    { return Ancestors::Messaging::what(); }
  //     auto stream() const noexcept -> std::stream & final { return Ancestors::Version::stream(); }
  //     auto code() const noexcept -> sys::exit::Code final { return Ancestors::Version::code(); }
  //   };
  //
  //   try {
  //     ...
  //     throw my::Version{NAME};
  //     ...
  //   } catch (exception::Aspect const &g) {
  //     g.stream() << g << '\n';
  //     return g.code();
  //   }
  //
  class Version;
}
#endiv
#divert <hpp>
#import tunitas.app.exception.feature.Quitting
class tunitas::app::exception::feature::Version : public Quitting {
  using Ancestor = Quitting;
protected:
  ~Version() = default;
  Version() = default;
};
#endiv

// This is -*- c++ -*- in the S.C.O.L.D. stylings that are so popular these days.
#divert <fpp>
namespace tunitas::app::exception {
  //
  // The "usage message" application exception
  // Descendants only.
  // Set up as an ancestor to the mixin tree,
  //     so that other exceptions can be mixed in as well.
  //
  // Usage:
  //
  //   class my::Usage : public tunitas::app::exception::Usage, ::options::throwable::Usage {
  //     using appable = tunitas::app::exception::Usage;
  //     using optable = ::options::throwable::Usage;
  //     explicit Usage(Program, sys::exits::Code = sys::exits::OK);
  //     ...must unify the MI...
  //     auto what() const noexcept -> char const * final { return optable::what(); }
  //     auto stream() const noexcept -> std::ostream & final { return optable::stream(); }
  //     auto code() const noexcept -> sys::exits::Code final { return optable::code(); }
  //   };
  //
  //   try {
  //     ...
  //     throw my::Usage{NAME, sys::exits::FAIL};
  //     ...
  //   } catch (exception::Generic const &g) {
  //     g.stream() << g << '\n';
  //     return g.code();
  //   }
  //
  class Usage;
}
#endiv
#divert <hpp>
#import tunitas.app.exception.Generic
class tunitas::app::exception::Usage : public Generic {
  using ancestor = Generic;
protected:
  ~Usage() = default;
  inline Usage(std::ostream &, sys::exits::Code);
  inline Usage(sys::exits::Code);
  Usage() = default;
};
#endiv
#divert <ipp>
tunitas::app::exception::Usage::Usage(std::ostream &o, sys::exits::Code c)
  : ancestor{o, c}
{ }
tunitas::app::exception::Usage::Usage(sys::exits::Code c)
  : ancestor{c}
{ }
#endiv

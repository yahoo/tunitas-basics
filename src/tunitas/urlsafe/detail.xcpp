// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-basics/blob/master/LICENSE for terms.
#divert <hpp>
#import std.pair
#import std.string
#import std.isxdigit
namespace tunitas::urlsafe::detail {
  //
  // The implementation details of the urlsafe encdec.
  // Codefrags towards hexidecimal character-tofrom-nibble conversion. 
  //
  // Usage: figure it out, there's not that much code here.
  //
  // https://tools.ietf.org/html/rfc3986
  // <quote>
  //   The uppercase hexadecimal digits 'A' through 'F' are equivalent to the lowercase digits 'a' through 'f', respectively.
  //   If two URIs differ only in the case of hexadecimal digits used in percent-encoded octets, they are equivalent.
  //   For consistency, URI producers and normalizers should use uppercase hexadecimal digits for all percent-encodings.
  // </quote>
  //
  inline auto issafe(unsigned char) -> bool;
  using std::isxdigit;
  inline auto hexchar(unsigned char) -> char;
  namespace packaging::hexpair_function {
    using Result = std::pair<unsigned char, unsigned char>;
    inline auto hexpair(unsigned char) -> Result;
  }
  using packaging::hexpair_function::hexpair;
  // hex must be a hexidecimal character: std::isxdigit
  inline auto dehex(unsigned char hex) -> char;
  // only the low 4 bits of lo and hi are preserved.
  inline auto rehex(unsigned char hi, unsigned char lo) -> char;
}
#endiv
#divert <ipp>
auto tunitas::urlsafe::detail::issafe(unsigned char uc) -> bool {
  // Standards
  // https://www.w3.org/Addressing/URL/4_URI_Recommentations.html
  // https://www.ietf.org/rfc/rfc2396.txt
  return (('0' <= uc && uc <= '9') ||
	  ('a' <= uc && uc <= 'z') ||
	  ('A' <= uc && uc <= 'Z') ||
	  uc == '-' || uc == '_' ||
	  uc == '.' || uc == '!' ||
	  uc == '~' || uc == '*' || uc == '\'' ||
	  uc == '(' || uc == ')');
}
auto tunitas::urlsafe::detail::hexchar(unsigned char uc) -> char {
  auto offset = uc <= 9 ? '0' : 'A' - 10;
  return char(uc + offset);
}
auto tunitas::urlsafe::detail::packaging::hexpair_function::hexpair(unsigned char uc) -> Result {
  auto hi = uc / 16;
  auto lo = uc % 16;
  return Result{hexchar(hi), hexchar(lo)};
}
#import tunitas.urlsafe.decoder.Invalid
#import std.tolower
#import std.toupper
auto tunitas::urlsafe::detail::dehex(unsigned char uc) -> char {
  if (!isxdigit(uc)) {
    throw decoder::Invalid{};
  }
  if ('0' <= uc && uc <= '9') {
    return uc - '0';
  } else {
    // See the note in the interface from RFC 3986 about the use of upper case.
    return std::toupper(uc) - 'A' + 10;
  }
}
auto tunitas::urlsafe::detail::rehex(unsigned char hi, unsigned char lo) -> char {
  hi &= 0xf;
  lo &= 0xf;
  return char((hi << 4) | (lo << 0));
}
#endiv

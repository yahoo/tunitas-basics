// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
#divert <fpp>
#import tunitas.server.service
#import microhttpd.method.Permissions // and Access
#import microhttpd.method.Unregistered
#import microhttpd.method.Registered
namespace tunitas::server::resources {
  namespace [[packaging]] resources_packaging {
    namespace [[body]] body {
      using namespace service;
      using microhttpd::method::Access;
      using microhttpd::method::Unregistered;
      using microhttpd::method::Registered;
      namespace [[exported]] exported { }
    }
  }
  using namespace resources_packaging::body::exported;
}
#endiv
#divert <hpp>
#import tunitas.server.required.Permissioned
#import tunitas.server.required.Resourceful
namespace tunitas::server::resources::resources_packaging::body {
  namespace exported {
    //
    // Initialize the resource to allow or disallow the various HTTP verbs.
    //
    // Specification:
    //
    //   Initialize the permissions.
    //     Access::ALLOW starts from the empty set.
    //     Access::DENY does not reset the core object
    //   Naturally this means ALLOW-then-DENY
    //
    //   WATCHOUT - the microhttpd::Resource normally initializes the permissions to { OPTIONS, HEAD, GET }
    //   These initialization routines overwrite write that with the new set of permissions.
    //
    // Usage:
    //
    //   Taxonomy::Taxonomy() {
    //     resources::initialize(*this, true, GET, PUT, POST);
    //     resources::initialize(*this, false, OPTIONS, DELEET, CONNECT, TRACE);
    //   }
    //
    // [[FIXTHIS,STILLTRUE?]] bad design in libhttpserver wherein the base class is a template; not a template-over-a-concrete
    // [[WANT]] microhttpd++ which uses a stand-alone permissions subobject within the Resource.
    // [[TODO,FIXTHAT]] convert to modify the microhttpd resource permissions object directly.
    template<required::Resourceful CHILD, typename... VERBS> [[deprecated("instead of bool, prefer Access::ALLOW, Access::DISALLOW")]] inline auto initialize(CHILD &, bool value, VERBS const &...) -> void requires (required::Permissioned<VERBS> && ... && true);
    template<required::Resourceful CHILD> inline auto initialize(CHILD &, Access) -> void;
    template<required::Resourceful CHILD, required::Permissioned VERB, typename... REST> inline auto initialize(CHILD &, Access, VERB const &, REST const &...) -> void;
    //
    // Usage:
    //
    //   Audience::Audience() {
    //     resources::initialize_postable();
    //   }
    //
    //   Audience_Identifier::Audience_Identifier() {
    //     resources::initialize_puttable();
    //   }
    //
    template<required::Resourceful CHILD> inline auto initialize_only_get(CHILD &) -> void; //     only GET
    template<required::Resourceful CHILD> inline auto initialize_only_post(CHILD &) -> void; //    only POST
    template<required::Resourceful CHILD> inline auto initialize_getputpost(CHILD &) -> void; //   GET, PUT & POST
    template<required::Resourceful CHILD> inline auto initialize_putpost(CHILD &) -> void; //      PUT & POST (no GET)
    template<required::Resourceful CHILD> inline auto initialize_getpost(CHILD &) -> void; //      GET & POST (no PUT)
    template<required::Resourceful CHILD> inline auto initialize_getput(CHILD &) -> void; //       GET & PUT (no POST)
    template<required::Resourceful CHILD> inline auto initialize_getdelete(CHILD &) -> void; //    GET & DELETE
  }
  template<required::Resourceful CHILD> auto partially_initialize_gettable(CHILD &lhs) -> void;
}
#endiv
#divert <ipp>
#import nonstd.same_as
namespace tunitas::server::resources::resources_packaging {
  template<required::Resourceful CHILD> auto body::partially_initialize_gettable(CHILD &lhs) -> void { 
    if constexpr (true) {
        initialize(lhs, Access::ALLOW, Registered::GET);
      } else {
      // [[REMOVETHIS]] no need ... the default behavior of Permissions is "deny all" ... unless positivity (ALLOW) is asserted
      initialize(lhs, Access::DISALLOW, Registered::CONNECT, Registered::DELETE, Registered::HEAD, Registered::TRACE);
    }
  }
  namespace body {
    template<required::Resourceful CHILD, typename... VERBS> auto exported::initialize(CHILD &subject, bool value, VERBS const &...verbs) -> void requires (required::Permissioned<VERBS> && ... && true) {
      auto const access = value ? Access::ALLOW : Access::DISALLOW;
      initialize(subject, access, verbs...);
    }
    template<required::Resourceful CHILD> auto exported::initialize(CHILD & subject, Access value) -> void {
      // The base case is a NOT a no-opt because the default condition for microhttpd::method::Permissions is to turn ON OPTIONS, HEAD, GET
      if (Access::ALLOW == value) {
        subject.permissions = {};
      }
    }
    template<required::Resourceful CHILD, required::Permissioned VERB, typename... REST> auto exported::initialize(CHILD &subject, Access value, VERB const &verb, REST const &...rest) -> void {
      if constexpr(nonstd::same_as<VERB, Unregistered>) {
        subject.permissions.declare(verb); /// must declare the oddballs before use; but it's idempotent
      }
      subject.permissions.define(verb, value);
      initialize(subject, value, rest...);
    }
    template<required::Resourceful CHILD> auto exported::initialize_only_get(CHILD &lhs) -> void   { initialize(lhs, Access::ALLOW, Registered::GET); }
    template<required::Resourceful CHILD> auto exported::initialize_only_post(CHILD &lhs) -> void  { initialize(lhs, Access::ALLOW, Registered::POST); }
    template<required::Resourceful CHILD> auto exported::initialize_getputpost(CHILD &lhs) -> void { initialize(lhs, Access::ALLOW, Registered::GET, Registered::POST, Registered::PUT); }
    template<required::Resourceful CHILD> auto exported::initialize_getpost(CHILD &lhs) -> void    { initialize(lhs, Access::ALLOW, Registered::GET, Registered::POST); }
    template<required::Resourceful CHILD> auto exported::initialize_getput(CHILD &lhs) -> void     { initialize(lhs, Access::ALLOW, Registered::GET, Registered::PUT); }
    template<required::Resourceful CHILD> auto exported::initialize_getdelete(CHILD &lhs) -> void  { initialize(lhs, Access::ALLOW, Registered::GET, Registered::DELETE); }
    template<required::Resourceful CHILD> auto exported::initialize_putpost(CHILD &lhs) -> void    { initialize(lhs, Access::ALLOW, Registered::POST, Registered::PUT); }
  }
}
#endiv

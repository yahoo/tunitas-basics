// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
#divert <fpp>
#import tunitas.server.service
#import tunitas.server.constants
namespace tunitas::server::responses {
  using namespace service; // Transport, Response, render::Builder
  using namespace constants;
}
#endiv
#divert <hpp>
namespace tunitas::server::responses {
  //
  // Standardized (server) responses
  //
  // If there was another response already set up then it is destroyed.
  // This standardized (emergency) response replaces it.
  //
  // Usage:
  //
  //   try {
  //     ...try to establiesh the response...
  //   } catch (std::exception const &) {
  //     internal_server_error(*fill);
  //   }
  //
  inline auto internal_server_error() -> Transport;
  inline auto internal_server_error(std::string const &reason) -> Transport;
  //
  // There was some problem with the input data
  //
  inline auto bad_request() -> Transport;
  inline auto bad_request(std::string const &reason) -> Transport;
}
#endiv
#divert <ipp>
namespace tunitas::server {
  auto responses::internal_server_error() -> Transport { return internal_server_error("internal server error"); }
  auto responses::internal_server_error(std::string const &reason) -> Transport {
    auto const &content_body = reason;
    auto const code = http::R500_INTERNAL_SERVER_ERROR;
    auto const &content_type = mime::TEXT_PLAIN;
    auto bob = render::Builder{};
    return bob.response(code).content_type(content_type).body(move(content_body)).build();
  }
  auto responses::bad_request() -> Transport { return bad_request("bad request"); }
  auto responses::bad_request(std::string const &reason) -> Transport {
    auto content_body = reason;
    auto const code = http::R400_BAD_REQUEST;
    auto const &content_type = mime::TEXT_PLAIN;
    auto bob = render::Builder{};
    return bob.response(code).content_type(content_type).body(move(content_body)).build();
  }
}
#endiv

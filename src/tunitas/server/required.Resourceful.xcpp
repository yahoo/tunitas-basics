// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-basics/blob/master/LICENSE for terms.
#divert <fpp>
#import httpserver.Request //  [[reminder]] need the complete type
#import httpserver.Response // [[reminder]] ibidem.
#import std.string //          [[reminder]] ibidem.
#import tunitas.server.service
namespace tunitas::server::required {
  using namespace service;
  //
  // The concept of a (descendant) of httpserver::Resource<CHILD>
  //
  template<typename RESOURCEFUL> concept bool Resourceful = requires(RESOURCEFUL resourceful, Request request, Response *response, std::string name, bool value) {
    { resourceful.allow_all() } -> void;
    { resourceful.render(request, &response) };
    { resourceful.render_CONNECT(request, &response) };
    { resourceful.render_DELETE(request, &response) };
    { resourceful.render_GET(request, &response) };
    { resourceful.render_HEAD(request, &response) };
    { resourceful.render_OPTIONS(request, &response) };
    { resourceful.render_POST(request, &response) };
    { resourceful.render_PUT(request, &response) };
    { resourceful.render_TRACE(request, &response) };
    { resourceful.set_allowing(name, value) } -> void;
    { resourceful.disallow_all() } -> void;
    { resourceful.is_allowed(name) } -> bool;
  };
}
#endiv

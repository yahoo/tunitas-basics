// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
#divert <fpp>
#import microhttpd.Request
#import microhttpd.Resource
#import microhttpd.Response
#import microhttpd.render.Builder
namespace tunitas::server::service {
  //
  // A namespace package.
  //
  // Scope & Mandate:
  //
  //   The "service" is a glue layer between the HTTP layer (HTTP services) and the application itself.
  //   Typically the application will have a "namespace storage" or "namespace member" or such where its rich function lives.
  //   The service layer provides the glue between these two; The resources are at the intersection of these two layers. 
  //
  // Specification:
  //
  //   Bundle up some names that will be necessary for the doenstream applications.
  //   
  //   From the documentariat in:
  //     microhttpd::Resource  ..... a.k.a. microhttpd::resource::Resource
  //     microhttpd::Transport ..... a.k.a. microhttpd::rest::Transport
  //
  // Usage:
  //
  //   namespace something::this::that {
  //     using namespace tunitas::server::service;
  //   }
  //
  using microhttpd::Resource;
  using microhttpd::Request;
  using microhttpd::Response;
  using microhttpd::Transport;
  namespace render {
    using microhttpd::render::Builder;
  }
}
#endiv
#divert <cpp>
// Of course, this is test code
namespace {
  namespace testate {
    using namespace tunitas::server::service;
    struct Resourceful : public microhttpd::Resource {
      auto otherwise(Request const &) -> Transport;
    };
    static_assert(sizeof (Resource));
    static_assert(sizeof (Request));
    static_assert(sizeof (Response));
    static_assert(sizeof (Transport));
    static_assert(sizeof (render::Builder));
  }
}
#endiv

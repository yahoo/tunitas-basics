// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
#divert <fpp>
namespace tunitas::server::exception {
  //
  // The generic server exception aspect
  // Descendants only.
  // Set up as an Ancestor to the mixin tree so that STL exceptions can be mixed in as well.
  //
  // These are wholly distinct from the tunitas::app::exceptions which have a
  // text user interface aspect to them. The server exceptions are not expected
  // to escape from the thread whence they came.  These are expected to have terse,
  // rudimentary expressions in 'what()'
  //
  // Usage:
  //
  //   class my::server::Problem : public tunitas::server::exception::Aspect,
  //                               public std::runtime_error {
  //     ...
  //   };
  //   class my::server::Difficulty : public tunitas::server::exception::Aspect,
  //                                  public std::logic_error {
  //     ...
  //   };
  //
  //   try {
  //     ...
  //     throw my::Problem{...};
  //     throw my::Difficulty{...};
  //     ...
  //   } catch (exception::Aspect const &g) {
  //     ... fix it...
  //   }
  //
  class Aspect;
}
#endiv
#divert <hpp>
class tunitas::server::exception::Aspect {
protected:
  virtual ~Aspect() = default;
  Aspect() = default;
  // The other side of the mixin must provide the messaging
  // c.f. tunitas::exception::feature::Messaging if you want to throw string messages
public:
  virtual auto what() const noexcept -> char const * = 0;
};
#endiv

// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
#divert <hpp>
#import std.string
#import std.string_view
#import tunitas.required.Container_Push_Back
#import std.is_same
#import std.vector
namespace tunitas::base64 {
  //
  // Decode the base64 in the source, returning the result in a container.
  //
  // Usage:
  //
  //   try {
  //     auto decoded = decode<std::string>("deadbeef");
  //     ...do something with it...
  //   } catch (Exception const &e) {
  //     std::string why = e.what();
  //     ...explain...
  //   }
  //
  template<required::Container_Push_Back RESULT> inline auto decode(std::string_view source) -> RESULT;
  inline auto decode(std::string_view source) -> std::string;
  template<> inline auto decode<std::vector<bool>>(std::string_view) -> std::vector<bool>;
  //
  template<required::Container_Push_Back RESULT> inline auto decode(std::string const &source) -> RESULT;
  inline auto decode(std::string const &source) -> std::string;
  template<> inline auto decode<std::vector<bool>>(std::string const &) -> std::vector<bool>;
}
#endiv
#divert <ipp>
#import std.move
#import tunitas.base64.Decoder
#import tunitas.base64.decode.detail
namespace tunitas {
  template<required::Container_Push_Back RESULT> inline auto base64::decode(std::string_view source) -> RESULT {
    return detail::decode_Nbit<RESULT>(source);
  }
  auto base64::decode(std::string_view source) -> std::string {
    return detail::decode_Nbit<std::string>(source);
  }
  template<> auto base64::decode<std::vector<bool>>(std::string_view source) -> std::vector<bool> {
    return detail::decode_1bit<std::vector<bool>>(source);
  }
}
namespace tunitas {
  auto base64::decode(std::string const &source) -> std::string {
    return decode<std::string>(std::string_view{source.data(), source.size()});
  }
  template<required::Container_Push_Back RESULT> auto base64::decode(std::string const &source) -> RESULT {
    return detail::decode_Nbit<RESULT>(std::string_view{source.data(), source.size()});
  }
  template<>  auto base64::decode<std::vector<bool>>(std::string const &source) -> std::vector<bool> {
    return detail::decode_1bit<std::vector<bool>>(std::string_view{source.data(), source.size()});
  }
}
#endiv

// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
#divert <fpp>
#import tunitas.base64.Encoder
#endiv
#divert <hpp>
#import std.uintmax_t
struct tunitas::base64::Encoder::test::Access {
  Encoder &subject;
  explicit Access(Encoder &);
  // More Keys Under Doormats.  
  static auto encode(std::uintmax_t) -> char;
  auto dump() -> void;
};
#endiv
#divert <cpp>
#import std.cerr
#import std.boolalpha
namespace tunitas::base64 {
  Encoder::test::Access::Access(Encoder &subject)
    : subject(subject) { }

  auto Encoder::test::Access::encode(std::uintmax_t value) -> char {
    return Encoder::encode(value);
  };
  auto Encoder::test::Access::dump() -> void {
    std::ostream &outbound{std::cerr};
    outbound << "state: (" << subject.buffer.size() << " bits) ";
    outbound << std::noboolalpha;
    for (auto b : subject.buffer) {
      outbound << b;
    }
    outbound << '\n';
  }
}
#endiv

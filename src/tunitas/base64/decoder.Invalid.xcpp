// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
#divert <fpp>
namespace tunitas::base64::decoder {
  //
  // An invalid aspect of the base64 decoder job itself.
  // Or an invalid date of the Decoder,
  //    (ahem) the Decoder being an argument operations upon itself.
  //
  // Usage:
  //
  //   throw decoder::Invalid("cannot");
  //
  class Invalid;
}
#endiv
#divert <hpp>
#import std.runtime_error
#import tunitas.base64.Exception
#include <stdexcept>
class tunitas::base64::decoder::Invalid : public std::runtime_error, public base64::Exception {
  using ancestor = std::runtime_error;
public:
  inline Invalid() : ancestor("invalid") { }
  using ancestor::runtime_error;
  auto what() const noexcept -> char const * { return ancestor::what(); }
};
#endiv

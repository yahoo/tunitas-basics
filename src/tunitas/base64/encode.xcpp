// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
#divert <hpp>
#import std.string
#import tunitas.required.Container_Push_Back
#import tunitas.required.Octet
namespace tunitas::base64 {
  //
  //
  // Decode the base64 in the source, returning the result in a container.
  //
  // Usage:
  //
  //   try {
  //     auto encoded = encode("plaintext");
  //     ...do something with it...
  //   } catch (Exception const &e) {
  //     std::string why = e.what();
  //     ...explain...
  //   }
  //
  inline auto encode(std::string const &source) -> std::string;
  template<typename RESULT> inline auto encode(std::string const &source) -> RESULT requires required::Container_Push_Back<RESULT> && required::Octet<typename RESULT::value_type>;
}
#endiv
#divert <ipp>
#import std.string
#import tunitas.base64.Encoder
auto tunitas::base64::encode(std::string const &source) -> std::string {
  return encode<std::string>(source);
}
template<typename RESULT> auto tunitas::base64::encode(std::string const &source) -> RESULT requires required::Container_Push_Back<RESULT> && required::Octet<typename RESULT::value_type> {
  Encoder enc;
  enc.put(source);
  enc.put(Encoder::PAD8);
  return enc.finalize<RESULT>();
}
#endiv

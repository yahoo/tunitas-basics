// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-basics/blob/master/LICENSE for terms.
#divert <fpp>
namespace tunitas::exception::aspect {
  //
  // A mixin to provide stored messaging to an exception descendant.
  // Descendants only.
  //
  // This functionality is "baked into" std::runtime_error,
  // however when it is inappropriate to use std::runtime_error because the exception
  // is used to signal a condition that is:
  //   "not an error at the time of program execution,"
  //   "not at the time of program running,"
  // then some other scheme must be used to provide the required invariant.
  // 
  // Usage:
  //
  //   class my::Message : public Aspect, public aspect::Messaging, public std::exception {
  //     using Messaging = aspect::Messaging;
  //     using Exception = std::exception;
  //   public:
  //     Message(std::string const &NAME) : Messaging{format(NAME)} { }
  //     auto what() const noexcept -> char const * final {
  //       return Messaging::what();
  //     }
  //     static auto format(std::string const &NAME) -> std::string {
  //       return "usage: " + NAME + " [...options...]";
  //     }
  //   };
  //
  //   try {
  //     throw Message{"program"};
  //     throw std::runtime_error{"that was bad"};
  //   } catch (Generic const &g) {
  //     g.stream() << g << '\n';
  //     return g.code();
  //   }
  //
  class Messaging;
}
#endiv
#divert <hpp>
#import std.string
#import std.shared_ptr
class tunitas::exception::aspect::Messaging {
protected:
  virtual ~Messaging() = default;
  inline explicit Messaging(std::string message);
public:
  // Same signature as in std::exception::what() but cannot inherit from std::exception
  virtual auto what() const noexcept -> char const *;
protected:
  // An exception must offer the nothrow guarantee on copy
  using Nothrow_String = std::shared_ptr<std::string>;
  Nothrow_String stored_message;
};
#endiv
#divert <ipp>
#import std.move
#import std.make_shared
tunitas::exception::aspect::Messaging::Messaging(std::string message)
  : stored_message{std::make_shared<std::string>(std::move(message))}
{ }
#endiv
#divert <cpp>
auto tunitas::exception::aspect::Messaging::what() const noexcept -> char const * {
  return stored_message->c_str();
}
#endiv

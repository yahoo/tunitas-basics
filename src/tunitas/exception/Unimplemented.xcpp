// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
#divert <fpp>
namespace tunitas::exception {
  //
  // Something is unimplemented (at runtime)
  //
  // Design:
  //
  //   The default+conversion constructor MUST be repeated so that the call-site current source location is captured (correctly).
  //
  // Usage:
  //
  //   throw exception::Unimplemented{};
  //
  struct [[nodiscard]] Unimplemented;
}
#endiv
#divert <hpp>
#import tunitas.exception.partial.Unimplemented
class tunitas::exception::Unimplemented final : public partial::Unimplemented {
  using Ancestor = partial::Unimplemented;
public:
  explicit Unimplemented(Location location = Location::current()) : Ancestor{location} { }
  using Ancestor::Unimplemented;
};
#endiv
#divert <cpp>
#import tunitas.exception.usage.Exception
#import tunitas.exception.usage.Derived_From
namespace {
  namespace testate {
    namespace usage = tunitas::exception::usage;
    using tunitas::exception::Unimplemented;
    static_assert(usage::Exception<Unimplemented>);
    static_assert(usage::Derived_From<Unimplemented, std::runtime_error>);
  }
}
#endiv

// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
#divert <fpp>
namespace tunitas::exception {
  //
  // The aspect of generic application exception
  // This is a mixin, hence the name.
  // Descendants only.
  // It is set up as an Ancestor to the mixin tree so that STL exceptions can be mixed in as well.
  //
  // The descendants of Aspect give some of the flavorings that are expected
  // e.g. Quitting, Usage, Version.
  //
  // WATCHOUT - the constructor signature of the Tunitas exceptio hierarchy is subtly different
  // than that used by the traditional applications of S.C.O.L.D.  That is convention, not a requirement.
  //
  // Usage:
  //
  //   class my::Usage : public tunitas::exception::aspect::Usage, public std::runtime_error { ... };
  //   class my::Version : public tunitas::exception::aspect::Version, public std::runtime_error { ... };
  //   class my::Quitting : public tunitas::exception::aspect::Quitting, public std::runtime_error { ... };
  //
  //   try {
  //     ...
  //     throw my::Usage{NAME, sys::exits::FAIL};
  //     throw my::Version{NAME};
  //     throw my::Quitting{NAME, "because"};
  //     ...
  //   } catch (exception::Aspect const &g) {
  //     g.stream() << g << '\n';
  //     return g.code();
  //   }
  //
  class Aspect;
}
#endiv
#divert <hpp>
#import std.ostream
namespace tunitas::exception {
  //
  // No wide character support [[HOW?]] how would we change that?
  // No newline is supplied; the Aspect::what() should NOT have its own terminating newline.
  //
  // [[deprecated]] This interface is deprecated with v1.9-series.
  // [[deprecated]] There iis too much potential for ambiguity and disutility.
  // [[deprecated]] To avoid, one calls a.what() directly.
  //
  [[deprecated("call a.what() directly")]] inline auto operator<<(std::ostream &, Aspect const &) -> std::ostream &;
}
#import sys.exits.Code
class tunitas::exception::Aspect {
protected:
  virtual ~Aspect() = default;
  Aspect() = default;
public:
  struct Results {
    using What = char const *;
  };
  virtual auto what() const noexcept -> Results::What = 0;
};
#endiv
#divert <ipp>
auto tunitas::exception::operator<<(std::ostream &o, Aspect const &a) -> std::ostream & {
  return o << a.what();
}
#endiv

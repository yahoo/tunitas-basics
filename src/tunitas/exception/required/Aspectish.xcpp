// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
#divert <fpp>
#import std.is_abstract
#import nonstd.required.Class
namespace tunitas::exception::required {
  //
  // Is this type shaped like an Aspect?
  //
  // The complete type of ASPECT is required to evaluate Aspectish<ASPECT>
  //
  template<typename ASPECTISH> concept Aspectish = requires(ASPECTISH const &aspectish) {
    requires required::Class<ASPECTISH>;
    requires std::is_abstract_v<ASPECTISH>;
    typename ASPECTISH::Results::What;
    requires convertible_to<typename ASPECTISH::Results::What, char const *>;
    { aspectish.what() } -> convertible_to<typename ASPECTISH::Results::What>;
  };
}
#endiv

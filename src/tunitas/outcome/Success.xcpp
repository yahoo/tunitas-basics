// -*- c++ -*- with SCOLD stylings
#divert <fpp>
#import tunitas.outcome.Variant
namespace tunitas::outcome {
  //
  // An outcome when nothing helpful is returned on success
  // but there are many ways to exhibit a failure.
  // This is not Outcome<bool> because there is never 'false' on the success path.
  //
  // Unlike the underlying Outcome<TYPE> the default constructor computes success.
  //
  // The default constructor is indeterminate.
  //
  // Usage:
  //
  //   auto compute() -> outcome::Success;
  //   auto computed  = compute();
  //   if (ok(computed)) {
  //     ...it worked, carry on...
  //   } else {
  //     auto ec = error_code(computed);
  //     std::cerr << "of the many ways to fail" << ec.message() << '\n';
  //   }
  //
  //   auto good = Success{SUCCESS};   ... only one way to succeed: with SUCCESS.
  //   auto failure = Success{std::error_code{error::Code::THAT_HURT}};
  //   auto failure = Success{std::error_code{error::Code::THAT_WAS_BAD}};
  //   auto failure = Success{std::error_code{error::Code::OH_MY_STARS}};
  //
  namespace detail { class Success { }; }
  constexpr auto SUCCESS = detail::Success{};
  using Success = Variant<detail::Success>;
}
#endiv

// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-basics/blob/master/LICENSE for terms.
// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-basics/blob/master/LICENSE for terms.
#divert <fpp>
#import tunitas.required.Outcomable
#import tunitas.outcome.Variant
#import std.variant
#import std.error_code
namespace tunitas::outcome::variant {
  //
  // Declarative inheritance.
  // In support of the template tunitas::outcome::visit(VISITOR &&, VARIANT &&)
  //
  template<required::Outcomable VALUE> struct Ancestor;
  template<required::Outcomable VALUE> struct Ancestor<Variant<VALUE>>;
  template<required::Outcomable VALUE> struct Ancestor<std::variant<std::error_code, VALUE>>;
}
#endiv
#divert <hpp>
namespace tunitas::outcome::variant {
  template<required::Outcomable VALUE> struct Ancestor<std::variant<std::error_code, VALUE>> {
    // New_School
    using Type = std::variant<std::error_code, VALUE>;
    // old_school
    using type = Type;
  };
  template<required::Outcomable VALUE> struct Ancestor<Variant<VALUE>> : public Ancestor<std::variant<std::error_code, VALUE>> { };
}
#endiv

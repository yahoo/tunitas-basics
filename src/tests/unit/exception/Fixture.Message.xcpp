// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
#divert <fpp>
#include <tests.unit.exception.Fixture>
#endiv
#divert <hpp>
#import tunitas.exception.feature.Messaging
#import std.exception
class tests::unit::exception::Fixture::Message : public ::tunitas::exception::feature::Messaging, public std::exception {
  // To use the Messaging mixin, we inherit from std::exception instead of std::runtime_error.
  struct Ancestors {
    using Aspect = ::tunitas::exception::feature::Messaging;
    using Exception = std::exception;
  };
public:
  Message(std::string);
  auto what() const noexcept -> char const * final;
};
#endiv
#divert <cpp>
#import std.move
namespace tests::unit::exception {
  Fixture::Message::Message(std::string text)
    : Ancestors::Aspect{std::move(text)}
    , Ancestors::Exception{}
  { }
  auto Fixture::Message::what() const noexcept -> char const * {
    return Ancestors::Aspect::what();
  }
}
#endiv

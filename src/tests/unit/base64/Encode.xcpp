// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
#divert <fpp>
namespace tests::unit::base64 { class Encode; }
#endiv
#divert <hpp>
class tests::unit::base64::Encode : public cppunit::test::Fixture {
public:
  auto test_01() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.cerr
#import tunitas.base64.encode
auto tests::unit::base64::Encode::test_01() -> void {
  // These have no real provenance; they came from log files.
  static char const *const pantheon[] = {
    "",
    "apple",
    "apple, banana, cherry",
    "1234",
    "the lazy brown fox did something something something.",
  };
  for (auto specimen : pantheon) {
    try {
      std::cerr << "encode specimen: " << specimen << ' ';
      auto str = tunitas::base64::encode(specimen);
      std::cerr << " recovers |" << str << "|\n";
    } catch (...) {
      std::cerr << '\n';
      throw;
    }
  }
}
auto tests::unit::base64::Encode::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  Stream series("encode");
  series << call("01", &Encode::test_01)
    ;
  return finalize(series);
}
#endiv

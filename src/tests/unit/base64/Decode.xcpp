// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
#divert <fpp>
namespace tests::unit::base64 { class Decode; }
#endiv
#divert <hpp>
class tests::unit::base64::Decode : public cppunit::test::Fixture {
public:
  auto test_01() -> void;
  auto test_02() -> void;
  template<typename CONTAINER> auto test_returning_safe8() -> void;
  template<typename CONTAINER> auto test_returning_unsafe_not8() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <tpp>
#import std.type_info
#import tunitas.base64.decode
#import tests.unit.base64.printable
namespace tests::unit::base64 {
  template<typename CONTAINER> auto Decode::test_returning_safe8() -> void {
    using Subject = CONTAINER;
    try {
      auto const specimen = "BOKU6XeOKU6XeAAABAENAAAAAAAAoIA=="sv;
      std::cerr << "tunitas::base64::decode<" << typeid(Subject).name() << ">(...), specimen: " << specimen << ' ';
      auto subject = tunitas::base64::decode<Subject>(specimen);
      std::cerr << " recovers |" << printable(subject) << "|\n";
    } catch (::tunitas::base64::decoder::Invalid const &e) {
      CPPUNIT_ASSERT(false);
    }
  }
  template<typename CONTAINER> auto Decode::test_returning_unsafe_not8() -> void {
    using Subject = CONTAINER;
    try {
      auto const specimen = "BOKU6XeOKU6XeAAABAENAAAAAAAAoIA=="sv;
      std::cerr << "tunitas::base64::decode<" << typeid(Subject).name() << ">(...), specimen: " << specimen << ' ';
      auto subject = tunitas::base64::decode<Subject>(specimen);
      // SHOULD NOT be reached because Underflow should have been thrown
      CPPUNIT_ASSERT(false);
    } catch (::tunitas::base64::decoder::Underflow const &e) {
      // MUST be reached because Underflow has to be thrown when asking for decode into a multiple of 8 bits
      CPPUNIT_ASSERT(true);
    }
  }
}
#endiv
#divert <cpp>
#import std.string
#import std.string_literals
#import std.cerr
#import tunitas.base64.decode
#import tunitas.base64.Exception
#import tunitas.base64.decoder.Invalid
using namespace std::literals;
auto tests::unit::base64::Decode::test_01() -> void {
  // These have no real provenance; they came from log files.
  static std::string const pantheon[] = {
    "BOKU6XeOKU6XeAAABAENAAAAAAAAoIA==",
    // WATCHOUT ... these are not known-proven good, they may be missing equals signs.
    // WATCHOUT ... they may not be multiples of 8 bytes either, so only decode<std::vector<bool>(...) is "safe"
    "BOKkT2tOKkT2tAAABAENAAAAAAAArABAAAA",
    "BOKkT2tOKkT2tAAABAENAAAAAAAArABgAAAAAA",
    "BOKU6XeOKU6XeAAABAENAAAAAAAArABAAAA",
    "BOKU6XeOKU6XeAAABAENAAAAAAAArABgAAAAAA",
    "BOKXjmcOKXjmcAOABAENACgAADABkAAADA",
    "BOKXjmcOKXjmcAOABAENACAAAAABnABAACA",
    "BOKXjmcOKXjmcAOABAENACAAAAABnABgACAAIA",
    "BOKXjmcOKXjmcAOABAENACAAAAAAU8A",
    "BOEFBi5OEFBi5AABAENABQAAAAAAMAADAAQABQ=",
    "BOKXjmcOKXjmcAOABAENACAAAAAAvACAADAAEAAQ",
    "BOKXjmcOKXjmcAOABAENABgAAAABkAAABA",
    "BOKXjmcOKXjmcAOABAENACAAAAAAU8A",
  };
  for (auto specimen : pantheon) {
    try {
      std::cerr << "tunitas::base64::decode(try#1) specimen: " << specimen << ' ';
      auto str = tunitas::base64::decode(specimen);
      std::cerr << " recovers |" << str << "|\n";
    } catch (tunitas::base64::decoder::Invalid const &e) {
      std::cerr << "\ndecode(try#1) failed because " << e.what() << '\n'
            << "\nretrying with one more '=' ...\n";
      try {
        specimen += '=';
        std::cerr << "decode(try#2) specimen: " << specimen << ' ';
        auto str = tunitas::base64::decode(specimen);
        std::cerr << " recovers |" << str << "|\n";
      } catch (tunitas::base64::decoder::Invalid const &e) {
        std::cerr << "\ndecode(try#2) failed because " << e.what()
              << "\nretrying with yet another more '=' ...\n";
        try {
          specimen += '=';
          std::cerr << "decode(try#3) specimen: " << specimen << ' ';
          auto str = tunitas::base64::decode(specimen);
          std::cerr << " recovers |" << str << "|\n";
        } catch (tunitas::base64::decoder::Invalid const &e) {
          std::cerr << "\ndecode(try#3) failed as well because " << e.what()
                << "\nabandoning this specimen as unworkable"; // no \n
          throw;
        }
      }
    } catch (...) {
      std::cerr << '\n';
      try {
        throw;
      } catch (tunitas::base64::Exception const &e) {
        std::cerr << "   decode threw an unexpected exception saying '" << e.what() << "'\n";
      }
    }
  }
}
#import tests.unit.UNREACHABLE
auto tests::unit::base64::Decode::test_02() -> void {
  // These have no real provenance; they came from log files.
  static std::string busted[] = {
    "BOKU6XeOKU6XeAAABAENAAAAAAAAQIA", // missing ==
  };
  for (auto specimen : busted) {
    try {
      std::cerr << "decode specimen: " << specimen << ' ';
      auto str = tunitas::base64::decode(specimen);
      std::cerr << " recovers |" << str << "|\n";
      __UNREACHABLE__;
    } catch (tunitas::base64::Exception const &e) {
      __REACHABLE__;
      std::cerr << " (good, expected) decode fails saying '" << e.what() << "'\n";
    }
  }
}
auto tests::unit::base64::Decode::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  Stream series("decode");
  series << call("01", &Decode::test_01)
	 << call("02", &Decode::test_02)
    ;
  {
    Stream saf("returning");
    saf << call("std::vector<bool>", &Decode::test_returning_safe8<std::vector<bool>>)
      ;
    {
      // These are unsafe (a.k.a. not known safe) because they try to extract multiples of 8 bits
      // and the string may not contain that many bits in it.  The decoder will underflow because
      // the encoded string denotes not-a-multiple of 8 bits.
      Stream uns("unsafe");
      uns << call("std::string", &Decode::test_returning_unsafe_not8<std::string>)
          << call("std::vector<char>", &Decode::test_returning_unsafe_not8<std::vector<char>>)
          << call("std::vector:byte>", &Decode::test_returning_unsafe_not8<std::vector<std::byte>>)
        ;
      saf << move(uns);
    }
    series << move(saf);
  }
  return finalize(series);
}
#endiv

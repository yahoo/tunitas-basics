// -*- c++ -*- with SCOLD stylings
#divert <fpp>
namespace tests::unit::base64 { class Decode; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::base64::Decode : public cppunit::test::Fixture {
public:
  auto test_01() -> void;
  auto test_02() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.string
#import std.string_literals
#import std.cerr
#import tunitas.base64.decode
#import tunitas.base64.Exception
#import tunitas.base64.decoder.Invalid
using namespace std::literals;
auto tests::unit::base64::Decode::test_01() -> void {
  // These have no real provenance; they came from log files.
  static std::string const pantheon[] = {
    "BOKU6XeOKU6XeAAABAENAAAAAAAAoIA==",
    // ... these are not known-proven good, they may be missing equals signs.
    "BOKkT2tOKkT2tAAABAENAAAAAAAArABAAAA",
    "BOKkT2tOKkT2tAAABAENAAAAAAAArABgAAAAAA",
    "BOKU6XeOKU6XeAAABAENAAAAAAAArABAAAA",
    "BOKU6XeOKU6XeAAABAENAAAAAAAArABgAAAAAA",
    "BOKXjmcOKXjmcAOABAENACgAADABkAAADA",
    "BOKXjmcOKXjmcAOABAENACAAAAABnABAACA",
    "BOKXjmcOKXjmcAOABAENACAAAAABnABgACAAIA",
    "BOKXjmcOKXjmcAOABAENACAAAAAAU8A",
    "BOEFBi5OEFBi5AABAENABQAAAAAAMAADAAQABQ=",
    "BOKXjmcOKXjmcAOABAENACAAAAAAvACAADAAEAAQ",
    "BOKXjmcOKXjmcAOABAENABgAAAABkAAABA",
    "BOKXjmcOKXjmcAOABAENACAAAAAAU8A",
  };
  for (auto specimen : pantheon) {
    try {
      std::cerr << "tunitas::base64::decode(try#1) specimen: " << specimen << ' ';
      auto str = tunitas::base64::decode(specimen);
      std::cerr << " recovers |" << str << "|\n";
    } catch (tunitas::base64::decoder::Invalid const &e) {
      std::cerr << "\ndecode(try#1) failed because " << e.what() << '\n'
            << "\nretrying with one more '=' ...\n";
      try {
        specimen += '=';
        std::cerr << "decode(try#2) specimen: " << specimen << ' ';
        auto str = tunitas::base64::decode(specimen);
        std::cerr << " recovers |" << str << "|\n";
      } catch (tunitas::base64::decoder::Invalid const &e) {
        std::cerr << "\ndecode(try#2) failed because " << e.what()
              << "\nretrying with yet another more '=' ...\n";
        try {
          specimen += '=';
          std::cerr << "decode(try#3) specimen: " << specimen << ' ';
          auto str = tunitas::base64::decode(specimen);
          std::cerr << " recovers |" << str << "|\n";
        } catch (tunitas::base64::decoder::Invalid const &e) {
          std::cerr << "\ndecode(try#3) failed as well because " << e.what()
                << "\nabandoning this specimen as unworkable"; // no \n
          throw;
        }
      }
    } catch (...) {
      std::cerr << '\n';
      try {
        throw;
      } catch (tunitas::base64::Exception const &e) {
        std::cerr << "   decode threw an unexpected exception saying '" << e.what() << "'\n";
      }
    }
  }
}
#import tests.unit.UNREACHABLE
auto tests::unit::base64::Decode::test_02() -> void {
  // These have no real provenance; they came from log files.
  static std::string busted[] = {
    "BOKU6XeOKU6XeAAABAENAAAAAAAAQIA", // missing ==
  };
  for (auto specimen : busted) {
    try {
      std::cerr << "decode specimen: " << specimen << ' ';
      auto str = tunitas::base64::decode(specimen);
      std::cerr << " recovers |" << str << "|\n";
      __UNREACHABLE__;
    } catch (tunitas::base64::Exception const &e) {
      __REACHABLE__;
      std::cerr << " (good, expected) decode fails saying '" << e.what() << "'\n";
    }
  }
}
#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
#import unit.rigging.suite.add
auto tests::unit::base64::Decode::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream series("encode");
  series << call("01", &Decode::test_01)
	 << call("02", &Decode::test_02)
    ;
  return series.release();
}
#endiv

// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-basics/blob/master/LICENSE for terms.
#divert <fpp>
namespace tests::unit::tunitas { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import std.error_code
class tests::unit::tunitas::Fixture : public cppunit::test::Fixture {
public:
  auto test_Success() -> void;
  auto test_SUCCESS() -> void;
  auto test_Outcome() -> void;
  static auto suite() -> cppunit::Test *;
protected:
  auto generate_some_error_code() -> std::error_code;
};
#endiv
#divert <cpp>
#import std.errc
#import std.error_code
#import std.error_condition
#import std.system_category
auto tests::unit::tunitas::Fixture::generate_some_error_code() -> std::error_code {
  // Too cute.  We just need an error code number; any number will do.
  auto recondition = std::error_condition{std::errc::no_such_file_or_directory};
  return std::error_code{recondition.value(), std::system_category()};
}
#import tunitas
#import tunitas.Success
auto tests::unit::tunitas::Fixture::test_Success() -> void {
  auto good = ::tunitas::Success{::tunitas::SUCCESS};
  CPPUNIT_ASSERT(ok(good));
  auto bad = ::tunitas::Success{generate_some_error_code()};
  CPPUNIT_ASSERT(!ok(bad));
}
auto tests::unit::tunitas::Fixture::test_SUCCESS() -> void {
  // We just tested the SUCCESS literal in the previous test
  CPPUNIT_ASSERT(true);
}
#import tunitas.Outcome
auto tests::unit::tunitas::Fixture::test_Outcome() -> void {
  auto good = ::tunitas::Outcome<int>{3};
  CPPUNIT_ASSERT(ok(good));
  auto bad = ::tunitas::Outcome<int>{generate_some_error_code()};
  CPPUNIT_ASSERT(!ok(bad));
}
#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
#import unit.rigging.suite.add
auto tests::unit::tunitas::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream series("tunitas");
  series << call("Success", &Fixture::test_Success)
         << call("SUCCESS", &Fixture::test_SUCCESS)
         << call("Success", &Fixture::test_Outcome)
    ;
  return series.release();
}
#endiv

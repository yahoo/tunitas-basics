// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-basics/blob/master/LICENSE for terms.
#divert <fpp>
namespace tests::unit::required { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::required::Fixture : public cppunit::test::Fixture {
public:
  auto test_Iterator_Producing_filepath() -> void;
  auto test_Iterator_Producing_string() -> void;
  auto test_Default_Constructible() -> void;
  auto test_Move_Constructible() -> void;
  auto test_Stringable() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import tunitas.required.Iterator_Producing
#import tunitas.app.options.Args
#import tunitas.app.words.Strings
#import std.string
auto tests::unit::required::Fixture::test_Iterator_Producing_string() -> void {
  static_assert(::tunitas::required::Iterator_Producing<::tunitas::app::words::Strings::iterator, std::string>);
  static_assert(::tunitas::required::Iterator_Producing<::tunitas::app::options::Args::iterator, std::string>);
}
#import tunitas.app.words.Filepaths
auto tests::unit::required::Fixture::test_Iterator_Producing_filepath() -> void {
  static_assert(::tunitas::required::Iterator_Producing<::tunitas::app::words::Filepaths::iterator, std::filesystem::path>);
}
#import tunitas.required.Default_Constructible
auto tests::unit::required::Fixture::test_Default_Constructible() -> void {
  static_assert(::tunitas::required::Default_Constructible<std::string>);
}
#import tunitas.required.Move_Constructible
auto tests::unit::required::Fixture::test_Move_Constructible() -> void {
  static_assert(::tunitas::required::Move_Constructible<std::string>);
}
#import tunitas.required.Stringable
auto tests::unit::required::Fixture::test_Stringable() -> void {
  static_assert(::tunitas::required::Stringable<std::string>);
  static_assert(::tunitas::required::Stringable<char const *>);
}
#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
#import unit.rigging.suite.add
auto tests::unit::required::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream series("required");
  series << call("Stringable", &Fixture::test_Stringable)
         << call("Default_Constructible", &Fixture::test_Default_Constructible)
         << call("Move_Constructible", &Fixture::test_Move_Constructible)
    ;
  {
    Stream ite("Iterator_Producing");
    ite << call("String", &Fixture::test_Iterator_Producing_string)
        << call("Filepath", &Fixture::test_Iterator_Producing_filepath)
      ;
    series << add(ite.release());
  }
  return series.release();
}
#endiv

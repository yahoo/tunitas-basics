// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
#divert <fpp>
#import tests.unit.application.Drop
#endiv
#divert <hpp>
#import std.runtime_error
#import tunitas.application.exception.Aspect
#import tunitas.application.exception.aspect.Quitting
#import tunitas.application.options.Program
#import std.string
#import cli.exits.Code
class tests::unit::application::Drop::Quitting : public ::tunitas::application::exception::Aspect, public tunitas::application::exception::aspect::Quitting, public std::runtime_error {
  using appware = tunitas::application::exception::aspect::Quitting;
  using stdware = std::runtime_error;
  using Program = tunitas::application::options::Program;
public:
  inline explicit Quitting(Program const &NAME, cli::exits::Code = {});
  auto what() const noexcept -> char const * override final;
  auto stream() const noexcept -> std::ostream & override final;
  auto code() const noexcept -> cli::exits::Code override final;
  auto exit() const noexcept -> cli::exits::Code override final;
};
#endiv
#divert <ipp>
#import std.move
#import cli.exits.constants
tests::unit::application::Drop::Quitting::Quitting(Program const &NAME, cli::exits::Code code)
  : appware{cli::exits::FAIL}
  , stdware{NAME + ": because"} // And 'cause never was the reason for the evening, or the Tropic of Sir Gallahad
{ }
#endiv
#divert <cpp>
namespace tests::unit::application {
  auto Drop::Quitting::what() const noexcept -> char const *     { return stdware::what(); }
  auto Drop::Quitting::stream() const noexcept -> std::ostream & { return appware::stream(); }
  auto Drop::Quitting::code() const noexcept -> cli::exits::Code { return appware::code(); }
  auto Drop::Quitting::exit() const noexcept -> cli::exits::Code { return appware::code(); }
}
#endiv

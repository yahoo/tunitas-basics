// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
#divert <fpp>
namespace tests::unit::application { class Pidfile; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import std.filesystem.path
#import tunitas.application.Pidfile
class tests::unit::application::Pidfile : public cppunit::test::Fixture {
public:
  using Subject = ::tunitas::application::Pidfile;
  auto test_constructor_absent() -> void;
  auto test_constructor_present() -> void;
  auto test_manual() -> void;
  auto test_automatic() -> void;
  auto test_emit() -> void;
  auto test_close() -> void;
  auto test_emit_emit() -> void;
  auto test_close_close() -> void;
  auto test_automatic_close_emit() -> void;
  auto test_manual_close_emit() -> void;
  static auto suite() -> cppunit::Test *;
protected:
  struct guardian {
    struct Unlinker;
  };
  inline static auto const SOME_PIDFILE = std::filesystem::path{"/TMP/tests.unit.application.Pidfile.pid"};
};
#import tests.unit.application.Pidfile.guardian.Unlinker
#endiv
#divert <cpp>
#import std.move
#import std.literals
using namespace std::literals;
auto tests::unit::application::Pidfile::test_constructor_absent() -> void {
  auto nothing = std::optional<std::filesystem::path>{};
  Subject subject{nothing, true};
  subject.close();
}
auto tests::unit::application::Pidfile::test_constructor_present() -> void {
  guardian::Unlinker guard{SOME_PIDFILE};
  Subject subject{SOME_PIDFILE, false};
  subject.close();
}
auto tests::unit::application::Pidfile::test_manual() -> void {
  guardian::Unlinker guard{SOME_PIDFILE};
  Subject subject{SOME_PIDFILE, false};
  subject.manual();
  subject.close();
}
auto tests::unit::application::Pidfile::test_automatic() -> void {
  guardian::Unlinker guard{SOME_PIDFILE};
  Subject subject{SOME_PIDFILE, false};
  // nothing else to do!
}
auto tests::unit::application::Pidfile::test_emit() -> void {
  guardian::Unlinker guard{SOME_PIDFILE};
  Subject subject{SOME_PIDFILE, false};
  subject.emit();
}
auto tests::unit::application::Pidfile::test_close() -> void {
  guardian::Unlinker guard{SOME_PIDFILE};
  Subject subject{SOME_PIDFILE, false};
  subject.close();
}
auto tests::unit::application::Pidfile::test_emit_emit() -> void {
  guardian::Unlinker guard{SOME_PIDFILE};
  Subject subject{SOME_PIDFILE, false};
  subject.emit();
  subject.emit();
}
auto tests::unit::application::Pidfile::test_close_close() -> void {
  guardian::Unlinker guard{SOME_PIDFILE};
  Subject subject{SOME_PIDFILE, false};
  subject.close();
  subject.close();
}
auto tests::unit::application::Pidfile::test_automatic_close_emit() -> void {
  guardian::Unlinker guard{SOME_PIDFILE};
  Subject subject{SOME_PIDFILE, false};
  subject.close();
  subject.emit(); // a no-op
}
auto tests::unit::application::Pidfile::test_manual_close_emit() -> void {
  guardian::Unlinker guard{SOME_PIDFILE};
  Subject subject{SOME_PIDFILE, false};
  subject.manual();
  subject.close();
  subject.emit(); // a no-op
}
#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
#import unit.rigging.suite.add
auto tests::unit::application::Pidfile::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream series("Pidfile");
  series << call("constructor-absent", &Pidfile::test_constructor_absent)
	 << call("constructor-present", &Pidfile::test_constructor_present)
	 << call("manual", &Pidfile::test_manual)
	 << call("automatic", &Pidfile::test_automatic)
	 << call("emit", &Pidfile::test_emit)
	 << call("close", &Pidfile::test_close)
	 << call("emit-emit", &Pidfile::test_emit_emit)
	 << call("close-close", &Pidfile::test_close_close)
	 << call("automatic-close-emit", &Pidfile::test_automatic_close_emit)
	 << call("manual-close-emit", &Pidfile::test_automatic_close_emit)
    ;
  return series.release();
}
#endiv

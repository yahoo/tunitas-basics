// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
#divert <fpp>
#import tests.unit.application.Fixture
#endiv
#divert <hpp>
#import std.exception
#import std.string
#import tunitas.application.exception.Generic
#import tunitas.application.exception.Messaging
class tests::unit::application::Fixture::Messaging : public ::tunitas::application::exception::Generic, public ::tunitas::application::exception::Messaging, public ::std::exception {
  struct ancestors {
    using Exception = ::std::exception;
    using Messaging = ::tunitas::application::exception::Messaging;
    using Generic = ::tunitas::application::exception::Messaging;
  };
public:
  explicit Messaging(std::string const &message);
  auto what() const noexcept -> char const * override final;
  auto stream() const noexcept -> std::ostream & override final;
  auto code() const noexcept -> sys::exits::Code override final;
  auto exit() const noexcept -> sys::exits::Code override final;
private:
  static auto format(std::string const &NAME) -> std::string;
};
#endiv
#divert <cpp>
#import sys.exits.constants
#import std.cout
namespace tests::unit::application {
  Fixture::Messaging::Messaging(std::string const &message) : ancestors::Messaging{format(message)} { }
  auto Fixture::Messaging::what() const noexcept -> char const *     { return ancestors::Messaging::what(); }
  auto Fixture::Messaging::stream() const noexcept -> std::ostream & { return std::cout; }
  auto Fixture::Messaging::code() const noexcept -> sys::exits::Code { return sys::exits::FAIL; }
  auto Fixture::Messaging::exit() const noexcept -> sys::exits::Code { return code(); }
  auto Fixture::Messaging::format(std::string const &message) -> std::string {
    // Keep this simple so that application.Fixture.xcpp
    //   auto tests::unit::application::Fixture::test_exception_Messaging_1() -> void
    // can replicate the formatting
    return "[" + message + "]";
  }
}
#endiv

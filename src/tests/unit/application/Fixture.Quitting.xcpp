// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
#divert <fpp>
#include <tests.unit.application.Fixture>
#endiv
#divert <hpp>
#import std.runtime_error
#import tunitas.exception.Aspect
#import tunitas.application.exception.Aspect
#import tunitas.application.exception.aspect.Quitting
#import std.string
#import sys.exits.Code
#import sys.exits.constants
class tests::unit::application::Fixture::Quitting : public ::tunitas::exception::Aspect,
                                            public ::tunitas::application::exception::Aspect,
                                            public ::tunitas::application::exception::aspect::Quitting,
                                            public std::runtime_error {
  struct Ancestors {
    struct Aspects {
      using Core = ::tunitas::exception::Aspect;
      using App = ::tunitas::application::exception::Aspect;
    };
    using Flavor = ::tunitas::application::exception::aspect::Quitting;
    using Exception = std::runtime_error;
  };
public:
  inline explicit Quitting(std::string NAME, std::string reason, sys::exits::Code);
  inline explicit Quitting(std::string NAME, sys::exits::Code);
  inline explicit Quitting(std::string NAME);
  auto what() const noexcept -> char const * override final;
  auto stream() const noexcept -> std::ostream & override final;
  auto code() const noexcept -> sys::exits::Code override final;
  auto exit() const noexcept -> sys::exits::Code override final;
protected:
  struct defaults {
    inline static sys::exits::Code const CODE = sys::exits::FAIL;
    inline static std::string const REASON = "reasons";
  };
};
#endiv
#divert <ipp>
#import std.move
namespace tests::unit::application {
  Fixture::Quitting::Quitting(std::string NAME, std::string reason, sys::exits::Code code)
    : Ancestors::Flavor{code}
    , Ancestors::Exception{NAME + " fails because " + reason}
  { }
  Fixture::Quitting::Quitting(std::string NAME, sys::exits::Code code)
    : Quitting(std::move(NAME), defaults::REASON, code)
  { }
  Fixture::Quitting::Quitting(std::string NAME)
    : Quitting(std::move(NAME), defaults::REASON, defaults::CODE)
  { }
}
#endiv
#divert <cpp>
namespace tests::unit::application {
  auto Fixture::Quitting::what() const noexcept -> char const *     { return Ancestors::Exception::what(); }
  auto Fixture::Quitting::stream() const noexcept -> std::ostream & { return Ancestors::Flavor::stream(); }
  auto Fixture::Quitting::code() const noexcept -> sys::exits::Code { return Ancestors::Flavor::code(); }
  auto Fixture::Quitting::exit() const noexcept -> sys::exits::Code { return Ancestors::Flavor::code(); }
}
#import std.exception
#import std.is_base_of
#import std.convertible_to
#import tunitas.application.required.exception.Quitting
// Of course, this is test code
namespace {
  namespace testate {
    using Subject = ::tests::unit::application::Fixture;
    static_assert(sizeof(Subject::Quitting));
    static_assert(std::is_base_of_v<tunitas::application::exception::Aspect, Subject::Quitting>);
    static_assert(std::is_base_of_v<std::exception, Subject::Quitting>);
    static_assert(tunitas::application::required::exception::Quitting<Subject::Quitting>);
    template<typename QUITTING> concept Belabor_The_Point_Quitting =
      true
      && requires(QUITTING quitting) {
        { quitting } -> std::convertible_to<std::exception const &>;
        { quitting } -> std::convertible_to<tunitas::application::exception::Aspect const &>;
        { quitting } -> std::convertible_to<tunitas::application::exception::feature::Quitting const &>;
      }
      && ! tunitas::required::exception::Quitting<QUITTING> // because we specify a different constructor signature (see below)
      && (requires(QUITTING, std::string name, sys::exits::Code code) { { QUITTING{name, code} }; } || // ... optional
          requires(QUITTING, sys::exits::Code code) { { QUITTING{code} }; } ) // ............................ required
      && requires(QUITTING quitting, std::string name, sys::exits::Code code) {
        // OPTIONAL -- MAY have a default value for code, with constructor as QUITTING(name)
        { QUITTING{name, code} };
        { quitting.what() } -> std::convertible_to<char const *>;
        { quitting.code() } -> std::convertible_to<sys::exits::Code>;
        { quitting.stream() } -> std::convertible_to<std::ostream &>;
    };
    static_assert(Belabor_The_Point_Quitting<Subject::Quitting>);
  }
}
#endiv

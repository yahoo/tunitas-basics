// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
#divert <fpp>
#import tests.unit.number.required // cascade that certain 'namespace required'
#import tunitas.number.required.Number
#import tunitas.required.Integer
namespace tests::unit::number::generic {
  template<required::Number, required::Integer INT> class Fits_Get;
}
#endiv
#divert <hpp>
#import std.basic_string
#import std.basic_ostringstream
namespace tests::unit::number {
  template<required::Number SUBJECT, required::Integer INT> struct generic::Fits_Get : public rigging::suite::Fixture {
    static auto suite() -> Suite;
    //
    using Subject = SUBJECT;
    using Integer = INT;
    //
    auto test_zero() -> void;
    auto test_plus_one() -> void;
    auto test_minus_one() -> void;
    auto test_plus_big() -> void;
    auto test_minus_big() -> void;
  protected:
    static auto exercise(Subject const &) -> void;
  };
}
#endiv
#divert <tpp>
#import tunitas.number.to_string
#import std.same_as
namespace tests::unit::number::generic {
  template<required::Number N, required::Integer I> auto Fits_Get<N,I>::suite() -> Suite {
    auto series = Stream{typeid(Integer)};
    series << add("-big", &Fits_Get::test_minus_big)
           << add("-1", &Fits_Get::test_minus_one)
           << add("0", &Fits_Get::test_zero)
           << add("1", &Fits_Get::test_plus_one)
           << add("+big", &Fits_Get::test_plus_big)
           << END;
    return settle(series);
  }
  template<required::Number N, required::Integer I> auto Fits_Get<N,I>::exercise(Subject const &specimen) -> void {
    std::ostream &outbound{std::cerr};
    outbound << "original " << library::to_string<string::Storage>(specimen);
    if (specimen.template fits<Integer>()) { // <---------------------------------------- test this
      auto got = specimen.template get<Integer>(); // <---------------------------------- test this
      outbound << "fits in " << typeid(Integer).name() << " and recovered as " << got << '\n';
    } else {
      outbound << "does not fit in " << typeid(Integer).name() << '\n';
    }
  }
  template<required::Number N, required::Integer I> auto Fits_Get<N,I>::test_zero() -> void      { exercise(Subject{0}); }
  template<required::Number N, required::Integer I> auto Fits_Get<N,I>::test_minus_one() -> void { exercise(Subject{-1}); }
  template<required::Number N, required::Integer I> auto Fits_Get<N,I>::test_plus_one() -> void  { exercise(Subject{1}); }
  template<required::Number N, required::Integer I> auto Fits_Get<N,I>::test_minus_big() -> void { exercise(Subject{-1} * Subject{2'000'000'000'000ll} * Subject{3'000'000'000'000ll} * Subject{5'000'000'000'000ll}); }
  template<required::Number N, required::Integer I> auto Fits_Get<N,I>::test_plus_big() -> void  { exercise(Subject{1} * Subject{3'000'000'000'000ll} * Subject{5'000'000'000'000ll} * Subject{7'000'000'000'000ll}); }
}
#endiv

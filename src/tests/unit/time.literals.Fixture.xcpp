// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-basics/blob/master/LICENSE for terms.
#divert <fpp>
namespace tests::unit::time::literal { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::time::literal::Fixture : public cppunit::test::Fixture {
public:
  auto test_second() -> void;
  auto test_minute() -> void;
  auto test_hour() -> void;
  auto test_day() -> void;
  auto test_week() -> void;
  auto test_month() -> void;
  auto test_year() -> void;
  auto test_millenium() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import tunitas.time.literals
namespace tests::unit::time::literals {
  using namespace tunitas::time::literals;
}
auto tests::unit::time::literal::Fixture::test_second() -> void {
  auto v1 = 1_second;
  auto v2 = 2_seconds;
  CPPUNIT_ASSERT(v1 < v2);
}
auto tests::unit::time::literal::Fixture::test_minute() -> void {
  auto v1 = 1_minute;
  auto v2 = 2_minutes;
  CPPUNIT_ASSERT(v1 < v2);
}
auto tests::unit::time::literal::Fixture::test_hour() -> void {
  auto v1 = 1_hour;
  auto v2 = 2_hours;
  CPPUNIT_ASSERT(v1 < v2);
}
auto tests::unit::time::literal::Fixture::test_day() -> void {
  auto v1 = 1_day;
  auto v2 = 2_days;
  CPPUNIT_ASSERT(v1 < v2);
}
auto tests::unit::time::literal::Fixture::test_week() -> void {
  auto v1 = 1_week;
  auto v2 = 2_weeks;
  CPPUNIT_ASSERT(v1 < v2);
}
auto tests::unit::time::literal::Fixture::test_month() -> void {
  auto v1 = 1_month;
  auto v2 = 2_months;
  CPPUNIT_ASSERT(v1 < v2);
}
auto tests::unit::time::literal::Fixture::test_year() -> void {
  auto v1 = 1_year;
  auto v2 = 2_years;
  CPPUNIT_ASSERT(v1 < v2);
}
auto tests::unit::time::literal::Fixture::test_millenium() -> void {
  auto v1 = 1_millenium;
  auto v2 = 2_milleniums;
  auto v2a = 2_millenia;
  CPPUNIT_ASSERT(v1 < v2);
  CPPUNIT_ASSERT(v2a == v2);
}
#import rigging.suite.io
auto tests::unit::time::literal::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("literals");
  series << call("second", &Fixture::test_second)
         << call("minute", &Fixture::test_minute)
         << call("hour", &Fixture::test_hour)
         << call("week", &Fixture::test_day)
         << call("month", &Fixture::test_week)
         << call("year", &Fixture::test_month)
         << call("millenium", &Fixture::test_year)
         << call("hour", &Fixture::test_millenium)
    ;
  return finalize(series);
}
#endiv

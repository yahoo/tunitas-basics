// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
// For terms, see the LICENSE file at the top of this repository.
#divert <fpp>
namespace tests::unit::exits { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::exits::Fixture : public cppunit::test::Fixture {
public:
  auto test_Code() -> void;
  auto test_constants() -> void;
  //
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import tunitas.app.exits.Code
namespace tests::unit::exits {
  auto Fixture::test_Code() -> void {
    using namespace ::tunitas::app::exits;
    CPPUNIT_ASSERT(0 == (int) Code{});
    CPPUNIT_ASSERT(79 == (int) Code{79}); // some arbitrary value
  }
}
#import tunitas.app.exits.constants
namespace tests::unit::exits {
  auto Fixture::test_constants() -> void {
    // There are no Tunitas-specific constants defined (yet)
    using namespace ::tunitas::app::exits;
    CPPUNIT_ASSERT(0 == (int) OK);
  }
}
#import rigging.suite.io
auto tests::unit::exits::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("exits");
  series << call("code", &Fixture::test_Code)
         << call("constants", &Fixture::test_constants)
    ;
  return finalize(series);
}
#endiv

// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
#divert <fpp>
namespace tests::unit::time::ratio { class Fixture; }
#endiv
#divert <hpp>
class tests::unit::time::ratio::Fixture : public cppunit::test::Fixture {
public:
  auto test_second() -> void;
  auto test_minute() -> void;
  auto test_hour() -> void;
  auto test_day() -> void;
  auto test_week() -> void;
  auto test_fortnight() -> void;
  auto test_month() -> void;
  auto test_year() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import tunitas.time.ratio
namespace tests::unit::time::ratio {
  using namespace tunitas::time::ratio;
}
auto tests::unit::time::ratio::Fixture::test_second() -> void {
  CPPUNIT_ASSERT(1 == Second::num);
  CPPUNIT_ASSERT(1 == Second::den);
}
auto tests::unit::time::ratio::Fixture::test_minute() -> void {
  CPPUNIT_ASSERT(60*Second::num == Minute::num);
  CPPUNIT_ASSERT(1 == Minute::den);
}
auto tests::unit::time::ratio::Fixture::test_hour() -> void {
  CPPUNIT_ASSERT(60*Minute::num == Hour::num);
  CPPUNIT_ASSERT(1 == Hour::den);
}
auto tests::unit::time::ratio::Fixture::test_day() -> void {
  CPPUNIT_ASSERT(24*Hour::num == Day::num);
  CPPUNIT_ASSERT(1 == Day::den);
}
auto tests::unit::time::ratio::Fixture::test_week() -> void {
  CPPUNIT_ASSERT(7*Day::num == Week::num);
  CPPUNIT_ASSERT(1 == Week::den);
}
auto tests::unit::time::ratio::Fixture::test_fortnight() -> void {
  CPPUNIT_ASSERT(2*Week::num == Fortnight::num);
  CPPUNIT_ASSERT(1 == Fortnight::den);
}
auto tests::unit::time::ratio::Fixture::test_month() -> void {
  CPPUNIT_ASSERT(30*Day::num == Month::num);
  CPPUNIT_ASSERT(1 == Month::den);
}
auto tests::unit::time::ratio::Fixture::test_year() -> void {
  CPPUNIT_ASSERT(365*Day::num == Year::num);
  CPPUNIT_ASSERT(1 == Year::den);
}
auto tests::unit::time::ratio::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("ratio");
  series << call("second", &Fixture::test_second)
         << call("minute", &Fixture::test_minute)
         << call("hour", &Fixture::test_hour)
         << call("day", &Fixture::test_day)
         << call("week", &Fixture::test_week)
         << call("fortnight", &Fixture::test_fortnight)
         << call("month", &Fixture::test_month)
         << call("year", &Fixture::test_year)
    ;
  return finalize(series);
}
#endiv

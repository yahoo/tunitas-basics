// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
// For terms, see the LICENSE file at the top of this repository
#divert <fpp>
namespace tests::unit { class Fixture; }
#endiv
#divert <hpp>
struct tests::unit::Fixture : public cppunit::test::Fixture {
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import tests.unit.application.Fixture
#import tests.unit.base64.Fixture
#import tests.unit.exception.Fixture
#import tests.unit.exits.Fixture
#import tests.unit.number.Fixture
#import tests.unit.outcome.Fixture
#import tests.unit.required.Fixture
#import tests.unit.server.Fixture
#import tests.unit.time.Fixture
#import tests.unit.tunitas.Fixture
#import tests.unit.tuple.Fixture
#import tests.unit.urlsafe.Fixture
#import tests.unit.variant.Fixture
#import tests.unit.want.Fixture
auto tests::unit::Fixture::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  auto series = Stream{"unit"sv};
  series << add<application::Fixture>()
         << add<base64::Fixture>()
         << add<exception::Fixture>()
         << add<exits::Fixture>()
         << add<number::Fixture>()
         << add<outcome::Fixture>()
         << add<required::Fixture>()
         << add<server::Fixture>()
         << add<time::Fixture>()
         << add<tunitas::Fixture>()
         << add<tuple::Fixture>()
         << add<urlsafe::Fixture>()
         << add<variant::Fixture>()
         << add<want::Fixture>()
         << END;
  return finalize(series);
}
#endiv

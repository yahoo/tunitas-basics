// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
#divert <fpp>
#import tests.unit.app.Fixture
#endiv
#divert <hpp>
#import std.exception
#import std.string
#import tunitas.app.exception.Generic
#import tunitas.app.exception.Messaging
class tests::unit::app::Fixture::Messaging : public ::tunitas::app::exception::Generic, public ::tunitas::app::exception::Messaging, public ::std::exception {
  struct ancestors {
    using Exception = ::std::exception;
    using Messaging = ::tunitas::app::exception::Messaging;
    using Generic = ::tunitas::app::exception::Messaging;
  };
public:
  explicit Messaging(std::string const &message);
  auto what() const noexcept -> char const * final;
  auto stream() const noexcept -> std::ostream & final;
  auto code() const noexcept -> sys::exits::Code final;
private:
  static auto format(std::string const &NAME) -> std::string;
};
#endiv
#divert <cpp>
tests::unit::app::Fixture::Messaging::Messaging(std::string const &message)
  : ancestors::Messaging{format(message)}
{ }
auto tests::unit::app::Fixture::Messaging::what() const noexcept -> char const * {
  return ancestors::Messaging::what();
}
#import std.cout
auto tests::unit::app::Fixture::Messaging::stream() const noexcept -> std::ostream & {
  return std::cout;
}
#import sys.exits.constants
auto tests::unit::app::Fixture::Messaging::code() const noexcept -> sys::exits::Code {
  return sys::exits::FAIL;
}
auto tests::unit::app::Fixture::Messaging::format(std::string const &message) -> std::string {
  // Keep this simple so that app.Fixture.xcpp
  //   auto tests::unit::app::Fixture::test_exception_Messaging_1() -> void
  // can replicate the formatting
  return "[" + message + "]";
}
#endiv

// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/tunitas-basics/blob/master/LICENSE for terms.
#divert <fpp>
namespace tests::unit::app::options { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import std.string
class tests::unit::app::options::Fixture : public cppunit::test::Fixture {
public:
  auto test_get_filepath_good() -> void;
  auto test_get_filepath_bad() -> void;
  auto test_get_identifier_good() -> void;
  auto test_get_identifier_bad() -> void;
  auto test_get_port_good() -> void;
  auto test_get_port_bad() -> void;
  auto test_get_word_good() -> void;
  auto test_get_word_bad() -> void;
  static auto suite() -> cppunit::Test *;
protected:
  using Program = std::string;
  class Configuration;
  class Quitting;
  class Step;
};
#entail tests.unit.app.options.Fixture.Configuration
#entail tests.unit.app.options.Fixture.Step
#entail tests.unit.app.options.Fixture.Quitting
#endiv
#divert <cpp>
#import std.move
#import std.literals
using namespace std::literals;
#import tunitas.app.options.get_filepath
auto tests::unit::app::options::Fixture::test_get_filepath_good() -> void {
  try {
    using namespace ::tunitas::app::options;
    Configuration cfg;
    Step step{Step::Code::CHR_f, "./o.file.out"};
    auto filepath = get_filepath<Quitting>(cfg, step);
    CPPUNIT_ASSERT("./o.file.out" == filepath);
  } catch (std::exception const &e) {
    CPPUNIT_ASSERT(false);
  }
}
auto tests::unit::app::options::Fixture::test_get_filepath_bad() -> void {
  try {
    using namespace ::tunitas::app::options;
    Configuration cfg;
    Step step{Step::Code::CHR_f, ""}; // <------------------------ the only bad filepath is an empty filepath
    get_filepath<Quitting>(cfg, step);
    CPPUNIT_ASSERT(false);
  } catch (std::exception const &e) {
    CPPUNIT_ASSERT(true);
  }
}
#import tunitas.app.options.get_identifier
auto tests::unit::app::options::Fixture::test_get_identifier_good() -> void {
  try {
    using namespace ::tunitas::app::options;
    Configuration cfg;
    Step step{Step::Code::CHR_f, "cherry123"};
    auto identifier = get_identifier<Quitting>(cfg, step);
    CPPUNIT_ASSERT("cherry123" == identifier);
  } catch (std::exception const &e) {
    CPPUNIT_ASSERT(false);
  }
}
auto tests::unit::app::options::Fixture::test_get_identifier_bad() -> void {
  try {
    using namespace ::tunitas::app::options;
    Configuration cfg;
    Step step{Step::Code::CHR_f, "!@#$%"}; // <------------------------ there are many bad identifiers
    get_identifier<Quitting>(cfg, step);
    CPPUNIT_ASSERT(false);
  } catch (std::exception const &e) {
    CPPUNIT_ASSERT(true);
  }
}
#import tunitas.app.options.get_port
auto tests::unit::app::options::Fixture::test_get_port_good() -> void {
  try {
    using namespace ::tunitas::app::options;
    Configuration cfg;
    Step step{Step::Code::CHR_f, "8080"};
    auto port = get_port<Quitting>(cfg, step);
    CPPUNIT_ASSERT(8080u == port);
  } catch (std::exception const &e) {
    CPPUNIT_ASSERT(false);
  }
}
auto tests::unit::app::options::Fixture::test_get_port_bad() -> void {
  try {
    using namespace ::tunitas::app::options;
    Configuration cfg;
    Step step{Step::Code::CHR_f, "apple"};
    get_port<Quitting>(cfg, step);
    CPPUNIT_ASSERT(false);
  } catch (std::exception const &e) {
    CPPUNIT_ASSERT(true);
  }
}
auto tests::unit::app::options::Fixture::test_get_word_good() -> void {
    try {
    using namespace ::tunitas::app::options;
    Configuration cfg;
    Step step{Step::Code::CHR_f, "bird"};
    auto word = get_word<Quitting>(cfg, step);
    CPPUNIT_ASSERT("bird" == word);
  } catch (std::exception const &e) {
    CPPUNIT_ASSERT(false);
  }
}
auto tests::unit::app::options::Fixture::test_get_word_bad() -> void {
  try {
    using namespace ::tunitas::app::options;
    Configuration cfg;
    Step step{Step::Code::CHR_f, ""}; // <------------------------ the only bad word is an empty word
    get_word<Quitting>(cfg, step);
    CPPUNIT_ASSERT(false);
  } catch (std::exception const &e) {
    CPPUNIT_ASSERT(true);
  }
}
#import tests.unit.app.Fixture.Configuration
#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
#import unit.rigging.suite.add
auto tests::unit::app::options::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream series("options");
  {
    Stream get("get_filepath");
    get << call("good", &Fixture::test_get_filepath_good)
	<< call("bad", &Fixture::test_get_filepath_bad)
      ;
    series << add(get.release());
  } {
    Stream get("get_identifier");
    get << call("good", &Fixture::test_get_identifier_good)
	<< call("bad", &Fixture::test_get_identifier_bad)
      ;
    series << add(get.release());
  } {
    Stream get("get_port");
    get << call("good", &Fixture::test_get_port_good)
	<< call("bad", &Fixture::test_get_port_bad)
      ;
    series << add(get.release());
  } {
    Stream get("get_word");
    get << call("good", &Fixture::test_get_word_good)
	<< call("bad", &Fixture::test_get_word_bad)
      ;
    series << add(get.release());
  }
  return series.release();
}
#endiv

// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-basics/blob/master/LICENSE for terms.
#divert <fpp>
#include <tests.unit.app.Fixture>
#endiv
#divert <hpp>
#import std.runtime_error
#import tunitas.app.exception.Aspect
#import tunitas.app.exception.aspect.Quitting
#import std.string
#import sys.exits.Code
#import sys.exits.constants
class tests::unit::app::Fixture::Quitting : public ::tunitas::app::exception::Aspect,
                                            public ::tunitas::app::exception::aspect::Quitting,
                                            public std::runtime_error {
  struct Ancestors {
    using Aspect = ::tunitas::app::exception::Aspect;
    using Flavor = ::tunitas::app::exception::aspect::Quitting;
    using Exception = std::runtime_error;
  };
public:
  inline explicit Quitting(std::string NAME, std::string reason, sys::exits::Code);
  inline explicit Quitting(std::string NAME, sys::exits::Code);
  inline explicit Quitting(std::string NAME);
  auto what() const noexcept -> char const * final;
  auto code() const noexcept -> sys::exits::Code final;
  auto stream() const noexcept -> std::ostream & final;
protected:
  struct defaults {
    inline static sys::exits::Code const CODE = sys::exits::FAIL;
    inline static std::string const REASON = "reasons";
  };
};
#endiv
#divert <ipp>
#import std.move
tests::unit::app::Fixture::Quitting::Quitting(std::string NAME, std::string reason, sys::exits::Code code)
  : Ancestors::Flavor{code}
  , Ancestors::Exception{NAME + " fails because " + reason}
{ }
tests::unit::app::Fixture::Quitting::Quitting(std::string NAME, sys::exits::Code code)
  : Quitting(std::move(NAME), defaults::REASON, code)
{ }
tests::unit::app::Fixture::Quitting::Quitting(std::string NAME)
  : Quitting(std::move(NAME), defaults::REASON, defaults::CODE)
{ }
#endiv
#divert <cpp>
auto tests::unit::app::Fixture::Quitting::what() const noexcept -> char const * {
  return Ancestors::Exception::what();
}
auto tests::unit::app::Fixture::Quitting::code() const noexcept -> sys::exits::Code {
  return Ancestors::Flavor::code();
}
auto tests::unit::app::Fixture::Quitting::stream() const noexcept -> std::ostream & {
  return Ancestors::Flavor::stream();
}
#import std.exception
#import std.is_base_of
#import tunitas.app.required.exception.Quitting
// Of course, this is test code
namespace {
  namespace tests {
    using Subject = ::tests::unit::app::Fixture;
    static_assert(sizeof(Subject::Quitting));
    static_assert(std::is_base_of_v<tunitas::app::exception::Aspect, Subject::Quitting>);
    static_assert(std::is_base_of_v<std::exception, Subject::Quitting>);
    static_assert(tunitas::app::required::exception::Quitting<Subject::Quitting>);
    template<typename QUITTING> concept bool Belabor_The_Point_Quitting =
      true
      && requires(QUITTING quitting) {
        { quitting } -> std::exception const &;
        { quitting } -> tunitas::app::exception::Aspect const &;
        { quitting } -> tunitas::app::exception::feature::Quitting const &;
      }
      && ! tunitas::required::exception::Quitting<QUITTING> // because we specify a different constructor signature (see below)
      && (requires(QUITTING, std::string name, sys::exits::Code code) { { QUITTING{name, code} }; } || // ... optional
          requires(QUITTING, sys::exits::Code code) { { QUITTING{code} }; } ) // ............................ required
      && requires(QUITTING quitting, std::string name, sys::exits::Code code) {
        // OPTIONAL -- MAY have a default value for code, with constructor as QUITTING(name)
        { QUITTING{name, code} };
        { quitting.what() } -> char const *;
        { quitting.code() } -> sys::exits::Code;
        { quitting.stream() } -> std::ostream &;
    };
    static_assert(Belabor_The_Point_Quitting<Subject::Quitting>);
  }
}
#endiv

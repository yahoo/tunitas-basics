// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-basics/blob/master/LICENSE for terms.
#divert <fpp>
#import tests.unit.app.options.Fixture
#endiv
#divert <hpp>
#import tunitas.exception.Aspect
#import tunitas.app.exception.Aspect
#import tunitas.app.exception.aspect.Quitting
#import std.runtime_error
#import sys.exits.Code
class tests::unit::app::options::Fixture::Quitting : public tunitas::exception::Aspect,
                                                     public tunitas::app::exception::Aspect,
                                                     public tunitas::app::exception::aspect::Quitting,
                                                     public std::runtime_error {
  struct Ancestors {
    struct Aspects {
      using Core = tunitas::exception::Aspect;
      using App = tunitas::app::exception::Aspect;
    };
    using Feature = ::tunitas::app::exception::aspect::Quitting;
    using Exception = ::std::runtime_error;
  };
public:
  Quitting(Fixture::Program const &, sys::exits::Code);
  auto what() const noexcept -> char const * final;
  auto stream() const noexcept -> std::ostream & final;
  auto code() const noexcept -> sys::exits::Code final;
};
#endiv
#divert <cpp>
#import sys.exits.constants
tests::unit::app::options::Fixture::Quitting::Quitting(Fixture::Program const &program, sys::exits::Code code)
  : Ancestors::Feature{code}
  , Ancestors::Exception{program + " had a test failure"}
{ }
auto tests::unit::app::options::Fixture::Quitting::what() const noexcept -> char const * {
  return Ancestors::Exception::what();
}
auto tests::unit::app::options::Fixture::Quitting::stream() const noexcept -> std::ostream & {
  return Ancestors::Feature::stream();
}
auto tests::unit::app::options::Fixture::Quitting::code() const noexcept -> sys::exits::Code {
  return Ancestors::Feature::code();
}
#endiv

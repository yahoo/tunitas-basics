// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
#divert <fpp>
#import tests.unit.app.Fixture
#endiv
#divert <hpp>
#import std.runtime_error
#import tunitas.app.exception.Aspect
#import tunitas.app.exception.aspect.Version
#import std.string
#import sys.exits.Code
#import sys.exits.constants
class tests::unit::app::Fixture::Version : public tunitas::app::exception::Aspect, public tunitas::app::exception::aspect::Version, public std::runtime_error {
  struct Ancestors {
    using Aspect = tunitas::app::exception::Aspect;
    using Feature = tunitas::app::exception::aspect::Version;
    using Exception = std::runtime_error;
  };
public:
  inline explicit Version(std::string NAME);
  auto what() const noexcept -> char const * final;
  auto stream() const noexcept -> std::ostream & final;
  auto code() const noexcept -> sys::exits::Code final;
};
#endiv
#divert <ipp>
#import std.move
tests::unit::app::Fixture::Version::Version(std::string NAME)
  : Ancestors::Exception{std::move(NAME)}
{ }
#endiv
#divert <cpp>
auto tests::unit::app::Fixture::Version::what() const noexcept -> char const * {
  return Ancestors::Exception::what();
}
auto tests::unit::app::Fixture::Version::stream() const noexcept -> std::ostream & {
  return Ancestors::Feature::stream();
}
auto tests::unit::app::Fixture::Version::code() const noexcept -> sys::exits::Code {
  return Ancestors::Feature::code();
}
#endiv

// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
#divert <fpp>
#include <hpp/tests.unit.server.Fixture>
#endiv
#divert <hpp>
#import tunitas.server.service // service::Request     -- FIXTHAT -- make this not so hard to remember
#import tunitas.server.service // service::Resource    -- FIXTHAT -- make this not so hard to remember
#import tunitas.server.service // service::Transport   -- FIXTHAT -- to transport the semi-prepared response
#import tunitas.string.View
#import microhttpd.rest.transfer.Assembler
#import microhttpd.rest.State
class tests::unit::server::fixture::Fixture::Resource : public tunitas::server::service::Resource {
  using Ancestor = library::service::Resource;
  using Request = library::service::Request;
  using Transport = library::service::Transport;
public:
  // Recall that a "resource" in web speak is "a page"
  //
  // whereas the ancestor's constructors are protected rather than private.
  // This allows us to make a test specimen.
  // As such:
  Resource() = default;
  auto otherwise(Request const &) -> Transport override;
  auto GET(Request const &) -> Transport override;
  auto HEAD(Request const &) -> Transport override;
private:
  inline static const auto RETURNING_A_TRIVIALITY = tunitas::string::View{" a trivial response)\n"};;
  using Assembler = microhttpd::rest::transfer::Assembler;
  using Transfer = microhttpd::rest::transfer::Transfer;
  using State = microhttpd::rest::State;
};
#endiv
#divert <cpp>
#import std.cerr
namespace tests::unit::server::fixture {
  auto Fixture::Resource::otherwise(Request const &requested) -> Transport {
    std::cerr << "render <something>" << RETURNING_A_TRIVIALITY;
    return {State{}, Transfer{Assembler::EMPTY}};
  }
  auto Fixture::Resource::GET(Request const &requested) -> Transport {
    std::cerr << "render GET" << RETURNING_A_TRIVIALITY;
    return {State{}, Transfer{Assembler::EMPTY}};
  }
  auto Fixture::Resource::HEAD(Request const &requested) -> Transport {
    std::cerr << "render HEAD" << RETURNING_A_TRIVIALITY;
    return {State{}, Transfer{Assembler::EMPTY}};
  }
}
#endiv

// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
#divert <fpp>
#import tunitas.server.constants
#import tunitas.server.exception
#import tunitas.server.filters
#import tunitas.server.log
#import tunitas.server.resources
#import tunitas.server.responses
#import tunitas.server.service
#import microhttpd.http.literals
namespace tests::unit::server {
  namespace [[eponymous]] fixture {
    class Fixture;
    using namespace microhttpd::http::literals;
    namespace library {
      // [[FIXTHIS]] this test rigging is too big
      // [[TODO,FIXTHIS]] break this test rigging up into one fixture for each namespace.
      namespace constants = ::tunitas::server::constants;
      namespace exception = ::tunitas::server::exception;
      namespace filters = ::tunitas::server::filters;
      namespace log = ::tunitas::server::log;
      namespace resources = ::tunitas::server::resources;
      namespace responses = ::tunitas::server::responses;
      namespace service = ::tunitas::server::service;
    }
  }
  using fixture::Fixture;
}
#endiv
#divert <hpp>
struct tests::unit::server::fixture::Fixture : public cppunit::test::Fixture {
  auto test_constants() -> void;
  auto test_filters_enforce_no_query_arguments() -> void;
  auto test_filters_enforce_no_query_parameters() -> void;
  auto test_filters_enforce_application_json() -> void;
  auto test_log() -> void;
  auto test_resources() -> void;
  auto test_response() -> void;
  auto test_response_internal_server_error_default() -> void;
  auto test_response_internal_server_error_reason() -> void;
  auto test_response_bad_request_default() -> void;
  auto test_response_bad_request_reason() -> void;
  auto test_service() -> void;
  auto test_usage_Example() -> void;
  static auto suite() -> cppunit::Test *;
protected:
  // [[LAZY]] this test has moved to exception::Fixture
  struct exception {
    class [[nodiscard]] Example;
  };
  struct Anchored {
    struct Request;
  };
  struct Resource;
};
#endiv
#divert <cpp>
#import tunitas.server.constants
auto tests::unit::server::fixture::Fixture::test_constants() -> void {
  // Show that the constants are defined.
  // That they have an appropriate value is a separate test
  using namespace library::constants;
  CPPUNIT_ASSERT(sizeof (http::CONNECT));
  CPPUNIT_ASSERT(sizeof (http::DELEET));
  CPPUNIT_ASSERT(sizeof (http::GET));
  CPPUNIT_ASSERT(sizeof (http::HEAD));
  CPPUNIT_ASSERT(sizeof (http::OPTIONS));
  CPPUNIT_ASSERT(sizeof (http::POST));
  CPPUNIT_ASSERT(sizeof (http::PUT));
  CPPUNIT_ASSERT(sizeof (http::TRACE));
  //
  CPPUNIT_ASSERT(sizeof(http::R200_OK));
  CPPUNIT_ASSERT(sizeof(http::R201_CREATED));
  CPPUNIT_ASSERT(sizeof(http::R202_ACCEPTED));
  CPPUNIT_ASSERT(sizeof(http::R203_NON_AUTHORITATIVE_INFORMATION));
  CPPUNIT_ASSERT(sizeof(http::R204_NO_CONTENT));
  CPPUNIT_ASSERT(sizeof(http::R205_RESET_CONTENT));
  CPPUNIT_ASSERT(sizeof(http::R206_PARTIAL_CONTENT));
  CPPUNIT_ASSERT(sizeof(http::R301_MOVED_PERMANENTLY));
  CPPUNIT_ASSERT(sizeof(http::R302_FOUND));
  CPPUNIT_ASSERT(sizeof(http::R302_MOVED_TEMPORARILY));
  CPPUNIT_ASSERT(sizeof(http::R303_SEE_OTHER));
  CPPUNIT_ASSERT(sizeof(http::R307_TEMPORARY_REDIRECT));
  CPPUNIT_ASSERT(sizeof(http::R308_PERMANENT_REDIRECT));
  CPPUNIT_ASSERT(sizeof(http::R304_NOT_MODIFIED));
  CPPUNIT_ASSERT(sizeof(http::R400_BAD_REQUEST));
  CPPUNIT_ASSERT(sizeof(http::R401_UNAUTHORIZED));
  CPPUNIT_ASSERT(sizeof(http::R402_PAYMENT_REQUIRED));
  CPPUNIT_ASSERT(sizeof(http::R403_FORBIDDEN));
  CPPUNIT_ASSERT(sizeof(http::R404_NOT_FOUND));
  CPPUNIT_ASSERT(sizeof(http::R500_INTERNAL_SERVER_ERROR));
  CPPUNIT_ASSERT(sizeof(http::R501_NOT_IMPLEMENTED));
  CPPUNIT_ASSERT(sizeof(http::R502_SERVICE_TEMPORARILY_OVERLOADED));
  //
  CPPUNIT_ASSERT(sizeof (mime::APPLICATION_JSON));
  CPPUNIT_ASSERT(sizeof (mime::APPLICATION_X_WWW_FORM_URLENCODED));
  CPPUNIT_ASSERT(sizeof (mime::MULTIPART_FORM_DATA));
  CPPUNIT_ASSERT(sizeof (mime::TEXT_PLAIN));
  CPPUNIT_ASSERT(sizeof (mime::TEXT_HTTP));
}
#import tests.unit.server.Fixture.Anchored.Request // Request (one that  we can actually construct)
#import tunitas.server.service // Request, Resource, Response, response::Builder
#import tunitas.server.filters
#import std.exception
auto tests::unit::server::fixture::Fixture::test_filters_enforce_no_query_arguments() -> void try {
  using namespace library::filters;
  auto const anchored = Anchored::Request{};
  auto transport = ::tunitas::Optional<library::service::Transport>{};
  enforce_no_query_arguments(anchored, transport); // <------------------------------ test this
  CPPUNIT_ASSERT(true);
} catch (std::exception const &e) {
  CPPUNIT_ASSERT(true); // this is fine too
}
auto tests::unit::server::fixture::Fixture::test_filters_enforce_no_query_parameters() -> void try {
  using namespace library::filters;
  auto const anchored = Anchored::Request{};
  auto transport = ::tunitas::Optional<library::service::Transport>{};
  enforce_no_query_parameters(anchored, transport); // <------------------------------ test this
  CPPUNIT_ASSERT(true);
} catch (std::exception const &e) {
  CPPUNIT_ASSERT(true); // this is fine too
}
auto tests::unit::server::fixture::Fixture::test_filters_enforce_application_json() -> void try {
  using namespace library::filters;
  auto const anchored = Anchored::Request{};
  auto transport = ::tunitas::Optional<library::service::Transport>{};
  enforce_application_json(anchored, transport); // <----------------------------- test this
  CPPUNIT_ASSERT(true);
} catch (std::exception const &e) {
  CPPUNIT_ASSERT(true); // this is fine too
}
#import tunitas.server.log
auto tests::unit::server::fixture::Fixture::test_log() -> void {
  using namespace library::log;
  err << "ERROR STREAM (you will see this)\n";
  nul << "NULL STREAM (you will not see this)\n";
}
#import tests.unit.server.Fixture.Resource
#import tunitas.server.resources // all those initialization functions
auto tests::unit::server::fixture::Fixture::test_resources() -> void {
  Resource specimen;
  using namespace library::resources;
  // Call them all ... show it can be done.
  initialize(specimen, true);
  initialize(specimen, false);
  initialize_only_get(specimen);
  initialize_only_post(specimen);
  initialize_getputpost(specimen);
  initialize_getpost(specimen);
  initialize_getput(specimen);
  initialize_getdelete(specimen);
  initialize_putpost(specimen);
}
#import tunitas.server.responses
#import tunitas.server.service // library::service::Response [[FIXTHAT]] -- too hard to remember
auto tests::unit::server::fixture::Fixture::test_response_internal_server_error_default() -> void {
  using namespace library::responses;
  internal_server_error();  // <---------------------------------- test this
}
auto tests::unit::server::fixture::Fixture::test_response_internal_server_error_reason() -> void {
  using namespace library::responses;
  internal_server_error("because ... reasons...");  // <---------------------------------- test this
}
auto tests::unit::server::fixture::Fixture::test_response_bad_request_default() -> void {
  using namespace library::responses;
  bad_request();  // <---------------------------------- test this
}
auto tests::unit::server::fixture::Fixture::test_response_bad_request_reason() -> void {
  using namespace library::responses;
  bad_request("because ... reasons...");  // <---------------------------------- test this
}
#import tunitas.server.service // Resource<CHILD>, Request, Response, render::Builder
auto tests::unit::server::fixture::Fixture::test_service() -> void {
  auto bob = library::service::render::Builder{200_HTTP};
  auto transport = bob.build();
  CPPUNIT_ASSERT(sizeof (transport));
}
#import tunitas.server.exception.Generic
#import tests.unit.server.Fixture.exception.Example
auto tests::unit::server::fixture::Fixture::test_usage_Example() -> void try {
  // Show the MI scheme works by in the constructor
  throw exception::Example{"badness"};
} catch (library::exception::Generic const &g) {
  // Show that catching by one of the MI personas works
  std::string reason = g.what();
  CPPUNIT_ASSERT_EQUAL("badness"s, reason);
}
auto tests::unit::server::fixture::Fixture::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  Stream series{"server"};
  series << call("constants", &Fixture::test_constants)
         << []() {
              Stream fil("filters");
              fil << []() {
                       Stream enf("enforce");
                       enf << call("query", &Fixture::test_filters_enforce_no_query_arguments)
                           << call("old.query", &Fixture::test_filters_enforce_no_query_parameters)
                           << call("json", &Fixture::test_filters_enforce_application_json)
                           << END;
                       return enf;
                     }()
                  << END;
              return fil;
            }()
         << call("log", &Fixture::test_log)
         << call("resources", &Fixture::test_resources)
         << []() {
              Stream res("responses");
              res << []() {
                       Stream ise("internal_server_error");
                       ise << call("default", &Fixture::test_response_internal_server_error_default)
                           << call("reason", &Fixture::test_response_internal_server_error_reason)
                           << END;
                       return ise;
                     }()
                  << []() {
                       Stream bad("bad_request");
                       bad << call("default", &Fixture::test_response_bad_request_default)
                           << call("reason", &Fixture::test_response_bad_request_reason)
                           << END;
                       return bad;
                     }()
                  << END;
              return res;
            }()
         << call("service", &Fixture::test_service)
         << []() {
              Stream exc("usage");
              exc << call("Example", &Fixture::test_usage_Example)
                  << END;
              return exc;
            }()
         << END;
  return finalize(series);
}
#endiv

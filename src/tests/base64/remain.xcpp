// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
#divert <fpp>
#import std.deque
#import std.function
#import std.string
#import std.byte
#import std.vector
#import nonstd.required.Octet
namespace tests::base64 {
  //
  // Just what you think it should be
  //
  using Args = std::deque<std::string>;
  //
  // Function<OCTET> Matches the sense of encode & decode with the const reference argument.
  // To wit:
  //   tunitas::base64::decode(std::string const &) -> vector<byte>    ... encode into some bytes (may be dangerously unprintable)
  //   tunitas::base64::encode(std::string const &) -> vector<char>    ... encode into a "safe" string
  //
  template<nonstd::required::Octet OCTET> using Function = std::function<std::vector<OCTET> (std::string const &)>;
}
#endiv
#divert <hpp>
namespace tests::base64 {
  //
  // This is a tester so it doesn't have to have a great UX
  //
  // Usage:
  //
  //   auto main(int c, char *v[]) -> int {
  //     using namespace tests::base64;
  //     return remain(Function{&tunitas::base64::decode}, Args{&v[0], &v[c]});
  //   }
  //
  template<nonstd::required::Octet OCTET> auto remain(Function<OCTET>, Args) -> int;
}
#endiv
#divert <tpp>
#import std.copy
#import std.cout
#import std.cerr
#import std.exception
#import std.ifstream
#import std.istream_iterator
#import std.move
#import std.ostream_iterator
#import std.ostringstream
#import std.string_literals
#import std.setw
#import std.setfill
#import std.is_same
#import std.isprint
#import tunitas.base64.Exception
using namespace std::literals;
template<nonstd::required::Octet OCTET> auto tests::base64::remain(Function<OCTET> function, Args args) -> int {
  int exit_code{0};
  auto const NAME = args.front();
  args.pop_front();
  if (args.empty()) {
    args.push_front("-");
  }
  for (auto &word : args) {
    std::string plaintext;
    if ("-h"s == word || "--usage" == word || "--help" == word) {
      std::cout << "usage: " << NAME << " [ --help | --usage ] {  - | word | @filename } ...\n";
      return 0;
    } else if ("-"s == word) {
      std::ostringstream out;
      std::istream_iterator<char> eof, inbound{std::cin};
      std::ostream_iterator<char> outbound{out};
      std::copy(inbound, eof, outbound);
      plaintext = out.str();
    } else if (word.empty()) {
      // Special case this so we don't have to check for empty many times in other clauses
      plaintext = std::move(word);
    } else if ('-' == word.front()) {
      std::cerr << NAME << ": error, unknown argument " << word << '\n';
      return 1;
    } else if ('@' == word.front()) {
      std::ifstream in(word.substr(1));
      std::ostringstream out;
      std::istream_iterator<char> eof, inbound{in};
      std::ostream_iterator<char> outbound{out};
      std::copy(inbound, eof, outbound);
      plaintext = std::move(out.str());
    } else {
      plaintext = std::move(word);
    }
    try {
      auto &outbound{std::cout};
      for (auto b : function(plaintext)) {
        auto c = char(b);
        if (std::isprint(c)) {
          outbound << c;
        } else {
          // blik ... there is no easier way to do this?
          outbound << '\\' << 'x' << std::setw(2) << std::setfill('0') << (unsigned) b;
        }
      }
    } catch (tunitas::base64::Exception const &e) {
      std::cout << "FAIL (base64) " << e.what() << '\n';
      exit_code = 1;
    } catch (std::exception const &e) {
      std::cout << "FAIL (unexpected) " << e.what() << '\n';
      exit_code = 1;
    }
  }
  return exit_code;
}
#endiv

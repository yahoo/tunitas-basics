// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/tunitas-basics/blob/master/LICENSE for terms.
#divert <hpp>
#import c.const_stringz
#import re.string
#import want.sys.posix
#import want.sys.posix.packaging.getpw
namespace want::sys::posix {
  //
  // Get a password file entry, by name
  // Is thread safe.
  //
  // Usage:
  //
  //   std::string some_name{...somehow...}
  //   auto got = getpwname(some_name);
  //   if (ok(got)) {
  //      auto ptr = value(std::move(got));
  //      ...use ptr->pw_uid...
  //      ...etc...
  //   } else {
  //      std::cerr << "could not get " << some_name << " because " << error_code(got).message() << '\n';
  //   }
  //
  inline auto getpwname(re::string<c::const_stringz> name) -> packaging::getpw::Result;
}
#endiv
#divert <ipp>
#import std.move
#import want.sys.posix.entry.Buffer
#include <cerrno>
auto want::sys::posix::getpwname(re::string<c::const_stringz> name) -> packaging::getpw::Result {
  using namespace packaging::getpw;
  Pointer ptr{new Buffer{}};
  ::passwd *result{nullptr};
  auto r = [&ptr, name, &result]() {
	     auto g = ptr.get();
	     return ::getpwnam_r((char const *) name, g->entry(), g->data(), g->size(), &result);
	   }();
  auto errnum = errno; // capture as soon as practical
  auto b = 0 == r && nullptr != result;
  if (!b) {
    ptr.reset();
  }
  return Result{std::move(b), std::move(errnum), std::move(ptr), std::move(result), std::move(r)};
}
#endiv

#!/bin/bash
# Copyright Yahoo Inc. 2021
# Licensed under the terms of the Apache-2.0 license.
# For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
# For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
#
# This is "simpler"? u.r. kidding, yes?
#
# the full end-to-end build using the "nearby" development trees
#
#   buildconf
#   configure
#   make [all]
#   make check
#
# Usage:
#
#   ./maintenance/nearby     (no options)
#
#   prefix=/usr/local \
#   with_std_tunitas=/opt/tunitas \
#   with_temerarious_flagship=/opt/tunitas \
#   ./maintenance/nearby
# 
# Common Idioms:
#
#   with_build=/build maintenance/nearby
#
#   with_tunitas_nearby=/build/tunitas \
#   with_scold_nearby=/build/scold \
#   ./maintenance_nearby
#
# ... you get the idea
#
# AVOID submodules at all ---> to build without submodules
# AVOID submodules at all --->
# AVOID submodules at all --->  with_submodules=no ./maintenance/nearby       (this works because --with-THING=no is --without-THING)
# AVOID submodules at all --->
#
# The scold module "with" variables will naturally default to /opt/scold
# The tunitas "with" variables would be expected to be in /opt/tunitas
#
# Debugging the initial buildconf-configure-make
#
#   YOU SEE -----> config.status: executing depfiles commands
#   YOU SEE -----> config.status: error: in `/build/tunitas/butano':
#   YOU SEE -----> config.status: error: Something went wrong bootstrapping makefile fragments
#   YOU SEE ----->     for automatic dependency tracking.  Try re-running configure with the
#   YOU SEE ----->     '--disable-dependency-tracking' option to at least be able to build
#   YOU SEE ----->     the package (albeit without support for automatic dependency tracking).
#   YOU SEE -----> See `config.log' for more details
#
#   YOU RUN -----> enable_dependency_tracking=no ./maintenance/nearby 
#
cd ${0%/*}/.. || exit 70
: ${prefix:=/exp/tunitas}
if ! [[ -d ${prefix} ]] ; then
    # no /exp/tunitas, maybe no /opt/tunitas either, we'll take that risk
    : ${with_std_tunitas:=/opt/tunitas}
elif [[ -z ${with_std_tunitas} ]] ; then
    # no /opt/tunitas, but yes /exp/tunitas
    if [[ -d /opt/tunitas ]] ; then
        : ${with_std_tunitas:=/opt/tunitas}
    else
        : ${with_std_tunitas:=${prefix}}
    fi
fi
if [[ -z ${with_std_scold} ]] ; then
    if [[ -d /opt/scold ]] ; then
        : ${with_std_scold:=/opt/scold}
    else
        : ${with_std_scold:=${with_std_tunitas%/*}/scold}
    fi
fi
: ${with_siblings:=${PWD%/*}}
#
# What is in the "nearby" area?  Maybe it is in /build
# But priority for anything below us in the submodules?
#
if [[ -n $with_build ]] ; then
    # The "build" directory is a meta-meta area, e.g. /build, with sublocations for tunitas, state-space, scold, nonstd, adhoc and so on.
    : ${with_tunitas_nearby:=${with_build?}/tunitas}
    : ${with_scold_nearby:=${with_build?}/scold}
elif [[ -n $with_nearby ]] ; then
    # The "nearby" directory is a convenience directory ... nearby ... that blends it all together.
    : ${with_tunitas_nearby:=${with_nearby?}}
    : ${with_scold_nearby:=${with_nearby?}}
elif [[ -d /build/tunitas ]] && [[ -d /build/scold ]] ; then
    # guess at /build
    : ${with_build:=/build}
    : ${with_tunitas_nearby:=${with_build?}/tunitas}
    : ${with_scold_nearby:=${with_build?}/scold}
elif [[ -d ${PWD%/*}/nearby ]] ; then
    # guess at .../nearby
    : ${with_nearby:=${PWD%/*}/nearby}
    : ${with_tunitas_nearby:=${with_nearby?}}
    : ${with_scold_nearby:=${with_nearby?}}
else
    # this won't work because ... there is no obvious default
    : ${with_build:=no}
    : ${with_nearby:=no}
    : ${with_tunitas_nearby:=${with_nearby?}}
    : ${with_scold_nearby:=${with_nearby?}}
fi
{
    #
    # AVOID using submodules.
    #
    : ${with_submodules:=no} # nope ..... : ${with_submodules:=${PWD}/submodules} # must be a full path
    declare __submodules_nearby
    if [[ no == ${with_submodules:-no} ]] ; then
        # could be no
        __submodules_nearby=no
    elif [[ yes == ${__submodules_nearby:-no} ]] ; then
        __submodules_nearby=$(realpath ./submodules)
        { echo "${0##*/}: warning, submodules should not be merely 'yes'"
          echo "${0##*/}: warning, submodules should be a full path"
          echo "${0##*/}: notice, continuing with ${__submodules_nearby?}"; } 1>&2
    else
        # [[unchecked]] musn't be merely 'yes' or a non-existent directory 
        __submodules_nearby=$(realpath ${with_submodules?})
    fi
}
#
# Decide the defaults
# you can always override the defaults from the command line, but that can be onerous
#
function set_all_defaults_no() {
    : ${with_hypogeal_twilight:=${with_std_scold?}} # not needed in after hypogeal-twilight >= 0.43 or 0.44 or so
    : ${with_microhttpd__:=no}
    : ${with_module_format:=no}
    : ${with_module_half:=no}
    : ${with_module_ip:=no}
    : ${with_module_langu:=no}
    : ${with_module_nonstd:=no}
    : ${with_module_options:=no}
    : ${with_module_posix:=no}
    : ${with_module_rigging:=no}
    : ${with_module_std:=no}
    : ${with_module_string:=no}
    : ${with_module_sys:=no}
}
function set_all_defaults_relatively() {
    : ${with_hypogeal_twilight:=$1/hypogeal-twilight}
    : ${with_microhttpd__:=${2:-$1}/microhttpd++}
    : ${with_module_format:=$1/module-format}
    : ${with_module_half:=$1/module-half}
    : ${with_module_ip:=$1/module-ip}
    : ${with_module_langu:=$1/module-ip}
    : ${with_module_nonstd:=$1/module-nonstd}
    : ${with_module_options:=$1/module-options}
    : ${with_module_posix:=$1/module-posix}
    : ${with_module_rigging:=$1/module-rigging}
    : ${with_module_std:=$1/module-std}
    : ${with_module_string:=$1/module-string}
    : ${with_module_sys:=$1/module-sys}
}
if [[ -n ${with_microhttpd} ]] ; then
    __deprecated=with_microhttpd
    __preferred=with_microhttpd__
    __displayed=microhttpd++
    echo "${0##*/}: warning, '${__deprecated?}' should be '${__preferred?} (${__displayed?})"
    echo "${0##*/}: notice, assigning ${__deprecated?}=${with_microhttpd} into '${__preferred?} for ${__displayed})"
    : ${with_microhttpd__:=${with_microhttpd}}
fi 1>&2
if [[ no == ${__submodules_nearby:-no} ]] && [[ no == ${with_scold_nearby} ]] ; then
    set_all_defaults_no
elif [[ yes == ${__submodules_nearby:-no} ]] ; then
    # this was supposed to be caught before
    echo "${0##*/}: error, submodules or nearby cannot be merely 'yes'" 1>&2
    exit 78
elif [[ no != ${__submodules_nearby:-no} ]] ; then
    set_all_defaults_relatively ${__submodules_nearby?}
elif [[ no != ${with_scold_nearby} ]] ; then
    set_all_defaults_relatively ${with_scold_nearby?}
else
    set_all_defaults_no
fi
: ${with_nonstd_gcc:=/exp/gcc/${GCC:-11}} # ... WATCHOUT you, the caller must ensure that PATH is set consistenly with this
# check whether this is different than what PATH finds in the natural course.
if type -p gcc 2>/dev/null ; then
    exe=$(type -p gcc 2>/dev/null)
    if [[ $exe != ${with_nonstd_gcc}/bin/gcc ]] ; then
        echo "${0}: notice, instead correct with_nonstd_gcc=${with_nonstd_gcc} $0"
        for w in {1..30} ; do
            echo "${0}: warning, the explicit setting with_nonstd_gcc=${with_nonstd_gcc} is not consistent with $exe from PATH"
        done
        echo "${0}: notice, permanently fix this as -- PATH=${with_nonstd_gcc}/bin:\$PATH with_nonstd_gcc=${with_nonstd_gcc} $0"
    fi 1>&2
fi
: ${with_nonstd_half:=/opt/nonstd/half} # ..................... REQUIRED because there is no "standard half"
: ${with_nonstd_jsoncpp:=no} # else /opt/nonstd/jsoncpp # ..... OPTIONAL nowadays
: ${with_temerarious_flagship:=${with_tunitas_nearby?}/temerarious-flagship}
#
: ${CPPFLAGS:=-Wno-cpp}
: ${CXXFLAGS:=-Wno-attributes -Wno-deprecated-declarations}
: ${LDFLAGS:=-O0 -ggdb -no-install}
if type -p nproc 2>/dev/null ; then
    : ${MAKEFLAGS:=-j$(nproc)}
fi
eval \
    ${prefix:+prefix=$prefix} \
    ${with_hypogeal_twilight:+with_hypogeal_twilight=$with_hypogeal_twilight} \
    ${with_temerarious_flagship:+with_temerarious_flagship=$with_temerarious_flagship} \
    ./buildconf &&
./configure \
    ${enable_dependency_tracking:+--enable-dependency-tracking=$enable_dependency_tracking} \
    ${enable_configure_verbose:+--enable-configure-verbose=$enable_configure_verbose} \
    ${enable_configure_debug:+--enable-configure-debug=$enable_configure_debug} \
    --disable-mock-build \
    ${prefix:+--prefix=$prefix} \
    ${with_nearby:+--with-nearby=$with_nearby} ${with_external:+--with-external=$with_external} \
    ${with_submodules:+--with-submodules=$with_submodules} \
    ${with_nonstd_gcc:+--with-nonstd-gcc=$with_nonstd_gcc} \
    ${with_hypogeal_twilight:+--with-hypogeal-twilight=$with_hypogeal_twilight} \
    ${with_temerarious_flagship:+--with-temerarious-flagship=$with_temerarious_flagship} \
    ${with_microhttpd__:+--with-microhttpd++=$with_microhttpd__} \
    ${with_module_c:+--with-module-c=$with_module_c} \
    ${with_module_half:+--with-module-half=$with_module_half} \
    ${with_nonstd_half:+--with-nonstd-half=$with_nonstd_half} \
    ${with_module_format:+--with-module-format=$with_module_format} \
    ${with_module_ip:+--with-module-ip=$with_module_ip} \
    ${with_module_langu:+--with-module-langu=$with_module_langu} \
    ${with_module_nonstd:+--with-module-nonstd=$with_module_nonstd} \
    ${with_module_options:+--with-module-options=$with_module_options} \
    ${with_module_posix:+--with-module-posix=$with_module_posix} \
    ${with_module_rigging:+--with-module-rigging=$with_module_rigging} \
    ${with_module_std:+--with-module-std=$with_module_std} \
    ${with_module_string:+--with-module-string=$with_module_string} \
    ${with_module_sys:+--with-module-sys=$with_module_sys} \
    ${with_std_tunitas:+--with-std-tunitas=$with_std_tunitas} \
    ${with_std_scold:+--with-std-scold=$with_std_scold} \
    ${end} &&
make ${MAKEFLAGS:+MAKEFLAGS="$MAKEFLAGS"} ${CPPFLAGS:+CPPFLAGS="$CPPFLAGS"} ${CXXFLAGS:+CXXFLAGS="$CXXFLAGS"} ${LDFLAGS:+LDFLAGS="$LDFLAGS"} &&
make check ${MAKEFLAGS:+MAKEFLAGS="$MAKEFLAGS"} ${CPPFLAGS:+CPPFLAGS="$CPPFLAGS"} ${CXXFLAGS:+CXXFLAGS="$CXXFLAGS"} ${LDFLAGS:+LDFLAGS="$LDFLAGS"} &&
echo OK DONE

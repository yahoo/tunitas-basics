// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::run { class Runner; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::run::Runner : public cppunit::test::Fixture {
public:
  auto test_constructor_path() -> void;
  auto test_constructor_exec_path() -> void;
  auto test_constructor_path_name() -> void;
  auto test_constructor_exec_path_name() -> void;
  auto test_start() -> void;
  auto test_run() -> void;
  auto test_wait() -> void;
  template<unsigned COUNT> auto test_many() -> void;
  static auto suite() -> cppunit::Test *;
protected:
  struct Jogger;
  struct Horse;
};
namespace tests::unit::run {
  template<> auto Runner::test_many<0>() -> void;
  template<> auto Runner::test_many<1>() -> void;
  template<> auto Runner::test_many<2>() -> void;
  template<> auto Runner::test_many<3>() -> void;
}
#endiv
#divert <cpp>
#import tests.unit.run.Runner.Horse
#import tests.unit.run.Runner.Jogger
namespace tests::unit::run {
  auto Runner::test_constructor_path() -> void {
    Jogger j1{std::filesystem::path{"/bin/true"}};
    Jogger j2{std::string{"/bin/true"}};
    Jogger j3{"/bin/true"};
    CPPUNIT_ASSERT(sizeof (j1) == sizeof (j2) && sizeof (j2) == sizeof (j3));
  }
  auto Runner::test_constructor_exec_path() -> void {
    Jogger j1{Jogger::EXEC, std::filesystem::path{"/bin/true"}};
    Jogger j2{Jogger::EXEC, std::string{"/bin/true"}};
    Jogger j3{Jogger::EXEC, "/bin/true"};
    CPPUNIT_ASSERT(sizeof (j1) == sizeof (j2) && sizeof (j2) == sizeof (j3));
    Jogger k1{Jogger::EXECP, std::filesystem::path{"false"}};
    Jogger k2{Jogger::EXECP, std::string{"false"}};
    Jogger k3{Jogger::EXECP, "false"};
    CPPUNIT_ASSERT(sizeof (k1) == sizeof (k2) && sizeof (k2) == sizeof (k3));
  }
  auto Runner::test_constructor_path_name() -> void {
    Jogger j1{std::filesystem::path{"/bin/true"}, "veracity"};
    Jogger j2{std::string{"/bin/true"}, "vérité"};
    Jogger j3{"/bin/true", "verdad"};
    CPPUNIT_ASSERT(sizeof (j1) == sizeof (j2) && sizeof (j2) == sizeof (j3));
  }
  auto Runner::test_constructor_exec_path_name() -> void {
    Jogger j1{Jogger::EXEC, std::filesystem::path{"/bin/false"}, "veracity"};
    Jogger j2{Jogger::EXEC, std::string{"/bin/false"}, "vérité"};
    Jogger j3{Jogger::EXEC, "/bin/false", "verdad"};
    CPPUNIT_ASSERT(sizeof (j1) == sizeof (j2) && sizeof (j2) == sizeof (j3));
    Jogger k1{Jogger::EXECP, std::filesystem::path{"falsity"}};
    Jogger k2{Jogger::EXECP, std::string{"false"}, "fausseté"};
    Jogger k3{Jogger::EXECP, "falsedad"}; // is that really Spanish for "falsity"?  I blame translate.google.com
    CPPUNIT_ASSERT(sizeof (k1) == sizeof (k2) && sizeof (k2) == sizeof (k3));
  }
  auto Runner::test_start() -> void {
    Horse subject;
    auto started = subject.start(); // <------------- test this
    CPPUNIT_ASSERT(ok(started));
    auto waited = subject.wait();
    CPPUNIT_ASSERT(ok(waited));
  }
  auto Runner::test_run() -> void {
    Horse subject;
    auto ran = subject.run();
    CPPUNIT_ASSERT(ok(ran));
  }
  auto Runner::test_wait() -> void {
    Horse subject;
    auto started = subject.start();
    CPPUNIT_ASSERT(ok(started));
    auto waited = subject.wait(); // <------------- test this
    CPPUNIT_ASSERT(ok(waited));
  }
  template<> auto Runner::test_many<0>() -> void {
    // Exactly what it says.  It tests zero cases.
    CPPUNIT_ASSERT(true);
  }
  template<> auto Runner::test_many<1>() -> void {
    Horse subject;
    auto started = subject.start();
    CPPUNIT_ASSERT(ok(started));
    auto waited = subject.wait();
    CPPUNIT_ASSERT(ok(waited));
  }
  template<> auto Runner::test_many<2>() -> void {
    Horse subject0, subject1;
    auto started0 = subject0.start();
    auto started1 = subject1.start();
    CPPUNIT_ASSERT(ok(started0));
    CPPUNIT_ASSERT(ok(started1));
    auto waited0 = subject0.wait();
    auto waited1 = subject1.wait();
    CPPUNIT_ASSERT(ok(waited0));
    CPPUNIT_ASSERT(ok(waited1));
  }
  template<> auto Runner::test_many<3>() -> void {
    Horse subject[3];
    for (auto &item : subject) {
      auto started = item.start();
      CPPUNIT_ASSERT(ok(started));
    }
    for (auto &item : subject) {
      auto waited = item.wait();
      CPPUNIT_ASSERT(ok(waited));
    }
  }
}
#import rigging.suite.io
auto tests::unit::run::Runner::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("Runner");
  series << []() {
              Stream sub{"constructor"};
              sub << call("path", &Runner::test_constructor_path)
                  << call("exec,path", &Runner::test_constructor_exec_path)
                  << call("path,name", &Runner::test_constructor_path_name)
                  << call("exec,path,name", &Runner::test_constructor_exec_path_name)
                ;
              return sub;
            }()
         << call("start", &Runner::test_start)
         << call("run", &Runner::test_run)
         << call("wait", &Runner::test_wait)
         << []() {
              Stream sub{"many"};
              sub << call("0", &Runner::test_many<0>) // oh come on!
                  << call("1", &Runner::test_many<1>)
                  << call("2", &Runner::test_many<2>)
                  << call("3", &Runner::test_many<3>)
                ;
              return sub;
            }()      ;
  return finalize(series);
}
#endiv

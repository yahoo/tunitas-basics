// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::program { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::program::Fixture : public cppunit::test::Fixture {
public:
  auto test_true() -> void;
  auto test_false() -> void;
  auto test_date() -> void;
  auto test_uname() -> void;
  auto test_echo() -> void;
  auto test_cat() -> void;
  auto test_sed() -> void;
  auto test_tr() -> void;
  auto test_diff() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#import std.string
#import std.string_literals
#import tests.unit.program.Cat
#import tests.unit.program.Date
#import tests.unit.program.Echo
#import tests.unit.program.False
#import tests.unit.program.Sed
#import tests.unit.program.Tr
#import tests.unit.program.True
#import tests.unit.program.Uname
using namespace std::string_literals;
auto tests::unit::program::Fixture::test_true() -> void {
  True prog;
  auto ran = prog.run();
  std::cerr << "ran " << ok(ran) << '\n'
            << "error " << error_code(ran).message() << '\n';
  CPPUNIT_ASSERT(ok(ran));
  auto p = pid(ran);
  auto s = status(ran);
  auto i = ifexited(s);
  auto x = exitstatus(s);
  std::cerr << "true "
            << " pid=" << (pid_t)p // [[FIXTHIS]] there should be a nice way to print id::Process
            << " i=" << i
            << " x=" << x
            << " status=" << (int)status(ran)
            << " value=" << value(status(ran))
            << " ifexited=" << (int)ifexited(s)
            << " exitstatus=" << (int)exitstatus(s)
            << '\n';
  CPPUNIT_ASSERT(sys::id::Process{} != p);
  CPPUNIT_ASSERT(true == i);
  CPPUNIT_ASSERT(0 == x);
}
auto tests::unit::program::Fixture::test_false() -> void {
  False prog;
  auto ran = prog.run();
  CPPUNIT_ASSERT(ok(ran));
  auto p = pid(ran);
  auto s = status(ran);
  auto i = ifexited(s);
  auto x = exitstatus(s);
  std::cerr << "false "
            << " pid=" << (pid_t) p // [[FIXTHIS]] ibidem.
            << " i=" << i
            << " x=" << x
            << " status=" << (int)status(ran)
            << " value=" << value(status(ran))
            << " ifexited=" << (int)ifexited(s)
            << " exitstatus=" << (int)exitstatus(s)
            << '\n';
  CPPUNIT_ASSERT(sys::id::Process{} != p);
  CPPUNIT_ASSERT(true == i);
  CPPUNIT_ASSERT(1 == x);
}
auto tests::unit::program::Fixture::test_date() -> void {
  Date prog;
  auto ran = prog.run();
  CPPUNIT_ASSERT(ok(ran));
  auto p = pid(ran);
  auto s = status(ran);
  auto i = ifexited(s);
  auto x = exitstatus(s);
  std::cerr << "date"
            << " pid=" << (pid_t) p // [[FIXTHIS]] ibidem
            << " i-x" << i << '-' << x << '\n';
  CPPUNIT_ASSERT(sys::id::Process{} != p);
  CPPUNIT_ASSERT(true == i);
  CPPUNIT_ASSERT(0 == x);
}
auto tests::unit::program::Fixture::test_uname() -> void {
  Uname prog;
  auto ran = prog.run();
  CPPUNIT_ASSERT(ok(ran));
  auto p = pid(ran);
  auto s = status(ran);
  auto i = value(s);
  std::cerr << "uname pid=" << (pid_t) p << " status=(int)" << i << '\n';
  CPPUNIT_ASSERT(sys::id::Process{} != p);
  CPPUNIT_ASSERT(0 == i);
}
auto tests::unit::program::Fixture::test_echo() -> void {
  Echo prog;
  prog.add({"apple", "banana", "cherry", "dog", "eagle", "frog", "goat", "harpie", "idiot", "kangaroo", "llama", "marmot", "narwal", "ocelot", "possum", "quail", "rat", "seal", "turkey", "usufruct", "vole", "whale", "xylotyl", "yak", "zebra"});
  auto ran = prog.run();
  CPPUNIT_ASSERT(ok(ran));
  auto p = pid(ran);
  auto s = status(ran);
  auto i = value(s);
  std::cerr << "true pid=" << (pid_t) p << " status=(int)" << i << '\n';
  CPPUNIT_ASSERT(sys::id::Process{} != p);
  CPPUNIT_ASSERT(0 == i);
}
auto tests::unit::program::Fixture::test_cat() -> void {
  Cat prog;
  auto started = prog.start();
  CPPUNIT_ASSERT(ok(started));
  prog.stream() << "apple"
                << '\n' << "banana"
                << '\n' << "cherry"
                << '\n' << "dog"
                << '\n' << "eagle"
                << '\n' << "frog"
                << '\n' << "goat"
                << '\n' << "harpie"
                << '\n' << "idiot"
                << '\n' << "kangaroo"
                << '\n' << "llama"
                << '\n' << "marmot"
                << '\n' << "narwal"
                << '\n' << "ocelot"
                << '\n' << "possum"
                << '\n' << "quail"
                << '\n' << "rat"
                << '\n' << "seal"
                << '\n' << "turkey"
                << '\n' << "usufruct"
                << '\n' << "vole"
                << '\n' << "whale"
                << '\n' << "xylotyl"
                << '\n' << "yak"
                << '\n' << "zebra"
                << '\n';
  auto ran = prog.run();
  auto p = pid(ran);
  auto s = status(ran);
  auto i = value(s);
  std::cerr << "true pid=" << (pid_t) p << " status=(int)" << i << '\n';
  CPPUNIT_ASSERT(sys::id::Process{} != p);
  CPPUNIT_ASSERT(0 == i);
}
auto tests::unit::program::Fixture::test_sed() -> void {
  Sed prog;
  auto started = prog.start();
  CPPUNIT_ASSERT(ok(started));
  prog.stream() << "apple"
                << '\n' << "banana"
                << '\n' << "cherry"
                << '\n' << "dog"
                << '\n' << "eagle"
                << '\n' << "frog"
                << '\n' << "goat"
                << '\n' << "harpie"
                << '\n' << "idiot"
                << '\n' << "kangaroo"
                << '\n' << "llama"
                << '\n' << "marmot"
                << '\n' << "narwal"
                << '\n' << "ocelot"
                << '\n' << "possum"
                << '\n' << "quail"
                << '\n' << "rat"
                << '\n' << "seal"
                << '\n' << "turkey"
                << '\n' << "usufruct"
                << '\n' << "vole"
                << '\n' << "whale"
                << '\n' << "xylotyl"
                << '\n' << "yak"
                << '\n' << "zebra"
                << '\n';
  auto ran = prog.run();
  auto p = pid(ran);
  auto s = status(ran);
  auto i = value(s);
  std::cerr << "true pid=" << (pid_t) p << " status=(int)" << i << '\n';
  CPPUNIT_ASSERT(sys::id::Process{} != p);
  CPPUNIT_ASSERT(0 == i);
  CPPUNIT_ASSERT(true);
}
#import std.hex
#import std.dec
auto tests::unit::program::Fixture::test_tr() -> void {
  Tr prog;
  auto started = prog.start();
  CPPUNIT_ASSERT(ok(started));
  prog.stream() << "apple"
                << '\n' << "banana"
                << '\n' << "cherry"
                << '\n' << "dog"
                << '\n' << "eagle"
                << '\n' << "frog"
                << '\n' << "goat"
                << '\n' << "harpie"
                << '\n' << "idiot"
                << '\n' << "kangaroo"
                << '\n' << "llama"
                << '\n' << "marmot"
                << '\n' << "narwal"
                << '\n' << "ocelot"
                << '\n' << "possum"
                << '\n' << "quail"
                << '\n' << "rat"
                << '\n' << "seal"
                << '\n' << "turkey"
                << '\n' << "usufruct"
                << '\n' << "vole"
                << '\n' << "whale"
                << '\n' << "xylotyl"
                << '\n' << "yak"
                << '\n' << "zebra"
                << '\n';
  auto ran = prog.run();
  auto p = pid(ran);
  auto s = status(ran);
  auto k = ok(s);
  std::cerr << "true"
            << " pid=" << (pid_t) p // [[FIXTHIS]] ibidem
            << " status=" << std::hex << s << std::dec << " ok=" << k << '\n';
  CPPUNIT_ASSERT(sys::id::Process{} != p);
  CPPUNIT_ASSERT(true == k);
}
#import shell.program.Program.DIFF
auto tests::unit::program::Fixture::test_diff() -> void {
  using namespace shell::program;
  auto prog = Program<DIFF>{"/dev/null", "/dev/null"};
  auto ran = prog.run();
  auto p = pid(ran);
  auto s = status(ran);
  auto k = ok(s);
  std::cerr << "true"
            << " pid=" << (pid_t) p // [[FIXTHIS]] ibidem
            << " status=" << std::hex << s << std::dec << " ok=" << k << '\n';
  CPPUNIT_ASSERT(sys::id::Process{} != p);
  CPPUNIT_ASSERT(true == k);
}
#import rigging.suite.io
auto tests::unit::program::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("Program");
  series << call("true", &Fixture::test_true)
         << call("false", &Fixture::test_false)
         << call("date", &Fixture::test_date)
         << call("uname", &Fixture::test_uname)
         << call("echo", &Fixture::test_echo)
         << call("cat", &Fixture::test_cat)
         << call("sed", &Fixture::test_sed)
         << call("tr", &Fixture::test_tr)
         << call("diff", &Fixture::test_diff)
         << END;
  return finalize(series);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace shell::run {
  //
  // The machinery to get a pipe that we can use
  // Descendants only; protected lineage.
  //
  // Usage:
  //
  //   see Pipe_To, Pipe_From which are the only users.
  //
  struct Pipefit;
};
#endiv
#divert <hpp>
#import sys.id.File
#import sys.call.result.pipe.Value
class shell::run::Pipefit {
protected:
  ~Pipefit() = default;
  Pipefit() = default;
  // All this is only for the descendants, never for outsiders.
  using File = sys::id::File;
  struct Result {
    using Pipe = sys::call::result::pipe::Value<File>;
  };
  inline static auto pipe() -> Result::Pipe;
  inline static constexpr auto PIPE_IS_CLOEXEC = true;
};
#endiv
#divert <ipp>
#import sys.posix.pipe
#import sys.posix.cloexec
#import sys.posix.close
auto shell::run::Pipefit::pipe() -> Result::Pipe {
  namespace p = sys::posix;
  if constexpr (PIPE_IS_CLOEXEC) {
    return p::pipe(p::O::CLOEXEC);
  } else {
    auto piped = p::pipe();
    if (!ok(piped)) {
      return piped;
    } else {
      // WATCHOUT - in case any *other* thread now or later does fork+exec, ensure this side is not inherited
      auto clrd = p::cloexec(read_side(piped), true);
      auto clwr = p::cloexec(write_side(piped), true);
      if (ok(clrd) && ok(clwr)) {
        return piped;
      } else {
        // We have no choice but to shut 'em both down and leave with errno of clexed
        auto rd = read_side(piped);
        auto wr = write_side(piped);
        // Ensure the rd & wr do not leak; we could not set cloexec ... do what happened?
        (void) p::close(rd);
        (void) p::close(wr);
        auto renum = std::max(error_num(clrd), error_num(clwr)); // arbitrarily pick one, but not the zero errnum
        return Result::Pipe{false, renum, rd, wr};
      }
    }
  }
}
#endiv

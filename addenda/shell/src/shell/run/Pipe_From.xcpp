// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace shell::run {
  //
  // Run, with input piped from...
  //   we read
  //   they write (stdout)
  //
  // You MUST call run() or wait() to collect the child.
  // You MUST call in the one of the following three orders:
  //
  //   Order #1 start-read-wait
  //
  //     constructor{}
  //     start()    ... required .... obviously.
  //     read()     ... optional .... to read from the running process
  //     wait()     ... preferred ... clean up after your children.
  //
  //   Order #2 start-read-run     run implies draining inbound data and wait()
  //                               think: "run to completion"
  //
  //     constructor{}
  //     start()    ... required ... obviously.
  //     read()     ... optional ... to read from the running process
  //     run()      ... possible ... implicitly does a start(...) or a wait(...) as necessary
  //
  //   Order #3 run (only)         run implies draining inbound data and wait()
  //
  //     constructor{}
  //     run()      ... possible ... implicitly does a start(...) or a wait(...) as necessary
  //                ... and as such there never was a chance to read anything from the child.
  //                ... therefore this scenario is not useful for the pipe-from use case.
  //
  // Usage:
  //
  //   class my::Program : public Pipe_From {
  //   public:
  //     Program(...); ....    must choose 'exec' or 'execp' and establish argv[0]
  //   };
  //
  //   Program prog{...};
  //   auto f = prog.start(); .................   
  //   prog.stream() >> var1 >> var2 >> var3 >> ...read from it...
  //   auto w = prog.wait();
  //
  //   auto w = prog.run(); ......................  possible but pointless (no input given)
  //
  class Pipe_From;
}
#endiv
#divert <hpp>
#import std.string
#import std.unique_ptr
#import nonstd.stream.Posixbuf
#import nonstd.stream.Posix
#import shell.run.Pipefit
#import shell.run.Runner
#import sys.exits.Code
#import sys.call.result.Value
#import ssize_t
class shell::run::Pipe_From : public Runner, protected Pipefit {
  struct Ancestors {
    using Ancestor = Runner;
    using Usufruct = Pipefit;
  };
  using Ancestor = Ancestors::Ancestor;
public:
  inline explicit Pipe_From(std::filesystem::path);
  inline Pipe_From(Exec, std::filesystem::path);
  inline explicit Pipe_From(std::filesystem::path, std::string name);
  inline Pipe_From(Exec, std::filesystem::path, std::string name);
  struct Result : public Ancestor::Result {
    using Read = sys::call::result::Value<ssize_t>;
  };
  using results = Result; // [[REMOVEWHEN]] -- the compatiblity is no longer necessary.
  auto start() -> Result::Start override;
  virtual auto stream() -> std::istream &;
  virtual auto read([[out]] std::string &inbound) -> Result::Read;
  virtual auto run() -> Result::Run;
  virtual auto run(std::string &inbound) -> Result::Run;
  virtual auto wait() -> Result::Wait override;
protected:
  using Stream = nonstd::stream::Posix;
  using Streambuf = nonstd::stream::Posixbuf;
  Stream shell; // only has a rdbuf buffer pointer after 'start' and before 'run'
  std::unique_ptr<Streambuf> buffer;
private:
  inline auto do_start() -> Result::Run;
  auto grow_child(File writefd) -> sys::exits::Code;
};
#endiv
#divert <ipp>
#import std.move
shell::run::Pipe_From::Pipe_From(std::filesystem::path path)
  : Ancestor{std::move(path)}
  , shell{}
  , buffer{}
{ }
shell::run::Pipe_From::Pipe_From(Exec exec, std::filesystem::path path)
  : Ancestor{exec, std::move(path)}
  , shell{}
  , buffer{}
{ }
shell::run::Pipe_From::Pipe_From(std::filesystem::path path, std::string name)
  : Ancestor{std::move(path), std::move(name)}
  , shell{}
  , buffer{}
{ }
shell::run::Pipe_From::Pipe_From(Exec exec, std::filesystem::path path, std::string name)
  : Ancestor{exec, std::move(path), std::move(name)}
  , shell{}
  , buffer{}
{ }
auto shell::run::Pipe_From::do_start() -> Result::Run {
  // [[FIXTHIS]] this is cut & paste with Pipe_To
  if (Process{} == running) {
    auto started = start();
    if (!ok(started)) {
      // convert the forked-shaped result int oa waited-shaped result.
      return {ok(started), error_num(started)};
    }
  }
  return {true, 0};
}
#endiv
#divert <cpp>
#import std.make_unique
#import exit
#import sys.posix.close
#import sys.posix.fork
#import sys.posix.pipe
auto shell::run::Pipe_From::start() -> Result::Start {
  auto piped = sys::posix::pipe();
  if (!ok(piped)) {
    return {ok(piped), error_num(piped)};;
  }
  auto forked = sys::posix::fork();
  if (is_parent(forked)) {
    running = process(forked);
    close(write_side(piped));
    buffer = std::make_unique<nonstd::stream::Posixbuf>(/*[[FIXTHIS]] to accept sys::id::File*/(int)read_side(piped), std::ios::in);
    shell.rdbuf(buffer.get());
  } else if (is_child(forked)) {
    close(read_side(piped));
    exit(grow_child(write_side(piped)));
  }
  fork_invariance_check(forked);
  return forked;
}
#import std.runtime_error
auto shell::run::Pipe_From::stream() -> std::istream & {
  if (Process{} == this->running) {
    throw std::runtime_error{"not started"};
  }
  return shell;
}
#include <cerrno>
#import ssize_t
auto shell::run::Pipe_From::read(std::string &inbound) -> Result::Read {
  // Pesky ... have to convert from istream's vague non-error indicator to POSIX' precise error indicators.
  //
  // https://en.cppreference.com/w/cpp/io/basic_istream/gcount
  //    gcount() is updated on individual read items
  //    but gcount() is not updated by std::getline(...)
  //
  // Hints at behavior:
  //   https://en.cppreference.com/w/cpp/io/basic_istream/read
  //       <quote>The number of successfully extracted characters can be queried using gcount().</quote>
  //   https://en.cppreference.com/w/cpp/io/basic_istream/readsome
  //       unclear semantic on files; clear intended semantic on tty devices, per Notes.
  //   https://en.cppreference.com/w/cpp/string/basic_string/getline
  //       <quote>Behaves as UnformattedInputFunction, except that input.gcount() is not affected.</quote>
  //
  std::getline(shell, inbound);
  bool ok = shell.eof() || shell.good();
  ssize_t got = ok ? inbound.size() : -1;
  return {ok, errno, got};
}
auto shell::run::Pipe_From::run([[out]] std::string &inbound) -> Result::Run {
  auto started = do_start();
  if (!ok(started)) {
    return started;
  }
  auto red = read(inbound);
  if (!ok(red)) {
    return {ok(red), error_num(red)};
  } else {
    return run();
  }
}
auto shell::run::Pipe_From::run() -> Result::Run {
  auto started = do_start();
  if (!ok(started)) {
    return started;
  }
  // We read the rest of the input ... until eof or stream failure (if that ever happens).
  for (char c; shell >> c ;) {
    continue;
  }
  if (!shell.eof()) {
    return {false, errno};
  }
  return wait();
}
auto shell::run::Pipe_From::wait() -> Result::Wait {
  // WATCHOUT - this MUST be idempotent
  // ... though the duplicate do_wait(...) will fail as the prior already collected this->running
  shell.rdbuf(nullptr);
  if (auto ptr = buffer.get(); nullptr != ptr) {
    // buffer will close the descriptor upon release (as documented in nonstd::stream::Posixbuf)
    // But we want it closed NOW before we go off and wait for the upstream (to be done).
    ptr->close();
  }
  return Ancestor::do_wait();
}
#import std.exception
#import sys.exits.constants
#import sys.posix.close
#import sys.posix.dup2
auto shell::run::Pipe_From::grow_child(File writefd) -> sys::exits::Code {
  // We're in the child now, NOTHING ESCAPES
  try {
    auto const stdout = File{1};
    auto duped = dup2(writefd, stdout);
    if (!ok(duped)) {
      dying_utterance(error_code(duped).message());
    } else {
      if constexpr (PIPE_IS_CLOEXEC) {
        auto execed = do_exec();
        dying_utterance(error_code(execed).message());
      } else {
        auto closed = sys::posix::close(writefd);
        if (!ok(closed)) {
          dying_utterance(error_code(closed).message());
        } else {
          auto execed = do_exec();
          dying_utterance(error_code(execed).message());
        }
      }
    }
  } catch (std::exception const &e) {
    dying_utterance(e.what());
    return sys::exits::OS;
  } catch (...) {
    dying_utterance("unknown");
  }
  return sys::exits::OS;
}
#endiv

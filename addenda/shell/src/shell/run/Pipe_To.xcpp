// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace shell::run {
  //
  // Run, with output piped to...
  //   we write
  //   they read (stdin)
  //
  // You MUST call run() or wait() to collect the child.
  // You MUST call in the following three orders:
  //
  //   Order #1 start-read-wait
  //
  //     constructor{}     
  //     start()    ... required .... obviously.
  //     write()    ... optional .... to write into the running process.
  //     wait()     ... preferred ... clean up your children.
  //
  //   Order #2 start-write-run     run implies wait; think: "run to completion"
  //
  //     constructor{}
  //     start()    ... required ... obviously.
  //     write()    ... optional ... to write into the running process.
  //     run()      ... possible ... to close the outbound and run to completion
  //
  //   Order #3 run (only)
  //
  //     constructor{}
  //     run()      ... possible ... implicitly does a start(...) or a wait(...) as necessary
  //                ... and as such there never was a chance to write anything to the child.
  //                ... therefore this scenario is not useful for the pipe-to use case.
  //
  // Usage:
  //
  //   class my::Program : public Pipe_To {
  //   public:
  //     Program(...); ....    must choose 'exec' or 'execp' and establish argv[0]
  //   };
  //
  //   Program prog{...};
  //   auto f = prog.start();
  //   prog.stream() << ...talk to it...
  //   auto r = prog.run(); ............ REQUIRED
  //   auto w = prog.wait();
  //
  //   auto w = prog.run(...outbound...string...);
  //   auto w = prog.run(); ......................  possible but pointless (no input given)
  //
  class Pipe_To;
}
#endiv
#divert <hpp>
#import std.string
#import std.unique_ptr
#import nonstd.stream.Posixbuf
#import nonstd.stream.Posix
#import shell.run.Runner
#import shell.run.Pipefit
#import sys.exits.Code
#import ssize_t
class shell::run::Pipe_To : public Runner, protected Pipefit {
  struct Ancestors {
    using Ancestor = Runner;
    using Usufruct = Pipefit;
  };
  using Ancestor = Ancestors::Ancestor;
public:
  inline explicit Pipe_To(std::filesystem::path);
  inline Pipe_To(Exec, std::filesystem::path);
  inline explicit Pipe_To(std::filesystem::path, std::string name);
  inline Pipe_To(Exec, std::filesystem::path, std::string name);
  struct Result : public Ancestor::Result {
    using Write = sys::call::result::Value<ssize_t>;
  };
  using results = Result; // [[REMOVEWHEN]] -- the compatiblity is no longer necessary.
  auto start() -> Result::Start override;
  virtual auto stream() -> std::ostream &;
  virtual auto write(std::string const &outbound) -> Result::Write;
  virtual auto run() -> Result::Run override;
  virtual auto run(std::string const &outbound) -> Result::Run;
  virtual auto wait() -> Result::Wait override;
protected:
  using Stream = nonstd::stream::Posix;
  using Streambuf = nonstd::stream::Posixbuf;
  Stream shell; // only has a rdbuf buffer pointer after 'start' & before 'run'
  std::unique_ptr<Streambuf> buffer;
private:
  inline auto do_start() -> Result::Run;
  auto grow_child(File readfd) const noexcept -> sys::exits::Code;
};
#endiv
#divert <ipp>
#import std.move
shell::run::Pipe_To::Pipe_To(std::filesystem::path path)
  : Ancestor{std::move(path)}
  , shell{}
  , buffer{}
{ }
shell::run::Pipe_To::Pipe_To(Exec exec, std::filesystem::path path)
  : Ancestor{exec, std::move(path)}
  , shell{}
  , buffer{}
{ }
shell::run::Pipe_To::Pipe_To(std::filesystem::path path, std::string name)
  : Ancestor{std::move(path)}
  , shell{}
  , buffer{}
{ }
shell::run::Pipe_To::Pipe_To(Exec exec, std::filesystem::path path, std::string name)
  : Ancestor{exec, std::move(path), std::move(name)}
  , shell{}
  , buffer{}
{ }
auto shell::run::Pipe_To::do_start() -> Result::Run {
  // [[FIXTHIS]] this is cut & paste with Pipe_From
  if (Process{} == running) {
    auto started = start();
    if (!ok(started)) {
      // convert the forked-shaped result int oa waited-shaped result.
      return Result::Run{ok(started), error_num(started)};
    }
  }
  return Result::Run{true, 0};
}
#endiv
#divert <cpp>
#import std.make_unique
#import exit
#import sys.posix.close
#import sys.posix.cloexec
#import sys.posix.fork
#import sys.posix.pipe
auto shell::run::Pipe_To::start() -> Result::Start {
  auto piped = pipe();
  if (!ok(piped)) {
    return Result::Start{ok(piped), error_num(piped)};
  }
  auto forked = sys::posix::fork();
  if (is_parent(forked)) {
    running = process(forked);
    close(read_side(piped));
    buffer = std::make_unique<nonstd::stream::Posixbuf>(/*[[FIXTHIS]] to accept id::File as well as int*/ (int)write_side(piped), std::ios::out);
    shell.rdbuf(buffer.get());
  } else if (is_child(forked)) {
    close(write_side(piped));
    exit(grow_child(read_side(piped)));
  }
  fork_invariance_check(forked);
  return Result::Start{ok(forked), error_num(forked)};
}
#import std.runtime_error
auto shell::run::Pipe_To::stream() -> std::ostream & {
  if (Process{} == this->running) {
    throw std::runtime_error{"not started"};
  }
  return shell;
}
#include <cerrno>
auto shell::run::Pipe_To::write(std::string const &outbound) -> Result::Write {
  // Pesky ... have to convert from ostream's vague non-error indicator to POSIX precise error indicators.
  //
  // Icky ... https://en.cppreference.com/w/cpp/io/basic_ostream/write
  //          defines write in terms of per-character operations
  // <quote>so, unlike the formatted output functions, this function does not set the failbit on failure.</quote>
  // Thus: only shell.setstate(badbit) is called on failure.
  //
  // [[WATCHOUT]] there is no "pcount" analog of std::basic_istream<C,T>::gcount()
  //              c.f. https://en.cppreference.com/w/cpp/io/basic_ostream/pcount
  // [[WATCHOUT]] we cannot detect partial writes (short writes) in the ostream api
  //
  // See /usr/include/c++/7/ostream (no suffix) wherein is open-coded
  //
  //   auto std::basic_ostream<T,C>::_M_write(const char_type* __s, streamsize __n) -> void {
  //     const streamsize __put = this->rdbuf()->sputn(__s, __n);
  //     if (__put != __n)
  //        this->setstate(ios_base::badbit);
  //     }
  //   }
  //
  shell.write(outbound.data(), outbound.size());
  // [[NASTY]] buffer::xsputn(...) returns the bytes written but that becomes lost in the abstraction layer.
  if (shell) {
    return {true, 0, ssize_t(outbound.size())};
  } else {
    return {false, errno, -1}; // [[WATCHOUT]] we cannot get fidelity on partial writes (short writes)
  }
}
auto shell::run::Pipe_To::run(std::string const &outbound) -> Result::Run {
  auto started = do_start();
  if (!ok(started)) {
    return started;
  }
  auto written = write(outbound);
  if (!ok(written)) {
    return {ok(written), error_num(written)};
  } else {
    return run();
  }
}
auto shell::run::Pipe_To::run() -> Result::Run {
  auto started = do_start();
  if (!ok(started)) {
    return started;
  }
  return wait();
}
auto shell::run::Pipe_To::wait() -> Result::Wait {
  // WATCHOUT - this MUST be idempotent
  // ... though the duplicate do_wait(...) will fail as the prior already collected this->running
  shell.flush();
  shell.rdbuf(nullptr);
  if (auto ptr = buffer.get(); nullptr != ptr) {
    // buffer will close the descriptor upon release (as documented in nonstd::stream::Posixbuf)
    // But we want it closed NOW before we go off and wait for the downstream (to be done reading).
    ptr->close();
  }
  return Ancestor::do_wait();
}
#import std.exception
#import sys.exits.constants
#import sys.posix.close
#import sys.posix.dup2
auto shell::run::Pipe_To::grow_child(File readfd) const noexcept -> sys::exits::Code {
  // We're in the child now, NOTHING ESCAPES
  // We're in the child now, NOTHING ESCAPES
  try {
    auto const stdin = File{0};
    auto duped = dup2(readfd, stdin);
    if (!ok(duped)) {
      dying_utterance(error_code(duped).message());
    } else {
      if constexpr (PIPE_IS_CLOEXEC) {
        auto execed = do_exec();
        dying_utterance(error_code(execed).message());
      } else {
        auto closed = close(readfd);
        if (!ok(closed)) {
          dying_utterance(error_code(closed).message());
        } else {
          auto execed = do_exec();
          dying_utterance(error_code(execed).message());
        }
      }
    }
  } catch (std::exception const &e) {
    dying_utterance(e.what());
  } catch (...) {
    dying_utterance("unknown");
  }
  return sys::exits::OS;
}
#endiv

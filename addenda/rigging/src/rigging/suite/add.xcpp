// -*- c++ -*- more or less but in the SCOLD styling
#divert <hpp>
#import rigging.required.Fixture
#forward rigging.suite.Stream
#forward rigging.suite.detail.Add
namespace rigging::suite {
  //
  // Create an adder for a test or test suites onto a stream.
  // A detail::Add performs the addition
  //
  // Ownership of the free Test * is taken up by the detail::Add, which will destroy or release it
  //
  // Usage:
  //
  //   Stream series("some-name");
  //   {
  //     Stream subseries("sub-name");
  //     series << add(subseries); <-----\ (there)
  //   }                                  \ (there)
  //   series << add<more::Fixture>() <----+---------- preferred
  //             add<than::Fixture>()
  //             add<enough::Fixture>();
  //
  inline auto add(Stream &&) -> detail::Add;
  inline auto move(Stream &) -> detail::Add;
  template<required::Fixture FIXTURE> inline auto add() -> detail::Add;
}
#import cppunit.Test
namespace rigging::suite {
  //
  // [[deprecated]] Usage:
  // 
  //   {
  //     Stream subseries("sub-name");
  //     series << add(subseries.release()); <-------------- avoid
  //   }
  //   series << add(new Case());
  //
  [[deprecated]] inline auto add(cppunit::Test *) -> detail::Add;
}
#endiv
#divert <ipp>
#import rigging.suite.detail.Add
auto rigging::suite::add(cppunit::Test *test) -> detail::Add {
  // ownership passes to the detail::Add
  return detail::Add(test);
}
template<rigging::required::Fixture FIXTURE> inline auto rigging::suite::add() -> detail::Add {
  return detail::Add(FIXTURE::suite());
}
#import rigging.suite.Stream
auto rigging::suite::move(Stream &stream) -> detail::Add {
  return detail::Add(stream.disgorge());
}
auto rigging::suite::add(Stream &&stream) -> detail::Add {
  // ownership passes to the detail::Add
  return detail::Add(stream.disgorge());
}
#endiv

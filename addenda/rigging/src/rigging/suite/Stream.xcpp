// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace rigging::suite {
  //
  // A stream model to accrete entries into a test suite.
  //
  // Usage:
  //
  //   Stream series("some-name");
  //   series << call("this", &Fixture::test_this)
  //          << call("that", &Fixture::test_that)
  //          << call("the", &Fixture::test_the)
  //          << call("other", &Fixture::test_other)
  //          << add<some::Fixture>()
  //          << add<andyet::Fixture>()
  //          << add<another::Fixture>()
  //        ;
  //   {
  //     Stream subseries("sub-names");
  //     subseries << call("this", &Fixture::test_sub_this)
  //               << call("that", &Fixture::test_sub_this)
  //               << call("the", &Fixture::test_sub_this)
  //               << call("other", &Fixture::test_sub_this)
  //      series << add(std::move(subseries));
  //   }
  //
  class Stream;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Suite
#import rigging.suite.io
#import rigging.suite.add // [[FIXTHIS]] also suite::move
#import std.unique_ptr
#import rigging.suite.add // and move
class rigging::suite::Stream {
public:
  inline explicit Stream(std::string const &name);
  Stream(Stream const &) = delete;
  auto operator=(Stream const &) -> Stream & = delete;
  inline Stream(Stream &&);
  inline auto operator=(Stream &&) -> Stream &;
  using Suite = cppunit::test::Suite;
  inline auto get() -> Suite *;
  inline auto reset(Suite * = nullptr) -> void;
  [[deprecated("instead use finalize(Stream)")]] inline auto release() -> Suite *;
protected:
  friend auto finalize(Stream &s) -> cppunit::Test * { return s.disgorge(); }
  friend auto suite::operator<<(Stream &, detail::Add &&) -> Stream &;
  friend auto suite::add(Stream &&) -> detail::Add;
  friend auto suite::move(Stream &) -> detail::Add;
  inline auto disgorge() -> Suite *;
  std::unique_ptr<Suite> subject;
};
#endiv
#divert <ipp>
#import rigging.suite.io
#import std.move
namespace rigging::suite {
  Stream::Stream(std::string const &name)
    : subject{new Suite(name)}
  { }
  Stream::Stream(Stream &&other)
    : subject{std::move(other.subject)}
  { }
  auto Stream::operator=(Stream &&other) -> Stream & {
    subject = std::move(other.subject);
    return *this;
  }
  auto Stream::get() -> Suite * {
    return subject.get();
  }
  auto Stream::reset(Suite *redo) -> void {
    subject.reset(redo);
  }
  auto Stream::release() -> Suite * {
    return disgorge(); // the protected one
  }
}
#import std.invalid_argument
namespace rigging::suite {
   auto Stream::disgorge() -> Suite * {
    if (nullptr == subject.get()) {
      throw std::invalid_argument("empty");
    }
    return subject.release();
  }
}
#endiv

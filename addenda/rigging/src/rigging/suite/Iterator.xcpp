// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace rigging::suite {
  class Iterator;
}
#endiv
#divert <hpp>
namespace rigging::suite {
  inline auto operator==(Iterator const &, Iterator const &) -> bool;
  inline auto operator!=(Iterator const &, Iterator const &) -> bool;
}

#import cppunit.Test
class rigging::suite::Iterator {
public:
  inline explicit Iterator(cppunit::Test *owner, int index);
  inline auto operator++() -> Iterator &;
  inline auto operator++(int) -> Iterator;
  inline auto operator*() -> cppunit::Test *;
protected:
  cppunit::Test *owner;
  int index;
  friend auto suite::operator==(Iterator const &, Iterator const &) -> bool;
};
#endiv
#divert <ipp>
auto rigging::suite::operator==(Iterator const &a, Iterator const &b) -> bool {
  return a.owner == b.owner && a.index == b.index;
}

auto rigging::suite::operator!=(Iterator const &b, Iterator const &a) -> bool {
  return !operator==(a, b);
}

rigging::suite::Iterator::Iterator(cppunit::Test *arg_owner, int arg_index)
  : owner(arg_owner)
  , index(arg_index) {
  ;
}

auto rigging::suite::Iterator::operator++() -> Iterator & {
  index++;
  return *this;
}

auto rigging::suite::Iterator::operator++(int) -> Iterator {
  Iterator old(*this);
  operator++();
  return old;
}

auto rigging::suite::Iterator::operator*() -> cppunit::Test * {
  return owner->getChildTestAt(index);
}
#endiv

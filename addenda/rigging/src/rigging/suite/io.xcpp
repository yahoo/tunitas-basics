// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenace see the LICENSE file at the top of the repository.
#divert <fpp>
namespace rigging::suite {
  //
  // See the END marker usage (below)
  //
  enum End { END };
}
#forward rigging.suite.Stream
#forward rigging.suite.detail.Add
#forward rigging.suite.detail.Call
#endiv
#divert <hpp>
namespace rigging::suite {
  //
  // Move semantics only; the usage requires helpers...
  // Example:
  //
  //   using namespace rigging::suite; 
  //   Stream series(...etc...)
  //   series << add(...etc...)
  //          << call(...etc...)
  //          << call(...etc...)
  //          << END; ............................... cute.  This is optional; it only enfoces no further successors.
  //   return finalize(series)
  //
  inline auto operator<<(Stream &, [[move]] detail::Add &&) -> Stream &;
  //
  // A nice place to put the semicolon in a multi-line chain (see the example, above)
  inline auto operator<<(Stream &, End) -> void;
}
#endiv
#divert <ipp>
#import rigging.suite.Stream
#import rigging.suite.add
#import rigging.suite.call
namespace rigging {
  auto suite::operator<<(Stream &s, detail::Add &&a) -> Stream & {
    s.subject->addTest(a.disgorge());
    return s;
  }
  auto suite::operator<<(Stream &s, End) -> void { }
}
#endiv

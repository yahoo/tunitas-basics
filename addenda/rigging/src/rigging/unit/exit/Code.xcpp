// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenace see the LICENSE file at the top of the repository.
#divert <fpp>
namespace rigging::unit::exit {
  struct Code;
}
#endiv
#divert <hpp>
#import std.ostream
namespace rigging::unit::exit {

  inline auto operator<<(std::ostream &o, Code const &e) -> std::ostream &;

  constexpr inline auto operator==(Code const &, Code const &) -> bool;
  constexpr inline auto operator!=(Code const &, Code const &) -> bool;

  inline auto operator&(Code const &, Code const &) -> Code;
  inline auto operator|(Code const &, Code const &) -> Code;

}

#import std.uint8_t
struct rigging::unit::exit::Code {
  // You can only return an 8 bits through the exit/return-from-main interface
  using value_type = std::uint8_t;
  // in-class constructor to allow for constexpr construction of constants <tests.exit.constants>
  inline constexpr Code(value_type arg = 0) : value(arg) { }
  // DO allow conversion from the signed & unsigned integers (recall that value_type is uint8_ which is a char type)
  inline Code(int signed);
  inline Code(int unsigned);
  // Depend upon the conversion constructors intead of variants of operator=
  //
  // WATCHOUT - operator| implementts boolean operations on the "exit code sense"
  //            wherein "zero is true" and "nonzero is false")
  //
  // DO NOT add operator&=(int) as that is ambiguous with operator&=(bool)
  inline auto operator&=(bool) -> Code &;
  inline auto operator&=(Code const &) -> Code &;
  // DO NOT add operator|=(int) as that is ambiguous with operator|=(bool)
  inline auto operator|=(bool) -> Code &;
  inline auto operator|=(Code const &) -> Code &;
  inline operator value_type() const;
  value_type value;
private:
  inline auto assign_and(bool other) -> void;
  inline auto assign_or(bool other) -> void;
  static constexpr bool const TRUE_VALUE_IS_OK = 0;
  static constexpr bool const FALSE_VALUE_IS_FAIL = 1;
};

constexpr auto rigging::unit::exit::operator==(Code const &a, Code const &b) -> bool {
  return a.value == b.value;
}

constexpr auto rigging::unit::exit::operator!=(Code const &a, Code const &b) -> bool {
  return !operator==(a, b);
}
#endiv
#divert <ipp>
#import std.numeric_limits
#import std.invalid_argument
rigging::unit::exit::Code::Code(int signed arg)
  : value(arg) {
  ;
  // examine arg to see if assigning it to this->value has already truncated it
  if (arg < 0 || std::numeric_limits<value_type>::max() < arg) {
    throw std::invalid_argument("truncation has occurred");
  }
}

rigging::unit::exit::Code::Code(int unsigned arg)
  : value(arg) {
  // examine arg to see if assigning it to this->value has already truncated it
  if (std::numeric_limits<value_type>::max() < arg) {
    throw std::invalid_argument("truncation has occurred");
  }
}

auto rigging::unit::exit::operator<<(std::ostream &o, Code const &e) -> std::ostream & {
  // recall that e.value is an int8_t (which prints as a char)
  return o << "exit " << (int)(e.value);
}

auto rigging::unit::exit::operator&(Code const &a, Code const &b) -> Code {
  Code c(a);
  c &= b;
  return c;
}

auto rigging::unit::exit::operator|(Code const &a, Code const &b) -> Code {
  Code c(a);
  c |= b;
  return c;
}

auto rigging::unit::exit::Code::assign_and(bool other) -> void {
  bool bvalue(0 == this->value);
  bvalue &= other;
  this->value = bvalue ? TRUE_VALUE_IS_OK : FALSE_VALUE_IS_FAIL;
}

auto rigging::unit::exit::Code::operator&=(Code const &e) -> Code & {
  assign_and(0 == e.value);
  return *this;
}

auto rigging::unit::exit::Code::operator&=(bool b) -> Code & {
  assign_and(b);
  return *this;
}

auto rigging::unit::exit::Code::assign_or(bool other) -> void {
  bool bvalue(0 == this->value);
  bvalue |= other;
  this->value = bvalue ? TRUE_VALUE_IS_OK : FALSE_VALUE_IS_FAIL;
}

auto rigging::unit::exit::Code::operator|=(Code const &e) -> Code & {
  assign_or(0 == e.value);
  return *this;
}

auto rigging::unit::exit::Code::operator|=(bool b) -> Code & {
  assign_or(b);
  return *this;
}

rigging::unit::exit::Code::operator value_type() const {
  return value;
}
#endiv

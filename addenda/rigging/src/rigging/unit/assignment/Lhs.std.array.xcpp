// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import rigging.unit.assignment.Lhs
#import std.array
#import std.size_t
namespace rigging::unit::assignment {
  // Oddly, and accidentally, this will "work" for the pointers too
  //
  //   Lhs<std::array<char, N>>
  //   Lhs<std::array<char const *, N>>
  //   Lhs<std::array<char *, N>>
  //
  template<typename CHAR, std::size_t N> class Lhs<std::array<CHAR, N>>;
}
#endiv
#divert <hpp>
template<typename CHAR, std::size_t N> class rigging::unit::assignment::Lhs<std::array<CHAR, N>> {
public:
  using value_type = std::array<CHAR, N>;
  using base_type = typename value_type::value_type;

  inline explicit Lhs(value_type &lhs);
  inline auto operator=(Clear) -> Lhs &;
  // copy semantics
  inline auto operator=(value_type const &) -> Lhs &;
  // move semantics
  inline auto operator=(value_type &&) -> Lhs &;
  template<std::size_t N2> inline auto operator=(base_type const (&rhs)[N2]) -> Lhs &;
  template<typename CONTAINER> inline auto operator=(CONTAINER const &rhs) -> Lhs &;
protected:
  value_type &lhs;
};
#endiv
#divert <ipp>
template<typename CHAR, std::size_t N> rigging::unit::assignment::Lhs<std::array<CHAR, N>>::Lhs(value_type &arg_lhs)
  : lhs(arg_lhs) {
  ;
}

#import std.fill_n
template<typename CHAR, std::size_t N> auto rigging::unit::assignment::Lhs<std::array<CHAR, N>>::operator=(Clear) -> Lhs & {
  std::fill_n(lhs.begin(), N, CHAR());
  return *this;
}

template<typename CHAR, std::size_t N> auto rigging::unit::assignment::Lhs<std::array<CHAR, N>>::operator=(value_type const &rhs) -> Lhs & {
  lhs = rhs;
  return *this;
}

#import std.forward
template<typename CHAR, std::size_t N> auto rigging::unit::assignment::Lhs<std::array<CHAR, N>>::operator=(value_type &&rhs) -> Lhs & {
  lhs = std::forward<value_type>(rhs);
  return *this;
}

#import std.copy_n
template<typename CHAR, std::size_t N> template<std::size_t N2> auto rigging::unit::assignment::Lhs<std::array<CHAR, N>>::operator=(base_type const (&rhs)[N2]) -> Lhs & {
  static_assert(N2 <= N, "too big");
  auto end = std::copy_n(&lhs[0], N, lhs.begin());
  std::fill_n(end, N2-N, CHAR());
  return *this;
}

#import std.min
#import std.invalid_argument
template<typename CHAR, std::size_t N> template<typename CONTAINER> auto rigging::unit::assignment::Lhs<std::array<CHAR, N>>::operator=(CONTAINER const &rhs) -> Lhs & {
  if (N < rhs.size()) {
    throw std::invalid_argument("too big");
  }
  auto end = std::copy_n(rhs.begin(), std::min(rhs.size(), N), lhs.begin());
  std::fill_n(end, N-rhs.size(), CHAR());
  return *this;
}
#endiv

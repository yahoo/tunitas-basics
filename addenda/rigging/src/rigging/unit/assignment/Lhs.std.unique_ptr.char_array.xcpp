// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import rigging.unit.assignment.Lhs
#import std.unique_ptr
namespace rigging::unit::assignment {
  template<> class Lhs<std::unique_ptr<char[]>>;
}
#endiv
#divert <hpp>
#import rigging.unit.Buffer
#import rigging.unit.Stringz
#import rigging.unit.assignment.Clear
#import std.unique_ptr

#import std.is_same
template<> class rigging::unit::assignment::Lhs<std::unique_ptr<char[]>> {
public:
  using value_type = std::unique_ptr<char[]>;
  using base_type = typename value_type::element_type;

  inline explicit Lhs(value_type &lhs);
  inline auto operator=(Clear) -> Lhs &;
  // only move semantics
  inline auto operator=(value_type &&) -> Lhs &;
  template<std::size_t N> inline auto operator=(base_type const (&rhs)[N]) -> Lhs &;
  inline auto operator=(Buffer rhs) -> Lhs &;
  inline auto operator=(Stringz rhs) -> Lhs &;
protected:
  value_type &lhs;
  template<typename WRAPPER> inline auto reset_and_copy(WRAPPER) -> void;
};
#endiv
#divert <ipp>
rigging::unit::assignment::Lhs<std::unique_ptr<char[]>>::Lhs(value_type &arg)
  : lhs(arg) {
  ;
}

auto rigging::unit::assignment::Lhs<std::unique_ptr<char[]>>::operator=(Clear) -> Lhs & {
  lhs.reset();
  return *this;
}

#import std.forward
auto rigging::unit::assignment::Lhs<std::unique_ptr<char[]>>::operator=(value_type &&rhs) -> Lhs & {
  lhs = std::forward<value_type>(rhs);
  return *this;
}

#import std.copy
template<std::size_t N> auto rigging::unit::assignment::Lhs<std::unique_ptr<char[]>>::operator=(base_type const (&rhs)[N]) -> Lhs & {
  lhs.reset(new char[N]);
  std::copy(&rhs[0], &rhs[N], lhs.get());
  return *this;
}

#import std.is_same
template<typename WRAPPER> auto rigging::unit::assignment::Lhs<std::unique_ptr<char[]>>::reset_and_copy(WRAPPER rhs) -> void {
  static_assert((std::is_same<WRAPPER, Buffer>::value
                 ||
                 std::is_same<WRAPPER, Stringz>::value),
                "instantiated with neither 'const_buffer' nor 'const_stringz'");
  if (rhs.empty()) {
    lhs.reset();
  } else {
    lhs.reset(new char[rhs.size()]);
    std::copy(rhs.begin(), rhs.end(), lhs.get());
  }
}

auto rigging::unit::assignment::Lhs<std::unique_ptr<char[]>>::operator=(Buffer rhs) -> Lhs & {
  reset_and_copy(rhs);
  return *this;
}

auto rigging::unit::assignment::Lhs<std::unique_ptr<char[]>>::operator=(Stringz rhs) -> Lhs & {
  reset_and_copy(rhs);
  return *this;
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenace see the LICENSE file at the top of the repository.
#divert <fpp>
namespace rigging::unit::test {
  class Bench;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.Outputter
#import cppunit.text.ProgressListener
#import cppunit.result.Collector
#import cppunit.Router
#import std.ostream
#import std.string
#import std.unique_ptr
#import rigging.unit.test.Runner

class rigging::unit::test::Bench {
public:
  inline Bench();
  inline explicit Bench(std::ostream &);
  Bench(Bench const &) = delete;
  auto operator=(Bench const &) -> Bench & = delete;
  using Test = cppunit::Test;
  inline auto addTest(Test *) -> void;
  template<typename... TESTS> inline auto addTest(Test *, TESTS...) -> void;
  inline auto run() -> bool;
  inline auto run(std::string name) -> bool;
  inline auto run(std::string name, std::ostream &) -> bool;
  inline auto run(std::string name, Test *) -> bool;
  inline auto run(std::string name, std::ostream &, Test *) -> bool;
  template<typename... TESTS> inline auto run(std::string name, Test *, TESTS...) -> bool;
  template<typename... TESTS> inline auto run(std::string name, std::ostream &, Test *, TESTS...) -> bool;
protected:
  //
  // WATCHOUT - cppunit class declarations (CppUnit) is off-by-one in the naming
  //
  // 1.   cppunit::Router
  //      CppUnit::Result
  //      a.k.a. "router"
  //          or "event manager"
  //          or "controller"
  //
  // 2.   cppunit::result::Collector
  //      CppUnit::TestResultCollector
  //
  cppunit::Router router;
  cppunit::text::ProgressListener progress;
  cppunit::result::Collector collector;
  std::unique_ptr<cppunit::Outputter> output;
  test::Runner runner; // our runner that is self-aware
  inline auto set_our_output(std::ostream &) -> void;
};
#endiv
#divert <ipp>
#import cppunit.compiler.Outputter

rigging::unit::test::Bench::Bench()
  : router()
  , progress()
  , collector()
  , output() // <--- remains undefined
  , runner() {
  router.addListener(&progress);      
  router.addListener(&collector);        
  // still need runner.addTest(...)
  // still need an output
}

#import std.clog
rigging::unit::test::Bench::Bench(std::ostream &out)
  : Bench() {
  set_our_output(out);
}

auto rigging::unit::test::Bench::addTest(Test *test) -> void {
  runner.addTest(test);
}

template<typename... TESTS> auto rigging::unit::test::Bench::addTest(Test *test, TESTS... tests) -> void {
  runner.addTest(test);
  addTest(tests...);
}

auto rigging::unit::test::Bench::run() -> bool {
  // Does it just run the first one?  Or anything at all?
  // return false if the test failed or the test (by name) was not found.
  return run("");
}

#import std.is_same
#import std.result_of
#import std.logic_error
auto rigging::unit::test::Bench::run(std::string name) -> bool {
  if (nullptr == output.get()) {
    throw std::logic_error("Bench output is not set");
  }
  //
  // reminder: running tests may throw exceptions out of here.
  // reminder: running a test returns void,
  //           you have to recover errors from the collector
  //           and emit them with the outputter.
  static_assert(std::is_same<void, decltype(runner.run(router, name))>::value, "does not return void");
  runner.run(router, name);
  output->write();
  bool status(true);
  status &= 0 == collector.testErrors();
  status &= 0 == collector.testFailures();
  // "Failures Total" is just failures+errors
  status &= 0 == collector.testFailuresTotal();
  return status;
}

auto rigging::unit::test::Bench::run(std::string name, std::ostream &out) -> bool {
  set_our_output(out);
  return run(name);
}

auto rigging::unit::test::Bench::run(std::string name, Test *test) -> bool {
  runner.addTest(test);
  return run(name);
}

auto rigging::unit::test::Bench::run(std::string name, std::ostream &out, Test *test) -> bool {
  runner.addTest(test);
  set_our_output(out);
  return run(name);
}

template<typename... TESTS> auto rigging::unit::test::Bench::run(std::string name, Test *test, TESTS... tests) -> bool {
  runner.addTest(test);
  return run(name, tests...);
}

template<typename... TESTS> auto rigging::unit::test::Bench::run(std::string name, std::ostream &out, Test *test, TESTS... tests) -> bool {
  runner.addTest(test);
  return run(name, out, tests...);
}

auto rigging::unit::test::Bench::set_our_output(std::ostream &out) -> void {
  output.reset(new cppunit::compiler::Outputter(&collector, out));
}
#endiv

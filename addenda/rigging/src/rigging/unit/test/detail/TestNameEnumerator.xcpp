// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenace see the LICENSE file at the top of the repository.
#divert <fpp>
namespace rigging::unit::test::detail {
  class TestNameEnumerator;
}
#endiv
#divert <hpp>
#import rigging.suite.Visitor
#import std.deque
#import std.ostream
#import std.string
#import std.char_traits
class rigging::unit::test::detail::TestNameEnumerator : public suite::Visitor {
  using ancestor = suite::Visitor;
public:
  inline explicit TestNameEnumerator(std::ostream &);
  auto operator()(cppunit::Test *) -> void override final;
  std::ostream &output;
  class Guard;
  template<typename ITEM, typename CHAR, typename TRAITS = std::char_traits<CHAR>> class Iterator;
  std::deque<std::string> parents;
};
#endiv
#divert <ipp>
rigging::unit::test::detail::TestNameEnumerator::TestNameEnumerator(std::ostream &arg_output)
  : output(arg_output) {
  ;
}
#endiv
#divert <cpp>
#import std.copy
#import rigging.suite.Traverser
#import rigging.unit.test.detail.TestNameEnumerator.Guard
#import want.iterator.OutputStream
auto rigging::unit::test::detail::TestNameEnumerator::operator()(cppunit::Test *item) -> void {
  Guard guarded(*this, item->getName());
  want::iterator::OutputStream<std::string, char> oi(output, "/", "");
  std::copy(parents.begin(), parents.end(), oi);
  output << '\n';
  if (item->getChildTestCount()) {
    suite::Traverser retraveler(item);
    retraveler(*this);
  }
}
#endiv

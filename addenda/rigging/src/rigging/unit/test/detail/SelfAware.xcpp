// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace rigging::unit::test::detail {
  class SelfAware;
}
#endiv
#divert <hpp> 
#import cppunit.Test
#import cppunit.test.Suite
#import rigging.unit.test.Runner
class rigging::unit::test::detail::SelfAware : public cppunit::Test {
  using ancestor = cppunit::Test;
 public:
  inline explicit SelfAware(Runner *top);
  auto getName() const -> std::string override final;
  auto run(cppunit::Router *) -> void override final;

  auto countTestCases () const -> int override final;
  auto getChildTestCount() const -> int override final;
  auto doGetChildTestAt(int index) const -> Test * override final;
protected:
  // pointing at, but on owning the object.
  Runner *top;
};
#endiv
#divert <ipp> 
rigging::unit::test::detail::SelfAware::SelfAware(Runner *arg_top)
  : ancestor()
  , top(arg_top) {
  ;
}
#endiv
#divert <cpp>
auto rigging::unit::test::detail::SelfAware::getName() const -> std::string {
  return "--list";
}

#import std.cout
auto rigging::unit::test::detail::SelfAware::run(cppunit::Router *) -> void {
  top->report(std::cout);
}

auto rigging::unit::test::detail::SelfAware::countTestCases() const -> int {
  // There is one test case here
  return 1;  
}

auto rigging::unit::test::detail::SelfAware::getChildTestCount() const -> int {
  // There are zero children
  return 0;
}

#import std.out_of_range
auto rigging::unit::test::detail::SelfAware::doGetChildTestAt(int index) const -> Test * {
  throw std::out_of_range("index out of range");
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import cppunit.test.Case
namespace rigging::unit::test {
  template<typename FIXTURE> class Subcase;
}
#endiv
#divert <hpp>
#import std.string
#import rigging.unit.test.Fixture
#import cppunit.test.Leaf
#import cppunit.Router

// Like a 'Case' but it points to a containing-owning Fixture
// instead of inheriting from a Fixture.
template<typename FIXTURE> class rigging::unit::test::Subcase : public cppunit::test::Leaf {
  using ancestor = cppunit::test::Leaf;
public:
  inline Subcase(std::string name, FIXTURE &owner);
  auto getName() const -> std::string;
  auto run(cppunit::Router *) -> void override; // no need for 'final'
  virtual auto runTest() -> void = 0;
  std::string const name;
  FIXTURE &owner;
  class Functor;
};
#endiv
#divert <ipp>
template<typename FIXTURE> rigging::unit::test::Subcase<FIXTURE>::Subcase(std::string arg_name, FIXTURE &arg_owner)
  : ancestor()
  , name(arg_name)
  , owner(arg_owner) {
  ;
}
#endiv
#divert <tpp>
#import rigging.unit.test.Subcase.Functor
template<typename FIXTURE> auto rigging::unit::test::Subcase<FIXTURE>::getName() const -> std::string {
  return name;
}

#import rigging.unit.test.Subcase.Functor
template<typename FIXTURE> auto rigging::unit::test::Subcase<FIXTURE>::run(cppunit::Router *router) -> void {
  // Following cppunit::test::Case::run(...) but there is no need to
  // setup/teardown the fixture because the owning Fixture is ready to go.
  router->startTest(this);
  router->protect(Functor(this, &Subcase::runTest), this);
  router->endTest(this);
}
#endiv

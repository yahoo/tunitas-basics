// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenace see the LICENSE file at the top of the repository.
#divert <fpp>
namespace rigging::unit::detail {
  class Bufferized;
}
#endiv
#divert <hpp>
#import std.size_t
class rigging::unit::detail::Bufferized {
  // like c::const_buffer but simpler
  // reminder:  std::basic_string<CHAR>;:value_type is 'char' (not the pointer or the array)
  // therefore: Bufferized::value_type is 'char'
protected:
  using value_type = char const;
  inline Bufferized();
  inline /*implicit*/ Bufferized(value_type *, std::size_t);
  template<std::size_t N> inline /*implicit*/ Bufferized(value_type (&)[N]);
public:
  inline auto empty() const -> bool;
  inline auto data() const -> value_type *;
  inline auto size() const -> std::size_t;
  // There is no 'iterator' because this is like c::basic_buffer<char const>
  using const_iterator = value_type *;
  inline auto begin() const -> const_iterator;
  inline auto end() const -> const_iterator;
protected:
  value_type *value;
  std::size_t length;
};
#endiv
#divert <ipp>
// This must be manifest & explicit because the default constructor does not assign anything to the POD types on default initialization
rigging::unit::detail::Bufferized::Bufferized()
  : value(nullptr)
  , length(0) {
  ;
}

rigging::unit::detail::Bufferized::Bufferized(value_type *arg_value, std::size_t arg_size)
  : value(arg_value)
  , length(arg_size) {
  ;
}

template<std::size_t N> rigging::unit::detail::Bufferized::Bufferized(value_type (&arg)[N])
  : value(arg)
  , length(N) {
  ;
}

auto rigging::unit::detail::Bufferized::empty() const -> bool {
  return nullptr == value || 0 == length;
}

auto rigging::unit::detail::Bufferized::data() const -> value_type * {
  return value;
}

auto rigging::unit::detail::Bufferized::size() const -> std::size_t {
  return length;
}

auto rigging::unit::detail::Bufferized::begin() const -> const_iterator {
  return value;
}

auto rigging::unit::detail::Bufferized::end() const -> const_iterator {
  // When value is nullptr then length is 0
  // nullptr+0 == nullptr
  return value+length;
}
#endiv

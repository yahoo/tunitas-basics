// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import rigging.unit.detail.Pointerized
namespace rigging::unit::detail {
  template<typename TYPE, typename PTR_BASE> class Pointerized<TYPE *, PTR_BASE>;
}
#endiv
#divert <hpp>
#import std.remove_pointer
#import rigging.unit.assignment.Clear
#import std.unique_ptr

#import std.is_same
template<typename TYPE, typename PTR_BASE> class rigging::unit::detail::Pointerized<TYPE *, PTR_BASE> {
public:
  using value_type = TYPE *;
  using base_type = typename std::remove_pointer<value_type>::type;
  using ptr_base_type = PTR_BASE;

  inline explicit Pointerized(value_type &lhs);
  inline auto operator=(assignment::Clear) -> Pointerized &;
  inline auto operator=(value_type) -> Pointerized &;
  inline auto operator=(std::unique_ptr<ptr_base_type> const &) -> Pointerized &;
protected:
  value_type &lhs;
};
#endiv
#divert <ipp>
template<typename TYPE, typename PTR_BASE> rigging::unit::detail::Pointerized<TYPE *, PTR_BASE>::Pointerized(value_type &arg)
  : lhs(arg) {
  ;
}

template<typename TYPE, typename PTR_BASE> auto rigging::unit::detail::Pointerized<TYPE *, PTR_BASE>::operator=(assignment::Clear) -> Pointerized & {
  lhs = nullptr;
  return *this;
}

template<typename TYPE, typename PTR_BASE> auto rigging::unit::detail::Pointerized<TYPE *, PTR_BASE>::operator=(value_type rhs) -> Pointerized & {
  lhs = rhs;
  return *this;
}

template<typename TYPE, typename PTR_BASE> auto rigging::unit::detail::Pointerized<TYPE *, PTR_BASE>::operator=(std::unique_ptr<ptr_base_type> const &rhs) -> Pointerized & {
  lhs = rhs.get();
  return *this;
}
#endiv

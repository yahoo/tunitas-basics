// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenace see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace bench {
      class Fixture;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import std.size_t
class tests::unit::bench::Fixture : public cppunit::test::Fixture {
  using ancestor = cppunit::test::Fixture;
public:
  auto test_constructor1() -> void;
  auto test_constructor2() -> void;
  auto test_constructor3() -> void;
  auto test_operator_call() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import unit.bench.Main
using ::unit::bench::Main;
#import tests.unit.bench.Fakeness
auto tests::unit::bench::Fixture::test_constructor1() -> void {
  Main main(Fakeness::suite());
  CPPUNIT_ASSERT(true);
}

auto tests::unit::bench::Fixture::test_constructor2() -> void {
  Main main(Fakeness::suite(), Fakeness::suite());
  CPPUNIT_ASSERT(true);
}

auto tests::unit::bench::Fixture::test_constructor3() -> void {
  Main main(Fakeness::suite(), Fakeness::suite(), Fakeness::suite());
  CPPUNIT_ASSERT(true);
}

auto tests::unit::bench::Fixture::test_operator_call() -> void {
  Main main(Fakeness::suite(), Fakeness::suite(), Fakeness::suite(), Fakeness::suite());
  char arg0[] = "a.out";
  char arg1[] = "/";
  char *argv[] = { arg0, arg1, nullptr };
  int argc = 2;
  auto r = main(argc, argv);
  CPPUNIT_ASSERT(0 == r);
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
#import unit.rigging.suite.add
auto tests::unit::bench::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("bench");
  s << call("constructor1", &Fixture::test_constructor1)
    << call("constructor2", &Fixture::test_constructor2)
    << call("constructor3", &Fixture::test_constructor3)
    << call("operator_call", &Fixture::test_operator_call)
    ;
  return s.release();
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenace see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace want {
      namespace iterator {
        class Fixture;
      }
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::want::iterator::Fixture : public cppunit::test::Fixture {
  using ancestor = cppunit::test::Fixture;
public:
  auto test_something() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
auto tests::unit::want::iterator::Fixture::test_something() -> void {
  // there is something to be tested here, surely
  CPPUNIT_ASSERT(true);
}

#import tests.unit.want.iterator.OutputStream
#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
#import unit.rigging.suite.add
auto tests::unit::want::iterator::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("iterator");
  s << call("something", &Fixture::test_something)
    << add<OutputStream>()
    ;
  return s.release();
}
#endiv

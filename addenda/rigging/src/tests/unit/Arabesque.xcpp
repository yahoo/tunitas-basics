// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenace see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit {
  class Arabesque;
}
#endiv
#divert <hpp>
// This is part of the test: do the modules still #import?
#import unit.bench.Main
#import unit.bench
#import unit.rigging.Buffer
#import unit.rigging.clear
#import unit.rigging.exit.constants
#import unit.rigging.exit
#import unit.rigging.Exit
#import unit.rigging.lhs
#import unit.rigging.Stringz
#import unit.rigging.suite.add
#import unit.rigging.suite.call
#import unit.rigging.suite.Containerizer
#import unit.rigging.suite.Iterator
#import unit.rigging.suite.Stream
#import unit.rigging.suite.Traverser
#import unit.rigging.suite.Visitor
#import unit.rigging.suite
#import unit.rigging.test.Bench
#import unit.rigging.test.Case
#import unit.rigging.test.Fixture
#import unit.rigging.test.Map
#import unit.rigging.test.Runner
#import unit.rigging.test.Subcase.Functor
#import unit.rigging.test.Subcase
#import unit.rigging.test
#import unit.rigging.Usage

// This "detail" module is ... part of the test.
// Ick ... the specializations in here were actually referenced outside
// and as such, this module becomes part of the public interfac, subject
// to compatibility testing
#import unit.rigging.detail.Lhs

// And the test rigger
#import cppunit.Test
#import cppunit.test.Fixture
#import std.size_t
class tests::unit::Arabesque : public cppunit::test::Fixture {
public:
  auto test_namespaces() -> void;
  auto test_types() -> void;
  auto test_constants() -> void;
  auto test_functions() -> void;
  auto test_variables() -> void;

  auto test_detail_Lhs() -> void;

  // Do the type aliasses still work?
  using unit_bench_Main = ::unit::bench::Main;
  using unit_rigging_Buffer = ::unit::rigging::Buffer;
  using unit_rigging_Exit = ::unit::rigging::Exit;
  using unit_rigging_Stringz = ::unit::rigging::Stringz;
  using unit_rigging_suite_Containerizer = ::unit::rigging::suite::Containerizer;
  using unit_rigging_suite_Iterator = ::unit::rigging::suite::Iterator;
  using unit_rigging_suite_Stream = ::unit::rigging::suite::Stream;
  using unit_rigging_suite_Traverser = ::unit::rigging::suite::Traverser;
  using unit_rigging_suite_Visitor = ::unit::rigging::suite::Visitor;
  using unit_rigging_test_Bench = ::unit::rigging::test::Bench;
  using unit_rigging_test_Case = ::unit::rigging::test::Case;
  using unit_rigging_test_Fixture = ::unit::rigging::test::Fixture;
  using unit_rigging_test_Map = ::unit::rigging::test::Map;
  using unit_rigging_test_Runner = ::unit::rigging::test::Runner;
  template<typename FIXTURE> using unit_rigging_test_Subcase = ::unit::rigging::test::Subcase<FIXTURE>;
  using unit_rigging_Usage = ::unit::rigging::Usage;

  struct FX : public cppunit::test::Fixture { };
  using unit_rigging_test_SubcaseFX1_Functor = ::unit::rigging::test::Subcase<FX>::Functor;
  using unit_rigging_test_SubcaseFX2_Functor = unit_rigging_test_Subcase<FX>;

  auto test_Stream() -> void;
  auto test_call() -> void;
  auto test_add() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>

#import unit.bench
#import unit.rigging.exit
#import unit.rigging.suite
#import unit.rigging.test
auto tests::unit::Arabesque::test_namespaces() -> void {
  namespace be = ::unit::bench;
  namespace ex = ::unit::rigging::exit;
  namespace su = ::unit::rigging::suite;
  namespace te = ::unit::rigging::test;
  CPPUNIT_ASSERT(true);
}

auto tests::unit::Arabesque::test_types() -> void {
  // see type aliases (the 'using' declarations) in the class
  CPPUNIT_ASSERT(true);
}

#import unit.rigging.exit.constants
auto tests::unit::Arabesque::test_constants() -> void {
  namespace EX = ::unit::rigging::exit;
  auto const ok = EX::OK;
  CPPUNIT_ASSERT(0 == int(ok));
  auto const fail = EX::FAIL;
  CPPUNIT_ASSERT(0 != int(fail));
  auto const usage = EX::USAGE;
  CPPUNIT_ASSERT(0 != int(usage));
  auto const software = EX::SOFTWARE;
  CPPUNIT_ASSERT(0 != int(software));
  auto const config = EX::CONFIG;
  CPPUNIT_ASSERT(0 != int(config));
  // WATCHOUT - operator| implementts boolean operations on the "exit code sense"
  //            wherein "zero is true" and "nonzero is false")
  // the result is "OK" because something succeeded
  CPPUNIT_ASSERT(EX::OK == (ok | fail | usage | software | config));
  // the result is not "OK" because something failed
  CPPUNIT_ASSERT(EX::OK != (ok & fail & ok & ok & ok));
  CPPUNIT_ASSERT(EX::OK != (ok & ok & usage & ok & ok));
  CPPUNIT_ASSERT(EX::OK != (ok & ok & ok & software & ok));
  CPPUNIT_ASSERT(EX::OK != (ok & ok & ok & ok & config));
}

#import unit.rigging.lhs
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::Arabesque::test_functions() -> void {
  using ::unit::rigging::lhs;
  using ::unit::rigging::suite::add;
  using ::unit::rigging::suite::call;
  // no need to prove they operate correctly; other tests will do that.
  CPPUNIT_ASSERT(true);
}

#import unit.rigging.clear
auto tests::unit::Arabesque::test_variables() -> void {
  using ::unit::rigging::lhs;
  using ::unit::rigging::clear; // <--------- test this (the visibility)
  int subject = -1;
  lhs(subject) = clear;
  CPPUNIT_ASSERT_EQUAL(0, subject);
}

// See the commentariat above.
// This "internal" module is (accidentally) part of the published interface.
#import unit.rigging.detail.Lhs
auto tests::unit::Arabesque::test_detail_Lhs() -> void { 
  constexpr auto const SIZE = 4u;
  // The point of this test is that Lhs is referencable two ways
  {
    // [[deprecated]], the v0.7-series way
    using Lcp = ::unit::rigging::detail::Lhs<char [SIZE]>;
    using ::unit::rigging::clear;
    char buf[SIZE] { '\x99', '\x88', '\x77', '\x66' };
    Lcp lcp(buf);
    lcp = clear;
    CPPUNIT_ASSERT_EQUAL('\x00', buf[0]);
    CPPUNIT_ASSERT_EQUAL('\x00', buf[1]);
    CPPUNIT_ASSERT_EQUAL('\x00', buf[2]);
    CPPUNIT_ASSERT_EQUAL('\x00', buf[3]);
  } {
    // [[current]], the v0.8-series way
    using Lcp = ::rigging::unit::assignment::Lhs<char [SIZE]>;
    using ::rigging::unit::clear;
    char buf[SIZE] { '\x44', '\x33', '\x22', '\x11' };
    Lcp lcp(buf);
    lcp = clear;
    CPPUNIT_ASSERT_EQUAL('\x00', buf[0]);
    CPPUNIT_ASSERT_EQUAL('\x00', buf[1]);
    CPPUNIT_ASSERT_EQUAL('\x00', buf[2]);
    CPPUNIT_ASSERT_EQUAL('\x00', buf[3]);
  }
}

#import rigging.unit.suite.Stream
#import rigging.unit.suite.call
#import rigging.unit.suite.add
auto tests::unit::Arabesque::suite() -> cppunit::Test * {
  using namespace ::rigging::unit::suite;
  Stream series("Arabesque");
  series << call("namespaces", &Arabesque::test_namespaces)
         << call("types", &Arabesque::test_types)
         << call("constants", &Arabesque::test_constants)
         << call("functions", &Arabesque::test_functions)
         << call("variables", &Arabesque::test_variables)
         << call("detail.Lhs", &Arabesque::test_detail_Lhs)
    ;
  return series.release();
}
#endiv

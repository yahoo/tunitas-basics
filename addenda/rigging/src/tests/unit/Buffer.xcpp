// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenace see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    class Buffer;
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import std.size_t
class tests::unit::Buffer : public cppunit::test::Fixture {
  using ancestor = cppunit::test::Fixture;
public:
  constexpr static std::size_t SIZE = 100;

  auto test_default_constructor() -> void;
  auto test_copy_constructor() -> void;
  auto test_pointer_size_constructor() -> void;
  auto test_manifest_array_constructor() -> void;
  auto test_std_string_constructor() -> void;
  auto test_std_vector_constructor() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import unit.rigging.Buffer

auto tests::unit::Buffer::test_default_constructor() -> void {
  ::unit::rigging::Buffer specimen;
  CPPUNIT_ASSERT(specimen.empty());
  CPPUNIT_ASSERT(0 == specimen.size());
  CPPUNIT_ASSERT(specimen.begin() == specimen.end());
}

auto tests::unit::Buffer::test_copy_constructor() -> void {
  char const subbase[SIZE] { '\0' };
  ::unit::rigging::Buffer base(subbase);
  ::unit::rigging::Buffer specimen(base);
  CPPUNIT_ASSERT(!specimen.empty());
  CPPUNIT_ASSERT(SIZE == specimen.size());
  CPPUNIT_ASSERT(specimen.begin() != specimen.end());
}

auto tests::unit::Buffer::test_pointer_size_constructor() -> void {
  char const _base[SIZE] = { '\0' };
  char const *base = &_base[0];
  ::unit::rigging::Buffer specimen(base, SIZE);
  CPPUNIT_ASSERT(!specimen.empty());
  CPPUNIT_ASSERT(SIZE == specimen.size());
  CPPUNIT_ASSERT(specimen.begin() != specimen.end());
}

auto tests::unit::Buffer::test_manifest_array_constructor() -> void {
  char const base[SIZE] = { '\0' };
  ::unit::rigging::Buffer specimen(base);
  CPPUNIT_ASSERT(!specimen.empty());
  CPPUNIT_ASSERT(SIZE == specimen.size());
  CPPUNIT_ASSERT(specimen.begin() != specimen.end());
}

auto tests::unit::Buffer::test_std_string_constructor() -> void {
  std::string base;
  base.resize(SIZE);
  ::unit::rigging::Buffer specimen(base);
  CPPUNIT_ASSERT(!specimen.empty());
  CPPUNIT_ASSERT(SIZE == specimen.size());
  CPPUNIT_ASSERT(specimen.begin() != specimen.end());
}

#import std.vector
auto tests::unit::Buffer::test_std_vector_constructor() -> void {
  std::vector<char> base;
  base.resize(SIZE);
  ::unit::rigging::Buffer specimen(base);
  CPPUNIT_ASSERT(!specimen.empty());
  CPPUNIT_ASSERT(SIZE == specimen.size());
  CPPUNIT_ASSERT(specimen.begin() != specimen.end());
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
auto tests::unit::Buffer::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("Buffer");
  s << call("constructor default", &Buffer::test_default_constructor)
    << call("constructor copy", &Buffer::test_copy_constructor)
    << call("constructor pointer+size", &Buffer::test_pointer_size_constructor)
    << call("constructor manifest array", &Buffer::test_manifest_array_constructor)
    << call("constructor std::string", &Buffer::test_std_string_constructor)
    << call("constructor std::vector<char>", &Buffer::test_std_vector_constructor);
  return s.release();
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenace see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    class Exit;
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::Exit : public cppunit::test::Fixture {
  using ancestor = cppunit::test::Fixture;
public:
  auto test_default_constructor() -> void;
  auto test_copy_constructor() -> void;
  auto test_signed_integer_conversion() -> void;
  auto test_unsigned_integer_conversion() -> void;

  auto test_default_assignment() -> void;
  auto test_integer_assignment() -> void;

  auto test_and_assignment_bool() -> void;
  auto test_and_assignment_Exit() -> void;

  auto test_or_assignment_bool() -> void;
  auto test_or_assignment_Exit() -> void;

  auto test_small_integer_cast() -> void;
  auto test_returning_from_int_result_function_like_main() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import unit.rigging.Exit

namespace ur = ::unit::rigging;
auto tests::unit::Exit::test_default_constructor() -> void {
  ur::Exit exit;
  CPPUNIT_ASSERT(0 == (int)exit);
}

auto tests::unit::Exit::test_copy_constructor() -> void {
  ur::Exit base(99);
  ur::Exit exit(base);
  CPPUNIT_ASSERT(99 == (int)exit);
}

#import std.numeric_limits
auto tests::unit::Exit::test_signed_integer_conversion() -> void {
  for (int i(0), e(std::numeric_limits<ur::Exit::value_type>::max()+1); e != i; ++i) {
    ur::Exit base(i); // <------------- test this
    ur::Exit exit(base);
    CPPUNIT_ASSERT(i == (int)exit);
  }
}

auto tests::unit::Exit::test_unsigned_integer_conversion() -> void {
  for (unsigned i(0), e(std::numeric_limits<ur::Exit::value_type>::max()+1); e != i; ++i) {
    ur::Exit base(i); // <------------ test this
    ur::Exit exit(base);
    CPPUNIT_ASSERT(i == (int)exit);
  }
}

auto tests::unit::Exit::test_default_assignment() -> void {
  ur::Exit base(23);
  ur::Exit lhs;
  lhs = base;
  CPPUNIT_ASSERT(23 == (int)lhs);
}

auto tests::unit::Exit::test_integer_assignment() -> void {
  ur::Exit lhs;
  lhs = 47;
  CPPUNIT_ASSERT(47 == (int)lhs);
}

auto tests::unit::Exit::test_and_assignment_bool() -> void {
  ur::Exit base;
  CPPUNIT_ASSERT(0 == (int)base);
  base &= true;
  CPPUNIT_ASSERT(0 == (int)base);
  base &= false;
  CPPUNIT_ASSERT(0 !=(int)base);
}

auto tests::unit::Exit::test_and_assignment_Exit() -> void {
  ur::Exit base;
  CPPUNIT_ASSERT(0 == (int)base);
  base &= ur::Exit(0); // <------------- a "truth" value, a "success" value
  CPPUNIT_ASSERT(0 == (int)base);
  base &= ur::Exit(33); // <------------ a "false" value, a "failure" indication
  CPPUNIT_ASSERT(0 != (int)base);
}

auto tests::unit::Exit::test_or_assignment_bool() -> void {
}

auto tests::unit::Exit::test_or_assignment_Exit() -> void {
  ur::Exit base;
  CPPUNIT_ASSERT(0 == (int)base); // <----- where "zero" is a success or "truth" or "success" value
  base |= ur::Exit(0);
  CPPUNIT_ASSERT(0 == (int)base);
  base |= ur::Exit(33); // <-------------- disjuncting in "false" is'that helpful
  CPPUNIT_ASSERT(0 == (int)base);
}

auto tests::unit::Exit::test_small_integer_cast() -> void {
  for (unsigned i(0), e(std::numeric_limits<ur::Exit::value_type>::max()+1); e != i; ++i) {
    ur::Exit base(i);
    CPPUNIT_ASSERT(i == (ur::Exit::value_type)base); // <----------- test this
    CPPUNIT_ASSERT(i == (int signed)base); // <--------------------- but aso this
    CPPUNIT_ASSERT(i == (int unsigned)base); // <--- ibidem.
  }
}

namespace {

  auto some_function(::unit::rigging::Exit const &e) -> int {
    return e;
  }

}

auto tests::unit::Exit::test_returning_from_int_result_function_like_main() -> void {
  for (int i(0), e(std::numeric_limits<ur::Exit::value_type>::max()+1); e != i; ++i) {
    ur::Exit base(i);
    int recovered = some_function(base);
    CPPUNIT_ASSERT(i == recovered);
  }
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
auto tests::unit::Exit::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("Exit");
  s << call("constructor default", &Exit::test_default_constructor)
    << call("constructor copy", &Exit::test_copy_constructor)
    << call("convert from signed integer", &Exit::test_signed_integer_conversion)
    << call("convert from unsigned integer", &Exit::test_unsigned_integer_conversion)
    << call("assign default", &Exit::test_default_assignment)
    << call("assign integer", &Exit::test_integer_assignment)
    << call("assign and bool", &Exit::test_and_assignment_bool)
    << call("assign and Exit", &Exit::test_and_assignment_Exit)
    << call("assign or bool", &Exit::test_or_assignment_bool)
    << call("assign or Exit", &Exit::test_or_assignment_Exit)
    << call("cast as integer", &Exit::test_small_integer_cast)
    << call("return from int result function", &Exit::test_returning_from_int_result_function_like_main);

  return s.release();
}
#endiv

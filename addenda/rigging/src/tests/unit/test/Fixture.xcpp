// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenace see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace test {
      class Fixture;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import std.size_t
class tests::unit::test::Fixture : public cppunit::test::Fixture {
  using ancestor = cppunit::test::Fixture;
public:
  auto test_something() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
auto tests::unit::test::Fixture::test_something() -> void {
  // What should we test here?
  // Yes, the end-to-end usage
  //
  // Test the naming system
  // Test running specific tests as       "/path/name/test"
  // Test running all the tests by naming "/"
  // Test running some test somewhere as  ".../name/test"
  CPPUNIT_ASSERT(true);
}

#import tests.unit.test.Bench
#import tests.unit.test.Runner
#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
#import unit.rigging.suite.add
auto tests::unit::test::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("test");
  s << call("something", &Fixture::test_something)
    << add<Bench>()
    << add<Runner>()
    ;
  return s.release();
}
#endiv

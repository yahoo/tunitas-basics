// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace test {
      class Bench;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::test::Bench : public cppunit::test::Fixture {
  using ancestor = cppunit::test::Fixture;
public:
  auto test_constructor() -> void;
  auto test_addTest1() -> void;
  auto test_addTestN() -> void;
  auto test_run_0() -> void;
  auto test_run_1s() -> void;
  auto test_run_2sT() -> void;
  auto test_run_2so() -> void;
  auto test_run_3soT() -> void;
  auto test_run_3sT_T() -> void;
  auto test_run_4soT_T() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import unit.rigging.test.Bench

#import std.cout
auto tests::unit::test::Bench::test_constructor() -> void {
  ::unit::rigging::test::Bench b(std::cout);
  CPPUNIT_ASSERT(true);
}

auto tests::unit::test::Bench::test_addTest1() -> void {
    CPPUNIT_ASSERT(true);

}

auto tests::unit::test::Bench::test_addTestN() -> void {
    CPPUNIT_ASSERT(true);

}

auto tests::unit::test::Bench::test_run_0() -> void {
    CPPUNIT_ASSERT(true);

}

auto tests::unit::test::Bench::test_run_1s() -> void {
    CPPUNIT_ASSERT(true);

}

auto tests::unit::test::Bench::test_run_2sT() -> void {
    CPPUNIT_ASSERT(true);

}

auto tests::unit::test::Bench::test_run_2so() -> void {
    CPPUNIT_ASSERT(true);

}

auto tests::unit::test::Bench::test_run_3soT() -> void {
    CPPUNIT_ASSERT(true);

}

auto tests::unit::test::Bench::test_run_3sT_T() -> void {
    CPPUNIT_ASSERT(true);

}

auto tests::unit::test::Bench::test_run_4soT_T() -> void {
    CPPUNIT_ASSERT(true);

}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
auto tests::unit::test::Bench::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("Bench");
  s << call("constructor", &Bench::test_constructor)
    << call("addTest1", &Bench::test_addTest1)
    << call("addTestN", &Bench::test_addTestN)
    << call("run_", &Bench::test_run_0)
    << call("run_1", &Bench::test_run_1s)
    << call("run_2s", &Bench::test_run_2sT)
    << call("run_2s", &Bench::test_run_2so)
    << call("run_3so", &Bench::test_run_3soT)
    << call("run_3sT_", &Bench::test_run_3sT_T)
    << call("run_4soT_", &Bench::test_run_4soT_T)
    ;
  return s.release();
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace test {
      class Runner;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::test::Runner : public cppunit::test::Fixture {
  using ancestor = cppunit::test::Fixture;
public:
  auto test_constructor() -> void;
  auto test_addTest() -> void;
  auto test_run() -> void;
  auto test_report() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import unit.rigging.test.Runner

auto tests::unit::test::Runner::test_constructor() -> void {
  ::unit::rigging::test::Runner r;
  CPPUNIT_ASSERT(true);
}

auto tests::unit::test::Runner::test_addTest() -> void {
  // TODO ... test this (this whole thing tests this)
  CPPUNIT_ASSERT(true);
}

auto tests::unit::test::Runner::test_run() -> void {
  // TODO ... test this (this whole thing tests this)
  CPPUNIT_ASSERT(true);
}

auto tests::unit::test::Runner::test_report() -> void {
  ::unit::rigging::test::Runner r;
  // This should emit nothing because no tests were installed
  std::ostringstream buf;
  r.report(buf);
  // There is nothing else in the Runner but the "--list" test case
  std::string const actual = buf.str();
  std::string const expected = "/--list\n";
  if (expected != actual) {
    std::cout << "expected = qq!" << expected << "!\n"
              << "actual qq!" << actual << "!\n";
  }
  CPPUNIT_ASSERT(expected == actual);
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
auto tests::unit::test::Runner::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("Runner");
  s << call("constructor", &Runner::test_constructor)
    << call("addTest", &Runner::test_addTest)
    << call("run", &Runner::test_run)
    << call("report", &Runner::test_report)
    ;
  return s.release();
}
#endiv

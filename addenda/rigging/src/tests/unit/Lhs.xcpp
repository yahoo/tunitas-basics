// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    class Lhs;
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import std.size_t
class tests::unit::Lhs : public cppunit::test::Fixture {
  using ancestor = cppunit::test::Fixture;
public:
  constexpr static std::size_t const SIZE = 30;
  auto test_mutable_array() -> void;
  auto test_const_char_pointer() -> void;
  auto test_multable_char_pointer() -> void;
  auto test_const_std_string_pointer() -> void;
  auto test_mutable_std_string_pointer() -> void;
  auto test_std_string() -> void;
  auto test_std_vector_char() -> void;
  auto test_unique_ptr_char_array() -> void;
  auto test_unique_ptr_std_string() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import unit.rigging.lhs
#import unit.rigging.clear
#import std.string
#import std.strlen

namespace ur = ::unit::rigging;

// We are testing these on the left-hand side and on the right-hand side
using ur::lhs;
using ur::clear;

auto tests::unit::Lhs::test_mutable_array() -> void {
  char subject[SIZE] = "decoy";
  lhs(subject) = clear;
  CPPUNIT_ASSERT(0 == std::strlen(subject));
  lhs(subject) = "invective";
  std::string recovered(subject);
  CPPUNIT_ASSERT("invective" == recovered);
  lhs(subject) = clear;
  CPPUNIT_ASSERT(0 == std::strlen(subject));
}

auto tests::unit::Lhs::test_const_char_pointer() -> void {
  char const decoy = 'Z';
  char const *subject = &decoy;
  lhs(subject) = clear;
  CPPUNIT_ASSERT(nullptr == subject);
  lhs(subject) = "univocal";
  std::string recovered(subject);
  CPPUNIT_ASSERT("univocal" == recovered);
  lhs(subject) = clear;
  CPPUNIT_ASSERT(nullptr == subject);
}

auto tests::unit::Lhs::test_multable_char_pointer() -> void {
  char decoy = 'Z'; // <----- NON const (mutable)
  char *subject = &decoy;
  lhs(subject) = clear;
  CPPUNIT_ASSERT(nullptr == subject);
  char other[] = "indigenous";
  lhs(subject) = other;
  CPPUNIT_ASSERT(nullptr != subject);
  CPPUNIT_ASSERT(&other[0] == subject);
  std::string recovered(subject);
  CPPUNIT_ASSERT("indigenous" == recovered);
  lhs(subject) = clear;
  CPPUNIT_ASSERT(nullptr == subject);
}

auto tests::unit::Lhs::test_const_std_string_pointer() -> void {
  std::string const decoy("Z");
  std::string const *subject = &decoy;
  lhs(subject) = clear;
  CPPUNIT_ASSERT(nullptr == subject);
  std::string other("demagogic");
  lhs(subject) = &other; // <------------- because of const-ness of the base, we can only assign the address of another std::string
  CPPUNIT_ASSERT(nullptr != subject);
  CPPUNIT_ASSERT(&other == subject); // <-- as such
  std::string recovered(*subject);
  CPPUNIT_ASSERT("demagogic" == recovered);
  lhs(subject) = clear;
  CPPUNIT_ASSERT(nullptr == subject);
}

auto tests::unit::Lhs::test_mutable_std_string_pointer() -> void {
  std::string decoy("Z"); // <------ NON const (mutable)
  std::string *subject = &decoy;
  lhs(subject) = clear;
  CPPUNIT_ASSERT(nullptr == subject);
  std::string another("resisting");
  lhs(subject) = &another; // <------- merely modifies the pointer, not the underying storage
  CPPUNIT_ASSERT(nullptr != subject);
  CPPUNIT_ASSERT(&another == subject); // <-- as such
  std::string recovered(*subject);
  CPPUNIT_ASSERT("resisting" == recovered);
  lhs(subject) = clear;
  CPPUNIT_ASSERT(nullptr == subject);
}

auto tests::unit::Lhs::test_std_string() -> void {
  std::string subject{"borrowed"};
  lhs(subject) = clear;
  CPPUNIT_ASSERT(subject.empty());
  lhs(subject) = "statement";
  std::string recovered(subject);
  CPPUNIT_ASSERT(!subject.empty());
  CPPUNIT_ASSERT("statement" == recovered);
  lhs(subject) = clear;
  CPPUNIT_ASSERT(subject.empty());
}

auto tests::unit::Lhs::test_std_vector_char() -> void {
  std::vector<char> subject{'f', 'l', 'o', 'w', 'i', 'n', 'g', '\0'};
  lhs(subject) = clear;
  CPPUNIT_ASSERT(0 == subject.size());
  lhs(subject) = "redneck";
  std::string recovered(subject.begin(), subject.end()-1); // don't copy out the '\0'
  CPPUNIT_ASSERT(0 != subject.size());
  CPPUNIT_ASSERT("redneck" == recovered);
  lhs(subject) = clear;
  CPPUNIT_ASSERT(0 == subject.size());
}

auto tests::unit::Lhs::test_unique_ptr_char_array() -> void {
  std::unique_ptr<char[]> subject;
  lhs(subject) = clear;
  CPPUNIT_ASSERT(nullptr == subject.get());
  lhs(subject) = "speaking";
  CPPUNIT_ASSERT(nullptr != subject.get());
  std::string recovered(subject.get());
  CPPUNIT_ASSERT("speaking" == recovered);
  lhs(subject) = clear;
  CPPUNIT_ASSERT(0 == subject.get());
}

auto tests::unit::Lhs::test_unique_ptr_std_string() -> void {
  std::unique_ptr<std::string> subject;
  lhs(subject) = clear;
  CPPUNIT_ASSERT(nullptr == subject.get());
  lhs(subject) = "water";
  CPPUNIT_ASSERT(nullptr != subject.get());
  std::string recovered(*subject.get());
  CPPUNIT_ASSERT("water" == recovered);
  lhs(subject) = clear;
  CPPUNIT_ASSERT(0 == subject.get());
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
auto tests::unit::Lhs::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("Lhs");
  s << call("mutable_array", &Lhs::test_mutable_array)
    << call("const_char_pointer", &Lhs::test_const_char_pointer)
    << call("multable_char_pointer", &Lhs::test_multable_char_pointer)
    << call("const_std_string_pointer", &Lhs::test_const_std_string_pointer)
    << call("mutable_std_string_pointer", &Lhs::test_mutable_std_string_pointer)
    << call("std_string", &Lhs::test_std_string)
    << call("std_vector_char", &Lhs::test_std_vector_char)
    << call("unique_ptr_char_array", &Lhs::test_unique_ptr_char_array)
    << call("unique_ptr_std_string", &Lhs::test_unique_ptr_std_string)
    ;
  return s.release();
}
#endiv

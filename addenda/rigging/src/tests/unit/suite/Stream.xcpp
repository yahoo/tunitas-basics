// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::suite { class Stream; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import rigging.suite.Stream
class tests::unit::suite::Stream : public cppunit::test::Fixture {
  using ancestor = cppunit::test::Fixture;
public:
  using Subject = ::rigging::suite::Stream;
  auto test_constructor_conversion() -> void;
  auto test_constructor_move() -> void;
  auto test_assignment_move() -> void;
  auto test_get() -> void;
  auto test_reset() -> void;
  auto test_release() -> void;
  auto test_operator_insert() -> void;
  auto test_add() -> void;
  auto test_move() -> void;
  auto test_finalize() -> void;
  static auto suite() -> cppunit::Test *;
private:
  static auto generate() -> Subject;
};
#endiv
#divert <cpp>
#import unit.rigging.suite.Stream
auto tests::unit::suite::Stream::test_constructor_conversion() -> void {
  Subject subject{"something"};
  subject.reset();
}
auto tests::unit::suite::Stream::generate() -> Subject {
  return Subject{"something"};
}
auto tests::unit::suite::Stream::test_constructor_move() -> void {
  Subject subject = generate();
  subject.reset();
}
auto tests::unit::suite::Stream::test_assignment_move() -> void {
  Subject subject{"first"};
  subject = generate();
  subject.reset();
}
auto tests::unit::suite::Stream::test_get() -> void {
  Subject subject{"first"};
  auto got = subject.get();
  CPPUNIT_ASSERT(nullptr != got);
  subject.reset();
}
auto tests::unit::suite::Stream::test_reset() -> void {
  Subject subject{"first"};
  auto got = subject.get();
  CPPUNIT_ASSERT(nullptr != got);
  subject.reset();
  auto redo = subject.get();
  CPPUNIT_ASSERT(nullptr == redo);
}
auto tests::unit::suite::Stream::test_release() -> void {
  Subject subject{"first"};
  std::unique_ptr<Subject::Suite> released{subject.release()};
  CPPUNIT_ASSERT(nullptr != released.get());
  auto got = subject.get();
  CPPUNIT_ASSERT(nullptr == got);
}
auto tests::unit::suite::Stream::test_operator_insert() -> void {
  // tested by this test suite (see Stream::suite()
}
auto tests::unit::suite::Stream::test_add() -> void {
  // surely this is tested somewhere else in this test s uite
}
auto tests::unit::suite::Stream::test_move() -> void {
  // tested by this test suite (see Stream::suite()
}
auto tests::unit::suite::Stream::test_finalize() -> void {
  // tested by this test suite (see Stream::suite()
}
#import rigging.suite.io
auto tests::unit::suite::Stream::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  rigging::suite::Stream series("Stream");
  {
    rigging::suite::Stream con("constructor");
    con << call("conversion", &Stream::test_constructor_conversion)
        << call("move", &Stream::test_constructor_move)
      ;
    series << move(con);
  } {
    rigging::suite::Stream ass("assignment");
    ass << call("move", &Stream::test_assignment_move)
      ;
    series << move(ass);
  }
  series << call("get", &Stream::test_get)
         << call("reset", &Stream::test_reset)
         << call("release", &Stream::test_release)
         << call("operator<<", &Stream::test_operator_insert)
         << call("add", &Stream::test_add)
         << call("move", &Stream::test_move)
         << call("finalize", &Stream::test_finalize)
    ;
  return finalize(series);
}
#endiv

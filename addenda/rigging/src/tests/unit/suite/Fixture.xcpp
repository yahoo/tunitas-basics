// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenace see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace suite {
      class Fixture;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import std.size_t
class tests::unit::suite::Fixture : public cppunit::test::Fixture {
  using ancestor = cppunit::test::Fixture;
public:
  auto test_Stream() -> void;
  auto test_call() -> void;
  auto test_add() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import unit.rigging.suite.Stream
auto tests::unit::suite::Fixture::test_Stream() -> void {
  // Well huh ... pretty much we are already testing
  //   Stream
  //   add
  //   call
  ::unit::rigging::suite::Stream s("suite");
  auto accrete = s.get();
  CPPUNIT_ASSERT(nullptr != accrete);
}

#import unit.rigging.suite.call
auto tests::unit::suite::Fixture::test_call() -> void {
  // Well huh ... pretty much we are already testing
  //   Stream
  //   add
  //   call
  ::unit::rigging::suite::Stream s("junkable");
  s << ::unit::rigging::suite::call("Stream", &Fixture::test_Stream)
    << ::unit::rigging::suite::call("call", &Fixture::test_call)
    << ::unit::rigging::suite::call("add", &Fixture::test_add)
    ;
  auto accrete = s.get();
  CPPUNIT_ASSERT(nullptr != accrete);
}

#import unit.rigging.suite.add
auto tests::unit::suite::Fixture::test_add() -> void {
  // Well huh ... pretty much we are already testing
  //   Stream
  //   add
  //   call
  CPPUNIT_ASSERT(true);
  ::unit::rigging::suite::Stream s("junkable");
  s << ::unit::rigging::suite::add(Fixture::suite())
    << ::unit::rigging::suite::add(Fixture::suite())
    ;
  auto accrete = s.get();
  CPPUNIT_ASSERT(nullptr != accrete);
}
#import tests.unit.suite.Stream
#import rigging.suite.io
auto tests::unit::suite::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  rigging::suite::Stream series("suite");
  series << call("Stream", &Fixture::test_Stream)
         << call("call", &Fixture::test_call)
         << call("add", &Fixture::test_add)
         << add<tests::unit::suite::Stream>();
    ;
  return series.release();
}
#endiv

// -*- c++ -*- 53ee2e3e-bd39-4966-95e4-bdf74eed9bbc
#pragma once
//
// WATCHOUT - the definition of mysqlpp::FieldNames should be presented to define mysqlpp::Row
//            else copious warnings are vomitted.
//
#include <mysqlpp.FieldNames>

//
// To wit:
//
// /opt/mysqlpp/include/mysql++/refcounted.h: In instantiation of ‘void mysqlpp::RefCountedPointerDestroyer<T>::operator()(T*) const [with T = mysqlpp::FieldNames]’:
// /opt/mysqlpp/include/mysql++/refcounted.h:128:15:   required from ‘mysqlpp::RefCountedPointer<T, Destroyer>::~RefCountedPointer() [with T = mysqlpp::FieldNames; Destroyer = mysqlpp::RefCountedPointerDestroyer<mysqlpp::FieldNames>]’
// /opt/mysqlpp/include/mysql++/row.h:118:20:   required from here
// /opt/mysqlpp/include/mysql++/refcounted.h:48:37: warning: possible problem detected in invocation of delete operator: [-Wdelete-incomplete]
//   void operator()(T* doomed) const { delete doomed; }
//                                      ^~~~~~
// /opt/mysqlpp/include/mysql++/refcounted.h:48:21: warning: ‘doomed’ has incomplete type
//   void operator()(T* doomed) const { delete doomed; }
//                     ^~~~~~
// /opt/mysqlpp/include/mysql++/row.h:45:7: note: forward declaration of ‘class mysqlpp::FieldNames’
 class FieldNames;
//        ^~~~~~~~~~
// /opt/mysqlpp/include/mysql++/refcounted.h:48:37: note: neither the destructor nor the class-specific operator delete will be called, even if they are declared when the class is defined
//   void operator()(T* doomed) const { delete doomed; }
//                                     ^~~~~~
//

// What we came for.
#include "mysql++/row.h"

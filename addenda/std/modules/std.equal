// -*- c++ -*- bd300245-73b6-4770-8267-5a080dcbeca9
#pragma once
#include <algorithm>

namespace std {

#if __cplusplus > 201103L // __cplusplus == 201300L || __cplusplus == 201400L
  // a.k.a. C++14, C++17, somehow, etc. 
  // Implementation is all taken care of
#elif __cplusplus == 201103L
#define __cplusplus_equal
  // See http://en.cppreference.com/w/cpp/algorithm/equal
  template<typename InputIt1, typename InputIt2> inline auto equal(InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2) -> bool;
  template<typename InputIt1, typename InputIt2, typename BinaryPredicate> inline auto equal( InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, BinaryPredicate p) -> bool;
#else
#error Need C++11 at least
#endif

}

#if defined(__cplusplus_equal)
template<typename InputIt1, typename InputIt2> auto std::equal(InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2) -> bool {
  for (; first1 != last1 && first2 != last2; ++first1, ++first2) {
    if (!(*first1 == *first2)) {
      return false;
    }
  }
  return first1 == last1 && first2 == last2;
}

template<typename InputIt1, typename InputIt2, typename BinaryPredicate> auto std::equal( InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, BinaryPredicate p) -> bool {
  for (; first1 != last1 && first2 != last2; ++first1, ++first2) {
    if (!p(*first1, *first2)) {
      return false;
    }
  }
  return first1 == last1 && first2 == last2;
}
#endif

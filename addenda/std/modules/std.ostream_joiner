// -*- c++ -*- c9a46d5c-f127-4a93-8031-4c2620eafaf3
#pragma once
//
// https://en.cppreference.com/w/cpp/experimental/ostream_joiner
// Library Fundamentals TS v2
//
#if __cplusplus <= 201411
#error std::ostream_joiner is not in C++11, is experimental in C++14, standard in C++17 (get thee to C++17)
#elif !defined(__GNUC__)
  // Here's Lookin' at you kid!  Good luck!
  #include <experimental/iterator>
  namespace std {
    using std::experimental::ostream_joiner;
    using std::experimental::make_ostream_joiner;
  }
#else
  #if __GNUC__ < 7
    #error Not available until at least GCC 7, prior availability is unresearched
  #else
    #include <experimental/iterator>
    #if 7 == __GNUC__ || 8 == __GNUC__ || 9 == __GNUC__ || defined(__cpp_lib_experimental_ostream_joiner)
    //
    // C++14, library fundamentals TS v2
    // http://en.cppreference.com/w/cpp/experimental/ostream_joiner
    // feature __cpp_lib_experimental_ostream_joiner 201411
    //
    // Witness:
    // GCC 7 gcc-c++-7.3.1-2.fc27.x86_64
    // GCC 8 gcc-c++-8.1.1-5.fc28.x86_64
    // GCC 0 gcc-c++-9.1.1-1.fc30.x86_64
    //
    namespace std {
      using std::experimental::ostream_joiner;
      using std::experimental::make_ostream_joiner;
    }
    #else
      // It's (ahem) 2020 now and the C++14 feature is still "experimental?" Hope not.
      #warning PORTTHIS The availability of std::ostream_joiner is still unknown.
      #include <iterator>
    #endif
  #endif
#endif

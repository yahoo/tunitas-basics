// -*- c++ -*- in the SCOLD styling that is so popular these days
#divert <hpp>
#forward nonstd.mvr.SAV
namespace nonstd::mvr {
  // Part of the interface of sav<TYPE>
  // Concept: TYPE is something you want to return
  template<typename TYPE> inline auto andvalue() -> SAV<TYPE>;

  //
  // WATCHOUT in gcc 4.8 (gcc-4.8.3-7.fc19.x86_64)
  // These are not handled correctly, namely the argument type is not inferred appropriately
  // In ctnoext, the TYPE is (always?) inferred as reference-to-a-'std::string' not 'std::string'
  // One must explicitly specialize the function to avoid this.
  // Belief: this is fixed in gcc6
  //
  template<typename TYPE> inline auto andvalue(TYPE const &) -> SAV<TYPE>;
  template<typename TYPE> inline auto andvalue(TYPE &&) -> SAV<TYPE>;
}
#endiv
#divert <ipp>
#import nonstd.mvr.SAV
#import nonstd.mvr.State
#import std.forward
template<typename TYPE> auto nonstd::mvr::andvalue() -> SAV<TYPE> {
  return SAV<TYPE>(State::NONE, TYPE());
}

template<typename TYPE> auto nonstd::mvr::andvalue(TYPE const &the_value) -> SAV<TYPE> {
  return SAV<TYPE>(State::VALUE, the_value);
}

template<typename TYPE> auto nonstd::mvr::andvalue(TYPE &&the_value) -> SAV<TYPE> {
  return SAV<TYPE>(State::VALUE, std::forward<TYPE>(the_value));
}
#endiv

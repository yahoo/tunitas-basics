// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.is_trivial
#import std.is_standard_layout
namespace nonstd::initialized {
  //
  // For the Trivial (T) and Standard Layout types (SL)
  // Provide a well-defined initialization; a default constructor.
  //
  namespace required {
    // POD = TSL
    // POD (Plain Old Data) was too cute to survive
    // TSL (Trivial Standard Layout) is its successor.
    // Whereas std::is_pod is deprecated since C++20, but is rederivable thus.
    template<typename TYPE> concept Trivial_Standard_Layout = std::is_trivial<TYPE>::value && std::is_standard_layout<TYPE>::value;
  }
  template<required::Trivial_Standard_Layout> class Type;
}
#endiv
#divert <hpp>
#import std.swap
template<nonstd::initialized::required::Trivial_Standard_Layout TYPE> class nonstd::initialized::Type {
public:
  using Value = TYPE; //       New School
  using value_type = Value; // old_school
  inline Type() : value{Value{}} { } // <--------------------------- all this machinery to support only this
  // The constructor is explicit, operator Value() is implicit.
  inline explicit Type(Value value) : value{value} { }
  Type(Type const &) = default;
  inline auto operator=(Value other) -> Type & { value = other; return *this; }
  inline auto operator=(Type const &) -> Type & = default;
  inline operator Value() const { return value; }
protected:
  Value value;
  friend auto operator==(Type const &a, Type const &b) -> bool { return a.value == b.value; }
  friend auto operator!=(Type const &a, Type const &b) -> bool { return !operator==(a, b); }
  friend auto swap(Type &a, Type &b) noexcept -> void { std::swap(a.value, b.value); }
};
#endiv
#divert <cpp>
#import nonstd.integers
namespace nonstd::initialized {
  static_assert(required::Trivial_Standard_Layout<bool>);
  static_assert(required::Trivial_Standard_Layout<char>);
  static_assert(required::Trivial_Standard_Layout<wchar_t>);
#if 11 <= __GNUC__
  // ergo ccc 10 still does not have it
  // viz. gcc (GCC) 10.0.1 20200407 (experimental) [20200408:20200413-1752] of cxx-modules branch
  // Surely gcc will have full C++20 by GCC 11
  static_assert(required::Trivial_Standard_Layout<char8_t>);
#endif
  static_assert(required::Trivial_Standard_Layout<char16_t>);
  static_assert(required::Trivial_Standard_Layout<char32_t>);
  static_assert(required::Trivial_Standard_Layout<unsigned char>);
  static_assert(required::Trivial_Standard_Layout<signed char>);
  static_assert(required::Trivial_Standard_Layout<int short signed>);
  static_assert(required::Trivial_Standard_Layout<int long unsigned>);
  static_assert(required::Trivial_Standard_Layout<int signed>);
  static_assert(required::Trivial_Standard_Layout<int unsigned>);
  static_assert(required::Trivial_Standard_Layout<int long signed>);
  static_assert(required::Trivial_Standard_Layout<int long unsigned>);
  static_assert(required::Trivial_Standard_Layout<int long long signed>);
  static_assert(required::Trivial_Standard_Layout<int long long unsigned>);
  static_assert(required::Trivial_Standard_Layout<nonstd::int128_t>);
  static_assert(required::Trivial_Standard_Layout<nonstd::uint128_t>);
}
#endiv

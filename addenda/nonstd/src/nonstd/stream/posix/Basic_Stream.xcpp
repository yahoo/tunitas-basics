// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd.required.Character
#import nonstd.required.Character_Traits
#import std.char_traits
namespace nonstd::stream::posix {
  //
  // An iostream around the (POSIX) Streambuf
  //
  // See Basic_Streambuf
  // Especially see the erudition and commentariat in Basic_Streambuf.xcpp on why this has to exist and is fraught.
  //
  // Usage:
  //
  //   int fd = ...get-one...   open(...), dup(...), socket(...), etc.
  //   Stream six(fd)
  //   six.pubseekoff(0, std::ios_base::beg);
  //   six.read(buf, sizeof (buf));
  //   ...etc...
  //
  template<required::Character CHAR, required::Character_Traits TRAITS = std::char_traits<CHAR>> class Basic_Stream;
}
#endiv
#divert <hpp>
#import nonstd.stream.posix.Basic_Streambuf
namespace nonstd::stream {
  template<required::Character CHAR, required::Character_Traits TRAITS> class posix::Basic_Stream : public std::basic_iostream<CHAR, TRAITS> {
    using ancestor = std::basic_iostream<CHAR, TRAITS>;
    using Base = std::ios_base;
  public:
    using Openmode = std::ios_base::openmode;
    inline Basic_Stream();
    // The stream takes possession of the file descriptor and closes it upon destruction.
    // This file descriptor is now not synchronized with any other stream or streambuf.
    inline explicit Basic_Stream(int fd, Openmode = Base::in | Base::out);
  protected:
    static constexpr auto const PREFERRED_BUFFER_SIZE = 1024lu;
    using Streambuf = Basic_Streambuf<CHAR, TRAITS>;
    Streambuf buf;
  };
}
namespace nonstd::stream::posix {
  template<required::Character C, required::Character_Traits T> Basic_Stream<C,T>::Basic_Stream()
    : ancestor{&buf} // [[PROBLEM?]] referencing the address of as-yet uninitialized memory
    , buf{}
  { }
  template<required::Character C, required::Character_Traits T> Basic_Stream<C,T>::Basic_Stream(int fd, Openmode mode)
    : ancestor{&buf}
    , buf{fd, mode, PREFERRED_BUFFER_SIZE}
  { }
}
#endiv

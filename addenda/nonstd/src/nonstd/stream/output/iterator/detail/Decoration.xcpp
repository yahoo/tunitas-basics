// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace nonstd::stream::output::iterator::detail {
  //
  // A decoration, which is typed.
  //
  // Usage:
  //
  //    Decoration<TYPE> d;                 Capture by value, construct by const reference
  //    Decoration<TYPE, TYPE const &> e;   Capture by const reference; construct by const reference
  //    Decoration<TYPE, TYPE, TYPE> f;     Capture by value; construct by value
  //
  template<typename VALUE, typename CAPTURE = VALUE, typename CONSTRUCT = VALUE const &> class Decoration;
}
#endiv
#divert <hpp>
#import std.basic_ostream
#import nonstd.stream.required.Character
#import nonstd.stream.required.Character_Traits
namespace nonstd::stream::output::iterator {
  template<typename VALUE, typename CAPTURE, typename CONSTRUCT> class detail::Decoration {
  public:
    using value_type = VALUE;
    using capture_type = CAPTURE;
    using construct_type = CONSTRUCT;
    using argument_type = construct_type; // descendants use this
    inline explicit Decoration(construct_type subject) : subject(subject) { }
  protected:
    template<required::Character CHAR, required::Character_Traits TRAITS> friend auto operator<< (std::basic_ostream<CHAR, TRAITS> &o, Decoration const &d) -> std::basic_ostream<CHAR, TRAITS> & { return o << d.subject; }
    capture_type subject;
  };
}
#endiv

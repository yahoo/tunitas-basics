// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace nonstd::stream::output::iterator::detail {
  //
  // An emptiness.
  //
  class Empty;
}
#endiv
#divert <hpp>
#import std.basic_ostream
#import nonstd.stream.required.Character
#import nonstd.stream.required.Character_Traits
namespace nonstd::stream::output::iterator::detail {
  template<required::Character CHAR, required::Character_Traits TRAITS> inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, Empty const &) -> std::basic_ostream<CHAR, TRAITS> &;
}

class nonstd::stream::output::iterator::detail::Empty {
public:
  Empty() = default;
  struct Value { };
  using value_type = Value;
  using argument_type = value_type;
  inline explicit Empty(argument_type);
};
#endiv
#divert <ipp>
namespace nonstd::stream::output::iterator {
  template<required::Character CHAR, required::Character_Traits TRAITS> auto detail::operator<<(std::basic_ostream<CHAR, TRAITS> &o, Empty const &) -> std::basic_ostream<CHAR, TRAITS> & {
    // It inserts emptiness; i.e. nothing.  
    return o;
  }
}

nonstd::stream::output::iterator::detail::Empty::Empty(argument_type) {
  // yes, nothing is done in the conversion constructor of Empty
}
#endiv

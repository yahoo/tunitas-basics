// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.char_traits
#import nonstd.required.character.Type
#import nonstd.required.character.Traits
namespace nonstd::stream {
  //
  // Usage: install this nullbuf as the rdbuf of some stream.
  // Caveats: the caller still own the object, the ostream does not.
  //
  // std::cerr << "hi there";
  // std::cerr.rdbuf(new Nullbuf<char>());
  // std::cerr << "shout as loud as you want";
  // 
  template<required::character::Type CHAR, required::character::Traits<CHAR> TRAITS = std::char_traits<CHAR>> class Nullbuf;
}
#endiv
#divert <hpp>
#import std.streambuf
#import std.streamsize
namespace nonstd {
  template<required::character::Type CHAR, required::character::Traits<CHAR> TRAITS> class stream::Nullbuf : public std::basic_streambuf<CHAR, TRAITS> {
    using ancestor = std::basic_streambuf<CHAR, TRAITS>;
  public:
    Nullbuf() = default;
    Nullbuf(Nullbuf const &) = delete;
    auto operator=(Nullbuf const &) -> Nullbuf & = delete;
    // See Langer & Kreft, or [27.5.2.4.5]/3-7.
    // See http://www.cplusplus.com/reference/streambuf/basic_streambuf/
    // Else see /usr/include/c++/4.8.3/streambuf 
    auto xsputn(typename ancestor::char_type const *, std::streamsize) -> std::streamsize override final;
    auto overflow(typename ancestor::int_type = typename ancestor::traits_type::eof()) -> typename ancestor::int_type override final;
  };
}
#endiv
#divert <tpp>
#import std.char_traits
namespace nonstd::stream {
  template<required::character::Type _C, required::character::Traits<_C> _T> auto Nullbuf<_C, _T>::xsputn(typename ancestor::char_type const *buffer, std::streamsize buffer_size) -> std::streamsize {
    // It's a "sink" like /dev/null.  So we prevaricate that we wrote it all safely.
    return buffer_size;
  }

  template<required::character::Type _C, required::character::Traits<_C> _T> auto Nullbuf<_C, _T>::overflow(typename ancestor::int_type c) -> typename ancestor::int_type {
    // give it back (whatever it was)
    return c;
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd.Outcome
#import nonstd.required.Integer
#import nonstd.required.Dopelike
namespace nonstd {
  //
  // Convert a string to an integer or floating point
  // Subsumes the functions: stoi, stol, stoll, stou[sic], stoul, stoull
  //
  // See the detailed commentariat in to_integer
  //
  // Return:
  //   the value
  //
  // Exceptions:
  //   throws a std::exception descendant per various specifications
  //   e.g. https://en.cppreference.com/w/cpp/string/basic_string/stoul and others
  //
  //   cases:
  //     std::invalid_argument
  //        if no conversion could be performed; the strict definition is applied here (no trailing junk).
  //     std::out_of_range
  //        if the converted value would fall out of the range of the result type
  //        or if the underlying function sets errno to ERANGE (e.g. std::strtoul, std::strtoull or siblings).
  //
  // Usage:
  //
  //   auto s = std::string{...};
  //   auto i = sto<unsigned char>(s);
  //   auto i = sto<int short unsigned>(s);
  //   auto i = sto<int unsigned>(s);
  //   auto i = sto<int unsigned long>(s);
  //   auto i = sto<int unsigned long long>(s);
  //   auto i = sto<uint128_t>(s);
  //
  //   auto sv = std::string_view{...} or any std::vector<char> or std::dope<char> or dope-shaped type.
  //   auto i = sto<signed char>(sv);
  //   auto i = sto<int short signed>(sv);
  //   auto i = sto<int signed>(sv);
  //   auto i = sto<int signed long>(sv);
  //   auto i = sto<int signed long long>(sv);
  //   auto i = sto<int128_t>(sv);
  //
  // The default base of 0 means that the base will be guessed from the luser's syntax at runtime.
  template<required::Integer INTEGER, required::Dopelike DOPE> inline auto sto(DOPE const &, int base = 0) -> INTEGER;
}
#endiv
#divert <ipp>
#import nonstd.detail.to_integer.Dispatcher
template<nonstd::required::Integer INTEGER, nonstd::required::Dopelike DOPE> auto nonstd::sto(DOPE const &dope, int base) -> INTEGER {
  detail::to_integer::Dispatcher<INTEGER> dispatch;
  return dispatch.sto(dope, base);
}
#endiv

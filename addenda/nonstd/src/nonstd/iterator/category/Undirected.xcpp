// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
// https://wiki.scold-lang.org/page/nonstd.iterator.category.Arbitrary
#import nonstd.undirected_iterator_tag
namespace nonstd::iterator::category {
  //
  // The undirected iterator ... is a "random access" iterator
  //
  // Concept: (on the "gratuitous" renaming)
  //  
  //   Names are hard.  Naming is fraught.
  //
  //   But whereas all iterators provide "access" that word is elided (a stop word)
  //   (you already knew that as "access" is entailed in the very sense of the "iterator" word).
  //
  //   But also calling the iterator "random" belies its behavior which is not in any sense (pseudo- or actually-) random.
  //   These things, in their general form, are "undirectedes" ... "an abstraction of undirectedes."
  //
  // Other candidates:
  //
  //   Abstract ............ clashes with the concept of an abstract class (unassigned virtual functions)
  //   Cursor .............. like a database cursor, but carries the unintended sense of required sequential access.
  //   Index ............... sure but too generic.  All iterators are an "index."
  //   Unordered ........... yes
  //   Undirectional ....... not grammatical even though it feels like it's a conjugation of Bidirectional.
  //
  using Undirected = undirected_iterator_tag;
}
#endiv

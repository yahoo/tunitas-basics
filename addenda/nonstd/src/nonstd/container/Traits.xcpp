// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
// https://wiki.scold-lang.org/page/nonstd.container.Traits
#import nonstd.container.Traits.template
// These are odd enough that you always get t hem.
// [[FIXTHIS]] but you should only pay for this dependency if you actually need basic_string_view
// FIXED ---> #import nonstd.container.Traits.basic_string_view <--- FIXED (hint: import it explicitly when necessary)
#endiv
#divert <cpp>
#import std.string
#import std.vector
namespace {
  namespace tests {
    using namespace std;
    using namespace nonstd::container;
    //
    static_assert(sizeof (string::iterator));
    static_assert(sizeof (Traits<string>));
    static_assert(sizeof (nonstd::required::school::Old<string>));
    static_assert(sizeof (traits::glue::Old<string>));
    static_assert(sizeof (traits::glue::Old<string>::iterator));
    static_assert(sizeof (traits::glue::old_school::required::Has_Mutable_Iterator<string>));
    static_assert(sizeof (traits::glue::old_school::Mutable_Iterator<string>::iterator));
    static_assert(sizeof (Traits<string>::iterator));
    static_assert(sizeof (Traits<string>::const_iterator));
    //
    static_assert(sizeof (Traits<vector<string>>));
    static_assert(sizeof (Traits<vector<string>>::iterator));
    static_assert(sizeof (Traits<vector<string>>::const_iterator));
  }
}
#endiv

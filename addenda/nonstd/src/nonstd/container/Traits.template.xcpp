// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd.required.container.Type
namespace nonstd::container {
  //
  // The container traits, in the New School.
  //
  // Concept:
  //
  //   Rhymes with the iterator traits in the New School (nonstd::iterator::Traits<ITERATOR>).
  //   Follows container_traits<CONTAINER>
  //   New School only.
  //   [[FIXTHIS]] cooperate with nonstd::container_traits<CONTAINER> for the std containers
  //
  // Design:
  //
  //   [[unchecked]] When the 'iterator' and 'const_iterator' are the same type, the template is inappropriate.
  //
  //   [[FIXTHIS]] [[WATCHOUT]] there are significant specializations that must be incorporated.
  //   Changes to container_traits<CONTAINER> are not inherited herein.
  //
  // Usage:
  // 
  //   using Traits = nonstd::container::Traits<...some_container...>;
  //
  template<required::container::Type CONTAINER> struct Traits;
}
#endiv
#divert <hpp>
#import nonstd.container.traits.glue.Old
#import nonstd.container.traits.glue.New
#import nonstd.required.school.Old
#import std.conditional
namespace nonstd {
  template<required::container::Type CONTAINER> struct container::Traits : public traits::glue::Conditional<required::school::Old<CONTAINER>, traits::glue::Old<CONTAINER>, traits::glue::New<CONTAINER>>::Type { };
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd.required.container.Type
#import std.conditional
namespace nonstd::container::traits::glue {
  namespace required {
    template<typename CONTAINER> concept Container = nonstd::required::container::Type<CONTAINER>;
  }
  // WATCHOUT - glue::Conditional<T,C,A> provides auto indirection; it is more like std::conditional_t
  template<bool CONDITION, typename CONSEQUENT, typename ALTERNATE> struct Conditional;
  struct Empty;
  template<typename ANCESTOR> struct Absent;
}
#endiv
#divert <hpp>
namespace nonstd::container::traits {
  template<bool CONDITION, typename CONSEQUENT, typename ALTERNATE> struct glue::Conditional {
    using Type = typename std::conditional<CONDITION, CONSEQUENT, ALTERNATE>::type;
    using type = Type;
  };
  struct glue::Empty { };
  template<typename> struct glue::Absent {
    using Type = Empty;
    using type = Type;
    struct Mixin { }; // matches Mutable_Iterator, Constie_Iterator
  };
}
#endiv

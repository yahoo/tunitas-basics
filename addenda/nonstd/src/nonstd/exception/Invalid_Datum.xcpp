// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace nonstd::exception {
  //
  // An invalid datum from the luser.
  // Whereas the luser-space is contains the enemy, any datum received therefrom is suspect.
  // Herein contains a representation of the failure in validation of such a datum.
  //
  // Because the datum is from the luser, and is known to be invalid, we can't (re-)show it.
  // The best that can be done is to exhibit a reason why the datum was invalid;
  // Where a specimen can be provided, it is optional, and must be a safe data type; i.e. a string.
  //
  // Usage:
  //
  //   throw Invalid_Datum("too big");
  //   throw Invalid_Datum("too big", "123456789123456789123456789123456789");
  //
  class [[nodiscard]] Invalid_Datum;
}
#endiv
#divert <hpp>
#import re.string
#import std.string
#import std.optional
class nonstd::exception::Invalid_Datum : public std::runtime_error {
  using ancestor = std::runtime_error;
public:
  inline Invalid_Datum();
  inline explicit Invalid_Datum(re::string<std::string> reason = std::string());
  inline Invalid_Datum(re::string<std::string> reason, re::string<std::string> exhibition);
  using Optional = std::optional<std::string>;
  inline auto datum() const -> Optional;
private:
  Optional optional_datum;
  inline static auto default_reason() -> std::string;
  inline static auto default_reason(re::string<std::string> &) -> std::string;
};
#endiv
#divert <ipp>
nonstd::exception::Invalid_Datum::Invalid_Datum(re::string<std::string> reason)
  : ancestor(default_reason(reason))
  , optional_datum() {
  ;
}

nonstd::exception::Invalid_Datum::Invalid_Datum(re::string<std::string> reason, re::string<std::string> exhibition)
  : ancestor(default_reason(reason))
  , optional_datum(exhibition) {
  ;
}

auto nonstd::exception::Invalid_Datum::datum() const -> Optional {
  return optional_datum;
}

auto nonstd::exception::Invalid_Datum::default_reason() -> std::string {
  re::string<std::string> tmp;
  return default_reason(tmp);
}

#import std.move
auto nonstd::exception::Invalid_Datum::default_reason(re::string<std::string> &reason) -> std::string {
  if (reason.empty()) {
    return "invalid_datum";
  } else {
    return std::move((std::string &)reason);
  }
}
#endiv

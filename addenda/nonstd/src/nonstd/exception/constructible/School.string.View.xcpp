// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.string_view
#import nonstd.exception.constructible.standard // that certain inventory of all known namespace std exceptions (that we are willing to treat)
#import nonstd.exception.constructible.School.template
#forward nonstd.exception.string.View
namespace nonstd::exception::constructible {
  // delete ... (no such) template<> struct School<std::exception> = delete;
  template<> struct School<std::logic_error, std::string_view>;
  template<> struct School<std::invalid_argument, std::string_view>;
  template<> struct School<std::domain_error, std::string_view>;
  template<> struct School<std::length_error, std::string_view>;
  template<> struct School<std::out_of_range, std::string_view>;
  //
  template<> struct School<std::runtime_error, std::string_view>;
  template<> struct School<std::range_error, std::string_view>;
  template<> struct School<std::overflow_error, std::string_view>;
  template<> struct School<std::underflow_error, std::string_view>;
  template<> struct School<std::system_error, std::string_view>;
  //
  // NOT ---> template<> struct School<std::filesystem::filesystem_error, std::string_view>;
  // INSTEAD
  // INSTEAD   #import nonstd.exception.constructible.School.std.filesystem.filesystem_error
  // INSTEAD
  //
#if 0 // not yet (or maybe ever)
  template<> struct School<std::regex_error, std::string_view>;
  template<> struct School<std::bad_optional_access, std::string_view>;
  template<> struct School<std::tx_exception, std::string_view>;
  template<> struct School<std::nonexistent_local_time, std::string_view>;
  template<> struct School<std::ambiguous_local_time, std::string_view>;
  template<> struct School<std::format_error, std::string_view>;
  template<> struct School<std::bad_typeid, std::string_view>;
  template<> struct School<std::bad_cast, std::string_view>;
  template<> struct School<std::bad_any_cast, std::string_view>;
  template<> struct School<std::bad_weak_ptr, std::string_view>;
  template<> struct School<std::bad_function_call, std::string_view>;
  template<> struct School<std::bad_alloc, std::string_view>;
  template<> struct School<std::bad_array_new_length, std::string_view>;
  template<> struct School<std::bad_exception, std::string_view>;
  template<> struct School<std::bad_variant_access, std::string_view>;
#endif
}
#endiv
#divert <hpp>
#import std.string_view
#import nonstd.exception.constructible.standard // that certain inventory of all known namespace std exceptions (that we are willing to treat)
#import nonstd.exception.constructible.School.template
#forward nonstd.exception.string.View
namespace nonstd::exception::constructible {
  // delete ... (no such) template<> struct School<std::exception> = delete;
  template<> struct School<std::logic_error, std::string_view>                  { using Type = string::View<std::logic_error>; };
  template<> struct School<std::invalid_argument, std::string_view>             { using Type = string::View<std::invalid_argument>; };
  template<> struct School<std::domain_error, std::string_view>                 { using Type = string::View<std::domain_error>; };
  template<> struct School<std::length_error, std::string_view>                 { using Type = string::View<std::length_error>; };
  template<> struct School<std::out_of_range, std::string_view>                 { using Type = string::View<std::out_of_range>; };
  //
  template<> struct School<std::runtime_error, std::string_view>                { using Type = string::View<std::runtime_error>; };
  template<> struct School<std::range_error, std::string_view>                  { using Type = string::View<std::range_error>; };
  template<> struct School<std::overflow_error, std::string_view>               { using Type = string::View<std::overflow_error>; };
  template<> struct School<std::underflow_error, std::string_view>              { using Type = string::View<std::underflow_error>; };
  template<> struct School<std::system_error, std::string_view>                 { using Type = string::View<std::system_error>; };
#if 0 // not yet (or maybe ever)
  template<> struct School<std::regex_error, std::string_view>                  { using Type = std::regex_error; };
  template<> struct School<std::bad_optional_access, std::string_view>          { using Type = std::bad_optional_access; };
  template<> struct School<std::tx_exception, std::string_view>                 { using Type = std::tx_exception; };
  template<> struct School<std::nonexistent_local_time, std::string_view>       { using Type = std::nonexistent_local_time; };
  template<> struct School<std::ambiguous_local_time, std::string_view>         { using Type = std::ambiguous_local_time; };
  template<> struct School<std::format_error, std::string_view>                 { using Type = std::format_error; };
  template<> struct School<std::bad_typeid, std::string_view>                   { using Type = std::bad_typeid; };
  template<> struct School<std::bad_cast, std::string_view>                     { using Type = std::bad_cast; };
  template<> struct School<std::bad_any_cast, std::string_view>                 { using Type = std::bad_any_cast; };
  template<> struct School<std::bad_weak_ptr, std::string_view>                 { using Type = std::bad_weak_ptr; };
  template<> struct School<std::bad_function_call, std::string_view>            { using Type = std::bad_function_call; };
  template<> struct School<std::bad_alloc, std::string_view>                    { using Type = std::bad_alloc; };
  template<> struct School<std::bad_array_new_length, std::string_view>         { using Type = std::bad_array_new_length; };
  template<> struct School<std::bad_exception, std::string_view>                { using Type = std::bad_exception; };
  template<> struct School<std::bad_variant_access, std::string_view>           { using Type = std::bad_variant_access; };
#endif
}
#endiv

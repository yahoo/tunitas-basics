// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace nonstd::exception::constructible::standard { }
//
// Concept: only that which is listed as descendants of std::exception.
// to wit: https://en.cppreference.com/w/cpp/error/exception
//
// Don't pull in a lot (don't pull in ANY) headers to make thie workable.
// Just do it.  And we'll take care of the inevitable compiler problems later.
// Or maybe the standard library people will see the wisdom of the S.C.O.L.D. method and publish a library with separate class-forward declarations.
//
// Design:
//
// HACK because the standard library (of any compiler- does not yet announce forward declarations for anything at all.
// WANT
//   #forward std.exception .......... to just announce the name
//   #forward std.logic_error ........ to just announce the name
//   #forward std.invalid_argument ... and so on.
//
// DO NOT
//   #include <exception>
//   #include <stdexcept>
//   #include <ios>
//   #include <future>
//   #include <this>
//   #include <that>
//   #include <the>
//   #include <other>
//   #include <thing>
// merely to get access to the class names
// That is way to heavy.
//
#import std
namespace std {
  class exception;
  class logic_error;
  class invalid_argument;
  class domain_error;
  class length_error;
  class out_of_range;
  class future_error;
  class bad_optional_access;
  class runtime_error;
  class range_error;
  class overflow_error;
  class underflow_error;
  class regex_error;
  class system_error;
  //
  // NOT ----> std::ios_base::failure(C++11) ......... we just have to live with the nested class
  //
  // NOT ----> std::filesystem::filesystem_error ..... which does not exist
  // INSTEAD ......................................... std::filesystem::__cxx11::filesystem_error does exist but who can know?
  // NOT ----->namespace filesystem { class filesystem_error; }
  //
  // INSTEAD ---> #import nonstd.filesystem.Exception    a.k.a. #import nonstd.exception.filesystem.
  // INSTEAD ---> #import nonstd.exception.constructible.standard.Traits.std.filesystem.filesystem_error
  // which provides the relevant class names (an explicit ask for the typename brings in the whole package)
  //
  class tx_exception;
  class nonexistent_local_time;
  class ambiguous_local_time;
  class format_error;
  class bad_typeid;
  class bad_cast;
  class bad_any_cast;
  class bad_weak_ptr;
  class bad_function_call;
  class bad_alloc;
  class bad_array_new_length;
  class bad_exception;
  class bad_variant_access;
}
#endiv

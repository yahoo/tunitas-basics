// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd.exception.constructible.standard.Traits.template
namespace nonstd::exception::constructible::standard {
  template<> struct Traits<std::logic_error>;
  template<> struct Traits<std::out_of_range>;
  template<> struct Traits<std::domain_error>;
  template<> struct Traits<std::invalid_argument>;
  template<> struct Traits<std::length_error>;
  //
  template<> struct Traits<std::runtime_error>;
  template<> struct Traits<std::range_error>;
  template<> struct Traits<std::overflow_error>;
  template<> struct Traits<std::underflow_error>;
  template<> struct Traits<std::system_error>;
  //
  // NOT --> struct Traits<std::filesystem::filesystem_error>;
  // because it is very heavy.
  // INSTEAD there is a specialized one, just like the specialized -lstd_fs
  //
  //    #import nonstd.exception.constructible.standard.Traits.std.filesystem.filesystem_error
  //
}
#endiv
#divert <hpp>
namespace nonstd::exception::constructible::standard {
  template<> struct Traits<std::logic_error>      : public traits::Stringable { };
  template<> struct Traits<std::out_of_range>     : public traits::Stringable { };
  template<> struct Traits<std::domain_error>     : public traits::Stringable { };
  template<> struct Traits<std::invalid_argument> : public traits::Stringable { };
  template<> struct Traits<std::length_error>     : public traits::Stringable { };
  //
  template<> struct Traits<std::runtime_error>   : public traits::Stringable { };
  template<> struct Traits<std::range_error>     : public traits::Stringable { };
  template<> struct Traits<std::overflow_error>  : public traits::Stringable { };
  template<> struct Traits<std::underflow_error> : public traits::Stringable { };
  template<> struct Traits<std::system_error>    : public traits::Stringable { };
}
#endiv

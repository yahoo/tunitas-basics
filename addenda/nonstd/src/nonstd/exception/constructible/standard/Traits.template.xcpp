// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace nonstd::exception::constructible::standard {
  //
  // Some traits about exceptions.
  // The one we care about here is whether the exception is a standard library exception.
  //
  // [[FIXTHIS]] this breaks the <strike>invariant</strike> rule of thumb that every class in a namespace named "exceptions" is a valid throwable exception.
  // But it rhymes with iterator::Traits<ITERATOR> and container::Traits<CONTAINER>
  //
  template<typename EXCEPTION> struct Traits;
  namespace traits {
    struct Standard;
    struct Stringable;
  }
}
#endiv
#divert <hpp>
namespace nonstd::exception::constructible {
  template<typename> struct standard::Traits { };
  namespace standard {
    struct traits::Standard { inline static constexpr auto is_standard = true; };
    struct traits::Stringable : public Standard { inline static constexpr auto is_stringable = true; };
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace nonstd::exception {
  //
  // An exception indicating an invalid enumeration value
  //
  // Usage:
  //
  //   enum That { ... };
  //   throw Invalid_Enum(That(99));
  //
  class [[nodiscard]] Invalid_Enum;
}
#endiv
#divert <hpp>
#import std.is_enum
#import std.runtime_error
#import std.string
class nonstd::exception::Invalid_Enum : public std::runtime_error {
  using ancestor = std::runtime_error;
public:
  template<typename ENUM> requires std::is_enum<ENUM>::value inline explicit Invalid_Enum(ENUM);
private:
  template<typename ENUM> requires std::is_enum<ENUM>::value static auto format(ENUM) -> std::string;
};
#endiv
#divert <ipp>
template<typename ENUM> requires std::is_enum<ENUM>::value nonstd::exception::Invalid_Enum::Invalid_Enum(ENUM value)
  : ancestor(format(value)) {
  ;
}
#import std.type_info
#import std.to_string
#import std.string_literals
template<typename ENUM> requires std::is_enum<ENUM>::value auto nonstd::exception::Invalid_Enum::format(ENUM e) -> std::string {
  using namespace std::string_literals;
  using integer_type = long int; // FIXME ... what if the enum class is 'int unsigned long long'?
  return "invalid enum "s + typeid(ENUM).name() + "="s + std::to_string((integer_type)(e));
}
#endiv

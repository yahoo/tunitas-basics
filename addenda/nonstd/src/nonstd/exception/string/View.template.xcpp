i// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd.exception.constructible.required.Stringable
namespace nonstd::exception::string {
  //
  // The non-standard exceptions that construct by std::string_view
  // Specializations only.
  //
  // Concept:
  //
  //   The template specialization inherites from the original.
  //   The constructor of the specialization accepts std;:string_view for the reason (what).
  //   No new function is provided.
  //
  //   The class name of the original standard exception is used as the key to the template
  //   Contrast with the type alias exception::string::Storage<EXCEPTION>
  //   Contrast with the type alias exception::$NAME<std::string> ... e.g. Logic<string>, Domain<string>, Invalid<string> ...etc...
  //
  // Design:
  //
  //   Use new type is created.
  //
  // Editorial:
  //
  //   You SHOULD prefer these non-standard versions that accept string_view.
  //   There's a string copy in there anyway.
  //   And in C++26 or C++29 they'll figure this out and move string_view into the common constructor interfaces
  //
  // Usage:
  //
  //   throw exception::string::View<std::logic_error>{...somehow...}; .......... same arguments as documented
  //   throw exception::string::View<std::domain_error>{...somehow...}; ......... ibidem.
  //   ...and so on...
  //
  // Here the constraint does all the work.
  template<constructible::required::Stringable> struct View;
}
#endiv

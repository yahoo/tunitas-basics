// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace nonstd::doping {
  enum class Mutability { NO, YES };
  namespace Constability {
    inline constexpr auto NO = Mutability::YES;
    inline constexpr auto YES = Mutability::NO;
  }
  //
  // Usage:
  //   Indirection<Mutability::NO,  char, char>  <--------------- tricky, 'char' stays the same.
  //   Indirection<Mutability::NO,  char, char const *>
  //   Indirection<Mutability::NO,  char, char const *const *>
  //
  //   Indirection<Mutability::YES, char, char> <---------------- ibidem.
  //   Indirection<Mutability::YES, char, char *>
  //   Indirection<Mutability::YES, char, char **>
  //
  template<Mutability, typename BASE, typename VALUE> struct Indirection;
  template<typename BASE, typename VALUE> struct Indirection<Mutability::YES, BASE, VALUE>;
  template<typename BASE, typename VALUE> struct Indirection<Mutability::NO,  BASE, VALUE>;
  // ...implementation details of the implementation details
  template<typename BASE> struct Empty;
  template<typename TYPE> struct Constify_Referent;
  template<typename TYPE> struct Constify;
}
#endiv
#divert <hpp>
#import std.conditional
#import std.add_pointer
#import std.remove_pointer
#import std.is_pointer
namespace nonstd::doping {
  template<typename TYPE> struct Constify_Referent {
    // 'char *' -> 'char const *'
    // 'char **' -> 'char *const *'
    using type = typename std::add_pointer<typename std::add_const<typename std::remove_pointer<TYPE>::type>::type>::type;
  };
  template<typename TYPE> struct Constify {
    // 'char'   -> 'char'
    // 'char *' -> 'char const *'
    // 'char **' -> 'char *const *'
    using type = typename std::conditional<std::is_pointer<TYPE>::value, typename Constify_Referent<TYPE>::type, TYPE>::type;
  };
}
namespace nonstd::doping {
  // The intent here is to burn up only one of these across the whole process space.
  // It will never be accessed.
  // It is used as prophylaxis against returning nullptr (invalid values) in band with valid pointer values.
  extern char EMPTEE[1];
}
template<typename BASE> class nonstd::doping::Empty {
protected:
  //
  // Usage:
  //
  //    template<typename UNIT> struct Thing : public Empty<UNIT> {
  //      Thing();
  //      UNIT *held;
  //    };
  //    Thing<UNIT>::Thing() : held{ancestor::EMPTY<UNIT>()} { }
  //    Thing<UNIT const>::Thing : held{ancestor::EMPTY<UNIT const>()}
  //
  static constexpr auto EMPTY() -> BASE * {
    return reinterpret_cast<BASE *>(&doping::EMPTEE[0]);
  }
};
template<typename BASE, typename VALUE> struct nonstd::doping::Indirection<nonstd::doping::Mutability::YES, BASE, VALUE> : public Empty<VALUE> {
  // new school
  using Base = BASE; // see the commentariat in the other one.
  using Value = VALUE;
  using Data = Value *;
  // old school
  using value_type = Value;
  using data_type = Data;
  using iterator = data_type;
  using const_value_type = typename Constify<VALUE>::type;
  using const_data_type = const_value_type const *;
  using const_iterator = const_data_type;
};
template<typename BASE, typename VALUE> struct nonstd::doping::Indirection<nonstd::doping::Mutability::NO, BASE, VALUE> : public Empty<VALUE const> {
  // new school
  using Base = BASE;   // e.g. 'char' when VALUE is pointer-decorated, e.g. 'char **' 'char *const *'
  using Value = VALUE; // not 'VALUE const' because on value-return it decays to cv-remove.
  using Data = Value const *;
  // old school
  using value_type = VALUE;
  using data_type = Data;
  using iterator = data_type;
  using const_value_type = value_type;
  using const_data_type = data_type;
  using const_iterator = iterator;
};
#endiv
#divert <cpp>
char nonstd::doping::EMPTEE[1];
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#forward nonstd.doping.Prototype
namespace nonstd::doping {
  template<typename BASE, typename VALUE> struct Prototype<Indirection<Mutability::NO, BASE, VALUE>>;
}
#endiv
#divert <hpp>
namespace nonstd::doping {
  template<typename BASE, typename VALUE> class Prototype<Indirection<Mutability::NO, BASE, VALUE>> : public Holder<Indirection<Mutability::NO, BASE, VALUE>> {
    using ancestor = Holder<Indirection<Mutability::NO, BASE, VALUE>>;
  protected:
    Prototype() = default;
    inline explicit Prototype(typename ancestor::const_data_type, std::size_t);
    ~Prototype() = default;
  public:
    inline explicit operator typename ancestor::const_data_type() const = delete; // this is unsafe, there is no '\0' like c::basic_stringz
    inline auto data() const -> typename ancestor::const_data_type;
    inline auto begin() const -> typename ancestor::const_iterator;
    inline auto end() const -> typename ancestor::const_iterator;
    // unchecked
    inline auto operator[](std::size_t) const -> typename ancestor::const_value_type;
    inline auto front() const -> typename ancestor::const_value_type;
    inline auto back() const -> typename ancestor::const_value_type;
    // checked
    inline auto at(std::size_t) const -> typename ancestor::const_value_type;
  };
}
#endiv
#divert <ipp>
#include <cassert>
namespace nonstd::doping {
  template<typename B, typename V> Prototype<Indirection<Mutability::NO, B, V>>::Prototype(typename ancestor::const_data_type subject, std::size_t subject_size)
    : ancestor{subject, subject_size} {
    ;
  }
  template<typename B, typename V> auto Prototype<Indirection<Mutability::NO, B, V>>::data() const -> typename ancestor::const_data_type {
    assert(nullptr != ancestor::held);
    return ancestor::held;
  }
  template<typename B, typename V> auto Prototype<Indirection<Mutability::NO, B, V>>::begin() const -> typename ancestor::const_iterator {
    assert(nullptr != ancestor::held);
    return &ancestor::held[0];
  }
  template<typename B, typename V> auto Prototype<Indirection<Mutability::NO, B, V>>::end() const -> typename ancestor::const_iterator {
    assert(nullptr != ancestor::held);
    return &ancestor::held[ancestor::length];
  }
  template<typename B, typename V> auto Prototype<Indirection<Mutability::NO, B, V>>::operator[](std::size_t index) const -> typename ancestor::const_value_type {
    return ancestor::held[index];
  }
  template<typename B, typename V> auto Prototype<Indirection<Mutability::NO, B, V>>::front() const -> typename ancestor::const_value_type {
    return ancestor::held[0u];
  }
  template<typename B, typename V> auto Prototype<Indirection<Mutability::NO, B, V>>::back() const -> typename ancestor::const_value_type {
    return ancestor::held[ancestor::length-1];
  }
  template<typename B, typename V> auto Prototype<Indirection<Mutability::NO, B, V>>::at(std::size_t index) const -> typename ancestor::const_value_type {
    return ancestor::forward_indexify(ancestor::held, ancestor::length, index);
  }
}
#endiv

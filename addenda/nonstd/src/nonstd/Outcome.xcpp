// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd.required.Outcomable
#import std.error_code
namespace nonstd {
  //
  // Following the concepts in the proposal: P0709 R0
  //
  // Concept:
  //
  //   P0709R0 Zero-overhead deterministic exceptions: Throwing values
  //   Herb Sutter (hsutter@microsoft.com), 2018-05-02
  //
  //   And aligned with sys::call::result::Value
  //
  // Design:
  //
  //   This MUST be in an eponymous namespace so that ADL will find the accessors (and not various others)
  //
  // Usage:
  //
  //   auto s = Outcome<THING>{}
  //   auto f = Success{std::error_code{33, std::generic_category()}};
  //
  //   if (ok(s)) {
  //     auto v = value(s);
  //     if (v) { ...truth... }
  //   } else {
  //     auto ec = error_code(s);
  //   }
  //
  namespace [[eponymous]] outcome {
    template<required::Outcomable PAYLOAD> class Outcome;
    using namespace std;
    using Error = std::error_code;
  }
  using outcome::Outcome;
}
#endiv
#divert <hpp>
#import std.error_code
#import std.string
#import std.variant
#import nonstd.string.Storage
namespace nonstd {
  namespace outcome {
    template<required::Outcomable PAYLOAD> inline auto ok(Outcome<PAYLOAD> const &) -> bool;
    template<required::Outcomable PAYLOAD> inline auto good(Outcome<PAYLOAD> const &) -> bool;
    template<required::Outcomable PAYLOAD> inline auto fail(Outcome<PAYLOAD> const &) -> bool;
    template<required::Outcomable PAYLOAD> inline auto error_code(Outcome<PAYLOAD> const &) -> Error;
    template<required::Outcomable PAYLOAD> inline auto error_message(Outcome<PAYLOAD> const &) -> string::Storage;
    // These are "casts" like forward(...) and move(...)
    template<required::Outcomable PAYLOAD> inline auto value(Outcome<PAYLOAD> const &) -> PAYLOAD const &;
    template<required::Outcomable PAYLOAD> inline auto value(Outcome<PAYLOAD> &) -> PAYLOAD &;
    template<required::Outcomable PAYLOAD> inline auto value(Outcome<PAYLOAD> &&) -> PAYLOAD &&;
  }
  template<nonstd::required::Outcomable PAYLOAD> class outcome::Outcome : public variant<outcome::Error, PAYLOAD> {
    using Ancestor = variant<outcome::Error, PAYLOAD>;
  public:
    using Variant = Ancestor;
    using Error = outcome::Error;
    using Payload = PAYLOAD;
    Outcome(); // true == ok(Outcome{}
    inline Outcome(Error);
    inline Outcome(Payload const &);
    inline Outcome(Payload &&);
    using Ancestor::variant;
  };
}
#endiv
#divert <ipp>
#import nonstd.Visitor
#import std.forward
#import std.move
#import std.visit
#import std.invalid_argument
namespace nonstd {
  template<required::Outcomable PAYLOAD> auto outcome::ok(Outcome<PAYLOAD> const &o) -> bool { return good(o); }
  template<required::Outcomable PAYLOAD> auto outcome::fail(Outcome<PAYLOAD> const &o) -> bool { return !good(o); }
  template<required::Outcomable PAYLOAD> auto outcome::good(Outcome<PAYLOAD> const &o) -> bool {
    auto v = Visitor{[](Error const &) { return false; },
                     [](PAYLOAD const &)         { return true; }};
    return visit(v, static_cast<typename Outcome<PAYLOAD>::Variant const &>(o));
  }
  template<required::Outcomable PAYLOAD> auto outcome::error_code(Outcome<PAYLOAD> const &o) -> Error {
    auto v = Visitor{[](Error const &e) { return e; },
                     [](PAYLOAD const &) -> Error { throw invalid_argument{"not en error_code"}; }};
    return visit(v, static_cast<typename Outcome<PAYLOAD>::Variant const &>(o));
  }
  template<required::Outcomable PAYLOAD> auto outcome::error_message(Outcome<PAYLOAD> const &o) -> string::Storage {
    return error_code(o).message();
  }
  template<required::Outcomable PAYLOAD> auto outcome::value(Outcome<PAYLOAD> const &o) -> PAYLOAD const & {
    auto v = Visitor{[](Error const &) -> PAYLOAD const & { throw invalid_argument{"not a Payload"}; },
                     [](PAYLOAD const &p)        -> PAYLOAD const & { return p; }};
    auto const &vv = static_cast<typename Outcome<PAYLOAD>::Variant const &>(o);
    return visit(v, vv);
  }
  template<required::Outcomable PAYLOAD> auto outcome::value(Outcome<PAYLOAD> &o) -> PAYLOAD & {
    auto v = Visitor{[](Error &) -> PAYLOAD & { throw invalid_argument{"not a Payload"}; },
                     [](PAYLOAD &p)        -> PAYLOAD & { return p; }};
    auto &vv = static_cast<typename Outcome<PAYLOAD>::Variant &>(o);
    return visit(v, vv);
  }
  template<required::Outcomable PAYLOAD> auto outcome::value(Outcome<PAYLOAD> &&o) -> PAYLOAD && {
    auto v = Visitor{[](Error &&) -> PAYLOAD && { throw invalid_argument{"not a Payload"}; },
                     [](PAYLOAD &&p)        -> PAYLOAD && { return forward<PAYLOAD>(p); }};
    auto &vv = static_cast<typename Outcome<PAYLOAD>::Variant &>(o);
    return visit(v, move(vv));
  }
  namespace outcome {
  template<required::Outcomable _> Outcome<_>::Outcome() : Ancestor{Payload{}} { }
  template<required::Outcomable _> Outcome<_>::Outcome(Error c) : Ancestor{c} { }
  template<required::Outcomable _> Outcome<_>::Outcome(Payload const &p) : Ancestor{p} { }
  template<required::Outcomable _> Outcome<_>::Outcome(Payload &&p) : Ancestor{forward<Payload>(p)} { }
  }
}
#endiv

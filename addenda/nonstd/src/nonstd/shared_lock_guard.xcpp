// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
//
// The following work is derived from the implementation of std::lock_guard<MUTEX>
// This derivative work is heavily influenced by the design of lock_guard from GCC 8.2.1 (gcc-c++-8.2.1-5.fc29.x86_64)
// Used under license.   To wit:
//
// std::mutex implementation -*- C++ -*-
//
// Copyright (C) 2003-2018 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.
//
// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.
//
#divert <fpp>
#import std.lock_guard
namespace nonstd {
  //
  // There is no shared_lock_guard?
  // [[orly?]]
  //
  // Thus. Herein.  Because there is no shared lock guard rhyming with (unique) lock guard.
  //
  // Circa 2016, 
  // https://stackoverflow.com/questions/39185420/is-there-a-shared-lock-guard-and-if-not-what-would-it-look-like
  //
  // Circa 2021-01, and nothing in the siblings and ephemera around
  // https://en.cppreference.com/w/cpp/thread/shared_mutex 
  //
  template<typename MUTEX> struct shared_lock_guard;
}
#endiv
#divert <hpp>
template<typename MUTEX> struct nonstd::shared_lock_guard {
  using Mutex = MUTEX; // New School
  using mutex_type = Mutex; // old_school
  explicit shared_lock_guard(Mutex &m) : _M_device(m) { _M_device.lock(); }
  shared_lock_guard(Mutex &m, std::adopt_lock_t) noexcept : _M_device(m) { } // calling thread owns mutex
  ~shared_lock_guard() { _M_device.unlock(); }
  shared_lock_guard(shared_lock_guard const &) = delete;
  auto operator=(shared_lock_guard const &) -> shared_lock_guard & = delete;
private:
  Mutex &_M_device;
};
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#forward nonstd.iterator_traits
namespace nonstd::traits {
  //
  // A truth type
  // Is ITERATOR an iterator with a nonstd::iterator_traits<ITERATOR> value?
  //
  // Specializations MUST return true for instances of std::iterator_traits
  // Specializations MUST ALSO work for instances of   nonstd::iterator_traits
  //
  // WATCHOUT - traits::Iterator<ITERATOR> != iterator::Traits<ITERATOR>
  //            traits::Iterator<iterator_traits<ITERATOR>>
  //
  template<typename> struct Iterator;
  template<typename ITERATOR> struct Iterator<iterator_traits<ITERATOR>>;
}
#endiv
#divert <hpp>
#import std.true_type
#import std.false_type
namespace nonstd::traits {
  template<typename> struct Iterator : public std::false_type { };
  template<typename ITERATOR> struct Iterator<iterator_traits<ITERATOR>> : public std::true_type { };
}
#endiv

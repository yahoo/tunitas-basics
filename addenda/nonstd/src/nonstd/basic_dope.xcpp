// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd.required.Dopelike
namespace nonstd {
  //
  // A basic dope (vector), with specializations for const and nonconst
  // Is lower case (snake_case) to rhyme with the STL types nearby
  //    e.g. basic_string, basic_string_view, etc.
  //    and  vector, array
  //
  // Usage:
  //
  //   Thing buf[SIZE];
  //   basic_dope<Thing const> subject{&buf[0], sizeof (buf)};
  //
  //   Thing *data = subject.data();
  //   std::size_t size = subject.size();
  //
  //   for (Thing &item : subject) {
  //      ...use item...
  //   }
  //
  template<typename TYPE> class basic_dope;
  template<typename UNIT> struct basic_dope_traits<basic_dope<UNIT>> : public doping::Traits<UNIT> { };
}
#entail nonstd.basic_dope.consty
#endiv
#divert <hpp>
#import nonstd.doping.Indirection
#import nonstd.doping.Prototype
#import nonstd.required.Dopelike
#import std.is_const
#import std.pair
#import std.size_t
#import std.tuple
template<typename UNIT> class nonstd::basic_dope : public doping::Prototype<doping::Indirection<doping::Mutability::YES, UNIT, UNIT>> {
  using ancestor = doping::Prototype<doping::Indirection<doping::Mutability::YES, UNIT, UNIT>>;
  static_assert(!std::is_const<UNIT>::value, "UNIT must never be const, see basic_dope<UNIT const>, a different specialization, nearby");
public:
  basic_dope() = default;
  // Yes, implicit, all
  // [[deprecated]] basic_dope(typename ancestor::Data, std::size_t); (not just deprecated, but purely unavailable)
  // preceding size is primary
  inline basic_dope(typename ancestor::Data, std::size_t);
  // preceding size overrides inferred size
  template<std::size_t N> inline basic_dope(std::size_t, typename ancestor::Value (&)[N]);
  template<std::size_t N> inline basic_dope(typename ancestor::Value (&)[N]);
  // either order
  inline basic_dope(std::pair<std::size_t, typename ancestor::Data>);
  inline basic_dope(std::pair<typename ancestor::Data, std::size_t>);
  // either order
  inline basic_dope(std::tuple<typename ancestor::Data, std::size_t>);
  inline basic_dope(std::tuple<std::size_t, typename ancestor::Data>);
  // pass by reference
  template<required::Dopelike DOPELIKE> inline basic_dope(DOPELIKE const &) = delete; // not possible
  template<required::Dopelike DOPELIKE> inline [[implicit]] basic_dope(DOPELIKE &nonconst);
};
#endiv
#divert <ipp>
#import std.get
template<typename _> nonstd::basic_dope<_>::basic_dope(typename ancestor::Data subject, std::size_t subject_size)
  : ancestor{subject, subject_size} {
  ;
}
template<typename _> template<std::size_t N> nonstd::basic_dope<_>::basic_dope(typename ancestor::Value (&subject)[N])
  : ancestor{subject, N} {
  ;
}
#import std.min
#import std.length_error
template<typename _> template<std::size_t N> nonstd::basic_dope<_>::basic_dope(std::size_t subject_size, typename ancestor::Value (&subject)[N])
  : ancestor{subject, std::min(subject_size, N)} {
  if (subject_size > N) {
    throw std::length_error("size > N");
  }
}
template<typename _> nonstd::basic_dope<_>::basic_dope(std::pair<std::size_t, typename ancestor::Data> subject)
  : ancestor{subject.second, subject.first} {
  ;
}
template<typename _> nonstd::basic_dope<_>::basic_dope(std::pair<typename ancestor::Data, std::size_t> subject)
  : ancestor{subject.first, subject.second} {
  ;
}
template<typename _> nonstd::basic_dope<_>::basic_dope(std::tuple<std::size_t, typename ancestor::Data> subject)
  : ancestor{std::get<1>(subject), std::get<0>(subject)} {
  ;
}
template<typename _> nonstd::basic_dope<_>::basic_dope(std::tuple<typename ancestor::Data, std::size_t> subject)
  : ancestor{std::get<0>(subject), std::get<1>(subject)} {
  ;
}
template<typename _> template<nonstd::required::Dopelike DOPELIKE> nonstd::basic_dope<_>::basic_dope(DOPELIKE &subject)
  : ancestor{subject.data(), subject.size()} {
  ;
}
#endiv

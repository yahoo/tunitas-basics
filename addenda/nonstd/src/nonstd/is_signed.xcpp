// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace nonstd {
  template<typename INTEGRAL> struct is_signed;
}
#import nonstd.int128_t
#import nonstd.uint128_t
namespace nonstd {
  // These are gcc extensions, not covered by std::is_unsigned
  template<> struct is_signed<int128_t>;
  template<> struct is_signed<uint128_t>;
}
#endiv
#divert <hpp>
#import std.is_signed
#import std.false_type
#import std.true_type
template<typename INTEGRAL> struct nonstd::is_signed : public std::is_signed<INTEGRAL> { };
template<> struct nonstd::is_signed<nonstd::int128_t> : public std::true_type { };
template<> struct nonstd::is_signed<nonstd::uint128_t> : public std::false_type { };
#endiv
#divert <cpp>
#import nonstd.integers
namespace nonstd {
  static_assert(is_signed<int8_t>::value);
  static_assert(is_signed<int16_t>::value);
  static_assert(is_signed<int32_t>::value);
  static_assert(is_signed<int64_t>::value);
  static_assert(is_signed<int signed long long>::value);
  static_assert(is_signed<int128_t>::value);
}
#import nonstd.is_unsigned
namespace nonstd {
  static_assert(!is_unsigned<int8_t>::value);
  static_assert(!is_unsigned<int16_t>::value);
  static_assert(!is_unsigned<int32_t>::value);
  static_assert(!is_unsigned<int64_t>::value);
  static_assert(!is_unsigned<int signed long long>::value);
  static_assert(!is_unsigned<int128_t>::value);
}
#endiv


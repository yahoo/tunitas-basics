// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace nonstd {
  //
  // Per The Standard, is_integral returns true for "any integer type."
  // Which means that bool, char16_t, char32_t, wchar_t are entailed as well.
  // Herein is the extension to GCC's "native" types.
  // Not extended into "software" multiple precision; e.g. gmp.
  // Apparently std::numeric_limits<T>::is_integer is available for that.
  // Summarized:
  //    https://stackoverflow.com/questions/14676574/differences-between-stdis-integer-and-stdis-integral
  // Specified:
  //   http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3376.pdf
  //   http://en.cppreference.com/w/cpp/types/numeric_limits/is_integer
  //   http://en.cppreference.com/w/cpp/types/is_integral
  //
  template<typename INTEGRAL> struct is_integral;
}
#import nonstd.int128_t
#import nonstd.uint128_t
namespace nonstd {
  template<> struct is_integral<int128_t>;
  template<> struct is_integral<uint128_t>;
}
#endiv
#divert <hpp>
#import std.is_integral
#import std.true_type
template<typename INTEGRAL> struct nonstd::is_integral : public std::is_integral<INTEGRAL> { };
template<> struct nonstd::is_integral<nonstd::int128_t> : public std::true_type { };
template<> struct nonstd::is_integral<nonstd::uint128_t> : public std::true_type { };
#endiv

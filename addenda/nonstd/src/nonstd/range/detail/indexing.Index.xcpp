// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd.same_as
#import std.size_t
#import std.optional
namespace nonstd::range::detail::indexing {
  //
  // The index.
  //
  // Concept:
  //
  //   As a flavored enumeration.
  //   With increment.
  //
  // Usage:
  //
  //   see nonstd::range::detail::indexing::Iterator
  //
  enum Index : std::size_t;
  template<typename INDEX> requires same_as<INDEX, Index> using Optional = std::optional<INDEX>;
}
#endiv
#divert <hpp>
#import std.underlying_type
#import std.optional
namespace nonstd::range::detail::indexing {
  // ADL will find these
  inline constexpr auto u(Index x) { return std::underlying_type_t<Index>(x); }
  inline constexpr auto operator+(Index a, unsigned b) { return Index{u(a) + b}; }
  inline constexpr auto operator+(unsigned a, Index b) { return Index{a + u(b)}; }
  inline auto operator++(Index &) -> Index &;
  inline auto operator++(Index &, int) -> Index;
  inline auto operator++(Optional<Index> &) -> Optional<Index> &;
  inline auto operator++(Optional<Index> &, int) -> Optional<Index>;
}
#endiv
#divert <ipp>
namespace nonstd::range::detail {
  auto indexing::operator++(Index &lhs) -> Index & {
    lhs = 1u + lhs;
    return lhs;
  }
  auto indexing::operator++(Index &lhs, int) -> Index {
    auto old = lhs;
    ++lhs;
    return old;
  }
  auto indexing::operator++(Optional<Index> &lhs) -> Optional<Index> & {
    if (lhs) { ++*lhs; }
    return lhs;
  }
  auto indexing::operator++(Optional<Index> &lhs, int) -> Optional<Index> {
    auto old = lhs;
    ++lhs;
    return old;
  }
}
#endiv

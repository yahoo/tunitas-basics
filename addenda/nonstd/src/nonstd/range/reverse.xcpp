// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import nonstd.range.detail.Reverse
#import nonstd.required.Container
#import nonstd.required.iterator.Bidirectional
namespace nonstd::range {
  //
  // Reverse a container
  // Also, recontain a pair of iterators, reversing them
  //
  // Usage:
  //
  //    auto container = ...somehow...   
  //    for (auto const &value : reverse(container)) {
  //        ...use...
  //    }
  //
  template<required::Container CONTAINER> inline auto reverse(CONTAINER const &) -> detail::Reverse<typename CONTAINER::const_iterator>;
  template<required::Container CONTAINER> inline auto reverse(CONTAINER &) -> detail::Reverse<typename CONTAINER::iterator>;
  template<required::Container CONTAINER> auto reverse(CONTAINER &&) -> detail::Reverse<typename CONTAINER::const_iterator> = delete;
  //
  // Usage:
  //
  //    ITERATOR start = ...somehow...
  //    ITERATOR finish = ...somehow...
  //    for (auto const &value : reverse(start, finish)) {
  //        ...use...
  //    }
  //
  template<required::iterator::Bidirectional ITERATOR> inline auto reverse(ITERATOR start, ITERATOR finish) -> detail::Reverse<ITERATOR>;
}
#endiv
#divert <ipp>
namespace nonstd {
  template<required::Container CONTAINER> auto range::reverse(CONTAINER const &container) -> detail::Reverse<typename CONTAINER::const_iterator> {
    return detail::Reverse<typename CONTAINER::const_iterator>{container.begin(), container.end()};
  }
  template<required::Container CONTAINER> auto range::reverse(CONTAINER &container) -> detail::Reverse<typename CONTAINER::iterator> {
    return detail::Reverse<typename CONTAINER::iterator>{container.begin(), container.end()};
  }
  template<required::iterator::Bidirectional ITERATOR> auto range::reverse(ITERATOR start, ITERATOR finish) -> detail::Reverse<ITERATOR> {
    return detail::Reverse<ITERATOR>(start, finish);
  }
}
#endiv

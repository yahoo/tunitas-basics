// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import std.size_t
#import nonstd.required.iterator.Forward
namespace nonstd {
  //
  // A convenience interface to the uninitialized namespace
  // Fill an uninitialized area of memory.
  //
  template<typename OBJECT> inline auto uninitialized_fill(OBJECT &lhs, OBJECT const &rhs) -> void;
  template<typename OBJECT, std::size_t N> inline auto uninitialized_fill(OBJECT (&lhs)[N], OBJECT const &rhs) -> void;
  template<typename OBJECT> inline auto uninitialized_fill(OBJECT *lhs, std::size_t N, OBJECT const &rhs) -> void;
  template<required::iterator::Forward ITERATOR, typename OBJECT> inline auto uninitialized_fill(ITERATOR first, ITERATOR last, OBJECT const &rhs) -> void;
}
#endiv
#divert <ipp>
#import nonstd.uninitialized.fill
template<typename OBJECT> auto nonstd::uninitialized_fill(OBJECT &lhs, OBJECT const &rhs) -> void {
  uninitialized::fill(lhs, rhs);
}
template<typename OBJECT, std::size_t N> auto nonstd::uninitialized_fill(OBJECT (&lhs)[N], OBJECT const &rhs) -> void {
  uninitialized::fill(lhs, N, rhs);
}
template<typename OBJECT> auto nonstd::uninitialized_fill(OBJECT *lhs, std::size_t N, OBJECT const &rhs) -> void {
  uninitialized::fill(lhs, N, rhs);
}
template<nonstd::required::iterator::Forward ITERATOR, typename OBJECT> auto nonstd::uninitialized_fill(ITERATOR first, ITERATOR last, OBJECT const &rhs) -> void {
  uninitialized::fill(first, last, rhs);
}
#endiv

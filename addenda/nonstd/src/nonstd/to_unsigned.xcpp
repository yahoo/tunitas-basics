// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import std.make_unsigned
#import nonstd.required.Integer
namespace nonstd {
  //
  // Compute the companion unsigned value.
  // Throw a domain exception if the narrowing conversion cannot happen.
  //
  // Concept:
  //
  //   Rhymes with nonstd::to_underlying(...)
  //   Does NOT conjugate with nonstd::to_integer(...)
  //
  //   CANNOT be constexpr because it throws an exception.
  //   CANNOT be constexpr because upon out-of-range in the narrowing UB occurs.
  //
  // <hope>
  //   To be adopted in C++23 but maybe C++26 or 29.
  //   http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1682r0.html
  // </hope>
  //
  // Usage:
  //
  //   auto something = signed{...somehow...};
  //   if (numeric_limits<signed>::min() <= something) {
  //     auto more = to_unsigned(something); ............... yup, that's a narrowing cast, but now it is protected
  //     ...use the signedness
  //   }
  //
  template<required::Integer SOURCE> inline auto to_unsigned(SOURCE) -> std::make_unsigned_t<SOURCE>;
}
#endiv
#divert <ipp>
#import std.is_unsigned
#import std.numeric_limits
#import nonstd.exception.Domain
#import nonstd.string.View
template<nonstd::required::Integer SOURCE> auto nonstd::to_unsigned(SOURCE source) -> std::make_unsigned_t<SOURCE> {
  if constexpr(std::is_unsigned_v<SOURCE>) {
    return source;
  } else {
    using Source = SOURCE;
    using Result = std::make_unsigned_t<Source>; 
    using Limits = std::numeric_limits<Result>;
    static_assert(0u == Limits::min());
    if (source < (Source)Limits::min()) {
      throw exception::Domain<string::View>{"negative"};
    }
    return Result(source);
  }
}
#endiv

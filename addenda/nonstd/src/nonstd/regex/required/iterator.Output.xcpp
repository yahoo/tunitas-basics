// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd.required.iterator.Output
namespace nonstd::regex::required::iterator {
  //
  // Concept:
  //
  //   https://en.cppreference.com/w/cpp/iterator/iterator_tags
  //   https://en.cppreference.com/w/cpp/named_req/OutputIterator
  //
  // Usage:
  //
  // WATCHOUT - nonstd::regex::required::iterator::Output is not a concept for a TYPE
  //            instead iterator::Output is a TEMPLATE which requires one more argument
  //
  // You need to specify the type of the assignable right-hand side; e.g. 'char' or 'wchar_t'
  //
  // INCORRECT ---> template<::nonstd::regex::required::iterator::Output           OUT> struct X;
  // CORRECT -----> template<::nonstd::regex::required::iterator::Output<char16_t> OUT> struct X;
  //
  template<typename ITERATOR, typename RHS> concept Output = requires(ITERATOR iterator, RHS rhs) {
    requires nonstd::required::iterator::Output<ITERATOR, RHS>;
    { *iterator++ = rhs };
  };
}
#endiv
#divert <cpp>
// This is test code
#import std.string
#import std.wstring
namespace {
  namespace tests {
    using namespace nonstd::regex::required::iterator;
    static_assert(sizeof (std::iterator_traits<char *>::iterator_category));
    static_assert(Output<char *, char>);
    static_assert(!Output<char const *, char>);
    static_assert(!Output<std::string::const_iterator, char>);
    static_assert(Output<std::string::iterator, char>);
    static_assert(!Output<std::wstring::const_iterator, wchar_t>);
    static_assert(Output<std::wstring::iterator, wchar_t>);
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import std.basic_string
#import nonstd.regex.Basic_Pattern
#import nonstd.regex.matching.constants
#import nonstd.regex.required.ALL
//
// The trick here is that there are three places where alternates happen
// Alternates: std::basic_string<CHAR, TRAITS> versus CHAR const *
//
// format
// ----------------------------------)             (-----------------------------------------
// std::basic_string<CHAR, TRAITS>   )             ( 1. the output or return type
// CHAR const *                      )   \times    ( 2. the input or subject
//                                   )             ( 3. the format or replacement
//
// So that's six (6) combinations .
//
// The inline definitions are provided at <hpp> to keep it cogent.
//
namespace nonstd::regex {
  //
  // Case 1-2.
  // the output (return type) is an iterator
  // the input is a different pair of iterators.
  //
  template<typename OUT, required::iterator::Bidirectional BI,
           required::Char_Traits FORMAT_TRAITS, required::Allocator FORMAT_ALLOC,
           required::Char CHAR, required::Traits PATTERN_TRAITS>
  requires required::iterator::Output<OUT, CHAR> && required::iterator::Producing<BI, CHAR>
  inline auto replace(OUT out_start, BI subject_first, BI subject_last,
                      Basic_Pattern<CHAR, PATTERN_TRAITS> const &pattern,
                      std::basic_string<CHAR, FORMAT_TRAITS, FORMAT_ALLOC> const &format,
                      matching::Flags flags = {}) -> OUT {
    return std::regex_replace(out_start, subject_first, subject_last, pattern, format, flags);
  }
  template<typename OUT, required::iterator::Bidirectional BI,
           required::Char CHAR, required::Traits PATTERN_TRAITS>
  requires required::iterator::Output<OUT, CHAR> && required::iterator::Producing<BI, CHAR>
  inline auto replace(OUT out_start, BI subject_first, BI subject_last,
                      Basic_Pattern<CHAR, PATTERN_TRAITS> const &pattern,
                      CHAR const *format,
                      matching::Flags flags = {}) -> OUT {
    return std::regex_replace(out_start, subject_first, subject_last, pattern, format, flags);
  }
}
namespace nonstd::regex {
  //
  // Case 3-4.
  // the output (return type) is special std::basic_string<C,T,A>
  // the input such a special std::basic_string<C,T,A>
  //
  template<required::Char_Traits SUBJECT_TRAITS, required::Allocator SUBJECT_ALLOC,
           required::Char_Traits FORMAT_TRAITS, required::Allocator FORMAT_ALLOC,
           required::Char CHAR, required::Traits PATTERN_TRAITS>
  inline auto replace(std::basic_string<CHAR, SUBJECT_TRAITS, SUBJECT_ALLOC> const &subject,
                      Basic_Pattern<CHAR, PATTERN_TRAITS> const &pattern,
                      std::basic_string<CHAR, FORMAT_TRAITS, FORMAT_ALLOC> const &format,
                      matching::Flags flags = {}) -> std::basic_string<CHAR, SUBJECT_TRAITS, SUBJECT_ALLOC> {
    return std::regex_replace(subject, pattern, format, flags);
  }
  template<required::Char_Traits SUBJECT_TRAITS, required::Allocator SUBJECT_ALLOC,
           required::Char CHAR, required::Traits PATTERN_TRAITS>
  inline auto replace(std::basic_string<CHAR, SUBJECT_TRAITS, SUBJECT_ALLOC> const &subject,
                      Basic_Pattern<CHAR, PATTERN_TRAITS> const &pattern,
                      CHAR const *format,
                      matching::Flags flags = {}) -> std::basic_string<CHAR, SUBJECT_TRAITS, SUBJECT_ALLOC> {
    return std::regex_replace(subject, pattern, format, flags);
  }
}
namespace nonstd::regex {
  //
  // Case 5-6.
  // the subject is a pointer-string
  // the format is a special string std::basic_string<C,FT,FA>
  // the return type is a regular std::basic_string<C>
  //
  template<required::Char_Traits FORMAT_TRAITS, required::Allocator FORMAT_ALLOC,
           required::Char CHAR, required::Traits PATTERN_TRAITS>
  inline auto replace(CHAR const *subject,
                      Basic_Pattern<CHAR, PATTERN_TRAITS> const &pattern,
                      std::basic_string<CHAR, FORMAT_TRAITS, FORMAT_ALLOC> const &format,
                      matching::Flags flags = {}) -> std::basic_string<CHAR> {
    return std::regex_replace(subject, pattern, format, flags);
  }
  template<required::Char CHAR, required::Traits PATTERN_TRAITS>
  inline auto replace(CHAR const *subject,
                      Basic_Pattern<CHAR, PATTERN_TRAITS> const &pattern,
                      CHAR const *format,
                      matching::Flags flags = {}) -> std::basic_string<CHAR> {
    return std::regex_replace(subject, pattern, format, flags);
  }
}
#endiv

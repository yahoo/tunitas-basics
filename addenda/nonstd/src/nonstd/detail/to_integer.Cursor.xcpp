// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd.required.Character
namespace nonstd::detail::to_integer {
  //
  // The cursor using reverse iterators
  //
  // A single invocation of operator++ moves the position (back) to the next separator
  // (thousands separator) or unto exhaustion (the beginning)..
  //
  // Usage:
  //
  //   Cursor cursor{thousands, rbegin, rend};
  //
  template<required::Character CHAR> class Cursor;
}
#endiv
#divert <hpp>
#import std.reverse_iterator
template<nonstd::required::Character CHAR> class nonstd::detail::to_integer::Cursor {
public:
  using Char = CHAR;
  using Iterator = std::reverse_iterator<Char const *>;
  inline Cursor(Char separator, Iterator rbegin, Iterator rend);
  inline auto exhausted() const -> bool;
  inline auto operator*() const -> Iterator const &;
  inline auto operator*() -> Iterator;
  inline auto operator++() -> Cursor &;
  inline auto operator++(int) -> Cursor;
protected:
  Char separator;
  Iterator curr;
  Iterator end;
};
#endiv
#divert <ipp>
  #import std.invalid_argument
namespace nonstd::detail::to_integer {
  template<nonstd::required::Character _> Cursor<_>::Cursor(Char separator, Iterator rbegin, Iterator rend)
    : separator{separator}
    , curr{rbegin}
    , end{rend}
  { }
  template<nonstd::required::Character _> auto Cursor<_>::exhausted() const -> bool {
    return curr == end;
  }
  template<nonstd::required::Character _> auto Cursor<_>::operator*() const -> Iterator const & {
    return curr;
  }
  template<nonstd::required::Character _> auto Cursor<_>::operator*() -> Iterator {
    return curr;
  }
  template<nonstd::required::Character _> auto Cursor<_>::operator++() -> Cursor & {
    if (exhausted()) {
      throw std::invalid_argument{"exhausted"};
    }
    for ( ; curr != end; ++curr) {
      if (separator == *curr) {
        break;
      }
    }
    return *this;
  }
  template<nonstd::required::Character _> auto Cursor<_>::operator++(int) -> Cursor {
    Cursor old{*this};
    operator++();
    return old;
  }
}
#endiv

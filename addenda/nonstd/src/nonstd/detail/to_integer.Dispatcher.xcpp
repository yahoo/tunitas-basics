// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd.required.Integer
namespace nonstd::detail::to_integer {
  //
  // Dispatch against the INTEGER type.
  //
  // Usage:
  //
  //   See nonstd::sto(...)
  //
  template<required::Integer INTEGER> struct Dispatcher;
}
#endiv
#divert <hpp>
#import nonstd.Outcome
#import nonstd.integers
#import nonstd.numeric_limits
#import nonstd.required.Dopelike
#import std.string
#import std.string_view
namespace nonstd::detail {
  template<required::Integer INTEGER> struct to_integer::Dispatcher {
    using Value = INTEGER; // New School only; a.k.a. value_type
    using Limits = numeric_limits<Value>;
    using View = std::string_view;
    auto to_integer(View const &syntax, int base) const noexcept -> Outcome<Value>;
    auto sto(View const &syntax, int base) const -> Value;
    template<required::Dopelike DOPE> inline auto to_integer(DOPE const &syntax, int base) const noexcept -> Outcome<Value>;
    template<required::Dopelike DOPE> inline auto sto(DOPE const &syntax, int base) const -> Value;
  };
}
namespace nonstd::detail::to_integer {
  using namespace integers;
  // Because we "know" we are on a machine where
  // ... 64-bit integers are native enough;
  // ... 128-bit integers are possible
  // and 256-bit are completely aspirational.
  //
  template<> inline auto Dispatcher<uint128_t>::to_integer(View const &syntax, int base) const noexcept -> Outcome<Value>;
  template<> inline auto Dispatcher<uint128_t>::sto(View const &syntax, int base) const -> Value;
  //
  template<> inline auto Dispatcher<int128_t>::to_integer(View const &syntax, int base) const noexcept -> Outcome<Value>;
  template<> inline auto Dispatcher<int128_t>::sto(View const &syntax, int base) const -> Value;
}
#endiv
#divert <ipp>
namespace nonstd::detail::to_integer {
  template<required::Integer _> template<required::Dopelike DOPE> auto Dispatcher<_>::to_integer(DOPE const &syntax, int base) const noexcept -> Outcome<Value> {
    return to_integer(View{syntax.data(), syntax.size()}, base);
  }
  template<required::Integer _> template<required::Dopelike DOPE> auto Dispatcher<_>::sto(DOPE const &syntax, int base) const -> Value {
    return sto(View{syntax.data(), syntax.size()}, base);
  }
}
#import nonstd.detail.to_integer.Modern
namespace nonstd::detail::to_integer {
  template<> auto Dispatcher<uint128_t>::to_integer(std::string_view const &syntax, int base) const noexcept -> Outcome<Value> {
    Modern<Value> modern;
    return modern.to_integer(syntax, base);
  }
  template<> auto Dispatcher<uint128_t>::sto(std::string_view const &syntax, int base) const -> Value {
    Modern<Value> modern;
    return modern.sto(syntax, base);
  }
}
namespace nonstd::detail::to_integer {
  template<> auto Dispatcher<int128_t>::to_integer(std::string_view const &syntax, int base) const noexcept -> Outcome<Value> {
    Modern<Value> modern;
    return modern.to_integer(syntax, base);
  }
  template<> auto Dispatcher<int128_t>::sto(std::string_view const &syntax, int base) const -> Value {
    Modern<Value> modern;
    return modern.sto(syntax, base);
  }
}
#endiv
#divert <tpp>
#import nonstd.detail.to_integer.Native
#import nonstd.detail.to_integer.Validator
#import nonstd.error.to_integer.Code
#import std.error_code
#import std.exception
#import std.out_of_range
#import std.invalid_argument
namespace nonstd::detail::to_integer {
  template<required::Integer _> auto Dispatcher<_>::to_integer(std::string_view const &syntax, int base) const noexcept -> Outcome<Value> {
    using Result = Outcome<Value>;
    using Error_Code = error::to_integer::Code;
    try {
      Native<Value> native;
      auto [value, end] = native(syntax, base);
      if (syntax.size() != end) {
        // https://en.cppreference.com/w/cpp/string/basic_string/stol 
        // c.f. the example,
        //   to = std::stoi("31337 with words")        is  to=31337 <-------------------- them
        //   to = nonstd::sto<int>("31337 with words") is  !ok(to) <--------------------- herein
        return Result{std::error_code{Error_Code::EXTRA_CHARACTERS}};
      }
      Validator<Value> validate;
      if (!validate(value)) {
        // When the value is mildly out of bound we'll see this.
        return Result{std::error_code{Error_Code::OUT_OF_RANGE}};
      }
      return Result{value};
    } catch (std::invalid_argument const &) {
      // This may or may not have been signalled by in-band return; we just don't know.
      // We know, we know: go read the source Luke.  But what if it changes?  Or a different -lstdc++ is used?
      // So we read the specifications and try to follow the abstractions presented therein.
      return Result{std::error_code{Error_Code::INVALID_ARGUMENT}};
    } catch (std::out_of_range const &) {
      // When the value is outrageously out of bounds we'll see this.
      return Result{std::error_code{Error_Code::OUT_OF_RANGE}};
    } catch (std::exception const &) {
      // This is undocumented and we aren't expecting it
      // c.f. https://en.cppreference.com/w/cpp/string/basic_string/stoul (and siblings)
      return Result{std::error_code{Error_Code::TRANSLUCENT_EXCEPTION}};
    } catch (...) {
      // This is impossible to deal with and we aren't expecting it
      return Result{std::error_code{Error_Code::OPAQUE_EXCEPTION}};
    }
  }
  template<required::Integer _> auto Dispatcher<_>::sto(std::string_view const &syntax, int base) const -> Value {
    Native<Value> native;
    // same bounds checking as in to_integer(...)
    auto [value, end] = native(syntax, base);
    if (syntax.size() != end) {
      // with no more elaborate messaging than the libstdc++
      throw std::invalid_argument{"sto"};
    }
    Validator<Value> validate;
    if (!validate(value)) {
      // When the value is mildly out of bound we'll see this.
      throw std::invalid_argument{"sto"};
    }
    return value;
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd.required.Character
#import nonstd.detail.to_integer.Widen
namespace nonstd::detail::to_integer {
  //
  // The numeric locale aspect; and some operations upon it.
  //
  // Following the nullptr-is-false/else-is-value protocol of std::lconv
  // as declared: https://en.cppreference.com/w/cpp/locale/lconv
  // 
  // <quote>
  // The members of std::lconv are values of type char and of type char*.
  // Each char* member except decimal_point may be pointing at a null character (that is, at an empty C-string).
  // The members of type char are all non-negative numbers, any of which may be CHAR_MAX
  // if the corresponding value is not available in the current C locale.
  // </quote>
  //
  // Usage:
  //
  //   Locale<char> locale{std:localeconv()};
  //   if (10 != base) {
  //     locale.no_grouping();
  //   }
  //   if (locale_do_grouping()) {
  //     ... do something...
  //   }
  //                  the tricky one --------------\ (there)
  //                                               |
  //                                               |
  //                                               v
  //   for (auto here{somehow.begin()}, end{locale.end{here, somehow.end()}; end != here; ++here) {
  //     if (locale.is_grouping(here)) {
  //       ... skip these things, they are decoration...
  //     }
  //   }
  //
  template<required::Character CHAR, typename WIDEN = Widen<CHAR>> struct Locale;
}
#endiv
#divert <hpp>
#import std.lconv
#import std.optional
#import nonstd.numeric_limits
#import nonstd.detail.to_integer.Cursor
#import nonstd.detail.to_integer.Grouping
namespace nonstd::detail {
  template<required::Character CHAR, typename WIDEN> struct to_integer::Locale {
    using Char = CHAR;
    // RAII to acquire the grouping enablement and the grouping (thousands) character
    inline explicit Locale(std::lconv const *);
    // Deassert grouping (don't do it).
    auto no_grouping() -> void;
    // Is grouping enabled?
    auto do_grouping() const -> bool;
    // Is the candidate pointing at a (thousands) grouping character?
    auto is_grouping(Char const *candidate) const -> bool;
    // Find the end of the furthest correctly-appearing goruping
    // same as glib.git/stdlib/group.c __correctly_grouped_prefixwc(...)
    auto end(Char const *first, Char const *last) const -> Char const *;
  protected:
    using Grouping = to_integer::Grouping<Char>;
    using Cursor = to_integer::Cursor<Char>;
    using Widen = WIDEN;
    // a string whose elements indicate the sizes of digit groups
    std::optional<char const *> grouping_sizes;
    // Yes, the separator is a narrow character as per the spect
    std::optional<char> thousands_separator;
  private:
    using Limits = std::numeric_limits<char>;
    inline static auto interpret(std::lconv const *) -> std::optional<char>;
  };
}
#endiv
#divert <ipp>
namespace nonstd::detail::to_integer {
  template<required::Character C, typename W> Locale<C,W>::Locale(std::lconv const *l)
    : grouping_sizes{}
    , thousands_separator{} {
      if (nullptr != l) {
        if (nullptr != l->grouping) {
          auto grp = *l->grouping;
          auto no = grp <= 0 || grp == Limits::max();
          if (!no) {
            grouping_sizes = l->grouping;
            auto sep = *l->thousands_sep;
            auto no = sep <= 0 || sep == Limits::max();
            if (!no && '\0' != sep) {
              thousands_separator = sep;
            }
          }
        }
      }
    }
  template<required::Character C, typename W>auto Locale<C,W>::no_grouping() -> void {
    grouping_sizes.reset();
    thousands_separator.reset();
  }
  template<required::Character C, typename W>auto Locale<C,W>::do_grouping() const -> bool {
    // Even if there are grouping_sizes, there is no grouping if there is no separator defined
    return (bool) thousands_separator;
  }
  template<required::Character C, typename W>auto Locale<C,W>::is_grouping(Char const *candidate) const -> bool {
    if (!do_grouping()) {
      return false;
    } else {
      return Widen::widen(*thousands_separator) == *candidate;
    }
  }
}
#endiv
#divert <tpp>
//
// This function is almost directly from the GNU C Library; having been modernized to C++23 (sic).
// specifically: glib.git/stdlib/group.c __correctly_grouped_prefixwc(...)
// By intent and by declaration herein and around about, this code is covered the the LGPL,
// as is all of module-nonstd.  The original was 2003-05-11, Ulrich Drepper (via git blame)
//
// Find the maximum prefix of the string between BEGIN and END which satisfies the grouping rules.
//
// n.b. WATCHOUT the original code computes invalid addresses before the front of the buffer.
// This code uses std::reverse_iterator<...> to avoid that practice.
//
#import std.reverse_iterator
#import nonstd.detail.to_integer.Cursor
#import nonstd.detail.to_integer.Grouping
namespace nonstd::detail::to_integer  {
  template<required::Character C, typename W> auto Locale<C,W>::end(Char const *first, Char const *last) const -> Char const * {
    if (!do_grouping() || first == last) {
      return last;
    }
    // NOW it is assumed that at least one digit follows BEGIN directly.
    auto const thousands = *thousands_separator;
    using Iterator = std::reverse_iterator<Char const *>;
    auto rend = Iterator{first};  // was begin
    auto rbegin = Iterator{last}; // was end
    Grouping gcursor{*grouping_sizes};
    while (rbegin < rend) {
      // Check first group.
      Cursor cursor{thousands, rbegin, rend};
      ++cursor;
      if (cursor.exhausted()) {
        // No group at all.
        // We allow the representation to contain no grouping at all even if the locale specifies we can have grouping. 
        return rbegin.base();
      }
      ++cursor;
      auto const group_width = 1 + *gcursor;
      auto const found_width = *cursor - rbegin;
      if (found_width != group_width) {
        // This group fails the specification.
        // e.g. found ",0000" or ",00"
        // Even the first group was wrong; determine maximum shift.
        if (found_width > group_width) {
          //
          // ___,1234...   (too long)
          //    ^
          //    |
          //    \----------- there
          rbegin = *cursor + group_width;
        } else {
          // CP (cursor) points to a thousands separator character.
          // have: found_width < group_width
          //
          // ___,12... (too short)
          //    ^
          //    |
          //    \----------- there
          //
          rbegin = *cursor;
        }
      } else {
        // This group matches the specification.
        //
        // 
        // ___,123... (just right)
        //    ^
        //    |
        //    \----------- there
        //
        // CP (cursor) points to a thousands separator character. 
        // The preceding remainder of the string from BEGIN (rend) to NEW_END (new_rbegin) is the part
        // we will consider if there is a grouping error in this trailing portion from CP (cursor) to END (rbegin).
        decltype(rbegin) new_rbegin = *cursor + 1;
        while (1) {
          // Get the next grouping rule. 
          ++gcursor;
          // Skip the thousands separator.
          ++cursor;
          if (gcursor.no_rule()) {
            // No more thousands separators are allowed to follow.
            ++cursor;
            if (cursor.exhausted()) {
              // OK, only digits followed.
              return rbegin.base();
            }
          } else {
            // Check the next group.
            auto group_rbegin = *cursor;
            ++cursor;
            auto width = *cursor - group_rbegin;
            if (cursor.exhausted()) {
              if (width <= *gcursor) {
                // Final group is correct.
                return rbegin.base();
              }
              // Incorrect final group (width > *gcursor).  Punt.
              break;
            }
            if (width != *gcursor) {
              // Incorrect group.  Punt.
              break;
            }
          }
        }
        // The trailing portion of the string starting at NEW_END (new_rbegin) contains a grouping error.
        // So we will look for a correctly grouped number in the preceding portion instead.
        rbegin = new_rbegin;
      }
    }
    // [[FIXTHIS]] why is this not precisely known?
    return std::max(rbegin.base(), rend.base());
  }
}
#if 0
000
      
      auto cursor = rbegin;
      // Check first group.
      while (cursor < rend; ++cursor) {
        if (thousands == *cursor) {
          break;
        }
      }
      if (cursor == rend) {
        // No group at all.
        // We allow the representation to contain no grouping at all even if the locale specifies we can have grouping. 
        return rbegin.base();
      }

      if (cursor - rbegin == 1 + *gp) {
        // This group matches the specification.
        // e.g. ,000
        // CP points to a thousands separator character. 
        // The preceding remainder of the string from BEGIN (rend) to NEW_END (new_rbegin) is the part
        // we will consider if there is a grouping error in this trailing portion from CP to END.
        decltype(rbegin) new_rbegin = cursor + 1;

        // Loop while the grouping is correct.
        while (1) {
          // Get the next grouping rule. 
          ++gp;
          if (0 == *gp) {
            // If end is reached use last rule.
            --gp;
          }

          // Skip the thousands separator.
          ++cursor;

          if (*gp == CHAR_MAX || *gp < 0) {
            /* No more thousands separators are allowed to follow.  */
            for (cursor < rend; ++cursor) {
              if (thousands == *cursor) {
                break;
              }
            }

            if (cursor == rend) {
              /* OK, only digits followed.  */
              return rbegin.base();
            }

          } else {
            // Check the next group.
            auto group_rbegin = cursor;

            for (cursor < rend; ++cursor) {
              if (thousands == *cursor) {
                break;
              }
            }

            auto width = cursor - group_rbegin;
            if (cursor == rend) {
              if (width <= (int) *gp) {
                // Final group is correct.
                return rbegin.base();
              }
              // Incorrect final group (width > *gp).  Punt.
              break;
            }
            if (width != (int) *gp) {
              // Incorrect group.  Punt.
              break;
            }
          }
        }
        // The trailing portion of the string starting at NEW_END (new_rbegin) contains a grouping error.
        // So we will look for a correctly grouped number in the preceding portion instead.
        rbegin = new_rbegin;
      } else {
        /* Even the first group was wrong; determine maximum shift.  */
        if (end - cp > (int) *gp + 1) {
          end = cp + (int) *gp + 1;
        } else if (cp < begin) {
          /* This number does not fill the first group, but is correct.  */
          return end;
        } else {
          /* CP points to a thousands separator character.  */
          end = cp;
        }
      }

      return std::max(begin, end);


==================================================


      ------------------
      
    auto begin{first};
    auto end{last};
    while (end > begin) {
      auto cp = end - 1;
      // The grouping is a series of small numbers specifying the "thousands" groups (some cultures have odd sizes).
      // The grouping series is in "small-endian" format so we operator++ on it.
      auto gp = *grouping;

      // Check first group or for no group at all.
      while (cp >= begin; --cp) {
        if (*cp == thousands) {
          break;
        }
      }
      // n.b. WATCHOUT - at this point cp points one BEFORE begin, before the buffer; and is thus an invalid value.
      if (cp < begin) {
        // We allow the representation to contain no grouping at all even if the locale specifies we can have grouping. 
        return end;
      }
      if (end - cp == 1 + *gp) {
        // This group matches the specification.
        decltype(end) new_end;
        if (cp < begin) {
          // There is just one complete group.  We are done.
          return end;
        }
        // CP points to a thousands separator character. 
        // The preceding remainder of the string from BEGIN to NEW_END is the part
        // we will consider if there is a grouping error in this trailing portion from CP to END.
        new_end = cp - 1;

        // Loop while the grouping is correct.
        while (1) {
          // Get the next grouping rule. 
          ++gp;
          if (*gp == 0) {
            // If end is reached use last rule.
            --gp;
          }

          // Skip the thousands separator.
          --cp;

          if (*gp == CHAR_MAX || *gp < 0) {
            /* No more thousands separators are allowed to follow.  */
            while (cp >= begin) {
              if (*cp == thousands)
                break;
              --cp;
            }

            if (cp < begin) {
              /* OK, only digits followed.  */
              return end;
            }
          } else {
            /* Check the next group.  */
            auto group_end = cp;

            while (cp >= begin) {
              if (*cp == thousands) {
                break;
              }
              --cp;
            }

            if (cp < begin && group_end - cp <= (int) *gp) {
              /* Final group is correct.  */
              return end;
            }

            if (cp < begin || group_end - cp != (int) *gp) {
              /* Incorrect group.  Punt.  */
              break;
            }
          }
        }

        /* The trailing portion of the string starting at NEW_END
           contains a grouping error.  So we will look for a correctly
           grouped number in the preceding portion instead.  */
        end = new_end;
      } else {
        /* Even the first group was wrong; determine maximum shift.  */
        if (end - cp > (int) *gp + 1) {
          end = cp + (int) *gp + 1;
        } else if (cp < begin) {
          /* This number does not fill the first group, but is correct.  */
          return end;
        } else {
          /* CP points to a thousands separator character.  */
          end = cp;
        }
      }

      return std::max(begin, end);
    }
  }
}
#endif
#endiv

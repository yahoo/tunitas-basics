// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd.required.Integer
#import nonstd.integers
#import nonstd.numeric_limits
namespace nonstd::detail::to_integer {
  //
  // Perform the bounds checking where possible.
  // The computation is elided when it can't be done because the expressions are always false and/or ill-posed.
  //
  // Concept:
  //
  //   The Validator<INTEGER, LIMITS> is a functor object.
  //   The LIMITS are an instance of std::numeric_limits for some integer type.
  //   Using LIMITS for a smaller type is reasonable for a larger type is pointless
  //
  // Design:
  //
  //   true == Validator<...>operator()(candidate) means the candidate is with in the declared elimits
  //   false == it is not ... don't use it.
  //
  // Usage:
  //
  //   auto candidate = bigger{...somehow...};
  //   
  //   Validator<smallint, numeric_limits<smallint>> validate;
  //   if (!validate(candidate)) {
  //      ...report the problem...
  //   }
  //
  template<required::Integer VALUE, typename LIMITS = numeric_limits<VALUE>> struct Validator;
  using namespace integers;
  template<> struct Validator<uint64_t>;
  template<> struct Validator<int64_t>;
}
#endiv
#divert <hpp>
namespace nonstd::detail {
  template<required::Integer VALUE, typename LIMITS> struct to_integer::Validator {
    using Value = VALUE;
    using Limits = LIMITS;
    template<required::Integer CANDIDATE> inline auto operator()(CANDIDATE candidate) const -> bool {
      // CANDIDATE may be much wider than Value; think 64-bits contra 8 bits.
      static_assert(sizeof (Value) <= sizeof (CANDIDATE));
      return Limits::min() <= candidate && candidate <= Limits::max();
    }
  };
}
namespace nonstd::detail::to_integer {
  template<> struct Validator<uint64_t> {
    using Value = uint64_t;
    using Limits = numeric_limits<uint64_t>;
    // every 64-bit unsigned number is valid (within its range)
    template<required::Integer CANDIDATE> inline auto operator()(CANDIDATE) const -> bool { return true; }
  };
  template<> struct Validator<int64_t> {
    using Value = int64_t;
    using Limits = numeric_limits<int64_t>;
    // Every 64-bit signed number is valid (within its range)
    template<required::Integer CANDIDATE> inline auto operator()(CANDIDATE) const -> bool { return true; }
    // We're on an LP64 architecture at least; c.f. table in https://en.wikipedia.org/wiki/64-bit_computing
    static_assert(sizeof (int64_t) == sizeof (int long signed));
  };
}
#endiv

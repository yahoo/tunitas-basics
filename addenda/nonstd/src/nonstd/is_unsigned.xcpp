// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace nonstd {
  template<typename INTEGRAL> struct is_unsigned;
}
#import nonstd.int128_t
#import nonstd.uint128_t
namespace nonstd {
  // These are gcc extensions, not covered by std::is_unsigned
  template<> struct is_unsigned<int128_t>;
  template<> struct is_unsigned<uint128_t>;
}
#endiv
#divert <hpp>
#import std.is_unsigned
#import std.true_type
#import std.false_type
template<typename INTEGRAL> struct nonstd::is_unsigned : public std::is_unsigned<INTEGRAL> { };
template<> struct nonstd::is_unsigned<nonstd::int128_t> : public std::false_type { };
template<> struct nonstd::is_unsigned<nonstd::uint128_t> : public std::true_type { };
#endiv
#divert <cpp>
#import nonstd.integers
namespace nonstd {
  static_assert(is_unsigned<uint8_t>::value);
  static_assert(is_unsigned<uint16_t>::value);
  static_assert(is_unsigned<uint32_t>::value);
  static_assert(is_unsigned<uint64_t>::value);
  static_assert(is_unsigned<int unsigned long long>::value);
  static_assert(is_unsigned<uint128_t>::value);
}
#import nonstd.is_signed
namespace nonstd {
  static_assert(!is_signed<uint8_t>::value);
  static_assert(!is_signed<uint16_t>::value);
  static_assert(!is_signed<uint32_t>::value);
  static_assert(!is_signed<uint64_t>::value);
  static_assert(!is_signed<int unsigned long long>::value);
  static_assert(!is_signed<uint128_t>::value);
}
#endiv

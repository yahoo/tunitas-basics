// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#forward nonstd.basic_dope
namespace nonstd {
  template<typename UNIT> class basic_dope<UNIT const>;
}
#endiv
#divert <hpp>
#import nonstd.basic_dope
#import std.pair
#import std.size_t
#import std.tuple
template<typename UNIT> class nonstd::basic_dope<UNIT const> : public doping::Prototype<doping::Indirection<doping::Mutability::NO, UNIT, UNIT const>> {
  using ancestor = doping::Prototype<doping::Indirection<doping::Mutability::NO, UNIT, UNIT const>>;
public:
  basic_dope() = default;
  // Yes, implicit, all
  // trailing size is specifies, like C++ array syntax
  // [[deprecated]] basic_dope(typename ancestor::const_data_type, std::size_t); (not just deprecated, but purely unavailable)
  inline basic_dope(typename ancestor::Data, std::size_t);
  // preceding size overrides inferred size: M < N
  template<std::size_t N> inline basic_dope(std::size_t L, typename ancestor::Value const (&)[N]);
  template<std::size_t N> inline basic_dope(typename ancestor::Value const (&)[N]);
  inline basic_dope(basic_dope<UNIT>);
  // either order
  inline basic_dope(std::pair<UNIT *, std::size_t>);
  inline basic_dope(std::pair<typename ancestor::Data, std::size_t>);
  inline basic_dope(std::pair<std::size_t, UNIT *>);
  inline basic_dope(std::pair<std::size_t, typename ancestor::Data>);
  // either order
  inline basic_dope(std::tuple<UNIT *, std::size_t>);
  inline basic_dope(std::tuple<typename ancestor::Data, std::size_t>);
  inline basic_dope(std::tuple<std::size_t, UNIT *>);
  inline basic_dope(std::tuple<std::size_t, typename ancestor::Data>);
  // pass by reference
  template<required::Dopelike DOPELIKE> inline [[implicit]] basic_dope(DOPELIKE const &);
};
#endiv
#divert <ipp>
#import nonstd.basic_dope
template<typename _> nonstd::basic_dope<_ const>::basic_dope(typename ancestor::Data subject, std::size_t subject_size)
  : ancestor(subject, subject_size) {
  ;
}
template<typename _> template<std::size_t N> nonstd::basic_dope<_ const>::basic_dope(typename ancestor::Value const (&subject)[N])
  : ancestor(subject, N) {
  ;
}
#import std.min
#import std.length_error
template<typename _> template<std::size_t N> nonstd::basic_dope<_ const>::basic_dope(std::size_t subject_size, typename ancestor::Value const (&subject)[N])
  : ancestor(subject, std::min(subject_size, N)) {
  if (subject_size > N) {
    throw std::length_error("size > N");
  }
}
template<typename _> nonstd::basic_dope<_ const>::basic_dope(basic_dope<_> subject)
  : ancestor(subject.data(), subject.size()) {
  ;
}
template<typename UNIT> nonstd::basic_dope<UNIT const>::basic_dope(std::pair<std::size_t, UNIT *> subject)
  : ancestor(subject.second, subject.first) {
  ;
}
template<typename UNIT> nonstd::basic_dope<UNIT const>::basic_dope(std::pair<UNIT *, std::size_t> subject)
  : ancestor(subject.first, subject.second) {
  ;
}
template<typename _> nonstd::basic_dope<_ const>::basic_dope(std::pair<std::size_t, typename ancestor::Data> subject)
  : ancestor(subject.second, subject.first) {
  ;
}
template<typename _> nonstd::basic_dope<_ const>::basic_dope(std::pair<typename ancestor::Data, std::size_t> subject)
  : ancestor(subject.first, subject.second) {
  ;
}
template<typename UNIT> nonstd::basic_dope<UNIT const>::basic_dope(std::tuple<std::size_t, UNIT *> subject)
  : ancestor(std::get<1>(subject), std::get<0>(subject)) {
  ;
}
template<typename UNIT> nonstd::basic_dope<UNIT const>::basic_dope(std::tuple<UNIT *, std::size_t> subject)
  : ancestor(std::get<0>(subject), std::get<1>(subject)) {
  ;
}
template<typename _> nonstd::basic_dope<_ const>::basic_dope(std::tuple<std::size_t, typename ancestor::Data> subject)
  : ancestor(std::get<1>(subject), std::get<0>(subject)) {
  ;
}
template<typename _> nonstd::basic_dope<_ const>::basic_dope(std::tuple<typename ancestor::Data, std::size_t> subject)
  : ancestor(std::get<0>(subject), std::get<1>(subject)) {
  ;
}
template<typename _> template<nonstd::required::Dopelike DOPELIKE> nonstd::basic_dope<_ const>::basic_dope(DOPELIKE const &subject)
  : ancestor(subject.data(), subject.size()) {
  ;
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#if 10 < __GNUC__
#include <std.convertible_to>
namespace nonstd::required {
  template<typename FROM, typename TO> concept Convertible = std::convertible_to<FROM, TO>;
}
#else
#import std.is_convertible
#import std.add_rvalue_reference
namespace nonstd::required {
  // Cribbing to the suggested implementation at https://en.cppreference.com/w/cpp/concepts/convertible_to
  namespace detail::Convertible::assembly {
    //
    // avoid std::is_convertible_v
    //
    // /exp/gcc/9/include/c++/9.3.1/type_traits:2999:25: note: ‘std::is_convertible_v<nonstd::convertible_to<sys::flags::Flags<sys::at::Flag, int> >, sys::flags::Flags<sys::at::Flag, int> >’ used in its own initializer
    // 2999 |   inline constexpr bool is_convertible_v = is_convertible<_From, _To>::value;
    //
    template<typename FROM, typename TO> concept Explicitly = std::is_convertible<FROM, TO>::value;
    template<typename FROM, typename TO> concept Implicitly = requires(std::add_rvalue_reference_t<FROM> (&f)()) {
      { static_cast<TO>(f()) }
    };
    template<typename FROM, typename TO> concept Convertible = Explicitly<FROM, TO> && Implicitly<FROM, TO>;
  }
  using detail::Convertible::assembly::Convertible;
}
#endif
#endiv
#divert <cpp>
#import std.byte
#import std.is_enum
namespace {
  namespace tests {
    using namespace std;
    using namespace nonstd::required;
    static_assert(Convertible<int, long>);
    static_assert(Convertible<char, int>);
    static_assert(!Convertible<int *, char *>);
    //
    // You need Constructible for this condition
    static_assert(!Convertible<char, byte>);
    static_assert(!Convertible<short, byte>);
    static_assert(!Convertible<unsigned, byte>);
    static_assert(!Convertible<long, byte>);
    static_assert(!Convertible<int long unsigned, byte>);
    //
    // And with a user-defined type.
    enum class Erator { };
    struct Thing { };
    static_assert(Convertible<Erator, Erator>);
    static_assert(Convertible<Thing, Thing>);
  }
}
#endiv

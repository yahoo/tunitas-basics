// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#if 10 < __GNUC__
#include <std.constructible_from>
namespace nonstd::required {
  template<typename TO, typename... ARGUMENTS> concept Constructible = std::constructible_from<TO, ARGUMENTS...>;
}
#else
#import std.is_constructible
namespace nonstd::required {
  // Cribbing to the suggested implemetnation at https://en.cppreference.com/w/cpp/concepts/convertible_from
  // but understanding that std::destructible<T> must be approximated.
  // If is "done right," then we're at C++20 and the #ifdef goes the other way
  template<typename TO, typename... ARGUMENTS> concept Constructible = requires(TO to, ARGUMENTS...) {
    requires std::is_constructible<TO, ARGUMENTS...>::value;
    // { to.~TO() }; // crudely approximating std::destructible<T> of C++20.
  };
}
#endif
#divert <cpp>
#import std.byte
#import std.is_enum
namespace {
  namespace tests {
    using namespace std;
    using namespace nonstd::required;
    static_assert(Constructible<long, int>);
    static_assert(Constructible<char, int>);
    static_assert(!Constructible<int *, char *>);
    //
    // WATCHOUT
    //
    // auto a = byte('a');    ... good
    // byte b('a');           ... src/nonstd/required/Constructible.xcpp:36:12: error: cannot convert ‘char’ to ‘std::byte’ in initialization
    //
    static_assert(std::is_constructible<byte, byte>::value);
    static_assert(!std::is_constructible<byte, int>::value);
    static_assert(!std::is_constructible<byte, char>::value);
    static_assert(!std::is_constructible_v<byte, char>);
    static_assert(!Constructible<byte, char>);
    static_assert(!Constructible<byte, short>);
    static_assert(!Constructible<byte, unsigned>);
    static_assert(!Constructible<byte, long>);
    static_assert(!Constructible<byte, int long unsigned>);
    //
    struct Thing {
      Thing(int, char);
      Thing(char, double);
    };
    static_assert(Constructible<Thing, int long unsigned, char>);
    static_assert(Constructible<Thing, char, double>);
    static_assert(Constructible<Thing, double, double>);
    static_assert(!Constructible<Thing, double, double, double>);
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.filesystem.path
#import nonstd.required.Path
#import nonstd.required.Stringlike
namespace nonstd::required {
  //
  // Is this type sufficiently like a filesystem path?
  // It must supply its own storage management; it cannot just return a pointer.
  // Admit descendants of std::filesystem::path.
  //
  // Usage:
  //
  //   template<required::Pathlike PATHLIKE> auto function(...) -> PATHLIKE;
  //
  template<typename PATHLIKE> concept bool Pathlike = Stringlike<PATHLIKE> || Path<PATHLIKE>;
}
#endiv
#divert <cpp>
// Of course, this is test code
#import std.filesystem.path
#import std.string
#import std.wstring
#import std.string_view
#import c.const_stringz
namespace nonstd::required {
  static_assert(Pathlike<std::string>);
  static_assert(Pathlike<std::filesystem::path>);
  static_assert(!Pathlike<std::wstring>);
  static_assert(!Pathlike<std::string_view>);
  static_assert(!Pathlike<c::const_stringz>);
  static_assert(!Pathlike<char const *>);
  static_assert(!Pathlike<int>);
}
#endiv

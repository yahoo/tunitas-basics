// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import c.const_stringz
#import c.const_stringn
#import std.size_t
#import std.string
#import std.string_view
namespace nonstd::required {
  //
  // A stringvew-like container
  // Expect readmostly usage.    Whether the container is mutable is unchecked.
  //
  // May or may not supply its own storage.
  // May nor may not be cheap to copy; so expect pass by reference.
  // Does provide an iterator interface
  // Does provide a contiguous pointer+size
  //
  // Usage:
  //
  //   template<required::Stringview VIEW> auto function(VIEW const &) -> Somehow;
  //
  template<typename CONTAINER> concept Stringview = requires(CONTAINER container) {
    typename CONTAINER::iterator;
    { container.size() } -> convertible_to<std::size_t>;
    { container.data() } -> convertible_to<char const *>;
    { container.begin() } -> convertible_to<typename CONTAINER::iterator>;
    { container.end() } -> convertible_to<typename CONTAINER::iterator>;
  };
}
#endiv
#divert <cpp>
namespace {
  namespace tests {
    using namespace nonstd::required;
    static_assert(Stringview<std::string>);
    static_assert(Stringview<std::string_view>);
    static_assert(Stringview<c::const_stringz>);
    static_assert(Stringview<c::const_stringn>);
  }
}
#endiv

// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd.container.Traits // you may need specializations
#include <hpp/nonstd.container.Traits>
#import nonstd.required.iterator.Basic
#import nonstd.required.container.Basic
namespace nonstd::required::container {
  //
  // Is this a container "with" a well-defined iterator type?
  //
  // Concept:
  //
  //   Is there a possibility for an iterator derived from a constie CONTAINER?
  //
  //   The existence of a constie iterator does NOT imply the existance of a corresponding mutable iterator .
  //
  // Design:
  //
  //   Follows Iterator<CONTAINER>
  //
  //   Depend upon the declarations within container::Traits<CONTAINER const>
  //   Those declarations may, in turn, reference CONTAINER::const_iterator ... as necessary
  //
  //   But some constie iterators are not defined with or near the CONTAINER.
  //   e.g. can't think of an example right now tho.
  //
  // Usage:
  //
  //   template<required::container::Const_Iterator CONTAINER> struct Something;
  //
  template<typename CONTAINER> concept Const_Iterator = requires(CONTAINER container) {
    typename nonstd::container::Traits<CONTAINER const>::Iterator; // <--- the magic happens here with 'CONTAINER const'
    requires Basic<CONTAINER>;
    requires iterator::Basic<typename nonstd::container::Traits<CONTAINER const>::Iterator>;
  };
}
#endiv
#divert <cpp>
// This is test code
#import std.string
#import std.vector
namespace {
  namespace tests {
    using namespace std;
    using namespace nonstd::required::container;
    static_assert(Const_Iterator<vector<string>>);
    static_assert(Const_Iterator<string>);
  }
}
#endiv

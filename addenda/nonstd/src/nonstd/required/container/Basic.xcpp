// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.begin // <hpp/std.begin> as necessary>
#import std.end
namespace nonstd::required::container {
  //
  // Is this type suitable for use in a range for loop?
  //
  // Concept:
  //
  //   That's it!
  //   Namely, does it have a begin() and end()
  //
  //   No further embellishments with iterators and type traits.
  //   Not even iterator_traits<CONTAINER> or iterator::Traits<CONTAINER> is required to exist.
  //
  // Usage:
  //
  //   template<required::container::Basic CONTAINER> struct Something;
  //
  //   for (auto const &item : ...something<CONTAINER>...) { ...somehow... }
  //
  template<typename CONTAINER> concept Basic = requires(CONTAINER container) {
    { std::begin(container) }; // the return type is unconstrained (unspecified here)
    { std::end(container) };
  };
}
#endiv
#divert <cpp>
// This is test code
#import std.string
#import std.vector
namespace {
  namespace tests {
    using namespace std;
    using namespace nonstd::required::container;
    static_assert(Basic<vector<string>>);
    static_assert(Basic<string>);
  }
}
#endiv

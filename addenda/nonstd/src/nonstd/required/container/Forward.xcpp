// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd.container.Traits // but you will likely need some specializations
#include <hpp/nonstd.container.Traits>
#import nonstd.required.iterator.Forward
#import nonstd.required.container.Basic
namespace nonstd::required::container {
  //
  // Is this type a container that has an forward iterator?
  //
  // Concept:
  //
  //   Just what it says on the label.
  //
  // Design:
  //
  //   The design uses subconcepts iterator::Forward to get the inheritance properties therein.
  //
  // Usage:
  //
  //   template<required::container::Forward CONTAINER> struct Something;
  //
  template<typename CONTAINER> concept Forward = requires(CONTAINER container) {
    typename nonstd::container::Traits<CONTAINER>::Iterator;
    requires Basic<CONTAINER>;
    requires iterator::Forward<typename nonstd::container::Traits<CONTAINER>::Iterator>;
  };
}
#endiv
#divert <cpp>
// This is test code
#import std.string
#import std.vector
namespace {
  namespace tests {
    using namespace std;
    using namespace nonstd::required::container;
    static_assert(Forward<vector<string>>);
    static_assert(Forward<string>);
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method; For terms and provenace see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.iterator_traits // but you may need specializations
namespace nonstd::required::iterator {
  //
  // An iterator.
  // Follows https://en.cppreference.com/w/cpp/iterator/iterator_traits
  // The refinements add conjuncts for the particular categories.
  // Among: Input, Forward, Bidirectional, Undirected, Contiguous
  //
  template<typename ITERATOR> concept Basic = requires(ITERATOR iterator) {
    typename std::iterator_traits<ITERATOR>::value_type;
    typename std::iterator_traits<ITERATOR>::difference_type;
    typename std::iterator_traits<ITERATOR>::pointer;
    typename std::iterator_traits<ITERATOR>::reference;
    typename std::iterator_traits<ITERATOR>::iterator_category;
    { *iterator }; // don't check the type (here) ... might be value_type or reference
    { ++iterator } -> convertible_to<ITERATOR &>;
    { iterator++ } -> convertible_to<ITERATOR>;
  };
}
#endiv

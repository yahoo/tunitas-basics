// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
// https://wiki.scold-lang.org/page/nonstd.required.iterator.Output
#import nonstd.output_iterator_tag
#import nonstd.input_iterator_tag
#import nonstd.required.iterator.Basis
#import nonstd.iterator_traits
#include <hpp/nonstd.iterator_traits>
namespace nonstd::required::iterator {
  //
  // An output iterator
  //
  // Most of https://en.cppreference.com/w/cpp/named_req/OutputIterator
  //
  // <quote>
  //   The only valid use of operator* with an output iterator is on the left of an assignment:
  //   operator* may return a proxy object, which defines a member operator= (which may be a template) 
  // </quote>
  //
  // Usage:
  //
  //
  // What has to work is the following code:
  //
  //   *iterator++ = <value>;
  //    
  // for some <value>.  This cannot be expressed in the concept(ual) language
  // because it uses existential quantification [there exists a type of <value> such that...]
  // because the type of value is not guaranteed to be accessible.
  //
  // [[FIXTHIS]] but how?  The standard seems mute and broken on this point.
  // because all the types of iterator_traits<iterator>::value_type are void.
  // { *iterator = /*something*/ };
  //
  // WATCHOUT - cryptic messaging on ::nonstd::required::iterator::Output is not a TYPE
  //     it's true Output is not a TYPE
  //     instead Output is a TEMPLATE
  //
  // If you see
  //
  //   src/nonstd/required/iterator.Output.xcpp:38:12: error: ‘nonstd::required::iterator::Output’ is not a type
  //
  // It means that you used the template name without enough arguments.
  //
  // INCORRECT ---> template<::nonstd::required::iterator::Output              OUT> struct X;
  // CORRECT -----> template<::nonstd::required::iterator::Output<std::string> OUT> struct X;
  //
  namespace output {
    template<typename ITERATOR> concept bool Impure = Basis<ITERATOR> && requires(ITERATOR iterator) {
      // An output iterator may not have the tag, because it COULD be an input iterator that you can read from AND write to (e.g. char *, std::string:iterator)
      requires (is_same_v<input_iterator_tag, typename iterator_traits<ITERATOR>::iterator_category> ||
                is_base_of_v<input_iterator_tag, typename iterator_traits<ITERATOR>::iterator_category>);
      { *iterator++ = *iterator++ };
    };
    template<typename ITERATOR> concept bool Pure = Basis<ITERATOR> && requires(ITERATOR iterator) {
      requires (is_same_v<output_iterator_tag, typename iterator_traits<ITERATOR>::iterator_category> ||
                is_base_of_v<output_iterator_tag, typename iterator_traits<ITERATOR>::iterator_category>);
      { *iterator++ };
    };
    template<typename ITERATOR, typename RHS> concept bool Output = (Pure<ITERATOR> || Impure<ITERATOR>) && requires(ITERATOR iterator, RHS rhs) {
      { *iterator++ = rhs };
    };
  }
  using output::Output;
}
#endiv

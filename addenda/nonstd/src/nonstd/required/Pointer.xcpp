// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.is_pointer
namespace nonstd::required {
  //
  // An pointer type.
  //
  // C++20 has https://en.cppreference.com/w/cpp/concepts/pointer
  // C++11 has https://en.cppreference.com/w/cpp/types/is_pointer
  //
  // Here, the cv-qualified variants are not allowed.
  //
  template<typename POINTER> concept bool Pointer = std::is_pointer<POINTER>::value;
}
#endiv
#divert <cpp>
namespace {
  namespace tests {
    using namespace nonstd::required;
    // Testify! - 
    static_assert(!Pointer<bool>);
    static_assert(!Pointer<char>);
    static_assert(Pointer<unsigned char const *>);
    static_assert(Pointer<signed char const *>);
    static_assert(Pointer<char *>);
    static_assert(!Pointer<int>);
    static_assert(Pointer<int *>);
    static_assert(Pointer<int const *>);
    enum Ee { };
    static_assert(!Pointer<Ee>);
    static_assert(Pointer<Ee *>);
  }
}
#endiv

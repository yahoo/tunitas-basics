// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd.iterator_traits // but you will likely need specializations make this work
#include <hpp/nonstd.iterator_traits> // because we need the complete type, as know so far
#import nonstd.traits.school.Old
#include <hpp/nonstd.traits.school.Old>
namespace nonstd::required::school {
  //
  // Is type a this a old_school type?
  //
  // Supporting:
  //
  //   The (old_school) iterator_traits, container_traits.
  //   The (New School) iterator::Traits, container::Traits.
  //
  // Concept:
  //
  //   Estimate whether the container is an Old School or New School container
  //   You will need to present the appropriate specializations of traits::school::Old<THING>
  //
  //   Declared via nonstd::traits::school::Old<TYPE>
  //   Guess whether it has a named subtype as 'iterator' or a 'const_iterator'
  //
  // Usage:
  //
  //   template<required::school::Old THING> struct Thing;
  //
  namespace [[eponymous]] old {
    template<typename ITERATOR> concept Iterator = requires(ITERATOR) {
      typename iterator_traits<ITERATOR>::iterator_category;
      requires sizeof (typename iterator_traits<ITERATOR>::iterator_category);
    };
    template<typename CONTAINER> concept Declared = traits::school::Old<CONTAINER>::value; // these are expected to be rare ... if you want to declare, the then declare as New School
    template<typename CONTAINER> concept Constie = Iterator<typename CONTAINER::const_iterator>;
    template<typename CONTAINER> concept Mutable = Iterator<typename CONTAINER::iterator>;
    template<typename CONTAINER> concept Old = Declared<CONTAINER> || Constie<CONTAINER>  || Mutable<CONTAINER>;;
  }
  using old::Old;  
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd.required.character.Type
#import nonstd.required.character.Traits
namespace nonstd::required {
  //
  // A character traits specification.
  // Rhymes with Character; suitable for easy use in iostream-themed templates (see the usage, below)
  // 
  // WATCHOUT - This concept DOES NOT tie the traits to any nearby character type.
  //
  // Contrast:
  //   required::character::Traits<TRAITS, CHAR> ...... specifies the CHAR
  //   required::Character_Traits<TRAITS> ............. does not specify the character
  //
  // Usage:
  //
  //   template<required:;Character C, required:;Character_Traits T> class Something; 
  //   template<required:;character::Type C, required::character::Traits<C> T> class Something_Else; 
  //   template<required::Character C, required::Character_Traits T> auto operator<<(basic_ostream<C, T> &, ...) -> basic_ostream<C, T> &;
  //
  template<typename TRAITS> concept Character_Traits = requires(TRAITS traits) {
    typename TRAITS::char_type;
    requires character::Traits<TRAITS, typename TRAITS::char_type>;
  };
}
#endiv
#divert <cpp>
#import std.char_traits
namespace nonstd::required {
  // Testify! - All known std::char_traits are Character_Traits
  static_assert(Character_Traits<std::char_traits<char>>);
  static_assert(Character_Traits<std::char_traits<wchar_t>>);
  static_assert(Character_Traits<std::char_traits<char16_t>>);
  static_assert(Character_Traits<std::char_traits<char32_t>>);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.is_const
#import std.is_same
#import std.allocator
#import std.allocator_traits
namespace nonstd::required {
  //
  // A character, suitable for a stream or std::char_traits
  // And pairable with Allocator_Traits
  //
  template<typename ALLOC> concept Allocator = requires(ALLOC alloc) {
    typename std::allocator_traits<ALLOC>::size_type;
    typename std::allocator_traits<ALLOC>::difference_type;
#if 0
    typename std::allocator_traits<ALLOC>::pointer;
    typename std::allocator_traits<ALLOC>::const_pointer;
    typename std::allocator_traits<ALLOC>::reference;
    typename std::allocator_traits<ALLOC>::const_reference;
    typename std::allocator_traits<ALLOC>::value_type;
    { alloc == alloc } -> convertible_to<bool>;
    { alloc != alloc } -> convertible_to<bool>;
    { ALLOC() };
    { ALLOC(alloc) };
    // Should be able to convert to an ALLOC from any other type of
    // allocator but requires clauses don't have existential quantification.
    requires requires(ALLOC alloc, typename std::allocator_traits<ALLOC>::reference r, typename std::allocator_traits<ALLOC>::const_reference cr) {
      { alloc.address(r) } -> convertible_to<typename std::allocator_traits<ALLOC>::pointer>;
      { alloc.address(cr) } -> convertible_to<typename std::allocator_traits<ALLOC>::const_pointer>;
      { alloc.allocate(0lu, nullptr) } -> convertible_to<typename std::allocator_traits<ALLOC>::pointer>;
      { alloc.dealloc(nullptr, 0lu) };
      { alloc.max_size() } -> convertible_to<typename std::allocator_traits<ALLOC>::size_type>;
      requires requires(ALLOC alloc, typename std::allocator_traits<ALLOC>::pointer p) {
#if 0
        src/nonstd/required/Allocator.xcpp:34:17: internal compiler error: in tsubst_copy, at cp/pt.c:14457
          { alloc.construct(p, 1) };
#endif
        { alloc.destroy(p) };
      };
    }
#endif
  };
}
#endiv
#divert <cpp>
namespace nonstd::required {
  // Testify! - All known character types are Allocators
  static_assert(Allocator<std::allocator<char>>);
}
#endiv

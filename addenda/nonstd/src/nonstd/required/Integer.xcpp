// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd.required.integer.Signed
#import nonstd.required.integer.Unsigned
namespace nonstd::required {
  //
  // What constitutes an integer?
  //
  //    small:    int8_t, uint8_t, 
  //    medium:   (the usual pantheon of short, medium, long, long long)
  //    large:    nonstd::int128_t, nonstd::uint128_t
  //
  //    signed or unsigned
  //
  template<typename INTEGER> concept bool Integer = integer::Signed<INTEGER> || integer::Unsigned<INTEGER>;
}
#endiv
#divert <cpp>
#import nonstd.integers
namespace {
  namespace tests {
    using namespace nonstd::required;
    using namespace nonstd::integers;
    // signed
    static_assert(Integer<int8_t>);
    static_assert(Integer<int16_t>);
    static_assert(Integer<int32_t>);
    static_assert(Integer<int64_t>);
    static_assert(Integer<int128_t>);
    // unsigned
    static_assert(Integer<uint8_t>);
    static_assert(Integer<uint16_t>);
    static_assert(Integer<uint32_t>);
    static_assert(Integer<uint64_t>);
    static_assert(Integer<uint128_t>);
    // and the "not an integer" ones.
    static_assert(not Integer<long double>);
    static_assert(not Integer<double>);
    static_assert(not Integer<float>);
    static_assert(not Integer<char>);
    static_assert(not Integer<wchar_t>);
    static_assert(not Integer<char32_t>);
    static_assert(not Integer<char16_t>);
#if 9 < __GNUC__
    static_assert(not Integer<char8_t>);
#endif
  }
}
#endiv

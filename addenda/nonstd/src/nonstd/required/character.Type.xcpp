// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.is_const
#import std.is_same
namespace nonstd::required::character {
  //
  // A character, suitable for a string, a stream or std::char_traits
  // character::Type<CHAR> is pairable with character::Traits<TRAITS, CHAR>
  //
  // Usage:
  //
  //   template<required::character::Type C> struct Something;
  //   template<required::character::Type C, required::character::Traits<C> T> struct Something_Else;
  //
  template<typename CHAR> concept bool Type = requires(CHAR character) {
    requires !std::is_const<CHAR>::value; // to belabor the point
    requires (std::is_same<CHAR, char>::value ||
              std::is_same<CHAR, wchar_t>::value ||
              std::is_same<CHAR, char16_t>::value ||
              std::is_same<CHAR, char32_t>::value);
  };
}
#endiv
#divert <cpp>
namespace nonstd::required::character {
  // Testify! - All known character types are "characters" (cultural glyphs for natural language representation).
  //            a "character" is not a "byte," a std::byte or a nonstd::byte
  //            a "signed character" is basically an integer
  //            a "unsigned character" is basically an integer
  static_assert(Type<char>);
  static_assert(Type<wchar_t>);
  static_assert(Type<char16_t>);
  static_assert(Type<char32_t>);
}
#endiv

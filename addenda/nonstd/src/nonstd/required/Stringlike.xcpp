// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd.required.Basic_String
namespace nonstd::required {
  //
  // Is this type sufficiently like a string?
  // Being exactly a string, or a descendant
  //
  // Not just constructible into a string, but functionally the same.
  // It must supply its own storage management; it cannot just return a pointer.
  //
  // Usage:
  //
  //   auto function(...) -> STRINGLIKE;
  //   template<required::Stringlike STRINGLIKE> auto function(...) -> STRINGLIKE;
  //
  template<typename STRINGLIKE> concept Stringlike = requires(STRINGLIKE stringlike) {
    typename STRINGLIKE::value_type;
    requires Basic_String<STRINGLIKE>;
    requires std::is_same<char, typename STRINGLIKE::value_type>::value; // [[FIXTHIS]] this (or something) should admit to wide characters
    requires requires(STRINGLIKE, typename STRINGLIKE::value_type const *pointer) {
      { STRINGLIKE{pointer} };
    };
  };
}
#endiv
#divert <cpp>
// Of course, this is test code
#import std.filesystem.path
#import std.string
#import std.wstring
#import std.string_view
#import c.const_stringz
namespace nonstd::required {
  static_assert(Stringlike<std::string>);
  static_assert(!Stringlike<std::filesystem::path>);
  static_assert(!Stringlike<std::wstring>);
  static_assert(!Stringlike<std::string_view>);
  static_assert(!Stringlike<c::const_stringz>);
  static_assert(!Stringlike<char const *>);
  static_assert(!Stringlike<int>);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method; For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd.required.iterator.Basic
namespace nonstd::required {
  //
  // A container-like object with the possiblity for iteration by off-stage iterators
  //
  // Concept:
  //
  //   Even weaker than container::Basic<CONTAINER>
  //
  //   Focus on the test on CONTAINER, but the ITERATOR must be given to announce context
  //
  //   Model that weird thing that goes on among
  //     CONTAINER ... std::istream
  //     ITERATOR ...  std::istream_iterator
  //   wherein there is no begin(...) or end(...)
  //
  // Usage:
  //
  //   template<required::Iterator ITERATOR, required::Iterable<ITERATOR> CONTAINER> auto function(CONTAINER &, ITERATOR start, ITERATOR finish) -> void;
  //
  template<typename CONTAINER, typename ITERATOR> concept Iterable = requires(CONTAINER &container, ITERATOR iterator) {
    requires iterator::Basic<ITERATOR>;
    { ITERATOR{container} };
    { ITERATOR{} };
  };
}
#endiv
#divert <cpp>
#import std.istream
#import std.istream_iterator
namespace {
  namespace tests {
    using namespace nonstd::required;
    using namespace std;
    static_assert(Iterable<istream, istream_iterator<char>>);
  }
}
#endiv

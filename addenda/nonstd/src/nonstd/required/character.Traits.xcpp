// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.basic_ostream // [[FIXTHIS]] need the complete type of the std::basic_stream
#import std.is_same
#import nonstd.required.character.Type
namespace nonstd::required::character {
  //
  // A character traits specification.
  //
  // [[FIXTHIS]] should we test for the test of the signature of std::char_traits<CHAR> as well?
  // [[FIXTHIS]] All we're really trying to do here is give small safety to the <CHAR, TRAITS> pairing of iostream and string usages.
  //
  // WATCHOUT - This concept DOES tie the traits a character type.
  //
  // Contrast:
  //   required::character::Traits<TRAITS, CHAR> ...... specifies the CHAR
  //   required::Character_Traits<TRAITS> ............. does not specify the character
  //
  // Usage:
  //
  //   template<required:;character::Type C, required::character::Traits<C> T> class Something;
  //
  template<typename TRAITS, typename CHAR> concept bool Traits = Type<CHAR> && requires(TRAITS traits) {
    typename TRAITS::char_type;
    requires Type<typename TRAITS::char_type>;
    requires std::is_same<CHAR, typename TRAITS::char_type>::value;
    requires requires(std::basic_ostream<typename TRAITS::char_type, TRAITS> &outbound) {
      { outbound << typename TRAITS::char_type() };
    };
    requires requires(std::basic_ostream<typename TRAITS::char_type, TRAITS> &outbound, typename TRAITS::char_type ch) {
      { outbound << ch };
    };
    requires requires(std::basic_ostream<typename TRAITS::char_type, TRAITS> &outbound, CHAR charval) {
      { outbound << charval };
    };
  };
}
#endiv
#divert <cpp>
#import std.char_traits
namespace nonstd::required::character {
  // Testify! - All known std::char_traits are Traits
  static_assert(Traits<std::char_traits<char>, char>);
  static_assert(Traits<std::char_traits<wchar_t>, wchar_t>);
  static_assert(Traits<std::char_traits<char16_t>, char16_t>);
  static_assert(Traits<std::char_traits<char32_t>, char32_t>);
}
#endiv

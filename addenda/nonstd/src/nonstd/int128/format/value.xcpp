// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import std.basic_ostream
#import nonstd.uint128_t
namespace nonstd::int128::format {
  //
  // Format the uint128_t onto the stream, primitively.  No intervening copy.
  // The case for signed int128_t is handled in operator<<
  //
  // Therefore the justification, fill character and width are not considered herein.
  template<typename CHAR, typename TRAITS> inline auto value(std::basic_ostream<CHAR, TRAITS> &, nonstd::uint128_t) -> void;

  auto const E10_UINT64 = 19l;
  //           UINT64_MAX 18446744073709551615ULL */
  auto const P10_UINT64 = 10000000000000000000ULL; // 19 zeroes
  //                       1234567890123456478

  auto const E8_UINT64 = 19;
  auto const P8_UINT64 = 010000000000000000000ULL; // 19 zeroes
  //                       1234567890123456789

  auto const E16_UINT64 = 16;
  //             UINT64_MAX FFFFFFFFFFFFFFFFULL
  auto const P16_UINT64 = 0x1000000000000000ULL; // 16 zeroes
  //                         123456789123456
}
#endiv
#divert <ipp>
#import std.basic_ios
#import std.numeric_limits
#import std.uintmax_t
#include <cassert>
template<typename CHAR, typename TRAITS> auto nonstd::int128::format::value(std::basic_ostream<CHAR, TRAITS> &o, nonstd::uint128_t uv128) -> void {
  using ios = std::basic_ios<CHAR, TRAITS>;
  auto flags = o.flags();
  auto P = P10_UINT64;
  auto E = E10_UINT64;
  if (ios::hex & flags) {
    P = P16_UINT64;
    E = E16_UINT64;
  } else if (ios::oct & flags) {
    P = P8_UINT64;
    E = E8_UINT64;
  } else if (ios::dec & flags) {
    P = P10_UINT64;
    E = E10_UINT64;
  }
  //
  // Themed from the recipe at The Authority on numerical methods, Stack Exchange
  //
  // https://stackoverflow.com/questions/11656241/how-to-print-uint128-t-number-using-gcc
  // http://en.cppreference.com/w/cpp/types/integer
  // reminder:
  //    there is no operator<<(ostream, std::uint64_t) a.k.a. operator<<(ostream, int long unsigned)
  //    there is an operator<<(ostream, int unsigned)
  //    there is an operator<<(ostream, int long long unsigned)
  // you have to avoid the in-scope operator<<(ostream, __int128 unsigned)
  //
  static_assert(!std::is_same<std::uintmax_t, nonstd::uint128_t>::value, "fail");
  if (uv128 <= std::numeric_limits<std::uint64_t>::max()) {
    o << std::uintmax_t(uv128);
  } else {
    auto           major128 = uv128 / P;
    std::uintmax_t minor64  = uv128 % P;
    if (0 == major128) {
      o << minor64;
    } else {
      if (major128 > std::numeric_limits<std::uint64_t>::max()) {
        auto           remajor128 = major128 / P;
        std::uintmax_t reminor64  = major128 % P;
        assert(remajor128 <= std::numeric_limits<std::uint64_t>::max());
        o << std::uintmax_t(remajor128);
        o.fill('0');
        o.width(E);
        o << reminor64;
      } else {
        o << std::uintmax_t(major128);
      }
      o.fill('0');
      o.width(E);
      o << minor64;
    }
  }
}
#endiv

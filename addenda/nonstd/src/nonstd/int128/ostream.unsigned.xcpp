// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import std.basic_ostream
#import nonstd.uint128_t
namespace nonstd::int128 {
  //
  // WATCHOUT - proper usage requires a 'using nonstd::int128::operator<<' at the top level
  //
  // Usage:
  //
  //   #import nonstd.int128.stream
  //   using nonstd::int128::operator<<; <---------------------------- at global scope
  //
  // Background:
  //
  // CPPUNIT_ASSERT_EQUAL requires
  //     operator==
  //     operator<<
  //
  // Somewhere in http://gcc.gnu.org/onlinedocs/
  //
  // 6.8 128-bit integers
  // 
  // As an extension the integer scalar type __int128 is supported for targets having an integer mode wide enough to hold 128-bit. Simply write __int128 for a signed 128-bit integer, or unsigned __int128 for an unsigned 128-bit integer. There is no support in GCC to express an integer constant of type __int128 for targets having long long integer with less then [sic] 128 bit width.
  //
  // Thus we have to supply our own printing.
  // Doesn't have to be tippy-top efficient, just correct.
  //
  template<typename CHAR, typename TRAITS> inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, nonstd::uint128_t) -> std::basic_ostream<CHAR, TRAITS> &;
}
#endiv
#divert <ipp>
#import std.basic_ostringstream
#import nonstd.int128.format.leader
#import nonstd.int128.format.value
template<typename CHAR, typename TRAITS> auto nonstd::int128::operator<<(std::basic_ostream<CHAR, TRAITS> &o, nonstd::uint128_t uv) -> std::basic_ostream<CHAR, TRAITS> & {
  using ios = std::basic_ios<CHAR, TRAITS>;
  std::basic_ostringstream<CHAR, TRAITS> buf;
  buf.setf(o.flags(), ios::basefield);
  format::leader(buf, o, 0 == uv); 
  format::value(buf, uv);
  // This respects the width and fill.
  return o << buf.str();
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace nonstd::sysexits {
  //
  // The system-independent (system) exit codes
  // If you can use module-sys and sys::exit::Code, then you should prefer those codes.
  //
  // Reminder: these declarations are aligned with module-sys sys.exits
  // but they MUST NOT depend upon module-sys or sys.exits in any way.
  //
  // Usage:
  //
  //   throw Quitting{sysexits::FAIL};
  //
  class Code;
}
#divert </fpp>
#divert <hpp>
#import std.basic_ostream
#import nonstd.required.Character
#import nonstd.required.Character_Traits
namespace nonstd::sysexits {
  template<required::Character CHAR, required::Character_Traits TRAITS> inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, Code const &) -> std::basic_ostream<CHAR, TRAITS> &;
  inline auto operator==(Code const &, Code const &) -> bool;
  inline auto operator!=(Code const &, Code const &) -> bool;
  // Accretion of failure codes across a series
  inline auto operator|(Code const &, Code const &) -> Code;
  // Accretion of success codes across a series
  inline auto operator&(Code const &, Code const &) -> Code;
  inline auto ok(Code const &) -> bool;
  inline auto failure(Code const &) -> bool;
}
#import nonstd.sysexits.Is_Constructible_From
#import nonstd.sysexits.Is_Convertible_Into
#import std.uint8_t
class nonstd::sysexits::Code {
public:
  using Value = sysexits::Value;
  constexpr Code();
  constexpr [[implicit]] Code(Value);
  template<typename TYPE> requires Is_Constructible_From<TYPE>::value inline [[implicit]] Code(TYPE const &proposed);
  auto operator=(Code const &) -> Code & = default;
  inline auto operator&=(Code const &) -> Code &;
  inline auto operator|=(Code const &) -> Code &;
  static_assert(Is_Convertible_Into<int>::value);
  static_assert(Is_Convertible_Into<Value>::value);
  template<typename TYPE> inline operator TYPE() const requires Is_Convertible_Into<TYPE>::value { return get<TYPE>(); }
protected:
  template<typename TYPE> inline auto get() const -> TYPE requires Is_Convertible_Into<TYPE>::value;
  Value value;
};
// The default constructor must be manifest else the POD types remain uninitialized
constexpr nonstd::sysexits::Code::Code() : value{0} { }  
constexpr nonstd::sysexits::Code::Code(Value value) : value{value} { }
#endiv
#divert <ipp>
template<nonstd::required::Character CHAR, nonstd::required::Character_Traits TRAITS> auto nonstd::sysexits::operator<<(std::basic_ostream<CHAR, TRAITS> &o, Code const &c) -> std::basic_ostream<CHAR, TRAITS> & {
  CHAR const leader[]{'e','x','i','t',' ','\0'};  // make the compiler widen char -> CHAR
  return o << leader << (int)c;
}
auto nonstd::sysexits::operator==(Code const &a, Code const &b) -> bool {
  return (int)a == (int)b;
}
auto nonstd::sysexits::operator!=(Code const &a, Code const &b) -> bool {
  return !operator==(a, b);
}
auto nonstd::sysexits::operator|(Code const &a, Code const &b) -> Code {
  //
  // absorb the failures (this is boolean OR implemented on true-coded-as-zero)
  // usage:
  //   Code c = a | b;
  //   c fails if either a or b failed
  //
  return ok(a) ? a : b;
}
auto nonstd::sysexits::operator&(Code const &a, Code const &b) -> Code {
  //
  // saturate the success (this is boolean AND implemented on true-coded-as-zero) 
  // usage:
  //   Code c = a & b
  //   c succeeds if a and b succeeded
  //
  return ok(a) ? b : a;
}
auto nonstd::sysexits::ok(Code const &code) -> bool {
  static_assert(Is_Convertible_Into<int>::value);
  return 0 == (int)code;
}
auto nonstd::sysexits::failure(Code const &code) -> bool {
  return ! ok(code);
}
#import nonstd.sysexits.make
template<typename TYPE> requires nonstd::sysexits::Is_Constructible_From<TYPE>::value nonstd::sysexits::Code::Code(TYPE const &proposed)
  // make(...) must be found by ADL, either in the enclosing scopes or far away.
  // make(...) must not be a template function because ADL will not find those.
  : Code{make(proposed)} { }
template<typename TYPE> auto nonstd::sysexits::Code::get() const -> TYPE requires Is_Convertible_Into<TYPE>::value {
  return TYPE(value);
}
auto nonstd::sysexits::Code::operator&=(Code const &b) -> Code & {
  Code const &a(*this);
  Code &c(*this);
  c = a & b;
  return *this;
}
auto nonstd::sysexits::Code::operator|=(Code const &b) -> Code & {
  Code const &a(*this);
  Code &c(*this);
  c = a | b;
  return  *this;
}
#endiv

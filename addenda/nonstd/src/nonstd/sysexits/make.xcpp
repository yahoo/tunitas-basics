// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import nonstd.sysexits.Code
#import nonstd.sysexits.Is_Constructible_From
namespace nonstd::sysexits {
  //
  // Make a sysexits::Code subject to the enablement of Is_Constructible_From
  //
  // Usage:
  //
  //   auto made = make(99);
  //   auto made = make(99u);
  //   auto made = make(std::uint8_t{99});
  //
  inline constexpr auto make(Value) -> Code;
  inline auto make(int signed) -> Code;
  inline auto make(int unsigned) -> Code;
  //
  // CANNOT BE
  //   template<typename TYPE> inline auto make(TYPE) -> Code requires Is_Constructible_From<TYPE>::value;
  // because ADL won't find and apply template functions.
}
constexpr auto nonstd::sysexits::make(Value value) -> Code { return Code{value}; }
#endiv
#divert <ipp>
// [[FIXTHIS]] WATCHOUT - these silently truncate the value down to Value (uint8_t)
auto nonstd::sysexits::make(int signed value) -> Code   { return Code{Code::Value(value)}; }
auto nonstd::sysexits::make(int unsigned value) -> Code { return Code{Code::Value(value)}; }
#endiv

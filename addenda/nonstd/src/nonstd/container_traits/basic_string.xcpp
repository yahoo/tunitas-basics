// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd.basic_string
namespace nonstd {
  template<typename C, typename T, typename A> struct container_traits<basic_string<C, T, A>>;
}
#endiv
#divert <hpp>
#import nonstd.container.traits.glue.Old
namespace nonstd {
  template<typename C, typename T, typename A> struct container_traits<basic_string<C, T, A>> : public container::traits::glue::Old<basic_string<C, T, A>> { };
}
#endiv
#divert <cpp>
namespace {
  namespace tests {
    using namespace nonstd;
    static_assert(sizeof (container::traits::glue::old_school::required::Has_Mutable_Iterator<std::string>));
    static_assert(sizeof (container::traits::glue::old_school::Present_And_Mutable<std::string>::Mixin::iterator));
    static_assert(sizeof (container::traits::glue::Old<std::string>::iterator));
    static_assert(sizeof (container_traits<std::string>::iterator));
    static_assert(sizeof (container_traits<std::string>::const_iterator));
  }
}
#endiv

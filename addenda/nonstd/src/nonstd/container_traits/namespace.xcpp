// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace nonstd {
  //
  // The container traits, rhymes with iterator_traits.
  // You add your specializations here.
  //
  // Is old_school, see traits::glue::Old<CONTAINER>
  // For New School, use nonstd::container::Traits<CONTAINER>
  //
  // There {are,will be} specialization definitions for the C++ library containers.
  //
  // WATCHOUT - these traits structures MUST NOT use a concept to constraint the template parameter.
  // the concept definitions use the traits definitions to define their requirement predicates(!)
  //
  // Usage:
  // 
  //   using Traits = nonstd::container_traits<...some_container...>;
  //   using Value = Traits::value_type;
  //
  template<typename CONTAINER> struct container_traits;
}
#endiv
#divert <hpp>
template<typename CONTAINER> struct nonstd::container_traits { };
//
// And also the specializations nearby
//
//   #import nonstd.container_traits.nonstd.vector
//   #import nonstd.container_traits.nonstd.basic_string
//   #import nonstd.container_traits.nonstd.basic_string_view
//   ...you get the idea (buy what you need)...
//
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd.basic_string_view
namespace nonstd {
  template<typename CHAR, typename TRAITS> struct container_traits<basic_string_view<CHAR, TRAITS>>;
}
#endiv
#divert <hpp>
#import nonstd.container.traits.glue.Old
namespace nonstd {
  template<typename CHAR, typename TRAITS> struct container_traits<basic_string_view<CHAR, TRAITS>> {
    using Container = basic_string_view<CHAR, TRAITS>;
    using value_type = typename basic_string_view<CHAR, TRAITS>::value_type;
    using Value = value_type; // ................................... for continuity with the New School
    // Per https://en.cppreference.com/w/cpp/string/basic_string_view
    // both iterator flavors are present and relevant always ... and both are the constie kind.
    using iterator = typename Container::iterator;
    using Iterator = iterator;
    using const_iterator = typename Container::const_iterator;
    using Const_Iterator = const_iterator;
  };
}
#endiv
#divert <cpp>
#import std.string_view
namespace {
  namespace tests {
    using namespace nonstd;
    static_assert(sizeof (container_traits<std::string_view>));
    static_assert(sizeof (container_traits<std::string_view>::iterator));
    static_assert(sizeof (container_traits<std::string_view>::const_iterator));
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace nonstd::path::filename::trimmer {
  //
  // An operator in the trimmer pantheon.
  // Remove the prefix of a path; respect path boundaries in matching.
  //
  // Usage:
  //     using nonstd::path::filename::trim;
  //     trim(subject) << deprefix("/some/pattern");
  //
  // All the magic happens in operator<<
  //
  class Deprefix;
}
#endiv
#divert <hpp>
#import nonstd.path.filename.trimmer.Workbench
namespace nonstd::path::filename::trimmer {
  //
  // See the helpers nearby
  //     nonstd::path::filename::trim
  //     nonstd::path::filename::deprefix
  //
  // Example:
  //     workbench binds to a string "/home/USER/.config/application/filename";
  //     deprefix contains pattern "/home/USER";
  //
  // Usage:
  //     trim(subject) << deprefix(homedir);
  //
  // Result
  //     workbench binds to a string ".config/application/filename"
  //
  inline auto operator<<(Workbench, Deprefix const &) -> Workbench;
}
#import std.string
#import nonstd.path.filename.trimmer.Prototype
class nonstd::path::filename::trimmer::Deprefix : public Prototype {
  using ancestor = Prototype;
public:
  using ancestor::Prototype;
};
#endiv
#divert <ipp>
#include <cassert>
auto nonstd::path::filename::trimmer::operator<<(Workbench workbench, Deprefix const &deprefix) -> Workbench {
  std::string::size_type position = workbench.subject.find(deprefix.pattern);
  std::string::size_type start = 0;
  if (start == position) {
    std::string::size_type size = workbench.subject.size();
    std::string::size_type finish = deprefix.pattern.size();
    assert(finish <= size); // else how did it match?
    if (finish == size) {
      workbench.subject.clear();
    } else if ('/' == workbench.subject[finish]) {
      //
      // The pattern must finish on a '/' else the pattern does not match
      //
      while (finish < size && '/' == workbench.subject[finish]) {
        finish++;
      }
      if (finish == size) {
        workbench.subject.clear();
      } else {
        auto erasure_length = finish - start;
        workbench.subject.erase(start, erasure_length);
      }
    } else {
      //
      // The pattern didn't end on a '/', therefore it does not match.
      // The trimming is a no-op.
      //
      // e.g.
      //     workbench binds to a string "/home/USERNAME/.config/application/filename";
      //     deprefix contains pattern "/home/USE";
      //     trim(subject) << deprefix(pattern);
      //     no trimming occurs.
      //
    }
  }
  return workbench;
}
#endiv

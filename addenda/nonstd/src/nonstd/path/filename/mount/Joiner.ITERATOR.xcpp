// -*- c++ -*- with the SCOLD stylings
#divert <fpp>
#import nonstd.path.filename.mount.Joiner
#import std.pair
namespace nonstd::path::filename::mount {
  template<typename SEPARATOR, typename ITERATOR> class Joiner<SEPARATOR, std::pair<ITERATOR, ITERATOR>>;
}
#endiv
#divert <hpp>
#import nonstd.path.filename.mount.Value
namespace nonstd::path::filename::mount {
  template<typename SEPARATOR, typename ITERATOR> inline auto operator/(Value &&, Joiner<SEPARATOR, std::pair<ITERATOR, ITERATOR>> const &) -> Value &&;
  // no need ... the unspecialized one will work fine
  //    template<typename SEPARATOR, typename ITERATOR> inline auto operator/(Joiner<SEPARATOR, std::pair<ITERATOR, ITERATOR>> const &, Value &&) -> Value &&;
  namespace detail {
    template<typename SEPARATOR, typename ITERATOR> inline auto stringify(Joiner<SEPARATOR, std::pair<ITERATOR, ITERATOR>> const &) -> std::string; 
  }
}
template<typename SEPARATOR, typename ITERATOR> class nonstd::path::filename::mount::Joiner<SEPARATOR, std::pair<ITERATOR, ITERATOR>> {
public:
  inline Joiner(SEPARATOR, ITERATOR start, ITERATOR finish);
  SEPARATOR separator;
  ITERATOR start;
  ITERATOR finish;
};
#endiv
#divert <ipp>
template<typename SEPARATOR, typename ITERATOR> auto nonstd::path::filename::mount::operator/(Value &&anon, Joiner<SEPARATOR, std::pair<ITERATOR, ITERATOR>> const &spec) -> Value && {
  anon.subject += '/';
  bool rest;
  ITERATOR i, e;
  for (rest=false, i=spec.start, e=spec.finish; e != i; ++i, rest=true) {
    if (rest) {
      anon.subject += spec.separator;
    }
    anon.subject += *i;
  }
  return std::forward<Value>(anon);
}

#import std.string
template<typename SEPARATOR, typename ITERATOR> auto nonstd::path::filename::mount::detail::stringify(Joiner<SEPARATOR, std::pair<ITERATOR, ITERATOR>> const &spec) -> std::string {
  std::string ret;
  bool rest;
  ITERATOR i, e;
  for (rest=false, i=spec.start, e=spec.finish; e != i; ++i, rest=true) {
    if (rest) {
      ret += spec.separator;
    }
    ret += *i;
    rest = true; 
  }
  return ret;
}

template<typename SEPARATOR, typename ITERATOR> nonstd::path::filename::mount::Joiner<SEPARATOR, std::pair<ITERATOR, ITERATOR>>::Joiner(SEPARATOR arg_separator, ITERATOR arg_start, ITERATOR arg_finish)
  : separator(arg_separator)
  , start(arg_start)
  , finish(arg_finish) {
  ;
}
#endiv

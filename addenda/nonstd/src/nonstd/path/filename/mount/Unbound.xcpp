// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace nonstd::path::filename::mount {
  //
  // usage: see nonstd::path::filename::workbench()
  // See Value or Reference
  //
  class Unbound;
}
#endiv
#divert <hpp>
#import c.const_stringz
#import nonstd.path.filename.mount.Reference
#import nonstd.path.filename.mount.Value
#import std.size_t
#import std.string
namespace nonstd::path::filename::mount {
  // binding to a reference is easy
  inline auto operator%(Unbound &&, std::string &lhs) -> Reference;

  // binding to a "consty" or an xvalue or a literal is more varied
  inline auto operator*(Unbound &&, std::string &&rhs) -> Value;
  inline auto operator*(Unbound &&, std::string const &rhs) -> Value;
  inline auto operator*(Unbound &&, c::const_stringz rhs) -> Value; 
  inline auto operator*(Unbound &&, char const *rhs) -> Value; 
  template<std::size_t N> inline auto operator*(Unbound &&, char const (&rhs)[N]) -> Value; 
}
class nonstd::path::filename::mount::Unbound {
public:
  Unbound() = default;
};
#endiv
#divert <ipp>
#import std.move
auto nonstd::path::filename::mount::operator%(Unbound &&, std::string &subject) -> mount::Reference {
  Reference lhs(subject);
  return lhs;
}

#import std.forward
auto nonstd::path::filename::mount::operator*(Unbound &&, std::string &&anon) -> Value {
  Value rhs(std::forward<std::string>(anon));
  return rhs;
}

auto nonstd::path::filename::mount::operator*(Unbound &&, std::string const &basis) -> Value {
  Value rhs(basis);
  return rhs;
}

auto nonstd::path::filename::mount::operator*(Unbound &&, c::const_stringz basis) -> Value {
  Value rhs(basis.begin(), basis.end());
  return rhs;
}

auto nonstd::path::filename::mount::operator*(Unbound &&, char const *basis) -> Value {
  c::const_stringz csz(basis);
  Value rhs(csz.begin(), csz.end());
  return rhs; 
}

template<std::size_t N> auto nonstd::path::filename::mount::operator*(Unbound &&, char const (&basis)[N]) -> Value {
  Value rhs(&basis[0], &basis[N]);
  return rhs; 
}
#endiv

// -*- c++ -*- with the SCOLD stylings
#divert <fpp>
#import nonstd.path.filename.mount.Joinering
namespace nonstd::path::filename::mount {
  template<typename SEPARATOR, typename VALUE, typename... VALUES> class Joinering<SEPARATOR, VALUE, VALUES...>;
}
#endiv
#divert <hpp>
#import std.string
#import nonstd.path.filename.mount.Unbound
template<typename SEPARATOR, typename VALUE, typename... VALUES> class nonstd::path::filename::mount::Joinering<SEPARATOR, VALUE, VALUES...> : public Joinering<SEPARATOR, VALUES...> {
  using ancestor = Joinering<SEPARATOR, VALUES...>;
  template<typename B, typename S, typename... VS> friend auto mount::operator/(B &&, Joinering<S, VS...> const &) -> B &&;
  template<typename B, typename S, typename... VS> friend auto mount::operator/(Joinering<S, VS...> const &, B &&) -> B &&;
  template<typename S, typename... VS> friend auto mount::operator*(Unbound &&, Joinering<S, VS...> const &) -> Value;
  template<typename S, typename... VS> friend auto mount::detail::add_remaining(std::string &, Joinering<S, VS...> const &) -> void;
public:
  inline Joinering(SEPARATOR, VALUE const &, VALUES const &...);
  VALUE const &value;
};
#endiv
#divert <ipp>
template<typename SEPARATOR, typename VALUE, typename... VALUES> nonstd::path::filename::mount::Joinering<SEPARATOR, VALUE, VALUES...>::Joinering(SEPARATOR arg_separator, VALUE const &arg_value, VALUES const &...arg_values)
  : ancestor(arg_separator, arg_values...)
  , value(arg_value) {
  ;
}
#endiv

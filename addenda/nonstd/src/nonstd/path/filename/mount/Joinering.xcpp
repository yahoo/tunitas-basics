// -*- c++ -*- with the SCOLD stylings
#divert <fpp>
namespace nonstd::path::filename::mount {
  template<typename SEPARATOR, typename... VALUES> class Joinering;
}
#entail nonstd.path.filename.mount.Joinering.EMPTY
#entail nonstd.path.filename.mount.Joinering.VALUE.VALUES
#import std.string
#endiv
#divert <hpp>
#import nonstd.path.filename.mount.Unbound
namespace nonstd::path::filename::mount {
  template<typename BOUND, typename SEPARATOR, typename... VALUES> inline auto operator/(BOUND &&, Joinering<SEPARATOR, VALUES...> const &) -> BOUND &&;
  template<typename BOUND, typename SEPARATOR, typename... VALUES> inline auto operator/(Joinering<SEPARATOR, VALUES...> const &, BOUND &&) -> BOUND &&;
  template<typename SEPARATOR, typename... VALUES> inline auto operator*(Unbound &&, Joinering<SEPARATOR, VALUES...> const &) -> Value; 
  namespace detail {
    template<typename SEPARATOR> inline auto add_remaining(std::string &fill, Joinering<SEPARATOR> const &) -> void;
    template<typename SEPARATOR, typename... VALUES> inline auto add_remaining(std::string &fill, Joinering<SEPARATOR, VALUES...> const &) -> void;
  }
}
#divert <ipp>
#import std.forward
template<typename BOUND, typename SEPARATOR, typename... VALUES> auto nonstd::path::filename::mount::operator/(BOUND &&anon, Joinering<SEPARATOR, VALUES...> const &spec) -> BOUND && {
  using ancestor_type = typename Joinering<SEPARATOR, VALUES...>::ancestor;
  anon.subject += '/';
  anon.subject += spec.value;
  detail::add_remaining(anon.subject, static_cast<ancestor_type const &>(spec));
  return std::forward<BOUND>(anon);
}

#import std.string
template<typename BOUND, typename SEPARATOR, typename... VALUES> auto nonstd::path::filename::mount::operator/(Joinering<SEPARATOR, VALUES...> const &spec, BOUND &&anon) -> BOUND && {
  using ancestor_type = typename Joinering<SEPARATOR, VALUES...>::ancestor;
  std::string more;
  more += spec.value;
  detail::add_remaining(more, static_cast<ancestor_type const &>(spec));
  return more / std::forward<BOUND>(anon);
}

template<typename SEPARATOR, typename... VALUES> auto nonstd::path::filename::mount::operator*(Unbound &&, Joinering<SEPARATOR, VALUES...> const &spec) -> Value {
  using ancestor_type = typename Joinering<SEPARATOR, VALUES...>::ancestor;
  std::string more;
  more += spec.value;
  detail::add_remaining(more, static_cast<ancestor_type const &>(spec));
  return Value(more);
}

template<typename SEPARATOR> auto nonstd::path::filename::mount::detail::add_remaining(std::string &, Joinering<SEPARATOR> const &) -> void {
  // nothing more to do
}

template<typename SEPARATOR, typename... VALUES> auto nonstd::path::filename::mount::detail::add_remaining(std::string &fill, Joinering<SEPARATOR, VALUES...> const &spec) -> void {
  using ancestor_type = typename Joinering<SEPARATOR, VALUES...>::ancestor;
  fill += spec.separator;
  fill += spec.value;
  add_remaining(fill, static_cast<ancestor_type const &>(spec));
}
#endiv

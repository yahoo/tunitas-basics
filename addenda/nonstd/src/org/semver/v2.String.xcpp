// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import org.semver.v2 // get the inline sense
namespace org::semver::v2 {
  //
  // See https://semver.org
  //
  // The version string can have zero to UNBOUNDED elements; but should have three.
  // But more restricted here, integers are restricted to 0..255 by std::uint8_t
  // And the printed representation always leads with a 'v' as do perl vstrings
  //
  // Usage:
  //
  //   auto t = org::semver::String{};             a.k.a. v0      (in printed form only [[FIXTHIS, WANTTHIS?]])
  //   auto t = org::semver::String{1};            a.k.a. v1
  //   auto t = org::semver::String{1,2};          a.k.a. v1.2
  //   auto t = org::semver::String{1,2,3};        a.k.a. v1.2.3
  //   auto t = org::semver::String{1,2,3,4};      a.k.a. v1.2.3.4
  //   auto t = org::semver::String{1,2,3,4,5};    a.k.a. v1.2.3.4.5
  //   auto t = org::semver::String{1,2,3,4,5,6};  a.k.a. v1.2.3.4.5.6
  //
  class String;
}
#endiv
#divert <hpp>
#import std.basic_ostream
#import nonstd.required.Character
#import nonstd.required.Character_Traits
#import nonstd.required.Basic_String
namespace org::semver::v2 {
  template<nonstd::required::Character CHAR, nonstd::required::Character_Traits TRAITS> inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, String const &) -> std::basic_ostream<CHAR, TRAITS> &;
  inline auto to_string(String const &) -> std::string;
  template<nonstd::required::Basic_String STRING> inline auto to_string(String const &t) -> STRING;
  inline auto operator==(String const &, String const &) -> bool;
  inline auto operator!=(String const &, String const &) -> bool;
  inline auto operator<(String const &, String const &) -> bool;
  inline auto operator<=(String const &, String const &) -> bool;
  inline auto operator>(String const &, String const &) -> bool;
  inline auto operator>=(String const &, String const &) -> bool;
}
#import std.to_string
namespace std {
  using org::semver::v2::to_string;
}
#import std.vector
#import std.uint8_t
#import org.semver.v2.Triple
class org::semver::v2::String : public std::vector<std::uint8_t> {
  using ancestor = std::vector<std::uint8_t>;
public:
  String() = default;
  using ancestor::vector;
  inline String(Triple const &);
  // throws std::invalid_argument if there are more than three elements in *this
  inline operator Triple() const;
};
#endiv
#divert <ipp>
template<nonstd::required::Character CHAR, nonstd::required::Character_Traits TRAITS> auto org::semver::v2::operator<<(std::basic_ostream<CHAR, TRAITS> &o, String const &v) -> std::basic_ostream<CHAR, TRAITS> & {
  char sep = 'v';
 if (v.empty()) {
   o << o.widen(sep) << 0u; // [[WANTTHIS?]] - this creates a printed representation that is not in the data
  } else {
    for (auto u : v) {
      o << o.widen(sep) << (unsigned)u;
      sep = '.';
    }
  }
  return o;
}
#import std.ostringstream
auto org::semver::v2::to_string(String const &s) -> std::string {
  std::ostringstream buf;
  buf << s;
  return buf.str();
}
#import std.basic_ostringstream
template<nonstd::required::Basic_String STRING> auto org::semver::v2::to_string(String const &s) -> STRING {
  using Stream = std::basic_ostringstream<typename STRING::value_type, typename STRING::traits_type>;
  Stream buf;
  buf << s;
  return buf.str();
}
#import std.equal
auto org::semver::v2::operator==(String const &a, String const &b) -> bool {
  return std::equal(a.begin(), a.end(), b.begin(), b.end());
}
auto org::semver::v2::operator!=(String const &a, String const &b) -> bool {
  return ! operator==(a, b);
}
#import std.lexicographical_compare
auto org::semver::v2::operator<(String const &a, String const &b) -> bool {
  return std::lexicographical_compare(a.begin(), a.end(), b.begin(), b.end());
}
#import std.distance
auto org::semver::v2::operator<=(String const &a, String const &b) -> bool {
  // avoid making two passes over the strings
  bool is_equal = true;
  auto lt_eq = [&is_equal](String::value_type a, String::value_type b) {
    is_equal &= (a == b);
    return a < b; // <--- never use operator<= here
  };
  return (std::lexicographical_compare(a.begin(), a.end(), b.begin(), b.end(), lt_eq) ||
          (is_equal && std::distance(a.begin(), a.end()) == std::distance(b.begin(), b.end())));
}
auto org::semver::v2::operator>(String const &a, String const &b) -> bool {
  return operator<(b, a);
}
auto org::semver::v2::operator>=(String const &a, String const &b) -> bool {
  // 5 >= 3
  // 3 <= 5
  return operator<=(b, a);
}
org::semver::v2::String::String(Triple const &other)
  : ancestor{other.begin(), other.end()}
{ }
#import std.invalid_argument
org::semver::v2::String::operator Triple() const {
  if (this->size() > 3) {
    throw std::invalid_argument{"triple"};
  }
  // There can be three, two, one or zero items
  Triple ret;
  auto back{0u};
  for (auto item : *this) {
    ret[back++] = item;
  }
  return ret;
}
#endiv

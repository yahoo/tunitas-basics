// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import org.semver.v1
namespace org::semver::v1 {
  //
  // See https://semver.org
  //
  // The version string must have exactly three elements.
  // But more restricted here, integers are restricted to 0..255 by std::uint8_t
  // And the printed representation always leads with a 'v' as do perl vstrings
  //
  class String;
}
#endiv
#divert <hpp>
#import std.ostream
namespace org::semver::v1 {
  inline auto operator<<(std::ostream &, String const &) -> std::ostream &;

  inline auto operator==(String const &, String const &) -> bool;
  inline auto operator!=(String const &, String const &) -> bool;

  inline auto operator<(String const &, String const &) -> bool;
  inline auto operator<=(String const &, String const &) -> bool;
  inline auto operator>(String const &, String const &) -> bool;
  inline auto operator>=(String const &, String const &) -> bool;
}

#import std.array
#import std.uint8_t
class org::semver::v1::String : public std::array<std::uint8_t, 3> {
  using ancestor = std::array<std::uint8_t, 3>;
public:
  inline String();
  inline String(value_type major, value_type minor, value_type patch);
  // ANNOYING ANNOYING ANNOYING the extra 'e' is because there is a #define major(...) and #define minor(...)
  //                            via <sys/types.h> and in <sys/sysmacros.h>
  // accessors
  inline auto majore() const -> value_type;
  inline auto minore() const -> value_type;
  inline auto patche() const -> value_type;
  // setters ... are rarely used, so just use operator[](std::size_t) on 0, 1, 2
  inline auto clear() -> void;
};
#endiv
#divert <ipp>
#import std.equal
#import std.lexicographical_compare
auto org::semver::v1::operator<<(std::ostream &o, String const &v) -> std::ostream & {
  char sep = 'v';
 if (v.empty()) {
   o << sep << '0';
  } else {
    for (auto i : v) {
      o << sep << (int)i;
      sep = '.';
    }
  }
  return o;
}
auto org::semver::v1::operator==(String const &a, String const &b) -> bool {
  return std::equal(a.begin(), a.end(), b.begin(), b.end());
}
auto org::semver::v1::operator!=(String const &a, String const &b) -> bool {
  return ! operator==(a, b);
}
auto org::semver::v1::operator<(String const &a, String const &b) -> bool {
  return std::lexicographical_compare(a.begin(), a.end(), b.begin(), b.end());
}
#import std.distance
auto org::semver::v1::operator<=(String const &a, String const &b) -> bool {
  // avoid making two passes over the strings
  bool is_equal = true;
  auto lt_eq = [&is_equal](String::value_type a, String::value_type b) {
    is_equal &= (a == b);
    return a < b; // <--- never use operator<= here
  };
  return std::lexicographical_compare(a.begin(), a.end(), b.begin(), b.end(), lt_eq) ||
    (is_equal && std::distance(a.begin(), a.end()) == std::distance(b.begin(), b.end()));
}
auto org::semver::v1::operator>(String const &a, String const &b) -> bool {
  return operator<(b, a);
}
auto org::semver::v1::operator>=(String const &a, String const &b) -> bool {
  // 5.4.3 >= 3.2.1
  // 3.2.1 <= 5.4.3
  return operator<=(b, a);
}
org::semver::v1::String::String()
  : String(0, 0, 0) {
  ;
}
org::semver::v1::String::String(value_type major, value_type minor, value_type patch)
  : ancestor() {
  ancestor &self(*this);
  self[0] = major;
  self[1] = minor;
  self[2] = patch;
}
auto org::semver::v1::String::majore() const -> value_type {
  return operator[](0);
}
auto org::semver::v1::String::minore() const -> value_type {
  return operator[](1);
}
auto org::semver::v1::String::patche() const -> value_type {
  return operator[](2);
}
auto org::semver::v1::String::clear() -> void {
  *this = String();
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd
namespace tests::unit::nonstd::move {
  namespace fixture {
    class Fixture;
    namespace library = ::nonstd;
  }
  using fixture::Fixture;
}
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
struct tests::unit::nonstd::move::fixture::Fixture : public cppunit::test::Fixture {
  auto test_alias() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <ipp>
#import nonstd.move
namespace tests::unit::nonstd::move::fixture {
  using library::move;
}
#endiv
#divert <cpp>
#import tests.unit.nonstd.move.Thing
#import rigging.suite.io
namespace tests::unit::nonstd::move::fixture {
  auto Fixture::test_alias() -> void {
    // Whereas this is an alias for std::move, we do not spend a lot of time testing that std::move "works as advertised"
    auto uu = move(nonstd::move::Thing{3}); // <--------------------------------------- test this (a move from a <strike>xhs</strike> prvalue)
    CPPUNIT_ASSERT_EQUAL(3, uu.i);
    CPPUNIT_ASSERT_EQUAL("3"s, uu.syntax);
  }
  auto Fixture::suite() -> cppunit::Test * {
    using namespace ::rigging::suite;
    auto series = Stream{"move"};
    series << call("alias", &Fixture::test_alias)
           << END;
    return finalize(series);
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd
namespace tests::unit::nonstd::lock {
  namespace fixture {
    class Fixture;
    namespace library = ::nonstd;
  }
  using fixture::Fixture;
}
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
struct tests::unit::nonstd::lock::fixture::Fixture : public cppunit::test::Fixture {
  auto test_unique_guard() -> void;
  auto test_shared_guard() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import nonstd.lock_guard
#import nonstd.shared_lock_guard
#import std.mutex
#import std.shared_mutex
namespace tests::unit::nonstd::lock::fixture {
  auto Fixture::test_unique_guard() -> void {
    auto m = std::mutex{};
    using Subject = library::lock_guard<std::mutex>;
    auto guard = Subject{m};
    CPPUNIT_ASSERT(sizeof (guard));
  }
  auto Fixture::test_shared_guard() -> void {
    auto sm = std::shared_mutex{};
    using Subject = library::shared_lock_guard<std::shared_mutex>;
    auto guard = Subject{sm};
    CPPUNIT_ASSERT(sizeof (guard));
  }
}
#import rigging.suite.io
auto tests::unit::nonstd::lock::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  auto series = Stream{"lock"};
  series << []() {
              auto guard = Stream{"guard"};
              guard << call("unique", &Fixture::test_unique_guard)
                     << call("shared", &Fixture::test_shared_guard)
                     << END;
              return guard;
            }()
         << END;
  return finalize(series);
}
#endiv

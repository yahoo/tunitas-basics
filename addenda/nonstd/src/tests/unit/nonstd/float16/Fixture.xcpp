// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::nonstd::float16 {
  class Fixture;
}
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
#import nonstd.float16_t
#import tests.unit.nonstd.float16.Palette
class tests::unit::nonstd::float16::Fixture : public cppunit::test::Fixture, Palette {
public:
  using Subject = ::nonstd::float16_t;
  
  auto test_constructor_default() -> void;
  auto test_constructor_convert() -> void;

  auto test_half_cast() -> void;

  auto test_literals_integral() -> void;
  auto test_literals_floating() -> void;

  auto test_operator_eq() -> void;
  auto test_operator_ne() -> void;
  auto test_operator_lt() -> void;
  auto test_operator_le() -> void;
  auto test_operator_gt() -> void;
  auto test_operator_ge() -> void;

  auto test_operator_pos() -> void;
  auto test_operator_neg() -> void;

  auto test_operator_add() -> void;
  auto test_operator_sub() -> void;
  auto test_operator_mul() -> void;
  auto test_operator_div() -> void;

  auto test_operator_insert() -> void;
  auto test_operator_extract() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import nonstd.floats
auto tests::unit::nonstd::float16::Fixture::test_constructor_default() -> void {
  Subject subject;
  CPPUNIT_ASSERT_DOUBLES_EQUAL(0.0, subject, EPSILON);
}
auto tests::unit::nonstd::float16::Fixture::test_constructor_convert() -> void {
  Subject subject(1.0);
  CPPUNIT_ASSERT_DOUBLES_EQUAL(1.0, subject, SMIDGEN);
}
#import nonstd.floats
#import nonstd.float16.half_cast
auto tests::unit::nonstd::float16::Fixture::test_half_cast() -> void {
  using namespace ::nonstd::floats;
  using ::nonstd::float16::half_cast;
  Subject subject(1.0);
  auto f1 = half_cast<float16_t>(subject);
  auto f2 = half_cast<float32_t>(subject);
  auto f4 = half_cast<float64_t>(subject);
  CPPUNIT_ASSERT_DOUBLES_EQUAL(1.0, f1, SMIDGEN);
  CPPUNIT_ASSERT_DOUBLES_EQUAL(1.0, f2, DELTA);
  CPPUNIT_ASSERT_DOUBLES_EQUAL(1.0, f4, EPSILON);
}
#import nonstd.float16.literals
auto tests::unit::nonstd::float16::Fixture::test_literals_integral() -> void {
  using namespace ::nonstd::float16::literals;
#if 0 // there is no integer version of operator""_h
  // no decimal points, not floating literals
  auto v1 = 12_h;
  auto v2 = 123_h;
  auto v3 = 1234_h;
  auto v4 = 12345_h;
  auto v5 = 123456_h;
#else
  // operator""_h only operates upon floating literals
  auto v1 = 0.12_h;
  auto v2 = 0.123_h;
  auto v3 = 0.1234_h;
  auto v4 = 0.12345_h;
  auto v5 = 0.123456_h;
#endif
  auto all = v1 + v2 + v3 + v4 + v5;
  CPPUNIT_ASSERT(0 < all);
}
auto tests::unit::nonstd::float16::Fixture::test_literals_floating() -> void {
  using namespace ::nonstd::float16::literals;
  // yes decimal points, yes floating literals
  auto v1 = 1.2_h;
  auto v2 = 12.3_h;
  auto v3 = 123.4_h;
  auto v4 = 1234.5_h;
  auto v5 = 12345.6_h;
  auto all = v1 + v2 + v3 + v4 + v5;
  CPPUNIT_ASSERT(0 < all);
}
auto tests::unit::nonstd::float16::Fixture::test_operator_eq() -> void {
  Subject s0(0.0), s1(1);
  CPPUNIT_ASSERT(s0 == s0);
  CPPUNIT_ASSERT(! (s0 == s1) );
}
auto tests::unit::nonstd::float16::Fixture::test_operator_ne() -> void {
  Subject s0(0.0), s1(1);
  CPPUNIT_ASSERT(s0 != s1);
  CPPUNIT_ASSERT(! (s0 != s0) );
}
auto tests::unit::nonstd::float16::Fixture::test_operator_lt() -> void {
  Subject s0(0.0), s1(1);
  CPPUNIT_ASSERT(s0 < s1);
  CPPUNIT_ASSERT(! (s1 < s0) );
  CPPUNIT_ASSERT(! (s0 < s0) );
}
auto tests::unit::nonstd::float16::Fixture::test_operator_le() -> void {
  Subject s0(0.0), s1(1);
  CPPUNIT_ASSERT(s0 <= s1);
  CPPUNIT_ASSERT(! (s1 <= s0) );
  CPPUNIT_ASSERT(s0 <= s0);
}
auto tests::unit::nonstd::float16::Fixture::test_operator_gt() -> void {
  Subject s0(0.0), s1(1);
  CPPUNIT_ASSERT(s1 > s0);
  CPPUNIT_ASSERT(! (s0 > s1) );
  CPPUNIT_ASSERT(! (s0 > s0) );
}
auto tests::unit::nonstd::float16::Fixture::test_operator_ge() -> void {
  Subject s0(0.0), s1(1);
  CPPUNIT_ASSERT(s1 >= s0);
  CPPUNIT_ASSERT(! (s0 >= s1) );
  CPPUNIT_ASSERT(s0 >= s0);
}
auto tests::unit::nonstd::float16::Fixture::test_operator_pos() -> void {
  Subject m1(-1), z0(0.0), p1(1);
  auto pm1 = +m1;
  CPPUNIT_ASSERT(pm1 == p1);
  auto pz0 = +z0;
  CPPUNIT_ASSERT(pz0 == z0);
  auto pp1 = +p1;
  CPPUNIT_ASSERT(pp1 == p1);
}
auto tests::unit::nonstd::float16::Fixture::test_operator_neg() -> void {
  Subject m1(-1), z0(0.0), p1(1);
  auto mm1 = -m1;
  CPPUNIT_ASSERT(mm1 == p1);
  auto mz0 = -z0;
  CPPUNIT_ASSERT(mz0 == z0);
  auto mp1 = -p1;
  CPPUNIT_ASSERT(mp1 == m1);
}
auto tests::unit::nonstd::float16::Fixture::test_operator_add() -> void {
  using namespace ::nonstd::float16::literals;
  Subject a = 1._h;
  Subject b = 2._h;
  auto const actual = a + b;
  auto const expected = Subject(3);
  CPPUNIT_ASSERT_DOUBLES_EQUAL(expected, actual, SMIDGEN);
}
auto tests::unit::nonstd::float16::Fixture::test_operator_sub() -> void {
  using namespace ::nonstd::float16::literals;
  Subject a = 1.0_h, b = 2.0_h;
  auto const actual = b - a;
  auto const expected = Subject(1._h);
  CPPUNIT_ASSERT_DOUBLES_EQUAL(expected, actual, SMIDGEN);
}
auto tests::unit::nonstd::float16::Fixture::test_operator_mul() -> void {
  using namespace ::nonstd::float16::literals;
  Subject a = 2.0_h, b = 3.0_h;
  auto const actual = a * b;
  auto const expected = Subject(6);
  CPPUNIT_ASSERT_DOUBLES_EQUAL(expected, actual, SMIDGEN);
}
auto tests::unit::nonstd::float16::Fixture::test_operator_div() -> void {
  using namespace ::nonstd::float16::literals;
  Subject a = 6._h, b = 3._h;
  auto const actual = a / b;
  auto const expected = Subject(2);
  CPPUNIT_ASSERT_DOUBLES_EQUAL(expected, actual, SMIDGEN);
}
#import std.ostringstream
auto tests::unit::nonstd::float16::Fixture::test_operator_insert() -> void {
  using namespace ::nonstd::float16::literals;
  Subject a(1.2), b(3.45);
  std::ostringstream buf;
  buf << a << ' ' << b;
  std::string const actual = buf.str();
  std::string const expected = "1.19922 3.44922";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::nonstd::float16::Fixture::test_operator_extract() -> void {
  std::string const specimen{"1.2 3.45"};
  std::istringstream buf(specimen);
  Subject a, b;
  auto ok = bool(buf >> a >> b);
  CPPUNIT_ASSERT(ok);
  CPPUNIT_ASSERT_DOUBLES_EQUAL(1.2, a, SMIDGEN);
  CPPUNIT_ASSERT_DOUBLES_EQUAL(3.45, b, SMIDGEN);
}
#import rigging.unit.suite.Stream
#import rigging.unit.suite.add
#import rigging.unit.suite.call
auto tests::unit::nonstd::float16::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::unit::suite;
  Stream series("float16");
  {
    Stream co("constructor");
    co << call("default", &Fixture::test_constructor_default)
       << call("convert", &Fixture::test_constructor_convert)
      ;
    series << add(std::move(co));
  }
  series << call("half_cast", &Fixture::test_half_cast);
  {
    Stream li("literals");
    li << call("integral", &Fixture::test_literals_integral)
       << call("floating", &Fixture::test_literals_floating)
      ;
    series << add(std::move(li));
  } {
    Stream co("compare");
    co << call("operator==", &Fixture::test_operator_eq)
       << call("operator!=", &Fixture::test_operator_ne)
       << call("operator<", &Fixture::test_operator_lt)
       << call("operator<=", &Fixture::test_operator_le)
       << call("operator>", &Fixture::test_operator_gt)
       << call("operator>=", &Fixture::test_operator_ge)
      ;
    series << add(std::move(co));
  } {
    Stream ar("arithmetic");
    {
      Stream un("unary");
      un << call("operator+", &Fixture::test_operator_pos)
         << call("operator-", &Fixture::test_operator_neg)
        ;
      ar << add(std::move(un));
    } {
      Stream bi("binary");
      bi << call("operator+", &Fixture::test_operator_add)
         << call("operator-", &Fixture::test_operator_sub)
         << call("operator*", &Fixture::test_operator_mul)
         << call("operator/", &Fixture::test_operator_div)
        ;
      ar << add(std::move(bi));
    }
  } {
    Stream io("io");
    io << call("operator<<", &Fixture::test_operator_insert)
       << call("operator>>", &Fixture::test_operator_extract)
      ;
    series << add(std::move(io));
  }
  return finalize(series);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::nonstd::int128 {
  class Fixture;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::nonstd::int128::Fixture : public ::cppunit::test::Fixture {
public:
  auto test_addition_2() -> void;
  auto test_addition_200u() -> void;
  auto test_subtraction_2() -> void;
  auto test_subtraction_200u() -> void;

  auto test_is_integral() -> void;
  auto test_is_signed() -> void;
  auto test_is_unsigned() -> void;
  
  static auto suite() -> ::cppunit::Test *;
};
#endiv
#divert <cpp>
#import nonstd.int128_t
#import nonstd.uint128_t
auto tests::unit::nonstd::int128::Fixture::test_addition_2() -> void {
  auto const one = ::nonstd::int128_t(1);
  auto const two = ::nonstd::int128_t(2);
  CPPUNIT_ASSERT(two == one + one);
}
auto tests::unit::nonstd::int128::Fixture::test_addition_200u() -> void {
  auto const one_hundred = ::nonstd::uint128_t(100u);
  auto const two_hundred = ::nonstd::uint128_t(200u);
  CPPUNIT_ASSERT(two_hundred == one_hundred + one_hundred);
}
auto tests::unit::nonstd::int128::Fixture::test_subtraction_2() -> void {
  auto const four = ::nonstd::int128_t(4);
  auto const two = ::nonstd::int128_t(2);
  CPPUNIT_ASSERT(two == four - two);
}
auto tests::unit::nonstd::int128::Fixture::test_subtraction_200u() -> void {
  auto const four_hundred = ::nonstd::uint128_t(400u);
  auto const two_hundred = ::nonstd::uint128_t(200u);
  CPPUNIT_ASSERT(two_hundred == four_hundred - two_hundred);
}
#import nonstd.is_integral
auto tests::unit::nonstd::int128::Fixture::test_is_integral() -> void {
  using ::nonstd::is_integral;
  static_assert(is_integral<std::int8_t>::value);
  static_assert(is_integral<std::uint8_t>::value);
  static_assert(is_integral<std::int16_t>::value);
  static_assert(is_integral<std::uint16_t>::value);
  static_assert(is_integral<std::int32_t>::value);
  static_assert(is_integral<std::uint32_t>::value);
  static_assert(is_integral<std::int64_t>::value);
  static_assert(is_integral<std::uint64_t>::value);
  static_assert(is_integral<::nonstd::int128_t>::value);
  static_assert(is_integral<::nonstd::uint128_t>::value);
}
#import nonstd.is_signed
auto tests::unit::nonstd::int128::Fixture::test_is_signed() -> void {
  using ::nonstd::is_signed;
  static_assert(is_signed<std::int8_t>::value);
  static_assert(!is_signed<std::uint8_t>::value);
  static_assert(is_signed<std::int16_t>::value);
  static_assert(!is_signed<std::uint16_t>::value);
  static_assert(is_signed<std::int32_t>::value);
  static_assert(!is_signed<std::uint32_t>::value);
  static_assert(is_signed<std::int64_t>::value);
  static_assert(!is_signed<std::uint64_t>::value);
  static_assert(is_signed<::nonstd::int128_t>::value);
  static_assert(!is_signed<::nonstd::uint128_t>::value);
}
#import nonstd.is_unsigned
auto tests::unit::nonstd::int128::Fixture::test_is_unsigned() -> void {
  using ::nonstd::is_unsigned;
  static_assert(!is_unsigned<std::int8_t>::value);
  static_assert(is_unsigned<std::uint8_t>::value);
  static_assert(!is_unsigned<std::int16_t>::value);
  static_assert(is_unsigned<std::uint16_t>::value);
  static_assert(!is_unsigned<std::int32_t>::value);
  static_assert(is_unsigned<std::uint32_t>::value);
  static_assert(!is_unsigned<std::int64_t>::value);
  static_assert(is_unsigned<std::uint64_t>::value);
  static_assert(!is_unsigned<::nonstd::int128_t>::value);
  static_assert(is_unsigned<::nonstd::uint128_t>::value);
}
#import tests.unit.nonstd.int128.Integer
#import tests.unit.nonstd.int128.Traits
#import tests.unit.nonstd.int128.Fixture
#import rigging.suite.io
auto tests::unit::nonstd::int128::Fixture::suite() -> ::cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("int128");
  {
    Stream ad("addition");
    ad << call("2", &Fixture::test_addition_2)
       << call("200", &Fixture::test_addition_200u)
      ;
    series << add(std::move(ad));
  } {
    Stream su("subtraction");
    su << call("2", &Fixture::test_subtraction_2)
       << call("200", &Fixture::test_subtraction_200u)
      ;
    series << add(std::move(su));
  }
  {
    Stream tr("traits");
    {
      Stream is("is");
      is << call("integral", &Fixture::test_is_integral)
         << call("signed", &Fixture::test_is_signed)
         << call("unsigned", &Fixture::test_is_unsigned)
        ;
      tr << add(std::move(is));
    }
    series << add(std::move(tr));
  }
  series << add<Integer<Traits<::nonstd::int128_t, std::int64_t>>>()
         << add<Integer<Traits<::nonstd::uint128_t, std::uint64_t>>>()
    ;
  return finalize(series);
}
#endiv

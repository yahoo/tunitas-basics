// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd
namespace tests::unit::nonstd::copy {
  namespace fixture {
    class Fixture;
    namespace library = ::nonstd;
    namespace specimen = tests::unit::nonstd::copy;
  }
  using fixture::Fixture;
}
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
struct tests::unit::nonstd::copy::fixture::Fixture : public cppunit::test::Fixture {
  auto test_lvalue() -> void;
  auto test_rvalue() -> void;
  auto test_prvalue() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <ipp>
#import nonstd.copy
namespace tests::unit::nonstd::copy::fixture {
  using library::copy;
}
#endiv
#divert <cpp>
#import tests.unit.nonstd.copy.Thing
#import rigging.suite.io
namespace tests::unit::nonstd::copy::fixture {
  auto Fixture::test_lvalue() -> void {
    auto tt = specimen::Thing{2}; // <----------- mutable (a lvalue)
    tt.i = 3;
    tt.syntax = "3"s;
    auto uu = copy(tt); // <----------------- test this
    tt.i = 4;
    CPPUNIT_ASSERT_EQUAL(3, uu.i);
    CPPUNIT_ASSERT_EQUAL("3"s, uu.syntax);
    CPPUNIT_ASSERT_EQUAL(4, tt.i);
    CPPUNIT_ASSERT_EQUAL("3"s, tt.syntax);
  }
  auto Fixture::test_rvalue() -> void {
    auto const tt = specimen::Thing{3}; // <------ const (a rvalue)
    auto uu = copy(tt); // <----------------- test this
    CPPUNIT_ASSERT_EQUAL(3, uu.i);
    CPPUNIT_ASSERT_EQUAL("3"s, uu.syntax);
    CPPUNIT_ASSERT_EQUAL("3"s, tt.syntax);
  }
  auto Fixture::test_prvalue() -> void {
    auto uu = copy(specimen::Thing{3}); // <--------------------- test this (n prvalue ... expiring)
    CPPUNIT_ASSERT_EQUAL(3, uu.i);
    CPPUNIT_ASSERT_EQUAL("3"s, uu.syntax);
  }
  auto Fixture::suite() -> cppunit::Test * {
    using namespace ::rigging::suite;
    auto series = Stream{"copy"};
    series << call("lvalue", &Fixture::test_lvalue)
           << call("rvalue", &Fixture::test_rvalue)
           << call("prvalue", &Fixture::test_prvalue)
           << END;
    return finalize(series);
  }
}
#endiv

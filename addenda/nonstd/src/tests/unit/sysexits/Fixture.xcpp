// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::sysexits { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import nonstd.sysexits.Code
#import std.numeric_limits
class tests::unit::sysexits::Fixture : public cppunit::test::Fixture { 
public:
  using Subject = ::nonstd::sysexits::Code;
  inline static constexpr auto MIN = std::numeric_limits<Subject::Value>::min();
  inline static constexpr auto MAX = std::numeric_limits<Subject::Value>::max();
  auto test_constants() -> void;
  auto test_predicates() -> void;
  auto test_output_zero() -> void;
  auto test_output_all() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import nonstd.sysexits
#import nonstd.sysexits.Code
#import nonstd.sysexits.constants
auto tests::unit::sysexits::Fixture::test_constants() -> void {
  using namespace ::nonstd::sysexits::constants;
  CPPUNIT_ASSERT(Subject(0) == OK);
  CPPUNIT_ASSERT(Subject(1) == FAIL);
}
auto tests::unit::sysexits::Fixture::test_predicates() -> void {
  using namespace ::nonstd::sysexits;
  CPPUNIT_ASSERT(ok(OK));
  CPPUNIT_ASSERT(failure(FAIL));
}
#import std.ostringstream
auto tests::unit::sysexits::Fixture::test_output_zero() -> void {
  std::ostringstream buf;
  Subject ex;
  buf << ex;
  std::string recovered(buf.str());
  CPPUNIT_ASSERT("exit 0" == recovered);
}
#import std.ostream
#import std.clog
auto tests::unit::sysexits::Fixture::test_output_all() -> void {
  std::ostream &out(std::clog);
  char const *sep = "all possible exit codes: ";
  for (unsigned i{MIN}, e{MAX}; i != e; ++i) {
    std::ostringstream buf;
    Subject ex(i);
    buf << ex;
    out << sep << buf.str();
    sep = ", ";
  }
  out << ".\n";
}
#import tests.unit.sysexits.Code
#import rigging.suite.io
auto tests::unit::sysexits::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("sysexits");
  series << call("constants", &Fixture::test_constants)
         << call("predicates", &Fixture::test_predicates)
    ;
  {
    Stream out("output");
    out << call("zero", &Fixture::test_output_zero)
        << call("all", &Fixture::test_output_all)
      ;
    series << add(std::move(out));
  }
  series << add<Code>()
    ;
  return finalize(series);
}
#endiv

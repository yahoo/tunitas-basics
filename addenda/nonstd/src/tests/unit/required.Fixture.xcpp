// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd.required
namespace tests::unit::required {
  namespace [[eponymous]] fixture {
    class Fixture;
    namespace library = ::nonstd::required;
  }
  using fixture::Fixture;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
struct tests::unit::required::fixture::Fixture : public cppunit::test::Fixture {
  //
  // Most of the tests for the concepts are in the <cpp> of the concept files themselves.
  // But the unit tests are here to belabor the point and to ensure and require.
  //
  auto test_Allocator() -> void;
  auto test_Basic_String() -> void;
  auto test_Basic_String_View() -> void;
  auto test_Character() -> void;
  auto test_Character_Traits() -> void;
  auto test_character_Type() -> void;
  auto test_character_Traits() -> void;
  auto test_Compare_To_Nullptr() -> void;
  auto test_Container() -> void;
  auto test_container_Type() -> void;
  auto test_container_Basic() -> void;
  auto test_container_Holding() -> void;
  auto test_container_Input() -> void;
  auto test_container_Forward() -> void;
  auto test_container_Bidirectional() -> void;
  auto test_container_Undirected() -> void;
  auto test_container_Random_Access() -> void;
  auto test_container_Contiguous() -> void;
  auto test_container_Push_Back() -> void;
  auto test_container_Push_Front() -> void;
  auto test_Convertible() -> void;
  auto test_Copyable() -> void;
  auto test_Copy_Constructible() -> void;
  auto test_Copy_Assignable() -> void;
  auto test_Default_Constructible() -> void;
  auto test_Dopelike() -> void;
  auto test_Exception() -> void;
  auto test_iterator_Basis() -> void;
  auto test_iterator_Input() -> void;
  auto test_iterator_Output() -> void;
  auto test_iterator_Forward() -> void;
  auto test_iterator_Bidirectional() -> void;
  auto test_iterator_Random_Access() -> void;
  auto test_iterator_Undirected() -> void;
  auto test_iterator_Contiguous() -> void;
  auto test_Movable() -> void;
  auto test_Move_Constructible() -> void;
  auto test_Move_Assignable() -> void;
  auto test_Octet() -> void;
  auto test_Outcomable() -> void;
  auto test_Pointer() -> void;
  auto test_Same() -> void;
  auto test_Spanlike() -> void;
  auto test_Spanish() -> void;
  auto test_String() -> void;
  auto test_Stringable() -> void;
  auto test_Stringlike() -> void;
  auto test_Path() -> void;
  auto test_Pathlike() -> void;
  static auto suite() -> cppunit::Test *;
protected:
  struct Specimens;
};
#endiv
#divert <ipp>
namespace tests::unit::required::fixture {
  using namespace library;
}
#endiv
#divert <cpp>
#import tests.unit.required.Fixture.Specimens
#import c.stringz
#import c.const_stringz
#import nonstd.dope
#import nonstd.const_dope
#import std.byte
#import std.char_traits
#import std.deque
#import std.forward_list
#import std.list
#import std.istream_iterator
#import std.logic_error
#import std.ostream_iterator
#import std.out_of_range
#import std.runtime_error
#import std.set
#import std.string
#import std.string_literals
#import std.string_view
#import std.string_view_literals
#import std.vector
using namespace std::literals;
#import nonstd.required.Allocator
#import std.allocator
auto tests::unit::required::fixture::Fixture::test_Allocator() -> void {
  // Testify! - All known std::allocators are Allocators
  static_assert(Allocator<std::allocator<char>>);
  static_assert(Allocator<std::allocator<int>>);
}
#import std.string
#import std.wstring
#import std.string_view
#import std.wstring_view
#import nonstd.required.Basic_String
auto tests::unit::required::fixture::Fixture::test_Basic_String() -> void {
  static_assert(Basic_String<std::string>);
  static_assert(Basic_String<std::wstring>);
  static_assert(!Basic_String<std::string_view>);
  static_assert(!Basic_String<std::wstring_view>);
}
#import nonstd.required.Basic_String_View
auto tests::unit::required::fixture::Fixture::test_Basic_String_View() -> void {
  static_assert(!Basic_String_View<std::string>);
  static_assert(!Basic_String_View<std::wstring>);
  static_assert(Basic_String_View<std::string_view>);
  static_assert(Basic_String_View<std::wstring_view>);
}
#import nonstd.required.Character
auto tests::unit::required::fixture::Fixture::test_Character() -> void {
  // Testify! - All known character types are Characters
  static_assert(Character<char>);
  static_assert(Character<wchar_t>);
  static_assert(Character<char16_t>);
  static_assert(Character<char32_t>);
  static_assert(!Character<int>);
}
#import nonstd.required.Character_Traits
auto tests::unit::required::fixture::Fixture::test_Character_Traits() -> void {
  // Testify! - All known std::char_traits are Character_Traits
  static_assert(Character_Traits<std::char_traits<char>>);
  static_assert(Character_Traits<std::char_traits<wchar_t>>);
  static_assert(Character_Traits<std::char_traits<char16_t>>);
  static_assert(Character_Traits<std::char_traits<char32_t>>);
  static_assert(!Character_Traits<int>);
}
#import nonstd.required.character.Type
auto tests::unit::required::fixture::Fixture::test_character_Type() -> void {
  // Testify! - All known character types are "characters" (cultural glyphs for natural language representation).
  //            a "character" is not a "byte," a std::byte or a nonstd::byte
  //            a "signed character" is basically an integer
  //            a "unsigned character" is basically an integer
  using namespace character;
  static_assert(Type<char>);
  static_assert(Type<wchar_t>);
  static_assert(Type<char16_t>);
  static_assert(Type<char32_t>);
  static_assert(!Type<int>);
}
#import nonstd.required.character.Traits
auto tests::unit::required::fixture::Fixture::test_character_Traits() -> void {
  // Testify! - All known std::char_traits are Traits
  using namespace character;
  static_assert(Traits<std::char_traits<char>, char>);
  static_assert(Traits<std::char_traits<wchar_t>, wchar_t>);
  static_assert(Traits<std::char_traits<char16_t>, char16_t>);
  static_assert(Traits<std::char_traits<char32_t>, char32_t>);
  static_assert(!Traits<int, int>);
}
#import std.byte
#import c.stringz
#import c.const_stringz
#import re.construct.String
#import nonstd.required.Compare_To_Nullptr
auto tests::unit::required::fixture::Fixture::test_Compare_To_Nullptr() -> void {
  // surely
  static_assert(Compare_To_Nullptr<char *, char>);
  static_assert(Compare_To_Nullptr<char const *, char>);
  static_assert(Compare_To_Nullptr<signed char *, char>);
  static_assert(Compare_To_Nullptr<unsigned char const *, char>);
  static_assert(Compare_To_Nullptr<std::byte *, char>);
  static_assert(Compare_To_Nullptr<std::byte const *, char>);
  static_assert(Compare_To_Nullptr<wchar_t const *, wchar_t>);
  static_assert(Compare_To_Nullptr<char16_t const *, char16_t>);
  static_assert(Compare_To_Nullptr<char32_t const *, char32_t>);
  // yes, because such is designed into the "restring" interface explicitly
  static_assert(Compare_To_Nullptr<::re::construct::String<c::const_stringz>, char>);
  static_assert(Compare_To_Nullptr<::re::construct::String<std::string>, char>);
  // yes, surprisingly there is an operator-cast to character pointer in addition to the data+size dope vector interface;
  //      as c::detail::specification::Prototype<...>::operator const_data_type() const
  static_assert(Compare_To_Nullptr<::c::const_stringz, char>);
  static_assert(Compare_To_Nullptr<::c::stringz, char>);
  // no, of course not
  static_assert(!Compare_To_Nullptr<std::string, char>);
  static_assert(!Compare_To_Nullptr<std::string_view, char>);
  struct Thing { };
  static_assert(!Compare_To_Nullptr<Thing, int>);
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wint-to-pointer-cast"
  // See https://gcc.gnu.org/onlinedocs/gcc/Diagnostic-Pragmas.html
  // But surprisingly (think about it)
  // Shut. Up.
  //   src/tests/unit/required.Fixture.xcpp:134:17: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
  static_assert(Compare_To_Nullptr<int, int>);
#pragma GCC diagnostic pop
}
#import nonstd.required.Container
auto tests::unit::required::fixture::Fixture::test_Container() -> void {
  static_assert(Container<std::vector<char>>);
  static_assert(Container<std::set<char>>);
  static_assert(Container<std::string>);
  static_assert(Container<::c::stringz>);
  static_assert(!Container<int>);
}
#import nonstd.required.container.Type
auto tests::unit::required::fixture::Fixture::test_container_Type() -> void {
  // Same as container::Basic nowadays
  static_assert(container::Type<std::vector<char>>);
  static_assert(container::Type<std::set<char>>);
  static_assert(container::Type<std::string>);
  static_assert(container::Type<::c::stringz>);
  static_assert(!container::Type<int>);
}
#import nonstd.required.container.Basic
auto tests::unit::required::fixture::Fixture::test_container_Basic() -> void {
  static_assert(container::Basic<std::vector<char>>);
  static_assert(container::Basic<std::set<char>>);
  static_assert(container::Basic<std::string>);
  static_assert(container::Basic<::c::stringz>);
  static_assert(!container::Basic<int>);
}
#import nonstd.required.container.Holding
auto tests::unit::required::fixture::Fixture::test_container_Holding() -> void {
  static_assert(container::Holding<std::vector<char>, char>);
  static_assert(!container::Holding<std::vector<char>, unsigned char>);
  static_assert(!container::Holding<std::vector<char>, int>);
  static_assert(container::Holding<std::set<char>, char>);
  static_assert(!container::Holding<std::set<char>, unsigned char>);
  static_assert(!container::Holding<std::set<char>, bool>);
  static_assert(container::Holding<std::string, char>);
  static_assert(!container::Holding<std::string, wchar_t>);
  static_assert(container::Holding<::c::stringz, char>);
  static_assert(!container::Holding<::c::stringz, char const>);
  static_assert(!container::Holding<::c::stringz, bool>);
  static_assert(container::Holding<::c::const_stringz, char>);
  static_assert(!container::Holding<::c::const_stringz, unsigned char>);
  static_assert(!container::Holding<::c::const_stringz, wchar_t>);
  static_assert(!container::Holding<::c::const_stringz, bool>);
  static_assert(!container::Holding<int, int>);
}
#import nonstd.required.container.Input
auto tests::unit::required::fixture::Fixture::test_container_Input() -> void {
  static_assert(container::Input<std::deque<char>>);
  static_assert(container::Input<std::vector<char>>);
  static_assert(container::Input<std::set<char>>);
  static_assert(container::Input<std::string>);
  static_assert(container::Input<std::list<char>>);
  static_assert(container::Input<std::forward_list<char>>);
  static_assert(container::Input<std::string_view>);
  static_assert(container::Input<::c::stringz>);
  static_assert(container::Input<::c::const_stringz>);
  static_assert(not container::Input<int>);
}
#import nonstd.required.container.Forward
auto tests::unit::required::fixture::Fixture::test_container_Forward() -> void {
  static_assert(container::Forward<std::deque<char>>);
  static_assert(container::Forward<std::vector<char>>);
  static_assert(container::Forward<std::set<char>>);
  static_assert(container::Forward<std::string>);
  static_assert(container::Forward<std::list<char>>);
  static_assert(container::Forward<std::forward_list<char>>);
  static_assert(container::Forward<std::string_view>);
  static_assert(container::Forward<::c::stringz>);
  static_assert(container::Forward<::c::const_stringz>);
  static_assert(not container::Forward<int>);
}
#import nonstd.required.container.Bidirectional
auto tests::unit::required::fixture::Fixture::test_container_Bidirectional() -> void {
  static_assert(container::Bidirectional<std::deque<char>>);
  static_assert(container::Bidirectional<std::vector<char>>);
  static_assert(container::Bidirectional<std::set<char>>);
  static_assert(container::Bidirectional<std::string>);
  static_assert(container::Bidirectional<std::list<char>>);
  static_assert(not container::Bidirectional<std::forward_list<char>>);
  static_assert(container::Bidirectional<std::string_view>);
  static_assert(container::Bidirectional<::c::stringz>);
  static_assert(container::Bidirectional<::c::const_stringz>);
  static_assert(not container::Bidirectional<int>);
}
#import nonstd.required.container.Random_Access
auto tests::unit::required::fixture::Fixture::test_container_Random_Access() -> void {
  static_assert(container::Random_Access<std::deque<char>>);
  static_assert(container::Random_Access<std::vector<char>>);
  static_assert(not container::Random_Access<std::set<char>>);
  static_assert(container::Random_Access<std::string>);
  static_assert(not container::Random_Access<std::list<char>>);
  static_assert(not container::Random_Access<std::forward_list<char>>);
  static_assert(container::Random_Access<std::string_view>);
  static_assert(container::Random_Access<::c::stringz>);
  static_assert(container::Random_Access<::c::const_stringz>);
  static_assert(not container::Random_Access<int>);
}
#import nonstd.required.container.Undirected
auto tests::unit::required::fixture::Fixture::test_container_Undirected() -> void {
  static_assert(container::Undirected<std::deque<char>>);
  static_assert(container::Undirected<std::vector<char>>);
  static_assert(not container::Undirected<std::set<char>>);
  static_assert(container::Undirected<std::string>);
  static_assert(not container::Undirected<std::list<char>>);
  static_assert(not container::Undirected<std::forward_list<char>>);
  static_assert(container::Undirected<std::string_view>);
  static_assert(container::Undirected<::c::stringz>);
  static_assert(container::Undirected<::c::const_stringz>);
  static_assert(not container::Undirected<int>);
}
#import nonstd.required.container.Contiguous
auto tests::unit::required::fixture::Fixture::test_container_Contiguous() -> void {
#if 9 < __GNUC__
  static_assert(not container::Contiguous<std::deque<char>>);
  static_assert(container::Contiguous<std::vector<char>>);
  static_assert(not container::Contiguous<std::set<char>>);
  static_assert(container::Contiguous<std::string>);
  static_assert(not container::Contiguous<std::list<char>>);
  static_assert(not container::Contiguous<std::forward_list<char>>);
  static_assert(container::Contiguous<std::string_view>);
  static_assert(container::Contiguous<::c::stringz>);
  static_assert(container::Contiguous<::c::const_stringz>);
  static_assert(not container::Contiguous<int>);
#else
#warning contiguous_iterator_tag is not marked in any iterator_traits<ITERATOR> yet so the test on required::container::Contiguous<CONTAINER> does nothing
#endif
}
#import nonstd.required.container.Push_Back
auto tests::unit::required::Fixture::test_container_Push_Back() -> void {
  using namespace ::nonstd::required;
  static_assert(container::Push_Back<std::deque<char>>);
  static_assert(container::Push_Back<std::vector<char>>);
  static_assert(!container::Push_Back<std::set<char>>);
  static_assert(container::Push_Back<std::string>);
  static_assert(container::Push_Back<std::list<char>>);
  static_assert(!container::Push_Back<std::forward_list<char>>);
  static_assert(!container::Push_Back<std::string_view>);
  static_assert(!container::Push_Back<::c::stringz>);
  static_assert(!container::Push_Back<::c::const_stringz>);
  static_assert(!container::Push_Back<int>);
}
#import nonstd.required.container.Push_Front
auto tests::unit::required::fixture::Fixture::test_container_Push_Front() -> void {
  static_assert(container::Push_Front<std::deque<char>>);
  static_assert(!container::Push_Front<std::vector<char>>);
  static_assert(!container::Push_Front<std::set<char>>);
  static_assert(!container::Push_Front<std::string>);
  static_assert(container::Push_Front<std::list<char>>);
  static_assert(container::Push_Front<std::forward_list<char>>);
  static_assert(!container::Push_Front<std::string_view>);
  static_assert(!container::Push_Front<::c::stringz>);
  static_assert(!container::Push_Front<::c::const_stringz>);
  static_assert(!container::Push_Front<int>);
}
#import nonstd.convertible_to
#import nonstd.required.Convertible
auto tests::unit::required::fixture::Fixture::test_Convertible() -> void {
  using nonstd::convertible_to;
  static_assert(convertible_to<int, long>);
  static_assert(convertible_to<char *, std::string>);
  static_assert(!convertible_to<int, void *>);
  using nonstd::required::Convertible;
  static_assert(Convertible<int, double>);
  static_assert(Convertible<char *, std::string>);
  static_assert(!Convertible<double, void *>);
}
#import nonstd.required.Copyable
auto tests::unit::required::fixture::Fixture::test_Copyable() -> void {
  static_assert(Copyable<std::vector<char>>);
  static_assert(Copyable<std::set<char>>);
  static_assert(Copyable<std::string>);
  static_assert(Copyable<::c::stringz>);
  static_assert(Copyable<std::error_code>);
  static_assert(Copyable<int>);
  static_assert(!Copyable<Specimens::Not_Copy_Constructible>);
}
#import nonstd.required.Copy_Constructible
auto tests::unit::required::fixture::Fixture::test_Copy_Constructible() -> void {
  static_assert(Copy_Constructible<std::vector<char>>);
  static_assert(Copy_Constructible<std::set<char>>);
  static_assert(Copy_Constructible<std::string>);
  static_assert(Copy_Constructible<::c::stringz>);
  static_assert(Copy_Constructible<std::error_code>);
  static_assert(Copy_Constructible<int>);
  static_assert(!Copy_Constructible<Specimens::Not_Copy_Constructible>);
}
#import nonstd.required.Copy_Assignable
auto tests::unit::required::fixture::Fixture::test_Copy_Assignable() -> void {
  static_assert(Copy_Assignable<std::vector<char>>);
  static_assert(Copy_Assignable<std::set<char>>);
  static_assert(Copy_Assignable<std::string>);
  static_assert(Copy_Assignable<::c::stringz>);
  static_assert(Copy_Assignable<std::error_code>);
  static_assert(Copy_Assignable<int>);
  static_assert(!Copy_Assignable<Specimens::Not_Copy_Assignable>);
}
#import nonstd.required.Default_Constructible
auto tests::unit::required::fixture::Fixture::test_Default_Constructible() -> void {
  static_assert(Default_Constructible<std::vector<char>>);
  static_assert(Default_Constructible<std::set<char>>);
  static_assert(Default_Constructible<std::string>);
  static_assert(Default_Constructible<::c::stringz>);
  static_assert(Default_Constructible<std::error_code>);
  static_assert(Default_Constructible<int>);
  static_assert(!Default_Constructible<Specimens::Not_Default_Constructible>);
}
#import nonstd.required.Dopelike
auto tests::unit::required::fixture::Fixture::test_Dopelike() -> void {
  // OK: because they use "new school" types: Value, Data, Size
  static_assert(Dopelike<::nonstd::basic_dope<char>>);
  static_assert(Dopelike<::nonstd::basic_dope<char const>>);
  // BAD: not doplike because they use "old school" types: value_types, <undefined>, size_type
  static_assert(!Dopelike<std::string>);
  static_assert(!Dopelike<std::string_view>);
  static_assert(!Dopelike<std::vector<char>>);
  static_assert(!Dopelike<std::vector<char>>);
  // of course
  static_assert(!Dopelike<int>);
}
#import nonstd.required.Exception
auto tests::unit::required::fixture::Fixture::test_Exception() -> void {
  static_assert(Exception<std::runtime_error>);
  static_assert(Exception<std::logic_error>);
  static_assert(Exception<std::out_of_range>);
  static_assert(!Exception<int>);
}
#import nonstd.required.iterator.Basis
auto tests::unit::required::fixture::Fixture::test_iterator_Basis() -> void {
  using namespace iterator;
  static_assert(Basis<std::forward_list<int>::iterator>);
  static_assert(Basis<std::istream_iterator<char>>);
  static_assert(Basis<std::ostream_iterator<char>>);
  static_assert(Basis<std::deque<char>::iterator>);
  static_assert(Basis<std::string::iterator>);
  static_assert(Basis<std::vector<char>::iterator>);
  static_assert(Basis<std::string::iterator>);
  static_assert(Basis<std::string::const_iterator>);
  static_assert(Basis<char const *>);
  static_assert(Basis<int *>);
  static_assert(!Basis<int>);
  static_assert(!Basis<char>);

}
#import nonstd.required.iterator.Input
auto tests::unit::required::fixture::Fixture::test_iterator_Input() -> void {
  using namespace iterator;
  static_assert(Input<std::istream_iterator<char>>);
  static_assert(!Input<std::ostream_iterator<char>>);
  static_assert(Input<char const *>);
  static_assert(Input<char *>);
  static_assert(!Input<int>);
}
#import nonstd.required.iterator.Output
auto tests::unit::required::fixture::Fixture::test_iterator_Output() -> void {
  using namespace iterator;
#if 0 // [[REMOVEWHEN][
  {
    static_assert(nonstd::required::iterator::Basis<std::istream_iterator<char>>);
    static_assert(sizeof (std::iterator_traits<std::istream_iterator<char>>::iterator_category));
    static_assert(std::is_same_v<std::input_iterator_tag, std::iterator_traits<std::istream_iterator<char>>::iterator_category> ||
                  std::is_base_of_v<std::input_iterator_tag, std::iterator_traits<std::istream_iterator<char>>::iterator_category>);
    static_assert(std::is_same_v<std::output_iterator_tag, std::iterator_traits<std::istream_iterator<char>>::iterator_category> ||
                  std::is_base_of_v<std::output_iterator_tag, std::iterator_traits<std::istream_iterator<char>>::iterator_category>);
    static_assert(nonstd::required::iterator::Basis<std::istream_iterator<char>>);
  }
#endif
  //
  static_assert(!Output<std::istream_iterator<char>, char>);
  static_assert(Output<std::deque<char>::iterator, char>);
  static_assert(Output<std::string::iterator, char>);
  static_assert(Output<std::ostream_iterator<char>, char>);
  static_assert(Output<char *, char>);
  static_assert(!Output<char const *, char>);
  static_assert(!Output<int, int>);
}
#import nonstd.required.iterator.Forward
auto tests::unit::required::fixture::Fixture::test_iterator_Forward() -> void {
  using namespace iterator;
  static_assert(!Forward<std::istream_iterator<char>>);
  static_assert(!Forward<std::ostream_iterator<char>>);
  static_assert(Forward<std::forward_list<int>::iterator>);
  static_assert(Forward<std::deque<char>::iterator>);
  static_assert(Forward<std::string::iterator>);
  static_assert(!Forward<std::ostream_iterator<char>>);
  static_assert(!Forward<int>);
}
#import nonstd.required.iterator.Bidirectional
auto tests::unit::required::fixture::Fixture::test_iterator_Bidirectional() -> void {
  using namespace iterator;
  static_assert(Bidirectional<std::vector<char>::iterator>);
  static_assert(Bidirectional<std::string::const_iterator>);
  static_assert(!Bidirectional<int>);
}
#import nonstd.required.iterator.Random_Access
auto tests::unit::required::fixture::Fixture::test_iterator_Random_Access() -> void {
  using namespace iterator;
  static_assert(!Random_Access<std::forward_list<int>::iterator>);
  static_assert(!Random_Access<std::istream_iterator<char>>);
  static_assert(Random_Access<std::deque<char>::iterator>);
  static_assert(Random_Access<std::string::iterator>);
  static_assert(Random_Access<std::vector<char>::iterator>);
  static_assert(Random_Access<std::string::const_iterator>);
  static_assert(Random_Access<char const *>);
}
#import nonstd.required.iterator.Undirected
auto tests::unit::required::fixture::Fixture::test_iterator_Undirected() -> void {
  using namespace iterator;
  static_assert(!Undirected<std::forward_list<int>::iterator>);
  static_assert(!Undirected<std::istream_iterator<char>>);
  static_assert(Undirected<std::deque<char>::iterator>);
  static_assert(Undirected<std::string::iterator>);
  static_assert(Undirected<std::vector<char>::iterator>);
  static_assert(Undirected<std::string::const_iterator>);
  static_assert(Undirected<char const *>);
}
#import nonstd.required.iterator.Contiguous
auto tests::unit::required::fixture::Fixture::test_iterator_Contiguous() -> void {
  using namespace iterator;
  static_assert(!Contiguous<std::forward_list<int>::iterator>);
  static_assert(!Contiguous<std::istream_iterator<char>>);
  static_assert(!Contiguous<std::deque<char>::iterator>);
  static_assert(!Contiguous<std::string::iterator>);
  static_assert(!Contiguous<std::vector<char>::iterator>);
  static_assert(!Contiguous<std::string::const_iterator>);
  static_assert(Contiguous<char const *>);
}
#import nonstd.required.Movable
auto tests::unit::required::fixture::Fixture::test_Movable() -> void {
  static_assert(Movable<std::vector<char>>);
  static_assert(Movable<std::set<char>>);
  static_assert(Movable<std::string>);
  static_assert(Movable<::c::stringz>);
  static_assert(Movable<std::error_code>);
  static_assert(Movable<int>);
  static_assert(!Movable<Specimens::Not_Move_Constructible>);
}
#import nonstd.required.Move_Constructible
auto tests::unit::required::fixture::Fixture::test_Move_Constructible() -> void {
  static_assert(Move_Constructible<std::vector<char>>);
  static_assert(Move_Constructible<std::set<char>>);
  static_assert(Move_Constructible<std::string>);
  static_assert(Move_Constructible<::c::stringz>);
  static_assert(Move_Constructible<std::error_code>);
  static_assert(Move_Constructible<int>);
  static_assert(!Move_Constructible<Specimens::Not_Move_Constructible>);
}
#import nonstd.required.Move_Assignable
auto tests::unit::required::fixture::Fixture::test_Move_Assignable() -> void {
  static_assert(Move_Assignable<std::vector<char>>);
  static_assert(Move_Assignable<std::set<char>>);
  static_assert(Move_Assignable<std::string>);
  static_assert(Move_Assignable<::c::stringz>);
  static_assert(Move_Assignable<std::error_code>);
  static_assert(Move_Assignable<int>);
  static_assert(!Move_Assignable<Specimens::Not_Move_Assignable>);
}
#import nonstd.required.Octet
auto tests::unit::required::fixture::Fixture::test_Octet() -> void {
  // Testify! - All known octet types are Octets
  static_assert(Octet<char>);
  static_assert(Octet<unsigned char>);
  static_assert(Octet<signed char>);
  static_assert(Octet<std::byte>);
}
#import nonstd.required.Outcomable
auto tests::unit::required::fixture::Fixture::test_Outcomable() -> void {
  // Testify! - All known octet types are Octets
  static_assert(Outcomable<char>);
  static_assert(Outcomable<std::string>);
  static_assert(! Outcomable<Specimens::Not_Default_Constructible>);
}
#import nonstd.required.Pointer
auto tests::unit::required::fixture::Fixture::test_Pointer() -> void {
  // Testify! - with many other tests in the source definition .../Pointer.xcpp
  static_assert(!Pointer<char>);
  static_assert(Pointer<char *>);
}
#import nonstd.same_as
#import nonstd.required.Same
auto tests::unit::required::fixture::Fixture::test_Same() -> void {
  using nonstd::same_as;
  static_assert(same_as<int, int>);
  static_assert(!same_as<char *, char const *>);
  static_assert(same_as<void *, void *>);
  static_assert(!same_as<double, char>);
  using nonstd::required::Same;
  static_assert(Same<std::string, std::string>);
  static_assert(!Same<char *, std::string>);
  static_assert(!Same<double, float>);
}
#import nonstd.required.Spanlike
#import nonstd.basic_string // required to get Spanlike to work
#import nonstd.basic_string_view // required to get Spanlike to work
#import nonstd.vector // required to get Spanlike to work
#import nonstd.array // required to get Spanlike to work
auto tests::unit::required::fixture::Fixture::test_Spanlike() -> void {
  // BAD: because they use "new school" types: Value, Data, Size
  static_assert(!Spanlike<::nonstd::basic_dope<char>>);
  static_assert(!Spanlike<::nonstd::basic_dope<char const>>);
  // OK: because they use "old school" types: value_types, <undefined>, size_type
  static_assert(nonstd::required::Spanlike<std::string>);
  static_assert(Spanlike<std::string>);
  static_assert(Spanlike<std::string_view>);
  static_assert(Spanlike<std::vector<char>>);
  static_assert(Spanlike<std::vector<std::byte>>);
  static_assert(Spanlike<std::array<int, 4>>);
  // of course
  static_assert(!Spanlike<int>);
}
#import nonstd.required.Spanish
auto tests::unit::required::fixture::Fixture::test_Spanish() -> void {
  // OK: all
  static_assert(Spanish<::nonstd::basic_dope<char>>);
  static_assert(Spanish<::nonstd::basic_dope<char const>>);
  // OK: all
  static_assert(Spanish<std::string>);
  static_assert(Spanish<std::string_view>);
  static_assert(Spanish<std::vector<char>>);
  static_assert(Spanish<std::vector<std::byte>>);
  // of course still not a span or a dope (vector)
  static_assert(!Spanish<int>);
}
#import std.filesystem.path
#import std.string
#import std.string_view
#import nonstd.basic_dope
#import nonstd.span
#import std.vector
#import c.const_stringz
#import c.const_stringn
#import nonstd.required.String
auto tests::unit::required::fixture::Fixture::test_String() -> void {
  using library::String;
  static_assert(String<::std::string>);
  static_assert(!String<::std::filesystem::path>);
  static_assert(!String<::std::string_view>);
  static_assert(!String<::nonstd::basic_dope<char const>>);
  static_assert(!String<::nonstd::span<char const>>);
  static_assert(!String<::std::vector<char>>);
  static_assert(!String<::c::const_stringz>);
  static_assert(!String<::c::const_stringn>);
}
#import nonstd.required.Stringable
auto tests::unit::required::fixture::Fixture::test_Stringable() -> void {
  using library::Stringable;
  static_assert(Stringable<::std::string>);
  static_assert(Stringable<::std::filesystem::path>);
  static_assert(!Stringable<::std::string_view>);
  static_assert(!Stringable<::nonstd::basic_dope<char const>>);
  static_assert(!Stringable<::nonstd::span<char const>>);
  static_assert(!Stringable<::std::vector<char>>);
  static_assert(!Stringable<::c::const_stringz>);
  static_assert(!Stringable<::c::const_stringn>);
}
#import nonstd.required.Stringlike
auto tests::unit::required::fixture::Fixture::test_Stringlike() -> void {
  // Stringlike<THING> is the same as String<STRING>
  using library::Stringlike;
  static_assert(Stringlike<::std::string>);
  static_assert(!Stringlike<::std::filesystem::path>);
  static_assert(!Stringlike<::std::string_view>);
  static_assert(!Stringlike<::nonstd::basic_dope<char const>>);
  static_assert(!Stringlike<::nonstd::span<char const>>);
  static_assert(!Stringlike<::std::vector<char>>);
  static_assert(!Stringlike<::c::const_stringz>);
  static_assert(!Stringlike<::c::const_stringn>);
}
#import nonstd.required.Path
auto tests::unit::required::fixture::Fixture::test_Path() -> void {
  using library::Path;
  static_assert(!Path<::std::string>);
  static_assert(Path<::std::filesystem::path>);
  static_assert(!Path<::std::string_view>);
  static_assert(!Path<::nonstd::basic_dope<char const>>);
  static_assert(!Path<::nonstd::span<char const>>);
  static_assert(!Path<::std::vector<char>>);
  static_assert(!Path<::c::const_stringz>);
  static_assert(!Path<::c::const_stringn>);
}
#import nonstd.required.Pathlike
auto tests::unit::required::fixture::Fixture::test_Pathlike() -> void {
  using library::Pathlike;
  static_assert(Pathlike<::std::string>);
  static_assert(Pathlike<::std::filesystem::path>);
  static_assert(!Pathlike<::std::string_view>);
  static_assert(!Pathlike<::nonstd::basic_dope<char const>>);
  static_assert(!Pathlike<::nonstd::span<char const>>);
  static_assert(!Pathlike<::std::vector<char>>);
  static_assert(!Pathlike<::c::const_stringz>);
  static_assert(!Pathlike<::c::const_stringn>);
}
#import rigging.suite.io
auto tests::unit::required::fixture::Fixture::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  Stream series("required");
  series << call("Allocator", &Fixture::test_Allocator)
         << []() {
              Stream bas("basic (stringish)");
              bas << call("Basic_String", &Fixture::test_Basic_String)
                  << call("Basic_String_View", &Fixture::test_Basic_String_View)
                  << END;
              return bas;
            }()
         << call("Character", &Fixture::test_Character)
         << call("Character_Traits", &Fixture::test_Character_Traits)
         << []() {
              Stream chr("character");
              chr << call("Type", &Fixture::test_character_Type)
                  << call("Traits", &Fixture::test_character_Traits)
                  << END;
              return chr;
            }()
         << call("Container", &Fixture::test_Container)
         << []() {
              Stream con("container");
              con << call("Type", &Fixture::test_container_Type)
                  << call("Basic", &Fixture::test_container_Basic)
                  << call("Holding", &Fixture::test_container_Holding)
                  << []() {
                       auto push  = Stream{"push"};
                       push << call("Push_Back", &Fixture::test_container_Push_Back)
                            << call("Push_Front", &Fixture::test_container_Push_Front)
                            << END;
                       return push;
                     }()
                  << []() {
                       auto ite  = Stream{"iterator"};
                       ite << call("Input", &Fixture::test_container_Input)
                            << call("Forward", &Fixture::test_container_Forward)
                            << call("Bidirectional", &Fixture::test_container_Bidirectional)
                            << call("Undirected", &Fixture::test_container_Undirected)
                            << call("Random_Access", &Fixture::test_container_Random_Access)
                            << call("Contiguous", &Fixture::test_container_Contiguous)
                            << END;
                       return ite;
                     }()
                  << END;
              return con;
            }()
         << call("Compare_To_Nullptr", &Fixture::test_Compare_To_Nullptr)
         << call("Convertible", &Fixture::test_Convertible)
         << call("Copyable", &Fixture::test_Copyable)
         << call("Copy_Constructible", &Fixture::test_Copy_Constructible)
         << call("Copy_Assignable", &Fixture::test_Copy_Assignable)
         << call("Default_Constructible", &Fixture::test_Default_Constructible)
         << call("Dopelike", &Fixture::test_Dopelike)
         << call("Exception", &Fixture::test_Exception)
         << call("Spanlike", &Fixture::test_Spanlike)
         << call("Spanish", &Fixture::test_Spanish)
         << []() {
              Stream ite("iterator");
              ite << call("Basis", &Fixture::test_iterator_Basis)
                  << call("Input", &Fixture::test_iterator_Input)
                  << call("Output", &Fixture::test_iterator_Output)
                  << call("Forward", &Fixture::test_iterator_Forward)
                  << call("Bidirectional", &Fixture::test_iterator_Bidirectional)
                  << call("Random_Access", &Fixture::test_iterator_Random_Access)
                  << call("Undirected", &Fixture::test_iterator_Undirected)
                  << call("Contiguous", &Fixture::test_iterator_Contiguous)
                  << END;
              return ite;
            }()
         << call("Movable", &Fixture::test_Movable)
         << call("Move_Constructible", &Fixture::test_Move_Constructible)
         << call("Move_Assignable", &Fixture::test_Move_Assignable)
         << call("Pointer", &Fixture::test_Pointer)
         << call("Octet", &Fixture::test_Octet)
         << call("Outcomable", &Fixture::test_Outcomable)
         << call("Same", &Fixture::test_Same)
         << call("Spanlike", &Fixture::test_Spanlike)
         << call("Spanish", &Fixture::test_Spanish)
         << call("String", &Fixture::test_String)
         << call("Stringable", &Fixture::test_Stringable)
         << call("Stringlike", &Fixture::test_Stringlike)
         << call("Path", &Fixture::test_Path)
         << call("Pathlike", &Fixture::test_Pathlike)
         << END;
  return finalize(series);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::ish::tuple { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
class tests::unit::ish::tuple::Fixture : public cppunit::test::Fixture {
public:
  auto test_cat() -> void;
  auto test_cons1N() -> void;
  auto test_consN1() -> void;
  auto test_rest() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.move
#import std.tuple
#import ish.tuple.Bundle

#import ish.tuple.cat
auto tests::unit::ish::tuple::Fixture::test_cat() -> void {
  // this is in the standard library ... so testing it is specious
  {
    auto r = ::ish::tuple::cat(std::tuple<int>(1), std::tuple<char>('a'), std::tuple<std::string>("puzzle")); // <------ test this
    std::tuple<int, char, std::string> t;
    t = r;
    CPPUNIT_ASSERT(t == r);
  } {
    auto a = std::tuple<int>(1);
    auto b = std::tuple<char>('a');
    auto c = std::tuple<std::string>("puzzle");
    auto r = ::ish::tuple::cat(a, b, c); // <---------- test this
    std::tuple<int, char, std::string> t;
    t = r;
    CPPUNIT_ASSERT(t == r);
  } {
    auto a = std::make_tuple(1);
    auto b = std::make_tuple('a');
    auto c = std::make_tuple((std::string)("puzzle"));
    auto r = ::ish::tuple::cat(a, b, c); // <------ test this
    std::tuple<int, char, std::string> t;
    t = r;
    CPPUNIT_ASSERT(t == r);
  }
}

#import std.tuple
#import ish.tuple.cons
auto tests::unit::ish::tuple::Fixture::test_cons1N() -> void {
  auto r = ::ish::tuple::cons(1, std::tuple<char, std::string>('a', std::string("puzzle"))); // <------ test this
  std::tuple<int, char, std::string> t(1, 'a', "puzzle");
  t = r;
  CPPUNIT_ASSERT(t == r);
}

#import std.tuple
#import ish.tuple.cons
auto tests::unit::ish::tuple::Fixture::test_consN1() -> void {
  auto r = ::ish::tuple::cons(std::tuple<int, char>(1, 'a'), std::string("puzzle")); // <--------- test this
  std::tuple<int, char, std::string> t(1, 'a', "puzzle");
  t = r;
  CPPUNIT_ASSERT(t == r);
}

#import std.make_tuple
#import std.get
#import ish.tuple.rest
auto tests::unit::ish::tuple::Fixture::test_rest() -> void {
  auto r = std::make_tuple(1, 'a', std::string("puzzle"));
  auto first = std::get<0>(r);
  CPPUNIT_ASSERT(1 == first);
  CPPUNIT_ASSERT(1 == std::get<0>(r));
  CPPUNIT_ASSERT('a' == std::get<1>(r));
  CPPUNIT_ASSERT("puzzle" == std::get<2>(r));
  {
    // debug the testing itself (WATCHOUT -- std::move modifies r
    auto r = std::make_tuple(1, 'a', std::string("puzzle"));
    { auto resc = ::ish::tuple::rest(r);  // <----------- test this
      CPPUNIT_ASSERT('a' == std::get<0>(resc)); }
    { auto resm = ::ish::tuple::rest(std::move(r));  // <----------- test this
      CPPUNIT_ASSERT('a' == std::get<0>(resm));
      CPPUNIT_ASSERT("puzzle" == std::get<1>(resm)); }
  }
  auto more = ::ish::tuple::rest(r); // <---- fails
  CPPUNIT_ASSERT('a' == std::get<0>(more));
  CPPUNIT_ASSERT("puzzle" == std::get<1>(more));
  std::tuple<char, std::string> const expected = std::make_tuple('a', std::string("puzzle"));
  std::tuple<char, std::string> const actual = more;
  CPPUNIT_ASSERT(expected == actual);
}

#import tests.unit.ish.tuple.Result
#import tests.unit.ish.tuple.Dispatcher
#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::ish::tuple::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("tuple");
  s << call("cat", &Fixture::test_cat)
    << call("cons1N", &Fixture::test_cons1N)
    << call("consN1", &Fixture::test_consN1)
    << call("rest", &Fixture::test_rest)
    << add<Result>()
    << add<Dispatcher>()
    ;
  return finalize(s);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::ish::tuple { class Result; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
class tests::unit::ish::tuple::Result : public cppunit::test::Fixture {
public:
  auto test_caseN() -> void;
  auto test_case0() -> void;
  auto test_tuple_rest() -> void;

  static auto suite() -> cppunit::Test *;
  enum class Sausage { };
};
#endiv
#divert <cpp>
#import std.get
#import std.tuple
#import std.tuple_cat
#import ish.tuple.detail.rebuild.Result
auto tests::unit::ish::tuple::Result::test_caseN() -> void {
  using ::ish::tuple::detail::rebuild::Result;
  using type_r1 = Result<1u, int, char, double, Sausage>::tuple;
  type_r1 v1 = std::tuple<char, double, Sausage>('a', 1.2, Sausage());
  CPPUNIT_ASSERT('a' == std::get<0>(v1));
  using type_r2 = Result<2u, int, char, double, Sausage>::tuple;
  type_r2 v2 = std::tuple<double, Sausage>(1.3, Sausage());
  CPPUNIT_ASSERT(1.3 == std::get<0>(v2));
  using type_r3 = Result<3u, int, char, double, Sausage>::tuple;
  type_r3 v3 = std::tuple<Sausage>(Sausage());
  CPPUNIT_ASSERT(Sausage() == std::get<0>(v3));
  using type_r4 = Result<4u, int, char, double, Sausage>::tuple;
  type_r4 v4 = std::tuple<>();
  CPPUNIT_ASSERT(std::tuple<>() == v4);
}

auto tests::unit::ish::tuple::Result::test_case0() -> void {
  using ::ish::tuple::detail::rebuild::Result;
  using type_r0 = Result<0u, int, char, double, Sausage>::tuple;
  type_r0 v0 = std::tuple<int, char, double, Sausage>(99, 'a', 1.2, Sausage());
  CPPUNIT_ASSERT(99 == std::get<0>(v0));
}

#import std.make_tuple
#import std.get
#import ish.tuple.rest
auto tests::unit::ish::tuple::Result::test_tuple_rest() -> void {
  auto r = std::make_tuple(1, 'a', std::string("puzzle"));
  auto first = std::get<0>(r);
  CPPUNIT_ASSERT(1 == first);
  auto more = ::ish::tuple::rest(r); // <------------------------------------ test this
  CPPUNIT_ASSERT('a' == std::get<0>(more));
  CPPUNIT_ASSERT("puzzle" == std::get<1>(more));
  std::tuple<char, std::string> const expected = std::make_tuple('a', std::string("puzzle"));
  std::tuple<char, std::string> const actual = more;
  CPPUNIT_ASSERT(expected == actual);
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::ish::tuple::Result::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("Result");
  s << call("caseN", &Result::test_caseN)
    << call("case0", &Result::test_case0)
    << call("rest", &Result::test_tuple_rest)
    ;
  return finalize(s);
}
#endiv

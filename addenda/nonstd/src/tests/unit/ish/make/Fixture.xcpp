// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::ish::make { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
class tests::unit::ish::make::Fixture : public cppunit::test::Fixture {
public:
  auto test_dir() -> void;
  auto test_notdir() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import ish.make.dir
#import ish.shell.dirname
auto tests::unit::ish::make::Fixture::test_dir() -> void {
  // is the same as shell::dirname, which is extensively tested elsewhere
CPPUNIT_ASSERT_EQUAL((std::string)"/apple/banana/cherry", ::ish::make::dir("/apple/banana/cherry/file.cpp"));
}

#import ish.make.notdir
#import ish.shell.basename
auto tests::unit::ish::make::Fixture::test_notdir() -> void {
  // is the same as shell::dirname, which is extensively tested elsewhere
  CPPUNIT_ASSERT_EQUAL((std::string)"file.cpp", ::ish::make::notdir("/apple/banana/file.cpp"));
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::ish::make::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("make");
  s << call("dir", &Fixture::test_dir)
    << call("notdir", &Fixture::test_notdir)
    ;
  return finalize(s);
}
#endiv

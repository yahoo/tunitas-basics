// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::ish::cxx {
  class Fixture;
}
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
class tests::unit::ish::cxx::Fixture : public cppunit::test::Fixture {
public:
  auto test_rest() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.ostringstream
#import std.string

#import ish.cxx.rest
#import std.set
auto tests::unit::ish::cxx::Fixture::test_rest() -> void {
  {
    std::set<int> subject{0,1,2,3,4,5}; // <----------------------- mutableb
    using ::ish::cxx::rest;
    std::ostringstream buf;
    for (auto ith : rest(subject)) {
      buf << ith;
    }
    std::string const actual = buf.str();
    std::string const expected = "12345";
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::set<int> const subject{0,1,2,3,4,5}; // <----------------- consty
    using ::ish::cxx::rest;
    std::ostringstream buf;
    for (auto ith : rest(subject)) {
      buf << ith;
    }
    std::string const actual = buf.str();
    std::string const expected = "12345";
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::ish::cxx::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("cxx");
  s << call("rest", &Fixture::test_rest)
    ;
  return finalize(s);
}
#endiv

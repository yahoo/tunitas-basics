// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::ish::shell { class Dirname; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
#import tests.unit.ish.Palette
class tests::unit::ish::shell::Dirname : public cppunit::test::Fixture {
public:
  auto test_string() -> void;
  auto test_container() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import ish.shell.dirname

auto tests::unit::ish::shell::Dirname::test_string() -> void {
  using ::ish::shell::dirname;
  CPPUNIT_ASSERT("." == dirname("./file.cpp"));
  CPPUNIT_ASSERT("/apple/banana" == dirname("/apple/banana/file.cpp"));
  CPPUNIT_ASSERT(".." == dirname("../file.cpp"));
  CPPUNIT_ASSERT("." == dirname("./////////////file.cpp"));
  CPPUNIT_ASSERT("." == dirname("."));
  CPPUNIT_ASSERT("." == dirname(".."));
  CPPUNIT_ASSERT("." == dirname("..."));
  CPPUNIT_ASSERT(".." == dirname("../."));
  CPPUNIT_ASSERT("." == dirname("./.."));
  CPPUNIT_ASSERT("/" == dirname("/"));
  CPPUNIT_ASSERT("/" == dirname("/apple"));
  CPPUNIT_ASSERT("." == dirname("")); // <---------- pathological
}

#import std.string
#import std.vector
auto tests::unit::ish::shell::Dirname::test_container() -> void {
  using v = std::vector<std::string>;
  auto sources = v{"./file.cpp",
                   "/apple/banana/file.cpp",
                   "../file.cpp",
                   "./////////////file.cpp",
                   ".",
                   "..",
                   "/",
                   "/root"};
  auto const actual = ::ish::shell::dirname(sources);
  auto const expected = v{".", "/apple/banana", "..", ".", ".", ".", "/", "/"};
  CPPUNIT_ASSERT(expected == actual);
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::ish::shell::Dirname::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("dirname");
  s << call("string", &Dirname::test_string)
    << call("container", &Dirname::test_container)
    ;
  return finalize(s);
}
#endiv

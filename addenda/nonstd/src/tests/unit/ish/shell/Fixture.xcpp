// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::ish::shell { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
#import tests.unit.ish.Palette
class tests::unit::ish::shell::Fixture : public cppunit::test::Fixture, Palette {
public:
  // unify the MI
  auto setUp() -> void { Palette::setUp(); }
  auto tearDown() -> void { Palette::tearDown(); }
  auto test_simple_basename() -> void;
  auto test_simple_dirname() -> void;
  auto test_HOME() -> void;
  auto test_TMPDIR_function() -> void;
  template<typename PATHLIKE> auto test_TMPDIR_template() -> void;
  auto test_USER() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <tpp>
#import ish.shell.TMPDIR
template<typename PATHLIKE> auto tests::unit::ish::shell::Fixture::test_TMPDIR_template() -> void {
  auto dir = ::ish::shell::TMPDIR<PATHLIKE>();
  auto restring = (std::string) dir;
  CPPUNIT_ASSERT(!restring.empty());
}
#endiv
#divert <cpp>
#import c.str
#import std.string_literals
using namespace std::string_literals;
#import ish.shell.basename
auto tests::unit::ish::shell::Fixture::test_simple_basename() -> void {
  auto base = ::ish::shell::basename("/home/user");
  CPPUNIT_ASSERT_EQUAL("user"s, base);
}
#import ish.shell.dirname
auto tests::unit::ish::shell::Fixture::test_simple_dirname() -> void {
  auto dir = ::ish::shell::dirname("/home/user");
  CPPUNIT_ASSERT_EQUAL("/home"s, dir);
}
#import ish.shell.HOME
auto tests::unit::ish::shell::Fixture::test_HOME() -> void {
  auto home = ::ish::shell::HOME();
  CPPUNIT_ASSERT(!home.empty());
}
#import ish.shell.TMPDIR
auto tests::unit::ish::shell::Fixture::test_TMPDIR_function() -> void {
  auto dir = ::ish::shell::TMPDIR();
  CPPUNIT_ASSERT(!dir.empty());
}
#import ish.shell.USER
auto tests::unit::ish::shell::Fixture::test_USER() -> void {
  auto user = ::ish::shell::USER();
  CPPUNIT_ASSERT(!user.empty());
}
#import tests.unit.ish.shell.Basename
#import tests.unit.ish.shell.Dirname
#import rigging.suite.io
auto tests::unit::ish::shell::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("shell");
  series << []() {
              Stream sub("simple");
              sub << call("basename", &Fixture::test_simple_basename)
                  << call("dirname", &Fixture::test_simple_dirname)
                ;
              return sub;
            }()
         << call("HOME", &Fixture::test_HOME)
    ;
  {
    Stream tmp("TMPDIR");
    tmp << call("function", &Fixture::test_TMPDIR_function)
      ;
    {
      Stream pla("template");
      pla << call("std::string", &Fixture::test_TMPDIR_template<std::string>)
          << call("std::filesystem::path", &Fixture::test_TMPDIR_template<std::filesystem::path>)
        ;
      tmp << move(pla);
    }
    series << move(tmp);
  }
  series << call("USER", &Fixture::test_USER)
         << add<Basename>()
         << add<Dirname>()
    ;
  return finalize(series);
}
#endiv

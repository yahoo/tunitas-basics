// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::dope::bytewise { class Palette; }
#endiv
#divert <hpp>
#import std.size_t
#import std.byte
class tests::unit::dope::bytewise::Palette {
protected:
  Palette();
  ~Palette() = default;
  Palette(Palette const &) = delete;
  auto operator=(Palette const &) -> Palette & = delete;
public: 
  static constexpr ::std::size_t const LENGTH = 20;
  static_assert(LENGTH <= 26, "std::isalpha will fail");

  // These won't be 0-terminated, they will be full of "bytes" not (codepage) "chars"
  std::byte aNb[LENGTH];         // array-of-length-N of bytes
  std::byte const aNbb[LENGTH];  // array-of-length-N of const bytes
  std::byte *pb;                 // pointer-to-bytes
  std::byte const *pbb;          // pointer-to-const_bytes

  virtual auto setUp() -> void;
  virtual auto tearDown() -> void;

  // Used in Consty & Muting
  template<typename BUFFER> inline static auto generic_testification(BUFFER) -> void;
protected:
  // "establish" in lieu of 'generate' 'fill' 'initialize' all of which are in std
  // but have differfent senses.  So "establish" is used to setUp and tearDown.
  template<typename ITERATOR, typename FUNCTOR> inline auto establish(ITERATOR start, ITERATOR finish, FUNCTOR function) -> void;
  template<typename BASE, typename FUNCTOR> inline auto establish(BASE const *start, BASE const *finish, FUNCTOR function) -> void;
private:
  template<typename ITERATOR, typename FUNCTOR> auto do_establish(ITERATOR start, ITERATOR finish, FUNCTOR function) -> void;
};
#endiv
#divert <tpp>
#import std.generate
template<typename ITERATOR, typename FUNCTOR> auto tests::unit::dope::bytewise::Palette::do_establish(ITERATOR start, ITERATOR finish, FUNCTOR function) -> void {
  ::std::generate(start, finish, function);
}
template<typename ITERATOR, typename FUNCTOR> auto tests::unit::dope::bytewise::Palette::establish(ITERATOR start, ITERATOR finish, FUNCTOR function) -> void {
  do_establish(start, finish, function);
}
template<typename BASE, typename FUNCTOR> auto tests::unit::dope::bytewise::Palette::establish(BASE const *start, BASE const *finish, FUNCTOR function) -> void {
  // ahem ... cast away the constness (oh the humanity)
  do_establish(const_cast<std::byte *>(start), const_cast<std::byte *>(finish), function);
}
#import cppunit.test.Assert
#import nonstd.dope
#import nonstd.const_dope
#import std.distance
#import std.is_same
#import std.isalpha
#import std.isspace
template<typename BUFFER> auto tests::unit::dope::bytewise::Palette::generic_testification(BUFFER buf) -> void {
  static_assert((::std::is_same<nonstd::dope<std::byte>, BUFFER>::value
                 ||
                 ::std::is_same<nonstd::const_dope<std::byte>, BUFFER>::value),
                "the BUFFER is not actually instantiated as byte::buffer at all"); 
  CPPUNIT_ASSERT(!buf.empty());
  CPPUNIT_ASSERT(0 != buf.size());
  CPPUNIT_ASSERT(buf.begin() != buf.end());
  CPPUNIT_ASSERT(0 != ::std::distance(buf.begin(), buf.end()));
  for (auto byte : buf) {
    CPPUNIT_ASSERT(std::isspace(char(byte)) || std::isalpha(char(byte)));
  }
}
#endiv
#divert <cpp>
constexpr ::std::size_t const tests::unit::dope::bytewise::Palette::LENGTH;
tests::unit::dope::bytewise::Palette::Palette()
  : aNb()
  , aNbb()
  , pb()
  , pbb() {
  ; // aNb and aNbb remain unassigned
}
#import rigging.unit.lhs
auto tests::unit::dope::bytewise::Palette::setUp() -> void {
  using ::rigging::unit::lhs;
  unsigned count;
  count=0;
  establish(aNb, aNb+LENGTH, [&count](){ return std::byte('a' + count++); });
  count=0;
  establish(aNbb, aNbb+LENGTH, [&count](){ return std::byte('A' + count++); });
  lhs(pb) = aNb;
  lhs(pbb) = aNbb;
}
#import rigging.unit.lhs
#import rigging.unit.clear
auto tests::unit::dope::bytewise::Palette::tearDown() -> void {
  using ::rigging::unit::lhs;
  using ::rigging::unit::clear;
  establish(aNb, aNb+sizeof (aNb), [](){ return std::byte{0}; });
  establish(aNbb, aNbb+sizeof (aNbb), [](){ return std::byte{0}; });
  lhs(pb) = clear;
  lhs(pbb) = clear;
}
#endiv

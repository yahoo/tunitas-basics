// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::dope::bytewise { class Muting; }
#endiv
#divert <hpp>
#import nonstd.basic_dope
#import cppunit.Test
#import cppunit.test.Fixture
#import tests.unit.dope.bytewise.Palette
class tests::unit::dope::bytewise::Muting : public cppunit::test::Fixture, Palette {
public: 
  using Subject = ::nonstd::basic_dope<std::byte>;
  auto setUp() -> void final;
  auto tearDown() -> void final;
  auto test_constructor_default() -> void;
  auto test_constructor_manifest_array() -> void;
  auto test_constructor_manifest_array_smaller() -> void;
  auto test_constructor_manifest_array_too_big() -> void;
  auto test_constructor_manifest_array_IGNORED_on_too_big() -> void;
  auto test_constructor_pointer() -> void;
  auto test_constructor_pair_size_first() -> void;
  auto test_constructor_pair_size_second() -> void;
  auto test_constructor_tuple_size_first() -> void;
  auto test_constructor_tuple_size_second() -> void;
  auto test_constructor_array() -> void;
  auto test_constructor_vector() -> void;
  auto test_iteration() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
auto tests::unit::dope::bytewise::Muting::setUp() -> void {
  Palette::setUp();
}
auto tests::unit::dope::bytewise::Muting::tearDown() -> void {
  Palette::tearDown();
}
auto tests::unit::dope::bytewise::Muting::test_constructor_default() -> void {
  Subject t; // <------------- test this
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}
#import std.distance
auto tests::unit::dope::bytewise::Muting::test_constructor_manifest_array() -> void {
  Subject t(aNb); // <------------- test this 
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(LENGTH == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(aNb == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(LENGTH == ::std::distance(t.begin(), t.end()));
}
auto tests::unit::dope::bytewise::Muting::test_constructor_manifest_array_smaller() -> void {
  auto const smaller_size = LENGTH - 5;
  Subject t(aNb, smaller_size); // <------------- test this 
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(smaller_size == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(aNb == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(smaller_size == ::std::distance(t.begin(), t.end()));
}
#import std.length_error
auto tests::unit::dope::bytewise::Muting::test_constructor_manifest_array_too_big() -> void {
  try {
    Subject t(LENGTH+1, aNb); // <------------- test this (it observes the size of aNb)
    CPPUNIT_ASSERT(false);
  } catch (std::length_error const &) {
    CPPUNIT_ASSERT(true);
  }
}
auto tests::unit::dope::bytewise::Muting::test_constructor_manifest_array_IGNORED_on_too_big() -> void {
  try {
    Subject t(aNb, LENGTH+1); // <------------- test this (it observes the size of aNb)
    // WATCHOUT - program behavior is now undefined because LENGTH+1 is invalid
    CPPUNIT_ASSERT(true);
  } catch (std::length_error const &) {
    CPPUNIT_ASSERT(false);
  }
}
auto tests::unit::dope::bytewise::Muting::test_constructor_pointer() -> void {
  Subject t(pb, LENGTH); // <------------- test this
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(LENGTH == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(pb == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(LENGTH == ::std::distance(t.begin(), t.end()));
}
#import std.pair
auto tests::unit::dope::bytewise::Muting::test_constructor_pair_size_first() -> void {
  ::std::pair<::std::size_t, std::byte *> p(LENGTH, pb); // <------------------ std::byte *
  Subject t(p); // <------------- test this
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(LENGTH == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(pb == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(LENGTH == ::std::distance(t.begin(), t.end()));
}
auto tests::unit::dope::bytewise::Muting::test_constructor_pair_size_second() -> void {
  ::std::pair<std::byte *, ::std::size_t> p(pb, LENGTH); // <------------------ std::byte *
  Subject t(p); // <------------- test this
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(LENGTH == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(pb == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(LENGTH == ::std::distance(t.begin(), t.end()));
}
#import std.tuple
auto tests::unit::dope::bytewise::Muting::test_constructor_tuple_size_first() -> void {
  ::std::tuple<::std::size_t, std::byte *> u(LENGTH, pb); // <--------------- std::byte *
  Subject t(u); // <------------- test this
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(LENGTH == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(pb == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(LENGTH == ::std::distance(t.begin(), t.end()));
}
auto tests::unit::dope::bytewise::Muting::test_constructor_tuple_size_second() -> void {
  ::std::tuple<std::byte *, ::std::size_t> u(pb, LENGTH); // <--------------- std::byte *
  Subject t(u); // <------------- test this
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(LENGTH == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(pb == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(LENGTH == ::std::distance(t.begin(), t.end()));
}
#import nonstd.array
#import std.copy
auto tests::unit::dope::bytewise::Muting::test_constructor_array() -> void {
  ::std::array<std::byte, LENGTH> a;
  // prepare for & copy in the nullptr at the end of pb
  ::std::copy(pb, pb+LENGTH+1, a.begin());
  Subject t(a); // <------------- test this
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(LENGTH == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  for (unsigned i(0), e(t.size()); e != i; ++i) {
    CPPUNIT_ASSERT(t[i] == a[i]);
  }
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(LENGTH == ::std::distance(t.begin(), t.end()));
}
#import std.copy
#import nonstd.vector
auto tests::unit::dope::bytewise::Muting::test_constructor_vector() -> void {
  // template<typename ALLOC> [[implicit]] basic_buffer(::std::vector<CHAR, ALLOC> const &);
  ::std::vector<std::byte> v;
  v.resize(LENGTH);
  ::std::copy(pb, pb+LENGTH, v.begin());
  Subject t(v); // <------------- test this
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(LENGTH == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  for (unsigned i(0), e(t.size()); e != i; ++i) {
    CPPUNIT_ASSERT(t[i] == v[i]);
  }
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(LENGTH == ::std::distance(t.begin(), t.end()));
}
#import std.max
#import std.min
auto tests::unit::dope::bytewise::Muting::test_iteration() -> void {
  ::nonstd::basic_dope<std::byte> m(aNb);
  ::nonstd::basic_dope<std::byte> byte(aNb);
  CPPUNIT_ASSERT(m.size() == byte.size());
  CPPUNIT_ASSERT(!m.empty());
  CPPUNIT_ASSERT(0 != m.size());
  using iterator = ::nonstd::basic_dope<std::byte>::iterator; // <------------- test this
  for (iterator mi(m.begin()), me(m.end()), ci(byte.begin()), ce(byte.end()); me != mi && ce != ci; mi++, ci++) {
    std::byte mvalue(*mi);
    std::byte cvalue(*ci);
    CPPUNIT_ASSERT(mvalue == cvalue);
  }
}
#import rigging.suite.io
auto tests::unit::dope::bytewise::Muting::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("muting");
  series << call("constructor_default", &Muting::test_constructor_default)
         << call("constructor_manifest_array", &Muting::test_constructor_manifest_array)
         << call("constructor_manifest_array_smaller", &Muting::test_constructor_manifest_array_smaller)
         << call("constructor_manifest_array_too_big", &Muting::test_constructor_manifest_array_too_big)
         << call("constructor_manifest_array_IGNORED_on_too_big", &Muting::test_constructor_manifest_array_IGNORED_on_too_big)
         << call("constructor_pointer", &Muting::test_constructor_pointer)
         << call("constructor_pair_size_first", &Muting::test_constructor_pair_size_first)
         << call("constructor_pair_size_second", &Muting::test_constructor_pair_size_second)
         << call("constructor_tuple_size_first", &Muting::test_constructor_tuple_size_first)
         << call("constructor_tuple_size_second", &Muting::test_constructor_tuple_size_second)
         << call("constructor_array", &Muting::test_constructor_array)
         << call("constructor_vector", &Muting::test_constructor_vector)
         << call("iteration", &Muting::test_iteration)
    ;
  return finalize(series);
}
#endiv

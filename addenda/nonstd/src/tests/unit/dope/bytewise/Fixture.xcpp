// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::dope::bytewise { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import std.size_t
#import tests.unit.dope.bytewise.Palette
class tests::unit::dope::bytewise::Fixture : public cppunit::test::Fixture, Palette {
  using ancestor = cppunit::test::Fixture;
public: 
  auto setUp() -> void final;
  auto tearDown() -> void final;
  auto test_consty() -> void;
  auto test_muting() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
auto tests::unit::dope::bytewise::Fixture::setUp() -> void {
  Palette::setUp(); // unify the MI
}
auto tests::unit::dope::bytewise::Fixture::tearDown() -> void {
  Palette::tearDown(); // unify the MI
}
#import nonstd.const_dope
auto tests::unit::dope::bytewise::Fixture::test_consty() -> void {
  ::nonstd::const_dope<std::byte> cb;
  CPPUNIT_ASSERT(cb.empty());
}
#import nonstd.dope
auto tests::unit::dope::bytewise::Fixture::test_muting() -> void {
  ::nonstd::dope<std::byte> b;
  CPPUNIT_ASSERT(b.empty());
}
#import tests.unit.dope.bytewise.Consty
#import tests.unit.dope.bytewise.Muting
#import tests.unit.dope.bytewise.Nullptr
#import rigging.suite.io
auto tests::unit::dope::bytewise::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("bytewise");
  series << call("consty", &Fixture::test_consty)
         << call("muting", &Fixture::test_muting)
         << add<Consty>()
         << add<Muting>()
         << add<Nullptr<::nonstd::dope<std::byte>>>()
         << add<Nullptr<::nonstd::const_dope<std::byte>>>()
    ;
  return finalize(series);
}
#endiv

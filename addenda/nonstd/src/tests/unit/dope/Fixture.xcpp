// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::dope { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
class tests::unit::dope::Fixture : public cppunit::test::Fixture {
public:
  template<typename TYPE> auto test_usage_simple() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <tpp>
#import nonstd.basic_dope
template<typename TYPE> auto tests::unit::dope::Fixture::test_usage_simple() -> void {
  using Subject = nonstd::basic_dope<TYPE>;
  Subject s0;
  CPPUNIT_ASSERT(s0.empty());
  TYPE buf[3] = { };
  Subject s1{&buf[0], 3u};
  CPPUNIT_ASSERT(3 == s1.size());
}
#endiv
#divert <cpp>
#import std.byte
#import nonstd.basic_dope
#import tests.unit.dope.Generic
#import tests.unit.dope.bytewise.Fixture
#import rigging.suite.io
auto tests::unit::dope::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("dope");
  {
    Stream use("usage");
    use << call("char", &Fixture::test_usage_simple<char>)
        << call("char const", &Fixture::test_usage_simple<char const>)
      ;
    series << move(use);
  }
  series << add<bytewise::Fixture>()
         << add<Generic<::nonstd::basic_dope<std::byte>>>()
         << add<Generic<::nonstd::basic_dope<std::byte const>>>()
         << add<Generic<::nonstd::basic_dope<char>>>()
         << add<Generic<::nonstd::basic_dope<char const>>>()
         << add<Generic<::nonstd::basic_dope<signed char>>>()
         << add<Generic<::nonstd::basic_dope<signed char const>>>()
         << add<Generic<::nonstd::basic_dope<unsigned char>>>()
         << add<Generic<::nonstd::basic_dope<unsigned char const>>>()
    ;
  return finalize(series);
}
#endiv

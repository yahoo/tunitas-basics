// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::semver::v1 { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import org.semver.v1.String
#import tests.unit.semver.Operations
class tests::unit::semver::v1::Fixture : public cppunit::test::Fixture, public Operations {
  using ancestor = cppunit::test::Fixture;
public:
  using Subject = ::org::semver::v1::String;
  auto test_usage_String() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.string
#import std.string_literals
#import std.ostringstream
using namespace std::string_literals;
using namespace tests::unit::semver::v1;
auto Fixture::test_usage_String() -> void {
  Subject ver{1,2,3};
  CPPUNIT_ASSERT_EQUAL(3lu, ver.size());
  std::ostringstream buf;
  buf << ver;
  auto const actual = buf.str();
  auto const expected = "v1.2.3"s;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
#import tests.unit.semver.v1.String
#import rigging.suite.io
auto Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("v1");
  {
    Stream use("usage");
    use << call("String", &Fixture::test_usage_String)
      ;
    series << move(use);
    ;
  }
  series << add<String>()
    ;
  return finalize(series);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method; For terms and provenace see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd
namespace tests::unit::sto {
  namespace [[eponymous]] fixture {
    class Fixture;
    namespace library = ::nonstd;
  }
  using fixture::Fixture;
}
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
struct tests::unit::sto::fixture::Fixture : public cppunit::test::Fixture {
  auto test_call_them_all() -> void;
  template<typename INTEGER> auto test_call_them_each() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <tpp>
#import nonstd.sto
#import nonstd.basic_string_view // expected to have basic_dope_traits<basic_string_view<CHAR, TRAITS>>
namespace tests::unit::sto::fixture {
  template<typename INTEGER> auto Fixture::test_call_them_each() -> void {
    auto const specimen = "19"sv;
    auto const expected = 19;
    //
    // Do they throw?  Do they return good (they should return good)
    //
    CPPUNIT_ASSERT(expected == library::sto<INTEGER>(specimen));
  }
}
#endiv
#divert <cpp>
namespace tests::unit::sto::fixture {
  auto Fixture::test_call_them_all() -> void {
    auto const specimen = "19"sv;
    auto const expected = 19;
    //
    // Do they throw?  Do they return good (they should return good)
    //
    CPPUNIT_ASSERT(expected == library::sto<char signed>(specimen));
    CPPUNIT_ASSERT(expected == library::sto<char unsigned>(specimen));
    CPPUNIT_ASSERT(expected == library::sto<int short signed>(specimen));
    CPPUNIT_ASSERT(expected == library::sto<int short unsigned>(specimen));
    CPPUNIT_ASSERT(expected == library::sto<int signed>(specimen));
    CPPUNIT_ASSERT(expected == library::sto<int unsigned>(specimen));
    CPPUNIT_ASSERT(expected == library::sto<int long signed>(specimen));
    CPPUNIT_ASSERT(expected == library::sto<int long unsigned>(specimen));
    CPPUNIT_ASSERT(expected == library::sto<int long long signed>(specimen));
    CPPUNIT_ASSERT(expected == library::sto<int long long unsigned>(specimen));
  }
}
#import rigging.suite.io
auto tests::unit::sto::fixture::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  auto suite  = Stream{"sto"};
  suite << call("call-them-all", &Fixture::test_call_them_all)
        << []{
             auto each = Stream{"each"};
             each << call("char signed", &Fixture::test_call_them_each<char signed>)
                  << call("char unsigned", &Fixture::test_call_them_each<char unsigned>)
                  << call("int short signed", &Fixture::test_call_them_each<int short signed>)
                  << call("int short unsigned", &Fixture::test_call_them_each<int short unsigned>)
                  << call("int signed", &Fixture::test_call_them_each<int signed>)
                  << call("int unsigned", &Fixture::test_call_them_each<int unsigned>)
                  << call("int long signed", &Fixture::test_call_them_each<int long signed>)
                  << call("int long unsigned", &Fixture::test_call_them_each<int long unsigned>)
                  << call("int long long signed", &Fixture::test_call_them_each<int long long signed>)
                  << call("int long long unsigned", &Fixture::test_call_them_each<int long long unsigned>)
                  << END;
             return move(each);
           }()             
        << END;
  return finalize(suite);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::path::filename::mount {
  class Unbound;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import std.string
class tests::unit::path::filename::mount::Unbound : public cppunit::test::Fixture {
public:
  auto test_constructor() -> void;

  auto test_bind_reference_string() -> void;

  auto test_bind_value_char_pointer() -> void;
  auto test_bind_value_char_manifest_array() -> void;
  auto test_bind_value_stringz() -> void;
  auto test_bind_value_string() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import nonstd.path.filename.mount.Unbound

auto tests::unit::path::filename::mount::Unbound::test_constructor() -> void {
  ::nonstd::path::filename::mount::Unbound u;
  CPPUNIT_ASSERT(sizeof (u));
}

auto tests::unit::path::filename::mount::Unbound::test_bind_reference_string() -> void {
  ::nonstd::path::filename::mount::Unbound u;
  std::string lhs("/apple");
  auto bound = std::move(u) % lhs;
  CPPUNIT_ASSERT(bound.subject == lhs);
}

auto tests::unit::path::filename::mount::Unbound::test_bind_value_char_pointer() -> void {
  ::nonstd::path::filename::mount::Unbound u;
  std::string const rhs("/banana");
  auto bound = std::move(u) * rhs;
  CPPUNIT_ASSERT(bound.subject == rhs);
}

auto tests::unit::path::filename::mount::Unbound::test_bind_value_char_manifest_array() -> void {
  ::nonstd::path::filename::mount::Unbound u;
  char const rhs[] = "/cherry";
  auto bound = std::move(u) * rhs;
  CPPUNIT_ASSERT(bound.subject == rhs);
}

#import c.const_stringz
#import c.str
auto tests::unit::path::filename::mount::Unbound::test_bind_value_stringz() -> void {
  ::nonstd::path::filename::mount::Unbound u;
  c::const_stringz const rhs("/dog");
  auto bound = std::move(u) * rhs;
  CPPUNIT_ASSERT(bound.subject == c::str(rhs));
}

#import std.string
auto tests::unit::path::filename::mount::Unbound::test_bind_value_string() -> void {
  ::nonstd::path::filename::mount::Unbound u;
  std::string const rhs("/eagle");
  auto bound = std::move(u) * rhs;
  CPPUNIT_ASSERT(bound.subject == rhs);
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
auto tests::unit::path::filename::mount::Unbound::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("Unbound");
  s << call("constructor", &Unbound::test_constructor)
    << call("bind_reference_string", &Unbound::test_bind_reference_string)
    << call("bind_value_char_pointer", &Unbound::test_bind_value_char_pointer)
    << call("bind_value_char_manifest_array", &Unbound::test_bind_value_char_manifest_array)
    << call("bind_value_stringz", &Unbound::test_bind_value_stringz)
    << call("bind_value_string", &Unbound::test_bind_value_string)
    ;
  return finalize(s);
}
#endiv

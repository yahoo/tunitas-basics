// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::path::filename::mount {
  class Value;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import std.string
class tests::unit::path::filename::mount::Value : public cppunit::test::Fixture {
public:
  auto test_constructor_iterators() -> void;
  auto test_constructor_move() -> void;
  auto test_constructor_copy() -> void;
  auto test_operator_star_prepend() -> void;
  auto test_operator_star_append() -> void;
  auto test_operator_slash_prepend() -> void;
  auto test_operator_slash_append() -> void;
  auto test_finalize() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import nonstd.path.filename.mount.Value

#import c.str
#import c.const_stringz
auto tests::unit::path::filename::mount::Value::test_constructor_iterators() -> void {
  c::const_stringz csz = "a stringy thingy";
  ::nonstd::path::filename::mount::Value value(csz.begin(), csz.end());
  CPPUNIT_ASSERT(!value.subject.empty());
  CPPUNIT_ASSERT(value.subject == c::str(csz));
}

#import std.move
auto tests::unit::path::filename::mount::Value::test_constructor_move() -> void {
  std::string const original("ESPN NBA Wednesday");
  std::string something(original);
  ::nonstd::path::filename::mount::Value value(std::move(something)); // this "moves" something and empties it
  CPPUNIT_ASSERT(something.empty());
  CPPUNIT_ASSERT(!value.subject.empty());
  CPPUNIT_ASSERT(original == value.subject);
}

auto tests::unit::path::filename::mount::Value::test_constructor_copy() -> void {
  std::string const something("The Nicks have 32 points");
  ::nonstd::path::filename::mount::Value value(something);
  CPPUNIT_ASSERT(!something.empty());
  CPPUNIT_ASSERT(!value.subject.empty());
  CPPUNIT_ASSERT(something == value.subject);
}

auto tests::unit::path::filename::mount::Value::test_operator_star_prepend() -> void {
  std::string words("Despite What System They Run");
  ::nonstd::path::filename::mount::Value value(words);
  auto result = "and-some-other-stuff" * std::move(value); // <---- test this
  std::cout << "result=qq|" << result.subject << "|\n";
  auto final = finalize(std::move(result));
  CPPUNIT_ASSERT(!final.empty());
  std::string const actual = final;
  std::string const expected = "and-some-other-stuff.Despite What System They Run";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::path::filename::mount::Value::test_operator_star_append() -> void {
  std::string words("Despite What System They Run");
  ::nonstd::path::filename::mount::Value value(words);
  auto result = std::move(value) * "and-some-other-stuff"; // <---- test this
  std::cout << "result=qq|" << result.subject << "|\n";
  auto final = finalize(std::move(result));
  CPPUNIT_ASSERT(!final.empty());
  std::string const actual = final;
  std::string const expected = "Despite What System They Run.and-some-other-stuff";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::path::filename::mount::Value::test_operator_slash_prepend() -> void {
  std::string words("Despite What System They Run");
  ::nonstd::path::filename::mount::Value value(words);
  auto result = "and-some-other-stuff" / std::move(value); // <---- test this
  std::cout << "result=qq|" << result.subject << "|\n";
  auto final = finalize(std::move(result));
  CPPUNIT_ASSERT(!final.empty());
  std::string const actual = final;
  std::string const expected = "and-some-other-stuff/Despite What System They Run";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::path::filename::mount::Value::test_operator_slash_append() -> void {
  std::string words("Despite What System They Run");
  ::nonstd::path::filename::mount::Value value(words);
  auto result = std::move(value) / "and-some-other-stuff"; // <---- test this
  std::cout << "result=qq|" << result.subject << "|\n";
  auto final = finalize(std::move(result));
  CPPUNIT_ASSERT(!final.empty());
  std::string const actual = final;
  std::string const expected = "Despite What System They Run/and-some-other-stuff";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::path::filename::mount::Value::test_finalize() -> void {
  std::string words("Despite What System They Run");
  ::nonstd::path::filename::mount::Value value(words);
  auto result = std::move(value) / "and-some-other-stuff";
  auto final = finalize(std::move(result));
  std::cout << "result=qq|" << final << "|\n";
  CPPUNIT_ASSERT(!final.empty());
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
auto tests::unit::path::filename::mount::Value::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("Value");
  s << call("constructor-iterators", &Value::test_constructor_iterators)
    << call("constructor-move", &Value::test_constructor_move)
    << call("constructor-copy", &Value::test_constructor_copy)
    << call("operator*-prepend", &Value::test_operator_star_prepend)
    << call("operator*-append", &Value::test_operator_star_append)
    << call("operator/-prepend", &Value::test_operator_slash_prepend)
    << call("operator/-append", &Value::test_operator_slash_append)
    << call("finalize", &Value::test_finalize)
    ;
  return finalize(s);
}
#endiv

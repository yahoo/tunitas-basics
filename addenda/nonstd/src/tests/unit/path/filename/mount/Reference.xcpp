// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::path::filename::mount {
  class Reference;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import std.string
class tests::unit::path::filename::mount::Reference : public cppunit::test::Fixture {
public:
  auto test_constructor_reference() -> void;
  auto test_operator_star_prepend() -> void;
  auto test_operator_star_append() -> void;
  auto test_operator_slash_prepend() -> void;
  auto test_operator_slash_append() -> void;
  auto test_finalize() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import nonstd.path.filename.mount.Reference

#import c.const_stringz
auto tests::unit::path::filename::mount::Reference::test_constructor_reference() -> void {
  std::string something = "that deflection was extraordinary";
  ::nonstd::path::filename::mount::Reference value(something);
  CPPUNIT_ASSERT(!value.subject.empty());
  CPPUNIT_ASSERT(value.subject == something);
}

auto tests::unit::path::filename::mount::Reference::test_operator_star_prepend() -> void {
  std::string words("Despite What System They Run");
  ::nonstd::path::filename::mount::Reference value(words);
  auto result = "and-some-other-stuff" * std::move(value); // <---- test this
  std::cout << "result=qq|" << result.subject << "|\n";
  auto final = finalize(std::move(result));
  CPPUNIT_ASSERT(!final.empty());
  std::string const actual = final;
  std::string const expected = "and-some-other-stuff.Despite What System They Run";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::path::filename::mount::Reference::test_operator_star_append() -> void {
  std::string words("Despite What System They Run");
  ::nonstd::path::filename::mount::Reference value(words);
  auto result = std::move(value) * "and-some-other-stuff"; // <---- test this
  std::cout << "result=qq|" << result.subject << "|\n";
  auto final = finalize(std::move(result));
  CPPUNIT_ASSERT(!final.empty());
  std::string const actual = final;
  std::string const expected = "Despite What System They Run.and-some-other-stuff";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::path::filename::mount::Reference::test_operator_slash_prepend() -> void {
  std::string words("Despite What System They Run");
  ::nonstd::path::filename::mount::Reference value(words);
  auto result = "and-some-other-stuff" / std::move(value); // <---- test this
  std::cout << "result=qq|" << result.subject << "|\n";
  auto final = finalize(std::move(result));
  CPPUNIT_ASSERT(!final.empty());
  std::string const actual = final;
  std::string const expected = "and-some-other-stuff/Despite What System They Run";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::path::filename::mount::Reference::test_operator_slash_append() -> void {
  std::string words("Despite What System They Run");
  ::nonstd::path::filename::mount::Reference value(words);
  auto result = std::move(value) / "and-some-other-stuff"; // <---- test this
  std::cout << "result=qq|" << result.subject << "|\n";
  auto final = finalize(std::move(result));
  CPPUNIT_ASSERT(!final.empty());
  std::string const actual = final;
  std::string const expected = "Despite What System They Run/and-some-other-stuff";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::path::filename::mount::Reference::test_finalize() -> void {
  std::string words("Despite What System They Run");
  ::nonstd::path::filename::mount::Reference value(words);
  auto result = std::move(value) / "and-some-other-stuff";
  auto final = finalize(std::move(result));
  std::cout << "result=qq|" << final << "|\n";
  CPPUNIT_ASSERT(!final.empty());
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
auto tests::unit::path::filename::mount::Reference::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("Reference");
  s << call("constructor-reference", &Reference::test_constructor_reference)
    << call("operator*-prepend", &Reference::test_operator_star_prepend)
    << call("operator*-append", &Reference::test_operator_star_append)
    << call("operator/-prepend", &Reference::test_operator_slash_prepend)
    << call("operator/-append", &Reference::test_operator_slash_append)
    << call("finalize", &Reference::test_finalize)
    ;
  return finalize(s);
}
#endiv

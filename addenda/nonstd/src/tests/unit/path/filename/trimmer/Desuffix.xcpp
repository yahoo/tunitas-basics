// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::path::filename::trimmer {
  class Desuffix;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import std.string
class tests::unit::path::filename::trimmer::Desuffix : public cppunit::test::Fixture {
public:
  auto test_constructor() -> void;
  auto test_operator_insert_good_wholematch() -> void;
  auto test_operator_insert_good_slash() -> void;
  auto test_operator_insert_good_submatch() -> void;
  auto test_operator_insert_good_multislash() -> void;
  auto test_operator_insert_bad() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import nonstd.path.filename.trimmer.Workbench
#import nonstd.path.filename.trimmer.Desuffix
#import std.string
auto tests::unit::path::filename::trimmer::Desuffix::test_constructor() -> void {
  ::nonstd::path::filename::trimmer::Desuffix d(".o");
  // Whee! it constructed
  CPPUNIT_ASSERT(true);
}

auto tests::unit::path::filename::trimmer::Desuffix::test_operator_insert_good_wholematch() -> void {
  std::string specimen = "filename.o";
  std::string suffix = "filename.o";
  ::nonstd::path::filename::trimmer::Workbench workbench(specimen);
  ::nonstd::path::filename::trimmer::Desuffix desuffix(suffix);
  workbench << desuffix;
  std::string actual = specimen;
  std::string expected = ""; // <------- yup, empty
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::path::filename::trimmer::Desuffix::test_operator_insert_good_slash() -> void {
  std::string specimen = "/filename.o";
  std::string suffix = "filename.o";
  ::nonstd::path::filename::trimmer::Workbench workbench(specimen);
  ::nonstd::path::filename::trimmer::Desuffix desuffix(suffix);
  workbench << desuffix;
  std::string actual = specimen;
  std::string expected = ""; // <------- yup, leave it empty (unclear what the right answer ought to be)
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::path::filename::trimmer::Desuffix::test_operator_insert_good_submatch() -> void {
  std::string specimen = ".../apple/banana/filename.o";
  std::string suffix = "filename.o";
  ::nonstd::path::filename::trimmer::Workbench workbench(specimen);
  ::nonstd::path::filename::trimmer::Desuffix desuffix(suffix);
  workbench << desuffix;
  std::string actual = specimen;
  std::string expected = ".../apple/banana";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::path::filename::trimmer::Desuffix::test_operator_insert_good_multislash() -> void {
  std::string specimen = "/apple/banana//////filename.o";
  std::string suffix = "filename.o";
  ::nonstd::path::filename::trimmer::Workbench workbench(specimen);
  ::nonstd::path::filename::trimmer::Desuffix desuffix(suffix);
  workbench << desuffix;
  std::string actual = specimen;
  std::string expected = "/apple/banana";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::path::filename::trimmer::Desuffix::test_operator_insert_bad() -> void {
  std::string specimen = "/apple/banana/filename.o";
  std::string suffix = "BOGON";
  ::nonstd::path::filename::trimmer::Workbench workbench(specimen);
  ::nonstd::path::filename::trimmer::Desuffix desuffix(suffix);
  workbench << desuffix;
  std::string actual = specimen;
  std::string expected = "/apple/banana/filename.o";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
#import unit.rigging.suite.add
auto tests::unit::path::filename::trimmer::Desuffix::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("Desuffix");
  s << call("constructor", &Desuffix::test_constructor)
    << call("operator<<-good_wholematch", &Desuffix::test_operator_insert_good_wholematch)
    << call("operator<<-good_slash", &Desuffix::test_operator_insert_good_slash)
    << call("operator<<-good_submatch", &Desuffix::test_operator_insert_good_submatch)
    << call("operator<<-good_multislash", &Desuffix::test_operator_insert_good_multislash)
    << call("operator<<-bad", &Desuffix::test_operator_insert_bad)
    ;
  return finalize(s);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::path::filename::trimmer {
  class Fixture;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import std.string
class tests::unit::path::filename::trimmer::Fixture : public cppunit::test::Fixture {
public:
  auto test_deprefix() -> void;
  auto test_desuffix() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import nonstd.path.filename.trim
#import nonstd.path.filename.deprefix
#import std.string
auto tests::unit::path::filename::trimmer::Fixture::test_deprefix() -> void {
  using namespace ::nonstd::path::filename;
  std::string subject = "/home/USER/.config/application/filename";
  std::string pattern = "/home/USER";
  trim(subject) << deprefix(pattern);
  std::string actual = subject;
  std::string expected = ".config/application/filename";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

#import nonstd.path.filename.trim
#import nonstd.path.filename.desuffix
#import std.string
auto tests::unit::path::filename::trimmer::Fixture::test_desuffix() -> void {
  using namespace ::nonstd::path::filename;
  std::string subject = "/home/USER/.config/application/filename";
  std::string pattern = ".config/application/filename";
  trim(subject) << desuffix(pattern);
  std::string actual = subject;
  std::string expected = "/home/USER";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

#import tests.unit.path.filename.trimmer.Deprefix
#import tests.unit.path.filename.trimmer.Desuffix
#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
#import unit.rigging.suite.add
auto tests::unit::path::filename::trimmer::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("trimmer");
  s << call("deprefix-usage", &Fixture::test_deprefix)
    << call("desuffix-usage", &Fixture::test_desuffix)
    << add<Deprefix>()
    << add<Desuffix>()
    ;
  return finalize(s);
}
#endiv

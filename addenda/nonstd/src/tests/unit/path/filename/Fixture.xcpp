// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::path::filename {
  class Fixture;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import std.string
class tests::unit::path::filename::Fixture : public cppunit::test::Fixture {
public:
  auto test_workbench_by_reference() -> void;
  auto test_workbench_by_value() -> void;
  auto test_join_container() -> void;
  auto test_join_iterators() -> void;
  auto test_join_operator_div() -> void;
  auto test_join_operator_mul() -> void;
  auto test_joining_operator_div() -> void;
  auto test_joining_operator_mul() -> void;
  auto test_trim() -> void;
  auto test_deprefix() -> void;
  auto test_desuffix() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import nonstd.path.filename.workbench
#import nonstd.path.filename.join
#import nonstd.path.filename.trim
#import nonstd.path.filename.deprefix
#import nonstd.path.filename.desuffix
#import std.string
#import std.vector

auto tests::unit::path::filename::Fixture::test_workbench_by_value() -> void {
  auto const actual = finalize(::nonstd::path::filename::workbench() * "/apple" / "banana");
  std::string const expected = "/apple/banana";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::path::filename::Fixture::test_workbench_by_reference() -> void {
  std::string apple_as_lhs = "./apple";
  auto const actual = finalize(::nonstd::path::filename::workbench() % apple_as_lhs / "banana");
  std::string const expected = "./apple/banana";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::path::filename::Fixture::test_join_container() -> void {
  std::vector<std::string> joinable{"a", "b", "c", "d", "e"};
  auto const actual = finalize(::nonstd::path::filename::workbench() * ::nonstd::path::filename::join('.', joinable));
  std::string const expected = "a.b.c.d.e";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::path::filename::Fixture::test_join_iterators() -> void {
  std::vector<std::string> joinable{"a", "b", "c", "d", "e"};
  auto const actual = finalize(::nonstd::path::filename::workbench() * ::nonstd::path::filename::join('.', joinable.begin(), joinable.end()));
  std::string const expected = "a.b.c.d.e";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::path::filename::Fixture::test_join_operator_div() -> void {
  std::string lhs = "lhs";
  std::vector<std::string> joinable{"a", "b", "c", "d", "e"};
  auto const actual = finalize(::nonstd::path::filename::workbench() * lhs / ::nonstd::path::filename::join('.', joinable));
  std::string const expected = "lhs/a.b.c.d.e";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::path::filename::Fixture::test_join_operator_mul() -> void {
  std::string lhs = "lhs";
  std::vector<std::string> joinable{"a", "b", "c", "d", "e"};
  auto const actual = finalize(::nonstd::path::filename::workbench() * ::nonstd::path::filename::join('.', joinable));
  std::string const expected = "a.b.c.d.e";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

#import nonstd.path.filename.joining
#import std.string
#import std.vector
auto tests::unit::path::filename::Fixture::test_joining_operator_div() -> void {
  std::string lhs = "lhs";
  auto const actual = finalize(::nonstd::path::filename::workbench() * lhs / ::nonstd::path::filename::joining('.', "a", "b", "c", "d", "e"));
  std::string const expected = "lhs/a.b.c.d.e";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::path::filename::Fixture::test_joining_operator_mul() -> void {
  std::string lhs = "lhs";
  auto const actual = finalize(::nonstd::path::filename::workbench() * ::nonstd::path::filename::joining('.', "a", "b", "c", "d", "e"));
  std::string const expected = "a.b.c.d.e";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

#import nonstd.path.filename.trim
#import nonstd.path.filename.desuffix
#import nonstd.path.filename.deprefix
auto tests::unit::path::filename::Fixture::test_trim() -> void {
  using ::nonstd::path::filename::trim;
  using ::nonstd::path::filename::desuffix;
  using ::nonstd::path::filename::deprefix;
  std::string subject("src/obj/package/subpackage/filename.o");
  std::string suffix("filename.o");
  std::string prefix("src/obj");
  trim(subject) << deprefix(prefix) << desuffix(suffix);
  std::string actual = subject;
  std::string expected = "package/subpackage";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::path::filename::Fixture::test_deprefix() -> void {
  using ::nonstd::path::filename::trim;
  using ::nonstd::path::filename::deprefix;
  std::string subject("src/obj//package/subpackage/filename.o");
  std::string prefix("src/obj");
  trim(subject) << deprefix(prefix);
  std::string actual = subject;
  std::string expected = "package/subpackage/filename.o";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::path::filename::Fixture::test_desuffix() -> void {
  using ::nonstd::path::filename::trim;
  using ::nonstd::path::filename::desuffix;
  std::string subject("src/obj/package/subpackage//filename.o");
  std::string suffix("filename.o");
  trim(subject) << desuffix(suffix);
  std::string actual = subject;
  std::string expected = "src/obj/package/subpackage";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

#import tests.unit.path.filename.has.Fixture
#import tests.unit.path.filename.mount.Fixture
#import tests.unit.path.filename.trimmer.Fixture
#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
#import unit.rigging.suite.add
auto tests::unit::path::filename::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("filename");
  s << call("workbench-value", &Fixture::test_workbench_by_value)
    << call("workbench-reference", &Fixture::test_workbench_by_reference)
    << call("join-container", &Fixture::test_join_container)
    << call("join-iterators", &Fixture::test_join_iterators)
    << call("join-/", &Fixture::test_join_operator_div)
    << call("join-*", &Fixture::test_join_operator_mul)
    << call("joining-/", &Fixture::test_joining_operator_div)
    << call("joining-*", &Fixture::test_joining_operator_mul)
    << call("trim", &Fixture::test_trim)
    << call("deprefix", &Fixture::test_deprefix)
    << call("desuffix", &Fixture::test_desuffix)
    << add<has::Fixture>()
    << add<mount::Fixture>()
    << add<trimmer::Fixture>()
    ;
  return finalize(s);
}
#endiv

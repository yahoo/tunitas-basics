// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::error::to_integer { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
class tests::unit::error::to_integer::Fixture : public cppunit::test::Fixture {
public:
  auto test_Code() -> void;
  auto test_make_error_code() -> void;
  auto test_Condition() -> void;
  auto test_make_error_condition() -> void;
  auto test_category() -> void;
  auto test_Category() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.string_literals
using namespace std::string_literals;
#import nonstd.error.to_integer.Code
auto tests::unit::error::to_integer::Fixture::test_Code() -> void {
  using namespace ::nonstd::error::to_integer;
  CPPUNIT_ASSERT_EQUAL(0, (int)  Code::SUCCESS);
}
auto tests::unit::error::to_integer::Fixture::test_make_error_code() -> void {
  using namespace ::nonstd::error::to_integer;
  auto c = make_error_code(Code::INVALID_ARGUMENT);
  CPPUNIT_ASSERT(0 != (int) c.value());
}
#import nonstd.error.to_integer.Condition
auto tests::unit::error::to_integer::Fixture::test_Condition() -> void {
  using namespace ::nonstd::error::to_integer;
  CPPUNIT_ASSERT_EQUAL(1, (int)  Condition::FAILURE);
}
auto tests::unit::error::to_integer::Fixture::test_make_error_condition() -> void {
  using namespace ::nonstd::error::to_integer;
  auto c = make_error_condition(Condition::FAILURE);
  CPPUNIT_ASSERT_EQUAL(1, (int) c.value());
}
#import nonstd.error.to_integer.category
auto tests::unit::error::to_integer::Fixture::test_category() -> void {
  using namespace ::nonstd::error::to_integer;
  auto const &subject = category();
  auto const expected = "to_integer"s;
  std::string const actual = subject.name();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
#import nonstd.error.to_integer.Category
auto tests::unit::error::to_integer::Fixture::test_Category() -> void {
  using namespace ::nonstd::error::to_integer;
  auto const &subject = category();
  for (auto i{0}, e{100}; e != i; ++i) {
    // Just show that getting the error message for arbitrary integers is survivable
    auto s = subject.message(e);
    CPPUNIT_ASSERT(!s.empty());
  }
}
#import rigging.suite.io
auto tests::unit::error::to_integer::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("to_integer");
  series << call("Code", &Fixture::test_Code)
         << call("make_error_code", &Fixture::test_make_error_code)
         << call("Condition", &Fixture::test_Condition)
         << call("make_error_condition", &Fixture::test_make_error_condition)
         << call("category", &Fixture::test_category)
         << call("Category", &Fixture::test_Category)
    ;
  return finalize(series);
}
#endiv

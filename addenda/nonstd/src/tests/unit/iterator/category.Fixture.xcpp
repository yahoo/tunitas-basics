// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd.iterator.category
#import nonstd.required
namespace tests::unit::iterator::category {
  namespace fixture {
    class Fixture;
    namespace library = ::nonstd::iterator::category;
    namespace newlib = library;
    namespace oldlib = ::nonstd;
    namespace required = ::nonstd::required;
  }
  using fixture::Fixture;
}
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
struct tests::unit::iterator::category::fixture::Fixture : public cppunit::test::Fixture {
  auto test_tags_old_school() -> void;
  auto test_tags_NewSchool() -> void;
  auto test_requireds() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
// Show these "work'
#import nonstd.iterator.category.Output
#import nonstd.iterator.category.Input
#import nonstd.iterator.category.Forward
#import nonstd.iterator.category.Bidirectional
#import nonstd.iterator.category.Random_Access
#import nonstd.iterator.category.Contiguous
// Show these "work'
#import nonstd.output_iterator_tag
#import nonstd.input_iterator_tag
#import nonstd.forward_iterator_tag
#import nonstd.bidirectional_iterator_tag
#import nonstd.random_access_iterator_tag
#import nonstd.contiguous_iterator_tag
// Show these "work'
#import nonstd.required.iterator.Output
#import nonstd.required.iterator.Input
#import nonstd.required.iterator.Forward
#import nonstd.required.iterator.Bidirectional
#import nonstd.required.iterator.Random_Access
#import nonstd.required.iterator.Contiguous
namespace tests::unit::iterator::category::fixture {
  auto Fixture::test_tags_old_school() -> void {
    using oldlib::output_iterator_tag;
    using oldlib::input_iterator_tag;
    using oldlib::forward_iterator_tag;
    using oldlib::bidirectional_iterator_tag;
    using oldlib::random_access_iterator_tag;
    using oldlib::contiguous_iterator_tag;
  }
  auto Fixture::test_tags_NewSchool() -> void {
    using newlib::Output;
    using newlib::Input;
    using newlib::Forward;
    using newlib::Bidirectional;
    using newlib::Random_Access;
    using newlib::Contiguous;
  }
  auto Fixture::test_requireds() -> void {
    using required::iterator::Output;
    using required::iterator::Input;
    using required::iterator::Forward;
    using required::iterator::Bidirectional;
    using required::iterator::Random_Access;
    using required::iterator::Contiguous;
  }
}
#import rigging.suite.io
auto tests::unit::iterator::category::fixture::Fixture::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  auto series = Stream{"category"};
  series << []() {
              auto tags = Stream{"tags"};
              tags << call("old_school", &Fixture::test_tags_old_school)
                   << call("NewSchool", &Fixture::test_tags_NewSchool)
                   << END;
              return tags;
            }()
         << call("requireds", &Fixture::test_requireds)
         << END;
  return finalize(series);
}
#endiv

// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd.iterator
#import nonstd.required.iterator
namespace tests::unit::iterator {
  namespace fixture {
    class Fixture;
    namespace library = ::nonstd::iterator;
    namespace required = ::nonstd::required::iterator;
  }
  using fixture::Fixture;
}
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
struct tests::unit::iterator::fixture::Fixture : public cppunit::test::Fixture {
  auto test_Traits() -> void;
  auto test_Category() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <ipp>
#import nonstd
#import std.is_same
namespace tests::unit::iterator::fixture {
  using std::is_same;
  using std::is_same_v;
}
#endiv
#divert <cpp>
#import std.is_same
#import nonstd.iterator.Traits
#import nonstd.required.iterator.Category
#import nonstd.iterator_tags // the whole iterator_tag hierarchy
namespace tests::unit::iterator::fixture {
  auto Fixture::test_Traits() -> void {
    using Retraits = library::Traits<char const *>;
    static_assert(std::is_same<Retraits::Value, char>::value);
    static_assert(std::is_same<Retraits::Difference, std::ptrdiff_t>::value);
    static_assert(std::is_same<Retraits::Pointer, char const *>::value);
    static_assert(std::is_same<Retraits::Reference, char const &>::value);
  }
  auto Fixture::test_Category() -> void {
    using required::Category;
    using namespace ::nonstd;
    static_assert(Category<output_iterator_tag>);
    static_assert(Category<input_iterator_tag>);
    static_assert(Category<forward_iterator_tag>);
    static_assert(Category<bidirectional_iterator_tag>);
    static_assert(Category<undirected_iterator_tag>);
    static_assert(Category<random_access_iterator_tag>);
    static_assert(Category<contiguous_iterator_tag>);
    static_assert(not Category<int>);
  }
}
#import tests.unit.iterator.category.Fixture
#import rigging.suite.io
auto tests::unit::iterator::fixture::Fixture::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  auto series = Stream{"iterator"};
  series << call("Traits", &Fixture::test_Traits)
         << call("Category", &Fixture::test_Category)
         << add<category::Fixture>()
         << END;
  return finalize(series);
}
#endiv

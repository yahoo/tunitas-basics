// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::to_integer {
  template<required::Integer> class Dispatcher;
}
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
#import nonstd.detail.to_integer.Dispatcher
namespace tests::unit {
  template<to_integer::required::Integer INTEGER> struct to_integer::Dispatcher : public cppunit::test::Fixture {
    using Integer = INTEGER;
    using Subject = ::nonstd::detail::to_integer::Dispatcher<Integer>;
    auto test_usage_to_integer() -> void;
    auto test_usage_sto() -> void;
    static auto suite() -> cppunit::Test *;
  };
}
#endiv
#divert <tpp>
#import std.exception
namespace tests::unit::to_integer {
  template<required::Integer _> auto Dispatcher<_>::test_usage_to_integer() -> void {
    Subject subject;
    // Call them all and see what happens
    subject.template to_integer(typename Subject::View{""}, 10); // call the function on a view
    subject.to_integer(string::View{""}, 10);
    subject.to_integer(string::Storage{}, 10); // call the template on a dope
    CPPUNIT_ASSERT(true);
  }
  template<required::Integer _> auto Dispatcher<_>::test_usage_sto() -> void {
    // Call them all and see what happens
    Subject subject;
    try { subject.template  sto(typename Subject::View{""}, 10); CPPUNIT_ASSERT(true); } catch (std::exception const &) { }
    try { subject.sto(string::View{""}, 10);                     CPPUNIT_ASSERT(true); } catch (std::exception const &) { }
    try { subject.sto(string::Storage{}, 10);                    CPPUNIT_ASSERT(true); } catch (std::exception const &) { }
    CPPUNIT_ASSERT(true);
  }
}
#import rigging.suite.io
#import std.type_info
namespace tests::unit::to_integer  {
  template<required::Integer _> auto Dispatcher<_>::suite() -> cppunit::Test * {
    using namespace ::rigging::suite;
    Stream suite{"Dispatcher<"s + typeid(Integer).name() + ">"s};
    suite << []() {
               Stream use{"usage"};
               use << call("to_integer", &Dispatcher::test_usage_to_integer)
                   << call("sto", &Dispatcher::test_usage_sto)
                   << END;
               return use;
             }()
          << END;
    return finalize(suite);
  }
}
#endiv

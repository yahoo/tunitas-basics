// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import tests.unit.regex.Fixture
#endiv
#divert <cpp>
#import std.copy
#import std.ostream_iterator
#import std.string
#import std.string_literals
using namespace std::string_literals;
#import nonstd.regex.Iterator
#import nonstd.regex.Pattern
#import nonstd.regex.matching.Results
auto tests::unit::regex::Fixture::test_usage_01() -> void {
  // from https://en.cppreference.com/w/cpp/regex/regex_iterator
  auto const specimen = "Quick brown fox."s;
  auto words_pattern = ::nonstd::regex::Pattern{"[^\\s]+"};
  using Iterator = ::nonstd::regex::Iterator<std::string::const_iterator>;
  auto const words_begin = Iterator{specimen.begin(), specimen.end(), words_pattern};
  auto const words_end = Iterator{};
  auto const expected_count = 3lu;
  std::size_t const actual_count = std::distance(words_begin, words_end);
  CPPUNIT_ASSERT_EQUAL(expected_count, actual_count);
  for (Iterator i = words_begin; i != words_end; ++i) {
    using Match = ::nonstd::regex::matching::Results<std::string::const_iterator>;
    Match match = *i;                                                 
    std::string match_str = match.str(); 
    std::cerr << match_str << '\n';
  }   
}
#import nonstd.regex.Token_Iterator
auto tests::unit::regex::Fixture::test_usage_02() -> void {
  // From https://en.cppreference.com/w/cpp/regex/regex_token_iterator
   std::string specimen = "Quick brown fox.";
   // tokenization (non-matched fragments)
   // Note that regex is matched only two times: when the third value is obtained
   // the iterator is a suffix iterator.
   nonstd::regex::Pattern whitespace("\\s+"); // whitespace
   using Iterator = ::nonstd::regex::Token_Iterator<std::string::const_iterator>;
   std::ostream_iterator<std::string> sink{std::cerr, "\n"};
   auto const submatch = -1; // i.e. the non-matched parts
   std::copy(Iterator{specimen.begin(), specimen.end(), whitespace, submatch}, Iterator(), sink);
}
#import nonstd.regex.Token_Iterator
#import nonstd.regex.Pattern
auto tests::unit::regex::Fixture::test_usage_03() -> void {
    // iterating the first submatches
   std::string html = ("<p><a href=\"http://example.com\">example</a> "
                       "< a     HREF      =\"http://cppreference.com\">cppreference</a>\n</p>");
   ::nonstd::regex::Pattern url_re("<\\s*A\\s+[^>]*href\\s*=\\s*\"([^\"]*)\"", std::regex::icase);
   using Iterator = ::nonstd::regex::Token_Iterator<std::string::const_iterator>;
   std::ostream_iterator<std::string> sink{std::cerr, "\n"};
   auto const submatch = 1; // i.e. match #1
   auto const base = Iterator{html.begin(), html.end(), url_re, submatch};
   auto end = Iterator{};
   std::copy(base, end, sink);
}
#endiv

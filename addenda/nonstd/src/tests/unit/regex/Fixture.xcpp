// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::regex { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
#import std.string
struct tests::unit::regex::Fixture : public cppunit::test::Fixture {
  auto test_usage_01() -> void;
  auto test_usage_02() -> void;
  auto test_usage_03() -> void;
  auto test_usage_04() -> void;
  // headline types
  auto test_Error() -> void;
  auto test_Pattern_Basic() -> void;
  auto test_Pattern_char() -> void;
  auto test_Expression_Basic() -> void;
  auto test_Expression_char() -> void;
  auto test_Iterator() -> void;
  auto test_Token_Iterator() -> void;
  auto test_Traits() -> void;
  // constants
  auto test_constants_error() -> void;
  auto test_constants_formatting() -> void;
  auto test_constants_matching() -> void;
  auto test_constants_syntax() -> void;
  // functions
  auto test_function_match() -> void;
  auto test_function_replace() -> void;
  auto test_function_search() -> void;
  auto test_function_swap() -> void;
  // helper types
  auto test_matching_Results() -> void;
  auto test_matching_Sub() -> void;
  // concepts
  auto test_required_Char() -> void;
  auto test_required_Char_Traits() -> void;
  auto test_required_Traits() -> void;
  auto test_required_iterator_Bidirectional() -> void;
  auto test_required_iterator_Input() -> void;
  auto test_required_iterator_Output() -> void;
  // 
  static auto suite() -> cppunit::Test *;
protected:
  auto generate_a_to_z() -> std::string;
};
#endiv
#divert <cpp>
auto tests::unit::regex::Fixture::generate_a_to_z() -> std::string {
  return "apple banana cherry dog eagle frog goat harpie idiot jackass kangaroo llama marmot narwhal ocelot possum quail rat seal turkey usufruct vole whale xylotyl yak zebra"s;
}
#import tests.unit.regex.Match
#import tests.unit.regex.Search
#import tests.unit.regex.Replace
#import rigging.suite.io
auto tests::unit::regex::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  auto series = Stream{"regex"};
  series << []() {
              auto use = Stream{"usage"};
              use << call("01", &Fixture::test_usage_01)
                  << call("02", &Fixture::test_usage_02)
                  << call("03", &Fixture::test_usage_03)
                  << END;
              return use;
            }()
         << call("Error", &Fixture::test_Error)
         << call("Iterator", &Fixture::test_Iterator)
         << call("Token_Iterator", &Fixture::test_Token_Iterator)
         << call("Traits", &Fixture::test_Traits)
         << [](){
              auto pat = Stream{"Pattern"};
              pat << call("Basic", &Fixture::test_Pattern_Basic)
                  << call("char", &Fixture::test_Pattern_char)
                  << END;
              return pat;
            }()
         << []() {
              auto exp = Stream{"Expression"};
              exp << call("Basic", &Fixture::test_Expression_Basic)
                  << call("char", &Fixture::test_Expression_char)
                  << END;
              return exp;
            }()
         << []() {
              auto con = Stream{"constants"};
              con << call("error", &Fixture::test_constants_error)
                  << call("formatting", &Fixture::test_constants_formatting)
                  << call("matching", &Fixture::test_constants_matching)
                  << call("syntax", &Fixture::test_constants_syntax)
                  << END;
              return con;
            }()
         << [](){
              auto fun = Stream{"function"};
              fun << [](){
                       auto sim = Stream{"simple"};
                       sim << call("match", &Fixture::test_function_match)
                           << call("replace", &Fixture::test_function_replace)
                           << call("search", &Fixture::test_function_search)
                           << call("swap", &Fixture::test_function_swap)
                           << END;
                       return sim;
                     }()
                  << add<Match>()
                  << add<Search>()
                  << add<Replace>()
                  << END;
              return fun;
            }()
         << []() {
              auto mat = Stream{"matching"};
              mat << call("Results", &Fixture::test_matching_Results)
                  << call("Sub", &Fixture::test_matching_Sub)
                  << END;
              return mat;
            }()
         << [] {
              auto req = Stream{"required"};
              req << call("Char", &Fixture::test_required_Char)
                  << call("Char_Traits", &Fixture::test_required_Char_Traits)
                  << call("Traits", &Fixture::test_required_Traits)
                  << [](){
                       auto ite = Stream{"iterator"};
                       ite << call("Bidirectional", &Fixture::test_required_iterator_Bidirectional)
                           << call("Input", &Fixture::test_required_iterator_Input)
                           << call("Output", &Fixture::test_required_iterator_Output)
                           << END;
                       return ite;
                     }()
                  << END;
              return req;
            }()
         << END;
  return finalize(series);
}
#endiv

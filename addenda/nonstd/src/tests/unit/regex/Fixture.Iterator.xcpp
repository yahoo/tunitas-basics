// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import tests.unit.regex.Fixture
#endiv
#divert <cpp>
#import nonstd.regex.Iterator
#import nonstd.regex.Pattern
auto tests::unit::regex::Fixture::test_Iterator() -> void {
  ::nonstd::regex::Pattern pattern{"."};
  using Iterator = ::nonstd::regex::Iterator<std::string::const_iterator>;
  auto const specimen{"0123456789"s};
  std::size_t const expected_count{specimen.size()};
  std::size_t actual_count{0};
  for (Iterator end{}, here{specimen.begin(), specimen.end(), pattern}; end != here; ++here) {
    ++actual_count;
  }
  CPPUNIT_ASSERT_EQUAL(expected_count, actual_count);
}
#import nonstd.regex.Pattern
#import nonstd.regex.Token_Iterator
auto tests::unit::regex::Fixture::test_Token_Iterator() -> void {
  ::nonstd::regex::Pattern pattern{"[0-9]"};
  using Iterator = ::nonstd::regex::Token_Iterator<std::string::const_iterator>;
  auto const specimen{" 0 1 2 3 4 5 6 7 8 9 "s};
  std::size_t const expected_count{11u};
  std::size_t actual_count{0};
  for (Iterator end{}, here{specimen.begin(), specimen.end(), pattern, -1}; end != here; ++here) {
    ++actual_count;
  }
  CPPUNIT_ASSERT_EQUAL(expected_count, actual_count);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::stream::posix { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::stream::posix::Fixture : public cppunit::test::Fixture {
public:
  auto test_Posixbuf() -> void;
  auto test_Posix() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.string_literals
using namespace std::string_literals;
#import nonstd.stream.Posixbuf
#import sys.posix.dup
auto tests::unit::stream::posix::Fixture::test_Posixbuf() -> void {
  using ::nonstd::stream::Posixbuf;
  {
    Posixbuf defaulting;
  } {
    auto duped = sys::posix::dup(2);
    CPPUNIT_ASSERT(ok(duped));
    Posixbuf duplicating(value(duped), std::ios_base::in, 99u);
    auto const message = "hello world\n"s;
    duplicating.sputn(message.data(), message.size());
    duplicating.sputc('\n');
  }
}
#import nonstd.stream.Posix
auto tests::unit::stream::posix::Fixture::test_Posix() -> void {
  using ::nonstd::stream::Posix;
  {
    auto duped = sys::posix::dup(0);
    CPPUNIT_ASSERT(ok(duped));
    Posix defaulting(value(duped));
  } {
    auto duped = sys::posix::dup(2);
    CPPUNIT_ASSERT(ok(duped));
    Posix duplicating(value(duped));
    auto const message = "hello world"s;
    duplicating << message << '\n';
  }
}
#import tests.unit.stream.posix.Streambuf
#import tests.unit.stream.posix.Stream
#import rigging.suite.io
auto tests::unit::stream::posix::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  using Stream = ::rigging::suite::Stream;
  Stream series("posix");
  {
    Stream use("usage");
    use << call("Posixbuf", &Fixture::test_Posixbuf)
        << call("Posix", &Fixture::test_Posix)
      ;
    series << move(use);
  }
  series << add<posix::Streambuf>()
         << add<posix::Stream>()
    ;
  return finalize(series);
}
#endiv

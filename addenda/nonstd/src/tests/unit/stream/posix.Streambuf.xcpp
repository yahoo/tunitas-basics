// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::stream::posix { class Streambuf; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import nonstd.stream.Posixbuf
class tests::unit::stream::posix::Streambuf : public cppunit::test::Fixture {
public:
  using Subject = ::nonstd::stream::Posixbuf;
  auto test_constructor_default() -> void;
  auto test_constructor_duplicating() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.string_literals
using namespace std::string_literals;
#import sys.posix.dup
auto tests::unit::stream::posix::Streambuf::test_constructor_default() -> void {
  Subject defaulting;
  CPPUNIT_ASSERT(true); // sure, whatever
}
auto tests::unit::stream::posix::Streambuf::test_constructor_duplicating() -> void {
  auto duped = sys::posix::dup(2);
  CPPUNIT_ASSERT(ok(duped));
  Subject duplicating(value(duped), std::ios_base::in, 99u);
  auto const message = "hello world\n"s;
  duplicating.sputn(message.data(), message.size());
  duplicating.sputc('\n');
}
#import rigging.suite.io
auto tests::unit::stream::posix::Streambuf::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("Streambuf");
  {
    Stream con("constructor");
    con << call("default", &Streambuf::test_constructor_default)
           << call("duplicating", &Streambuf::test_constructor_duplicating)
      ;
    series << move(con);
  }
  return finalize(series);
}
#endiv

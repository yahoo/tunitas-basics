// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::iomanip { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
class tests::unit::iomanip::Fixture : public cppunit::test::Fixture {
public:
  //
  // Just need to call these ... not to prove that libstdc++ actually functions as advertised
  //
  auto test_resetiosflags() -> void;
  auto test_setiosflags() -> void;
  auto test_setbase() -> void;
  auto test_setfill() -> void;
  auto test_setprecision() -> void;
  auto test_setw() -> void;
  auto test_setwidth() -> void;
  auto test_get_money() -> void;
  auto test_put_money() -> void;
  auto test_get_time() -> void;
  auto test_put_time() -> void;
  auto test_quoted() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.istringstream
#import std.ostringstream
#import nonstd.resetiosflags
auto tests::unit::iomanip::Fixture::test_resetiosflags() -> void {
  std::ostringstream buf;
  buf << nonstd::resetiosflags(std::ios::basefield); // any flags will do
  CPPUNIT_ASSERT(true);
}
#import nonstd.setiosflags
auto tests::unit::iomanip::Fixture::test_setiosflags() -> void {
  std::ostringstream buf;
  buf << nonstd::setiosflags(std::ios::basefield); // any flags will do
  CPPUNIT_ASSERT(true);
}
#import nonstd.setbase
auto tests::unit::iomanip::Fixture::test_setbase() -> void {
  std::ostringstream buf;
  buf << nonstd::setbase(3);
  CPPUNIT_ASSERT(true);
}
#import nonstd.setfill
auto tests::unit::iomanip::Fixture::test_setfill() -> void {
  std::ostringstream buf;
  buf << nonstd::setfill('0');
  CPPUNIT_ASSERT(true);
}
#import nonstd.setprecision
auto tests::unit::iomanip::Fixture::test_setprecision() -> void {
  std::ostringstream buf;
  buf << nonstd::setprecision(2);
  CPPUNIT_ASSERT(true);
}
#import nonstd.setw
auto tests::unit::iomanip::Fixture::test_setw() -> void {
  std::ostringstream buf;
  buf << nonstd::setw(2);
  CPPUNIT_ASSERT(true);
}
#import nonstd.setwidth
auto tests::unit::iomanip::Fixture::test_setwidth() -> void {
  std::ostringstream buf;
  buf << nonstd::setwidth(2); // <------------------ all this machinery is because we want to say "setwidth" not "setw"
  CPPUNIT_ASSERT(true);
}
#import nonstd.get_money
auto tests::unit::iomanip::Fixture::test_get_money() -> void {
  std::istringstream buf{"$100.00"};
  long double benjamin;
  buf >> nonstd::get_money(benjamin, true);
  CPPUNIT_ASSERT(true);
}
#import nonstd.put_money
auto tests::unit::iomanip::Fixture::test_put_money() -> void {
  std::ostringstream buf;
#warning WRITETHIS for double, long double -- auto tests::unit::iomanip::Fixture::test_put_money() -> void
#if 0
  { double lunch{12.99};
    buf << nonstd::put_money(&lunch, true); }
  { long double lunch{12.99};
    buf << nonstd::put_money(&lunch, true); }
#endif
  CPPUNIT_ASSERT(true);
}
#import nonstd.get_time
#import std.tm
auto tests::unit::iomanip::Fixture::test_get_time() -> void {
  std::istringstream buf{"2020-04-25 00:00"};
  std::tm frags;
  buf >> nonstd::get_time(&frags, "%Y-%m-%d %H:%M");
  CPPUNIT_ASSERT(true);
}
#import nonstd.put_time
auto tests::unit::iomanip::Fixture::test_put_time() -> void {
  std::ostringstream buf;
  auto const then = std::tm{};
  buf << nonstd::put_time(&then, "%Y-%m-%d %H:%M");
  CPPUNIT_ASSERT(true);
}
#import nonstd.quoted
auto tests::unit::iomanip::Fixture::test_quoted() -> void {
  std::ostringstream outbound;
  outbound << nonstd::quoted("apple banana cherry", '|', '%');
  CPPUNIT_ASSERT(true);
}
#import rigging.suite.io
auto tests::unit::iomanip::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream suite("iomanip");
  suite << call("resetiosflags", &Fixture::test_resetiosflags)
        << call("setiosflags", &Fixture::test_setiosflags)
        << call("setbase", &Fixture::test_setbase)
        << call("setfill", &Fixture::test_setfill)
        << call("setprecision", &Fixture::test_setprecision)
        << call("setw", &Fixture::test_setw)
        << call("setwidth", &Fixture::test_setwidth)
        << call("get_money", &Fixture::test_get_money)
        << call("put_money", &Fixture::test_put_money)
        << call("get_time", &Fixture::test_get_time)
        << call("put_time", &Fixture::test_put_time)
        << call("quoted", &Fixture::test_quoted)
    ;
  return finalize(suite);
}
#endiv

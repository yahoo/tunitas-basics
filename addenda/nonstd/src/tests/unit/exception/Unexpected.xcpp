// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd.exception
namespace tests::unit::exception {
  namespace [[eponymous]] unexpected {
    class Unexpected;
    namespace library = ::nonstd::exception;
  }
  using unexpected::Unexpected;
}
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
#import nonstd.exception.Unexpected
#import std.runtime_error
struct tests::unit::exception::unexpected::Unexpected : public cppunit::test::Fixture {
  using Subject = library::Unexpected;
  using Exception = std::runtime_error; // An unexpected ocurrence is a runtime incident
  auto test_deep_thought() -> void;
  auto test_hot_take() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.cerr
namespace tests::unit::exception::unexpected {
  auto Unexpected::test_deep_thought() -> void try {
    auto const deep_thought = "reasons ye know not of"s; // ... converted to a view and copied into the exception
    throw Subject{deep_thought};
  } catch (Exception const &e) {
    CPPUNIT_ASSERT(nullptr != e.what());
    std::cerr << "caught some exception saying [" << e.what() << "]\n";
    CPPUNIT_ASSERT(true);
  }
  auto Unexpected::test_hot_take() -> void try {
    auto const hot_take = "because, that's why"sv;
    throw Subject{hot_take};
  } catch (Exception const &e) {
    CPPUNIT_ASSERT(nullptr != e.what());
    std::cerr << "1arg caught some exception saying [" << e.what() << "]\n";
    CPPUNIT_ASSERT(true);
  }
}
#import rigging.suite.io
auto tests::unit::exception::unexpected::Unexpected::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  auto series = Stream{"Unexpected"};
  series << []{
              auto con = Stream{"constructor"};
              con << call("string::View", &Unexpected::test_hot_take)
                  << call("string::Storage", &Unexpected::test_deep_thought)
                  << END;
              return con;
            }()
         << END;
  return finalize(series);
}
#endiv

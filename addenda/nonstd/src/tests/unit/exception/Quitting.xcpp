// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd.exception
#import nonstd.sysexits
#import nonstd.sysexits.Code // ... [[FIXTHIS]] this test should be over in module-sys to ensure no dependencies of sys upon nonstd
#import sys.exits.Code // ......... ibidem
#import nonstd.same_as
namespace tests::unit::exception {
  namespace [[eponymous]] quitting {
    class Quitting;
    namespace library = ::nonstd::exception;
    namespace sysexits = ::nonstd::sysexits;
    namespace sys {
      namespace exits = ::sys::exits; // [[FIXTHIS]] see above
    }
    using ::nonstd::same_as;
    namespace required {
      template<typename CODE> concept Code = same_as<sysexits::Code, CODE> || same_as<sys::exits::Code, CODE>;
    }
  }
  using quitting::Quitting;
}
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
#import nonstd.exception.Quitting
#import tests.unit.exception.Basic_Quitting.Palette
#import std.ostringstream
struct tests::unit::exception::quitting::Quitting : public cppunit::test::Fixture {
  using Subject = library::Quitting;
  using Buffer = std::ostringstream;
  auto test_constructor_0arg() -> void;
  template<required::Code> auto test_constructor_1arg_code() -> void;
  auto test_constructor_1arg_message() -> void;
  template<required::Code> auto test_constructor_2arg_message_code() -> void;
  auto test_operator_insert() -> void;
  static auto suite() -> cppunit::Test *;
protected:
  using Palette = basic_quitting::Basic_Quitting<char>::Palette;
};
#endiv
#divert <tpp>
#import std.empty
#import nonstd.sysexits.constants
#import sys.exits.constants
namespace tests::unit::exception::quitting {
  using nonstd::same_as;
  template<required::Code CODE> auto Quitting::test_constructor_1arg_code() -> void {
    auto s1 = Subject{CODE{7}}; // <---------------------------------------- test this (show that the automagic conversion works)
    auto buf = Buffer{};
    buf << s1;
    auto const actual = buf.str();
    CPPUNIT_ASSERT(!actual.empty());
    auto const code = s1.code();
    CPPUNIT_ASSERT_EQUAL(7u, (unsigned)code);
    CPPUNIT_ASSERT(!empty(s1.message()));
    auto const name = s1.severity_name();
    CPPUNIT_ASSERT(!empty(name));
    s1.stream() << s1 << '\n'; // also exercises operator<<
  }
  template<required::Code CODE> auto Quitting::test_constructor_2arg_message_code() -> void {
    auto s2 = Subject{Palette::another_message(), CODE{8}}; // <------------ test this (show that the automagic conversion works)
    auto buf = Buffer{};
    buf << s2;
    auto const actual = buf.str();
    CPPUNIT_ASSERT(!actual.empty());
    auto const code = s2.code();
    CPPUNIT_ASSERT_EQUAL(8u, (unsigned)code);
    CPPUNIT_ASSERT(!empty(s2.message()));
    auto const name = s2.severity_name();
    CPPUNIT_ASSERT(!empty(name));
    s2.stream() << s2 << '\n'; // also exercises operator<<
  }
}
#endiv
#divert <cpp>
#import std.empty
#import std.cerr
namespace tests::unit::exception::quitting {
  auto Quitting::test_constructor_0arg() -> void {
    auto s0 = Subject{}; // <---------------------------------------- test this
    auto buf = Buffer{};
    buf << s0;
    auto const actual = buf.str();
    CPPUNIT_ASSERT(!actual.empty());
    auto const code = s0.code();
    CPPUNIT_ASSERT_EQUAL(sysexits::FAIL, code);
    CPPUNIT_ASSERT(!empty(s0.message()));
    auto const name = s0.severity_name();
    CPPUNIT_ASSERT(!empty(name));
    s0.stream() << s0 << '\n'; // also exercises operator<<
  }
  auto Quitting::test_constructor_1arg_message() -> void {
    auto s1 = Subject{Palette::default_message()}; // <---------------------------------------- test this
    auto buf = Buffer{};
    buf << s1;
    auto const actual = buf.str();
    CPPUNIT_ASSERT(!actual.empty());
    auto const code = s1.code();
    CPPUNIT_ASSERT_EQUAL(sysexits::FAIL, code);
    CPPUNIT_ASSERT(!empty(s1.message()));
    auto const name = s1.severity_name();
    CPPUNIT_ASSERT(!empty(name));
    s1.stream() << s1 << '\n'; // also exercises operator<<
  }
  auto Quitting::test_operator_insert() -> void {
    // was tested in every one of the constructor test cases
  }
}
#import rigging.suite.io
auto tests::unit::exception::Quitting::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  auto series = Stream{"Quitting"};
  series << []{
              auto con = Stream{"constructor"};
              con << call("0arg", &Quitting::test_constructor_0arg)
                  << []{
                       auto a1 = Stream{"1arg"};
                       a1 << call("message", &Quitting::test_constructor_1arg_message)
                          << call("sys::exits::Code", &Quitting::test_constructor_1arg_code<sys::exits::Code>)
                          << call("nonstd::sysexits::Code", &Quitting::test_constructor_1arg_code<sysexits::Code>)
                          << END;
                       return move(a1);
                     }()
                  << []{
                       auto a2 = Stream{"2arg"};
                       a2 << call("sys::exits::Code", &Quitting::test_constructor_2arg_message_code<sys::exits::Code>)
                          << call("nonstd::sysexits::Code", &Quitting::test_constructor_2arg_message_code<sysexits::Code>)
                          << END;
                       return move(a2);
                     }()
                  << END;
              return move(con);
            }()
         << call("operator<<", &Quitting::test_operator_insert)
         << END;
  return finalize(series);
}
#endiv

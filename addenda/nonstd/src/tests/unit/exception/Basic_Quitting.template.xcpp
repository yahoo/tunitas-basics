// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import tests.unit.exception.Basic_Quitting.template
#import nonstd.exception
#import nonstd.sysexits
#import nonstd.required.Character
#import nonstd.required.Character_Traits
namespace tests::unit::exception {
  namespace [[eponymous]] basic_quitting {
    namespace required = ::nonstd::required;
    template<required::Character CHAR, required::Character_Traits TRAITS = std::char_traits<CHAR>> class Basic_Quitting;
    namespace library = ::nonstd::exception;
    namespace sysexits = ::nonstd::sysexits;
  }
  using basic_quitting::Basic_Quitting;
}
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
#import std.basic_string
#import nonstd.exception.Basic_Quitting
#forward tests.unit.exception.Quitting
namespace tests::unit::exception {
  template<basic_quitting::required::Character CHAR, basic_quitting::required::Character_Traits TRAITS> struct basic_quitting::Basic_Quitting : public cppunit::test::Fixture {
    using Char = CHAR;
    using Traits = TRAITS;
    using String = std::basic_string<Char, Traits>;
    using Subject = library::Basic_Quitting<Char, Traits>;
    auto test_constructor_default() -> void;
    auto test_constructor_1arg_message() -> void;
    auto test_constructor_1arg_code() -> void;
    auto test_constructor_1arg_toy() -> void;
    auto test_constructor_1arg_utensil() -> void;
    auto test_constructor_2arg_code() -> void;
    auto test_constructor_2arg_toy() -> void;
    auto test_constructor_2arg_utensil() -> void;
    auto test_message() -> void;
    auto test_code_pure() -> void;
    auto test_code_cast_code() -> void;
    auto test_code_cast_toy() -> void;
    auto test_code_cast_utensil() -> void;
    auto test_stream() -> void;
    auto test_severity_name() -> void;
    auto test_operator_insert() -> void;
    static auto suite() -> cppunit::Test *;
  private:
    friend class quitting::Quitting;
    struct Palette;
  };
}
#endiv
#divert <tpp>
#import nonstd.sysexits.constants // and Code
#import std.empty
#import std.size
#import tests.unit.exception.Basic_Quitting.Palette
#import tests.unit.exception.Toy
#import tests.unit.exception.Utensil
namespace tests::unit::exception::basic_quitting {
  template<required::Character _1, required::Character_Traits _2> auto Basic_Quitting<_1, _2>::test_constructor_default() -> void {
    Subject subject;
    // worked?
    CPPUNIT_ASSERT(nullptr != subject.what());
    CPPUNIT_ASSERT(!empty(subject.message()));
    CPPUNIT_ASSERT_EQUAL(sysexits::FAIL, subject.code());
  }
  template<required::Character _1, required::Character_Traits _2> auto Basic_Quitting<_1, _2>::test_constructor_1arg_message() -> void {
    Subject subject(Palette::default_message());
    CPPUNIT_ASSERT(nullptr != subject.what());
    CPPUNIT_ASSERT(!empty(subject.message()));
    CPPUNIT_ASSERT_EQUAL(sysexits::FAIL, subject.code());
  }
  template<required::Character _1, required::Character_Traits _2> auto Basic_Quitting<_1, _2>::test_constructor_1arg_code() -> void {
    Subject subject(sysexits::Code{3});
    CPPUNIT_ASSERT_EQUAL(sysexits::Code{3}, subject.code());
  }
  template<required::Character _1, required::Character_Traits _2> auto Basic_Quitting<_1, _2>::test_constructor_1arg_toy() -> void {
    Subject subject(Utensil::SPOON);
    CPPUNIT_ASSERT_EQUAL(Utensil::SPOON, subject.template code<Utensil>());
  }
  template<required::Character _1, required::Character_Traits _2> auto Basic_Quitting<_1, _2>::test_constructor_1arg_utensil() -> void {
    Subject subject(Toy::TRAIN);
    CPPUNIT_ASSERT_EQUAL(Toy::TRAIN, subject.template code<Toy>());
  }
  template<required::Character _1, required::Character_Traits _2> auto Basic_Quitting<_1, _2>::test_constructor_2arg_code() -> void {
    Subject subject(Palette::another_message(), sysexits::Code{4});
    CPPUNIT_ASSERT(nullptr != subject.what());
    CPPUNIT_ASSERT(!empty(subject.message()));
    CPPUNIT_ASSERT_EQUAL(sysexits::Code{4}, subject.code());
  }
  template<required::Character _1, required::Character_Traits _2> auto Basic_Quitting<_1, _2>::test_constructor_2arg_toy() -> void {
    Subject subject(Palette::another_message(), Toy::BICYCLE);
    CPPUNIT_ASSERT(nullptr != subject.what());
    CPPUNIT_ASSERT(!empty(subject.message()));
    CPPUNIT_ASSERT_EQUAL(Toy::BICYCLE, subject.template code<Toy>());
  }
  template<required::Character _1, required::Character_Traits _2> auto Basic_Quitting<_1, _2>::test_constructor_2arg_utensil() -> void {
    Subject subject(Palette::another_message(), Utensil::SPOON);
    CPPUNIT_ASSERT(nullptr != subject.what());
    CPPUNIT_ASSERT(!empty(subject.message()));
    CPPUNIT_ASSERT_EQUAL(Utensil::SPOON, Utensil(subject.code()));
  }
  template<required::Character _1, required::Character_Traits _2> auto Basic_Quitting<_1, _2>::test_message() -> void {
    Subject subject(Palette::default_message());
    CPPUNIT_ASSERT(Palette::default_message() == subject.message());
  }
  template<required::Character _1, required::Character_Traits _2> auto Basic_Quitting<_1, _2>::test_code_pure() -> void {
    Subject subject;
    CPPUNIT_ASSERT_EQUAL(sysexits::FAIL, subject.code());
  }
  template<required::Character _1, required::Character_Traits _2> auto Basic_Quitting<_1, _2>::test_code_cast_code() -> void {
    Subject subject;
    CPPUNIT_ASSERT_EQUAL(sysexits::FAIL, subject.code());
  }
  template<required::Character _1, required::Character_Traits _2> auto Basic_Quitting<_1, _2>::test_code_cast_toy() -> void {
    Subject subject{Utensil::FORK};
    CPPUNIT_ASSERT_EQUAL(Utensil::FORK, Utensil(subject.code()));
  }
  template<required::Character _1, required::Character_Traits _2> auto Basic_Quitting<_1, _2>::test_code_cast_utensil() -> void {
    Subject subject{Palette::another_message(), Toy::BICYCLE};
    CPPUNIT_ASSERT(Toy::BICYCLE == subject.template code<Toy>());
  }
  template<required::Character _1, required::Character_Traits _2> auto Basic_Quitting<_1, _2>::test_stream() -> void {
    Subject subject;
    auto &outbound = subject.stream();
    outbound << subject << outbound.widen('\n');
  }
  template<required::Character _1, required::Character_Traits _2> auto Basic_Quitting<_1, _2>::test_severity_name() -> void {
    Subject subject;
    CPPUNIT_ASSERT(!empty(subject.severity_name()));
  }
  template<required::Character _1, required::Character_Traits _2> auto Basic_Quitting<_1, _2>::test_operator_insert() -> void {
    Subject subject;
    auto &outbound = subject.stream();
    outbound << subject << outbound.widen('\n');
  }
}
#import std.type_info
#import rigging.suite.io
namespace tests::unit::exception::basic_quitting {
  template<required::Character _1, required::Character_Traits _2> auto Basic_Quitting<_1, _2>::suite() -> cppunit::Test * {
    using namespace rigging::suite;
    auto series = Stream("Basic_Quitting<"s + typeid(Char).name() + ">"s);
    series << []{
                auto con = Stream("constructor");
                con << call("default", &Basic_Quitting::test_constructor_default)
                    << []{
                         auto arg = Stream("1arg");
                         arg << call("message", &Basic_Quitting::test_constructor_1arg_message)
                             << call("Code", &Basic_Quitting::test_constructor_1arg_code)
                             << call("Toy", &Basic_Quitting::test_constructor_1arg_toy)
                             << call("Utensil", &Basic_Quitting::test_constructor_1arg_utensil)
                             << END;
                         return move(arg);
                       }()
                    << []{
                         auto arg = Stream("2arg");
                         arg << call("Code", &Basic_Quitting::test_constructor_2arg_code)
                             << call("Toy", &Basic_Quitting::test_constructor_2arg_toy)
                             << call("Utensil", &Basic_Quitting::test_constructor_2arg_utensil)
                             << END;
                         return move(arg);
                       }()
                    << END;
                  return move(con);
              }()
           << call("message", &Basic_Quitting::test_message)
           << []{
                auto cod = Stream("code");
                cod << call("pure", &Basic_Quitting::test_code_pure)
                    << []{
                         auto cas = Stream("cast");
                         cas << call("Code", &Basic_Quitting::test_code_cast_code)
                             << call("Toy", &Basic_Quitting::test_code_cast_toy)
                             << call("Utensil", &Basic_Quitting::test_code_cast_utensil)
                             << END;
                         return move(cas);
                       }()
                    << END;
                  return move(cod);
              }()
           << call("stream", &Basic_Quitting::test_stream)
           << call("severity_name", &Basic_Quitting::test_severity_name)
           << call("operator<<", &Basic_Quitting::test_operator_insert)
           << END;
    return finalize(series);
  }
}
#endiv

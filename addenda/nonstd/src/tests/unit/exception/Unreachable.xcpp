// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd.exception
namespace tests::unit::exception {
  namespace [[eponymous]] unreachable {
    class Unreachable;
    namespace library = ::nonstd::exception;
  }
  using unreachable::Unreachable;
}
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
#import nonstd.exception.Unreachable
struct tests::unit::exception::unreachable::Unreachable : public cppunit::test::Fixture {
  using Subject = library::Unreachable;
  auto test_0arg() -> void;
  auto test_1arg() -> void;
  auto test_3arg() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.cerr
#import std.source_location
namespace tests::unit::exception::unreachable {
  auto Unreachable::test_0arg() -> void try {
    throw Subject{};
  } catch (std::logic_error const &e) {
    CPPUNIT_ASSERT(nullptr != e.what());
    std::cerr << "0arg caught an expected exception saying [" << e.what() << "]\n";
    CPPUNIT_ASSERT(true);
  }
  auto Unreachable::test_1arg() -> void try {
    throw Subject{std::source_location::current()};
  } catch (std::logic_error const &e) {
    CPPUNIT_ASSERT(nullptr != e.what());
    std::cerr << "1arg caught an expected exception saying [" << e.what() << "]\n";
    CPPUNIT_ASSERT(true);
  }
  auto Unreachable::test_3arg() -> void try {
    throw Subject{__FUNCTION__, __FILE__, __LINE__};
  } catch (std::logic_error const &e) {
    CPPUNIT_ASSERT(nullptr != e.what());
    std::cerr << "3arg caught an expected exception saying [" << e.what() << "]\n";
    CPPUNIT_ASSERT(true);
  }
}
#import rigging.suite.io
auto tests::unit::exception::unreachable::Unreachable::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  auto series = Stream{"Unreachable"};
  series << []{
              auto con = Stream{"constructor"};
              con << call("0arg", &Unreachable::test_0arg)
                  << call("1arg", &Unreachable::test_0arg)
                  << call("3arg", &Unreachable::test_3arg)
                  << END;
              return con;
            }()
         << END;
  return finalize(series);
}
#endiv

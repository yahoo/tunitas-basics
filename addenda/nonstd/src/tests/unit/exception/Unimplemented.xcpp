// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd.exception
#import nonstd.exception.required
namespace tests::unit::exception {
  namespace [[eponymous]] unimplemented {
    class Unimplemented;
    namespace library = ::nonstd::exception;
    namespace required = ::nonstd::exception::required;
  }
  using unimplemented::Unimplemented;
}
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
#import nonstd.exception.Unimplemented
#import nonstd.required.Character
#import nonstd.required.Character_Traits
#import std.char_traits
namespace tests::unit::exception {
  struct unimplemented::Unimplemented : public cppunit::test::Fixture {
    using Subject = library::Unimplemented;
    auto test_0arg() -> void;
    auto test_1arg() -> void;
    auto test_3arg() -> void;
    template<::nonstd::required::Character CHAR> auto test_operator_insert() -> void;
    static auto suite() -> cppunit::Test *;
  protected:
    struct Operator {
      template<required::Character CHAR, required::Character_Traits TRAITS = std::char_traits<CHAR>> struct Insert;
    };
  };
}
#endiv
#divert <tpp>
#import std.empty
#import std.basic_ostringstream
namespace tests::unit::exception::unimplemented {
  template<required::Character CHAR> auto Unimplemented::test_operator_insert() -> void {
    auto specimen = Subject(__FUNCTION__, __FILE__, __LINE__);
    std::basic_ostringstream<CHAR> buf;
    buf << specimen; // <------------------------------ test this (operator<<)
    CPPUNIT_ASSERT(!empty(buf.str()));
    if constexpr (nonstd::same_as<CHAR, char>) {
      std::cerr << "DEBUG unimplemented message is [" << buf.str() << "]\n";
    } else if constexpr (nonstd::same_as<CHAR, wchar_t>) {
      auto &outbound{std::cerr};
      outbound << "DEBUG unimplemented message is [";
      // http://www7.open-std.org/JTC1/SC22/WG21/docs/papers/2020/p2012r0.pdf
      [&outbound](auto const &p2012r0) {
        for (auto wide : p2012r0) {
          outbound << std::cerr.widen(wide);
        }
      }(buf.str());
      outbound << "]\n";
    } else {
      throw Subject{}; // a.k.a. this branch is actually unimplemented ... not just testing the Unimplemented exception implementation
    }
  }
}
#endiv
#divert <cpp>
#import std.cerr
#import std.source_location
#import std.basic_ostringstream
#import std.wstring
namespace tests::unit::exception::unimplemented {
  auto Unimplemented::test_0arg() -> void try {
    throw Subject{};
  } catch (std::runtime_error const &e) {
    std::cerr << "caught an expected exception saying [" << e.what() << "]\n";
  }
  auto Unimplemented::test_1arg() -> void try {
    throw Subject{std::source_location::current()};
  } catch (std::runtime_error const &e) {
    std::cerr << "caught an expected exception saying [" << e.what() << "]\n";
  }
  auto Unimplemented::test_3arg() -> void try {
    throw Subject{__FUNCTION__, __FILE__, __LINE__};
  } catch (std::runtime_error const &e) {
    std::cerr << "caught an expected exception saying [" << e.what() << "]\n";
  }
}
#import tests.unit.exception.Basic_Quitting
#import tests.unit.exception.Invalid_Datum
#import tests.unit.exception.Invalid_Enum
#import tests.unit.exception.Quitting
#import tests.unit.exception.Unexpected
#import tests.unit.exception.Unimplemented
#import tests.unit.exception.Unreachable
#import tests.unit.exception.detail.format.Fixture
#import tests.unit.exception.Unimplemented.Operator.Insert
#import rigging.suite.io
auto tests::unit::exception::Unimplemented::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  auto series = Stream{"Unimplemented"};
  series << []{
              auto con = Stream{"constructor"};
              con << call("0arg", &Unimplemented::test_0arg)
                  << call("1arg", &Unimplemented::test_1arg)
                  << call("3arg", &Unimplemented::test_3arg)
                  << END;
              return con;
            }()
         << []{
              auto op = Stream{"operator<<"};
              op << call("char", &Unimplemented::test_operator_insert<char>)
                 << call("wchar_t", &Unimplemented::test_operator_insert<wchar_t>)
                 << add<Operator::Insert<char>>()
                 << add<Operator::Insert<wchar_t>>()
#if 10 <= __GNUC__ // C++20 and ... who cares?
                 << add(Operator::Insertwhar8_t>)
#endif
                 << add<Operator::Insert<char16_t>>()
                 << add<Operator::Insert<char32_t>>()
                 << END;
              return op;
            }()
         << END;
  return finalize(series);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::exception {
  enum class Utensil { KNIFE, FORK, SPOON };
}
#import nonstd.sysexits.Is_Constructible_From
#import nonstd.sysexits.Is_Convertible_Into
namespace nonstd::sysexits {
  template<> struct Is_Constructible_From<::tests::unit::exception::Utensil>;
  template<> struct Is_Convertible_Into<::tests::unit::exception::Utensil>;
}
#endiv
#divert <hpp>
template<> struct nonstd::sysexits::Is_Constructible_From<tests::unit::exception::Utensil> : public std::true_type { };
template<> struct nonstd::sysexits::Is_Convertible_Into<tests::unit::exception::Utensil> : public std::true_type { };
#import std.ostream
#import nonstd.sysexits // Value
namespace tests::unit::exception {
  inline auto make(Utensil) -> ::nonstd::sysexits::Value;
  inline auto operator<<(std::ostream &, Utensil) -> std::ostream &;
}
#endiv
#divert <ipp>
auto tests::unit::exception::make(Utensil u) -> ::nonstd::sysexits::Value {
  return (::nonstd::sysexits::Value) u;
}
auto tests::unit::exception::operator<<(std::ostream &o, Utensil u) -> std::ostream & {
  return o << "Utensil{" << (int) u << "}";
}
#endiv

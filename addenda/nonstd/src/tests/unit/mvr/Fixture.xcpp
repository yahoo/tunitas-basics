// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::mvr {
  class Fixture;
}
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
#import std.string
#import std.tuple
#import tests.unit.mvr.Copywise
class tests::unit::mvr::Fixture : public cppunit::test::Fixture {
public:
  auto test_State() -> void;
  auto test_recv() -> void;
  auto test_send() -> void;
  auto test_usage() -> void;

  static auto suite() -> cppunit::Test *;
protected:
  static auto sender_tuple_Copywise() -> std::tuple<char, int, Copywise>;
  static auto sender_tuple_stringwise() -> std::tuple<char, int, std::string>;
};
#endiv
#divert <cpp>
#import nonstd.mvr.State

auto tests::unit::mvr::Fixture::test_State() -> void {
  using namespace ::nonstd::mvr;
  auto t = state(true);
  CPPUNIT_ASSERT(State::VALUE == t);
  auto f = state(false);
  CPPUNIT_ASSERT(State::NONE == f);
}

#import nonstd.mvr.send
auto tests::unit::mvr::Fixture::sender_tuple_stringwise() -> std::tuple<char, int, std::string> {
  using namespace ::nonstd::mvr;
  return send('a', 1, (std::string)"yes");
}

#import nonstd.mvr.recv
auto tests::unit::mvr::Fixture::test_recv() -> void {
  using namespace ::nonstd::mvr;
  char c;
  int i;
  std::string s;
  auto receiver = recv(c, i, s); // recall: recv(...) creates an "object" that can receive, writing into the lhs
  receiver = sender_tuple_stringwise();
  CPPUNIT_ASSERT('a' == c);
  CPPUNIT_ASSERT(1 == i);
  CPPUNIT_ASSERT("yes" == s);
}

#import nonstd.mvr.send
auto tests::unit::mvr::Fixture::sender_tuple_Copywise() -> std::tuple<char, int, Copywise> {
  using namespace ::nonstd::mvr;
  // show that it compiles and copies (or not)
  Copywise w;
  return send('a', 99, w);
}

#import nonstd.mvr.recv
auto tests::unit::mvr::Fixture::test_send() -> void {
  using namespace ::nonstd::mvr;
  char c;
  int i;
  Copywise w;
  recv(c, i, w) = sender_tuple_Copywise();
  CPPUNIT_ASSERT('a' == c);
  CPPUNIT_ASSERT(99 == i);
  // copywise ... 
}

#import nonstd.mvr.send
#import nonstd.mvr.recv
#import std.clog
#import std.abs
auto tests::unit::mvr::Fixture::test_usage() -> void {
  using namespace ::nonstd::mvr;
  char c, d, e;
  int i, j, k;
  float f, g, h;
  recv(c, d, e, i, j, k, f, g, h) = send('a', 'b', 'c', 1, 2, 3, 4.1, 5.1, 6.1);
  CPPUNIT_ASSERT('a' == c);
  CPPUNIT_ASSERT('b' == d);
  CPPUNIT_ASSERT('c' == e);
  CPPUNIT_ASSERT(1 == i);
  CPPUNIT_ASSERT(2 == j);
  CPPUNIT_ASSERT(3 == k);
  std::clog << "c='" << c << "', d='" << d << "', e='" << e << "'\n";
  std::clog << "i=" << i << ", i=" << j << ", k=" << k << "\n";
  std::clog << "f=" << f << ", g=" << g << ", g=" << h << "\n";
  constexpr float const EPSILON = 1e-5; // floats aren't that precise
  CPPUNIT_ASSERT(abs(4.1 - f) < EPSILON);
  CPPUNIT_ASSERT(abs(5.1 - g) < EPSILON);
  CPPUNIT_ASSERT(abs(6.1 - h) < EPSILON);
}

#import tests.unit.mvr.SAV
#import rigging.suite.io
#import std.move
#import std.string
#import std.tuple
auto tests::unit::mvr::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("mvr");
  series << call("State", &Fixture::test_State)
    << call("recv", &Fixture::test_recv)
    << call("send", &Fixture::test_send)
    << call("usage", &Fixture::test_usage)
    ;
  {
    Stream sav("sav");
    sav << add<SAV<bool>>()
        << add<SAV<int>>()
        << add<SAV<char const *>>()
        << add<SAV<std::string>>()
        << add<SAV<std::tuple<bool, int, std::string>>>()
      ;
    series << add(std::move(sav));
  }
  return finalize(series);
}
#endiv

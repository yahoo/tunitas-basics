// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::uninitialized { class Fill; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
class tests::unit::uninitialized::Fill : public cppunit::test::Fixture {
public:
  auto test_singleton() -> void;
  auto test_array() -> void;
  auto test_pointer_size() -> void;
  auto test_first_last() -> void;
  auto test_convenience_singleton() -> void;
  auto test_convenience_array() -> void;
  auto test_convenience_pointer_size() -> void;
  auto test_convenience_first_last() -> void;
  static auto suite() -> cppunit::Test *;
protected:
  struct Trivial {
    int i;
    double j;
    char const *k;
  };
};
#endiv
#divert <cpp>
#import nonstd.uninitialized.fill
auto tests::unit::uninitialized::Fill::test_singleton() -> void {
  Trivial blank{0, 0.0, nullptr};
  Trivial subject{1, 2.3, "4.5"};
  ::nonstd::uninitialized::fill(subject, blank); // <----------------- test this
  CPPUNIT_ASSERT(0 == subject.i);
  CPPUNIT_ASSERT(0.0 == subject.j);
  CPPUNIT_ASSERT(nullptr == subject.k);
}
auto tests::unit::uninitialized::Fill::test_array() -> void {
  Trivial blank{0, 0.0, nullptr};
  Trivial subject[2]{{1, 2.3, "4.5"},{6, 7.8, "9.A"}};
  ::nonstd::uninitialized::fill(subject, blank); // <----------------- test this
  CPPUNIT_ASSERT(0 == subject[0].i);
  CPPUNIT_ASSERT(0.0 == subject[0].j);
  CPPUNIT_ASSERT(nullptr == subject[0].k);
  CPPUNIT_ASSERT(0 == subject[1].i);
  CPPUNIT_ASSERT(0.0 == subject[1].j);
  CPPUNIT_ASSERT(nullptr == subject[1].k);
}
auto tests::unit::uninitialized::Fill::test_pointer_size() -> void {
  using namespace nonstd::uninitialized;
  Trivial blank{0, 0.0, nullptr};
  Trivial subject[2]{{1, 2.3, "4.5"},{6, 7.8, "9.A"}};
  auto const SIZE = sizeof (subject)/sizeof (subject[0]);
  fill(&subject[0], SIZE, blank); // <----------------- test this
  CPPUNIT_ASSERT(0 == subject[0].i);
  CPPUNIT_ASSERT(0.0 == subject[0].j);
  CPPUNIT_ASSERT(nullptr == subject[0].k);
  CPPUNIT_ASSERT(0 == subject[1].i);
  CPPUNIT_ASSERT(0.0 == subject[1].j);
  CPPUNIT_ASSERT(nullptr == subject[1].k);
}
auto tests::unit::uninitialized::Fill::test_first_last() -> void {
  using namespace nonstd::uninitialized;
  Trivial blank{0, 0.0, nullptr};
  Trivial subject[2]{{1, 2.3, "4.5"},{6, 7.8, "9.A"}};
  auto const SIZE = sizeof (subject)/sizeof (subject[0]);
  auto const first = &subject[0];
  auto const last = &subject[SIZE];
  fill(first, last, blank); // <----------------- test this
  CPPUNIT_ASSERT(0 == subject[0].i);
  CPPUNIT_ASSERT(0.0 == subject[0].j);
  CPPUNIT_ASSERT(nullptr == subject[0].k);
  CPPUNIT_ASSERT(0 == subject[1].i);
  CPPUNIT_ASSERT(0.0 == subject[1].j);
  CPPUNIT_ASSERT(nullptr == subject[1].k);
}
#import nonstd.uninitialized_fill
auto tests::unit::uninitialized::Fill::test_convenience_singleton() -> void {
  Trivial blank{0, 0.0, nullptr};
  Trivial subject{1, 2.3, "4.5"};
  ::nonstd::uninitialized_fill(subject, blank); // <----------------- test this
  CPPUNIT_ASSERT(0 == subject.i);
  CPPUNIT_ASSERT(0.0 == subject.j);
  CPPUNIT_ASSERT(nullptr == subject.k);
}
auto tests::unit::uninitialized::Fill::test_convenience_array() -> void {
  Trivial blank{0, 0.0, nullptr};
  Trivial subject[2]{{1, 2.3, "4.5"},{6, 7.8, "9.A"}};
  ::nonstd::uninitialized_fill(subject, blank); // <----------------- test this
  CPPUNIT_ASSERT(0 == subject[0].i);
  CPPUNIT_ASSERT(0.0 == subject[0].j);
  CPPUNIT_ASSERT(nullptr == subject[0].k);
  CPPUNIT_ASSERT(0 == subject[1].i);
  CPPUNIT_ASSERT(0.0 == subject[1].j);
  CPPUNIT_ASSERT(nullptr == subject[1].k);
}
auto tests::unit::uninitialized::Fill::test_convenience_pointer_size() -> void {
  Trivial blank{0, 0.0, nullptr};
  using namespace nonstd;
  Trivial subject[2]{{1, 2.3, "4.5"},{6, 7.8, "9.A"}};
  auto const SIZE = sizeof (subject)/sizeof (subject[0]);
  auto const first = &subject[0];
  auto const last = &subject[SIZE];
  uninitialized_fill(first, last, blank); // <----------------- test this
  CPPUNIT_ASSERT(0 == subject[0].i);
  CPPUNIT_ASSERT(0.0 == subject[0].j);
  CPPUNIT_ASSERT(nullptr == subject[0].k);
  CPPUNIT_ASSERT(0 == subject[1].i);
  CPPUNIT_ASSERT(0.0 == subject[1].j);
  CPPUNIT_ASSERT(nullptr == subject[1].k);
}
auto tests::unit::uninitialized::Fill::test_convenience_first_last() -> void {
  using namespace nonstd;
  Trivial blank{0, 0.0, nullptr};
  Trivial subject[2]{{1, 2.3, "4.5"},{6, 7.8, "9.A"}};
  auto const SIZE = sizeof (subject)/sizeof (subject[0]);
  auto const first = &subject[0];
  auto const last = &subject[SIZE];
  uninitialized_fill(first, last, blank); // <----------------- test this
  CPPUNIT_ASSERT(0 == subject[0].i);
  CPPUNIT_ASSERT(0.0 == subject[0].j);
  CPPUNIT_ASSERT(nullptr == subject[0].k);
  CPPUNIT_ASSERT(0 == subject[1].i);
  CPPUNIT_ASSERT(0.0 == subject[1].j);
  CPPUNIT_ASSERT(nullptr == subject[1].k);
}
#import rigging.suite.io
auto tests::unit::uninitialized::Fill::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("fill");
  series << call("singleton", &Fill::test_singleton)
         << call("array", &Fill::test_array)
         << call("pointer+size", &Fill::test_pointer_size)
         << call("first+last", &Fill::test_first_last)
    ;
  {
    Stream con("convenience");
    con << call("singleton", &Fill::test_convenience_singleton)
        << call("array", &Fill::test_convenience_array)
        << call("pointer+size", &Fill::test_convenience_pointer_size)
        << call("first+lst", &Fill::test_convenience_first_last)
      ;
    series << move(con);
  }
  return finalize(series);
}
#endiv

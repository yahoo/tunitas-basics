// -*- c++ -*- in the SCOLD stylings which are so popular these days
#divert <hpp>
#import std.allocator
#import std.forward_list
#import std.string
namespace ish {
  namespace perl {
    namespace detail {
      //
      // Similar to Perl's
      //
      //     @LHS = map {...block...} @RHS
      //
      // WATCHOUT - the result is REVERSED from source because forward_list only has an efficient "push_front" operation
      //
      template<typename OPERATION> inline auto map(OPERATION, std::forward_list<std::string> const &) -> std::forward_list<std::string>;
    }
  }
}
#endiv
#divert <ipp>
#import std.front_insert_iterator
#import std.transform
#import std.move
template<typename OPERATION> auto ish::perl::detail::map(OPERATION operation, std::forward_list<std::string> const &source) -> std::forward_list<std::string> {
  using result_type = std::forward_list<std::string>;
  result_type destination;
  std::front_insert_iterator<result_type> out(destination); // <----------------- REVERSAL happens here
  std::transform(source.begin(), source.end(), out, operation);
  return destination;
}
#endiv

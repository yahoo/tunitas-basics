// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
//
// Same as ish::tuple::get<0>(...)
//
#import std.tuple
namespace ish::tuple {
  // not found by ADL
  template<typename TYPE, typename... TYPES> inline auto first(std::tuple<TYPE, TYPES...> const &) noexcept -> TYPE const &;
  template<typename TYPE, typename... TYPES> inline auto first(std::tuple<TYPE, TYPES...> &) noexcept -> TYPE &;
  template<typename TYPE, typename... TYPES> inline auto first(std::tuple<TYPE, TYPES...> &&) noexcept -> TYPE &&;
}
#endiv
#divert <ipp>
#import ish.tuple.get
template<typename TYPE, typename... TYPES> auto ish::tuple::first(std::tuple<TYPE, TYPES...> const &t) noexcept -> TYPE const & {
  return get<0>(t);
}

template<typename TYPE, typename... TYPES> auto ish::tuple::first(std::tuple<TYPE, TYPES...> &t) noexcept -> TYPE & {
  return get<0>(t);
}

#import std.forward
template<typename TYPE, typename... TYPES> auto ish::tuple::first(std::tuple<TYPE, TYPES...> &&t) noexcept -> TYPE && {
  return get<0>(std::forward<std::tuple<TYPE, TYPES...>>(t));
}
#endiv

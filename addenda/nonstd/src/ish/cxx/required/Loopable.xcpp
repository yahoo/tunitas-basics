// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace ish::cxx::required {
  //
  // Similar enough to a container that the rest(...) template can work
  // The rest(...) tmeplate only needs to make a range for loop function
  // ... it does need more of the "usual" container interface.
  //
  // Reminder: CONTAINER can be either const or nonconst
  //
  template<typename CONTAINER> concept Loopable = requires(CONTAINER &maybe_muting_maybe_consty, CONTAINER const &consty) {
    // NOT EVEN this is required: typename CONTAINER::value_type;
    typename CONTAINER::iterator;
    // can convert an iterator to a const iterator
    { typename CONTAINER::const_iterator(typename CONTAINER::iterator()) };
    // the non-consty variant might be const after all
    // the nonconst iterator is convertible to consty one
    { maybe_muting_maybe_consty.begin() } -> convertible_to<typename CONTAINER::const_iterator>;
    { maybe_muting_maybe_consty.end() } -> convertible_to<typename CONTAINER::const_iterator>;
    // basic iteration over the consty object
    typename CONTAINER::const_iterator;
    { consty.begin() } -> convertible_to<typename CONTAINER::const_iterator>;
    { consty.end() } -> convertible_to<typename CONTAINER::const_iterator>;
  };
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import ish.cxx.required.Loopable
namespace ish::cxx::detail::rest {
  //
  // The core of a (re-)container in support of ish::cxx::rest(...)
  //
  // Concept:
  //   CONTAINER may be 'const' (consty) or not (muting)
  //
  // The ITERATOR and the CONST_ITERATOR may be the same
  //
  template<required::Loopable CONTAINER, typename ITERATOR, typename CONST_ITERATOR> class Core;
}
#endiv
#divert <hpp>
namespace ish::cxx::detail {
  template<required::Loopable CONTAINER, typename ITERATOR, typename CONST_ITERATOR> class rest::Core {
  protected:
    ~Core() = default; // descendants only
  public:
    using container_type = CONTAINER;
    using value_type = typename container_type::value_type;
    inline explicit Core(container_type &);
    using iterator = ITERATOR;
    inline auto begin() -> iterator;
    inline auto end() -> iterator;
    using const_iterator = CONST_ITERATOR;
    inline auto begin() const -> const_iterator;
    inline auto end() const -> const_iterator;
  protected:
    container_type &container;
    // avoid cut & past => handle the const-vs-nonconst of container_type vs rest_container, as used
    template<typename IT, typename CON> inline static auto begin_plus_one(CON &) -> IT;
    template<typename IT, typename CON> inline static auto end_exactly(CON &) -> IT;
  public:
    struct tests { struct Suite; };
    friend struct tests::Suite;
  };
}
#endiv
#divert <ipp>
namespace ish::cxx::detail::rest {
  template<required::Loopable CONTAINER, typename ITERATOR, typename CONST_ITERATOR> Core<CONTAINER, ITERATOR, CONST_ITERATOR>::Core(container_type &the_container)
    : container(the_container) {
    ;
  }

  template<required::Loopable CONTAINER, typename ITERATOR, typename CONST_ITERATOR> auto Core<CONTAINER, ITERATOR, CONST_ITERATOR>::begin() -> iterator {
    return begin_plus_one<iterator>(this->container);
  }

  template<required::Loopable CONTAINER, typename ITERATOR, typename CONST_ITERATOR> auto Core<CONTAINER, ITERATOR, CONST_ITERATOR>::end() -> iterator {
    return end_exactly<iterator>(this->container);
  }

  template<required::Loopable CONTAINER, typename ITERATOR, typename CONST_ITERATOR> auto Core<CONTAINER, ITERATOR, CONST_ITERATOR>::begin() const -> const_iterator {
    return begin_plus_one<const_iterator>(this->container);
  }

  template<required::Loopable CONTAINER, typename ITERATOR, typename CONST_ITERATOR> auto Core<CONTAINER, ITERATOR, CONST_ITERATOR>::end() const -> const_iterator {
    return end_exactly<const_iterator>(this->container);
  }

  template<required::Loopable CONTAINER, typename ITERATOR, typename CONST_ITERATOR> template<typename IT, typename CON> auto Core<CONTAINER, ITERATOR, CONST_ITERATOR>::begin_plus_one(CON &subject) -> IT {
    IT b(subject.begin());
    IT e(subject.end());
    if (b != e) {
      ++b;
    }
    return b;
  }

  template<required::Loopable CONTAINER, typename ITERATOR, typename CONST_ITERATOR> template<typename IT, typename CON> auto Core<CONTAINER, ITERATOR, CONST_ITERATOR>::end_exactly(CON &subject) -> IT {
    IT e(subject.end());
    return e;
  }
}
#endiv

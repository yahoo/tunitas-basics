// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import c.const_stringz
#import std.string
#import std.filesystem.path
#import nonstd.required.Pathlike
namespace ish::shell {
  //
  // Same as ${TMPDIR:-/tmp}
  //
  inline auto TMPDIR() -> std::filesystem::path;
  template<nonstd::required::Pathlike PATHLIKE> inline auto TMPDIR() -> PATHLIKE;
  namespace tmpdir {
    // This is an implementation detail; it avoids creating multiple copies of the returned TMPDIR string.
    // Get the raw string; the outer interface converts it to the appropriate form.
    inline auto getenv() -> c::const_stringz;
  }
}
#endiv
#divert <ipp>
#import c.str
auto ish::shell::TMPDIR() -> std::filesystem::path {
  // [[FIXTHIS]] this requires two copies to get it to a std::string and then to a std::filesystem:;patn
  return std::filesystem::path{c::str(tmpdir::getenv())};
}
template<nonstd::required::Pathlike PATHLIKE> auto ish::shell::TMPDIR() -> PATHLIKE {
  // [[FIXTHIS]] this requires two copies to get it to a std::string and then to a std::filesystem:;patn
  return PATHLIKE{c::str(tmpdir::getenv())};
}
#import sys.posix.getenv
auto ish::shell::tmpdir::getenv() -> c::const_stringz {
  // ahem ... same as sys::posix::tmpdir()
  auto got = sys::posix::getenv<c::const_stringz>("TMPDIR");
  if (!ok(got)) {
    return "/tmp";
  } else {
    return value(got);
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::stack {
  template<typename STACK0> class Stack0;
}
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
template<typename STACK0> class tests::unit::stack::Stack0 : public cppunit::test::Fixture {
public:
  using Subject = STACK0;
  auto test_constructor() -> void;
  auto test_empty() -> void;
  auto test_size() -> void;
  auto test_at() -> void;
  auto test_operator_index() -> void;
  auto test_begin_end() -> void;
  auto test_find() -> void;
  auto test_find_ex() -> void;
  auto test_is_sorted() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <tpp>
template<typename _> auto tests::unit::stack::Stack0<_>::test_constructor() -> void {
#warning WRITETHIS auto tests::unit::stack::Stack0<_>::test_constructor() -> void 
  CPPUNIT_ASSERT(true);
}
template<typename _> auto tests::unit::stack::Stack0<_>::test_empty() -> void {
#warning WRITETHIS auto tests::unit::stack::Stack0<_>::test_empty() -> void 
  CPPUNIT_ASSERT(true);
}
template<typename _> auto tests::unit::stack::Stack0<_>::test_size() -> void {
#warning WRITETHIS auto tests::unit::stack::Stack0<_>::test_size() -> void 
  CPPUNIT_ASSERT(true);
}
template<typename _> auto tests::unit::stack::Stack0<_>::test_at() -> void {
#warning WRITETHIS auto tests::unit::stack::Stack0<_>::test_at() -> void 
  CPPUNIT_ASSERT(true);
}
template<typename _> auto tests::unit::stack::Stack0<_>::test_operator_index() -> void {
#warning WRITETHIS auto tests::unit::stack::Stack0<_>::test_operator_index() -> void 
  CPPUNIT_ASSERT(true);
}
template<typename _> auto tests::unit::stack::Stack0<_>::test_begin_end() -> void {
#warning WRITETHIS auto tests::unit::stack::Stack0<_>::test_begin_end() -> void 
  CPPUNIT_ASSERT(true);
}
template<typename _> auto tests::unit::stack::Stack0<_>::test_find() -> void {
#warning WRITETHIS auto tests::unit::stack::Stack0<_>::test_find() -> void 
  CPPUNIT_ASSERT(true);
}
template<typename _> auto tests::unit::stack::Stack0<_>::test_find_ex() -> void {
#warning WRITETHIS auto tests::unit::stack::Stack0<_>::test_find_ex() -> void 
  CPPUNIT_ASSERT(true);
}
template<typename _> auto tests::unit::stack::Stack0<_>::test_is_sorted() -> void {
#warning WRITETHIS auto tests::unit::stack::Stack0<_>::test_is_sorted() -> void 
  CPPUNIT_ASSERT(true);
}
#import rigging.suite.io
template<typename _> auto tests::unit::stack::Stack0<_>::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series{"Stack0<"s + typeid(Subject).name() + ">"s};
  series << call("constructor", &Stack0::test_constructor)
         << call("constructor", &Stack0::test_constructor)
         << call("empty", &Stack0::test_empty)
         << call("size", &Stack0::test_size)
         << call("at", &Stack0::test_at)
         << call("operator[]", &Stack0::test_operator_index)
         << call("begin+end", &Stack0::test_begin_end)
         << call("find", &Stack0::test_find)
         << call("find_ex", &Stack0::test_find_ex)
         << call("is_sorted", &Stack0::test_is_sorted)
    ;
  return finalize(series);
}
#endiv

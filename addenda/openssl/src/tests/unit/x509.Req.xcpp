// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::x509 { class Req; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
#import openssl.x509.Req
class tests::unit::x509::Req : public cppunit::test::Fixture {
public:
  using Subject = ::openssl::x509::Req;
  auto test_constructor() -> void;
  auto test_set_version() -> void;
  auto test_get_subject_name_muting() -> void;
  auto test_get_subject_name_consty() -> void;
  auto test_get_pubkey() -> void;
  auto test_set_pubkey() -> void;
  auto test_sign_single() -> void;
  auto test_sign_multiple() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
auto tests::unit::x509::Req::test_constructor() -> void {
  Subject subject;
  CPPUNIT_ASSERT(nullptr != subject.get());
}
auto tests::unit::x509::Req::test_set_version() -> void {
  Subject subject;
  subject.set_version(::openssl::x509::req::Version{1});
  CPPUNIT_ASSERT(nullptr != subject.get());
}
auto tests::unit::x509::Req::test_get_subject_name_muting() -> void {
  namespace evp = ::openssl::evp;
  using std::move;
  Subject subject;
  auto name = subject.get_subject_name();
  CPPUNIT_ASSERT(nullptr != subject.get());
  CPPUNIT_ASSERT(nullptr != name.get());
}
auto tests::unit::x509::Req::test_get_subject_name_consty() -> void {
  namespace evp = ::openssl::evp;
  using std::move;
  Subject const subject;
  auto name = subject.get_subject_name();
  CPPUNIT_ASSERT(nullptr != subject.get());
  CPPUNIT_ASSERT(nullptr != name.get());
}
#import openssl.evp.PKey
auto tests::unit::x509::Req::test_get_pubkey() -> void {
  namespace ec = ::openssl::ec;
  namespace evp = ::openssl::evp;
  using std::move;
  Subject subject;
  auto pkey = []() -> evp::PKey {
                auto pk = evp::PKey{};
                auto ek = ec::Key{};
                auto gr = ec::Group{ec::group::Name::PRIME256V1};
                ek.set_group(move(gr));
                ek.generate_key();
                pk.assign(move(ek));
                return move(pk);
              }();
  subject.set_pubkey(pkey);
  CPPUNIT_ASSERT(nullptr != subject.get());
  auto repkey1 = subject.get_pubkey(); // <------------------------- test this
  auto repkey2 = subject.get_pubkey(); // <------------------------- test this
}
auto tests::unit::x509::Req::test_set_pubkey() -> void {
  namespace ec = ::openssl::ec;
  namespace evp = ::openssl::evp;
  using std::move;
  Subject subject;
  auto pkey = []() -> evp::PKey {
                auto pk = evp::PKey{};
                auto ek = ec::Key{};
                auto gr = ec::Group{ec::group::Name::PRIME256V1};
                ek.set_group(move(gr));
                ek.generate_key();
                pk.assign(move(ek));
                return move(pk);
              }();
  subject.set_pubkey(pkey); // <------------------------- test this
  CPPUNIT_ASSERT(nullptr != subject.get());
}
auto tests::unit::x509::Req::test_sign_single() -> void {
  namespace ec = ::openssl::ec;
  namespace evp = ::openssl::evp;
  using std::move;
  Subject subject;
  auto pkey = []() -> evp::PKey {
                auto pk = evp::PKey{};
                auto ek = ec::Key{};
                auto gr = ec::Group{ec::group::Name::PRIME256V1};
                ek.set_group(move(gr));
                ek.generate_key();
                pk.assign(move(ek));
                return move(pk);
              }();
  subject.set_pubkey(pkey);
  subject.sign(pkey, EVP_sha256()); // <------------------------- test this
  CPPUNIT_ASSERT(nullptr != subject.get());
}
auto tests::unit::x509::Req::test_sign_multiple() -> void {
  namespace ec = ::openssl::ec;
  namespace evp = ::openssl::evp;
  using std::move;
  for (auto i{1}, e{100}; e != i; ++i) {
    Subject subject;
    auto pkey = []() -> evp::PKey {
                  auto pk = evp::PKey{};
                  auto ek = ec::Key{};
                  auto gr = ec::Group{ec::group::Name::PRIME256V1};
                  ek.set_group(move(gr));
                  ek.generate_key();
                  pk.assign(move(ek));
                  return move(pk);
                }();
    subject.set_pubkey(pkey);
    auto name = subject.get_subject_name();
    name.add_entry_by_txt("O", "Acme");
    name.add_entry_by_txt("OU", "Finance");
    name.add_entry_by_txt("CN", "*.example.com");
    subject.sign(pkey, EVP_sha256()); // <------------------------- test this
    CPPUNIT_ASSERT(nullptr != subject.get());
  }
}
#import rigging.suite.io
auto tests::unit::x509::Req::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("Req");
  series << call("constructor", &Req::test_constructor)
         << call("set_version", &Req::test_set_version)
    ;
  {
    Stream get("get_subject_name");
    get << call("muting", &Req::test_get_subject_name_muting)
        << call("consty", &Req::test_get_subject_name_consty)
      ;
    series << move(get);
  }
  series << call("get_pubkey", &Req::test_get_pubkey)
         << call("set_pubkey", &Req::test_set_pubkey)
    ;
  {
    Stream sig("sign");
    sig << call("single", &Req::test_sign_single)
        << call("multiple", &Req::test_sign_multiple)
      ;
    series << move(sig);
  }
  return finalize(series);
}
#endiv

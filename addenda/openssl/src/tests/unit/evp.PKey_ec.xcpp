// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::evp { class PKey_ec; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
#import openssl.evp.PKey
class tests::unit::evp::PKey_ec : public cppunit::test::Fixture {
public:
  using Subject = ::openssl::evp::PKey;
  auto test_constructor_default() -> void;
  auto test_constructor_conversion() -> void;
  auto test_assign_ec() -> void;
  auto test_set_ec() -> void;
  auto test_base_id() -> void;
  auto test_system() -> void;
  auto test_generate_1() -> void;
  auto test_generate_2() -> void;
  auto test_generate_3() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import openssl.ec.Group
#import openssl.ec.Key
auto tests::unit::evp::PKey_ec::test_constructor_default() -> void {
  Subject subject;
  CPPUNIT_ASSERT(::openssl::System::NONE == subject.system());
  CPPUNIT_ASSERT(nullptr != subject.get());
}
auto tests::unit::evp::PKey_ec::test_constructor_conversion() -> void {
  // Crt::get_pubkey calls this
  // Req::get_pubkey calls this
  //
  // ... not tested directly ... but tested indirectly in Crt and Req
  //
  CPPUNIT_ASSERT(true);
}
auto tests::unit::evp::PKey_ec::test_assign_ec() -> void {
  namespace evp = ::openssl::evp;
  namespace ec = ::openssl::ec;
  auto pk = evp::PKey{};
  auto ek = ec::Key{};
  auto gr = ec::Group{ec::group::Name::PRIME256V1};
  ek.set_group(move(gr));
  ek.generate_key();
  pk.assign(move(ek)); // <---------------------------------- test this
  CPPUNIT_ASSERT(nullptr != pk.get());
}
auto tests::unit::evp::PKey_ec::test_set_ec() -> void {
  namespace evp = ::openssl::evp;
  namespace ec = ::openssl::ec;
  auto pk = evp::PKey{};
  auto ek = ec::Key{};
  auto gr = ec::Group{ec::group::Name::PRIME256V1};
  ek.set_group(move(gr));
  ek.generate_key();
  pk.set(ek); // <------------------------------------------ test this
  CPPUNIT_ASSERT(nullptr != pk.get());
}
auto tests::unit::evp::PKey_ec::test_base_id() -> void {
  namespace evp = ::openssl::evp;
  namespace ec = ::openssl::ec;
  auto pk = evp::PKey{};
  auto ek = ec::Key{};
  auto gr = ec::Group{ec::group::Name::PRIME256V1};
  ek.set_group(move(gr));
  ek.generate_key();
  pk.set(ek);
  CPPUNIT_ASSERT(EVP_PKEY_EC == pk.base_id()); // <--------- test this
}
auto tests::unit::evp::PKey_ec::test_system() -> void {
  namespace evp = ::openssl::evp;
  namespace ec = ::openssl::ec;
  auto pk = evp::PKey{};
  auto ek = ec::Key{};
  auto gr = ec::Group{ec::group::Name::PRIME256V1};
  ek.set_group(move(gr));
  ek.generate_key();
  pk.set(ek);
  CPPUNIT_ASSERT(openssl::System::EC == pk.system()); // <--------- test this
}
auto tests::unit::evp::PKey_ec::test_generate_1() -> void {
  namespace evp = ::openssl::evp;
  namespace ec = ::openssl::ec;
  auto pk = evp::PKey{};
  auto ek = ec::Key{};
  auto gr = ec::Group{ec::group::Name::PRIME256V1};
  ek.set_group(move(gr));
  ek.generate_key();
  pk.assign(move(ek));
  CPPUNIT_ASSERT(nullptr != pk.get()); // <----------- testing end-to-end
}
auto tests::unit::evp::PKey_ec::test_generate_2() -> void {
  test_generate_1();
  test_generate_1();
}
auto tests::unit::evp::PKey_ec::test_generate_3() -> void {
  test_generate_1();
  test_generate_1();
  test_generate_1();
}
#import rigging.suite.io
auto tests::unit::evp::PKey_ec::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("PKey[ec]");
  {
    Stream con("constructor");
    con << call("default", &PKey_ec::test_constructor_default)
        << call("conversion", &PKey_ec::test_constructor_conversion)
      ;
    series << move(con);
  } {
    Stream ecc("ec");
    ecc << call("assign", &PKey_ec::test_assign_ec)
        << call("set", &PKey_ec::test_set_ec)
      ;
    series << move(ecc);
  }
  series << call("base_id", &PKey_ec::test_base_id)
         << call("system", &PKey_ec::test_system)
    ;
  {
    Stream gen("generate");
    gen << call("1", &PKey_ec::test_generate_1)
        << call("2", &PKey_ec::test_generate_2)
        << call("3", &PKey_ec::test_generate_3)
      ;
    series << move(gen);
  }
  return finalize(series);
}
#endiv

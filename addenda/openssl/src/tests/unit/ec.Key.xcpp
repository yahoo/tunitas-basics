// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::ec { class Key; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
#import openssl.ec.Key
class tests::unit::ec::Key : public cppunit::test::Fixture {
public:
  using Subject = ::openssl::ec::Key;
  auto test_constructor() -> void;
  auto test_set_group() -> void;
  auto test_generate_key() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
auto tests::unit::ec::Key::test_constructor() -> void {
  namespace ec = ::openssl::ec;
  ec::Key key;
  CPPUNIT_ASSERT(nullptr != key.get());
}
#import openssl.ec.Group
auto tests::unit::ec::Key::test_set_group() -> void {
  namespace ec = ::openssl::ec;
  ec::Group group{ec::group::Name::PRIME256V1};
  ec::Key key;
  key.set_group(std::move(group));
  CPPUNIT_ASSERT(nullptr != key.get());
  CPPUNIT_ASSERT(nullptr == group.get());
}
auto tests::unit::ec::Key::test_generate_key() -> void {
  namespace ec = ::openssl::ec;
  ec::Group group{ec::group::Name::PRIME256V1};
  ec::Key key;
  key.set_group(std::move(group));
  key.generate_key();
  CPPUNIT_ASSERT(nullptr != key.get());
  CPPUNIT_ASSERT(nullptr == group.get());
}
#import rigging.suite.io
auto tests::unit::ec::Key::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("Key");
  series << call("constructor", &Key::test_constructor)
         << call("set_group", &Key::test_set_group)
         << call("generate_key", &Key::test_generate_key)
    ;
  return finalize(series);
}
#endiv

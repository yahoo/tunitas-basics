// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::big { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
class tests::unit::big::Fixture : public cppunit::test::Fixture {
public:
  auto test_usage_Num() -> void;
  template<typename PREPARATOR> auto test_usage_Preparator() -> void;
  auto test_serial() -> void;
  static auto suite() -> cppunit::Test *;
};;
#endiv
#divert <tpp>
namespace tests::unit::big {
  template<typename PREPARATOR> auto Fixture::test_usage_Preparator() -> void {
    using Preparator = PREPARATOR;
    Preparator subject{99};
    // The value has been converted into a big endian format.
    // We are (expected to be) on little endian Intel, so we can't directly inspect it without mor algo work.
    CPPUNIT_ASSERT(nullptr != subject.data());
    {
      auto FUDGE = 0; // std::is_unsigned<typename Preparator::Value>::value ? 1 : 0;
      auto const expected = sizeof (typename Preparator::Value) + FUDGE;
      auto const actual = subject.size();
      std::cerr << "size actual=" << actual << " " << expected << '\n';
      CPPUNIT_ASSERT_EQUAL(expected, actual);
    }
  }
}
#endiv
#divert <cpp>
#import openssl.big.Num
auto tests::unit::big::Fixture::test_usage_Num() -> void {
  ::openssl::big::Num s0;
  CPPUNIT_ASSERT(nullptr != s0.get());
  try {
    ::openssl::big::Num s1{1};
    CPPUNIT_ASSERT(nullptr != s1.get());
  } catch (std::error_code const &ec) {
    std::cerr << "failed to make a bignum\n";
    CPPUNIT_ASSERT(false);
  }
}
#import openssl.functions
#import openssl.big.Num
auto tests::unit::big::Fixture::test_serial() -> void {
  // Recall that 20 is a named limit in RFC 5280, Section 4.1.2.2 Serial Number
  // https://tools.ietf.org/html/rfc5280
  unsigned char serial_bytes[20];
  auto ok = RAND_bytes(serial_bytes, sizeof(serial_bytes));
  CPPUNIT_ASSERT(ok);
  auto subject = ::openssl::big::Num{serial_bytes};
  CPPUNIT_ASSERT(nullptr != subject.get());
}
#import nonstd.uint128_t
#import nonstd.int128_t
#import tests.unit.big.Num
#import tests.unit.big.bin.Preparator
#import rigging.suite.io
auto tests::unit::big::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  namespace subject = ::openssl::big::bin;
  namespace rig = ::tests::unit::big::bin;
  Stream series("big");
  {
    Stream use("usage");
    use << call("Num", &Fixture::test_usage_Num)
      ;
    {
      Stream pre("Preparator");
      pre << call("signed char", &Fixture::test_usage_Preparator<subject::Preparator<unsigned char>>)
          << call("unsigned char", &Fixture::test_usage_Preparator<subject::Preparator<signed char>>)
          << call("int short signed", &Fixture::test_usage_Preparator<subject::Preparator<int short signed>>)
          << call("int short unsigned", &Fixture::test_usage_Preparator<subject::Preparator<int short unsigned>>)
          << call("int signed", &Fixture::test_usage_Preparator<subject::Preparator<int signed>>)
          << call("int unsigned", &Fixture::test_usage_Preparator<subject::Preparator<int unsigned>>)
          << call("int long signed", &Fixture::test_usage_Preparator<subject::Preparator<int long signed>>)
          << call("int long unsigned", &Fixture::test_usage_Preparator<subject::Preparator<int long unsigned>>)
          << call("int long long signed", &Fixture::test_usage_Preparator<subject::Preparator<int long long signed>>)
          << call("int long long unsigned", &Fixture::test_usage_Preparator<subject::Preparator<int long long unsigned>>)
          << call("nonstd::int128_t", &Fixture::test_usage_Preparator<subject::Preparator<nonstd::int128_t>>)
          << call("nonstd::uint128_t", &Fixture::test_usage_Preparator<subject::Preparator<nonstd::uint128_t>>)
        ;
      use << move(pre);
    }
    series << move(use);
  }
  series << call("serial", &Fixture::test_serial)
         << add<Num>()
         << add<rig::Preparator<subject::Preparator<unsigned char>>>()
         << add<rig::Preparator<subject::Preparator<signed char>>>()
         << add<rig::Preparator<subject::Preparator<int short signed>>>()
         << add<rig::Preparator<subject::Preparator<int short unsigned>>>()
         << add<rig::Preparator<subject::Preparator<int signed>>>()
         << add<rig::Preparator<subject::Preparator<int unsigned>>>()
         << add<rig::Preparator<subject::Preparator<int long signed>>>()
         << add<rig::Preparator<subject::Preparator<int long unsigned>>>()
         << add<rig::Preparator<subject::Preparator<int long long signed>>>()
         << add<rig::Preparator<subject::Preparator<int long long unsigned>>>()
         << add<rig::Preparator<subject::Preparator<nonstd::int128_t>>>()
         << add<rig::Preparator<subject::Preparator<nonstd::uint128_t>>>()
    ;
  return finalize(series);
}
#endiv

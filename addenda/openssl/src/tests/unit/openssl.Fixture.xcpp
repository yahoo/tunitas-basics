// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::openssl { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
class tests::unit::openssl::Fixture : public cppunit::test::Fixture {
public:
  auto test_Success() -> void;
  template<typename TYPE> auto test_Outcome() -> void;
  auto test_System() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <tpp>
#import openssl.Outcome
#import std.error_code
#import openssl.error.Code
namespace tests::unit::openssl {
  template<typename TYPE> auto Fixture::test_Outcome() -> void {
    auto goodval = TYPE{};
    auto good = ::openssl::Outcome<TYPE>{goodval};
    CPPUNIT_ASSERT(ok(good));
    auto bad = ::openssl::Outcome<TYPE>{std::error_code{::openssl::error::Code::FAILURE}};
    CPPUNIT_ASSERT(!ok(bad));
  }
}
#endiv
#divert <cpp>
#import openssl.Success
#import openssl.error.Code
#import std.error_code
auto tests::unit::openssl::Fixture::test_Success() -> void {
  auto good = ::openssl::Success{::openssl::SUCCESS};
  CPPUNIT_ASSERT(ok(good));
  auto bad = ::openssl::Success{std::error_code{::openssl::error::Code::FAILURE}};
  CPPUNIT_ASSERT(!ok(bad));
}
#import openssl.System
auto tests::unit::openssl::Fixture::test_System() -> void {
  auto zero = ::openssl::System{};
  auto ec = ::openssl::System::EC;
  auto rsa = ::openssl::System::RSA;
  CPPUNIT_ASSERT(zero != ec);
  CPPUNIT_ASSERT(zero != rsa);
  CPPUNIT_ASSERT(ec != rsa);
}
#import rigging.suite.io
auto tests::unit::openssl::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("openssl");
  series << call("System", &Fixture::test_System)
         << call("Success", &Fixture::test_Success)
    ;
  {
    Stream out("Outcome");
    out << call("bool", &Fixture::test_Outcome<bool>)
        << call("char", &Fixture::test_Outcome<char>)
        << call("string", &Fixture::test_Outcome<std::string>)
    ;
    series << move(out);
  }
  return finalize(series);
}
#endiv

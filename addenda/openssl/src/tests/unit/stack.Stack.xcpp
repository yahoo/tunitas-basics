// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::stack {
  template<typename STACK> class Stack;
}
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
template<typename STACK> class tests::unit::stack::Stack : public cppunit::test::Fixture {
public:
  using Subject = STACK;
  auto test_constructor() -> void;
  auto test_empty() -> void;
  auto test_size() -> void;
  auto test_at_rhs() -> void;
  auto test_at_lhs() -> void;
  auto test_operator_index_rhs() -> void;
  auto test_operator_index_lhs() -> void;
  auto test_begin_end_consty() -> void;
  auto test_begin_end_muting() -> void;
  auto test_find() -> void;
  auto test_find_ex() -> void;
  auto test_is_sorted() -> void;
  auto test_remove() -> void;
  auto test_remove_where() -> void;
  auto test_push() -> void;
  auto test_pop() -> void;
  auto test_insert() -> void;
  auto test_unshift() -> void;
  auto test_shift() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <tpp>
template<typename _> auto tests::unit::stack::Stack<_>::test_constructor() -> void {
#warning WRITETHIS auto tests::unit::stack::Stack<_>::test_constructor() -> void 
  CPPUNIT_ASSERT(true);
}
template<typename _> auto tests::unit::stack::Stack<_>::test_empty() -> void {
#warning WRITETHIS auto tests::unit::stack::Stack<_>::test_empty() -> void 
  CPPUNIT_ASSERT(true);
}
template<typename _> auto tests::unit::stack::Stack<_>::test_size() -> void {
#warning WRITETHIS auto tests::unit::stack::Stack<_>::test_size() -> void 
  CPPUNIT_ASSERT(true);
}
template<typename _> auto tests::unit::stack::Stack<_>::test_at_lhs() -> void {
#warning WRITETHIS auto tests::unit::stack::Stack<_>::test_at_lhs() -> void 
  CPPUNIT_ASSERT(true);
}
template<typename _> auto tests::unit::stack::Stack<_>::test_at_rhs() -> void {
#warning WRITETHIS auto tests::unit::stack::Stack<_>::test_at_rhs() -> void 
  CPPUNIT_ASSERT(true);
}
template<typename _> auto tests::unit::stack::Stack<_>::test_operator_index_lhs() -> void {
#warning WRITETHIS auto tests::unit::stack::Stack<_>::test_operator_index_lhs() -> void 
  CPPUNIT_ASSERT(true);
}
template<typename _> auto tests::unit::stack::Stack<_>::test_operator_index_rhs() -> void {
#warning WRITETHIS auto tests::unit::stack::Stack<_>::test_operator_index_rhs() -> void 
  CPPUNIT_ASSERT(true);
}
template<typename _> auto tests::unit::stack::Stack<_>::test_begin_end_muting() -> void {
#warning WRITETHIS auto tests::unit::stack::Stack<_>::test_begin_end_musting() -> void 
  CPPUNIT_ASSERT(true);
}
template<typename _> auto tests::unit::stack::Stack<_>::test_begin_end_consty() -> void {
#warning WRITETHIS auto tests::unit::stack::Stack<_>::test_begin_end_consty() -> void 
  CPPUNIT_ASSERT(true);
}
template<typename _> auto tests::unit::stack::Stack<_>::test_find() -> void {
#warning WRITETHIS auto tests::unit::stack::Stack<_>::test_find() -> void 
  CPPUNIT_ASSERT(true);
}
template<typename _> auto tests::unit::stack::Stack<_>::test_find_ex() -> void {
#warning WRITETHIS auto tests::unit::stack::Stack<_>::test_find_ex() -> void 
  CPPUNIT_ASSERT(true);
}
template<typename _> auto tests::unit::stack::Stack<_>::test_is_sorted() -> void {
#warning WRITETHIS auto tests::unit::stack::Stack<_>::test_is_sorted() -> void 
  CPPUNIT_ASSERT(true);
}
template<typename _> auto tests::unit::stack::Stack<_>::test_remove() -> void {
#warning WRITETHIS auto tests::unit::stack::Stack<_>::test_remove() -> void 
  CPPUNIT_ASSERT(true);
}
template<typename _> auto tests::unit::stack::Stack<_>::test_remove_where() -> void {
#warning WRITETHIS auto tests::unit::stack::Stack<_>::test_remove_where() -> void 
  CPPUNIT_ASSERT(true);
}
template<typename _> auto tests::unit::stack::Stack<_>::test_push() -> void {
#warning WRITETHIS auto tests::unit::stack::Stack<_>::test_push() -> void 
  CPPUNIT_ASSERT(true);
}
template<typename _> auto tests::unit::stack::Stack<_>::test_pop() -> void {
#warning WRITETHIS auto tests::unit::stack::Stack<_>::test_pop() -> void 
  CPPUNIT_ASSERT(true);
}
template<typename _> auto tests::unit::stack::Stack<_>::test_insert() -> void {
#warning WRITETHIS auto tests::unit::stack::Stack<_>::test_insert() -> void 
  CPPUNIT_ASSERT(true);
}
template<typename _> auto tests::unit::stack::Stack<_>::test_unshift() -> void {
#warning WRITETHIS auto tests::unit::stack::Stack<_>::test_unshift() -> void 
  CPPUNIT_ASSERT(true);
}
template<typename _> auto tests::unit::stack::Stack<_>::test_shift() -> void {
#warning WRITETHIS auto tests::unit::stack::Stack<_>::test_shift() -> void 
  CPPUNIT_ASSERT(true);
}
#import rigging.suite.io
template<typename _> auto tests::unit::stack::Stack<_>::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series{"Stack<"s + typeid(Subject).name() + ">"s};
  series << call("constructor", &Stack::test_constructor)
         << call("constructor", &Stack::test_constructor)
         << call("empty", &Stack::test_empty)
         << call("size", &Stack::test_size)
    ;        
  {
    Stream at{"at"};
    at << call("lhs", &Stack::test_at_lhs)
       << call("rhs", &Stack::test_at_rhs)
      ;
    series << move(at);
  } {
    Stream ind{"operator[]"};
    ind << call("lhs", &Stack::test_operator_index_lhs)
        << call("rhs", &Stack::test_operator_index_rhs)
      ;
    series << move(ind);
  } {
    Stream beg{"begin+end"};
    beg << call("consty", &Stack::test_begin_end_consty)
        << call("muting", &Stack::test_begin_end_muting)
      ;
    series << move(beg);
  }
  series << call("find", &Stack::test_find)
         << call("find_ex", &Stack::test_find_ex)
         << call("is_sorted", &Stack::test_is_sorted)
         << call("remove", &Stack::test_remove)
         << call("push", &Stack::test_push)
         << call("pop", &Stack::test_pop)
         << call("insert", &Stack::test_insert)
         << call("unshift", &Stack::test_unshift)
         << call("shift", &Stack::test_shift)
    ;
  return finalize(series);
}
#endiv

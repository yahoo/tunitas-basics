// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::asn1 { class Integer0; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
#import openssl.asn1.Integer0
class tests::unit::asn1::Integer0 : public cppunit::test::Fixture {
public:
  using Subject = ::openssl::asn1::Integer0;
  auto test_constructor_conversion() -> void;
  auto test_assignment_move() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import openssl.x509.Revoked
#import openssl.x509.serial.generate
auto tests::unit::asn1::Integer0::test_constructor_conversion() -> void {
  ::openssl::x509::Revoked revoked;
  revoked.set_serialNumber(openssl::x509::serial::generate());
  Subject subject = revoked.get_serialNumber();
  CPPUNIT_ASSERT(nullptr != subject.get());
}
#import std.move
auto tests::unit::asn1::Integer0::test_assignment_move() -> void {
  ::openssl::x509::Revoked revokedA;
  revokedA.set_serialNumber(openssl::x509::serial::generate());
  Subject prep = revokedA.get_serialNumber();
  ::openssl::x509::Revoked revokedB;
  revokedB.set_serialNumber(openssl::x509::serial::generate());
  Subject subject = revokedB.get_serialNumber();
  subject = std::move(prep); // <----------------------------- test this (which does what? a swap?)
  CPPUNIT_ASSERT(nullptr != subject.get());
}
#import rigging.suite.io
auto tests::unit::asn1::Integer0::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("Integer0");
  {
    Stream con("constructor");
    con << call("conversion", &Integer0::test_constructor_conversion)
      ;
    series << move(con);
  } {
    Stream ass("assignment");
    ass << call("move", &Integer0::test_assignment_move)
      ;
    series << move(ass);
  }
  return finalize(series);
}
#endiv

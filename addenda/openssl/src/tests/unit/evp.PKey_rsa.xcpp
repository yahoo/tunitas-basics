// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::evp { class PKey_rsa; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
#import openssl.evp.PKey
class tests::unit::evp::PKey_rsa : public cppunit::test::Fixture {
public:
  using Subject = ::openssl::evp::PKey;
  auto test_constructor_default() -> void;
  auto test_constructor_conversion() -> void;
  auto test_assign_rsa() -> void;
  auto test_set_rsa() -> void;
  auto test_base_id() -> void;
  auto test_system() -> void;
  auto test_generate_1() -> void;
  auto test_generate_2() -> void;
  auto test_generate_3() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import openssl.rsa.Pair
#import openssl.rsa.generate
auto tests::unit::evp::PKey_rsa::test_constructor_default() -> void {
  Subject subject;
  CPPUNIT_ASSERT(::openssl::System::NONE == subject.system());
  CPPUNIT_ASSERT(nullptr != subject.get());
}
auto tests::unit::evp::PKey_rsa::test_constructor_conversion() -> void {
  // Crt::get_pubkey calls this
  // Req::get_pubkey calls this
#warning WRITETHIS auto tests::unit::evp::PKey_rsa::test_constructor_conversion() -> void
  CPPUNIT_ASSERT(true);
}
auto tests::unit::evp::PKey_rsa::test_assign_rsa() -> void {
  namespace rsa = ::openssl::rsa;
  namespace evp = ::openssl::evp;
  auto pk = evp::PKey{};
  auto pair = rsa::generate(rsa::Bits::RSA512);
  pk.assign(std::move(pair)); // <----------------------------------------- test this
  CPPUNIT_ASSERT(nullptr != pk.get());
}
auto tests::unit::evp::PKey_rsa::test_set_rsa() -> void {
  namespace rsa = ::openssl::rsa;
  namespace evp = ::openssl::evp;
  auto pk = evp::PKey{};
  auto pair = rsa::generate(rsa::Bits::RSA512);
  pk.assign(std::move(pair)); // <----------------------------------------- test this
  CPPUNIT_ASSERT(nullptr != pk.get());
}
auto tests::unit::evp::PKey_rsa::test_base_id() -> void {
  namespace rsa = ::openssl::rsa;
  namespace evp = ::openssl::evp;
  auto pk = evp::PKey{};
  auto pair = rsa::generate(rsa::Bits::RSA512);
  pk.assign(std::move(pair));
  CPPUNIT_ASSERT(EVP_PKEY_RSA == pk.base_id()); // <---------------------- test this
}
auto tests::unit::evp::PKey_rsa::test_system() -> void {
  namespace rsa = ::openssl::rsa;
  namespace evp = ::openssl::evp;
  auto pk = evp::PKey{};
  auto pair = rsa::generate(rsa::Bits::RSA512);
  pk.assign(std::move(pair));
  CPPUNIT_ASSERT(::openssl::System::RSA == pk.system()); // <--------------- test this
}
auto tests::unit::evp::PKey_rsa::test_generate_1() -> void {
  namespace rsa = ::openssl::rsa;
  namespace evp = ::openssl::evp;
  auto pk = evp::PKey{};
  auto pair = rsa::generate(rsa::Bits::RSA512);
  pk.assign(std::move(pair));
  CPPUNIT_ASSERT(nullptr != pk.get()); // <--------------------------------- test end-to-end
}
auto tests::unit::evp::PKey_rsa::test_generate_2() -> void {
  test_generate_1();
  test_generate_1();
}
auto tests::unit::evp::PKey_rsa::test_generate_3() -> void {
  test_generate_1();
  test_generate_1();
  test_generate_1();
}
#import rigging.suite.io
auto tests::unit::evp::PKey_rsa::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("PKey[rsa]");
  {
    Stream con("constructor");
    con << call("default", &PKey_rsa::test_constructor_default)
        << call("conversion", &PKey_rsa::test_constructor_conversion)
      ;
    series << move(con);
  } {
    Stream rsa("rsa");
    rsa << call("assign", &PKey_rsa::test_assign_rsa)
        << call("set", &PKey_rsa::test_set_rsa)
      ;
    series << move(rsa);
  } 
  series << call("base_id", &PKey_rsa::test_base_id)
         << call("system", &PKey_rsa::test_system)
    ;
  {
    Stream gen("generate");
    gen << call("1", &PKey_rsa::test_generate_1)
        << call("2", &PKey_rsa::test_generate_2)
        << call("3", &PKey_rsa::test_generate_3)
      ;
    series << move(gen);
  }
  return finalize(series);
}
#endiv

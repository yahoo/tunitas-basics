// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::x509 { class Extension; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
#import openssl.x509.Extension
#import openssl.x509.extension.Critical
class tests::unit::x509::Extension : public cppunit::test::Fixture {
public:
  using Subject = ::openssl::x509::Extension;
  auto test_Critical() -> void;
  auto test_constructor_default() -> void;
  auto test_constructor_config() -> void;
  auto test_config_by_nid() -> void;
  auto test_config_by_name() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
auto tests::unit::x509::Extension::test_Critical() -> void {
  using ::openssl::x509::extension::Critical;
  auto subject = Critical{};
  subject = Critical::UNDEFINED;
  subject = Critical::NO;
  subject = Critical::YES;
  subject = Critical::TRUE;
  subject = Critical::FALSE;
  CPPUNIT_ASSERT(Critical{} == Critical::UNDEFINED);
  CPPUNIT_ASSERT(false == Critical::NO);
  CPPUNIT_ASSERT(true == Critical::YES);
}
auto tests::unit::x509::Extension::test_constructor_default() -> void {
  Subject subject;
  CPPUNIT_ASSERT(nullptr != subject.get());
}
#import openssl.x509.extension.config
auto tests::unit::x509::Extension::test_constructor_config() -> void {
  using ::openssl::x509::extension::config;
  auto ext = config(NID_basic_constraints, "CA:TRUE,pathlen:99");
  CPPUNIT_ASSERT(nullptr != ext.get());
}
auto tests::unit::x509::Extension::test_config_by_nid() -> void {
  using ::openssl::x509::extension::config;
  auto ext = config(NID_basic_constraints, "CA:TRUE,pathlen:99");
  CPPUNIT_ASSERT(nullptr != ext.get());
}
auto tests::unit::x509::Extension::test_config_by_name() -> void {
  // I have "one simple question"
  using ::openssl::x509::extension::config;
  auto ext = config("basicConstraints", "CA:TRUE,pathlen:99");
  CPPUNIT_ASSERT(nullptr != ext.get());
}
#import rigging.suite.io
auto tests::unit::x509::Extension::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("Extension");
  series << call("Critical", &Extension::test_Critical)
    ;
  {
    Stream con("constructor");
    con << call("default", &Extension::test_constructor_default)
      ;
    series << move(con);
  } {
    Stream fig("config-by");
    fig << call("nid", &Extension::test_config_by_nid)
        << call("name", &Extension::test_config_by_name)
      ;
    series << move(fig);
  }
  return finalize(series);
}
#endiv

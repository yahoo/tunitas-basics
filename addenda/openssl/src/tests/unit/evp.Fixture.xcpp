// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::evp { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
class tests::unit::evp::Fixture : public cppunit::test::Fixture {
public:
  auto test_usage_ec() -> void;
  auto test_usage_rsa() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import openssl.evp.PKey
#import std.move
#import openssl.ec.Key
#import openssl.ec.Group
auto tests::unit::evp::Fixture::test_usage_ec() -> void {
  namespace ec = ::openssl::ec;
  namespace evp = ::openssl::evp;
  using std::move;
  auto pkey = []() -> evp::PKey {
                auto pk = evp::PKey{};
                auto ek = ec::Key{};
                auto gr = ec::Group{ec::group::Name::PRIME256V1};
                ek.set_group(move(gr));
                ek.generate_key();
                pk.assign(move(ek));
                return move(pk);
              }();
  CPPUNIT_ASSERT(nullptr != pkey.get());
}
#import openssl.rsa.Pair
#import openssl.rsa.generate
auto tests::unit::evp::Fixture::test_usage_rsa() -> void {
  namespace rsa = ::openssl::rsa;
  namespace evp = ::openssl::evp;
  auto pkey = []() -> evp::PKey {
                auto pk = evp::PKey{};
                auto pair = rsa::generate(rsa::Bits::RSA2048);
                pk.assign(std::move(pair));
                return move(pk);
              }();
  CPPUNIT_ASSERT(nullptr != pkey.get());
}
#import tests.unit.evp.PKey0
#import tests.unit.evp.PKey_ec
#import tests.unit.evp.PKey_rsa
#import rigging.suite.io
auto tests::unit::evp::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("evp");
  {
    Stream use("usage");
    use << call("ec", &Fixture::test_usage_ec)
        << call("rsa", &Fixture::test_usage_rsa)
      ;
    series << move(use);
  }
  series << add<evp::PKey_ec>()
         << add<evp::PKey_rsa>()
         << add<evp::PKey0>()
    ;
  return finalize(series);
}
#endiv

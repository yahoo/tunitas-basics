// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::asn1 { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
class tests::unit::asn1::Fixture : public cppunit::test::Fixture {
public:
  auto test_usage_Integer() -> void;
  auto test_usage_Time0() -> void;
  auto test_usage_Time() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import openssl.asn1.Integer
auto tests::unit::asn1::Fixture::test_usage_Integer() -> void {
  using ::openssl::asn1::Integer;
  Integer subject;
  CPPUNIT_ASSERT(nullptr != subject.get());
}
#import openssl.time.now
#import openssl.asn1.Time0
#import openssl.x509.Revoked
auto tests::unit::asn1::Fixture::test_usage_Time0() -> void {
  using ::openssl::asn1::Time0;
  using ::openssl::x509::Revoked;
  Revoked revoked;
  revoked.set_revocationDate(::openssl::time::now());
  Time0 subject = revoked.get_revocationDate();
  CPPUNIT_ASSERT(nullptr != subject.get());
}
#import openssl.asn1.Time
auto tests::unit::asn1::Fixture::test_usage_Time() -> void {
  using ::openssl::asn1::Time;
  Time subject;
  subject = ::openssl::time::now();
  CPPUNIT_ASSERT(true);
}
#import tests.unit.asn1.Integer0
#import tests.unit.asn1.Integer
#import tests.unit.asn1.Time0
#import tests.unit.asn1.Time
#import rigging.suite.io
auto tests::unit::asn1::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("asn1");
  {
    Stream use("usage");
    use << call("Integer", &Fixture::test_usage_Integer)
        << call("Time0", &Fixture::test_usage_Time0)
        << call("Time", &Fixture::test_usage_Time)
    ;
    series << move(use);
  }
  series << add<Integer0>()
         << add<Integer>()
         << add<Time0>()
         << add<Time>()
    ;
  return finalize(series);
}
#endiv

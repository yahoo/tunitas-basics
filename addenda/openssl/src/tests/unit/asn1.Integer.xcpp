// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::asn1 { class Integer; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
#import openssl.asn1.Integer
class tests::unit::asn1::Integer : public cppunit::test::Fixture {
public:
  using Subject = ::openssl::asn1::Integer;
  auto test_constructor_default() -> void;
  auto test_constructor_integer() -> void;
  auto test_constructor_bigNum() -> void;
  auto test_assignment_move() -> void;
  auto test_assignment_integer() -> void;
  auto test_assignment_bigNum() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import openssl.asn1.Integer
auto tests::unit::asn1::Integer::test_constructor_default() -> void {
  Subject subject;
  CPPUNIT_ASSERT(nullptr != subject.get());
}
auto tests::unit::asn1::Integer::test_constructor_integer() -> void {
  Subject subject{88};
  CPPUNIT_ASSERT(nullptr != subject.get());
}
#import openssl.big.Num
auto tests::unit::asn1::Integer::test_constructor_bigNum() -> void {
  ::openssl::big::Num bn;
  Subject subject{bn};
  CPPUNIT_ASSERT(nullptr != subject.get());
}
#import std.move
auto tests::unit::asn1::Integer::test_assignment_move() -> void {
  Subject prep;
  Subject subject;
  subject = std::move(prep);
  CPPUNIT_ASSERT(nullptr != subject.get());
}
auto tests::unit::asn1::Integer::test_assignment_integer() -> void {
  Subject subject;
  subject = 99;
  CPPUNIT_ASSERT(nullptr != subject.get());
}
auto tests::unit::asn1::Integer::test_assignment_bigNum() -> void {
  ::openssl::big::Num bn;
  Subject subject;
  subject = bn;
  CPPUNIT_ASSERT(nullptr != subject.get());
}
#import rigging.suite.io
auto tests::unit::asn1::Integer::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("Integer");
  {
    Stream con("constructor");
    con << call("default", &Integer::test_constructor_default)
        << call("integer", &Integer::test_constructor_integer)
        << call("big::Num", &Integer::test_constructor_bigNum)
      ;
    series << move(con);
  } {
    Stream ass("assignment");
    ass << call("move", &Integer::test_assignment_move)
        << call("integer", &Integer::test_assignment_integer)
        << call("big::Num", &Integer::test_assignment_bigNum)
      ;
    series << move(ass);
  }
  return finalize(series);
}
#endiv

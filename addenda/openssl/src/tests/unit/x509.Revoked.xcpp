// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::x509 { class Revoked; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
#import openssl.x509.Revoked
#import openssl.x509.Revoked0
class tests::unit::x509::Revoked : public cppunit::test::Fixture {
public:
  using Subject = ::openssl::x509::Revoked;
  using Subject0 = ::openssl::x509::Revoked0;
  auto test_genrevoked_1() -> void;
  auto test_genrevoked_many() -> void;
  auto test_constructor_default() -> void;
  auto test_constructor_conversion_1() -> void;
  auto test_constructor_conversion_2() -> void;
  auto test_constructor_conversion_3() -> void;
  auto test_get_serialNumber_0() -> void;
  auto test_get_serialNumber_1() -> void;
  auto test_set_serialNumber() -> void;
  auto test_get_revocationDate() -> void;
  auto test_set_revocationDate() -> void;
  auto test_get_extensions_0() -> void;
  auto test_get_extensions_1() -> void;
  auto test_get_extensions_2() -> void;
  auto test_add_ext() -> void;
  auto test_all() -> void;
  static auto suite() -> cppunit::Test *;
protected:
  static auto genrevoked() -> Subject;
};
#endiv
#divert <cpp>
#import openssl.x509.extension.config
#import openssl.x509.serial.generate
#import openssl.time.now
auto tests::unit::x509::Revoked::genrevoked() -> Subject {
  Subject ret;
  ret.set_serialNumber(::openssl::x509::serial::generate());
  ret.set_revocationDate(::openssl::time::now());
  return ret;
}
auto tests::unit::x509::Revoked::test_genrevoked_1() -> void {
  genrevoked();
}
auto tests::unit::x509::Revoked::test_genrevoked_many() -> void {
  for (auto i{0u}, e{100u}; e != i; ++i) {
    genrevoked();
  }
}
auto tests::unit::x509::Revoked::test_constructor_default() -> void {
  Subject subject;
  CPPUNIT_ASSERT(nullptr != subject.get());
}
auto tests::unit::x509::Revoked::test_constructor_conversion_1() -> void {
  auto subject = genrevoked();
  CPPUNIT_ASSERT(nullptr != subject.get());
}
auto tests::unit::x509::Revoked::test_constructor_conversion_2() -> void {
  test_constructor_conversion_1();
  test_constructor_conversion_1();
}
auto tests::unit::x509::Revoked::test_constructor_conversion_3() -> void {
  test_constructor_conversion_1();
  test_constructor_conversion_1();
  test_constructor_conversion_1();
}
auto tests::unit::x509::Revoked::test_get_serialNumber_0() -> void {
  Subject subject;
  CPPUNIT_ASSERT(nullptr != subject.get());
  auto serial = subject.get_serialNumber();
  CPPUNIT_ASSERT(nullptr != serial.get());
}
#import openssl.x509.serial.generate
auto tests::unit::x509::Revoked::test_get_serialNumber_1() -> void {
  Subject subject;
  CPPUNIT_ASSERT(nullptr != subject.get());
  subject.set_serialNumber(::openssl::x509::serial::generate());
  auto serial = subject.get_serialNumber();
  CPPUNIT_ASSERT(nullptr != serial.get());
}
auto tests::unit::x509::Revoked::test_set_serialNumber() -> void {
  Subject subject;
  subject.set_serialNumber(::openssl::x509::serial::generate());
  CPPUNIT_ASSERT(nullptr != subject.get());
}
auto tests::unit::x509::Revoked::test_get_revocationDate() -> void {
  Subject subject;
  auto when = subject.get_revocationDate(); // <--------------------- test this
  CPPUNIT_ASSERT(nullptr != when.get());
}
#import sys.time.as
#import sys.time.t
#import openssl.time.now
auto tests::unit::x509::Revoked::test_set_revocationDate() -> void {
  auto ttt = sys::time::as<sys::time::t>(::openssl::time::now());
  std::cerr << "time is " << ttt << '\n';
  auto then = ::openssl::asn1::Time{::openssl::time::now()};
  Subject subject;
  subject.set_revocationDate(then); // <---------------------------- test this
}
#import openssl.exception.Null
auto tests::unit::x509::Revoked::test_get_extensions_0() -> void {
  try {
    Subject subject;
    subject.get_extensions(); // <--------------------- test this on an empty extensions
    CPPUNIT_ASSERT(false);
  } catch (::openssl::exception::Null const &) {
    CPPUNIT_ASSERT(true);
  }
}
auto tests::unit::x509::Revoked::test_get_extensions_1() -> void {
  Subject subject;
  CPPUNIT_ASSERT(nullptr != subject.get());
  subject.add_ext(::openssl::x509::extension::config(NID_basic_constraints, "CA:TRUE"));
  auto extensions = subject.get_extensions(); // <------------------- test this (consty but on a mutable one)
  CPPUNIT_ASSERT(1 == extensions.size());
}
auto tests::unit::x509::Revoked::test_get_extensions_2() -> void {
  Subject subject;
  CPPUNIT_ASSERT(nullptr != subject.get());
  subject.add_ext(::openssl::x509::extension::config(NID_basic_constraints, "CA:TRUE"));
  Subject const &redo{subject};
  auto extensions = redo.get_extensions(); // <------------------- test this (consty and on a consty one)
  CPPUNIT_ASSERT(1 == extensions.size());
}
auto tests::unit::x509::Revoked::test_add_ext() -> void {
  Subject subject;
  subject.add_ext(::openssl::x509::extension::config(NID_basic_constraints, "CA:TRUE"));
  CPPUNIT_ASSERT(nullptr != subject.get());
}
auto tests::unit::x509::Revoked::test_all() -> void {
  test_constructor_default();
  test_constructor_conversion_1();
  test_constructor_conversion_2();
  test_constructor_conversion_3();
  test_get_serialNumber_0();
  test_get_serialNumber_1();
  test_set_serialNumber();
  test_get_revocationDate();
  test_set_revocationDate();
  test_get_extensions_0();
  test_get_extensions_1();
  test_get_extensions_2();
  test_add_ext();
}
#import rigging.suite.io
auto tests::unit::x509::Revoked::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("Revoked");
  {
    Stream gen("genrevoked");
    gen << call("1", &Revoked::test_genrevoked_1)
        << call("many", &Revoked::test_genrevoked_many)
      ;
    series << move(gen);
  } {
    Stream con("constructor");
    con << call("default", &Revoked::test_constructor_default)
      ;
    {
      Stream ver("conversion");
      ver << call("1", &Revoked::test_constructor_conversion_1)
          << call("2", &Revoked::test_constructor_conversion_2)
          << call("3", &Revoked::test_constructor_conversion_3)
        ;
      con << move(ver);
    }
    series << move(con);
  } {
    Stream get("get_serialNumber");
    get << call("0", &Revoked::test_get_serialNumber_0)
        << call("1", &Revoked::test_get_serialNumber_1)
      ;
    series << move(get);
  }
  series << call("set_serialNumber", &Revoked::test_set_serialNumber)
         << call("get_revocationDate", &Revoked::test_get_revocationDate)
         << call("set_revocationDate", &Revoked::test_set_revocationDate)
    ;
  {
    Stream get("get_extensions");
    get << call("0", &Revoked::test_get_extensions_0)
        << call("1", &Revoked::test_get_extensions_1)
        << call("2", &Revoked::test_get_extensions_2)
      ;
    series << move(get);
  }
  series << call("add_ext", &Revoked::test_add_ext)
         << call("all", &Revoked::test_all)
    ;
  return finalize(series);
}
#endiv

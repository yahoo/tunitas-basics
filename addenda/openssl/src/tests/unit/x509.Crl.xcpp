// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::x509 { class Crl; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
#import openssl.x509.Crl
#import openssl.x509.Revoked
class tests::unit::x509::Crl : public cppunit::test::Fixture {
public:
  using Subject = ::openssl::x509::Crl;
  auto test_constructor_default_1() -> void;
  auto test_constructor_default_2() -> void;
  auto test_constructor_default_3() -> void;
  auto test_get_version() -> void;
  auto test_set_version() -> void;
  auto test_get_issuer_name_muting() -> void;
  auto test_get_issuer_name_consty() -> void;
  auto test_set_issuer_name() -> void;
  auto test_get_lastUpdate_0() -> void;
  auto test_get_lastUpdate_1() -> void;
  auto test_set_lastUpdate() -> void;
  auto test_get_nextUpdate_0() -> void;
  auto test_get_nextUpdate_1() -> void;
  auto test_set_nextUpdate() -> void;
  auto test_get_extensions_0() -> void;
  auto test_get_extensions_1() -> void;
  auto test_get_extensions_2() -> void;
  auto test_add_ext() -> void;
  auto test_get_revocations_0() -> void;
  auto test_get_revocations_1() -> void;
  auto test_get_revocations_2() -> void;
  auto test_add_revoke() -> void;
  auto test_sign_single() -> void;
  auto test_sign_double() -> void;
  auto test_sign_multiple() -> void;
  auto test_all() -> void;
  static auto suite() -> cppunit::Test *;
protected:
  static auto genrevoked() -> ::openssl::x509::Revoked;
};
#endiv
#divert <cpp>
#import openssl.evp.PKey
#import openssl.x509.serial.generate
#import openssl.time.now
auto tests::unit::x509::Crl::genrevoked() -> ::openssl::x509::Revoked {
  ::openssl::x509::Revoked ret;
  ret.set_serialNumber(::openssl::x509::serial::generate());
  ret.set_revocationDate(::openssl::time::now());
  return ret;
}
auto tests::unit::x509::Crl::test_constructor_default_1() -> void {
  Subject subject;
  CPPUNIT_ASSERT(nullptr != subject.get());
}
auto tests::unit::x509::Crl::test_constructor_default_2() -> void {
  test_constructor_default_1();
  test_constructor_default_1();
}
auto tests::unit::x509::Crl::test_constructor_default_3() -> void {
  test_constructor_default_1();
  test_constructor_default_1();
  test_constructor_default_1();
}
auto tests::unit::x509::Crl::test_get_version() -> void {
  Subject subject;
  subject.set_version(::openssl::x509::crl::Version{33});
  auto version = subject.get_version();
  CPPUNIT_ASSERT(version == ::openssl::x509::crl::Version{33});
}
auto tests::unit::x509::Crl::test_set_version() -> void {
  Subject subject;
  subject.set_version(::openssl::x509::crl::Version{2});
  CPPUNIT_ASSERT(nullptr != subject.get());
}
auto tests::unit::x509::Crl::test_get_issuer_name_muting() -> void {
  Subject subject;
  auto name = subject.get_issuer_name(); // <-------------------- test this (muting)
  CPPUNIT_ASSERT(nullptr != subject.get());
  CPPUNIT_ASSERT(nullptr != name.get());
}
auto tests::unit::x509::Crl::test_get_issuer_name_consty() -> void {
  Subject const subject;
  auto name = subject.get_issuer_name(); // <-------------------- test this (consty)
  CPPUNIT_ASSERT(nullptr != subject.get());
  CPPUNIT_ASSERT(nullptr != name.get());
}
auto tests::unit::x509::Crl::test_set_issuer_name() -> void {
  Subject subject;
  auto name = subject.get_issuer_name();
  subject.set_issuer_name(std::move(name)); // <---------------- test this
}
auto tests::unit::x509::Crl::test_get_lastUpdate_0() -> void {
  try {
    Subject subject;
    auto last = subject.get_lastUpdate(); // <--------------------- test this
    CPPUNIT_ASSERT(nullptr != last.get());
  } catch (::openssl::exception::Null const &) {
    CPPUNIT_ASSERT(true);
  }
}
auto tests::unit::x509::Crl::test_get_lastUpdate_1() -> void {
  Subject subject;
  subject.set_lastUpdate(::openssl::time::now());
  auto when = subject.get_lastUpdate(); // <--------------------- test this
  CPPUNIT_ASSERT(nullptr != when.get());
}
#import openssl.asn1.Time
#import openssl.time.now
auto tests::unit::x509::Crl::test_set_lastUpdate() -> void {
  auto ttt = sys::time::as<sys::time::t>(::openssl::time::now());
  std::cerr << "time is " << ttt << '\n';
  auto then = ::openssl::asn1::Time{::openssl::time::now()};
  Subject subject;
  subject.set_lastUpdate(then); // <---------------------------- test this
}
auto tests::unit::x509::Crl::test_get_nextUpdate_0() -> void {
  try {
    Subject subject;
    auto next = subject.get_nextUpdate(); // <--------------------- test this
    CPPUNIT_ASSERT(nullptr != next.get());
  } catch (::openssl::exception::Null const &) {
    CPPUNIT_ASSERT(true);
  }
}
auto tests::unit::x509::Crl::test_get_nextUpdate_1() -> void {
  Subject subject;
  subject.set_nextUpdate(::openssl::time::now());
  auto when = subject.get_nextUpdate(); // <--------------------- test this
  CPPUNIT_ASSERT(nullptr != when.get());
}
auto tests::unit::x509::Crl::test_set_nextUpdate() -> void {
  auto then = ::openssl::asn1::Time{::openssl::time::now()};
  Subject subject;
  subject.set_nextUpdate(then); // <----------------------------- test this
}
auto tests::unit::x509::Crl::test_get_extensions_0() -> void {
  try {
    Subject subject;
    CPPUNIT_ASSERT(nullptr != subject.get());
    subject.get_extensions();
    CPPUNIT_ASSERT(false);
  } catch (::openssl::exception::Null const &) {
    CPPUNIT_ASSERT(true);
  }
}
auto tests::unit::x509::Crl::test_get_extensions_1() -> void {
  Subject subject;
  CPPUNIT_ASSERT(nullptr != subject.get());
  subject.add_ext(::openssl::x509::extension::config(NID_basic_constraints, "CA:TRUE"));
  auto extensions = subject.get_extensions(); // <------------------------------------------ test this (on a mutable subject)
  CPPUNIT_ASSERT(1 == extensions.size());
}
auto tests::unit::x509::Crl::test_get_extensions_2() -> void {
  Subject subject;
  CPPUNIT_ASSERT(nullptr != subject.get());
  subject.add_ext(::openssl::x509::extension::config(NID_basic_constraints, "CA:TRUE"));
  Subject const &redo{subject};
  auto extensions = redo.get_extensions(); // <--------------------------------------------- test this (on a consty subject)
  CPPUNIT_ASSERT(1 == extensions.size());
}
#import openssl.x509.extension.config
auto tests::unit::x509::Crl::test_add_ext() -> void {
  Subject subject;
  subject.add_ext(::openssl::x509::extension::config(NID_basic_constraints, "CA:TRUE"));
  CPPUNIT_ASSERT(nullptr != subject.get());
}
auto tests::unit::x509::Crl::test_get_revocations_0() -> void {
  try {
    Subject subject;
    subject.get_revocations(); // <-------------- test this
    CPPUNIT_ASSERT(false);
  } catch (::openssl::exception::Null const &) {
    CPPUNIT_ASSERT(true);
  }
}
auto tests::unit::x509::Crl::test_get_revocations_1() -> void {
  Subject subject;
  subject.add_revoked(genrevoked());
  auto revocations = subject.get_revocations(); // <-------------- test this
  CPPUNIT_ASSERT(1 == revocations.size());
}
auto tests::unit::x509::Crl::test_get_revocations_2() -> void {
  Subject subject;
  subject.add_revoked(genrevoked());
  subject.add_revoked(genrevoked());
  auto revocations = subject.get_revocations(); // <-------------- test this
  CPPUNIT_ASSERT(2 == revocations.size());
}
auto tests::unit::x509::Crl::test_add_revoke() -> void {
  Subject subject;
  subject.add_revoked(genrevoked()); // <------------------- test this
  CPPUNIT_ASSERT(1 == subject.get_revocations().size());
}
auto tests::unit::x509::Crl::test_sign_single() -> void {
  namespace ec = ::openssl::ec;
  namespace evp = ::openssl::evp;
  using std::move;
  Subject subject;
  subject.add_revoked(genrevoked());
  auto pkey = []() -> evp::PKey {
                auto pk = evp::PKey{};
                auto ek = ec::Key{};
                auto gr = ec::Group{ec::group::Name::PRIME256V1};
                ek.set_group(move(gr));
                ek.generate_key();
                pk.assign(move(ek));
                return pk;
              }();
  subject.sign(pkey, EVP_sha256()); // <------------------------- test this
  CPPUNIT_ASSERT(nullptr != subject.get());
}
auto tests::unit::x509::Crl::test_sign_double() -> void {
  test_sign_single();
  test_sign_single();
  namespace ec = ::openssl::ec;
  namespace evp = ::openssl::evp;
  using std::move;
  {
    std::cerr << "1";
    Subject subject;
    subject.add_revoked(genrevoked());
    auto pkey = []() -> evp::PKey {
                  auto pk = evp::PKey{};
                  auto ek = ec::Key{};
                  auto gr = ec::Group{ec::group::Name::PRIME256V1};
                  ek.set_group(move(gr));
                  ek.generate_key();
                  pk.assign(move(ek));
                  return pk;
                }();
    subject.sign(pkey, EVP_sha256()); // <------------------------- test this
    CPPUNIT_ASSERT(nullptr != subject.get());
  } {
    std::cerr << "2";
    Subject subject;
    auto pkey = []() -> evp::PKey {
                auto pk = evp::PKey{};
                auto ek = ec::Key{};
                auto gr = ec::Group{ec::group::Name::PRIME256V1};
                ek.set_group(move(gr));
                ek.generate_key();
                pk.assign(move(ek));
                return pk;
              }();
    subject.add_revoked(genrevoked());
    subject.sign(pkey, EVP_sha256()); // <------------------------- test this
    CPPUNIT_ASSERT(nullptr != subject.get());
    std::cerr << '\n';
  }
}
auto tests::unit::x509::Crl::test_sign_multiple() -> void {
  namespace ec = ::openssl::ec;
  namespace evp = ::openssl::evp;
  using std::move;
  for (auto i{0}, e{100}; e != i; ++i) {
    std::cerr << "+";
    Subject subject;
    auto pkey = []() -> evp::PKey {
                  auto pk = evp::PKey{};
                  auto ek = ec::Key{};
                  auto gr = ec::Group{ec::group::Name::PRIME256V1};
                  ek.set_group(move(gr));
                  ek.generate_key();
                  pk.assign(move(ek));
                  return pk;
                }();
    subject.add_revoked(genrevoked());
    subject.sign(pkey, EVP_sha256()); // <------------------------- test this
    CPPUNIT_ASSERT(nullptr != subject.get());
  }
  std::cerr << '\n';
}
auto tests::unit::x509::Crl::test_all() -> void {
  test_constructor_default_1();
  test_constructor_default_2();
  test_constructor_default_3();
  test_get_version();
  test_set_version();
  test_get_issuer_name_consty();
  test_get_issuer_name_muting();
  test_set_issuer_name();
  test_get_lastUpdate_0();
  test_get_lastUpdate_1();
  test_set_lastUpdate();
  test_get_nextUpdate_0();
  test_get_nextUpdate_1();
  test_set_nextUpdate();
  test_get_extensions_0();
  test_get_extensions_1();
  test_get_extensions_2();
  test_add_ext();
  test_get_revocations_0();
  test_get_revocations_1();
  test_get_revocations_2();
  test_add_revoke();
  test_sign_single();
  test_sign_multiple();
}
#import rigging.suite.io
auto tests::unit::x509::Crl::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("Crl");
  {
    Stream con("constructor");
    {
      Stream def("default");
      def << call("1", &Crl::test_constructor_default_1)
          << call("2", &Crl::test_constructor_default_2)
          << call("3", &Crl::test_constructor_default_3)
        ;
      con << move(def);
    }
    series << move(con);
  }
  series << call("get_version", &Crl::test_get_version)
         << call("set_version", &Crl::test_set_version)
    ;
  {
    Stream get("get_issuer_name");
    get << call("consty", &Crl::test_get_issuer_name_consty)
        << call("muting", &Crl::test_get_issuer_name_muting)
      ;
    series << move(get);
  }
  series << call("set_issuer_name", &Crl::test_set_issuer_name)
    ;
  {
    Stream get("get_lastUpdate");
    get << call("0", &Crl::test_get_lastUpdate_0)
        << call("1", &Crl::test_get_lastUpdate_1)
      ;
    series << move(get);
  }
  series << call("set_lastUpdate", &Crl::test_set_lastUpdate)
    ;
  {
    Stream get("get_nextUpdate");
    get << call("0", &Crl::test_get_nextUpdate_0)
        << call("1", &Crl::test_get_nextUpdate_1)
      ;
    series << move(get);
  }
  series << call("set_nextUpdate", &Crl::test_set_nextUpdate)
    ;
  {
    Stream get("get_extensions");
    get << call("0", &Crl::test_get_extensions_0)
        << call("1", &Crl::test_get_extensions_1)
      ;
    series << move(get);
  }
  series << call("add_ext", &Crl::test_add_ext)
    ;
  {
    Stream get("get_revocations");
    get << call("0", &Crl::test_get_revocations_0)
        << call("1", &Crl::test_get_revocations_1)
      ;
    series << move(get);
  }
  series << call("add_revoke", &Crl::test_add_revoke)
    ;
  {
    Stream sig("sign");
    sig << call("single", &Crl::test_sign_single)
        << call("double", &Crl::test_sign_double)
        << call("multiple", &Crl::test_sign_multiple)
      ;
    series << move(sig);
  }
  series << call("all", &Crl::test_all)
    ;
  return finalize(series);
}
#endiv

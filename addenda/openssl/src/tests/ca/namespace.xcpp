// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.string_literals
#import openssl
namespace tests::ca {
  using namespace std::string_literals;
  using namespace openssl;
}
#endiv
#divert <hpp>
#import c.argv
#import std.ostream
#import sys.exits.Code
#import std.filesystem.path
namespace tests::ca {
  auto const NAME = "ca"s;
  extern bool verbose_mode;
  auto main(c::argv) -> sys::exits::Code;
  auto usage(std::ostream &, sys::exits::Code) -> sys::exits::Code;
  namespace packaging::process::function {
    using Filepath = std::filesystem::path;
    using Code = sys::exits::Code;
    auto process(Filepath const &in_csr, Filepath const &out_ca_key, Filepath const &out_ca_crt) -> Code;
  }
  using packaging::process::function::process;
}
#endiv
#divert <cpp>
bool tests::ca::verbose_mode = true;
#import c.rest
#import format.q
#import format.parenthesis
#import std.cerr
#import std.cout
#import std.exception
#import sys.error.Code
#import sys.exits.constants
#import sys.exits.error_code // std::error_code
auto tests::ca::main(c::argv av) -> sys::exits::Code try {
  auto vv = c::rest(av);
  for (; !vv.empty(); vv=c::rest(vv)) {
    std::string syntax=vv.front();
    if (syntax.empty()) {
      std::cerr << NAME << ": error, inappropriate empty word\n";
      return sys::exits::CONFIG;
    } else if ("--"s == syntax) {
      vv = c::rest(vv);
      break;
    } else if ("--quiet"s == syntax || "-q" == syntax) {
      verbose_mode = false;
    } else if ("--verbose"s == syntax || "-v" == syntax) {
      verbose_mode = true;
    } else if ("--usage"s == syntax || "--help"s == syntax || "-h" == syntax) {
      return usage(std::cout, sys::exits::OK);
    } else if ('-' == syntax.front()) {
      std::cerr << NAME << ": error, invalid option " << format::q(syntax) << " (use --usage to see the options)\n";
      return sys::exits::CONFIG;
    } else {
      break;
    }
  }
  if (3 != vv.size()) {
    auto &outbound{std::cerr};
    outbound << NAME << ": notice, use --usage to see the options\n"
             << NAME << ":notice, requires three words after the options\n"
             << "  1. the Certificate Signing Request (CSR) file, which will be read\n"
             << "  2. the CA's key file name, which will be written\n"
             << "  3. the CA's certificate file name, which will be written\n"
             << NAME << ": error, incorrect argument word count " << format::parenthesis(vv.size()) << '\n';
    return sys::exits::CONFIG;
  }
  auto in_csr_filepath = std::filesystem::path{vv.front()};
  vv = c::rest(vv);
  auto out_ca_key_filepath = std::filesystem::path{vv.front()};
  vv = c::rest(vv);
  auto out_ca_crt_filepath = std::filesystem::path{vv.front()};
  return process(in_csr_filepath, out_ca_key_filepath, out_ca_crt_filepath);
} catch (std::error_code const &ec) {
  std::cerr << NAME << ": quitting " << ec.message() << '\n';
  return sys::exits::Code{ec.value()};
} catch (std::exception const &e) {
  std::cerr << NAME << ": unexpected problem " << e.what() << '\n';
  return sys::exits::SOFTWARE;
}
auto tests::ca::usage(std::ostream &outbound, sys::exits::Code code) -> sys::exits::Code {
  outbound << "usage: " << NAME << " [...options...] [--] [in]csr.pem [out]ca.key.pem [out]ca.crt.pem\n"
           << "\n"
           << "Files:\n"
           << "  [in]csr.pem                     your Certificate Signing Requst (CSR)\n"
           << "  [out]ca.key.pem                 the Certificate Authority (secret) key file\n"
           << "  [out]ca.crt.pem                 the Certificate Authority (public) certificate file\n"
           << "\n"
           << "General Options:\n"
           << "  --usage, -h                     this usage&help message\n";
    ;
      return sys::exits::OK;
  return code;
}
#import openssl.ec.generate
#import openssl.error.Code
#import openssl.evp.PKey
#import openssl.pem.load
#import openssl.pem.to_string
#import openssl.rsa.generate
#import openssl.time.literals
#import openssl.time.now
#import openssl.x509.Crt
#import openssl.x509.serial.generate
#import openssl.exception.Argument
#import openssl.functions // NID_basic_constraints
#import std.error_code
#import std.system_error
#import tests.ca.Files
#import tests.present
auto tests::ca::packaging::process::function::process(Filepath const &csrfile, Filepath const &keyfile, Filepath const &crtfile) -> Code try {
  using namespace ::openssl;
  auto their_csr = pem::load<x509::Req>(csrfile);
  auto self_key = [](openssl::System system) -> evp::PKey {
                    if (false) {
                    } else if (System::RSA == system) {
                      evp::PKey pkey;
                      pkey.assign(rsa::generate(rsa::Bits::RSA2048));
                      return pkey;
                    } else if (System::EC == system) {
                      evp::PKey pkey;
                      pkey.assign(ec::generate(ec::group::Name::PRIME256V1));
                      return pkey;
                    } else {
                      // This was supposed to have been caught above; i.e. this can never happen
                      throw exception::Argument{};
                    }
                  }(their_csr.get_pubkey().system());
  x509::Crt self_crt;
  self_crt.set_version(x509::crt::Version{2}); // x509v3
  self_crt.set_serialNumber(x509::serial::generate());
  self_crt.set_issuer_name(their_csr.get_subject_name());
  self_crt.set_subject_name(their_csr.get_subject_name()); // [[FIXTHIS]] validate these fields before signing anything!
  using namespace openssl::time::literals;
  auto const now = openssl::time::now();
  auto const timespan = 2_years;
  self_crt.set_notBefore(now);
  self_crt.set_notAfter(now + timespan);
  self_crt.set_pubkey(their_csr.get_pubkey());
  self_crt.add_ext(x509::extension::config(NID_basic_constraints, "critical,CA:TRUE"));
  self_crt.sign(self_key, EVP_sha256());
  Files out;
  out.exceptions(std::ios::badbit|std::ios::failbit);
  out.open(keyfile, crtfile);
  if (verbose_mode) {
    std::cerr << NAME << ": verbose, also writing to " << keyfile << " and " << crtfile << '\n'
              << pem::to_string(self_key)
              << '\n'
              << pem::to_string(self_crt);
  }
  out << gang(pem::to_string(self_key), pem::to_string(self_crt));
  return sys::exits::OK;
} catch (std::error_code const &ec) {
  if (error::Code::PEM != ec) {
    throw;
  }
  std::cerr << NAME << ": error, bad PEM encoding among the input files\n";
  return sys::exits::FAIL;
} catch (std::system_error const &ec) {
  auto &outbound{std::cerr};
  outbound << NAME << ": error, " << ec.what() << " among the files\n"
           << "   [in]csr:    " << csrfile << " is " << present(csrfile) << '\n'
           << "  [out]ca key: " << keyfile << " is " << present(keyfile) << '\n'
           << "  [out]ca crt: " << crtfile << " is " << present(crtfile) << '\n';
    ;
  return sys::exits::FAIL;
}
#endiv
    ,

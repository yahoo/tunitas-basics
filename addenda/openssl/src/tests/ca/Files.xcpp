// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::ca {
  //
  // The dual files of the output of a certificate self-signing.
  //
  // Usage:
  //
  //   Files out;
  //   out.exceptions(std::ios::badbit|std::ios::failbit);
  //   out.open{keyfile, crtfile};
  //   out << {key, crt};
  //   out.close();
  //
  //   Files out{keyfile, crtfile};
  //   out << {key, crt};
  //   out.close(); ................... throws if the streams are not good
  //
  class Files;
}
#endiv
#divert <hpp>
namespace tests::ca {
  template<typename TYPE> inline auto gang(TYPE const &firsty, TYPE const &secondy) -> std::pair<TYPE const &, TYPE const &>;
}
#import std.ofstream
#import std.filesystem.path
class tests::ca::Files {
  using Filepath = std::filesystem::path;
public:
  Files() = default;
  inline Files(Filepath const &key, Filepath const &crt);
  inline auto open(Filepath const &key, Filepath const &crt) -> void;
  inline auto close() -> void; // throws if !good
  inline operator bool() const;
  inline auto operator!() const -> bool;;
  using IOState = std::ios_base::iostate;
  inline auto exceptions() const -> IOState;
  inline auto exceptions(IOState) -> void;
  template<typename TYPE> inline auto operator<<(std::pair<TYPE const &, TYPE const &> const &) -> Files &;
protected:
  std::ofstream key, crt;
};
#endiv
#divert <ipp>
namespace tests {
  template<typename TYPE> auto ca::gang(TYPE const &firsty, TYPE const &secondy) -> std::pair<TYPE const &, TYPE const &> {
    // This is an unbelievable amount of boilerplate declarations to get the desired effect.
    return std::pair<TYPE const &, TYPE const &>{firsty, secondy};
  }
}
namespace tests::ca {
  Files::Files(Filepath const &key, Filepath const &crt)
    : key{key}
    , crt{crt}
  { }
  auto Files::open(Filepath const &key_filepath, Filepath const &crt_filepath) -> void {
    key.open(key_filepath);
    crt.open(crt_filepath);
  }
  auto Files::close() -> void {
    key.close();
    crt.close();
  }
  Files::operator bool() const {
    return key && crt;
  }
  auto Files::operator!() const -> bool {
    return !key || !crt;
  }
  auto Files::exceptions() const -> IOState {
    return key.exceptions() | crt.exceptions();
  }
  auto Files::exceptions(IOState exc) -> void {
    key.exceptions(exc);
    crt.exceptions(exc);
  }
  template<typename TYPE> auto Files::operator<<(std::pair<TYPE const &, TYPE const &> const &pair) -> Files & {
    key << pair.first;
    crt << pair.second;
    return *this;
  }
}
#endiv

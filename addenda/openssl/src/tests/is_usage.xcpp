// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import c.const_vector
#import c.const_argv
#import re.string
#import std.string
namespace tests {
  //
  // Various tests for --usage and allied aliases.
  //
  // Usage:
  //
  //   int main(c::argv av) -> int {
  //     return is_usage(av) ? OK : FAIL;
  //   }
  //
  inline auto is_usage(c::const_argv) -> bool;
  inline auto is_usage(c::const_vector) -> bool;
  inline auto is_usage(re::string<std::string>) -> bool;
}
#endiv
#divert <ipp>
auto tests::is_usage(c::const_argv aa) -> bool {
  //
  // ./a.out --usage
  //
  return is_usage(c::const_vector{aa.size(), aa.data()});
}
#import c.rest
auto tests::is_usage(c::const_vector vv) -> bool {
  //
  // ./a.out --usage
  //
  return 2 <= vv.size() && is_usage(c::rest(vv).front());
}
#import std.string_literals
auto tests::is_usage(re::string<std::string> arg) -> bool {
  using namespace std::string_literals;
  std::string const &str = arg;
  return "--usage"s == str || "--help"s == str || "-h"s == str;
}
#endiv
#divert <cpp>
// This is test code
#import c.const_argv
#import std.string
namespace tests {
  static_assert(sizeof (decltype(is_usage(c::const_argv{}))));
  static_assert(sizeof (decltype(is_usage(std::string{}))));
}
#endiv

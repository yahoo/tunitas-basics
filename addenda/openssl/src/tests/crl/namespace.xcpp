// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.string_literals
#import openssl
namespace tests::crl {
  using namespace std::string_literals;
  using namespace openssl;
}
#endiv
#divert <hpp>
#import c.argv
#import std.ostream
#import sys.exits.Code
#import std.filesystem.path
#import std.vector
namespace tests::crl {
  auto const NAME = "crl"s;
  auto main(c::argv) -> sys::exits::Code;
  auto usage(std::ostream &, sys::exits::Code) -> sys::exits::Code;
  namespace packaging::process::function {
    using Filepath = std::filesystem::path;
    using Code = sys::exits::Code;
    using Filepaths = std::vector<Filepath>;
    auto process(Filepath const &ca_key, Filepath const &ca_crt, Filepaths const &crts) -> Code;
  }
  using packaging::process::function::process;
}
#endiv
#divert <cpp>
#import c.rest
#import format.q
#import std.cerr
#import std.cout
#import std.exception
#import sys.exits.constants
auto tests::crl::main(c::argv av) -> sys::exits::Code try {
  auto vv = c::rest(av);
  for (; !vv.empty(); vv=c::rest(vv)) {
    std::string syntax=vv.front();
    if (syntax.empty()) {
      std::cerr << NAME << ": error, inappropriate empty word\n";
      return sys::exits::CONFIG;
    } else if ("--"s == syntax) {
      break;
    } else if ("--usage"s == syntax || "--help"s == syntax || "-h" == syntax) {
      return usage(std::cout, sys::exits::OK);
    } else if ('-' == syntax.front()) {
      std::cerr << NAME << ": error, invalid option " << format::q(syntax) << " (use --usage to see the options)\n";
      return sys::exits::CONFIG;
    } else {
      break;
    }
  }
  if (vv.size() < 2) {
    std::cerr << NAME << ": error, requires at least 2 files, being the ca's key and the ca's certificate\n";
    return sys::exits::CONFIG;
  }
  auto ca_key_filepath = std::filesystem::path{vv.front()};
  vv = c::rest(vv);
  auto ca_crt_filepath = std::filesystem::path{vv.front()};
  vv = c::rest(vv);
  auto revocation_crt_filepaths = packaging::process::function::Filepaths{vv.begin(), vv.end()};
  return process(ca_key_filepath, ca_crt_filepath, revocation_crt_filepaths);
} catch (std::exception const &e) {
  std::cerr << NAME << ": unexpected problem " << e.what() << '\n';
  return sys::exits::SOFTWARE;
}
auto tests::crl::usage(std::ostream &outbound, sys::exits::Code code) -> sys::exits::Code {
  outbound << "usage: " << NAME << " [...options...] [--] ca.key.pem ca.crt.pem [ { {revocation}crt.pem | {previous}crl.pem  } ... ]\n"
           << "\n"
           << "Files:\n"
           << "  ca.key.pem                      the Certificate Authority (secret) key file\n"
           << "  ca.crl.pem                      the Certificate Authority (public) certificate file\n"
           << "  {revocation}crt.pem             zero or more Certificates to revoke\n"
           << "\n"
           << "General Options:\n"
           << "  --usage, --help, -h             this usage&help message\n"
           << "\n"
           << "Idiomatic Usage:\n"
           << "- to create an empty CRL, then supply only ca.key.pem, ca.crt.pem (2 files)\n"
           << "- to extend an existing CRL, supply {previous}crl.pem among the {revocation}crt.pem\n"
    ;
  return code;
}
#import openssl.error.Code
#import openssl.evp.PKey
#import openssl.pem.load
#import openssl.pem.to_string
#import openssl.x509.Crt
#import openssl.x509.Crl
#import openssl.x509.serial.generate
#import openssl.time.now
#import openssl.time.literals
#import std.error_code
#import tests.present
auto tests::crl::packaging::process::function::process(Filepath const &keyfile, Filepath const &crtfile, Filepaths const &revocation_crt_files) -> Code try {
  using namespace ::openssl;
  using namespace ::openssl::time::literals;
  auto ca_key = pem::load<evp::PKey>(keyfile);
  auto ca_crt = pem::load<x509::Crt>(crtfile);
  x509::Crl the_crl;
  the_crl.set_issuer_name(ca_crt.get_issuer_name());
  auto nowthen = ::openssl::time::now();
  the_crl.set_lastUpdate(nowthen);
  the_crl.set_nextUpdate(nowthen + 30_days);
  for (auto const &revocation_crt_file : revocation_crt_files) {
    auto revoked_crt = pem::load<x509::Crt>(revocation_crt_file);
    x509::Revoked revoked;
    revoked.set_serialNumber(revoked_crt.get_serialNumber().dup());
    revoked.set_revocationDate(nowthen);
    the_crl.add_revoked(std::move(revoked));
  }
  the_crl.sign(ca_key, EVP_sha256());
  std::cout << pem::to_string(the_crl);
  return sys::exits::OK;
} catch (std::error_code const &ec) {
  if (error::Code::PEM != ec) {
    throw;
  }
  std::cerr << NAME << ": error, bad PEM encoding among the input files\n";
  return sys::exits::FAIL;
} catch (std::system_error const &err) {
  auto &outbound{std::cerr};
  outbound << NAME << ": error " << err.what() << " among the files\n"
           << "  [in]ca key: " << keyfile << " is " << present(keyfile) << '\n'
           << "  [in]ca crt: " << crtfile << " is " << present(crtfile) << '\n'
    ;
  for (auto const &revoke_crt_file : revocation_crt_files) {
    outbound << "  [in]revoke: " << revoke_crt_file << " is " << present(revoke_crt_file) << '\n';
  }
  return sys::exits::FAIL;
}
#endiv

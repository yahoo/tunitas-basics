// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.string_literals
#import openssl
namespace tests::req {
  using namespace std::string_literals;
  using namespace openssl;
}
#endiv
#divert <hpp>
#import c.argv
#import std.ostream
#import sys.exits.Code
#import openssl.System
#import openssl.x509.Fields
namespace tests::req {
  auto const NAME = "req"s;
  auto main(c::argv) -> sys::exits::Code;
  auto usage(std::ostream &, sys::exits::Code) -> sys::exits::Code;
  auto process(System system, x509::Fields const &) -> sys::exits::Code;
}
#endiv
#divert <cpp>
#import c.rest
#import format.q
#import sys.exits.constants
#import std.cerr
#import std.cout
#import std.exception
auto tests::req::main(c::argv av) -> sys::exits::Code try {
  openssl::x509::Fields fields;
  auto vv = c::rest(av);
  std::optional<openssl::System> system;
  // Only options, no words
  for (; !vv.empty(); vv=c::rest(vv)) {
    std::string syntax=vv.front();
    if (syntax.empty()) {
      std::cerr << NAME << ": error, inappropriate empty word\n";
      return sys::exits::CONFIG;
    } else if ("--"s == syntax) {
      break;
    } else if ("--usage"s == syntax || "--help"s == syntax || "-h" == syntax) {
      return usage(std::cout, sys::exits::OK);
    } else if ('-' == syntax.front()) {
      std::cerr << NAME << ": error, invalid option " << format::q(syntax) << " (use --usage to see the options)\n";
      return sys::exits::CONFIG;
    } else {
      break;
    }
  }
  // Now only words, no options
  for (; !vv.empty(); vv=c::rest(vv)) {
    std::string syntax=vv.front();
    if (syntax.empty()) {
      std::cerr << NAME << ": error, inappropriate empty word\n";
      return sys::exits::CONFIG;
    } else if ('-' == syntax.front()) {
      std::cerr << NAME << ": error, an option " << format::q(syntax) << " appears within the words\n";
      return sys::exits::CONFIG;
    } else if ("ec"s == syntax) {
      system = openssl::System::EC;
    } else if ("rsa"s == syntax) {
      system = openssl::System::RSA;
    } else if (0 == syntax.find("C=")) {
      fields.C.value = syntax.substr(2);
    } else if (0 == syntax.find("ST=")) {
      fields.ST.value = syntax.substr(3);
    } else if (0 == syntax.find("L=")) {
      fields.L.value = syntax.substr(2);
    } else if (0 == syntax.find("O=")) {
      fields.O.value = syntax.substr(2);
    } else if (0 == syntax.find("OU=")) {
      fields.OU.value = syntax.substr(3);
    } else if (0 == syntax.find("CN=")) {
      fields.CN.value = syntax.substr(3);
    } else {
      std::cerr << NAME << ": error, invalid field=value syntax " << format::q(syntax) << " (use --usage to see the options)\n";
      return sys::exits::CONFIG;
    }
  }
  if (!vv.empty()) {
    std::cerr << NAME << ": error, extra words after the options\n";
    return sys::exits::CONFIG;
  }
  if (!system) {
    std::cerr << NAME << ": error, the system as 'ec' or 'rsa' must be indicated\n";
    return sys::exits::CONFIG;
  }
  return process(*system, fields);
} catch (std::exception const &e) {
  std::cerr << NAME << ": error, an unexpected problem " << e.what() << '\n';
  return sys::exits::SOFTWARE;
}
auto tests::req::usage(std::ostream &outbound, sys::exits::Code code) -> sys::exits::Code {
  outbound << "usage: " << NAME << " [...options...] [--] [...fields...]\n"
           << "\n"
           << "Algorithm Systems:\n"
           << "  ec                              use the Elliptic Curve system, P-256\n"
           << "  rsa                             use the Rivest–Shamir–Adleman (RSA), RSA-2048\n"
           << "\n"
           << "ASN.1 Fields:\n"
           << "  C=Country                       ISO-3166, 2-letter country code\n"
           << "  ST=State                        the state, the full name, not abbreviated\n"
           << "  L=Locality                      the city, the full name, not abbreviated\n"
           << "  O=Organization                  the organization name, without honorifics\n"
           << "  OU=Organizational Unit          the organizational unit\n"
           << "  CN=Common Name                  the common name, a Domain Name Service (DNS) FQDN\n"
           << "\n"
           << "General Options:\n"
           << "  --usage, --help, -h             this usage&help message\n";
    ;
      return sys::exits::OK;
  return code;
}
#import openssl.System
#import openssl.ec.generate
#import openssl.exception.Argument
#import openssl.pem.to_string
#import openssl.rsa.generate
#import openssl.x509.Req
auto tests::req::process(openssl::System system, x509::Fields const &fields) -> sys::exits::Code {
  auto pkey = [&system]() -> evp::PKey {
                if (false) {
                } else if (System::RSA == system) {
                  evp::PKey pkey;
                  pkey.assign(rsa::generate(rsa::Bits::RSA2048));
                  return pkey;
                } else if (System::EC == system) {
                  evp::PKey pkey;
                  pkey.assign(ec::generate(ec::group::Name::PRIME256V1));
                  return pkey;
                } else {
                  throw exception::Argument{};
                }
              }();
  x509::Req req;
  req.set_pubkey(pkey);
  req.get_subject_name().add_entry_by_txt(fields);
  req.sign(pkey, EVP_sha256());
  std::cout << pem::to_string(req);
  return sys::exits::OK;
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import openssl.required.Stackable
#import openssl.stack.Aspect
#import std.is_base_of
// include <hpp/openssl.stack.Stack> ..... you likely need the complete type of Stack
// include <hpp/openssl.stack.Stack0> .... ibidem
namespace openssl::required {
  //
  // A container is Stacklike if it is Stack or Stack0.
  // But it is not possible to test whether a template is being used, we can only test the properties of the template instance.
  // So we cheat and look for ancestry.
  //
  // Usage:
  //
  //   template<required::Stacklike STACK> auto function(STACK &) -> void;
  //
  template<typename STACKLIKE> concept Stacklike = requires(STACKLIKE stacklike) {
    typename STACKLIKE::Value;
    requires Stackable<typename STACKLIKE::Value>;
    // requires std::is_base_of<stack::Aspect, STACKLIKE>::value;
    { stacklike } -> convertible_to<stack::Aspect const &>;
  };
}
#endiv
#divert <cpp>
// Of course this is test code
#import openssl.Stack
#import openssl.x509.Extension
#import openssl.x509.Revoked
#import openssl.Stack0
#import openssl.x509.Extension0
#import openssl.x509.Revoked0
namespace {
  namespace tests {
    using namespace openssl;
    static_assert(required::Stacklike<stack::Stack<x509::Extension>>);
    static_assert(required::Stacklike<stack::Stack<x509::Revoked>>);
    static_assert(required::Stacklike<stack::Stack0<x509::Extension0>>);
    static_assert(required::Stacklike<stack::Stack0<x509::Revoked0>>);
  }
}
#endiv

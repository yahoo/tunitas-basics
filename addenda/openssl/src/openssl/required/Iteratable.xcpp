// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import openssl.types
#import std.size_t
#import openssl.stack.Iteratable
#include <hpp/openssl.stack.Iteratable> // becasue we (will always) need the complete type of Iteratable
namespace openssl::required {
  //
  // A container is Stacklike if it is Stack or Stack0.
  // But it is not possible to test whether a template is being used, we can only test the properties of the template instance.
  // So we cheat and look for ancestry.
  //
  // Examples:
  //
  //   Iteratable<managed::Pointer<OPENSSL_STACK const>>
  //   Iteratable<managed::Pointer<OPENSSL_STACK>>
  //
  // Usage:
  //
  //   template<required::Iteratable ITERATABLE> struct Stack : public Aspect, public ITERATABLE {
  //     using Ancestor = ITERATABLE;
  //   public:
  //     ...constructors...
  //   };
  //
  template<typename ITERATABLE> concept Iteratable = requires(ITERATABLE iteratable) {
    // The Iterator<ITERATABLE> only requires these two interfaces
    requires true;
#if 0
    { iteratable.size() } -> convertible_to<std::size_t>;
    { iteratable.get() } -> convertible_to<OPENSSL_STACK const *>; // at least the consty pointer, but maybe even the nonconsty variant
#endif
  };
}
#endiv
#divert <cpp>
// Of course this is test code
#import openssl.managed.Pointer
#import openssl.managed.Deleter.OPENSSL_STACK // ......... you need them both
#import openssl.managed.Deleter.OPENSSL_STACK_const // ... ibidem.
#import openssl.stack.Iteratable
namespace {
  namespace tests {
    using namespace openssl;
    static_assert(required::Iteratable<stack::Iteratable<OPENSSL_STACK>>);
    static_assert(required::Iteratable<stack::Iteratable<OPENSSL_STACK const>>);
  }
}
#endiv

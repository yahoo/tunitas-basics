// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import openssl.required.Stackcore
namespace openssl::stack {
  //
  // This is a shim.  It musn't be (can't be) used on its own.
  // The shim surfaces only the iteratable parts of the stack API.
  // This breaks the cyclic dependency among Iterator->Stack->Iterator
  //
  //   struct managed::Pointer<OPENSSL_STACK>--\ (there)
  //                                           |
  //                                           \--struct Iteratable<OPENSSL_STACK>--\ (where)
  //                                                                                |  
  //                                                                                \- struct Stack<TYPE>
  //
  // Usage:
  //
  //   see above
  //
  template<required::Stackcore CORE> struct Iteratable;
}
#endiv
#divert <hpp>
#import std.size_t
#import openssl.managed.Pointer
#import openssl.managed.Deleter.OPENSSL_STACK // ......... does an actual a deletion
#import openssl.managed.Deleter.OPENSSL_STACK_const // ... is a no-op (does not delete)
namespace openssl {
  template<required::Stackcore CORE> struct stack::Iteratable : public managed::Pointer<CORE> {
    using Ancestor = managed::Pointer<CORE>;
  protected:
    ~Iteratable() = default;
    using Ancestor::Pointer;
    using Size = std::size_t;
    inline auto empty() const -> bool;
    inline auto size() const -> Size;
    using Ancestor::get;
  };
}
#endiv
#divert <ipp>
namespace openssl::stack {
  template<required::Stackcore _> auto Iteratable<_>::empty() const -> bool {
    return 0 == size();
  }
  template<required::Stackcore _> auto Iteratable<_>::size() const -> Size {
    return OPENSSL_sk_num(Ancestor::get());
  }
}
#endiv

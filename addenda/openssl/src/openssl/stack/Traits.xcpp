// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import openssl.required.Stackable
namespace openssl::stack {
  //
  // The traits of the stacks.
  // Substitutes for some of the CPP-based name hacking chicanery using ## that occurs in safestack.h
  //
  // Specializations only; it's (mostly) declarative.
  //
  // Interface:
  //
  //   down_cast    downcast an unmanaged stack pointer from an astract pointer
  //   up_cast      upcast an unmanaged stack pointer to something abstract
  //   construct    construct a managed Stack from an unmanaged pointer
  //   revalorize   reconstruct an individual value, either a "Value"-with-DROPPING or a "Value0"
  //
  // Usage:
  //
  //   see stack::Iterator
  //
  namespace traits {
    template<typename WRAPPING, typename UNDERLYING> struct Casting;
    template<typename WRAPPING, typename UNDERLYING> struct Specification;
    template<typename WRAPPING, typename UNDERLYING> struct Specification0;
    template<typename WRAPPING, typename UNDERLYING> struct Revalorization;
  }
  template<required::Stackable> struct Traits;
}
#import openssl.x509.Extension
#import openssl.x509.Extension0
#import openssl.x509.Revoked
#import openssl.x509.Revoked0
namespace openssl::stack {
  template<> struct Traits<x509::Extension>;
  template<> struct Traits<x509::Extension0>;
  template<> struct Traits<x509::Revoked>;
  template<> struct Traits<x509::Revoked0>;
}
#endiv
#divert <hpp>
#import openssl.types
#import std.is_const
#import std.conditional
template<typename WRAPPING, typename UNDERLYING> struct openssl::stack::traits::Casting {
  using Generic = typename std::conditional<std::is_const<UNDERLYING>::value, OPENSSL_STACK const, OPENSSL_STACK>::type;
  using Wrapping = WRAPPING;
  using Underlying = UNDERLYING;
  // Because OpenSSL is C-trying-to-be-C++ and they just cast stuff back and forth, between arbitrary struct types and into- and out-of- void...
  inline static constexpr auto down_cast(Generic *candidate) -> Underlying * { return reinterpret_cast<Underlying *>(candidate); }
  inline static constexpr auto up_cast(Underlying *candidate) -> Generic * { return reinterpret_cast<Generic *>(candidate); }
};
#forward openssl.Stack
template<typename WRAPPING, typename UNDERLYING> struct openssl::stack::traits::Specification : public Casting<WRAPPING, UNDERLYING> {
  using ancestor = Casting<WRAPPING, UNDERLYING>;
public:
  inline static auto construct(typename ancestor::Underlying *) -> Stack<typename ancestor::Wrapping>;
};
#forward openssl.Stack0
template<typename WRAPPING, typename UNDERLYING> class openssl::stack::traits::Specification0 : public Casting<WRAPPING, UNDERLYING> {
  using ancestor = Casting<WRAPPING, UNDERLYING>;
public:
  inline static auto construct(typename ancestor::Underlying *) -> Stack0<typename ancestor::Wrapping>;
};
#import std.remove_pointer
template<typename WRAPPING, typename UNDERLYING> struct openssl::stack::traits::Revalorization {
  using Value_Wrapping = WRAPPING;
  // Because OPENSSL_sk_value(...) is what we will be using to access into the stack (deque) and it accepts & returns 'void *' (Yuuuk!-Sloppy!)
  using Nasty = typename std::remove_pointer<decltype(OPENSSL_sk_value(nullptr, 0))>::type;
  static_assert(std::is_same<void, Nasty>::value);  // yup, it's a void *
  inline static auto revalorize(Nasty *) -> Value_Wrapping;
private:
  using Value_Underlying = UNDERLYING;
  inline static auto denasty_cast(Nasty *) -> Value_Underlying *;
};
namespace openssl::stack::traits {
  template<> inline auto Revalorization<x509::Extension, x509::EXTENSION>::revalorize(Nasty *) -> x509::Extension;
  template<> inline auto Revalorization<x509::Extension0, x509::EXTENSION const>::revalorize(Nasty *) -> x509::Extension0;
  template<> inline auto Revalorization<x509::Revoked, x509::REVOKED>::revalorize(Nasty *) -> x509::Revoked;
  template<> inline auto Revalorization<x509::Revoked0, x509::REVOKED const>::revalorize(Nasty *) -> x509::Revoked0;
}
namespace openssl::stack {
  template<> struct Traits<x509::Extension> : public traits::Specification<x509::Extension, STACK_OF(X509_EXTENSION)>, traits::Revalorization<x509::Extension, X509_EXTENSION> {
    using Value = x509::Extension;
    using Value0 = x509::Extension0;
  };
  template<> struct Traits<x509::Extension0> : public traits::Specification0<x509::Extension0, STACK_OF(X509_EXTENSION) const>, traits::Revalorization<x509::Extension0, X509_EXTENSION const> {
    using Value = x509::Extension0;
    using Value0 = x509::Extension0;
  };
  template<> struct Traits<x509::Revoked> : public traits::Specification<x509::Revoked, STACK_OF(X509_REVOKED)>, traits::Revalorization<x509::Revoked, X509_REVOKED> {
    using Value = x509::Revoked;
    using Value0 = x509::Revoked0;
  };
  template<> struct Traits<x509::Revoked0> : public traits::Specification0<x509::Revoked0, STACK_OF(X509_REVOKED) const>, traits::Revalorization<x509::Revoked0, X509_REVOKED const> {
    using Value = x509::Revoked0;
    using Value0 = x509::Revoked0;
  };
}
#endiv
#divert <ipp>
#forward openssl.Stack
namespace openssl::stack::traits {
  template<typename W, typename U> auto Specification<W,U>::construct(typename ancestor::Underlying *candidate) -> Stack<typename ancestor::Wrapping> {
    return Stack<typename ancestor::Wrapping>{ancestor::up_cast(candidate)};
  }
  template<typename W, typename U> auto Specification0<W,U>::construct(typename ancestor::Underlying *candidate) -> Stack0<typename ancestor::Wrapping> {
    return Stack0<typename ancestor::Wrapping>{ancestor::up_cast(candidate)};
  }
}
namespace openssl::stack::traits {
  template<typename W, typename U> auto Revalorization<W,U>::denasty_cast(Nasty *nasty_nasty_nasty) -> Value_Underlying * {
    return reinterpret_cast<Value_Underlying *>(nasty_nasty_nasty);
  }
}
namespace openssl::stack::traits {
  template<> auto Revalorization<x509::Extension, x509::EXTENSION>::revalorize(Nasty *nasty) -> x509::Extension {
    using Deleter = x509::Extension::Deleter;
    return x509::Extension{denasty_cast(nasty), Deleter{Deleter::DROPPING}}; // Not a "Value0" so we must remind to do the dropping
  }
  template<> auto Revalorization<x509::Extension0, x509::EXTENSION const>::revalorize(Nasty *nasty) -> x509::Extension0 {
    return x509::Extension0{denasty_cast(nasty)}; // Is a "Value0" type so we can just pass the recast pointer; the magic of passing 'void *' always and everywhere.
  }
  template<> auto Revalorization<x509::Revoked, x509::REVOKED>::revalorize(Nasty *nasty) -> x509::Revoked {
    using Deleter = x509::Revoked::Deleter;
    return x509::Revoked{denasty_cast(nasty), Deleter{Deleter::DROPPING}}; // Ibidem.
  }
  template<> auto Revalorization<x509::Revoked0, x509::REVOKED const>::revalorize(Nasty *nasty) -> x509::Revoked0 {
    return x509::Revoked0{denasty_cast(nasty)};
  }
}
#endiv

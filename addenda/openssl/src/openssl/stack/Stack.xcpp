// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import openssl.required.Stackable
namespace openssl::stack {
  //
  // A stack of (consty) things
  //
  // These things are not really stacks, rather they are double-ended queues.
  // A stack admits only "push" and "pop" operations on a single end.
  // These data structures offer double-ended operations and also other operations.
  //
  // Implementation:
  //   https://wiki.openssl.org/index.php/STACK_API
  //   /usr/include/openssl/safestack.h
  //   .../man3/DEFINE_STACK_OF.pod
  //   .../crypto/stack/stack.c
  //   Became a public API in OpenSSL 1.1.1 using "static inline" C functions.
  //
  // Choices
  //   Move semantics, but not copy semantics
  //   Copy is "deep: or shallow" copy via deep_copy() or dup().
  //   Throws std::error_code{Code::STACK_OF_TYPE} for the stackable TYPE.
  //   Necessarily holds uncounted pointers of the native implementation.
  //   (Stated again) the Stack<TYPE> never owns the pointers of the items.
  //   (Stated again) the Stack<TYPE> referenced items must have an independent reason for existing.
  //
  // [[Question]] ... Then what does deep copy mean?
  //                  Reading the code, it means the dynamic copy function was run on each member
  //                  ... which begs the question of "and what does the dynamic copy function do?"
  //
  // Usage:
  //
  //   Stack<Extension> extensions = ...somehow...
  //
  template<required::Stackable> struct Stack;
}
#endiv
#divert <hpp>
namespace openssl::stack {
  template<required::Stackable TYPE> auto deep_copy(Stack<TYPE> const &) -> Stack<TYPE> = delete;
  template<required::Stackable TYPE> auto shallow_copy(Stack<TYPE> const &) -> Stack<TYPE> = delete;
}
#import std.size_t
#import openssl.types // OPENSSL_STACK
#import openssl.Outcome
#import openssl.stack.Aspect
#import openssl.stack.Iteratable
#import openssl.stack.Iterator
#import openssl.stack.Traits // traits::Specification, etc.
#forward openssl.stack.Lhs
#forward openssl.stack.Rhs
namespace openssl {
  template<required::Stackable TYPE> struct stack::Stack : public Aspect, public Iteratable<OPENSSL_STACK> {
    using Ancestor = Iteratable<OPENSSL_STACK>;
  protected:
    friend class stack::Traits<TYPE>;
    friend class stack::traits::Specification<typename stack::Traits<TYPE>::Wrapping, typename stack::Traits<TYPE>::Underlying>;
    Stack(OPENSSL_STACK *);
  public:
    // New School
    using Value = TYPE;
    using Index = std::size_t;
    using Ancestor::Size; // reminder size() and get() arrive from the Ancestor
    using Traits = stack::Traits<Value>;
    using Iterator = stack::Iterator<Ancestor>;
    using Const_Iterator = stack::Iterator<Ancestor>;
    // old_school
    using value_type = Value;
    using iterator = Iterator;
    using const_iterator = Const_Iterator;
    Stack();
    Stack(Stack const &) = delete;
    auto operator=(Stack const &) -> Stack & = delete;
    Stack(Stack &&) = default;
    auto operator=(Stack &&) -> Stack & = default;
    inline auto reserve(std::size_t) -> void;
    inline auto begin() const -> const_iterator;
    inline auto end() const -> const_iterator;
    inline auto begin() -> iterator;
    inline auto end() -> iterator;
    using Ancestor::empty;
    using Ancestor::size;
    inline auto clear() -> void;
    inline auto at(Index) const -> stack::Rhs<Stack>; // ................ checked
    inline auto at(Index) -> stack::Lhs<Stack>; // ...................... checked
    inline auto operator[](Index) const -> stack::Rhs<Stack>; // ........ same
    inline auto operator[](Index) -> stack::Lhs<Stack>; // .............. same
    inline auto remove(Index) -> Value; // .............................. returns the element removed out of the deque-stack
    inline auto remove_where(Value const &) -> bool; // ................. on success, already have this item
    inline auto push(Value const &) -> Size; // ......................... insert at size-1 (the top)
    inline auto pop() -> Value; // ...................................... remove at size-1 (the top)
    inline auto insert(Value const &, Index) -> Size;
    inline auto unshift(Value const &) -> Size; // ............... insert at 0 (the bottom)
    inline auto shift() -> Value; // ............................. remove at 0 (bottom)
    inline auto find(Value const &) const -> Outcome<Index>;
    inline auto find_ex(Value const &) const -> Outcome<Index>;
    inline auto is_sorted() const -> bool;
  };
}
#endiv
#divert <ipp>
#import openssl.exception.Alloc
#import openssl.exception.Empty
#import openssl.exception.Range
#import openssl.functions
#import openssl.stack.Lhs
#import openssl.stack.Rhs
namespace openssl::stack {
  template<required::Stackable _> Stack<_>::Stack()
    : Ancestor{OPENSSL_sk_new_null()}
  { }
  template<required::Stackable _> auto Stack<_>::reserve(std::size_t size) -> void {
    auto ok = OPENSSL_sk_reserve(Ancestor::get(), size);
    if (!ok) {
      throw exception::Alloc{};
    }
  }
  template<required::Stackable _> auto Stack<_>::clear() -> void {
    OPENSSL_sk_zero(get());
  }
  template<required::Stackable _> auto Stack<_>::at(Index index) const -> stack::Rhs<Stack> {
    return stack::Rhs<Stack>{*this, index};
  }
  template<required::Stackable _> auto Stack<_>::at(Index index) -> stack::Lhs<Stack> {
    return stack::Lhs<Stack>{*this, index};
  }
  template<required::Stackable _> auto Stack<_>::operator[](Index index) const -> stack::Rhs<Stack> {
    return stack::Rhs<Stack>{*this, index};
  }
  template<required::Stackable _> auto Stack<_>::operator[](Index index) -> stack::Lhs<Stack> {
    return stack::Lhs<Stack>{*this, index};
  }
  template<required::Stackable _> auto Stack<_>::remove(Index index) -> Value {
    auto removed = OPENSSL_sk_delete(get(), index);
    if (nullptr == removed) {
      throw exception::Range{};
    }
    return Value{removed, Value::Deleter::DROPPING}; // would have thrown exception::Null{} on nullptr
  }
  template<required::Stackable _> auto Stack<_>::remove_where(Value const &match) -> bool {
    auto removed = OPENSSL_sk_delete_ptr(get(), match.get());
    return nullptr != removed;
  }
  template<required::Stackable _> auto Stack<_>::push(Value const &value) -> Size {
    auto pushed = OPENSSL_sk_push(get(), value.get());
    if (0 == pushed) {
      throw exception::Alloc{};
    }
    return pushed;
  }
  template<required::Stackable _> auto Stack<_>::pop() -> Value {
    if (empty()) {
      throw exception::Empty{};
    }
    auto popped = OPENSSL_sk_pop(get());
    return Value{popped, Value::Deleter::DROPPING}; // throws exception::Null{} on nullptr
  }
  template<required::Stackable _> auto Stack<_>::insert(Value const &value, Index index) -> Size {
    auto inserted = inserted = OPENSSL_sk_insert(get(), value.get(), index);
    if (0 == inserted) {
      throw exception::Alloc{};
    }
    return inserted;
  }
  template<required::Stackable _> auto Stack<_>::unshift(Value const &value) -> Size {
    auto unshifted = OPENSSL_sk_push(get(), value.get());
    if (0 == unshifted) {
      throw exception::Alloc{};
    }
    return unshifted;
  }
  template<required::Stackable _> auto Stack<_>::shift() -> Value {
    if (empty()) {
      throw exception::Empty{};
    }
    auto shifted = OPENSSL_sk_shift(get());
    return Value{shifted, Value::Deleter::DROPPING}; // throws exception::Null{} on nullptr
  }
}
#import openssl.Stack0
namespace openssl {
  template<required::Stackable _> auto Stack<_>::find(Value const &match) const -> Outcome<Index> {
    Stack0<Value> const redo{*this};
    return redo.find(match);
  }
  template<required::Stackable _> auto Stack<_>::find_ex(Value const &match) const -> Outcome<Index> {
    Stack0<Value> const redo{*this};
    return redo.find_ex(match);
  }
  template<required::Stackable _> auto Stack<_>::is_sorted() const -> bool {
    Stack0<Value> const redo{*this};
    return redo.is_sorted();
  }
}
#endiv

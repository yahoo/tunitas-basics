// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace openssl::stack {
  //
  // The left-hand side of an intra-stack access.
  //
  // Usage: see Stack<TYPE>::at(Index)
  //        see Stack<TYPE>::operator[](Index)
  //
  template<typename STACK> class Lhs;
}
#endiv
#divert <hpp>
#import openssl.required.Stacklike
#import openssl.stack.Xhs
namespace openssl {
  template<typename STACK> class stack::Lhs : public Xhs<STACK> {
    static_assert(required::Stacklike<STACK>); // requires very late binding
    using ancestor = Xhs<STACK>;
  protected:
    inline Lhs(typename ancestor::Owner &, typename ancestor::Index);
  public:
    inline auto operator=(typename ancestor::Value const &) -> Lhs &;
  };
}
#endiv
#divert <ipp>
#import openssl.exception.Range
#import openssl.functions
namespace openssl::stack {
  template<typename _> Lhs<_>::Lhs(typename ancestor::Owner &owner, typename ancestor::Index index)
    : ancestor{owner, index}
  { }
  template<typename _> auto Lhs<_>::operator=(typename ancestor::Value const &value) -> Lhs & {
    auto set = OPENSSL_sk_set(ancestor::owner.get(), value.get(), ancestor::index);
    if (nullptr == set) {
      throw exception::Range{};
    }
    // OpenSSL uses the self-same pointer to signal success
    // value.get() == set
    return *this;
  }
}
#endiv

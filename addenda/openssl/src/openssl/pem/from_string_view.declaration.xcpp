// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import openssl.required.Loadable
#import std.string_view
namespace openssl::pem {
  //
  // Overfrom_string_viewing on the return type requires lots of declarations in a specific order.
  //
  // Usage:
  //
  //   auto pemmican = std::string_view{...somehow...};
  //   auto k = from_string_view<evp::PKey>(pemmican);
  //   auto c = from_string_view<x509::Crt>(pemmican);
  //   auto l = from_string_view<x509::Crl>(pemmican);
  //   auto r = from_string_view<x509::Req>(pemmican);
  //
  namespace packaging::from_string_view::function {
    // ...because all the other ones are in this lugubrious pattern...
    template<required::Loadable RESULT> inline auto from_string_view(std::string_view pemmican) -> RESULT;
  }
  using packaging::from_string_view::function::from_string_view;
}
#import openssl.types // e.g. BIO
#import std.function
namespace openssl::pem::packaging::from_string_view::detail {
  //
  // An implementation detail, READER is one of
  //
  //   using Callback = int (char *, int, int, void *);
  //   using Calldata = void *
  //
  //   reader = [](BIO *b) -> TYPE * { return PEM_read_bio_PrivateKey(b, nullptr, nullptr, nullptr); }
  //   reader = [](BIO *b) -> TYPE * { return PEM_read_bio_X509(b, nullptr, nullptr, nullptr); }
  //   ... and so forth...
  //
  // Derived as such:
  //
  //   typedef int pem_password_callback(char *buf, int size, int rwflag, void *u);
  //
  // https://www.openssl.org/docs/man1.1.0/man3/PEM_read_bio_PrivateKey.html
  //   EVP_PKEY *PEM_read_bio_PrivateKey(BIO *bp, EVP_PKEY **x, pem_password_callback *callback, void *callback_data);
  //
  // https://www.openssl.org/docs/man1.1.0/man3/PEM_read_bio_X509.html
  //   EVP_PKEY *PEM_read_bio_X509(BIO *bp, EVP_PKEY **x, pem_password_callback *callback, void *callback_data);
  //
  //   <quote>
  //     The PEM read functions all take an argument TYPE **x and return a TYPE * pointer.
  //     Where TYPE is whatever structure the function uses.
  //     If x is NULL then the parameter is ignored.
  //     If x is not NULL but *x is NULL then the structure returned will be written to *x.
  //     If neither x nor *x is NULL then an attempt is made to reuse the structure at *x (but see BUGS and EXAMPLES sections).
  //     Irrespective of the value of x a pointer to the structure is always returned (or NULL if an error occurred).
  //   </quote>
  //
  template<required::Loadable RESULT, typename POINTER> inline auto copy_read(std::string_view, std::function<POINTER *(BIO *)>) -> RESULT;
}
#endiv
#divert <ipp>
#import openssl.bio.new_string
#import openssl.error.Code
#import openssl.functions
#import std.error_code
#import errno
#import std.system_category
#import openssl.exception.System
#import openssl.exception.Alloc
namespace openssl::pem::packaging::from_string_view {
  template<required::Loadable RESULT, typename POINTER> auto detail::copy_read(std::string_view view, std::function<POINTER *(BIO *)> reader) -> RESULT {
    auto in = bio::new_string();
    auto written = BIO_write(in.get(), view.data(), view.size());
    if (written < 0 || std::size_t(written) != view.size()) {
      // Can this even happen?  Well, yes, it means that allocation has failed
      if constexpr (true) {
          throw exception::Alloc{}; // the allocation of string storage to hold the view must have failed; this is an allocation error
        } else if constexpr (false) {
          throw exception::System{errno, std::system_category(), "bio-write/s-mem"}; // must the OS have had an error?
        } else {
        throw std::error_code{error::Code::PEM}; // we are in the application act of converting from PEM to RESULT
      }
    }
    auto pointer = reader(in.get());
    if (nullptr == pointer) {
      // We presume that this is a PEM encoding problem so we throw that sort of exception.
      // [[FIXTHIS]] how to distinguish operating system problems (e.g. I/O errors) from PEM problems?
      throw std::error_code{error::Code::PEM};
    }
    return RESULT{pointer};
  }
}
#endiv

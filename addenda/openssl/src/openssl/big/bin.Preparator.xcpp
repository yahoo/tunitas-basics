// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import openssl.required.Integer
namespace openssl::big::bin {
  //
  // A big endian preparator for the unsigned bytes of BN_bin2bn.
  // DO NOT USE ---> BN_mpi2bn <--- DO NOT USE (that is not "bin" format, it is "mpi" format)
  //
  // Usage:
  //
  //   for 8, 16, 32, 64 and 128-byte quantities
  //   e.g.
  //   Preparator<std::int8_t>
  //   Preparator<std::uint8_t>
  //
  template<required::Integer> struct Preparator;
}
#endiv
#divert <hpp>
#import std.size_t
template<openssl::required::Integer INTEGER> struct openssl::big::bin::Preparator {
  using Value = INTEGER;
  inline explicit Preparator(Value);
  inline auto data() const -> unsigned char const *;
  inline auto size() const -> std::size_t;
protected:
  // The constructed value, in big endian order. 
  // recall: for unsigned quantities, the high bit is always 0, using a extra byte as necessary
  // DO NOT ---> inline static auto const BUFFER_SIZE = sizeof (Value) + std::is_unsigned<Value>::value; <--- DO NOT
  inline static auto const BUFFER_SIZE = sizeof (Value);
  unsigned char buffer[BUFFER_SIZE];
  static_assert(1 == sizeof (Value) ||
                2 == sizeof (Value) ||
                4 == sizeof (Value) ||
                8 == sizeof (Value) ||
                16 == sizeof (Value));
};
#endiv
#divert <ipp>
namespace openssl::big::bin {
  template<required::Integer _> auto Preparator<_>::data() const -> unsigned char const * { return &buffer[0]; }
  template<required::Integer _> auto Preparator<_>::size() const -> std::size_t { return sizeof (buffer); }
  template<required::Integer _> Preparator<_>::Preparator(Value value) {
    unsigned char *b{&buffer[0]};                            
    if constexpr (false) {
      // DO NOT DO THIS (they do it on the way out though)
      if (std::is_unsigned<Value>::value) {
        *b++ = '\0';
      }
    }
    constexpr auto N = sizeof (Value);
    if constexpr (16 <= N) {
      *b++ = value >> 120;
      *b++ = value >> 112;
      *b++ = value >> 104;
      *b++ = value >> 96;
      *b++ = value >> 88;
      *b++ = value >> 80;
      *b++ = value >> 72;
      *b++ = value >> 64;
    }
    if constexpr (8 <= N) {
      *b++ = value >> 56;
      *b++ = value >> 48;
      *b++ = value >> 40;
      *b++ = value >> 32;
    }
    if constexpr (4 <= N) {
      *b++ = value >> 24;
      *b++ = value >> 16;
    }
    if constexpr (2 <= N) {
      *b++ = value >> 8;
    }
    if constexpr (1 <= N) {
      *b++ = value;
    }
  }
}
#endiv

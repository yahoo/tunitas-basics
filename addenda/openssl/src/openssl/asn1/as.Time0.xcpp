// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#forward openssl.asn1.Time0
#import openssl.required.Time
#import openssl.time.Point
#import openssl.time.Posix
namespace openssl::asn1 {
  //
  // Extract and cast an asn1::Time0 out to some value that can be processed
  // The choices are seconds in POSIX time (time_t) or C++ time (time::Point)
  //
  // Usage:
  //
  //   try {
  //     auto atime = asn1::Time{...somehow...};
  //     auto then = as<time::Point>(atime);
  //     auto then = as<time::Posix>(atime);
  ///    ...use then...
  //   } catch (exception::Time const &) {
  //     ... not well defined ... e.g. 99991231235960Z (or whatever)
  //   }
  //
  template<required::Time RESULT> inline auto as(Time0 const &) -> RESULT;
  template<> inline auto as<time::Posix>(Time0 const &) -> time::Posix;
  template<> inline auto as<time::Point>(Time0 const &) -> time::Point;
}
#endiv
#divert <ipp>
#import openssl.asn1.Time0
#import openssl.time.duration_cast
#import openssl.asn1.to_posix_time
#import sys.time.as
namespace openssl::asn1 {
  template<> auto as<time::Posix>(Time0 const &atime) -> time::Posix {
    return sys::time::as<time::Posix>(to_posix_time(atime.get()));
  }
  template<> auto as<time::Point>(Time0 const &atime) -> time::Point {
    return sys::time::as<time::Point>(to_posix_time(atime.get()));
  }
}
#endiv

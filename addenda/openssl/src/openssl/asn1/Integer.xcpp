// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace openssl::asn1 {
  //
  // An ASN.1 Integer (a bignum)
  //
  // An integer of any size, but is a bignum.
  // The integer is wrapped in the ASN.1 typing system.
  // It is constructible and assignable from the big::Num (and how how do you get a bignum?)
  //
  // Usage:
  //
  //   auto biggie = big::Num{...somehow...};
  //   auto integer = asn1::Time{biggie};
  //   integer = biggie;
  //
  class Integer;
}
#endiv
#divert <hpp>
#import openssl.types
#import openssl.asn1.Integer0
#import openssl.big.Num
#import openssl.required.Integer
#import openssl.managed.Pointer
#import openssl.managed.deleter.Abstract.INTEGER
class openssl::asn1::Integer : public managed::Pointer<ASN1_INTEGER, managed::deleter::Abstract<ASN1_INTEGER, managed::deleter::Usage::INTEGER>> {
  using ancestor = managed::Pointer<ASN1_INTEGER, managed::deleter::Abstract<ASN1_INTEGER, managed::deleter::Usage::INTEGER>>;
  friend class Integer0;
  inline explicit Integer(ASN1_INTEGER *);
public:
  inline Integer();
  template<required::Integer INTEGER> inline explicit Integer(INTEGER);
  inline explicit Integer(big::Num const &);
  Integer(Integer &&) = default;
  auto operator=(Integer const &) -> Integer & = default;
  auto operator=(Integer &&) -> Integer & = default;
  template<required::Integer INTEGER> inline auto operator=(INTEGER) -> Integer &;
  inline auto operator=(big::Num const &) -> Integer &;
};
#endiv
#divert <ipp>
#import openssl.error.Code
#import openssl.functions
#import openssl.big.Num
#import std.error_code
namespace openssl::asn1 {
  Integer::Integer()
    : ancestor{ASN1_INTEGER_new()}
  { }
  Integer::Integer(ASN1_INTEGER *in)
    : ancestor{in}
  { }
  template<required::Integer INTEGER> Integer::Integer(INTEGER small)
    : Integer{big::Num{small}}
  { }
  Integer::Integer(big::Num const &other)
    : ancestor{ASN1_INTEGER_new()} {
    BN_to_ASN1_INTEGER(other.get(), get());
  }
  template<required::Integer INTEGER> auto Integer::operator=(INTEGER small) -> Integer & {
    return operator=(big::Num{small});
  }
  auto Integer::operator=(big::Num const &other) -> Integer & {
    BN_to_ASN1_INTEGER(other.get(), get());
    return *this;
  }
}
#endiv
#divert <cpp>
// This is test code
#import std.is_default_constructible
#import std.is_copy_constructible
#import std.is_move_constructible
#import std.is_copy_assignable
#import std.is_move_assignable
namespace openssl::asn1 {
  static_assert(std::is_default_constructible<Integer>::value);
  static_assert(!std::is_copy_constructible<Integer>::value);
  static_assert(std::is_move_constructible<Integer>::value);
  static_assert(!std::is_copy_assignable<Integer>::value);
  static_assert(std::is_move_assignable<Integer>::value);
}
#endiv

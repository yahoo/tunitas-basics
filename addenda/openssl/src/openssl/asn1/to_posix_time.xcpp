// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import openssl.types
#import time_t
namespace openssl::asn1 {
  //
  // Convert an asn1::Time to POSIX time (time_t)
  // Beware, this is an expensive and fraught parsing process.
  //
  // Also, the asn1::Time can represent the No Well Defined Expiry concept.
  //
  //
  // See https://stackoverflow.com/questions/10975542/asn1-time-to-time-t-conversion
  //
  // Usage:
  //
  //   try {
  //     auto at = ...somehow...
  //     auto ttt = to_posix_time(at);
  //   } catch (exception::time::Invalid const &) {
  //   } catch (exception::time::No_Well_Defined const &) {
  //   } catch (exception::Time const &) {
  //     ... not a valid asn::time...
  //   }
  //
  inline auto to_posix_time(ASN1_TIME const *) -> time_t;
  namespace detail {
    enum class Expiry { NO, YES };
    using Unsigned = unsigned;
    // These throw exception::Time if they cannot perform their function
    inline auto get_fields(char const *structure, int type, Unsigned &yyyy, Unsigned &mm, Unsigned &dd, Unsigned &HH, Unsigned &MM, Unsigned &SS) -> Expiry;
    inline auto make_posix_time(Unsigned year, Unsigned month, Unsigned day, Unsigned hour, Unsigned min, Unsigned sec) -> time_t;
  }
}
#endiv
#divert <ipp>
#import openssl.exception.time.Invalid
#import openssl.exception.time.No_Well_Defined
auto openssl::asn1::to_posix_time(ASN1_TIME const *time) -> time_t {
  if (nullptr == time) {
    throw exception::time::Invalid{};
  }
  char const *s = (char const *) time->data;
  if (nullptr == s) {
    throw exception::time::Invalid{};
  }
  detail::Unsigned year, month, day, hour, min, sec;
  auto expiry = detail::get_fields(s, time->type, year, month, day, hour, min, sec);
  if (detail::Expiry::NO == expiry) {
    // [[FIXTHIS]] return an outcome, don't throw this; this is a valid value for the ASN1_TIME, even if it is invalid for time_t conversion
    // [[FIXTHIS]] examine the ASN1_TIME and look for the undefined value 99991231235959Z
    throw exception::time::No_Well_Defined{};
  }
  auto made = detail::make_posix_time(year, month, day, hour, min, sec);
  if (-1 == made) {
    throw exception::time::Invalid{};
  }
  return made;
}
auto openssl::asn1::detail::get_fields(char const *structure, int type, Unsigned &yyyy, Unsigned &mm, Unsigned &dd, Unsigned &HH, Unsigned &MM, Unsigned &SS) -> Expiry {
  auto const two_digits_to_uint = [&structure]() -> Unsigned {
                                    if ('\0' == structure[0] || '\0' == structure[1]) {
                                      throw exception::time::Invalid{};
                                    }
                                    Unsigned n = 10 * (*structure++ - '0');
                                    return n + (*structure++ - '0');
                                  };
  yyyy = [type, &two_digits_to_uint]() -> Unsigned {
           Unsigned year = 0;
           switch (type) {
             // https://tools.ietf.org/html/rfc5280#section-4.1.2.5.1
           case V_ASN1_UTCTIME: // YYMMDDHHMMSSZ
             year = two_digits_to_uint();
             year += year < 50 ? 2000 : 1900;
             break;
           case V_ASN1_GENERALIZEDTIME: // yyyyMMDDHHMMSSZ
             year = 100 * two_digits_to_uint();
             year += two_digits_to_uint();
             break;
           default:
             throw exception::time::Invalid{};
           }
           return year;
         }();
  mm = two_digits_to_uint();
  dd = two_digits_to_uint();
  HH = two_digits_to_uint();
  MM = two_digits_to_uint();
  SS = two_digits_to_uint();
  // There may or may not be a '\0' after the 'Z'
  if ('Z' != *structure) {
    throw exception::time::Invalid{};
  }
  // 99991231235959Z is listed in 
  // https://tools.ietf.org/html/rfc5280 Section 4.1.2.5 Validity
  // <quote>
  //   To indicate that a certificate has no well-defined expiration date,
  //   the notAfter SHOULD be assigned the GeneralizedTime value of 99991231235959Z.
  // </quote>
  bool no_well_defined = 9999 == yyyy && 12 == mm && 31 == dd && 23 == HH && 59 == MM && 59 == SS;
  return no_well_defined ? Expiry::NO : Expiry::YES;
}
#import timegm
#import nonstd.uninitialized.zero
#import openssl.exception.time.Invalid
auto openssl::asn1::detail::make_posix_time(Unsigned year, Unsigned month, Unsigned day, Unsigned hour, Unsigned min, Unsigned sec) -> time_t {
  // 60 for the leap second
  // 2525 "in the year 2525, if man is still alive"
  if (year < 1970 || 2525 < year || month < 1 || 12 < month || day < 1 || 31 < day || 23 < hour || 59 < min || 60 < sec) {
    throw exception::time::Invalid{};
  }
  year -= 1900;
  if constexpr (true) {
    ::tm buf;
    nonstd::uninitialized::zero(buf);
    buf.tm_year = year;
    buf.tm_mon = month - 1;
    buf.tm_mday = day;
    buf.tm_hour = hour;
    buf.tm_min = min;
    buf.tm_sec = sec;
    return ::timegm(&buf);
  } else {
  // [[FIXTHIS]] Isn't this the same as timegm?  Why not use timegm?
    // days upto months for non-leap years
    static Unsigned const month_day[13] = {Unsigned(-1), 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334};
    // [[FIXTHIS]] validate this formula and the leap year computation.  And from upstream: may overflow (rly? when?)
    Unsigned const year_for_leap = (month > 2) ? year + 1 : year; // number of Februaries since 1900
    return (sec +
            min*60 +
            hour*3600 +
            (month_day[month] + day - 1)*86400 +
            (year-70)*31536000 +
            ((year_for_leap-69)/4)*86400 -
            ((year_for_leap-1)/100)*86400 +
            ((year_for_leap+299)/400)*86400);
  }
}
#endiv

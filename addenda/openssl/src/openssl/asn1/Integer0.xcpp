// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace openssl::asn1 {
  //
  // A (constant) ASN.1 Integer (a constant bignum)
  //
  // An integer of any size, but is a bignum; is immutable.
  // The integer is wrapped in the ASN.1 typing system.
  // It is constructible only by referencing an existing integer, elsewhere.
  //
  // Usage:
  //
  //   auto revoked = ...somehow...
  //   auto integer = revoked.get_serialNumber();
  //
  class Integer0;
}
#endiv
#divert <hpp>
#forward openssl.asn1.Integer
#import openssl.managed.Pointer
#import openssl.managed.deleter.Abstract.INTEGER
#import openssl.required.Integer
#import openssl.types
#forward openssl.x509.Crt
#forward openssl.x509.Revoked
#forward openssl.x509.Revoked0
class openssl::asn1::Integer0 : public managed::Pointer<ASN1_INTEGER const, managed::deleter::Abstract<ASN1_INTEGER const, managed::deleter::Usage::INTEGER>> {
  using ancestor = managed::Pointer<ASN1_INTEGER const, managed::deleter::Abstract<ASN1_INTEGER const, managed::deleter::Usage::INTEGER>>;
  inline explicit Integer0(ASN1_INTEGER const *);
  friend class x509::Crt;
  friend class x509::Revoked;
  friend class x509::Revoked0;
public:
  inline Integer0(Integer const &); // can convert from the mutable integer with impunity
  inline auto dup() const -> Integer;
};
#endiv
#divert <ipp>
#import openssl.asn1.Integer
#import openssl.functions
namespace openssl::asn1 {
  Integer0::Integer0(ASN1_INTEGER const *integer)
    : ancestor{integer} // Integer0, when supplied with a consty pointer is always dropping
  { }
  Integer0::Integer0(Integer const &muting)
    : ancestor{muting.get()} // ibidem.
  { }
  auto Integer0::dup() const -> Integer {
    return Integer{ASN1_INTEGER_dup(get())};
  }
}
#endiv
#divert <cpp>
// This is test code
#import std.is_default_constructible
#import std.is_copy_constructible
#import std.is_move_constructible
#import std.is_copy_assignable
#import std.is_move_assignable
namespace openssl::asn1 {
  static_assert(!std::is_default_constructible<Integer0>::value); // these can only reference something else that already exists
  static_assert(!std::is_copy_constructible<Integer0>::value);
  static_assert(std::is_move_constructible<Integer0>::value);
  static_assert(!std::is_copy_assignable<Integer0>::value);
  static_assert(std::is_move_assignable<Integer0>::value);
}
#endiv

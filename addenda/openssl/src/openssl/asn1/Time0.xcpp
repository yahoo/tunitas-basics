// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace openssl::asn1 {
  //
  // An immutable (constant) ASN.1 Time (UTC)
  //
  // A time point, is wrapped in the ASN.1 typing system.
  // Constructible and assignable from the std::chrono::time_point
  //
  // Move semantics, but no copy semantics.
  // All the move does is push round pointer to the underlying (constant) value
  //
  // See https://tools.ietf.org/html/rfc5280
  //     UTCTime
  //     GeneralizedTime
  //
  // Usage:
  //
  //   auto revoked = ...somehow...
  //   auto then = revoked.revocationTime();
  //
  class Time0;
}
#endiv
#divert <hpp>
#forward openssl.asn1.Time
#import openssl.managed.Pointer
#import openssl.managed.deleter.Abstract.TIME
#import openssl.time.Point
#import openssl.types
#forward openssl.x509.Crl
#forward openssl.x509.Crt
#forward openssl.x509.Req
#forward openssl.x509.Revoked
#forward openssl.x509.Revoked0
class openssl::asn1::Time0 : public managed::Pointer<ASN1_TIME const, managed::deleter::Abstract<ASN1_TIME const, managed::deleter::Usage::TIME>> {
  using ancestor = managed::Pointer<ASN1_TIME const, managed::deleter::Abstract<ASN1_TIME const, managed::deleter::Usage::TIME>>;
  inline explicit Time0(ASN1_TIME const *);
  friend class x509::Crt;
  friend class x509::Crl;
  friend class x509::Req;
  friend class x509::Revoked;
  friend class x509::Revoked0;
public:
  inline Time0(Time const &); // can convert from mutable time with impunity
};
#import openssl.asn1.as
#endiv
#divert <ipp>
#import openssl.asn1.Time
#import openssl.functions
#import sys.time.as
namespace openssl::asn1 {
  Time0::Time0(ASN1_TIME const *time)
    : ancestor{time} // Time0, when supplied with a consty pointer is always dropping
  { }
  Time0::Time0(Time const &muting)
    : ancestor{muting.get()} // ibidem.
  { }
}
#endiv
#divert <cpp>
// This is test code
#import std.is_default_constructible
#import std.is_copy_constructible
#import std.is_move_constructible
#import std.is_copy_assignable
#import std.is_move_assignable
namespace openssl::asn1 {
  static_assert(!std::is_default_constructible<Time0>::value); // these can only reference something else that already exists
  static_assert(!std::is_copy_constructible<Time0>::value);
  static_assert(std::is_move_constructible<Time0>::value);
  static_assert(!std::is_copy_assignable<Time0>::value);
  static_assert(std::is_move_assignable<Time0>::value);
}
#endiv

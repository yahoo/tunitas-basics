// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace openssl::x509 {
  //
  // An X.509 Certificate Revocation (the single unit)
  //
  // Usage:
  //
  //   see Revoked
  //
  class Revoked;
}
#endiv
#divert <hpp>
#import openssl.asn1.Integer0
#import openssl.asn1.Integer
#import openssl.asn1.Time0
#import openssl.asn1.Time
#import openssl.managed.Pointer
#import openssl.managed.Deleter.X509_REVOKED
#import openssl.types
#forward openssl.x509.Extension0
#forward openssl.x509.Extension
#forward openssl.Stack0
#forward openssl.stack.Traits // traits::Revalorization
class openssl::x509::Revoked : public managed::Pointer<x509::REVOKED> {
  using ancestor = managed::Pointer<x509::REVOKED>;
  friend class stack::traits::Revalorization<Revoked, REVOKED>;
  inline explicit Revoked(x509::REVOKED *, ancestor::Deleter const &del = ancestor::Deleter{ancestor::Deleter::DELETING});
public:
  inline Revoked();
  inline auto get_serialNumber() const -> asn1::Integer0;
  inline auto set_serialNumber(asn1::Integer const &) -> void;
  inline auto get_revocationDate() const -> asn1::Time0;
  inline auto set_revocationDate(time::Point const &) -> void;
  inline auto set_revocationDate(asn1::Time const &) -> void;
  inline auto get_extensions() const -> Stack0<Extension0>;
  inline auto add_ext(Extension const &) -> void;
  // [[ADDTHIS]] [[FIXTHIS]] get and set the extension
};
#endiv
#divert <ipp>
#import openssl.x509.Extension
#import openssl.x509.Extension0
#import openssl.Stack0
namespace openssl::x509 {
  Revoked::Revoked()
    : ancestor{X509_REVOKED_new(), ancestor::Deleter{ancestor::Deleter::DELETING}}
  { }
  Revoked::Revoked(x509::REVOKED *revoked, ancestor::Deleter const &del)
    : ancestor{revoked, del}
  { }
  auto Revoked::get_serialNumber() const -> asn1::Integer0 {
    return asn1::Integer0{X509_REVOKED_get0_serialNumber(get())};
  }
  auto Revoked::set_serialNumber(asn1::Integer const &serial) -> void {
    if (!X509_REVOKED_set_serialNumber(get(), serial.get())) {
      throw std::error_code{error::Code::X509};
    }
  }
  auto Revoked::get_revocationDate() const -> asn1::Time0 {
    return asn1::Time0{X509_REVOKED_get0_revocationDate(get())};
  }
  auto Revoked::set_revocationDate(time::Point const &then) -> void {
    set_revocationDate(asn1::Time{then});
  }
  auto Revoked::set_revocationDate(asn1::Time const &then) -> void {
    auto ok = X509_REVOKED_set_revocationDate(get(), then.get());
    if (!ok) {
      throw std::error_code{error::Code::X509};
    }
  }
  static_assert(sizeof (Stack0<Extension0>));
  auto Revoked::get_extensions() const -> Stack0<Extension0> {
    return Stack0<Extension0>::Traits::construct(X509_REVOKED_get0_extensions(get()));
  }
  auto Revoked::add_ext(Extension const &ext) -> void {
    auto const LAST = -1;
    auto ok = X509_REVOKED_add_ext(get(), ext.get(), LAST);
    if (!ok) {
      throw std::error_code{error::Code::X509};
    }
  }
}
#endiv
#divert <cpp>
// This is test code
#import std.is_default_constructible
#import std.is_copy_constructible
#import std.is_move_constructible
#import std.is_copy_assignable
#import std.is_move_assignable
namespace openssl::x509 {
  static_assert(std::is_default_constructible<Revoked>::value); // these can only reference something else that already exists
  static_assert(!std::is_copy_constructible<Revoked>::value);
  static_assert(std::is_move_constructible<Revoked>::value);
  static_assert(!std::is_copy_assignable<Revoked>::value);
  static_assert(std::is_move_assignable<Revoked>::value);
}
#endiv

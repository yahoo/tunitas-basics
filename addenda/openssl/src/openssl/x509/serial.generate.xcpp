// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import openssl.asn1.Integer
namespace openssl::x509::serial {
  //
  // Generate a random serial number as an ASN.1 Integer
  //
  // https://www.ietf.org/rfc/rfc5280.txt
  //   <quote>
  //     CAs MUST force the serialNumber to be a non-negative integer, that is, the sign bit in the DER encoding of the INTEGER value MUST be zero.
  //     This can be done by adding a leading (leftmost) `00'H octet if necessary.
  //     This removes a potential ambiguity in mapping between a string of octets and an integer value.
  //
  //     As noted in Section 4.1.2.2, serial numbers can be expected to contain long integers.
  //     Certificate users MUST be able to handle serialNumber values up to 20 octets in length.
  //     Conforming CAs MUST NOT use serialNumber values longer than 20 octets.
  //   </quote>
  //  
  // Usage:
  //
  //   auto serial = generate();
  //
  inline auto generate() -> asn1::Integer;
}
#endiv
#divert <ipp>
#import openssl.functions
#import openssl.big.Num
#import std.move
#import openssl.exception.Random
auto openssl::x509::serial::generate() -> asn1::Integer {
  // The maximum possible ... choose a random serial within that.
  unsigned char serial_bytes[20];
  //
  // https://www.openssl.org/docs/man1.1.0/man3/RAND_bytes.html
  // <quote>
  //   RAND_bytes() returns 1 on success, 0 otherwise.
  //   The error code can be obtained by ERR_get_error(3).
  //   RAND_pseudo_bytes() returns 1 if the bytes generated are cryptographically strong, 0 otherwise.
  //   Both functions return -1 if they are not supported by the current RAND method.
  // </quote>
  //
  if (1 != RAND_bytes(serial_bytes, sizeof(serial_bytes))) {
    throw exception::Random{};
  }
  serial_bytes[0] &= 0x7f; // Ensure a positive serial number
  return asn1::Integer{big::Num{serial_bytes}};
}
#endiv

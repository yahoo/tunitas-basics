// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace openssl::x509 {
  //
  // An immutable X.509 Extension
  //
  // Usage:
  //
  //   auto crt = Crt{...somehow...};
  //   auto exts = crt.get_extensions();
  //   auto ext0 = exts.at(3);
  //
  class Extension0;
}
#endiv
#divert <hpp>
#import openssl.managed.Pointer
#import openssl.managed.Deleter.X509_EXTENSION_const
#import openssl.types
#forward openssl.stack.Traits // traits::Revalorization
class openssl::x509::Extension0 : public managed::Pointer<X509_EXTENSION const> {
  using ancestor = managed::Pointer<X509_EXTENSION const>;
  friend class stack::traits::Revalorization<Extension0, EXTENSION const>;
  inline explicit Extension0(X509_EXTENSION const *);
public:
  // [[FIXTHIS]] get_critical
  // [[FIXTHIS]] get_object
  // [[FIXTHIS]] get_data
};
#endiv
#divert <ipp>
namespace openssl::x509 {
  Extension0::Extension0(X509_EXTENSION const *ext)
    : ancestor{ext}
  { }
}
#endiv
#divert <cpp>
// This is test code
#import std.is_default_constructible
#import std.is_copy_constructible
#import std.is_move_constructible
#import std.is_copy_assignable
#import std.is_move_assignable
namespace openssl::x509 {
  static_assert(!std::is_default_constructible<Extension0>::value); // these can only reference something else that already exists
  static_assert(!std::is_copy_constructible<Extension0>::value);
  static_assert(std::is_move_constructible<Extension0>::value);
  static_assert(!std::is_copy_assignable<Extension0>::value);
  static_assert(std::is_move_assignable<Extension0>::value);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import openssl.managed.Deleter
#import std.remove_const
namespace openssl::managed {
  //
  // A managed pointer; entail a destructor with the C-level allocation
  // Manages only the deallocation.
  // Descendants only.
  // Descendants handle the allocation (the "new" side).
  //
  // The deleter is like std::unique_ptr, but has a different "free function" bound on each type.
  // This is an application of the deleter function which is usually a default type
  //
  // Usage:
  //
  //   struct my::Thing : public managed;:Pointer<Thing> {
  //     using Ancestor = managed;:Pointer<Thing>;
  //     Thing() : Ancestor{THING_new()} <--------------------------- extern "C" THING_new();
  //     { }
  //   };
  //
  // DO NOT ---> template<typename TYPE, typename DELETER = Deleter<typename std::remove_const_t<TYPE>>>
  // because the 'TYPE const' is used to signal Deleter<TYPE const> is a no-op
  template<typename TYPE, typename DELETER = Deleter<TYPE>> struct Pointer;
}
#endiv
#divert <hpp>
#import std.unique_ptr
template<typename TYPE, typename DELETER> class openssl::managed::Pointer : public std::unique_ptr<TYPE, DELETER> {
  using Ancestor = std::unique_ptr<TYPE, DELETER>;
protected:
  ~Pointer() = default;
public:
  using Value = TYPE; // New School
  using Deleter = typename Ancestor::deleter_type; // New School
  static_assert(std::is_trivially_copyable<Deleter>::value);
  inline explicit Pointer(Value *, Deleter const & = Deleter{}); // throws exception::Alloc on construction with nullptr
  inline explicit Pointer(std::unique_ptr<TYPE>, Deleter const & = Deleter{});
  // move semantics, but no copy semantics
  Pointer(Pointer const &) = delete;
  auto operator=(Pointer const &) -> Pointer & = delete;
  Pointer(Pointer &&) = default;
  auto operator=(Pointer &&) -> Pointer & = default;
};
#endiv
#divert <ipp>
#import openssl.exception.Null
#import std.move
namespace openssl::managed {
  template<typename P, typename D> Pointer<P,D>::Pointer(Value *value, Deleter const &del)
    : Ancestor{value, del} {
    if (nullptr == value) {
      throw exception::Null{};
    }
  }
  template<typename P, typename D> Pointer<P,D>::Pointer(std::unique_ptr<Value> ptr, Deleter const &del)
    : Ancestor{std::move(ptr), del} {
    if (nullptr == Ancestor::get()) {
      throw exception::Null{};
    }
  }
}
#endiv

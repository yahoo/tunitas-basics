// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#forward openssl.managed.deleter.Abstract
#import openssl.types // ASN1_TIME
namespace openssl::managed::deleter {
  //
  // Delete an ASN1_TIME (this one is quirky)
  //
  template<> struct Abstract<ASN1_TIME, Usage::TIME>;
}
#import openssl.managed.deleter.Abstract.TIME_const
#endiv
#divert <hpp>
#import openssl.managed.Deleting
namespace openssl::managed::deleter {
  template<> class Abstract<ASN1_TIME, Usage::TIME> : public Deleting {
    using ancestor = Deleting;
  public:
    Abstract() = default;
    inline explicit Abstract(Configuration);
    using Value = ASN1_TIME;
    inline auto operator()(Value *) const -> void;
  };
}
#endiv
#divert <ipp>
#import openssl.functions
namespace openssl::managed::deleter {
  Abstract<ASN1_TIME, Usage::TIME>::Abstract(Configuration cfg)
    : ancestor{cfg}
  { }
  auto Abstract<ASN1_TIME, Usage::TIME>::operator()(Value *value) const -> void {
    if (DELETING == configuration) {
      if (value) {
        //
        // WATCHOUT - you have to use the STRING deleter here
        // To wit:
        //   https://www.openssl.org/docs/man1.0.2/man3/ASN1_TIME_set.html
        //     <quote>
        //       The ASN1_TIME structure is represented as an ASN1_STRING
        //       internally and can be freed up using ASN1_STRING_free().
        //     </quote>
        //
        ASN1_STRING_free(value);
      }
    }
  }
}
#endiv

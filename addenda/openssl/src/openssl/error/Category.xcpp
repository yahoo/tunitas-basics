// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace openssl::error {
  //
  // The error category of OpenSSL errors
  //
  // Usage:
  //
  //   auto &c = category();
  //
  class Category;
}
#endiv
#divert <hpp>
#import std.error_category
#import openssl.error.category
#import std.error_condition
#import std.string
class openssl::error::Category : public std::error_category {
  using ancestor = std::error_category;
  friend auto error::category() -> Category const &;
  Category() = default;
public:
  auto name() const noexcept -> char const * final;
  auto default_error_condition(int code) const noexcept -> std::error_condition final;
  auto message(int code) const -> std::string final;
};
#endiv
#divert <cpp>
#import std.to_string
#import openssl.error.Code
#import openssl.
namespace openssl::error {
  auto Category::name() const noexcept -> char const * {
    return "OpenSSL";
  }
  auto Category::default_error_condition(int code) const noexcept -> std::error_condition {
    auto failed = 0 != code;
    return std::error_condition{failed, *this};
  }
  auto Category::message(int code) const -> std::string {
    switch (Code{code}) {
    case Code::SUCCESS:
      return "success";
    case Code::FAILURE:
      return "generic failure";
    case Code::MISSING:
      return "item is missing"; // e.g. find(...) or erase_where(...)
    case Code::ASN1:
      return "failure in the ASN.1 subsystem";
    case Code::BN:
      return "failure in the BIGNUM subsystem";
    case Code::EC:
      return "failure in the EC subsystem";
    case Code::EVP:
      return "failure in the EVP subsystem";
    case Code::PEM:
      return "failure in the PEM subsystem";
    case Code::RSA:
      return "failure in the RSA subsystem";
    case Code::X509:
      return "failure in the X.509 subsystem";
    default:
      return "error #" + std::to_string(code);
      break;
    }
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace openssl::exception {
  //
  // An invalid argument has been supplied
  // Like std::invalid_argument, but is imbued with an OpenSSL sense.
  //
  // Usage:
  //
  //   try {
  //     throw Argument{};
  //   } catch (Aspect const &) {
  //     ...recover...
  //   }
  //
  class Argument;
}
#endiv
#divert <hpp>
#import openssl.exception.Aspect
#import std.invalid_argument
class openssl::exception::Argument : public Aspect, public std::invalid_argument {
  struct ancestors {
    using Aspect = openssl::exception::Aspect;
    using Exception = std::invalid_argument;
  };
public:
  inline Argument();
  inline explicit Argument(std::string const &reason);
  auto what() const noexcept -> char const * override;
};
#endiv
#divert <ipp>
openssl::exception::Argument::Argument()
  : ancestors::Exception{"invalid"}
{ }
openssl::exception::Argument::Argument(std::string const &reason)
  : ancestors::Exception{reason}
{ }
#endiv
#divert <cpp>
auto openssl::exception::Argument::what() const noexcept -> char const * {
  return ancestors::Exception::what();
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace openssl::exception {
  //
  // An system error has occurred
  // Like std::system_error, but is imbued with an OpenSSL sense.
  //
  // Usage:
  //
  //   try {
  //     throw System{ec, "reason"};
  //   } catch (Aspect const &) {
  //     ...recover...
  //   }
  //
  class System;
}
#endiv
#divert <hpp>
#import openssl.exception.Aspect
#import std.system_error
class openssl::exception::System : public Aspect, public std::system_error {
  struct ancestors {
    using Aspect = openssl::exception::Aspect;
    using Exception = std::system_error;
  };
public:
  System() = default;
  // DO NOT ---> using ancestor::system_error; <--- DO NOT (it does not initialize the vtable)
  inline explicit System(std::error_code ec) : ancestors::Exception{ec} { }
  inline System(std::error_code ec, char const *reason) : ancestors::Exception{ec, reason} { }
  inline System(std::error_code ec, std::string const &reason) : ancestors::Exception{ec, reason} { }
  inline System(int error_num, std::error_category const &cat) : ancestors::Exception{error_num, cat} { }
  inline System(int error_num, std::error_category const &cat, char const *reason) : ancestors::Exception{error_num, cat, reason} { }
  inline System(int error_num, std::error_category const &cat, std::string const &reason) : ancestors::Exception{error_num, cat, reason} { }
  auto what() const noexcept -> char const * override;
};
#endiv
#divert <cpp>
auto openssl::exception::System::what() const noexcept -> char const * {
  return ancestors::Exception::what();
}
#endiv

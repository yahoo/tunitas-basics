// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
namespace want {
  //
  // Zero out the memory of the thing.
  //
  template<typename TYPE> inline auto zero(TYPE &) -> void;
}
#endiv
#divert <ipp>
#import std.uninitialized_fill_n
template<typename TYPE> auto want::zero(TYPE &value) -> void {
  // https://stackoverflow.com/questions/11962457/why-is-using-an-uninitialized-variable-undefined-behavior
  //
  // On the 'trap representation'
  //
  // <quote>
  // Yes, the program might crash. There might, for example, be trap representations
  // (specific bit patterns which cannot be handled) which might cause a CPU interrupt,
  // which unhandled could crash the program.
  //
  //     <blockquote>(6.2.6.1 on a late C11 draft says) Certain object
  //     representations need not represent a value of the object type. If the
  //     stored value of an object has such a representation and is read by an
  //     lvalue expression that does not have character type, the behavior is
  //     undefined. If such a representation is produced by a side effect that
  //     modifies all or any part of the object by an lvalue expression that
  //     does not have character type, the behavior is undefined.50) Such a
  //     representation is called a trap representation.</blockquote>
  //
  // </quote>
  //
  // Think: "double" or some other exotic data type that must be handled via a special register or coprocessor
  //
  std::uninitialized_fill_n(reinterpret_cast<unsigned char *>(&value), sizeof (value), '\0');
}
#endiv

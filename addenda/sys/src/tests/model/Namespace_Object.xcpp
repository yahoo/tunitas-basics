// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.is_class
#import std.is_enum
#import std.is_default_constructible
#import std.is_copy_constructible
#import std.is_move_constructible
#import std.is_copy_assignable
#import std.is_move_assignable
namespace tests::model {
  //
  // The POSIX system (namespace sys::posix)) has certain large objects that act as packaged namespaces.
  // Ensure they are appropriately decorated so they can be used as data types.
  //
  // Usage:
  //
  //   struct sys::posix::SOMETHING {
  //     ... declarations...
  //     ...definitions...
  //     SOMETHING() = delete;
  //     SOMETHING(SOMETHING const &) = delete;
  //     auto operator=(SOMETHING const &) -> SOMETHING & = delete;
  //   };
  //
  //   static_assert(Namespace_Object<SOMETHING>);
  //
  namespace [[detail]] namespace_object {
    using namespace std;
    template<typename OBJECT> concept bool Object = requires(OBJECT) {
      requires is_class_v<OBJECT>;
      // NO --> requires 0 == sizeof (OBJECT); <-- NO (they always have a size to satisfy the unique address constraint)
      requires !is_default_constructible_v<OBJECT>;
      requires !is_copy_constructible_v<OBJECT>;
      requires !is_copy_assignable_v<OBJECT>;
    };
    template<typename OBJECT> concept bool Namespace_Object = Object<OBJECT>;
  }
  using namespace_object::Namespace_Object;
}
#endiv

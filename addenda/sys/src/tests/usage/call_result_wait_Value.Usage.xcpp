// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <tpp>
//
// This is the general predicate for the wait::Value<VALUES...>
// You likely want one of the more specific predicates
//
//   call_result_wait_Value_PROCESS
//   call_result_wait_Value_PROCESS_Status
//   call_result_wait_Value_PROCESS_Siginfo
//   call_result_wait_Value_PROCESS_Usages
//   call_result_wait_Value_PROCESS_Status_Usages
//
// waitid(2) is special and different
//
//   The almost-distinguishing aspect of almost-all of the wait::Value<VALUES...> is that the first payload (zeroth offset) is the pid.
//   Except for waitid(3) which returns a "regular status" with the pid being returned within the siginfo.
//
// unoverloaded wait(...) is just waitpid(...) with  some bound arguments
// 
//   wait<pid_t>(Status &) <--------> waitpid(pid_t{-1}, Status &, Options)
//   wait<Process>(Status &) <------> waitpid(Process{-1}, Status &, Options)
//
// Usage:
//
//   #import tests.usage.call_result_wait_Value.Usage
//   static_assert(tests::usage::call::result_wait_Value::Usage<>);
//
#import pid_t
#import nonstd.convertible_to
#import nonstd.same_as
#import sys.call.result.Element
#import sys.call.result.Size
#import sys.call.result.wait.Value
#import sys.id.Process
#import sys.id.required.Process
#import tests.usage.call_result_Value.Usage
using tests::usage::call_result_Value::Usage;
#import tests.usage.countof
namespace tests::usage::call_result_wait_Value {
  using sys::call::result::wait::Value;
  namespace [[detail]] packaging {
    using namespace std;
    using namespace nonstd;
    namespace [[detail]] result {
      namespace required = sys::call::result::required;
      template<typename RESULT, typename PROCESS> concept Process_Series = requires(RESULT result, bool good, int error, PROCESS ssecorp) {
        //
        // wait(2) -> pid_t          but prefer call_result_wait_Value_PROCESS::Usage
        // waitpid(2) -> pid_t       but prefer call_result_wait_Value_PROCESS::Usage
        //                                   or call_result_wait_Value_PROCESS_Status::Usage
        // wait3(2) -> pid_t         but prefer among the many specific choices
        // wait4(2) -> pid_t         ibidem     call_result_wait_Value_PROCESS::Usage
        //                                      call_result_wait_Value_PROCESS_Status::Usage
        //                                      call_result_wait_Value_PROCESS_Usages::Usage
        //                                      call_result_wait_Value_PROCESS_Status_Usages::Usage
        //
        requires call_result_Value::Scenario<PROCESS>
        requires sys::id::required::Process<PROCESS>;
        { RESULT{} };
        // CANNOT ---> { RESULT{good, error, ssecorp, ...and-others...somehow...} }; <--- CANNOT
        { pid(result) } -> convertible_to<PROCESS>;
        { process(result) } -> convertible_to<PROCESS>;
      };
      template<typename RESULT, typename STATUS> concept Status_Series = requires(RESULT result, bool good, int error, int called) {
        //
        // waitid(2) -> int       but prefer call_result_wait_Value_PROCESS_Siginfo::Usage
        //
        requires call_result_Value::Scenario<STATUS>;
        requires same_as<STATUS, int>;
        { RESULT{} };
        // CANNOT ---> { RESULT{good, error, called, ...and-others...somehow...} }; <--- CANNOT
        { value(result) } -> convertible_to<int>;
      };
    }
    namespace [[detail]] {
      using sys::call::result::Element;
      using sys::call::result::Size;
      template<typename RESULT> concept Instance = requires(RESULT) {
        typename Element<0, RESULT>::Type;
        requires 1 <= Size<RESULT>::value;
        requires result::Process_Series<RESULT, typename Element<0, RESULT>::Type> || result::Status_Series<RESULT, typename Element<0, RESULT>::Type>;
      };
    }
    template<typename... _> concept Usage = requires(_...) {
      requires 0 == countof<_...>;
      requires Instance<Value<pid_t>>;
      requires Instance<Value<sys::id::Process>>;
    };
  }
  using packaging::Usage;
}
#endiv

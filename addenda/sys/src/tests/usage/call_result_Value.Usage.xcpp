// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <tpp>
//
// Usage:
//
//   #import tests.usage.call_result_Value.Usage
//   static_assert(tests::usage::call_result_Value::Usage<>);
//   static_assert(tests::usage::call_result_Value::Scenario<int>);
//   static_assert(tests::usage::call_result_Value::Scenario<bool>);
//   static_assert(tests::usage::call_result_Value::Scenario<std::string>);
//   ...and more...
//
#import error_t
#import nonstd.same_as
#import nonstd.convertible_to
#import std.error_code
#import std.error_condition
#import std.is_copy_assignable
#import std.is_copy_constructible
#import std.is_default_constructible
#import std.is_move_assignable
#import std.is_move_constructible
#import std.string
#import sys.call.result.Value
#import sys.call.result.Element
#import sys.call.result.Size
#import sys.id.File
#import sys.id.Process
#import tests.usage.countof
namespace tests::usage::call_result_Value {
  using sys::call::result::Value;
  namespace [[detail]] packaging {
    // WATCHOUT -- 'using namespace std' will occlude ADL for error_code(Result), error_condition(Result)
    using nonstd::convertible_to;
    namespace [[detail]] result {
      namespace [[detail]] without_namespace_std {
        // DO NOT ---> using namespace std; <--- DO NOT
        template<typename RESULT, typename PAYLOAD> concept bool Triple = requires(RESULT result) {
          //
          // WATCHOUT - when 'using namespace std' these ADL functions are occluded so the predicate fails.
          //
          { error_num(result) } -> convertible_to<error_t>;
          { error_code(result) } -> convertible_to<std::error_code>;
          { error_condition(result) } -> convertible_to<std::error_condition>;
        };
      }
      namespace [[detail]] with_namespace_std {
        using namespace std;
        template<typename PAYLOAD> concept bool Payload = requires(PAYLOAD) {
          requires is_default_constructible_v<PAYLOAD>;
          requires is_copy_constructible_v<PAYLOAD>;
        };
        template<typename RESULT, typename PAYLOAD> concept bool Triple = requires(RESULT result) {
          requires Payload<PAYLOAD>;
          { ok(result) } -> convertible_to<bool>; // ........ deprecate-in-place
          { good(result) } -> convertible_to<bool>; // ...... prefer
          { fail(result) } -> convertible_to<bool>; // ...... prefer
          { error_message(result) } -> convertible_to<string>;
          { value(result) } -> convertible_to<PAYLOAD>;
          { RESULT() };
          // Can't test the other constructors here because we don't have the VALUES... any more
          requires is_default_constructible_v<RESULT>;
          requires is_copy_constructible_v<RESULT>;
          requires is_move_constructible_v<RESULT>;
          requires is_copy_assignable_v<RESULT>;
          requires is_move_assignable_v<RESULT>;
#warning [[FIXTHIS]] add the rest of enbooleanate, get sys_error_code generic_error_code and all that
          // and check that all the elements of Value<VALUE, VALUES...> are default & copy constructible
        };
      }
      template<typename RESULT, typename PAYLOAD> concept bool Triple = with_namespace_std::Triple<RESULT, PAYLOAD> && without_namespace_std::Triple<RESULT, PAYLOAD>;
      using with_namespace_std::Payload;
    }
    using sys::call::result::Element;
    using sys::call::result::Size;
    template<typename RESULT> concept bool Instance = requires(RESULT) {
      typename Element<0, RESULT>::Type; // at least that first one exists
      requires 1 <= Size<RESULT>::value;
      requires result::Triple<RESULT, typename Element<0, RESULT>::Type>;
    };
    template<typename PAYLOAD, typename... PAYLOADS> concept bool Scenario = requires(PAYLOAD, PAYLOADS...) {
      requires (result::Payload<PAYLOAD> && ... && result::Payload<PAYLOADS>);
      requires Instance<Value<PAYLOAD, PAYLOADS...>>;
    };
    namespace id = sys::id;
    template<typename... _> concept bool Usage = requires(_...) {
      requires 0 == countof<_...>;
      requires Instance<Value<int>>;
      requires Instance<Value<bool>>;
      requires Instance<Value<std::string>>;
      requires Instance<Value<id::File>>;
      requires Instance<Value<id::Process>>;
    };
  }
  using packaging::Scenario;
  using packaging::Usage;
}
#endiv

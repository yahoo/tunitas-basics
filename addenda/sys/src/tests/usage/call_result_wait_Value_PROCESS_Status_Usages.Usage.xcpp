// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <tpp>
//
// Usage:
//
//   #import tests.usage.call_result_wait_Value_PROCESS_Status_Usages.Usage
//   static_assert(tests::usage::call_result_wait_Value_PROCESS_Status_Usages::Usage<>);
//
#import pid_t
#import error_t
#import nonstd.same_as
#import nonstd.convertible_to
#import sys.call.result.Element
#import sys.call.result.Size
#import sys.call.result.wait.Value.PROCESS.Status.Usages
#import sys.call.result.required.Wait
#import sys.id.Process
#import sys.id.required.Process
#import sys.r.Usages
#import sys.wait.Status
#import tests.usage.call_result_Value.Usage
#import tests.usage.countof
namespace tests::usage::call_result_wait_Value_PROCESS_Status_Usages {
  using sys::call::result::Value;
  namespace [[detail]] packaging {
    using namespace nonstd;
    using namespace std;
    namespace [[detail]] result {
      namespace required {
        using sys::id::required::Process;
        using sys::call::result::required::Wait;
      }
      using sys::wait::Status;
      using sys::r::Usages;
      template<typename RESULT, typename PROCESS, typename STATUS, typename USAGES> concept bool Process_Status_Usages = requires(RESULT result, bool good, error_t error, PROCESS ssecorp, STATUS sutats, USAGES segasu) {
        requires required::Wait<PROCESS, STATUS, USAGES>;
        requires call_result_Value::Scenario<RESULT>;
        requires required::Process<PROCESS>
        requires same_as<STATUS, Status>;
        requires same_as<USAGES, Usages>;
        { RESULT{} };
        { RESULT{good, error, ssecorp, sutats, segasu} };
        { pid(result) } -> convertible_to<PROCESS>;
        { process(result) } -> convertible_to<PROCESS>;
        { status(result) } -> convertible_to<STATUS>;
        { sys::call::result::wait::usage(result) } -> convertible_to<USAGES>; // available by ADL, but namespace tests::usage occludes that
        { usages(result) } -> convertible_to<USAGES>;
      };
    }
    namespace [[detail]] {
      using sys::call::result::Element;
      using sys::call::result::Size;
      template<typename RESULT> concept bool Instance = requires(RESULT) {
        requires 3 == Size<RESULT>::value;
        requires result::Process_Status_Usages<RESULT, typename Element<0, RESULT>::Type, typename Element<1, RESULT>::Type, typename Element<2, RESULT>::Type>;
      };
    }
    template<typename... _> concept bool Usage = requires(_...) {
      requires 0 == countof<_...>;
      requires Instance<Value<pid_t>>;
      requires Instance<Value<sys::id::Process>>;
    };
  }
  using packaging::Usage;
}
#endiv

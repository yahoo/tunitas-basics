// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <tpp>
//
// Usage:
//
//   #import tests.usage.posix_waitid.Usage
//   static_assert(tests::usage::posix_waitid::Usage<>);
//
#import nonstd.convertible_to
#import pid_t
#import id_t
#import sys.call.result.wait.Value
#import sys.id.Process
#import sys.id.process.Either
#import sys.id.process.Group
#import sys.id.process.Process
#import sys.id.required.Process
#import sys.id.required.process.Process
#import sys.id.required.Wait
#import sys.id.required.wait.Typed
#import sys.id.required.wait.Untyped
#import sys.id.Wait
#import sys.id.wait.Typed
#import sys.id.wait.Untyped
#import sys.posix.waitid
#import sys.w.Options
#import tests.usage.countof
namespace tests::usage::posix_waitid {
  using sys::posix::waitid;
  using sys::posix::native::waitid;
  namespace [[detail]] packaging {
    using namespace nonstd;
    using namespace std;
    namespace io {
      using Options = sys::w::Options;
      using Siginfo = sys::sig::Info;
      using Type = sys::p::Type;
      using Wait = sys::id::Wait;
      using Typed = sys::id::wait::Typed;
      using typed_t = sys::id::wait::typed_t;
    }
    namespace required = sys::id::required;
    namespace result { using namespace sys::call::result::wait; }
    namespace [[detail]] {
      namespace [[detail]] disambiguate_function {
        using sys::posix::waitid;
        template<typename RETURNED, typename MATCHED> concept Untyped = requires(RETURNED, io::Type type, MATCHED untyped, io::Options options, io::Siginfo &ofnigis) {
          requires required::process::Process<RETURNED>;
          requires required::wait::Untyped<MATCHED>;
          { waitid(type, untyped) } -> convertible_to<result::Value<RETURNED,io::Siginfo>>;
          { waitid(type, untyped, options) } -> convertible_to<result::Value<RETURNED,io::Siginfo>>;
          { waitid(type, untyped, options, ofnigis) } -> convertible_to<result::Value<RETURNED>>;
          { waitid(type, untyped, ofnigis, options) } -> convertible_to<result::Value<RETURNED>>;
        };
        template<typename RETURNED, typename MATCHED> concept Typed = requires(RETURNED, MATCHED matched, io::Options options, io::Siginfo &ofnigis) {
          requires required::process::Process<RETURNED>;
          requires required::wait::Typed<MATCHED>;
          { waitid(matched) } -> convertible_to<result::Value<RETURNED,io::Siginfo>>;
          { waitid(matched, options) } -> convertible_to<result::Value<RETURNED,io::Siginfo>>;
          { waitid(matched, options, ofnigis) } -> convertible_to<result::Value<RETURNED>>;
          { waitid(matched, ofnigis, options) } -> convertible_to<result::Value<RETURNED>>;
        };
        template<typename RETURNED, typename MATCHED> concept Overloaded = requires(RETURNED, MATCHED matched, io::Options options, io::Siginfo &ofnigis) {
          requires required::process::Process<RETURNED>;
          requires required::process::Either<MATCHED>;
          { waitid(matched) } -> convertible_to<result::Value<RETURNED,io::Siginfo>>;
          { waitid(matched, options) } -> convertible_to<result::Value<RETURNED,io::Siginfo>>;
          { waitid(matched, options, ofnigis) } -> convertible_to<result::Value<RETURNED>>;
          { waitid(matched, ofnigis, options) } -> convertible_to<result::Value<RETURNED>>;
        };
      }
      namespace [[detail]] disambiguate_native {
        using sys::posix::native::waitid;
        template<typename RETURNED, typename MATCHED> concept Untyped = requires(RETURNED, io::Type type, MATCHED untyped, io::Options options, io::Siginfo &ofnigis) {
          requires required::process::Process<RETURNED>; // ... superclass
          requires same_as<RETURNED, pid_t>; // ............... specific
          requires required::Wait<MATCHED>; // ................ superclass
          requires same_as<MATCHED, id_t>; // ................. specific
          { waitid(type, untyped) } -> convertible_to<result::Value<RETURNED,io::Siginfo>>;
          { waitid(type, untyped, options) } -> convertible_to<result::Value<RETURNED,io::Siginfo>>;
          { waitid(type, untyped, options, ofnigis) } -> convertible_to<result::Value<RETURNED>>;
          { waitid(type, untyped, ofnigis, options) } -> convertible_to<result::Value<RETURNED>>;
        };
        template<typename RETURNED, typename MATCHED> concept Typed = requires(RETURNED, MATCHED matched, io::Options options, io::Siginfo &ofnigis) {
          requires required::process::Process<RETURNED>; // ....... superclass
          requires same_as<RETURNED, pid_t>; // ................... specific
          requires required::wait::Typed<MATCHED>; // ............. superclass
          requires same_as<MATCHED, sys::id::wait::typed_t>; // ... specific
          { waitid(matched) };
          { waitid(matched) } -> convertible_to<result::Value<RETURNED,io::Siginfo>>;
          { waitid(matched, options) } -> convertible_to<result::Value<RETURNED,io::Siginfo>>;
          { waitid(matched, options, ofnigis) } -> convertible_to<result::Value<RETURNED>>;
          { waitid(matched, ofnigis, options) } -> convertible_to<result::Value<RETURNED>>;
        };
      }
    }
    template<typename... _> concept Usage = requires(_...) {
      requires 0 == countof<_...>;
      //
      requires disambiguate_native::Untyped<pid_t, id_t>;
      requires disambiguate_native::Typed<pid_t, sys::id::wait::typed_t>;
      //
      requires disambiguate_function::Overloaded<sys::id::Process, sys::id::process::Process>;
      requires disambiguate_function::Overloaded<sys::id::Process, sys::id::process::Group>;
      requires disambiguate_function::Overloaded<sys::id::Process, sys::id::process::Either>;
      requires disambiguate_function::Typed<sys::id::Process, sys::id::wait::Typed>;
      requires disambiguate_function::Untyped<sys::id::Process, sys::id::Wait>;
#if 0
      // [[MAYBE, FIXTHIS]] these are not implemented ... they mix old_school (lower_case) with New_School (Title Case)
      requires disambiguate_function::Typed<sys::id::Process, sys::id::wait::typed_t>;
      requires disambiguate_function::Untyped<sys::id::Process, id_t>;
#endif
    };
    static_assert(is_same_v<sys::id::Wait, sys::id::wait::Untyped>);
  }
  using packaging::Usage;
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <tpp>
//
// Usage:
//
//   #import tests.usage.posix_flock.Usage
//   static_assert(tests::usage::posix_flock::Usage<>);
//
#import nonstd.same_as
#import nonstd.convertible_to
#import sys.call.Result
#import sys.fd.required.Unmanaged
#import sys.flock.Operation
#import sys.flock.Options
#import sys.flock.Specification
#import sys.id.File
#import sys.posix.flock
#import sys.posix.FLOCK
#import sys.posix.LOCK
#import tests.usage.countof
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
namespace tests::usage::posix_flock {
  using sys::posix::flock;
  using sys::posix::native::flock;
  using sys::posix::FLOCK;
  using sys::posix::LOCK;
  namespace [[detail]] packaging {
    namespace [[detail]] {
      using namespace std;
      using namespace nonstd;
      namespace required = sys::fd::required;
      using sys::flock::Specification;
      using sys::flock::Operation;
      using sys::flock::Options;
      using Status = sys::call::Result;
      template<typename FILE> concept bool Overloading = requires(FILE file, Specification specification, Operation operation, Options options) {
        requires required::Unmanaged<FILE>;
        { flock(file, specification) } -> convertible_to<Status>;
        { flock(file, operation, options) } -> convertible_to<Status>;
        { flock(file, operation) } -> convertible_to<Status>;
      };
      template<typename FILE> concept bool Object_FLOCK_Long = requires(FILE file) {
        requires required::Unmanaged<FILE>;
        // 1-arg
        { flock(file, FLOCK::SHARED) } -> convertible_to<Status>;
        { flock(file, FLOCK::EXCLUSIVE) } -> convertible_to<Status>;
        { flock(file, FLOCK::END) } -> convertible_to<Status>;
        { flock(file, FLOCK::UNLOCK) } -> convertible_to<Status>;
        { flock(file, FLOCK::EXCLUSIVE | FLOCK::ADVISORY) } -> convertible_to<Status>;
        { flock(file, FLOCK::EXCLUSIVE | FLOCK::NONBLOCK) } -> convertible_to<Status>;
        { flock(file, FLOCK::SHARED | FLOCK::MANDATORY) } -> convertible_to<Status>;
        { flock(file, FLOCK::SHARED | FLOCK::MANDATORY | FLOCK::NONBLOCK) } -> convertible_to<Status>;
        //
        { flock(file, FLOCK::EXCLUSIVE, FLOCK::ADVISORY) } -> convertible_to<Status>;
        { flock(file, FLOCK::EXCLUSIVE, FLOCK::NONBLOCK) } -> convertible_to<Status>;
        { flock(file, FLOCK::SHARED, FLOCK::MANDATORY) } -> convertible_to<Status>;
        { flock(file, FLOCK::SHARED, FLOCK::MANDATORY | FLOCK::NONBLOCK) } -> convertible_to<Status>;
      };
      template<typename FILE> concept bool Object_FLOCK_Short = requires(FILE file) {
        requires required::Unmanaged<FILE>;
        // 1-arg
        { flock(file, FLOCK::SH) } -> convertible_to<Status>;
        { flock(file, FLOCK::EX) } -> convertible_to<Status>;
        { flock(file, FLOCK::UN) } -> convertible_to<Status>;
        { flock(file, FLOCK::EX | FLOCK::ADVISORY) } -> convertible_to<Status>;
        { flock(file, FLOCK::EX | FLOCK::NB) } -> convertible_to<Status>;
        { flock(file, FLOCK::SH | FLOCK::MAND | FLOCK::NB) } -> convertible_to<Status>;
        // 2-args
        { flock(file, FLOCK::EX, FLOCK::ADVISORY) } -> convertible_to<Status>;
        { flock(file, FLOCK::EX, FLOCK::NB) } -> convertible_to<Status>;
        { flock(file, FLOCK::SH, FLOCK::MAND | FLOCK::NB) } -> convertible_to<Status>;
      };
      template<typename FILE> concept bool Object_LOCK_Long = requires(FILE file) {
        requires required::Unmanaged<FILE>;
        // 1-arg
        { flock(file, LOCK::SHARED) } -> convertible_to<Status>;
        { flock(file, LOCK::EXCLUSIVE) } -> convertible_to<Status>;
        { LOCK::END } -> same_as<sys::lock::Operation>; // i.e. unsuitable for flock (a name occlusion in LOCK)
        { flock(file, LOCK::UNLOCK<LOCK::FLOCK>) } -> convertible_to<Status>;
        { flock(file, LOCK::EXCLUSIVE | LOCK::ADVISORY) } -> convertible_to<Status>;
        { flock(file, LOCK::EXCLUSIVE | LOCK::NONBLOCK) } -> convertible_to<Status>;
        { flock(file, LOCK::SHARED | LOCK::MANDATORY) } -> convertible_to<Status>;
        { flock(file, LOCK::SHARED | LOCK::MANDATORY | LOCK::NONBLOCK) } -> convertible_to<Status>;
        //
        { flock(file, LOCK::EXCLUSIVE, LOCK::ADVISORY) } -> convertible_to<Status>;
        { flock(file, LOCK::EXCLUSIVE, LOCK::NONBLOCK) } -> convertible_to<Status>;
        { flock(file, LOCK::SHARED, LOCK::MANDATORY) } -> convertible_to<Status>;
        { flock(file, LOCK::SHARED, LOCK::MANDATORY | LOCK::NONBLOCK) } -> convertible_to<Status>;
      };
      template<typename FILE> concept bool Object_LOCK_Short = requires(FILE file) {
        requires required::Unmanaged<FILE>;
        // 1-arg
        { flock(file, LOCK::SH) } -> convertible_to<Status>;
        { flock(file, LOCK::EX) } -> convertible_to<Status>;
        { LOCK::UN } -> same_as<sys::lock::Operation>; // i.e. unsuitable for flock (a name occlusion in LOCK)
        { flock(file, LOCK::Ancestors::FLOCK::UN) } -> convertible_to<Status>;
        { flock(file, LOCK::EX | LOCK::ADVISORY) } -> convertible_to<Status>;
        { flock(file, LOCK::EX | LOCK::NB) } -> convertible_to<Status>;
        { flock(file, LOCK::SH | LOCK::MAND | LOCK::NB) } -> convertible_to<Status>;
        // 2-args
        { flock(file, LOCK::EX, LOCK::ADVISORY) } -> convertible_to<Status>;
        { flock(file, LOCK::EX, LOCK::MANDATORY) } -> convertible_to<Status>;
        { flock(file, LOCK::EX, LOCK::NB) } -> convertible_to<Status>;
        { flock(file, LOCK::EX, LOCK::NB | LOCK::NB) } -> convertible_to<Status>;
        { flock(file, LOCK::SH, LOCK::MAND | LOCK::NB) } -> convertible_to<Status>;
      };
    }
    template<typename FILE> concept bool Instance = requires(FILE) {
      requires Overloading<FILE>;
      requires Object_FLOCK_Short<FILE>;
      requires Object_FLOCK_Long<FILE>;
      requires Object_LOCK_Short<FILE>;
      requires Object_LOCK_Long<FILE>;
    };
    template<typename... _> concept bool Usage = requires(_...) {
      requires 0 == countof<_...>;
      requires Instance<int>;
      requires Instance<sys::id::File>;
    };
  }
  using packaging::Usage;
}
#pragma GCC diagnostic pop
#endiv

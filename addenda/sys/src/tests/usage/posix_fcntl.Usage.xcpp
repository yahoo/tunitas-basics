// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <tpp>
//
// Usage:
//
//   #import tests.usage.posix_fcntl.Usage
//   static_assert(tests::usage::posix_fcntl::Usage<>);
//
#import nonstd.same_as
#import nonstd.convertible_to
#import sys.call.Result
#import sys.fd.required.Unmanaged
#import sys.posix.fcntl
#import sys.posix.F
#import sys.posix.LEASE
#import sys.posix.LOCK
#import tests.usage.countof
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
namespace tests::usage::posix_fcntl {
  using sys::posix::fcntl;
  using sys::posix::native::fcntl;
  using sys::posix::F;
  using sys::posix::LOCK;
  using sys::posix::LEASE;
  namespace [[detail]] packaging {
    namespace [[detail]] {
      using namespace std;
      using namespace nonstd;
      namespace required = sys::fd::required;
    }
    template<typename FILE> concept bool Instance = requires(FILE fd, sys::f::Function function) {
      requires sys::fd::required::Unmanaged<FILE>;
#warning WRITETHIS for fcntl
      { fcntl(fd, function) }; // [[TODO]] check the return type
      { fcntl(fd, function, int{}) }; // ibidem.
    };
    template<typename... _> concept bool Usage = requires(_...) {
      requires 0 == countof<_...>;
      requires Instance<int>;
      requires Instance<sys::id::File>;
    };
  }
  using packaging::Usage;
}
#pragma GCC diagnostic pop
#endiv

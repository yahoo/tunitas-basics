// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <tpp>
//
// Usage:
//
//   #import tests.usage.posix_setlease.Usage
//   static_assert(tests::usage::posix_setlease::Usage<>);
//
#import nonstd.convertible_to
#import sys.call.Result
#import sys.fd.required.Unmanaged
#import sys.id.File
#import sys.posix.setlease
#import sys.posix.LEASE
#import sys.posix.LOCK
#import tests.usage.countof
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
namespace tests::usage::posix_setlease {
  using sys::posix::setlease;
  using sys::posix::native::setlease;
  using sys::posix::LEASE;
  namespace [[detail]] packaging {
    namespace {
      using namespace std;
      using namespace nonstd;
      namespace required = sys::fd::required;
      using Status = sys::call::Result;
      template<typename FILE> concept bool Overloading = requires(FILE file, LEASE::Operation operation) {
        requires required::Unmanaged<FILE>;
        { setlease(file, operation) } -> convertible_to<Status>;
      };
      template<typename FILE> concept bool Signature = requires(FILE fd) {
        requires required::Unmanaged<FILE>;
        { setlease(fd, LEASE::READ) } -> convertible_to<Status>;
        { setlease(fd, LEASE::WRITE) } -> convertible_to<Status>;
        { setlease(fd, LEASE::END) } -> convertible_to<Status>;
      };
    }
    template<typename FILE> concept bool Instance = requires(FILE) {
      requires Overloading<FILE>;
      requires Signature<FILE>;
    };
    template<typename... _> concept bool Usage = requires(_...) {
      requires 0 == countof<_...>;
      Instance<int>;
      Instance<sys::id::File>;
    };
  }
  using packaging::Usage;
}
#pragma GCC diagnostic pop
#endiv

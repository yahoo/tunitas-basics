// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <tpp>
//
// Usage:
//
//   #import tests.usage.call_result_pipe_Value.Usage
//   static_assert(tests::usage::call_result_pipe_Value::Usage<>);
//   static_assert(tests::usage::call_result_pipe_Value::Scenario<int>);
//   static_assert(tests::usage::call_result_pipe_Value::Scenario<id::file>);
//
#import sys.call.result.Element
#import sys.call.result.Size
#import sys.call.result.pipe.Value
#import sys.call.result.Size.pipe.Value
#import sys.call.result.Element.pipe.Value
#import sys.call.result.required.Pipe
#import sys.id.File
#import sys.fd.required.Unmanaged
#import nonstd.convertible_to
#import nonstd.same_as
#import std.error_code
#import std.error_condition
#import std.string
#import tests.usage.call_result_Value.Usage
#import tests.usage.countof
sys::call::result::pipe::Value<int> i;
sys::call::result::Element<0, sys::call::result::Value<int>>::Type j;
sys::call::result::Element<0, sys::call::result::pipe::Value<int>>::Type k;
namespace tests::usage::call_result_pipe_Value {
  using sys::call::result::pipe::Value;
  namespace [[detail]] packaging {
    namespace [[detail]] basic {
      // WATCHOUT -- 'using namespace std' will occlude ADL for error_code(Result), error_condition(Result)
      using nonstd::convertible_to;
      // [[FIXTHIS]] just move these assertions over into call_result_Value::Scenario<RESULT>
      template<typename RESULT> concept Ancestor = requires(RESULT result) {
        requires true;
        { ok(result) } -> convertible_to<bool>;
        { good(result) } -> convertible_to<bool>;
        { fail(result) } -> convertible_to<bool>;
        { error_num(result) } -> convertible_to<error_t>;
        { error_code(result) } -> convertible_to<std::error_code>;
        { error_condition(result) } -> convertible_to<std::error_condition>;
        { error_message(result) } -> convertible_to<std::string>;
      };
    }
    namespace [[detail]] result {
      using namespace nonstd;
      using namespace std;
      template<typename RESULT, typename READ, typename WRITE> concept Read_Write = requires(RESULT result, bool good, int error, READ read_fd, WRITE write_fd) {
        requires basic::Ancestor<RESULT>;
        requires tests::usage::call_result_Value::Scenario<READ>
        requires tests::usage::call_result_Value::Scenario<WRITE>
        requires sys::fd::required::Unmanaged<READ>; //  [[REMOVE]] in favor of call_result_Value::Scenario<READ>
        requires sys::fd::required::Unmanaged<WRITE>; // [[REMOVE]] in favor of call_result_Value::Scenario<WRITE>
        requires sys::call::result::required::Pipe<READ>;
        requires sys::call::result::required::Pipe<WRITE>;
        { RESULT{} };
        { RESULT{good, error, read_fd, write_fd} };
    { read_side(result) } -> convertible_to<convertible_to<READ>>;
    { write_side(result) } -> convertible_to<convertible_to<WRITE>>;
      };
    }
    namespace [[detail]] {
      using sys::call::result::Element;
      using sys::call::result::Size;
      template<typename RESULT> concept Instance = requires(RESULT) {
        typename Element<0, RESULT>::Type;
        typename Element<1, RESULT>::Type;
        requires 2 == Size<RESULT>::value;
        requires result::Read_Write<RESULT, typename Element<0, RESULT>::Type, typename Element<1, RESULT>::Type>;
      };
    }
    template<typename FD> concept Scenario = requires(FD) {
      requires sys::fd::required::Unmanaged<FD>; // [[REMOVE]] and defer to the required::Pipe<FD>
      requires sys::call::result::required::Pipe<FD>;
      requires Instance<Value<FD>>;
    };
    template<typename... _> concept Usage = requires(_...) {
      requires 0 == countof<_...>;
      requires Instance<Value<int>>;
      requires Instance<Value<sys::id::File>>;
    };
  }
  using packaging::Scenario;
  using packaging::Usage;
}
#endiv

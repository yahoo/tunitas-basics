// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <tpp>
//
// Usage:
//
//   #import tests.usage.posix_wait2.Usage
//   static_assert(tests::usage::posix_wait2::Usage<>);
//
#import nonstd.convertible_to
#import pid_t
#import sys.call.result.wait.Value
#import sys.id.Process
#import sys.id.required.Process
#import sys.posix.wait2
#import sys.w.Options
#import sys.wait.Status
#import tests.usage.countof
namespace tests::usage::posix_wait2 {
  using sys::posix::wait2;
  using sys::posix::native::wait2; // WATCHOUT - this makes some calls to wait2() ambiguous ... deal with it
  namespace [[detail]] packaging {
    using namespace nonstd;
    using namespace std;
    namespace io {
      using Options = sys::w::Options;
      using Status = sys::wait::Status;
    }
    namespace result { using namespace sys::call::result::wait; }
    namespace required = sys::id::required;
    namespace [[detail]] {
      namespace [[detail]] disambiguate_function {
        using sys::posix::wait2;
        template<typename RETURNED> concept Instance = requires(RETURNED, io::Status &sutats) {
    requires same_as<RETURNED, sys::id::Process>;
          requires required::Process<RETURNED>;
          // WATCHOUT - this is copypasta among the two disambiguation namespaces
    { wait2() } -> convertible_to<convertible_to<result::Value<RETURNED, io::Status>>>;
    { wait2(sutats) } -> convertible_to<convertible_to<result::Value<RETURNED>>>;
        };
      }
      namespace [[detail]] disambiguate_native {
        using sys::posix::native::wait2;
        template<typename RETURNED> concept Instance = requires(RETURNED, io::Status &sutats) {
          requires same_as<RETURNED, pid_t>;
          requires required::Process<RETURNED>;
          { wait2() } -> convertible_to<convertible_to<result::Value<RETURNED, io::Status>>>;
          { wait2(sutats) } -> convertible_to<convertible_to<result::Value<RETURNED>>>;
        };
      }
    }
    template<typename... _> concept Usage = requires(_...) {
      requires 0 == countof<_...>;
      requires disambiguate_native::Instance<pid_t>;
      requires disambiguate_function::Instance<sys::id::Process>;
    };
  }
  using packaging::Usage;
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <tpp>
//
// Usage:
//
//   #import tests.usage.posix_S.Usage
//   static_assert(tests::usage::posix_S::Usage<sys::posix::S>);
//
#import nonstd.convertible_to
#import sys.posix.S
#import tests.model.Namespace_Object
#import tests.model.Namespace_Object_Flags
#import tests.usage.countof
namespace tests::usage::posix_S {
  using sys::posix::S;
  namespace [[detail]] packaging {
    using nonstd::convertible_to;
    //
    // WATCHOUT - a cast to int (operator int()) will NOT work here
    // 
    template<typename S> concept Bits = requires(S) {
      requires (mode_t)S::N == 0u;
      requires (mode_t)S::R == 4u;
      requires (mode_t)S::W == 2u;
      requires (mode_t)S::X == 1u;
      requires (mode_t)S::RW == 6u;
      requires (mode_t)S::RX == 5u;
      requires (mode_t)S::WX == 3u;
      requires (mode_t)S::RWX == 7u;
    };
    template<typename S> concept Old_School = requires(S) {
      requires (mode_t)S::ISUID == S_ISUID;
      requires (mode_t)S::ISGID == S_ISGID;
      requires (mode_t)S::ISVTX == S_ISVTX;
      requires (mode_t)S::IRUSR == S_IRUSR;
      requires (mode_t)S::IWUSR == S_IWUSR;
      requires (mode_t)S::IXUSR == S_IXUSR;
      requires (mode_t)S::IRGRP == S_IRGRP;
      requires (mode_t)S::IWGRP == S_IWGRP;
      requires (mode_t)S::IXGRP == S_IXGRP;
      requires (mode_t)S::IROTH == S_IROTH;
      requires (mode_t)S::IWOTH == S_IWOTH;
      requires (mode_t)S::IXOTH == S_IXOTH;
    };
    template<typename S> concept New_School = requires(S) {
      requires (mode_t)S::NONE == 0;
      requires (mode_t)S::SETUID == S_ISUID;
      requires (mode_t)S::SETGID == S_ISGID;
      requires (mode_t)S::STICKY == S_ISVTX;
      requires (mode_t)S::RUSER == S_IRUSR;
      requires (mode_t)S::WUSER == S_IWUSR;
      requires (mode_t)S::XUSER == S_IXUSR;
      requires (mode_t)S::RGROUP == S_IRGRP;
      requires (mode_t)S::WGROUP == S_IWGRP;
      requires (mode_t)S::XGROUP == S_IXGRP;
      requires (mode_t)S::ROTHER == S_IROTH;
      requires (mode_t)S::WOTHER == S_IWOTH;
      requires (mode_t)S::XOTHER == S_IXOTH;
    };
    template<typename S> concept Instance = requires(S) {
      typename S::Bit;
      typename S::Bits;
      typename S::Flag;
      typename S::Flags;
      typename S::Mode;
      model::Namespace_Object<S>;
      model::Namespace_Object_Flags<S, typename S::Bit, typename S::Bits>;
      model::Namespace_Object_Flags<S, typename S::Flag, typename S::Flags>;
      requires Bits<S>;
      requires Old_School<S>;
      requires New_School<S>;
      requires requires(S, typename S::Bit bit, typename S::Bits its) {
#if 202003L < __cplusplus
        { S::template as<typename S::Bit>(convertible_to<typename S::Bit>;
        { S::template as<typename S::Bits>(convertible_to<typename S::Bits>;
        { S::template as<typename S::Bit>(convertible_to<typename S::Bit>;
        { S::template as<typename S::Bits>(convertible_to<typename S::Bits>;
#else
        // More of a GCC 10 but not GCC 9 thing though isn't it?
        { S::template as<typename S::Bit>(bit) } -> convertible_to<typename S::Bit>;
        { S::template as<typename S::Bits>(bit) } -> convertible_to<typename S::Bits>;
        { S::template as<typename S::Bit>(its) } -> convertible_to<typename S::Bit>;
        { S::template as<typename S::Bits>(its) } -> convertible_to<typename S::Bits>;
#endif
      };
      requires requires(S, typename S::Flag lag, typename S::Flags ags) {
#if 202003L < __cplusplus
        { S::template as<typename S::Flag>(convertible_to<typename S::Flag>;
        { S::template as<typename S::Flags>(convertible_to<typename S::Flags>;
        { S::template as<typename S::Flag>(convertible_to<typename S::Flag>;
        { S::template as<typename S::Flags>(convertible_to<typename S::Flags>;
#else
        // More of a GCC 10 but not GCC 9 thing though isn't it?
        { S::template as<typename S::Flag>(lag) } -> convertible_to<typename S::Flag>;
        { S::template as<typename S::Flags>(lag) } -> convertible_to<typename S::Flags>;
        { S::template as<typename S::Flag>(ags) } -> convertible_to<typename S::Flag>;
        { S::template as<typename S::Flags>(ags) } -> convertible_to<typename S::Flags>;
#endif
      };
    };
    template<typename... _> concept Usage = requires(_...) {
      requires 0 == countof<_...>;
      requires Instance<S>;
    };
  }
  using packaging::Usage;
}
#endiv

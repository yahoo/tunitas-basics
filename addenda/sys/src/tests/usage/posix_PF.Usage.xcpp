// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <tpp>
//
// Usage:
//
//   #import tests.usage.posix_PF.Usage
//   static_assert(tests::usage::posix_PF::Usage<>);
//
#import sys.posix.PF
#import tests.model.Namespace_Object
#import tests.usage.countof
namespace tests::usage::posix_PF {
  using sys::posix::PF;
  namespace [[detail]] packaging {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    template<typename PF> concept Instance = requires(PF) {
      typename PF::Protocol;
      requires model::Namespace_Object<PF>;
      requires (int)PF::UNSPECIFIED == PF_UNSPEC;
      requires (int)PF::UNIX == PF_UNIX;
      requires (int)PF::LOCAL == PF_LOCAL;
      requires (int)PF::INET4 == PF_INET;
      requires (int)PF::INET6 == PF_INET6;
      requires (int)PF::IPX == PF_IPX;
      requires (int)PF::NETLINK == PF_NETLINK;
      requires (int)PF::X25 == PF_X25;
      requires (int)PF::AX25 == PF_AX25;
      requires (int)PF::ATMPVC == PF_ATMPVC;
      requires (int)PF::APPLETALK == PF_APPLETALK;
      requires (int)PF::PACKET == PF_PACKET;
      requires (int)PF::ALGORITHM == PF_ALG;
      requires (int)PF::UNSPEC == PF_UNSPEC;
      requires (int)PF::INET == PF_INET;
      requires (int)PF::ALG == PF_ALG;
    };
#pragma GCC diagnostic pop
    template<typename... _> concept Usage = requires(_...) {
      requires 0 == countof<_...>;
      requires Instance<PF>;
    };
  }
  using packaging::Usage;
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <tpp>
//
// Usage:
//
//   #import tests.usage.posix_wait.Usage
//   static_assert(tests::usage::posix_wait::Usage<>);
//
#import nonstd.same_as
#import nonstd.convertible_to
#import id_t
#import pid_t
#import sys.id.Process
#import sys.id.process.Group
#import sys.id.process.Either
#import sys.id.Wait  // id::wait::Typed, id::wait::typed_t, id::wait::Wait
#import sys.posix.wait
#import sys.call.result.wait.Value
#import sys.id.required.process.Process
#import sys.id.required.process.Group
#import sys.id.required.process.Either
#import sys.id.required.wait.Typed
#import tests.usage.countof
#import std.is_convertible
namespace tests::usage::posix_wait {
  using sys::posix::wait;
  using sys::posix::native::wait; // WATCHOUT - this makes some calls to wait() ambiguous ... deal with it
  namespace [[detail]] packaging {
    using namespace nonstd;
    using namespace std;
    using ::pid_t;
    using ::id_t;
    using sys::id::wait::typed_t; // reminder that this isn't a standard POSIX type.  It is lower-case for wait::Typed
    namespace io {
      using Type = sys::p::Type;
      using Typed = sys::id::wait::Typed;
      using typed_t = sys::id::wait::typed_t;
      using Untyped = sys::id::wait::Untyped;
      using Options = sys::w::Options;
      using Status = sys::wait::Status;
      using Siginfo = sys::sig::Info;
      using Usages = sys::r::Usages;
    }
    namespace ww = sys::wait;
    namespace result {
      using namespace sys::call::result::wait;
    }
    namespace required {
      using sys::id::required::process::Process;
      using sys::id::required::process::Group;
      using sys::id::required::process::Either;
      using sys::id::required::wait::Typed;
      using sys::id::required::wait::Untyped;
      // This is overbroad going to cover New School and old_School (Title_Case and lower_case)
      // It is a reminder that the 'matched' argument can be a wide variety of types, whereas Returned is always just that.
      template<typename RETURNED> concept Returned = Process<RETURNED>;
      template<typename MATCHED> concept Matched = Process<MATCHED> || Group<MATCHED> || Either<MATCHED> || Typed<MATCHED>;
    }
    namespace [[detail]] {
      namespace [[detail]] disambiguate_function {
        using sys::posix::wait;
        template<typename RETURNED> concept Wait2 = requires(RETURNED, io::Status &sutats) {
          requires same_as<RETURNED, sys::id::Process>;
          requires required::Returned<RETURNED>;
          // WATCHOUT - this is copypasta among the two disambiguation namespaces
          // Actually this does not use the wait2::variant interface, it uses the wait3::variant interface (so do not assert the returned type)
          { wait()() };
          { wait()(sutats) };
        };
        template<typename RETURNED> concept Wait3 = requires(RETURNED, io::Options options, io::Status &sutats, io::Usages &segasu) {
          requires same_as<RETURNED, sys::id::Process>;
          requires required::Returned<RETURNED>;
          { wait(options)() } -> convertible_to<convertible_to<result::Value<RETURNED, io::Status, io::Usages>>>;
          { wait(options)(sutats) } -> convertible_to<convertible_to<result::Value<RETURNED, io::Usages>>>;
          { wait(options)(segasu) } -> convertible_to<convertible_to<result::Value<RETURNED, io::Status>>>;
          { wait(options)(sutats, segasu) } -> convertible_to<convertible_to<result::Value<RETURNED>>>;
        };
        template<typename RETURNED> concept Any = requires(RETURNED) {
          requires required::Returned<RETURNED>;
          requires Wait3<RETURNED>;
          requires Wait2<RETURNED>;
        };
      }
      namespace [[detail]] disambiguate_native {
        using sys::posix::native::wait;
        template<typename RETURNED> concept Wait2 = requires(RETURNED, io::Status &sutats) {
          requires same_as<RETURNED, pid_t>;
          requires required::Returned<RETURNED>;
          { wait()() };
          { wait()(sutats) };
        };
        template<typename RETURNED> concept Wait3 = requires(RETURNED, io::Options options, io::Status &sutats, io::Usages &segasu) {
          requires same_as<RETURNED, pid_t>;
          requires required::Returned<RETURNED>;
    { wait(options)() } -> convertible_to<convertible_to<result::Value<RETURNED, io::Status, io::Usages>>>;
    { wait(options)(sutats) } -> convertible_to<convertible_to<result::Value<RETURNED, io::Usages>>>;
    { wait(options)(segasu) } -> convertible_to<convertible_to<result::Value<RETURNED, io::Status>>>;
    { wait(options)(sutats, segasu) } -> convertible_to<convertible_to<result::Value<RETURNED>>>;
        };
        template<typename RETURNED> concept Any = requires(RETURNED) {
          requires required::Returned<RETURNED>;
          requires Wait3<RETURNED>;
          requires Wait2<RETURNED>;
        };
      }
      template<typename RETURNED, typename MATCHED> concept Waitpid = requires(RETURNED, MATCHED matched, io::Options options, io::Status &sutats) {
        requires required::Returned<RETURNED>;
        // These do not call the waitpid::variant, rather the match the wait4::variant (so do not assert on the return type)
        { wait(matched)() };
        { wait(matched, options)() };
        { wait(matched, options)(sutats) };
      };
#if 0 // [[REMOVETHIS]] test code
      namespace x1 {
        auto w = wait(sys::id::Process{});
        result::Value<sys::id::Process, sys::wait::Status, sys::r::Usages> v = w();
        static_assert(convertible_to<decltype(v), result::Value<sys::id::Process, sys::wait::Status, sys::r::Usages>>);
      }
      namespace x2 {
        auto w = wait(pid_t{});
        result::Value<pid_t, sys::wait::Status, sys::r::Usages> v = w();
      }
      namespace g2 {
        auto w = wait(sys::id::process::Group{});
        result::Value<sys::id::Process, sys::wait::Status, sys::r::Usages> v = w();
      }
      namespace e2 {
        auto w = wait(sys::id::process::Either{});
        result::Value<sys::id::Process, sys::wait::Status, sys::r::Usages> v = w();
      }
      auto p = result::Value<pid_t, io::Status, io::Usages>{};
      auto P = result::Value<sys::id::Process, io::Status, io::Usages>{};
      template<typename FROM, typename TO> concept Conv = std::is_convertible<FROM, TO>::value;
#endif
      template<typename RETURNED, typename MATCHED> concept Wait4 = requires(RETURNED, MATCHED) {
        requires required::Returned<RETURNED>;
        requires required::Matched<MATCHED>;
        requires requires(RETURNED, MATCHED matched, io::Options options, io::Status &sutats, io::Usages &segasu) {
#if 0
          { wait(matched)() };
          { wait(matched, options)() };
          { wait(matched, options)(sutats) };
          { wait(matched, options)(segasu) };
          { wait(matched, options)(sutats, segasu) };
#else
          { wait(matched)() } -> convertible_to<result::Value<RETURNED, io::Status, io::Usages>>;
          { wait(matched, options)() } -> convertible_to<result::Value<RETURNED, io::Status, io::Usages>>;
          { wait(matched, options)(sutats) } -> convertible_to<result::Value<RETURNED, io::Usages>>;
          { wait(matched, options)(segasu) } -> convertible_to<result::Value<RETURNED, io::Status>>;
          { wait(matched, options)(sutats, segasu) } -> convertible_to<result::Value<RETURNED>>;
#endif
        };
      };
      namespace [[detail]] waitid_variant {
        template<typename RETURNED, typename UNTYPED> concept Untyped = requires(RETURNED, io::Type type, UNTYPED untyped, io::Options options, io::Siginfo &ofnigis) {
          requires required::Returned<RETURNED>;
          requires required::Untyped<UNTYPED>;
          { wait(type, untyped)() } -> convertible_to<convertible_to<result::Value<RETURNED,io::Siginfo>>>;
          { wait(type, untyped, options)() } -> convertible_to<convertible_to<result::Value<RETURNED,io::Siginfo>>>;
          { wait(type, untyped, options)(ofnigis) } -> convertible_to<convertible_to<result::Value<RETURNED>>>;
        };
        template<typename RETURNED, typename TYPED> concept Typed = requires(RETURNED, TYPED typed, io::Options options, io::Siginfo &ofnigis) {
          requires required::Returned<RETURNED>;
          requires required::Typed<TYPED>;
          { wait(typed)() } -> convertible_to<convertible_to<result::Value<RETURNED,io::Siginfo>>>;
          { wait(typed, options)() } -> convertible_to<convertible_to<result::Value<RETURNED,io::Siginfo>>>;
          { wait(typed, options)(ofnigis) } -> convertible_to<convertible_to<result::Value<RETURNED>>>;
        };
        template<typename RETURNED, typename TYPED, typename UNTYPED> concept Waitid = requires(RETURNED, TYPED, UNTYPED) {
          requires required::Returned<RETURNED>;
          requires Untyped<RETURNED, UNTYPED>;
          requires Typed<RETURNED, TYPED>;
        };
      }
      using waitid_variant::Waitid;
    }
    template<typename RETURNED, typename MATCHED> concept Matched = requires(RETURNED, MATCHED) {
      requires required::Returned<RETURNED>;
      requires required::Matched<MATCHED>
      requires Waitpid<RETURNED, MATCHED>;
      requires Wait4<RETURNED, MATCHED>;
    };
    template<typename... _> concept Usage = requires(_...) {
      requires 0 == countof<_...>;
      requires disambiguate_native::Any<pid_t>;
      requires disambiguate_function::Any<sys::id::Process>;
      requires Waitid<pid_t, typed_t, id_t>;
      requires Waitid<sys::id::Process, sys::id::wait::Typed, sys::id::wait::Untyped>;
      requires Matched<pid_t, pid_t>;
      requires Matched<sys::id::Process, sys::id::Process>;
      requires Matched<sys::id::Process, sys::id::process::Group>;
      requires Matched<sys::id::Process, sys::id::process::Either>;
    };
  }
  using packaging::Usage;
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <tpp>
//
// Usage:
//
//   #import tests.usage.posix.f.Usage
//   using namespace tests::usage::posix::f;
//   static_assert(Usage<sys::posix::F>);
//
#import sys.posix.F
#import tests.model.Namespace_Object
#import tests.usage.countof
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
namespace tests::usage::posix_F {
  using sys::posix::F;
  namespace [[detail]] packaging {
    template<typename F> concept bool Flock = requires(F) {
      requires (int)F::LOCK == F_LOCK;
      requires (int)F::TEST == F_TEST;
      requires (int)F::TEST_AND_LOCK == F_TLOCK;
      requires (int)F::UNLOCK == F_ULOCK;
    };
    template<typename F> concept bool Old_School = requires(F) {
      requires (int)F::DUPFD == F_DUPFD;
      requires (int)F::DUPFD_CLOEXEC == F_DUPFD_CLOEXEC;
      requires (int)F::GETFD == F_GETFD;
      requires (int)F::SETFD == F_SETFD;
      requires (int)F::GETFL == F_GETFL;
      requires (int)F::SETFL == F_SETFL;
      requires (int)F::GETLEASE == F_GETLEASE;
      requires (int)F::SETLEASE == F_SETLEASE;
      requires (int)F::NOTIFY == F_NOTIFY;
      requires (int)F::GETLK == F_GETLK;
      requires (int)F::SETLK == F_SETLK;
      requires (int)F::SETLKW == F_SETLKW;
      requires (int)F::GETLK64 == F_GETLK64;
      requires (int)F::SETLK64 == F_SETLK64;
      requires (int)F::SETLKW64 == F_SETLKW64;
      requires (int)F::ADD_SEALS == F_ADD_SEALS;
      requires (int)F::GET_SEALS == F_GET_SEALS;
      requires (int)F::GET_RWH_FILE == F_GET_FILE_RW_HINT;
      requires (int)F::SET_RWH_FILE == F_SET_FILE_RW_HINT;
#ifdef F_GETOWNER_UIDS
      requires (int)F::GETOWNER_UIDS == F_GETOWNER_UIDS;
#endif
      requires (int)F::OFD_GETLK == F_OFD_GETLK;
      requires (int)F::OFD_SETLK == F_OFD_SETLK;
      requires (int)F::OFD_SETLKW == F_OFD_SETLKW;
#ifdef F_OFD_GETLK64
      requires (int)F::OFD_GETLK64 == F_OFD_GETLK64;
      requires (int)F::OFD_SETLK64 == F_OFD_SETLK64;
      requires (int)F::OFD_SETLKW64 == F_OFD_SETLKW64;
#endif
      requires (int)F::GETOWN == F_GETOWN;
      requires (int)F::SETOWN == F_SETOWN;
      requires (int)F::GETOWN_EX == F_GETOWN_EX;
      requires (int)F::SETOWN_EX == F_SETOWN_EX;
      requires (int)F::SETPIPE_SZ == F_SETPIPE_SZ;
      requires (int)F::GETPIPE_SZ == F_GETPIPE_SZ;
      requires (int)F::GETSIG == F_GETSIG;
      requires (int)F::SETSIG == F_SETSIG;
      requires (int)F::GET_RW_HINT == F_GET_RW_HINT;
      requires (int)F::SET_RW_HINT == F_SET_RW_HINT;
    };
    template<typename F> concept bool New_School = requires(F) {
      // Buy a Vowel!
      requires (int)F::GETLOCK == F_GETLK;
      requires (int)F::SETLOCK == F_SETLK;
      requires (int)F::SETLOCK_WAITING == F_SETLKW;
      requires (int)F::GETLOCK64 == F_GETLK64;
      requires (int)F::SETLOCK64 == F_SETLK64;
      requires (int)F::SETLOCK64_WAITING == F_SETLKW64;
      requires (int)F::GETLOCK_PROCESS == F_GETLK;
      requires (int)F::SETLOCK_PROCESS == F_SETLK;
      requires (int)F::SETLOCK_PROCESS_WAITING == F_SETLKW;
      requires (int)F::GETLOCK_FILE == F_OFD_GETLK;
      requires (int)F::SETLOCK_FILE == F_OFD_SETLK;
      requires (int)F::SETLOCK_FILE_WAITING == F_OFD_SETLKW;
      requires (int)F::GETLOCK64_PROCESS == F_GETLK64;
      requires (int)F::SETLOCK64_PROCESS == F_SETLK64;
      requires (int)F::SETLOCK64_PROCESS_WAITING == F_SETLKW64;
#ifdef F_OFD_GETLK64
      requires (int)F::GETLOCK64_FILE == F_OFD_GETLK64;
      requires (int)F::SETLOCK64_FILE == F_OFD_SETLK64;
      requires (int)F::SETLOCK64_FILE_WAITING == F_OFD_SETLKW64;
#endif
      requires (int)F::GETPIPE_SIZE == F_GETPIPE_SZ;
      requires (int)F::SETPIPE_SIZE == F_SETPIPE_SZ;
      requires (int)F::GETOWNER == F_GETOWN;
      requires (int)F::SETOWNER == F_SETOWN;
      requires (int)F::GETOWNER_EX == F_GETOWN_EX;
      requires (int)F::SETOWNER_EX == F_SETOWN_EX;
      requires (int)F::GETSIGNAL == F_GETSIG;
      requires (int)F::SETSIGNAL == F_SETSIG;
#if 0
      requires (int)F::GET_RWH == F_GET_RW_HINT;
      requires (int)F::SET_RWH == F_SET_RW_HINT; 
#endif
      requires (int)F::GET_RWH_PROCESS == F_GET_RW_HINT;
      requires (int)F::SET_RWH_PROCESS == F_SET_RW_HINT;
      requires (int)F::GET_RWH_FILE == F_GET_FILE_RW_HINT;
      requires (int)F::SET_RWH_FILE == F_SET_FILE_RW_HINT;
    };
    template<typename... _> concept bool Usage = requires(_...) {
      requires 0 == countof<_...>;
      requires model::Namespace_Object<F>;
      requires Old_School<F>;
      requires Flock<F>;
      requires New_School<F>;
    };
  }
  using packaging::Usage;
}
#pragma GCC diagnostic pop
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <tpp>
//
// Usage:
//
//   #import tests.usage.posix_OK.Usage
//   static_assert(tests::usage::posix_OK::Usage<>);
//
#import nonstd.convertible_to
#import sys.posix.OK
#import tests.model.Namespace_Object
#import tests.model.Namespace_Object_Flags
#import tests.usage.countof
namespace tests::usage::posix_OK {
  using sys::posix::OK;
  namespace [[detail]] packaging {
    using namespace nonstd;
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    template<typename OK> concept bool Instance = requires(OK) {
      typename OK::Access;
      typename OK::Axis;
      requires model::Namespace_Object<OK>;
      requires model::Namespace_Object_Flags<OK, typename OK::Axis, typename OK::Access>;
      requires (int)OK::F == F_OK;
      requires (int)OK::R == R_OK;
      requires (int)OK::W == W_OK;
      requires (int)OK::X == X_OK;
      requires (int)OK::RW == (R_OK | W_OK);
      requires (int)OK::RX == (R_OK | X_OK);
      requires (int)OK::WX == (W_OK | X_OK);
      requires (int)OK::RWX == (R_OK | W_OK | X_OK);
      requires (int)OK::EXISTS == F_OK;
      requires (int)OK::READABLE == R_OK;
      requires (int)OK::WRITABLE == W_OK;
      requires (int)OK::EXECUTABLE == X_OK;
      requires (int)OK::READ == R_OK;
      requires (int)OK::WRITE == W_OK;
      requires (int)OK::EXECUTE == X_OK;
      requires requires(typename OK::Access access, typename OK::Axis axis) {
#if 202003L < __cplusplus
        { OK::template as<typename OK::Access>(access) } -> convertible_to<typename OK::Access>;
        { OK::template as<typename OK::Access>(axis) } -> convertible_to<typename OK::Access>;
        { OK::template as<typename OK::Axis>(access) } -> convertible_to<typename OK::Axis>;
        { OK::template as<typename OK::Axis>(axis) } -> convertible_to<typename OK::Axis>;
#else
        // More of a GCC 10 but not GCC 9 thing though isn't it?
        { OK::template as<typename OK::Access>(access) } -> typename OK::Access;
        { OK::template as<typename OK::Access>(axis) } -> typename OK::Access;
        { OK::template as<typename OK::Axis>(access) } -> typename OK::Axis;
        { OK::template as<typename OK::Axis>(axis) } -> typename OK::Axis;
#endif
      };
    };
#pragma GCC diagnostic pop
    template<typename... _> concept bool Usage = requires(_...) {
      requires 0 == countof<_...>;
      requires Instance<OK>;
    };
  }
  using packaging::Usage;
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <tpp>
//
// Usage:
//
//   #import tests.usage.posix_SOCK.Usage
//   static_assert(tests::usage::posix_SOCK::Usage<sys::posix::SOCK>);
//
#import nonstd.convertible_to
#import sys.posix.SOCK
#import tests.model.Namespace_Object
#import tests.usage.countof
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
namespace tests::usage::posix_SOCK {
  using sys::posix::SOCK;
  namespace [[detail]] packaging {
    using nonstd::convertible_to;
    template<typename SOCK> concept New_School = requires(SOCK) {
      requires (int)SOCK::UNSPECIFIED == 0;
      requires (int)SOCK::STREAM == SOCK_STREAM;
      requires (int)SOCK::DATAGRAM == SOCK_DGRAM;
      requires (int)SOCK::SEQUENCED == SOCK_SEQPACKET;
      requires (int)SOCK::RELIABLE == SOCK_RDM;
    };
    template<typename SOCK> concept Old_School = requires(SOCK) {
      requires (int)SOCK::UNSPEC == 0;
      requires (int)SOCK::DGRAM == SOCK_DGRAM;
      requires (int)SOCK::DCCP == SOCK_DCCP;
      requires (int)SOCK::RDM == SOCK_RDM;
      requires (int)SOCK::SEQPACKET == SOCK_SEQPACKET;
      requires (int)SOCK::RAW == SOCK_RAW;
      requires (int)SOCK::PACKET == SOCK_PACKET;
    };
    template<typename SOCK> concept Options = requires(SOCK) {
      requires (int)SOCK::NONE == 0;
      requires (int)SOCK::CLOEXEC == SOCK_CLOEXEC;
      requires (int)SOCK::CLOSE_ON_EXEC == SOCK_CLOEXEC;
      requires (int)SOCK::NONBLOCK == SOCK_NONBLOCK;
    };
    template<typename SOCK> concept Instance = requires(SOCK) {
      typename SOCK::Type;
      typename SOCK::Option;
      typename SOCK::Options;
      typename SOCK::Specification;
      requires New_School<SOCK>;
      requires Old_School<SOCK>;
      requires Options<SOCK>;
      requires requires(SOCK, typename SOCK::Option ion, typename SOCK::Options ons) {
        { SOCK::template as<typename SOCK::Option>(ion) } -> convertible_to<typename SOCK::Option>;
        { SOCK::template as<typename SOCK::Options>(ion) } -> convertible_to<typename SOCK::Options>;
        { SOCK::template as<typename SOCK::Option>(ons) } -> convertible_to<typename SOCK::Option>;
        { SOCK::template as<typename SOCK::Options>(ons) } -> convertible_to<typename SOCK::Options>;
      };
      requires requires(SOCK, typename SOCK::Specification ion) {
        { SOCK::template as<typename SOCK::Option>(ion) } -> convertible_to<typename SOCK::Option>;
        { SOCK::template as<typename SOCK::Options>(ion) } -> convertible_to<typename SOCK::Options>;
        { SOCK::template as<typename SOCK::Specification>(ion) } -> convertible_to<typename SOCK::Specification>;
      };
      requires requires(SOCK, typename SOCK::Option single, typename SOCK::Options plural, typename SOCK::Specification bundle) {
        { SOCK::template as<typename SOCK::Specification>(single) } -> convertible_to<typename SOCK::Specification>;
        { SOCK::template as<typename SOCK::Specification>(plural) } -> convertible_to<typename SOCK::Specification>;
        { SOCK::template as<typename SOCK::Specification>(bundle) } -> convertible_to<typename SOCK::Specification>;
      };
    };
    template<typename... _> concept Usage = requires(_...) {
      requires 0 == countof<_...>;
      requires Instance<SOCK>;
    };
  }
  using packaging::Usage;
}
#pragma GCC diagnostic pop
#endiv

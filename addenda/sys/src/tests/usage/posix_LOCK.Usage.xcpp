// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <tpp>
//
// Usage:
//
//   #import tests.usage.posix_LOCK.Usage
//   static_assert(tests::usage::posix_LOCK::Usage<>);
//
#import sys.posix.LOCK
#import tests.model.Namespace_Object
#import tests.usage.posix_FLOCK.Usage
#import tests.usage.posix_LEASE.Usage
#import tests.usage.countof
namespace tests::usage::posix_LOCK {
  using sys::posix::LOCK;
  namespace [[detail]] packaging {
    using nonstd::convertible_to;
    namespace [[detail]] aspect {
      template<typename LOCK> concept Lease = requires(LOCK) {
        typename LOCK::Lease;
        typename LOCK::template Operation<LOCK::LEASE>;
        requires (int)LOCK::READ == F_RDLCK;
        requires (int)LOCK::WRITE == F_WRLCK;
        requires (int)LOCK::END == F_UNLCK;
        requires (int)LOCK::ENDLEASE == F_UNLCK;
        requires (int)LOCK::RD == F_RDLCK;
        requires (int)LOCK::WR == F_WRLCK;
        requires (int)LOCK::UN == F_UNLCK;
        requires (int)LOCK::template UNLOCK<LOCK::LOCK> == F_UNLCK;
      };
      template<typename LOCK> concept Lock = requires(LOCK) {
        typename LOCK::Lock;
        typename LOCK::template Operation<LOCK::LOCK>;
        typename LOCK::template Options<LOCK::LOCK>;
        requires (int)LOCK::READ == F_RDLCK;
        requires (int)LOCK::WRITE == F_WRLCK;
        requires (int)LOCK::END == F_UNLCK;
        requires (int)LOCK::ENDLOCK == F_UNLCK;
        requires (int)LOCK::RD == F_RDLCK;
        requires (int)LOCK::WR == F_WRLCK;
        requires (int)LOCK::UN == F_UNLCK;
        requires (int)LOCK::template UNLOCK<LOCK::LOCK> == F_UNLCK;
      };
      template<typename LOCK> concept Flock = requires(LOCK) {
        typename LOCK::Flock;
        typename LOCK::template Operation<LOCK::FLOCK>;
        typename LOCK::template Options<LOCK::FLOCK>;
        requires (int)LOCK::UNFLOCK == LOCK_UN;
        requires (int)LOCK::template UNLOCK<LOCK::FLOCK> == LOCK_UN;
      };
    }
    template<typename LOCK> concept Instance = requires(LOCK) {
      requires model::Namespace_Object<LOCK>;
#if 0
      requires aspect::Lock<LOCK>;
      requires aspect::Lease<LOCK>;
      requires aspect::Flock<LOCK>;
#endif
    };
    template<typename... _> concept Usage = requires(_...) {
      requires 0 == countof<_...>;
      requires Instance<LOCK>;
    };
  }
  using packaging::Usage;
}
#endiv

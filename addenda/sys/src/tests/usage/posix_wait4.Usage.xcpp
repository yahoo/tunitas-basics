// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <tpp>
//
// Usage:
//
//   #import tests.usage.posix_wait4.Usage
//   static_assert(tests::usage::posix_wait4::Usage<>);
//
#import nonstd.convertible_to
#import pid_t
#import sys.call.result.wait.Value
#import sys.id.Process
#import sys.id.required.Process
#import sys.posix.wait4
#import sys.r.Usages
#import sys.w.Options
#import sys.wait.Status
#import tests.usage.countof
namespace tests::usage::posix_wait4 {
  using sys::posix::wait4;
  using sys::posix::native::wait4;
  namespace [[detail]] packaging {
    using namespace nonstd;
    using namespace std;
    namespace io {
      using Options = sys::w::Options;
      using Status = sys::wait::Status;
      using Usages = sys::r::Usages;
    }
    namespace required = sys::id::required;
    namespace result { using namespace sys::call::result::wait; }
    namespace [[detail]] {
      template<typename RETURNED, typename MATCHED> concept bool Instance = requires(RETURNED, MATCHED match, io::Options options, io::Status &sutats, io::Usages &segasu) {
        requires required::Process<RETURNED>;
        requires required::process::Process<MATCHED> || required::process::Group<MATCHED> || required::process::Either<MATCHED>;
        { wait4(match) } -> convertible_to<result::Value<RETURNED, io::Status, io::Usages>>;
        { wait4(match, options) } -> convertible_to<result::Value<RETURNED, io::Status, io::Usages>>;
        { wait4(match, options, segasu) } -> convertible_to<result::Value<RETURNED, io::Status>>;
        { wait4(match, options, sutats) } -> convertible_to<result::Value<RETURNED, io::Usages>>;
        { wait4(match, options, sutats, segasu) } -> convertible_to<result::Value<RETURNED>>;
        { wait4(match, sutats, options, segasu) } -> convertible_to<result::Value<RETURNED>>;
        //
        { wait4(match, options, {}, segasu) } -> convertible_to<result::Value<RETURNED>>;
        { wait4(match, options, sutats, {}) } -> convertible_to<result::Value<RETURNED>>;
        { wait4(match, options, {}, {}) } -> convertible_to<result::Value<RETURNED>>;
        //
        { wait4(match, {}, options, segasu) } -> convertible_to<result::Value<RETURNED>>;
        { wait4(match, sutats, options, {}) } -> convertible_to<result::Value<RETURNED>>;
        { wait4(match, {}, options, {}) } -> convertible_to<result::Value<RETURNED>>;
      };
    }
    template<typename... _> concept bool Usage = requires(_...) {
      requires 0 == countof<_...>;
      requires Instance<pid_t, pid_t>;
      requires Instance<sys::id::Process, sys::id::process::Process>;
      requires Instance<sys::id::Process, sys::id::process::Group>;
      requires Instance<sys::id::Process, sys::id::process::Either>;
    };
  }
  using packaging::Usage;
}
#endiv

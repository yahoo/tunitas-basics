// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <tpp>
//
// Usage:
//
//   #import tests.usage.posix_MSG.Usage
//   static_assert(tests::usage::posix_MSG::Usage<>);
//
#import nonstd.convertible_to
#import sys.posix.MSG
#import tests.model.Namespace_Object
#import tests.model.Namespace_Object_Flags
#import tests.usage.countof
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
namespace tests::usage::posix_MSG {
  using sys::posix::MSG;
  namespace [[detail]] packaging {
    using nonstd::convertible_to;
    template<typename MSG> concept Instance = requires(MSG) {
      typename MSG::Flag;
      typename MSG::Flags;
      requires model::Namespace_Object<MSG>;
      requires model::Namespace_Object_Flags<MSG, typename MSG::Flag, typename MSG::Flags>;
      requires (int)MSG::NONE == 0;
      requires (int)MSG::BATCH == MSG_BATCH;
#if 0
      requires (int)MSG::CMSG_CLOEXEC == MSG_CMSG_CLOEXEC;
#endif
      requires (int)MSG::CONFIRM == MSG_CONFIRM;
      requires (int)MSG::CTRUNCATE == MSG_CTRUNC;
      requires (int)MSG::DONTROUTE == MSG_DONTROUTE;
      requires (int)MSG::DONTWAIT == MSG_DONTWAIT;
      requires (int)MSG::EOR == MSG_EOR;
      requires (int)MSG::ERRQUEUE == MSG_ERRQUEUE;
      requires (int)MSG::FASTOPEN == MSG_FASTOPEN;
      requires (int)MSG::FIN == MSG_FIN;
      requires (int)MSG::MORE == MSG_MORE;
      requires (int)MSG::NOSIGNAL == MSG_NOSIGNAL;
      requires (int)MSG::OOB == MSG_OOB;
      requires (int)MSG::PEEK == MSG_PEEK;
      requires (int)MSG::PROXY == MSG_PROXY;
      requires (int)MSG::RST == MSG_RST;
      requires (int)MSG::SYN == MSG_SYN;
      requires (int)MSG::TRUNCATE == MSG_TRUNC;
#ifdef __USE_GNU
      requires (int)MSG::TRYHARD == MSG_TRYHARD; // ibidem.
#endif
      requires (int)MSG::WAITALL == MSG_WAITALL;
      requires (int)MSG::WAITFORONE == MSG_WAITFORONE;
      requires (int)MSG::ZEROCOPY == MSG_ZEROCOPY;
      requires (int)MSG::CTRUNC == MSG_CTRUNC;
      requires (int)MSG::TRUNC == MSG_TRUNC;
      requires requires(MSG, typename MSG::Flag lag, typename MSG::Flags ags) {
#if 202003L < __cplusplus
        { MSG::template as<typename MSG::Flag>(lag) } -> convertible_to<convertible_to<typename MSG::Flag>>;
        { MSG::template as<typename MSG::Flags>(lag) } -> convertible_to<convertible_to<typename MSG::Flags>>;
        { MSG::template as<typename MSG::Flag>(ags) } -> convertible_to<convertible_to<typename MSG::Flag>>;
        { MSG::template as<typename MSG::Flags>(ags) } -> convertible_to<convertible_to<typename MSG::Flags>>;
#else
        // More of a GCC 10 but not GCC 9 thing though isn't it?
        { MSG::template as<typename MSG::Flag>(lag) } -> convertible_to<typename MSG::Flag>;
        { MSG::template as<typename MSG::Flags>(lag) } -> convertible_to<typename MSG::Flags>;
        { MSG::template as<typename MSG::Flag>(ags) } -> convertible_to<typename MSG::Flag>;
        { MSG::template as<typename MSG::Flags>(ags) } -> convertible_to<typename MSG::Flags>;
#endif
      };
    };
    template<typename... _> concept Usage = requires(_...) {
      requires 0 == countof<_...>;
      requires Instance<MSG>;
    };
  }
  using packaging::Usage;
}
#pragma GCC diagnostic pop
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::un { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
struct tests::unit::un::Fixture : public cppunit::test::Fixture {
  auto test_Sockaddr() -> void;
  auto test_family_rhs() -> void;
  auto test_family_lhs_lvalue() -> void;
  auto test_family_lhs_rvalue() -> void;
  auto test_path_basic() -> void;
  auto test_path_fail() -> void;
  auto test_path_alternatives() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import sys.un.Sockaddr
auto tests::unit::un::Fixture::test_Sockaddr() -> void {
  using Subject = ::sys::un::Sockaddr;
  auto subject = Subject{};
  CPPUNIT_ASSERT(sizeof (subject));
}
#import sys.un.family
#import sys.posix.AF
auto tests::unit::un::Fixture::test_family_lhs_lvalue() -> void {
  using Subject = ::sys::un::Sockaddr;
  using AF = ::sys::posix::AF;
  auto subject = Subject{};
  family(subject) = AF::UNIX; // <---------------------- test this
  CPPUNIT_ASSERT(AF::UNIX == family(subject));
}
auto tests::unit::un::Fixture::test_family_lhs_rvalue() -> void {
  using Subject = ::sys::un::Sockaddr;
  using AF = ::sys::posix::AF;
  auto subject = Subject{};
  family(subject) = AF::UNIX;
  auto const expected = AF::UNIX;
  auto const actual = family(subject);
  auto is_the_same = expected == actual; // <---------------------- test this, with the implicit cast to af::Type
  CPPUNIT_ASSERT(is_the_same);
}
auto tests::unit::un::Fixture::test_family_rhs() -> void {
  using Subject = ::sys::un::Sockaddr;
  using AF = ::sys::posix::AF;
  auto subject = Subject{};
  subject.sun_family = AF_UNIX; // the #define
  auto rhs = family(subject); // <---------------------- test this
  CPPUNIT_ASSERT(AF::UNIX == rhs);
}
#import sys.un.path
#import std.exception
#import std.filesystem.path
#warning FIXTHIS ... the nonstd dope traits are not yet available
#import c.const_stringn
// [[FIXTHIS]] #import nonstd.basic_dope_traits.basic_stringn
#import c.const_stringz
// [[FIXTHIS]] #import nonstd.basic_dope_traits.basic_stringz
#import nonstd.basic_string
// [[FIXTHIS]] #import nonstd.basic_dope_traits.basic_string
#import nonstd.basic_string_view
// [[FIXTHIS]] #import nonstd.basic_dope_traits.basic_string_view
#import std.filesystem.path
auto tests::unit::un::Fixture::test_path_basic() -> void {
  using Subject = ::sys::un::Sockaddr;
  auto subject = Subject{};
  path(subject) = "/dev/null";
  path(subject) = "/dev/null"s;
  path(subject) = "/dev/null"sv;
  path(subject) = c::const_stringz{"/dev/null"};
  char const stringn_specimen[] = "/dev/null";
  path(subject) = c::const_stringn{&stringn_specimen[0], strlen(stringn_specimen)};
  path(subject) = std::filesystem::path{"/dev/null"};
  CPPUNIT_ASSERT("/dev/null"s == (std::string)path(subject));
}
auto tests::unit::un::Fixture::test_path_fail() -> void try {
  std::string toolong = "/"s + std::string{100, 'a'} + "/"s + std::string{100, 'b'} + "/" + std::string{100, 'c'};
  using Subject = sys::un::Sockaddr;
  auto subject = Subject{};
  path(subject) = toolong;
  CPPUNIT_ASSERT(false);
} catch (std::exception const &) {
  CPPUNIT_ASSERT(true);
}
auto tests::unit::un::Fixture::test_path_alternatives() -> void {
  using Subject = ::sys::un::Sockaddr;
  auto subject = Subject{};
  // just show that these compile ... that they are not ambiguous
  path(subject) = "literal";
  path(subject) = "string"s;
  path(subject) = "string_view"sv;
  path(subject) = std::filesystem::path{"path"};
  auto const expected = std::filesystem::path{"path"};
  auto const actual = (std::filesystem::path)path(subject);
  CPPUNIT_ASSERT(expected == actual);
}
#import rigging.suite.io
auto tests::unit::un::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series{"un"};
  series << call("Sockaddr", &Fixture::test_Sockaddr)
         << []() {
              Stream fam{"family"};
              fam << []() {
                       Stream lhs{"lhs"};
                       lhs << call("lvalue", &Fixture::test_family_lhs_lvalue)
                           << call("rvalue", &Fixture::test_family_lhs_rvalue)
                         ;
                       return lhs;
                     }()
                  << call("rhs", &Fixture::test_family_rhs)
                ;
              return fam;
            }()
         << []() {
              Stream path{"path"};
              path << call("basic", &Fixture::test_path_basic)
                   << call("fail", &Fixture::test_path_fail)
                   << call("alternatives", &Fixture::test_path_alternatives)
                ;
              ;
              return path;
            }()
    ;
  return finalize(series);
}
#endiv

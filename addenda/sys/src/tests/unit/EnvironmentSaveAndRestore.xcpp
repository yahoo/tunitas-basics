// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    class EnvironmentSaveAndRestore;
  }
}
#endiv
#divert <hpp>
class tests::unit::EnvironmentSaveAndRestore {
public:
  EnvironmentSaveAndRestore();
  ~EnvironmentSaveAndRestore();
  EnvironmentSaveAndRestore(EnvironmentSaveAndRestore const &) = delete;
  auto operator=(EnvironmentSaveAndRestore const &) -> EnvironmentSaveAndRestore = delete;
protected:
  char **saved;
  static auto copy_environment() -> char **;
public:
  struct PartialConstructionGuardian;
};
#entail tests.unit.EnvironmentSaveAndRestore.PartialConstructionGuardian
#endiv
#divert <cpp>
tests::unit::EnvironmentSaveAndRestore::EnvironmentSaveAndRestore()
  : saved(copy_environment()) {
  ;
}

// This variable must be declared in the user program,
// but is declared in the header file <unistd.h> in case
// the header files came from libc4 or libc5,
// and in case they came from glibc and _GNU_SOURCE was defined.)
#include <unistd.h>
extern char **environ;

tests::unit::EnvironmentSaveAndRestore::~EnvironmentSaveAndRestore() {
  ::environ = saved;
}

#import c.const_environv
#import c.const_stringz
#import std.copy
#import std.unique_ptr
auto tests::unit::EnvironmentSaveAndRestore::copy_environment() -> char ** {
  c::const_environv cev(::environ);
  std::size_t const cev_size = cev.size(); // recall: it costs O(N) to compute this
  PartialConstructionGuardian partial(cev_size, new char *[cev_size+1]);
  for (std::size_t i(0), e(cev_size); e != i; ++i) {
    c::const_stringz ith(cev[i]);
    std::size_t const ith_size = ith.size(); // another O(N) operation
    std::unique_ptr<char []> copied(new char[ith_size+1]);
    std::copy(ith.begin(), ith.end(), copied.get());
    copied[ith.size()] = '\0';
    partial[i] = copied.release();
  }
  return partial.release();
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.time
namespace tests::unit::time::as {
  namespace fixture {
    class Fixture;
    namespace library = ::sys::time;
  }
  using fixture::Fixture;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
struct tests::unit::time::as::fixture::Fixture : public cppunit::test::Fixture {
  auto test_something() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import sys.time.as
#import sys.time.duration
#import sys.time.point
#import sys.time.t
#import sys.time.tm
#import sys.time.spec
#import sys.time.val
#import std.time
namespace tests::unit::time::as::fixture {
  auto Fixture::test_something() -> void {
    using namespace ::sys::time;
    using ::sys::time::as;
    auto now = std::time(nullptr);
    CPPUNIT_ASSERT(now >= 1480857671l);
    auto tm_val = ::sys::time::as<tm>(now);
    CPPUNIT_ASSERT(tm_val.tm_year+1900 >= 2016);
    auto t_val = as<t>(now);
    CPPUNIT_ASSERT(t_val >= 1480856037l);
    auto val_val = as<val>(now);
    CPPUNIT_ASSERT(val_val.tv_sec >= 1480856065l);
    auto spec_val = as<spec>(now);
    CPPUNIT_ASSERT(spec_val.tv_sec >= 1480856087l);
    auto point_val = as<point>(now);
    CPPUNIT_ASSERT(point_val >= as<point>(as<t>(1480856273l)));
    auto duration_val = as<duration>(now);
    CPPUNIT_ASSERT(duration_val >= as<point>(as<t>(1480856273l)).time_since_epoch());
  }
}
#import tests.unit.time.as.C
#import tests.unit.time.as.Duration
#import tests.unit.time.as.Point
#import tests.unit.time.as.Spec
#import tests.unit.time.as.T
#import tests.unit.time.as.Tm
#import tests.unit.time.as.Val
#import rigging.suite.io
auto tests::unit::time::as::fixture::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  using ::rigging::suite::call; // because namespace tests::unit::call occludes
  auto series = Stream{"as"};
  series << call("something", &Fixture::test_something)
         << add<C>()
         << add<Point>()
         << add<Duration>()
         << add<Spec>()
         << add<T>()
         << add<Tm>()
         << add<Val>()
         << END;
  return finalize(series);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace time {
      namespace as {
        class Spec;
      }
    }
  }
}
#divert </fpp>
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.time.point
class tests::unit::time::as::Spec : public cppunit::test::Fixture {
public:
  auto setUp() -> void override;
  auto tearDown() -> void override;
  // we're testing sys::time::point (std::chrono::time_point), so this is that type
  ::sys::time::spec now;
  auto test_as_point() -> void;
  auto test_as_t() -> void;
  auto test_as_tm() -> void;
  auto test_as_spec() -> void;
  auto test_as_val() -> void;
  static auto suite() -> cppunit::Test *;
};
#divert </hpp>
#divert <cpp>
#import unit.rigging.lhs
using unit::rigging::lhs;
#import unit.rigging.clear
using unit::rigging::clear;
using namespace sys::time;
#import std.chrono.system_clock
#import sys.time.as
using namespace sys::time;
auto tests::unit::time::as::Spec::setUp() -> void {
  using ::sys::time::as;
  now = as<spec>(std::chrono::system_clock::now());
  CPPUNIT_ASSERT(now.tv_sec >= 1480858295);
}
auto tests::unit::time::as::Spec::tearDown() -> void {
  lhs(now) = clear;
}
auto tests::unit::time::as::Spec::test_as_point() -> void {
  using ::sys::time::as;
  auto vv = as<point>(now);
  CPPUNIT_ASSERT(vv >= as<point>(as<t>(1480858340l)));
}
auto tests::unit::time::as::Spec::test_as_spec() -> void {
  using ::sys::time::as;
  auto vv = as<spec>(now);
  CPPUNIT_ASSERT(vv.tv_sec >= 1480858347l);
}
auto tests::unit::time::as::Spec::test_as_t() -> void {
  using ::sys::time::as;
  auto vv = as<t>(now);
  CPPUNIT_ASSERT(vv >= 1480858351l);
}
auto tests::unit::time::as::Spec::test_as_tm() -> void {
  using ::sys::time::as;
  auto vv = as<tm>(now);
  CPPUNIT_ASSERT(vv.tm_year+1900 >= 2016);
}
auto tests::unit::time::as::Spec::test_as_val() -> void {
  using ::sys::time::as;
  auto vv = as<val>(now);
  CPPUNIT_ASSERT(vv.tv_sec >= 1480858352l);
}
#import rigging.suite.io
auto tests::unit::time::as::Spec::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  using ::rigging::suite::call; // because namespace tests::unit::call occludes
  Stream s("spec");
  s << call("point", &Spec::test_as_point)
    << call("spec", &Spec::test_as_spec)
    << call("t", &Spec::test_as_t)
    << call("tm", &Spec::test_as_tm)
    << call("val", &Spec::test_as_val)
    ;
  return finalize(s);
}
#divert </cpp>

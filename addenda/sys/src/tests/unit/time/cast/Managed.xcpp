// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.time
namespace tests::unit::time::cast {
  namespace managed {
    class Managed;
    namespace library = ::sys::time;
  }
  using managed::Managed;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.time.Managed
class tests::unit::time::cast::managed::Managed : public cppunit::test::Fixture {
public:
  auto setUp() -> void override;;
  auto tearDown() -> void override;;
  using Subject = library::Managed;
  Subject now;
  auto test_Point() -> void;
  auto test_Since() -> void;
  auto test_Old() -> void;
  auto test_Val() -> void;
  auto test_Spec() -> void;
  auto test_Managed() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import unit.rigging.lhs
#import unit.rigging.clear
#import std.chrono.system_clock
#import sys.time.Point
#import sys.time.cast
namespace tests::unit::time::cast::managed {
  using rigging::unit::lhs;
  using rigging::unit::clear;
  auto Managed::setUp() -> void {
    now = library::cast<library::Managed>(std::chrono::system_clock::now());
    CPPUNIT_ASSERT(now.tm_year+1900 > 2016);
  }
  auto Managed::tearDown() -> void {
    lhs(now) = clear;
  }
  auto Managed::test_Point() -> void {
    auto vv = library::cast<library::Point>(now);
    CPPUNIT_ASSERT(vv >= library::cast<library::Point>(library::cast<library::Since>(1480858699l)));
  }
  auto Managed::test_Since() -> void {
    auto vv = library::cast<library::Since>(now);
    CPPUNIT_ASSERT(vv >= 1480858702l);
  }
  auto Managed::test_Old() -> void {
    auto vv = library::cast<library::Old>(now);
    CPPUNIT_ASSERT(vv.t_sec >= 1480858702l);
  }
  auto Managed::test_Val() -> void {
    auto vv = library::cast<library::Val>(now);
    CPPUNIT_ASSERT(vv.tv_sec >= 1480858705l);
  }
  auto Managed::test_Spec() -> void {
    auto vv = library::cast<library::Spec>(now);
    CPPUNIT_ASSERT(vv.tv_sec >= 1480858700l);
  }
  auto Managed::test_Managed() -> void {
    auto vv = library::cast<library::Managed>(now);
    CPPUNIT_ASSERT(vv.tm_year+1900 >= 2016);
  }
}
#import rigging.suite.io
auto tests::unit::time::cast::managed::Managed::suite() -> cppunit::Test * {
    using namespace ::rigging::suite;
    using ::rigging::suite::call; // because namespace tests::unit::call occludes
    auto series = Stream{"Managed"};
    series << call("Point", &Managed::test_Point)
           << call("Since", &Managed::test_Since)
           << call("Old", &Managed::test_Old)
           << call("Val", &Managed::test_Val)
           << call("Spec", &Managed::test_Spec)
           << call("Managed", &Managed::test_Managed)
           << END;
    return finalize(series);
  }
#endiv

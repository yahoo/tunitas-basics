// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.time
namespace tests::unit::time::cast {
  namespace duration {
    class Duration;
    namespace library = ::sys::time;
  }
  using duration::Duration;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.time.Duration
struct tests::unit::time::cast::duration::Duration : public cppunit::test::Fixture {
  auto setUp() -> void override;
  auto tearDown() -> void override;;
  using Subject = library::Duration;
  Subject since_then;
  auto test_Duration() -> void;
  auto test_Since() -> void;
  auto test_Val() -> void;
  auto test_Spec() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import rigging.unit.lhs
#import rigging.unit.clear
#import std.chrono.system_clock
#import sys.time.cast
namespace tests::unit::time::cast::duration {
  using rigging::unit::lhs;
  using rigging::unit::clear;
  auto Duration::setUp() -> void {
    since_then = std::chrono::system_clock::now().time_since_epoch();
    CPPUNIT_ASSERT(since_then.count() >= 1493693135784282910l);
  }
  auto Duration::tearDown() -> void {
    lhs(since_then) = clear;
  }
  auto Duration::test_Duration() -> void {
    auto vv = library::cast<library::Duration>(since_then);
    CPPUNIT_ASSERT(vv >= library::cast<library::Duration>(library::Since{1480856273l}));
  }
  auto Duration::test_Since() -> void {
    auto vv = library::cast<library::Since>(since_then);
    CPPUNIT_ASSERT(vv >= 1480856037l);
  }
  auto Duration::test_Val() -> void {
    auto vv = library::cast<library::Val>(since_then);
    CPPUNIT_ASSERT(vv.tv_sec >= 1480856065l);
  }
  auto Duration::test_Spec() -> void {
    auto vv = library::cast<library::Spec>(since_then);
    CPPUNIT_ASSERT(vv.tv_sec >= 1480856087l);
  }
}
#import rigging.suite.io
auto tests::unit::time::cast::duration::Duration::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  using ::rigging::suite::call; // because namespace tests::unit::call occludes
  auto series = Stream{"duration"};
  series << call("Duration", &Duration::test_Duration)
         << call("Since", &Duration::test_Since)
         << call("Val", &Duration::test_Val)
         << call("Spec", &Duration::test_Spec)
         << END;
  return finalize(series);
}
#endiv

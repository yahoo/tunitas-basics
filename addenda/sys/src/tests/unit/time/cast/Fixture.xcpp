// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.time
namespace tests::unit::time::cast {
  namespace fixture {
    class Fixture;
    namespace library = ::sys::time;
  }
  using fixture::Fixture;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.time.t
struct tests::unit::time::cast::fixture::Fixture : public cppunit::test::Fixture {
  auto setUp() -> void override;
  auto tearDown() -> void override { }
  auto test_usage_Duration() -> void;
  auto test_usage_Point() -> void;
  auto test_usage_Managed() -> void;
  auto test_usage_Old() -> void;
  auto test_usage_Since() -> void;
  auto test_usage_Spec() -> void;
  auto test_usage_Val() -> void;
  static auto suite() -> cppunit::Test *;
protected:
  using Subject = library::t; // the unadorned integer one.
  Subject now;
};
#endiv
#divert <cpp>
#import sys.time.cast
#import sys.time.Duration
#import sys.time.Point
#import sys.time.Managed
#import sys.time.Old
#import sys.time.Since
#import sys.time.Spec
#import sys.time.Val
#import std.time
#import nonstd.to_underlying
namespace tests::unit::time::cast::fixture {
  using nonstd::to_underlying;
  using std::time;
  auto Fixture::setUp() -> void {
    this->now = time(nullptr);
    CPPUNIT_ASSERT(this->now >= 1480857671l);
  }
  auto Fixture::test_usage_Duration() -> void {
    auto subject = library::cast<library::Duration>(library::Since{now});
    CPPUNIT_ASSERT(subject >= library::cast<library::Point>(library::cast<library::Old>(1480856273l).t_sec).time_since_epoch());
  }
  auto Fixture::test_usage_Point() -> void {
    auto subject = library::cast<library::Point>(now);
    CPPUNIT_ASSERT(subject >= library::cast<library::Point>(library::cast<library::Old>(1480856273l).t_sec));
  }
  auto Fixture::test_usage_Managed() -> void {
    auto subject = library::cast<library::Managed>(now);
    CPPUNIT_ASSERT(subject.tm_year+1900 >= 2016);
  }
  auto Fixture::test_usage_Since() -> void {
    auto subject = library::cast<library::Since>(now);
    CPPUNIT_ASSERT(to_underlying(subject) >= 1480856037l);
  }
  auto Fixture::test_usage_Old() -> void {
    auto subject = library::cast<library::Old>(library::Since{now});
    CPPUNIT_ASSERT(subject.t_sec >= 1480856037l);
  }
  auto Fixture::test_usage_Val() -> void {
    auto subject = library::cast<library::Val>(now);
    CPPUNIT_ASSERT(subject.tv_sec >= 1480856065l);
  }
  auto Fixture::test_usage_Spec() -> void {
    auto subject = library::cast<library::Spec>(now);
    CPPUNIT_ASSERT(subject.tv_sec >= 1480856087l);
  }
}
#import tests.unit.time.cast.Duration
#import tests.unit.time.cast.Managed
#import tests.unit.time.cast.Old
#import tests.unit.time.cast.Point
#import tests.unit.time.cast.Since
#import tests.unit.time.cast.Spec
#import tests.unit.time.cast.Val
#import rigging.suite.io
auto tests::unit::time::cast::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  using ::rigging::suite::call; // because namespace tests::unit::call occludes
  auto series = Stream{"cast"};
  series << []() {
              auto use = Stream{"usage"};
              use << call("Duration", &Fixture::test_usage_Duration)
                  << call("Point", &Fixture::test_usage_Point)
                  << call("Managed", &Fixture::test_usage_Managed)
                  << call("Old", &Fixture::test_usage_Old)
                  << call("Since", &Fixture::test_usage_Since)
                  << call("Spec", &Fixture::test_usage_Spec)
                  << call("Val", &Fixture::test_usage_Val)
                  << END;
              return use;
            }()
          << add<Point>()
         << add<Duration>()
         << add<Since>()
         << add<Val>()
         << add<Spec>()
         << add<Managed>()
         << END;
  return finalize(series);
}
#endiv

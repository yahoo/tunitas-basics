// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.time
namespace tests::unit::time::cast {
  namespace old {
    class Old;
    namespace library = ::sys::time;
  }
  using old::Old;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.time.Old
struct tests::unit::time::cast::Old : public cppunit::test::Fixture {
  auto setUp() -> void override;
  auto tearDown() -> void override;
  using Subject = library::Old;
  Subject now;
  auto test_Point() -> void;
  auto test_Since() -> void;
  auto test_Old() -> void;
  auto test_Val() -> void;
  auto test_Spec() -> void;
  auto test_Managed() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import unit.rigging.lhs
#import unit.rigging.clear
#import std.chrono.system_clock
#import sys.time.cast
namespace tests::unit::time::cast::old {
  using rigging::unit::lhs;
  using rigging::unit::clear;
  auto Old::setUp() -> void {
    now = library::cast<library::Old>(std::chrono::system_clock::now());
    CPPUNIT_ASSERT(0 != now.t_sec);
  }
  auto Old::tearDown() -> void {
    lhs(now) = clear;
  }
  auto Old::test_Point() -> void {
    auto vv = library::cast<library::Point>(now);
    CPPUNIT_ASSERT(vv >= library::cast<library::Point>(library::cast<library::Old>(1480856273l)));
  }
  auto Old::test_Since() -> void {
    auto vv = library::cast<library::Since>(now);
    CPPUNIT_ASSERT(vv >= 1480856037l);
  }
  auto Old::test_Old() -> void {
    auto vv = library::cast<library::Old>(now);
    CPPUNIT_ASSERT(vv.t_sec >= 1480856037l);
  }
  auto Old::test_Val() -> void {
    auto vv = library::cast<library::Val>(now);
    CPPUNIT_ASSERT(vv.tv_sec >= 1480856065l);
  }
  auto Old::test_Spec() -> void {
    auto vv = library::cast<library::Spec>(now);
    CPPUNIT_ASSERT(vv.tv_sec >= 1480856087l);
  }
  auto Old::test_Managed() -> void {
    auto vv = library::cast<library::Managed>(now);
    CPPUNIT_ASSERT(vv.tm_year+1900 >= 2016);
  }
}
#import rigging.suite.io
auto tests::unit::time::cast::old::Old::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  auto series = Stream{"Old"};
  series << call("Point", &Old::test_Point)
         << call("Since", &Old::test_Since)
         << call("Old", &Old::test_Old)
         << call("Val", &Old::test_Val)
         << call("Spec", &Old::test_Spec)
         << call("Managed", &Old::test_Managed)
         << END;
  return finalize(series);
}
#endiv

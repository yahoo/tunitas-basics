// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::flock { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.flock.Operation
#import sys.flock.Options
#import sys.flock.Specification
struct tests::unit::flock::Fixture : public cppunit::test::Fixture {
  using Operation = ::sys::flock::Operation;
  using Option = ::sys::flock::Option;
  using Options = ::sys::flock::Options;
  using Specification = ::sys::flock::Specification;
  auto test_usage_Options() -> void;
  auto test_usage_Specification() -> void;
  auto test_constants() -> void;
  auto test_call() -> void;
  auto test_as() -> void;
  static auto suite() -> cppunit::Test *;
protected:
  auto flockalike(Specification) -> void;
  auto flockalike(Operation, Options) -> void;
};
#endiv
#divert <cpp>
namespace tests::unit::flock {
  // There is nothing to do.
  // The unambiguous call to this function is the test itself.
  auto Fixture::flockalike(Specification) -> void { CPPUNIT_ASSERT(true); }
  auto Fixture::flockalike(Operation, Options) -> void { CPPUNIT_ASSERT(true); }
  auto Fixture::test_usage_Options() -> void {
    auto op = Options{Option::NONBLOCK};
    flockalike(Operation::SHARED, op);
  }
  auto Fixture::test_usage_Specification() -> void {
    auto s = Specification{Operation::EXCLUSIVE | Option::NONBLOCK};
    flockalike(s);
    CPPUNIT_ASSERT(0 != (int)s);
  }
}
#import sys.flock.constants
namespace tests::unit::flock {
  auto Fixture::test_constants() -> void {
    using namespace ::sys::flock::constants;
    auto op = Operation{};
    op = SHARED;
    op = EXCLUSIVE;
    op = UNLOCK;
    op = SH;
    op = EX;
    op = UN;
    flockalike(op);
    auto ns = Options{};
    ns |= MANDATORY;
    ns |= NONBLOCK;
    flockalike(op, ns);
    auto spec = op | ns;
    flockalike(spec);
  }
}
namespace tests::unit::flock {
  auto Fixture::test_call() -> void {
    using namespace ::sys::flock::constants;
    flockalike(SHARED);
    flockalike(EXCLUSIVE);
    flockalike(UNLOCK);
    flockalike(SH | NONBLOCK);
    flockalike(EX | MANDATORY);
    flockalike(SH | ADVISORY);
    flockalike(EX | MANDATORY | NONBLOCK);
    flockalike(SH | ADVISORY | NONBLOCK);
    flockalike(UN);
    flockalike(SH, NONBLOCK);
    flockalike(EX, MANDATORY);
    flockalike(SHARED, MANDATORY);
    flockalike(EXCLUSIVE, ADVISORY);
    flockalike(UNLOCK, ADVISORY);
  }
}
#import sys.flock.as
#import sys.flock.constants
namespace tests::unit::flock {
  auto Fixture::test_as() -> void {
    using namespace ::sys::flock::constants;
    using ::sys::flock::as;
    // Just the ones that aren't an identity transform
    {
      CPPUNIT_ASSERT(Option::MANDATORY == as<Option>(Options{MANDATORY}));
      CPPUNIT_ASSERT(Option::NONBLOCK == as<Option>(Options{NONBLOCK}));
    } {
      CPPUNIT_ASSERT(Option::MANDATORY == as<Option>(Specification{MANDATORY}));
      CPPUNIT_ASSERT(Option::NONBLOCK == as<Option>(Specification{NONBLOCK}));
    } {
      CPPUNIT_ASSERT(Operation::SHARED == as<Operation>(Specification{SHARED}));
      CPPUNIT_ASSERT(Operation::EXCLUSIVE == as<Operation>(Specification{EXCLUSIVE}));
      CPPUNIT_ASSERT(Operation::UNLOCK == as<Operation>(Specification{UNLOCK}));
    }
  }
}
#import tests.unit.flock.Palette
#import tests.unit.flock.Operation
#import tests.unit.flock.Options
#import tests.unit.flock.Specification
#import tests.flags.Scenario
#import rigging.suite.io
auto tests::unit::flock::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  namespace testing = tests::unit::flock;
  Stream series("flock");
  series << []() {
              Stream use{"usage"};
              // anything?
              use << call("Options", &Fixture::test_usage_Options)
                  << call("Specification", &Fixture::test_usage_Specification)
                ;
              return move(use);
            }()
         << call("constants", &Fixture::test_constants)
         << call("call", &Fixture::test_call)
         << call("as", &Fixture::test_as)
         << add<tests::flags::Scenario<1, Palette>>()
#warning [[FIXTHIS]] where is the adl testing for contains(...) and is_flag(...) at all?
         << add<testing::Operation>()
         << add<testing::Options>()
         << add<testing::Specification>()
    ;
  return finalize(series);
}
#endiv

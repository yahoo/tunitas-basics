// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::flock { class Specification; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.flock.Operation
#import sys.flock.Options
#import sys.flock.Specification
struct tests::unit::flock::Specification : public cppunit::test::Fixture {
  using Operation = ::sys::flock::Operation;
  using Option = ::sys::flock::Option;
  using Options = ::sys::flock::Options;
  using Subject = ::sys::flock::Specification;
  auto test_constructor_default() -> void;
  auto test_constructor_Operation() -> void;
  auto test_constructor_Options() -> void;
  auto test_operator_int() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
namespace tests::unit::flock {
  auto Specification::test_constructor_default() -> void {
    auto subject = Subject{}; // <----------- test this, implicitly Operation::UNSPECIFIED
    CPPUNIT_ASSERT(0 == (int)subject);
  }
  auto Specification::test_constructor_Operation() -> void {
    auto subject = Subject{Operation::EXCLUSIVE};
    CPPUNIT_ASSERT((int)Operation::EXCLUSIVE == (int)subject);
  }
  auto Specification::test_constructor_Options() -> void {
    auto subject = Subject{Option::NONBLOCK}; // <----------- test this, implicitly Operation "UNSPECIFIED"
    CPPUNIT_ASSERT((int)Option::NONBLOCK == (int)subject);
  }
  auto Specification::test_operator_int() -> void {
    auto subject = Operation::EXCLUSIVE | Option::NONBLOCK;
    auto const actual = (int)subject; // <--------------- test this
    CPPUNIT_ASSERT(0 != actual);
  }
}
#import rigging.suite.io
auto tests::unit::flock::Specification::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("Specification");
  series << []() {
              Stream con{"constructor"};
              con << call("default", &Specification::test_constructor_default)
                  << call("Operation", &Specification::test_constructor_Operation)
                  << call("Options", &Specification::test_constructor_Options)
                ;
              return move(con);
            }()
         << call("operator int", &Specification::test_operator_int)
    ;
  return finalize(series);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::o { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import tests.unit.o.Palette
struct tests::unit::o::Fixture : public cppunit::test::Fixture, private Palette {
  using Subject = Options<Access,Create,Status>;
  auto test_usage_01_enums() -> void;
  auto test_usage_01_constants() -> void;
  auto test_usage_02() -> void;
  auto test_usage_03() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import sys.o.constants
namespace tests::unit::o {
  using namespace ::sys::o::constants;
  auto Fixture::test_usage_01_enums() -> void {
    auto f = Subject{};
    f = Access::READ;
    f = Create::CREATE;
    f = Status::APPEND;
    f = Access::READ | Create::CREATE;
    f = Create::CREATE | Status::APPEND;
    f = Access::READ | Create::CREATE | Status::APPEND;
    CPPUNIT_ASSERT(Subject{} != f);
  }
  auto Fixture::test_usage_01_constants() -> void {
    auto f = Subject{};
    f = READ;
    f = CREATE;
    f = APPEND;
    f = READ | CREATE;
    f = CREATE | APPEND;
    f = READ | CREATE | APPEND;
    CPPUNIT_ASSERT(Subject{} != f);
  }
  auto Fixture::test_usage_02() -> void {
    auto f = Subject{};
    f = RDONLY;
    CPPUNIT_ASSERT_EQUAL(0, (int)f);
    f = WRONLY;
    CPPUNIT_ASSERT_EQUAL(1, (int)f);
    f = RDWR;
    CPPUNIT_ASSERT_EQUAL(2, (int)f);
  }
  auto Fixture::test_usage_03() -> void {
    auto f = Subject{};
    f = RDONLY | CREAT;
    f = WRONLY | EXCL | CREAT;
    f = RDWR | TRUNC;
    f = RDWR | APPEND;
    f = RDWR | NOATIME;
    CPPUNIT_ASSERT(Subject{} != f);
  }
}
#import sys.o.Options
#import tests.unit.o.Access
#import tests.unit.o.Composer
#import tests.unit.o.Create
#import tests.unit.o.Options
#import tests.unit.o.Flags
#import tests.unit.o.Status
#import rigging.suite.io
auto tests::unit::o::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  namespace testing = tests::unit::o; // because the 'using namespace sys::o::constants'' above makes everything ambiguous
  Stream series("o");
  series << []() {
              Stream use{"usage"};
              use << call("01-enums", &Fixture::test_usage_01_enums)
                  << call("01-constants", &Fixture::test_usage_01_constants)
                  << call("02", &Fixture::test_usage_02)
                  << call("03", &Fixture::test_usage_03)
                  << END;
              return move(use);
            }()
         << add<testing::Access>()
         << add<testing::Create>()
         << add<testing::Status>()
         << add<testing::Options<library::Options<library::Access,library::Status>>>()
         << add<testing::Options<library::Options<library::Create,library::Status>>>()
         << add<testing::Options<library::Options<library::Access,library::Create,library::Status>>>()
         << add<testing::Options<library::Options<library::Access,library::Status>>>()
         << add<testing::Composer<library::Options<library::Access,library::Status>>>()
         << add<testing::Composer<library::Options<library::Create,library::Status>>>()
         << add<testing::Composer<library::Options<library::Access,library::Create,library::Status>>>()
         << add<testing::Flags>()
         << END;
  return finalize(series);
}
#endiv

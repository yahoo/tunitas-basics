// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import tests.unit.o.Composer.declaration
#forward sys.o.Options
#import tests.unit.o // WATCHOUT -- Does. Not. Work. (see commentariat in __library)
#import tests.unit.o.__library
namespace tests::unit::o { template<> class Composer<library::Options<library::Access,library::Status>>; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import tests.unit.o.Palette
#import sys.o.options.Composer.Options.Access.Status
namespace tests::unit::o {
  template<> struct Composer<library::Options<library::Access,library::Status>> : public cppunit::test::Fixture, private Palette {
    using Key = library::Options<library::Access,library::Status>;
    using Subject = library::options::Composer<Key>;
    auto test_Access() -> void;
    auto test_Accesses() -> void;
    auto test_Status() -> void;
    auto test_Statuses() -> void;
    auto test_operator_cast() -> void;
    static auto suite() -> cppunit::Test *;
  };
}
#endiv
#divert <ipp>
#import sys.o.Options
#endiv
#divert <cpp>
#import sys.o.constants
namespace tests::unit::o {
  using namespace ::sys::o::constants;
  auto Composer<library::Options<library::Access, library::Status>>::test_Access() -> void {
    auto const expected = Access::READWRITE;
    auto const actual = composer<Key>(expected);
    CPPUNIT_ASSERT_EQUAL((int)expected, (int)actual); 
  }
  auto Composer<library::Options<library::Access, library::Status>>::test_Accesses() -> void {
    auto const expected = Accesses{Access::WRITE} | Accesses{Access::READ};
    auto const actual = composer<Key>(expected);
    CPPUNIT_ASSERT_EQUAL((int)expected, (int)actual); 
  }
  auto Composer<library::Options<library::Access, library::Status>>::test_Status() -> void {
    auto const expected = Status::NOATIME;
    auto const actual = composer<Key>(expected);
    CPPUNIT_ASSERT_EQUAL((int)expected, (int)actual); 
  }
  auto Composer<library::Options<library::Access, library::Status>>::test_Statuses() -> void {
    auto const expected = Statuses{Status::LARGEFILE} | Statuses{Status::PATH};
    auto const actual = composer<Key>(expected);
    CPPUNIT_ASSERT_EQUAL((int)expected, (int)actual); 
  }
  auto Composer<library::Options<library::Access, library::Status>>::test_operator_cast() -> void {
    auto const expected = 1;
    auto const actual = (int)WRONLY; // <------ test this, the cast itself
    CPPUNIT_ASSERT_EQUAL(expected, actual); 
  }
}
#import rigging.suite.io
namespace tests::unit::o {
  auto Composer<library::Options<library::Access, library::Status>>::suite() -> cppunit::Test * {
    using namespace ::rigging::suite;
    Stream series("Composer<Options<Access,Status>>");
    series << call("Access", &Composer::test_Access)
           << call("Accesses", &Composer::test_Accesses)
           << call("Status", &Composer::test_Status)
           << call("Statuses", &Composer::test_Statuses)
           << call("operator Value", &Composer::test_operator_cast)
           << END;
    return finalize(series);
  }
}
#endiv

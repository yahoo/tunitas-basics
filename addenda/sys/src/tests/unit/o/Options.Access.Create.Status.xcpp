// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import tests.unit.o.Options.declaration
namespace tests::unit::o {
  template<> struct Options<library::Options<library::Access,library::Create,library::Status>>;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
namespace tests::unit::o {
  template<> struct Options<library::Options<library::Access,library::Create,library::Status>> : public cppunit::test::Fixture {
    using Subject = library::Options<library::Access,library::Create,library::Status>;
    auto test_mentions() -> void;
    static auto suite() -> cppunit::Test *;
  };
}
#endiv
#divert <cpp>
#import sys.o.constants
namespace tests::unit::o {
  using namespace ::sys::o::constants;
  auto Options<library::Options<library::Access,library::Create,library::Status>>::test_mentions() -> void {
    Subject o;
    // access(es)
    o = READ;
    o = WRITE;
    o = READWRITE;
    o = RD;
    o = WR;
    o = RDWR;
    o = RDONLY;
    o = WRONLY;
    o = READONLY;
    o = WRITEONLY;
    // create(s)
    o = NOCREATE;
    o = CLOSE_ON_EXEC;
    o = CREATE;
    o = DIRECTORY;
    o = EXCLUSIVE;
    o = NO_CONTROL_TERMINAL;
    o = NOFOLLOW;
    o = TRUNCATE;
    o = CLOEXEC;
    o = CREAT;
    o = EXCL;
    o = NOCTTY;
    o = TRUNC;
    // status(es)
    o = NONE;
    o = APPEND;
    o = ASYNC;
    o = DIRECT;
    o = DSYNC;
    o = LARGEFILE;
    o = NOATIME;
    o = NONBLOCK;
    o = PATH;
    o = SYNC;
    o = TMPFILE;
    // both
    o = READ | NONE;
    o = READ | APPEND;
    o = READ | ASYNC;
    o = READ | DIRECT;
    o = READ | DSYNC;
    o = READ | LARGEFILE;
    o = READ | NOATIME;
    o = READ | NONBLOCK;
    o = READ | PATH;
    o = READ | SYNC;
    o = READ | TMPFILE;
    // three
    o = READ | NOFOLLOW | NONE;
    o = READ | NOFOLLOW | APPEND;
    o = READ | NOFOLLOW | ASYNC;
    o = READ | NOFOLLOW | DIRECT;
    o = READ | NOFOLLOW | DSYNC;
    o = READ | NOFOLLOW | LARGEFILE;
    o = READ | NOFOLLOW | NOATIME;
    o = READ | NOFOLLOW | NONBLOCK;
    o = READ | NOFOLLOW | PATH;
    o = READ | NOFOLLOW | SYNC;
    o = READ | NOFOLLOW | TMPFILE;
    // hex
    o = READ | WRITE | ASYNC | DIRECT | NONE | APPEND;
    o = READ | WRITE | ASYNC | DIRECT | APPEND | ASYNC;
    o = READ | WRITE | ASYNC | DIRECT | ASYNC | DIRECT;
    o = READ | WRITE | ASYNC | DIRECT | DIRECT | DSYNC;
    o = READ | WRITE | ASYNC | DIRECT | DSYNC | LARGEFILE;
    o = READ | WRITE | ASYNC | DIRECT | LARGEFILE | NOATIME;
    o = READ | WRITE | ASYNC | DIRECT | NOATIME | NONBLOCK;
    o = READ | WRITE | ASYNC | DIRECT | NONBLOCK | PATH;
    o = READ | WRITE | ASYNC | DIRECT | PATH | SYNC;
    o = READ | WRITE | ASYNC | DIRECT | SYNC | TMPFILE;
    o = READ | WRITE | ASYNC | DIRECT | TMPFILE | NONE;
    CPPUNIT_ASSERT(Subject{} != o);
  }
}
#import rigging.suite.io
namespace tests::unit::o {
  auto Options<library::Options<library::Access,library::Create,library::Status>>::suite() -> cppunit::Test * {
    using namespace ::rigging::suite;
    Stream series("Options<Access,Create,Status>");
    series << call("mentions", &Options::test_mentions)
           << END;
    return finalize(series);
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::s { class Bits; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.s.Bits
class tests::unit::s::Bits : public cppunit::test::Fixture {
public:
  using Bit = ::sys::s::Bit;
  using Subject = ::sys::s::Bits;
  auto test_constructor_default() -> void;
  auto test_constructor_Bit() -> void;
  auto test_operator_Value() -> void;
  auto test_constants() -> void;
  auto test_as() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import sys.s.as
#import sys.s.constants
namespace tests::unit::s {
  auto Bits::test_constructor_default() -> void {
    auto subject = Subject{};
    CPPUNIT_ASSERT(sizeof (subject));
  }
  auto Bits::test_constructor_Bit() -> void {
    auto subject = Subject{Bit::R};
    CPPUNIT_ASSERT(Bit::R == subject);
  }
  auto Bits::test_operator_Value() -> void {
    auto subject = Subject{Bit::R};
    CPPUNIT_ASSERT(Bit{04} == subject);
    CPPUNIT_ASSERT(Bit{Bit::R} == subject);
  }
  auto Bits::test_constants() -> void {
    using namespace ::sys::s::constants;
    auto const r = Subject{Bit::R};
    CPPUNIT_ASSERT(R == r);
    auto const w = Subject{Bit::W};
    CPPUNIT_ASSERT(W == w);
    auto const x = Subject{Bit::X};
    CPPUNIT_ASSERT(X == x);
    auto const rw = r | w;
    CPPUNIT_ASSERT(RW == rw);
    auto const wx = w | x;
    CPPUNIT_ASSERT(WX == wx);
    auto const rx = r | x;
    CPPUNIT_ASSERT(RX == rx);
    auto const rwx = r | w | x;
    CPPUNIT_ASSERT(RWX == rwx);
  }
  auto Bits::test_as() -> void {
    using namespace ::sys::s::constants;
    using ::sys::s::as;
    { auto const r = Subject{Bit::R};
      CPPUNIT_ASSERT(R == r);
      CPPUNIT_ASSERT(Bit::R == as<Bit>(r)); }
    { auto const w = Subject{Bit::W};
      CPPUNIT_ASSERT(W == w);
      CPPUNIT_ASSERT(Bit::W == as<Bit>(w)); }
    { auto const x = Subject{Bit::X};
      CPPUNIT_ASSERT(X == x);
      CPPUNIT_ASSERT(Bit::X == as<Bit>(x)); }
  }
}
#import rigging.suite.io
auto tests::unit::s::Bits::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("Bits");
  series << []() {
              Stream con{"constructor"};
              con << call("default", &Bits::test_constructor_default)

                  << call("Bit", &Bits::test_constructor_Bit)
                ;
              return move(con);
            }()
         << []() {
              Stream op{"operator"};
              op << call("Value", &Bits::test_operator_Value)
                ;
              return move(op);
            }()
         << call("constants", &Bits::test_constants)
         << call("as", &Bits::test_as)
    ;
  return finalize(series);
}
#endiv

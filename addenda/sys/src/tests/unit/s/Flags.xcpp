// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::s { class Flags; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.s.Flags
class tests::unit::s::Flags : public cppunit::test::Fixture {
public:
  using Flag = ::sys::s::Flag;
  using Subject = ::sys::s::Flags;
  auto test_constructor_default() -> void;
  auto test_constructor_Flag() -> void;
  auto test_operator_Value() -> void;
  auto test_constants() -> void;
  auto test_as() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import sys.s.as
#import sys.s.constants
#import std.exception
namespace tests::unit::s {
  auto Flags::test_constructor_default() -> void {
    auto subject = Subject{};
    CPPUNIT_ASSERT(sizeof (subject));    
  }
  auto Flags::test_constructor_Flag() -> void {
    auto subject = Subject{Flag::ISUID};
    CPPUNIT_ASSERT(Flag::ISUID == subject);
  }
  auto Flags::test_operator_Value() -> void {
    auto subject = Subject{Flag::ISVTX};
    CPPUNIT_ASSERT(Subject{01000} == subject);
  }
  auto Flags::test_constants() -> void {
    using namespace ::sys::s::constants;
    auto const none = Subject{Subject::NONE};
    CPPUNIT_ASSERT(NONE == none);
    auto const setuid = Subject{Flag::SETUID};
    CPPUNIT_ASSERT(SETUID == setuid);
    auto const setgid = Subject{Flag::SETGID};
    CPPUNIT_ASSERT(SETGID == setgid);
    auto const sticky = Subject{Flag::STICKY};
    CPPUNIT_ASSERT(STICKY == sticky);
    auto const ruser = Subject{Flag::RUSER};
    CPPUNIT_ASSERT(RUSER == ruser);
    auto const wuser = Subject{Flag::WUSER};
    CPPUNIT_ASSERT(WUSER == wuser);
    auto const xuser = Subject{Flag::XUSER};
    CPPUNIT_ASSERT(XUSER == xuser);
    auto const rgroup = Subject{Flag::RGROUP};
    CPPUNIT_ASSERT(RGROUP == rgroup);
    auto const wgroup = Subject{Flag::WGROUP};
    CPPUNIT_ASSERT(WGROUP == wgroup);
    auto const xgroup = Subject{Flag::XGROUP};
    CPPUNIT_ASSERT(XGROUP == xgroup);
    auto const rother = Subject{Flag::ROTHER};
    CPPUNIT_ASSERT(ROTHER == rother);
    auto const wother = Subject{Flag::WOTHER};
    CPPUNIT_ASSERT(WOTHER == wother);
    auto const xother = Subject{Flag::XOTHER};
    CPPUNIT_ASSERT(XOTHER == xother);
  }
  auto Flags::test_as() -> void {
    using ::sys::s::as;
    using namespace ::sys::s::constants;
    try {
      auto const none = Subject{Subject::NONE};
      CPPUNIT_ASSERT(NONE == none);
      as<Flag>(none); // this throws because there are no bits to turn into a flag
      CPPUNIT_ASSERT(false);
    } catch (std::exception const &) {
      CPPUNIT_ASSERT(true);
    }
    { auto const setuid = Subject{Flag::SETUID};
      CPPUNIT_ASSERT(SETUID == setuid);
      CPPUNIT_ASSERT(Flag::SETUID == as<Flag>(setuid)); }
    { auto const setgid = Subject{Flag::SETGID};
      CPPUNIT_ASSERT(SETGID == setgid);
      CPPUNIT_ASSERT(Flag::SETGID == as<Flag>(setgid)); }
    { auto const sticky = Subject{Flag::STICKY};
      CPPUNIT_ASSERT(STICKY == sticky);
      CPPUNIT_ASSERT(Flag::STICKY == as<Flag>(sticky)); }
    { auto const ruser = Subject{Flag::RUSER};
      CPPUNIT_ASSERT(RUSER == ruser);
      CPPUNIT_ASSERT(Flag::RUSER == as<Flag>(ruser)); }
    { auto const wuser = Subject{Flag::WUSER};
      CPPUNIT_ASSERT(WUSER == wuser);
      CPPUNIT_ASSERT(Flag::WUSER == as<Flag>(wuser)); }
    { auto const xuser = Subject{Flag::XUSER};
      CPPUNIT_ASSERT(XUSER == xuser);
      CPPUNIT_ASSERT(Flag::XUSER == as<Flag>(xuser)); }
    { auto const rgroup = Subject{Flag::RGROUP};
      CPPUNIT_ASSERT(RGROUP == rgroup);
      CPPUNIT_ASSERT(Flag::RGROUP == as<Flag>(rgroup)); }
    { auto const wgroup = Subject{Flag::WGROUP};
      CPPUNIT_ASSERT(WGROUP == wgroup);
      CPPUNIT_ASSERT(Flag::WGROUP == as<Flag>(wgroup)); }
    { auto const xgroup = Subject{Flag::XGROUP};
      CPPUNIT_ASSERT(XGROUP == xgroup);
      CPPUNIT_ASSERT(Flag::XGROUP == as<Flag>(xgroup)); }
    { auto const rother = Subject{Flag::ROTHER};
      CPPUNIT_ASSERT(ROTHER == rother);
      CPPUNIT_ASSERT(Flag::ROTHER == as<Flag>(rother)); }
    { auto const wother = Subject{Flag::WOTHER};
      CPPUNIT_ASSERT(WOTHER == wother);
      CPPUNIT_ASSERT(Flag::WOTHER == as<Flag>(wother)); }
    { auto const xother = Subject{Flag::XOTHER};
      CPPUNIT_ASSERT(XOTHER == xother);
      CPPUNIT_ASSERT(Flag::XOTHER == as<Flag>(xother)); }
  }
}
#import rigging.suite.io
auto tests::unit::s::Flags::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("Flags");
  series << []() {
              Stream con{"constructor"};
              con << call("default", &Flags::test_constructor_default)
                  << call("Flag", &Flags::test_constructor_Flag)
                ;
              return move(con);
            }()
         << []() {
              Stream op{"operator"};
              op << call("Value", &Flags::test_operator_Value)
                ;
              return move(op);
            }()
         << call("constants", &Flags::test_constants)
         << call("as", &Flags::test_as)
    ;
  return finalize(series);
}
#endiv

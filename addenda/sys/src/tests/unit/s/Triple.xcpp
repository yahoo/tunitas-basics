// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::s { class Triple; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.s.Bits
#import sys.s.Mode
#import sys.s.Quad
#import sys.s.Triple
class tests::unit::s::Triple : public cppunit::test::Fixture {
public:
  using Bit = ::sys::s::Bit;
  using Bits = ::sys::s::Bits;
  using Quad = ::sys::s::Quad;
  using Mode = ::sys::s::Mode;
  using Subject = ::sys::s::Triple;
  auto test_constructor_default() -> void;
  auto test_constructor_Bits() -> void;
  auto test_as_Quad() -> void;
  auto test_as_Triple() -> void;
  auto test_as_Mode() -> void;
  auto test_get_consty() -> void;
  auto test_get_mutable() -> void;
  auto test_get_friend() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
namespace tests::unit::s {
  auto Triple::test_constructor_default() -> void {
    auto subject = Subject{};
    CPPUNIT_ASSERT(0u == (mode_t)(Mode)subject);
  }
  auto Triple::test_constructor_Bits() -> void {
    auto subject = Subject{Bit::R, Bit::W, Bit::X};
    CPPUNIT_ASSERT(0421u == (mode_t)(Mode)subject);
  }
  auto Triple::test_as_Triple() -> void {
    auto subject = Subject{Bit::R, Bit::W, Bit::X};
    auto trip = subject.as<Subject>();
    CPPUNIT_ASSERT(0421u == (mode_t)trip.as<Mode>());
  }
  auto Triple::test_as_Quad() -> void {
    auto subject = Subject{Bit::R, Bit::W, Bit::X};
    auto quad = subject.as<Quad>();
    CPPUNIT_ASSERT(0421u == (mode_t)quad.as<Mode>());
  }
  auto Triple::test_as_Mode() -> void {
    auto subject = Subject{Bit::R, Bit::W, Bit::X};
    auto mode = subject.as<Mode>();
    CPPUNIT_ASSERT(0421u == (mode_t)mode);
  }
  auto Triple::test_get_consty() -> void {
    auto const subject = Subject{Bit::R, Bit::W, Bit::X};
    { auto r = subject.get<Subject::USER>();
      CPPUNIT_ASSERT(Bit::R == r); }
    { auto w = subject.get<Subject::GROUP>();
      CPPUNIT_ASSERT(Bit::W == w); }
    { auto x = subject.get<Subject::OTHER>();
      CPPUNIT_ASSERT(Bit::X == x); }
  }
  auto Triple::test_get_mutable() -> void {
    auto /*NOT CONST*/ subject = Subject{Bit::R, Bit::W, Bit::X};
    { auto r = subject.get<Subject::USER>();
      CPPUNIT_ASSERT(Bit::R == r); }
    { auto w = subject.get<Subject::GROUP>();
      CPPUNIT_ASSERT(Bit::W == w); }
    { auto x = subject.get<Subject::OTHER>();
      CPPUNIT_ASSERT(Bit::X == x); }
  }
  auto Triple::test_get_friend() -> void {
    auto const subject = Subject{Bit::R, Bit::W, Bit::X};
    { auto got = get<Subject::USER>(subject);
      CPPUNIT_ASSERT(Bit::R == got); }
    { auto got = get<Subject::GROUP>(subject);
      CPPUNIT_ASSERT(Bit::W == got); }
    { auto got = get<Subject::OTHER>(subject);
      CPPUNIT_ASSERT(Bit::X == got); }
  }
}
#import rigging.suite.io
auto tests::unit::s::Triple::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("Triple");
  series << []() {
              Stream con{"constructor"};
              con << call("default", &Triple::test_constructor_default)
                  << call("Bits,Bits,Bits", &Triple::test_constructor_Bits)
                ;
              return move(con);
            }()
         << []() {
              Stream as{"as"};
              as << call("Triple", &Triple::test_as_Triple)
                 << call("Quad", &Triple::test_as_Quad)
                 << call("Mode", &Triple::test_as_Mode)
                ;
              return move(as);
            }()
         << []() {
              Stream get{"get"};
              get << call("consty", &Triple::test_get_consty)
                  << call("mutable", &Triple::test_get_mutable)
                  << call("friend", &Triple::test_get_friend)
                ;
              return move(get);
            }()
    ;
  return finalize(series);
}
#endiv

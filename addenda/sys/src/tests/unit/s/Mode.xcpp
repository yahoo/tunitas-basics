// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::s { class Mode; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.s.Bits
#import sys.s.Flags
#import sys.s.Triple
#import sys.s.Quad
#import sys.s.Mode
class tests::unit::s::Mode : public cppunit::test::Fixture {
public:
  using Bit = ::sys::s::Bit;
  using Bits = ::sys::s::Bits;
  using Flag = ::sys::s::Flag;
  using Flags = ::sys::s::Flags;
  using Triple = ::sys::s::Triple;
  using Quad = ::sys::s::Quad;
  using Subject = ::sys::s::Mode;
  auto test_constructor_default() -> void;
  auto test_constructor_Value() -> void;
  auto test_constructor_Flags() -> void;
  auto test_constructor_Triple() -> void;
  auto test_constructor_Quad() -> void;
  auto test_operator_Value() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import sys.s.constants
namespace tests::unit::s {
  auto Mode::test_constructor_default() -> void {
    auto subject = Subject{};
    CPPUNIT_ASSERT(0u == (mode_t) subject);
  }
  auto Mode::test_constructor_Value() -> void {
    auto subject = Subject{07654};
    CPPUNIT_ASSERT(07654u == (mode_t) subject);
  }
  auto Mode::test_constructor_Flags() -> void {
    using namespace ::sys::s::constants;
    auto subject = Subject{SETUID | RUSER | WUSER | XUSER | RGROUP | WGROUP | XGROUP};
    CPPUNIT_ASSERT(04770 == (mode_t) subject);
  }
  auto Mode::test_constructor_Triple() -> void {
    auto subject = Subject{Triple{Bit::R|Bit::W|Bit::X, Bit::R|Bit::W|Bit::X, Bit{}}};
    CPPUNIT_ASSERT(0770 == (mode_t) subject);
  }
  auto Mode::test_constructor_Quad() -> void {
    auto subject = Subject{Quad{Bit::R, Bit::R|Bit::W|Bit::X, Bit::R|Bit::W|Bit::X, Bit{}}};
    CPPUNIT_ASSERT(04770 == (mode_t) subject);
  }
  auto Mode::test_operator_Value() -> void {
    auto subject = Subject{01111};
    CPPUNIT_ASSERT(01111u == (Subject::Value) subject);
  }
}
#import rigging.suite.io
auto tests::unit::s::Mode::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("Mode");
  series << []() {
              Stream con{"constructor"};
              con << call("default", &Mode::test_constructor_default)
                  << call("Value", &Mode::test_constructor_Value)
                  << call("Flags", &Mode::test_constructor_Flags)
                  << call("Triple", &Mode::test_constructor_Triple)
                  << call("Quad", &Mode::test_constructor_Quad)
                ;
              return con;
            }()
         << []() {
              Stream op{"operator"};
              op << call("Value", &Mode::test_operator_Value)
                ;
              return op;
            }()
    ;
  return finalize(series);
}
#endiv

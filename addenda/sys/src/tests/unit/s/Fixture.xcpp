// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::s { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.s.Bits
#import sys.s.Flags
#import sys.s.Triple
#import sys.s.Quad
#import sys.s.Mode
class tests::unit::s::Fixture : public cppunit::test::Fixture {
public:
  using Bit = ::sys::s::Bit;
  using Bits = ::sys::s::Bits;
  using Flag = ::sys::s::Flag;
  using Flags = ::sys::s::Flags;
  using Triple = ::sys::s::Triple;
  using Quad = ::sys::s::Quad;
  using Mode = ::sys::s::Mode;
  auto test_usage_Bit() -> void;
  auto test_usage_Bits() -> void;
  auto test_usage_Flag() -> void;
  auto test_usage_Flags() -> void;
  auto test_usage_Triple() -> void;
  auto test_usage_Quad() -> void;
  auto test_usage_Mode() -> void;
  auto test_constants() -> void;
  auto test_as() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
namespace tests::unit::s {
  auto Fixture::test_usage_Bit() -> void {
    auto b = Bit::R;
    CPPUNIT_ASSERT(sizeof (b));
  }
  auto Fixture::test_usage_Bits() -> void {
    auto b = Bits{Bit::R};
    CPPUNIT_ASSERT(sizeof (b));
  }
  auto Fixture::test_usage_Flag() -> void {
    auto f = Flag::IXUSR;
    CPPUNIT_ASSERT(sizeof (f));
  }
  auto Fixture::test_usage_Flags() -> void {
    auto f = Flags{Flag::IXOTH};
    CPPUNIT_ASSERT(sizeof (f));
  }
  auto Fixture::test_usage_Triple() -> void {
    auto t = Triple{Bit::R, Bit::W, Bit::X};
    CPPUNIT_ASSERT(0421u == (mode_t)(Mode)t);
  }
  auto Fixture::test_usage_Quad() -> void {
    auto q = Quad{Bit::X, Bit::R, Bit::W, Bit::X};
    CPPUNIT_ASSERT(01421u == (mode_t)(Mode)q);
  }
  auto Fixture::test_usage_Mode() -> void {
    auto m = Mode{07531};
    CPPUNIT_ASSERT(07531u == (mode_t)m);
  }
}
#import sys.s.constants
namespace tests::unit::s {
  auto Fixture::test_constants() -> void {
    using namespace ::sys::s::constants;
    auto b = N;
    b |= R;
    b |= W;
    b |= X;
    b |= RW;
    b |= RX;
    b |= WX;
    b |= RWX;
    CPPUNIT_ASSERT(N != b);
    auto f = NONE;
    f |= ISUID;
    f |= ISGID;
    f |= ISVTX;
    f |= IRUSR;
    f |= IWUSR;
    f |= IXUSR;
    f |= IRGRP;
    f |= IWGRP;
    f |= IXGRP;
    f |= IROTH;
    f |= IWOTH;
    f |= IXOTH;
    f |= NONE;
    f |= SETUID;
    f |= SETGID;
    f |= STICKY;
    f |= RUSER;
    f |= WUSER;
    f |= XUSER;
    f |= RGROUP;
    f |= WGROUP;
    f |= XGROUP;
    f |= ROTHER;
    f |= WOTHER;
    f |= XOTHER;
    CPPUNIT_ASSERT(NONE != f);
  }
}
#import sys.s.as
#import sys.s.constants
namespace tests::unit::s {
  auto Fixture::test_as() -> void {
    using namespace ::sys::s::constants;
    using ::sys::s::as;
    CPPUNIT_ASSERT(Bit::R == as<Bit>(R));
    CPPUNIT_ASSERT(Bit::W == as<Bit>(W));
    CPPUNIT_ASSERT(Bit::X == as<Bit>(X));
    CPPUNIT_ASSERT(Flag::ISUID == as<Flag>(ISUID));
    CPPUNIT_ASSERT(Flag::ISGID == as<Flag>(ISGID));
    CPPUNIT_ASSERT(Flag::ISVTX == as<Flag>(ISVTX));
  }
}
#import tests.unit.s.Bits
#import tests.unit.s.Flags
#import tests.unit.s.Triple
#import tests.unit.s.Quad
#import tests.unit.s.Mode
#import tests.unit.s.old.Fixture
#import rigging.suite.io
auto tests::unit::s::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  namespace testing = tests::unit::s;
  Stream series("s");
  series << []() {
              Stream use{"usage"};
              use << call("Bit", &Fixture::test_usage_Bit)
                  << call("Bits", &Fixture::test_usage_Bits)
                  << call("Flag", &Fixture::test_usage_Flag)
                  << call("Flags", &Fixture::test_usage_Flags)
                  << call("Triple", &Fixture::test_usage_Triple)
                  << call("Quad", &Fixture::test_usage_Quad)
                  << call("Mode", &Fixture::test_usage_Mode)
                ;
              return use;
            }()
         << call("constants", &Fixture::test_constants)
         << call("as", &Fixture::test_as)
    // [[FIXTHIS]] the adl testing for contains(...) and is_flag(...) is in posix::S::Fixture
         << add<testing::Bits>()
         << add<testing::Flags>()
         << add<testing::Triple>()
         << add<testing::Quad>()
         << add<testing::Mode>()
         << add<testing::old::Fixture>()
         << END;
  return finalize(series);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::posix { class Environment; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
struct tests::unit::posix::Environment : public cppunit::test::Fixture {
  auto test_getenv_1arg_template() -> void;
  auto test_getenv_2arg_template() -> void;
  auto test_secure_getenv_1arg_template() -> void;
  auto test_secure_getenv_2arg_template() -> void;
  auto test_putenv() -> void;
  auto test_setenv() -> void;
  auto test_unsetenv() -> void;
  auto test_clearenv() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import tests.unit.EnvironmentSaveAndRestore
#import std.string_literals
using namespace std::string_literals;

#import sys.posix.getenv
auto tests::unit::posix::Environment::test_getenv_1arg_template() -> void {
  tests::unit::EnvironmentSaveAndRestore saver;
  auto r = ::sys::posix::getenv("PATH"s); // <--- test this
  CPPUNIT_ASSERT(good(r));
  std::string path = value(r);
  CPPUNIT_ASSERT(0 != path.size());
  std::cout << "PATH=" << path << '\n';
}

auto tests::unit::posix::Environment::test_getenv_2arg_template() -> void {
  tests::unit::EnvironmentSaveAndRestore saver;
  auto r = ::sys::posix::getenv<std::string>("PATH"s); // <--- test this
  CPPUNIT_ASSERT(good(r));
  std::string path = value(r);
  CPPUNIT_ASSERT(0 != path.size());
  std::cout << "PATH=" << path << '\n';
}

#import sys.posix.secure_getenv
auto tests::unit::posix::Environment::test_secure_getenv_1arg_template() -> void {
  // WATCHOUT - secure_getenv removes a bunch of elements from the environment in the name of "security"
  char const *const NAME = "TERM";
  auto r = ::sys::posix::secure_getenv(NAME); // <--- test this
  CPPUNIT_ASSERT(good(r));
  std::string val = value(r);
  std::cout << NAME << "=" << val << '\n';
  CPPUNIT_ASSERT(0 != val.size());
}

auto tests::unit::posix::Environment::test_secure_getenv_2arg_template() -> void {
  auto r = ::sys::posix::secure_getenv<std::string>("USER"); // <--- test this
  CPPUNIT_ASSERT(good(r));
  std::string user = value(r);
  std::cout << "USER=" << user << '\n';
  CPPUNIT_ASSERT(0 != user.size());
}

#import sys.posix.putenv
auto tests::unit::posix::Environment::test_putenv() -> void {
  tests::unit::EnvironmentSaveAndRestore saver;
  auto r0 = ::sys::posix::putenv("ANOTHER=value-0");
  CPPUNIT_ASSERT(good(r0));
  auto r1 = ::sys::posix::putenv("fANOTHER=value-1");
  CPPUNIT_ASSERT(good(r1)); // <------------------- will overwrite
  {
    auto g = ::sys::posix::getenv("fANOTHER");
    CPPUNIT_ASSERT(good(g));
    std::string const expected("value-1");
    std::string const actual = value(g);
    CPPUNIT_ASSERT(expected == actual);
  }
  auto r2 = ::sys::posix::putenv("fANOTHER=value-3");
  CPPUNIT_ASSERT(good(r2)); // <------------------- will overwrite
  {
    auto g = ::sys::posix::getenv("fANOTHER");
    CPPUNIT_ASSERT(good(g));
    std::string const expected("value-3");
    std::string const actual = value(g);
    CPPUNIT_ASSERT(expected == actual);
  }
}

#import sys.posix.setenv
auto tests::unit::posix::Environment::test_setenv() -> void {
  tests::unit::EnvironmentSaveAndRestore saver;
  auto r0 = ::sys::posix::setenv("fSOME", "value-0", false);
  CPPUNIT_ASSERT(good(r0));
  auto r1 = ::sys::posix::setenv("fSOME", "value-1", false);
  CPPUNIT_ASSERT(good(r1)); // <------------------- not overwrite
  auto r2 = ::sys::posix::setenv("fSOME", "value-2", true);
  CPPUNIT_ASSERT(good(r2)); // <------------------- did overwrite
  auto r3 = ::sys::posix::getenv("fSOME");
  CPPUNIT_ASSERT(good(r3));
  std::string const expected("value-2");
  std::string const actual = value(r3);
  CPPUNIT_ASSERT(expected == actual);
}

#import sys.posix.unsetenv
auto tests::unit::posix::Environment::test_unsetenv() -> void {
  tests::unit::EnvironmentSaveAndRestore saver;
  auto r0 = ::sys::posix::setenv("fSOME", "value-0", false);
  CPPUNIT_ASSERT(good(r0));
  auto r1 = ::sys::posix::setenv("fSOME", "value-1", false);
  CPPUNIT_ASSERT(good(r1)); // <------------------- not overwrite
  auto r2 = ::sys::posix::setenv("fSOME", "value-2", true);
  CPPUNIT_ASSERT(good(r2)); // <------------------- did overwrite
  auto r3 = ::sys::posix::getenv("fSOME");
  CPPUNIT_ASSERT(good(r3));
  std::string const expected("value-2");
  std::string const actual = value(r3);
  CPPUNIT_ASSERT(expected == actual);
  auto u = ::sys::posix::unsetenv("fSOME"); // <-------- test this
  CPPUNIT_ASSERT(good(u));
  auto g = ::sys::posix::getenv("fSOME");
  CPPUNIT_ASSERT(!good(g));
}

#import tests.unit.EnvironmentSaveAndRestore
#import sys.posix.clearenv
auto tests::unit::posix::Environment::test_clearenv() -> void {
  tests::unit::EnvironmentSaveAndRestore saver;
  { // before
    auto r = ::sys::posix::getenv("PATH");
    CPPUNIT_ASSERT(good(r));
  }
  auto r = ::sys::posix::clearenv(); // <------------ test this
  CPPUNIT_ASSERT(good(r));  
  { // after
    auto r = ::sys::posix::getenv("PATH");
    CPPUNIT_ASSERT(!good(r));
  }
}
#import tests.unit.posix.Getenv
#import rigging.suite.io
auto tests::unit::posix::Environment::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  using ::rigging::suite::call; // because namespace tests::unit::call occludes
  Stream series("environment");
  series << []() {
             Stream get{"getenv"};
             get << call("1", &Environment::test_getenv_1arg_template)
                 << call("2", &Environment::test_getenv_2arg_template)
                 << add<Getenv>()
               ;
             return get;
           }()
         << []() {
              Stream get{"secure_getenv"};
              get << call("1", &Environment::test_secure_getenv_1arg_template)
                  << call("2", &Environment::test_secure_getenv_2arg_template)
                ;
              return get;
            }()
    << call("putenv", &Environment::test_putenv)
    << call("setenv", &Environment::test_setenv)
    << call("unsetenv", &Environment::test_unsetenv)
    << call("clearenv", &Environment::test_clearenv)
    ;
  return finalize(series);
}
#endiv

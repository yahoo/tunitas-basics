// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import tests.unit.posix.Fixture
#endiv
#divert <cpp>
#import sys.posix.IPPROTO
#import sys.posix.SOCK
#import sys.posix.AF.IN
#import sys.posix.PF.IN
#import sys.posix.close
#import sys.posix.in.socket
namespace tests::unit::posix::fixture {
  namespace {
    namespace bundle {
      using AF = six::AF::IN;
      using PF = six::PF::IN;
      using SOCK = six::SOCK;
      using IPPROTO = six::IPPROTO;
      using Closer = guardian::Closer<guardian::closer::Native>;
      using six::in::native::socket;
    }
  }
  auto Fixture::test_socket_in_type() -> void {
    using namespace bundle;
    Closer doomed{socket(AF::INET4, SOCK::STREAM)};
  }
  auto Fixture::test_socket_in_specification() -> void {
    using namespace bundle;
    Closer doomed{socket(AF::INET6, SOCK::DATAGRAM | SOCK::NONE)};
  }
  auto Fixture::test_socket_in_type_options() -> void {
    using namespace bundle;
    Closer doomed{ip::socket(AF::INET4, SOCK::STREAM, SOCK::NONE)};
  }
  auto Fixture::test_socket_in_type_ipproto() -> void {
    using namespace bundle;
    Closer doomed{ip::socket(AF::INET4, SOCK::STREAM, PF::UNSPECIFIED)};
  }
  auto Fixture::test_socket_in_specification__ipproto() -> void {
    using namespace bundle;
    Closer doomed{ip::socket(AF::INET4, SOCK::STREAM | SOCK::CLOEXEC, PF::UNSPECIFIED)};
  }
  auto Fixture::test_socket_in_type_ipproto_options() -> void {
    using namespace bundle;
    Closer doomed{ip::socket(AF::INET6, SOCK::STREAM, PF::UNSPECIFIED, SOCK::CLOEXEC)};
  }
  auto Fixture::test_socket_in_DATAGRAM_ipproto_0() -> void {
    using namespace bundle;
    auto const ZERO = IPPROTO::Type{};
    // Ibidem.
    Closer doomed{ip::socket(AF::INET4, SOCK::DATAGRAM, ZERO)};
  }
  auto Fixture::test_socket_in_DATAGRAM_ipproto_4() -> void {
    using namespace bundle;
    // Ibidem.
    Closer doomed{ip::socket(AF::INET4, SOCK::DATAGRAM, IPPROTO::UDP)};
  }
  auto Fixture::test_socket_in_DATAGRAM_ipproto_6() -> void {
    using namespace bundle;
    // Ibidem.
    Closer doomed{ip::socket(AF::INET6, SOCK::DATAGRAM, IPPROTO::UDP)};
  }
  auto Fixture::test_socket_in_type_case1() -> void {
    using namespace bundle;
    // Ibidem.
    Closer doomed{socket(AF::INET4, SOCK::DGRAM)};
  }
  auto Fixture::test_socket_in_type_case2() -> void {
    using namespace bundle;
    // Ibidem.
    Closer doomed{socket(AF::INET6, SOCK::DGRAM)};
  }
  auto Fixture::test_socket_in_specification_ipproto() -> void {
    using namespace bundle;
    auto const sss = SOCK::Specification{SOCK::DGRAM};
    auto const ttt = socket(AF::INET6, sss, PF::UNSPEC);
    Closer doomed{ttt};
  }
  auto Fixture::test_socket_in_compose_ipproto() -> void {
    using namespace bundle;
    Closer doomed{socket(AF::INET6, SOCK::DGRAM|SOCK::CLOEXEC, PF::UNSPEC)};
  }
  auto Fixture::test_socket_in_specification() -> void {
    using namespace bundle;
    auto const sss = SOCK::Specification{SOCK::DGRAM};
    Closer doomed{socket(AF::INET6, sss)};
  }
  auto Fixture::test_socket_in_compose() -> void {
    using namespace bundle;
    Closer doomed{socket(AF::INET6, SOCK::DGRAM|SOCK::CLOEXEC)};
  }
  auto Fixture::test_socket_in_specification_ipproto() -> void {
    using namespace bundle;
    auto const sss = SOCK::Specification{SOCK::DGRAM};
    Closer doomed{socket(AF::INET6, sss, IPPROTO::NONE)};
  }
  auto Fixture::test_socket_in_compose_ipproto() -> void {
    using namespace bundle;
    Closer doomed1{socket(AF::INET6, SOCK::DGRAM|SOCK::CLOEXEC, IPPROTO::IP)};
    Closer doomed2{socket(AF::INET4, SOCK::STREAM, IPPROTO::UDP)};
  }
  auto Fixture::test_socket_in_type_ipproto_options() -> void {
    using namespace bundle;
    // [[FIXTHIS]] this is basically "socket4" patterned after "accept4" ... why not just add one more option?  Cleaner, no?
    Closer doomed1{socket(AF::INET6, SOCK::DGRAM | SOCK::Options{}, IPPROTO::UDP)};
    Closer doomed2{socket(AF::INET6, SOCK::DGRAM | SOCK::CLOEXEC, IPPROTO::UDP)};
  }
}
#endiv

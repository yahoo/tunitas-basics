// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <cpp>
#import tests.unit.posix.Fixture
#import sys.posix.sockaddr
#import sys.posix.sockaddr_in4
#import sys.posix.sockaddr_in6
#import sys.posix.sockaddr_un
#import sys.posix.clear.sockaddr
#import sys.posix.zero.sockaddr
namespace tests::unit::posix::fixture {
  auto Fixture::test_sockaddr() -> void {
    using Subject = ::sys::posix::sockaddr;
    auto subject = Subject{};
    // ADL won't find these because sockaddr is really ::sockaddr
    ::sys::posix::clear(subject);
    ::sys::posix::zero(subject);
    ::sys::posix::clear(&subject, sizeof (subject));
    ::sys::posix::zero(&subject, sizeof (subject));
    CPPUNIT_ASSERT(true);
  }
  auto Fixture::test_sockaddr_in4() -> void {
    using Subject = ::sys::posix::sockaddr_in4;
    using namespace sys::posix;
    auto subject = Subject{};
    clear(subject);
    zero(subject);
    CPPUNIT_ASSERT(true);
  }
  auto Fixture::test_sockaddr_in6() -> void {
    using Subject = ::sys::posix::sockaddr_in6;
    using namespace sys::posix;
    auto subject = Subject{};
    clear(subject);
    zero(subject);
    CPPUNIT_ASSERT(true);
  }
  auto Fixture::test_sockaddr_un() -> void {
    using Subject = ::sys::posix::sockaddr_un;
    using namespace sys::posix;
    auto subject = Subject{};
    clear(subject);
    zero(subject);
    CPPUNIT_ASSERT(true);
  }
}
#endiv

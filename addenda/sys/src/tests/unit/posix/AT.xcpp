// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::posix { class AT; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.posix.AT
#import std.vector
struct tests::unit::posix::AT : public cppunit::test::Fixture {
  auto setUp() -> void override final;
  auto tearDown() -> void override final;
  using Subject = ::sys::posix::AT;
  using Flag = Subject::Flag;
  using Flags = Subject::Flags;
  std::vector<Flag> some_flag_series;
  Flags no_flags;
  Flags all_flags;
  auto test_flag_universe() -> void;
  auto test_flags_universe() -> void;
  auto test_flag_constants() -> void;
  auto test_flags_constants() -> void;
  auto test_and_ss() -> void;
  auto test_and_s1() -> void;
  auto test_and_1s() -> void;
  auto test_and_11() -> void;
  auto test_and_assign() -> void;
  auto test_decumulate_and_assign() -> void;
  auto test_decumulate_via_rhs() -> void;
  auto test_or_ss() -> void;
  auto test_or_s1() -> void;
  auto test_or_1s() -> void;
  auto test_or_11() -> void;
  auto test_or_assign() -> void;
  auto test_accumulate_or_assign() -> void;
  auto test_accumulate_via_rhs() -> void;
  auto test_contains() -> void;
  auto test_flag() -> void;
  auto test_is_flag() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import unit.rigging.lhs
#import unit.rigging.clear
using unit::rigging::lhs;
using unit::rigging::clear;
namespace tests::unit::posix {
  auto AT::setUp() -> void {
    using v = std::vector<Flag>;
    // WATCHOUT - Flag::FDCWD isn't a "flag" so much as a special value (-100, 0xf...f9c)
    lhs(some_flag_series) = v{Flag::SYMLINK_NOFOLLOW, 
                              Flag::REMOVEDIR, 
                              Flag::SYMLINK_FOLLOW, 
                              Flag::NO_AUTOMOUNT, 
                              Flag::EMPTY_PATH,
                              Flag::EACCESS};
    lhs(no_flags) = Flags::NONE;
    lhs(all_flags) = Flags(0x1f00);
    CPPUNIT_ASSERT(0 != some_flag_series.size());
    CPPUNIT_ASSERT(0 == (int)no_flags);
    CPPUNIT_ASSERT(0 != (int)all_flags);
  }
  auto AT::tearDown() -> void {
    lhs(some_flag_series) = clear;
    lhs(no_flags) = clear;
    lhs(all_flags) = clear;
  }
  auto AT::test_flag_universe() -> void {
    unsigned count = 0;
    for (auto f : some_flag_series) {
      CPPUNIT_ASSERT((int) f != 0);
      count++;
    }
    CPPUNIT_ASSERT(0 < count);
  }
  auto AT::test_flags_universe() -> void {
    unsigned count = 0;
    Flags accumulate = Flags();
    for (auto f : some_flag_series) {
      CPPUNIT_ASSERT((int) f != 0);
      accumulate |= f;
      CPPUNIT_ASSERT((int) accumulate != 0);
      CPPUNIT_ASSERT((Flags)f == (f & accumulate));
      count++;
    }
    CPPUNIT_ASSERT(0 < count);
  }
  auto AT::test_flag_constants() -> void {
    // Utter them all [[FIXTHIS]] show that this really is all of them
    Flags f;
    f = Subject::SYMLINK_NOFOLLOW; 
    f = Subject::REMOVEDIR; 
    f = Subject::SYMLINK_FOLLOW; 
    f = Subject::NO_AUTOMOUNT; 
    f = Subject::EMPTY_PATH; 
    f = Subject::EACCESS; 
    CPPUNIT_ASSERT(Flag::EACCESS == f);
  }
  auto AT::test_flags_constants() -> void {
    // utter them all
    Flags s;
    s = Subject::NONE;
    CPPUNIT_ASSERT(Flags::NONE == s);
  }
  auto AT::test_and_ss() -> void {
    for (auto f : some_flag_series) {
      Flags fs = Flags(f);
      CPPUNIT_ASSERT(fs == (all_flags & fs));
      CPPUNIT_ASSERT(fs == (fs & fs));
    }
  }
  auto AT::test_and_s1() -> void {
    for (auto f : some_flag_series) {
      CPPUNIT_ASSERT(Flags(f) == (all_flags & f));
    }
  }
  auto AT::test_and_1s() -> void {
    for (auto f : some_flag_series) {
      CPPUNIT_ASSERT(Flags(f) == (f & all_flags));
    }
  }
  auto AT::test_and_11() -> void {
    for (auto f : some_flag_series) {
      CPPUNIT_ASSERT(Flags(f) == (f & f));
    }
  }
  auto AT::test_and_assign() -> void {
    for (auto f : some_flag_series) {
      Flags fs = all_flags;
      fs &= f;
      CPPUNIT_ASSERT(Flags(f) == fs);
    }
  }
  auto AT::test_decumulate_and_assign() -> void {
    Flags decumulator = all_flags;
    for (auto f : some_flag_series) {
      decumulator &= ~f;
    }
    CPPUNIT_ASSERT(0 == (int)Flags());
    CPPUNIT_ASSERT(decumulator == Flags());
  }
  auto AT::test_decumulate_via_rhs() -> void {
    Flags decumulator = all_flags;
    for (auto f : some_flag_series) {
      decumulator = decumulator & ~f;
    }
    CPPUNIT_ASSERT(0 == (int)Flags());
    CPPUNIT_ASSERT(decumulator == Flags());
  }
  auto AT::test_or_ss() -> void {
    for (auto f : some_flag_series) {
      Flags fs = Flags(f);
      CPPUNIT_ASSERT(all_flags == (all_flags | fs));
      CPPUNIT_ASSERT(fs == (Flags() | fs));
      CPPUNIT_ASSERT(fs == (fs | fs));
    }
  }
  auto AT::test_or_s1() -> void {
    for (auto f : some_flag_series) {
      CPPUNIT_ASSERT(all_flags == (all_flags | f));
      CPPUNIT_ASSERT(Flags(f) == (Flags() | f));
    }
  }
  auto AT::test_or_1s() -> void {
    for (auto f : some_flag_series) {
      CPPUNIT_ASSERT(all_flags == (f | all_flags));
      CPPUNIT_ASSERT(Flags(f) == (f | Flags()));
    }
  }
  auto AT::test_or_11() -> void {
    for (auto f : some_flag_series) {
      CPPUNIT_ASSERT(Flags(f) == (f | f));
      CPPUNIT_ASSERT(Flags(f) == (Flags() | f));
      CPPUNIT_ASSERT(Flags(f) == (f | Flags()));
    }
  }
  auto AT::test_or_assign() -> void {
    for (auto f : some_flag_series) {
      Flags fs = Flags();
      fs |= f;
      CPPUNIT_ASSERT(Flags(f) == fs);
    }
  }
  auto AT::test_accumulate_or_assign() -> void {
    Flags accumulator = no_flags;
    for (auto f : some_flag_series) {
      accumulator |= f;
    }
    CPPUNIT_ASSERT(0 != (int)all_flags);
    CPPUNIT_ASSERT(accumulator == all_flags);
  }
  auto AT::test_accumulate_via_rhs() -> void {
    Flags accumulator = no_flags;
    for (auto f : some_flag_series) {
      accumulator = accumulator | f;
    }
    CPPUNIT_ASSERT(0 != (int)all_flags);
    CPPUNIT_ASSERT(accumulator == all_flags);
  }
  auto AT::test_contains() -> void {
    for (auto f : some_flag_series) {
      CPPUNIT_ASSERT(contains(all_flags, f));
      CPPUNIT_ASSERT(!contains(no_flags, f));
      CPPUNIT_ASSERT(!contains(all_flags & ~f, f));
      CPPUNIT_ASSERT(!contains(no_flags & ~f, f));
    }
  }
  auto AT::test_flag() -> void {
    using sys::at::as;
    for (auto item : some_flag_series) {
      Flags fs = Flags{item};
      Flag f = Subject::as<Flag>(item); // <---- test this
      CPPUNIT_ASSERT(item == f);
      CPPUNIT_ASSERT(Subject::as<Flag>(fs) == as<Flag>(f));
    }
  }
  auto AT::test_is_flag() -> void {
    CPPUNIT_ASSERT(!is_flag(all_flags));
    CPPUNIT_ASSERT(is_flag(some_flag_series.front()));
    CPPUNIT_ASSERT(is_flag(some_flag_series.back()));
    CPPUNIT_ASSERT(!is_flag(no_flags));
    for (auto item : some_flag_series) {
      Flag f = item;
      CPPUNIT_ASSERT(is_flag(f)); // <---- is_flag(Flag)
      Flags fs = Flags{f};
      CPPUNIT_ASSERT(is_flag(fs)); // <--- is_flag(Flags)
    }
  }
}
#import rigging.suite.io
auto tests::unit::posix::AT::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("AT");
  series << call("flag_universe", &AT::test_flag_universe)
         << call("flags_universe", &AT::test_flags_universe)
         << call("flag_constants", &AT::test_flag_constants)
         << call("flags_constants", &AT::test_flags_constants)
         << call("and_ss", &AT::test_and_ss)
         << call("and_s1", &AT::test_and_s1)
         << call("and_1s", &AT::test_and_1s)
         << call("and_11", &AT::test_and_11)
         << call("and_assign", &AT::test_and_assign)
         << call("decumulate_and_assign", &AT::test_decumulate_and_assign)
         << call("decumulate_via_rhs", &AT::test_decumulate_via_rhs)
         << call("or_ss", &AT::test_or_ss)
         << call("or_s1", &AT::test_or_s1)
         << call("or_1s", &AT::test_or_1s)
         << call("or_11", &AT::test_or_11)
         << call("or_assign", &AT::test_or_assign)
         << call("accumulate_or_assign", &AT::test_accumulate_or_assign)
         << call("accumulate_via_rhs", &AT::test_accumulate_via_rhs)
         << call("contains", &AT::test_contains)
         << call("flag", &AT::test_flag)
         << call("is_flag", &AT::test_is_flag)
         << END;
  return finalize(series);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace posix {
      class Fork;
    }
  }
}
#divert </fpp>
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture

class tests::unit::posix::Fork : public cppunit::test::Fixture {
public:
  auto test_syscall() -> void;
  auto test_pid() -> void;
  auto test_is_parent() -> void;
  auto test_is_child() -> void;
  auto test_is_error() -> void;

  static auto suite() -> cppunit::Test *;
};
#divert </hpp>
#divert <cpp>
#import exit
#import std.logic_error
#import sys.posix.fork
#import sys.posix.exec
auto tests::unit::posix::Fork::test_syscall() -> void {
  // The basic pattern of use
  auto r = ::sys::posix::fork();
  if (is_error(r)) {
    CPPUNIT_ASSERT(false);
  } else if (is_parent(r)) {
    CPPUNIT_ASSERT(::sys::id::Process{} != pid(r));
  } else if (is_child(r)) {
    exit(0);
  } else {
    throw std::logic_error("what else is there?");
  }
}

auto tests::unit::posix::Fork::test_pid() -> void {
  // The test_fork() covers this
  CPPUNIT_ASSERT(true);
}

auto tests::unit::posix::Fork::test_is_parent() -> void {
  // The test_fork() covers this
  CPPUNIT_ASSERT(true);
}

auto tests::unit::posix::Fork::test_is_child() -> void {
  // The test_fork() covers this
  CPPUNIT_ASSERT(true);
}

auto tests::unit::posix::Fork::test_is_error() -> void {
  // The test_fork() covers this
  CPPUNIT_ASSERT(true);
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
#import unit.rigging.suite.add
auto tests::unit::posix::Fork::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  using ::unit::rigging::suite::add;
  using ::unit::rigging::suite::call;
  Stream s("Fork");
  s << call("syscall", &Fork::test_syscall)
    << call("pid", &Fork::test_pid)
    << call("is_parent", &Fork::test_is_parent)
    << call("is_child", &Fork::test_is_child)
    << call("is_error", &Fork::test_is_error)
    ;
  return finalize(s);
}
#divert </cpp>

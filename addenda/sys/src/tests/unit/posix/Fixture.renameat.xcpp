// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import tests.unit.posix.Fixture
#endiv
#divert <cpp>
#import sys.posix.O
#import sys.posix.OK
#import sys.posix.access
#import sys.posix.mktemp
#import sys.posix.renameat
#import sys.posix.open
#import sys.posix.touch
#import sys.posix.unlink
auto tests::unit::posix::fixture::Fixture::test_renameat() -> void {
  using O = six::O;
  using OK = six::OK;
  std::string const tmpdir = "/tmp";
  auto t = nat::open(tmpdir, O::DIRECTORY|O::RDONLY);
  CPPUNIT_ASSERT(good(t));
  guardian::Close guard0(value(t));
  auto m = six::mktemp(tmpdir + "/t99.tests.unit.posix.renameat.XXXXXX");
  CPPUNIT_ASSERT(good(m));
  std::string const specimen_a = value(m).native() + ".a";
  std::string const specimen_b = value(m).native() + ".b";
  std::string const subspecimen_a = specimen_a.substr(tmpdir.size()+1);
  std::string const subspecimen_b = specimen_b.substr(tmpdir.size()+1);
  guardian::Cleanup_Spackled_Names cleanup0{specimen_a};
  guardian::Cleanup_Spackled_Names cleanup1{specimen_b};
  auto c = six::touch(specimen_a, 0666);
  CPPUNIT_ASSERT(good(c));
  auto r = six::renameat(value(t), subspecimen_a, value(t), subspecimen_b); // <------------- test this
  CPPUNIT_ASSERT(good(r)); // <------------------------------- show your work
  auto aa = six::access(specimen_a, OK::F);
  CPPUNIT_ASSERT(!good(aa));
  auto ab = six::access(specimen_b, OK::F);
  CPPUNIT_ASSERT(good(ab));
  auto ua = six::unlink(specimen_a);
  CPPUNIT_ASSERT(!good(ua)); // this one is gone now, having been renamed.
  auto ub = six::unlink(specimen_b);
  CPPUNIT_ASSERT(good(ub)); // this one exists to be removed.
}
#endiv

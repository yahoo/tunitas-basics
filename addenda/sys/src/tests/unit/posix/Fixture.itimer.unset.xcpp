// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <cpp>
#import tests.unit.posix.Fixture
#import tests.unit.itimer.bundle
namespace tests::unit::posix::fixture {
  auto Fixture::test_unsetitimer_returning() -> void {
    using namespace unit::itimer::bundle;
    // Not going to attempt to set any itimers.
    // Just show that unset can be called.
    auto un = unsetitimer(Which::REAL); // <------------------------------ test this
    CPPUNIT_ASSERT(good(un) || fail(un));
    if (good(un)) {
      // [[FIXTHIS]] this will never be called if there are no itimers running (and there shouldn't be)
      // We can prove that it compiles
      itimerval val = value(un);
      CPPUNIT_ASSERT(sizeof (val));
    }
  }
  auto Fixture::test_unsetitimer_suppressing() -> void {
    using namespace unit::itimer::bundle;
    auto un = unsetitimer(Which::REAL, nullptr); // <------------------------------ test this
    CPPUNIT_ASSERT(good(un) || fail(un));
  }
  auto Fixture::test_unsetitimer_filling() -> void {
    using namespace unit::itimer::bundle;
    auto oldie = itimerval{};
    auto un = unsetitimer(Which::REAL, oldie); // <------------------------------ test this
    CPPUNIT_ASSERT(good(un) || fail(un));
  }
}
#endiv

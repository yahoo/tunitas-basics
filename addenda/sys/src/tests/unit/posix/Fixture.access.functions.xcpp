// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import tests.unit.posix.Fixture
#endiv
#divert <cpp>
#import sys.posix.creat
#import sys.posix.mktemp
#import sys.posix.exists
auto tests::unit::posix::fixture::Fixture::test_exists_no() -> void {
  auto r = six::mktemp("/tmp/t99.tests.unit.posix.exists.nosuch.XXXXXX");
  CPPUNIT_ASSERT(good(r));
  std::string specimen = value(r);
  guardian::Unlink guard(specimen);
  CPPUNIT_ASSERT_EQUAL(false, six::exists(specimen)); // <--------- test this
}
auto tests::unit::posix::fixture::Fixture::test_exists_yes() -> void {
  auto r = six::mktemp("/tmp/t99.tests.unit.posix.exists.XXXXXX");
  CPPUNIT_ASSERT(good(r));
  std::string specimen = value(r);
  guardian::Unlink guard(specimen);
  auto c = nat::creat(specimen, 0600);
  CPPUNIT_ASSERT(good(c));
  CPPUNIT_ASSERT_EQUAL(true, six::exists(specimen)); // <--------- test this
}
#import sys.posix.executable
auto tests::unit::posix::fixture::Fixture::test_executable_no() -> void {
  auto r = six::mktemp("/tmp/t99.tests.unit.posix.unexecutable.XXXXXX");
  CPPUNIT_ASSERT(good(r));
  std::string specimen = value(r);
  guardian::Unlink guard(specimen);
  auto c = nat::creat(specimen, 0666); // <-- not executable
  CPPUNIT_ASSERT(good(c));
  CPPUNIT_ASSERT_EQUAL(false, six::executable(specimen)); // <--------- test this
}
auto tests::unit::posix::fixture::Fixture::test_executable_yes() -> void {
  auto r = six::mktemp("/tmp/t99.tests.unit.posix.executable.XXXXXX");
  CPPUNIT_ASSERT(good(r));
  std::string specimen = value(r);
  guardian::Unlink guard(specimen);
  auto c = nat::creat(specimen, 0111); // <-- executable
  CPPUNIT_ASSERT(good(c));
  CPPUNIT_ASSERT_EQUAL(true, six::executable(specimen)); // <--------- test this
}
#import sys.posix.readable
auto tests::unit::posix::fixture::Fixture::test_readable_no() -> void {
  auto r = six::mktemp("/tmp/t99.tests.unit.posix.readable.XXXXXX");
  CPPUNIT_ASSERT(good(r));
  std::string specimen = value(r);
  guardian::Unlink guard(specimen);
  auto c = nat::creat(specimen, 0400); // <-- readable, but not writable
  CPPUNIT_ASSERT(good(c));
  CPPUNIT_ASSERT_EQUAL(true, six::readable(specimen)); // <--------- test this
}
auto tests::unit::posix::fixture::Fixture::test_readable_yes() -> void {
  auto r = six::mktemp("/tmp/t99.tests.unit.posix.unreadable.XXXXXX");
  CPPUNIT_ASSERT(good(r));
  std::string specimen = value(r);
  guardian::Unlink guard(specimen);
  auto c = nat::creat(specimen, 0200); // <-- writable, but not readable
  CPPUNIT_ASSERT(good(c));
  CPPUNIT_ASSERT_EQUAL(false, six::readable(specimen)); // <--------- test this
}
#import sys.posix.writable
auto tests::unit::posix::fixture::Fixture::test_writable_no() -> void {
  auto r = six::mktemp("/tmp/t99.tests.unit.posix.unwritable.XXXXXX");
  CPPUNIT_ASSERT(good(r));
  std::string specimen = value(r);
  guardian::Unlink guard(specimen);
  auto c = nat::creat(specimen, 0200); // <-- writable, but not readable
  CPPUNIT_ASSERT(good(c));
  CPPUNIT_ASSERT_EQUAL(true, six::writable(specimen)); // <--------- test this
}
auto tests::unit::posix::fixture::Fixture::test_writable_yes() -> void {
  auto r = six::mktemp("/tmp/t99.tests.unit.posix.writable.XXXXXX");
  CPPUNIT_ASSERT(good(r));
  std::string specimen = value(r);
  guardian::Unlink guard(specimen);
  auto c = nat::creat(specimen, 0400); // <-- readable, but not writable
  CPPUNIT_ASSERT(good(c));
  CPPUNIT_ASSERT_EQUAL(false, six::writable(specimen)); // <--------- test this
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#include <hpp/tests.unit.posix.LOCK>
namespace tests::unit::posix {
  inline constexpr auto FLOCK = lib::Call::FLOCK;
  template<> struct LOCK::Constants<FLOCK>;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.posix.LOCK
#import sys.flock.Operation
#import sys.flock.Options
#import sys.flock.Specification
namespace tests::unit::posix {
  template<> struct LOCK::Constants<FLOCK> : public cppunit::test::Fixture {
    using LOCK = ::sys::posix::LOCK;
    auto test_call() -> void;
    auto test_assignment() -> void;
    static auto suite() -> cppunit::Test *;
  protected:
    using Specification = ::sys::flock::Specification;
    using Operation = ::sys::flock::Operation;
    using Options = ::sys::flock::Options;
    // Merely show that it can be called unambiguously
    static auto flockalike(Specification) -> void;
    static auto flockalike(Operation, Options) -> void;
  };
}
#endiv
#divert <cpp>
namespace tests::unit::posix {
  auto LOCK::Constants<FLOCK>::flockalike(Specification) -> void      { CPPUNIT_ASSERT(true); }
  auto LOCK::Constants<FLOCK>::flockalike(Operation, Options) -> void { CPPUNIT_ASSERT(true); }
  auto LOCK::Constants<FLOCK>::test_call() -> void {
    flockalike(LOCK::SHARED);
    flockalike(LOCK::EXCLUSIVE);
    flockalike(LOCK::UNFLOCK);
    flockalike(LOCK::UNLOCK<LOCK::FLOCK>);
    flockalike(LOCK::SH);
    flockalike(LOCK::EX);
    flockalike(LOCK::FLOCK::UN);
    flockalike(LOCK::SH | LOCK::ADVISORY);
    flockalike(LOCK::SH | LOCK::NONBLOCK);
    flockalike(LOCK::SH | LOCK::MANDATORY);
  }
  auto LOCK::Constants<FLOCK>::test_assignment() -> void {
    LOCK::Operation<LOCK::FLOCK> op;
    op = LOCK::SHARED;
    op = LOCK::EXCLUSIVE;
    op = LOCK::UNFLOCK;
    op = LOCK::UNLOCK<LOCK::FLOCK>;
    flockalike(op);
    LOCK::Options<LOCK::FLOCK> ns;
    ns = LOCK::ADVISORY;
    ns = LOCK::NONBLOCK;
    ns = LOCK::MANDATORY;
    ns = LOCK::NB;
    ns = LOCK::MAND;
    flockalike(op, ns);
  }
}
#import rigging.suite.io
namespace tests::unit::posix {
  auto LOCK::Constants<FLOCK>::suite() -> cppunit::Test * {
    using namespace ::rigging::suite;
    using ::rigging::suite::call; // reminder: tests::unit::call occludes this
    Stream series{"Constants<FLOCK>"};
    series << call("assignment", &Constants::test_assignment)
           << call("call", &Constants::test_call)
           << END;
    return finalize(series);
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::posix { class F; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.posix.F
#import sys.f.Function
#import tests.lib.Call
struct tests::unit::posix::F : public cppunit::test::Fixture {
  using Subject = ::sys::posix::F;
  auto test_mentions() -> void;
  auto test_calls() -> void;
  static auto suite() -> cppunit::Test *;
  struct DN;
  struct OWNER;
  struct SEAL;
  template<lib::Call> struct Constants;
protected:
  using Function = ::sys::f::Function;
  static auto fcntlalike(Function) -> void;
};
#endiv
#divert <cpp>
namespace tests::unit::posix {
  // Show that the thing is callable.  That is all.
  auto F::fcntlalike(Function) -> void { CPPUNIT_ASSERT(true); }
  auto F::test_mentions() -> void {
    Subject::Function f;
    f = Subject::DUPFD;
    f = Subject::DUPFD_CLOEXEC;
    f = Subject::GETFD;
    f = Subject::SETFD;
    f = Subject::GETFL;
    f = Subject::SETFL;
    f = Subject::GETLK;
    f = Subject::SETLK;
    f = Subject::SETLKW;
    f = Subject::GETLK64;
    f = Subject::SETLK64;
    f = Subject::SETLKW64;
    f = Subject::OFD_GETLK;
    f = Subject::OFD_SETLK;
    f = Subject::OFD_SETLKW;
#ifdef F_OFD_GETLK64
    f = Subject::OFD_GETLK64;
    f = Subject::OFD_SETLK64;
    f = Subject::OFD_SETLKW64;
#endif
    f = Subject::SETLEASE;
    f = Subject::GETLEASE;
    f = Subject::SETPIPE_SZ;
    f = Subject::GETPIPE_SZ;
    f = Subject::GETOWN;
    f = Subject::SETOWN;
    f = Subject::GETOWN_EX;
    f = Subject::SETOWN_EX;
    f = Subject::GETSIG;
    f = Subject::SETSIG;
    f = Subject::NOTIFY;
    f = Subject::ADD_SEALS;
    f = Subject::GET_SEALS;
    f = Subject::GET_RW_HINT;
    f = Subject::SET_RW_HINT;
    f = Subject::GET_RWH_FILE;
    f = Subject::SET_RWH_FILE;
    f = Subject::GET_RWH_PROCESS;
    f = Subject::SET_RWH_PROCESS;
    fcntlalike(f);
  }
  auto F::test_calls() -> void {
    fcntlalike(Subject::DUPFD);
    fcntlalike(Subject::DUPFD_CLOEXEC);
    fcntlalike(Subject::GETFD);
    fcntlalike(Subject::SETFD);
    fcntlalike(Subject::GETFL);
    fcntlalike(Subject::SETFL);
    fcntlalike(Subject::GETLK);
    fcntlalike(Subject::SETLK);
    fcntlalike(Subject::SETLKW);
    fcntlalike(Subject::OFD_GETLK);
    fcntlalike(Subject::OFD_SETLK);
    fcntlalike(Subject::OFD_SETLKW);
    fcntlalike(Subject::GETLOCK);
    fcntlalike(Subject::SETLOCK);
    fcntlalike(Subject::SETLOCK_WAITING);
    fcntlalike(Subject::GETLOCK_PROCESS);
    fcntlalike(Subject::SETLOCK_PROCESS);
    fcntlalike(Subject::SETLOCK_PROCESS_WAITING);
    fcntlalike(Subject::GETLOCK_FILE);
    fcntlalike(Subject::SETLOCK_FILE);
    fcntlalike(Subject::SETLOCK_FILE_WAITING);
    fcntlalike(Subject::GETLK64);
    fcntlalike(Subject::SETLK64);
    fcntlalike(Subject::SETLKW64);
#ifdef F_OFD_GETLK64
    fcntlalike(Subject::OFD_GETLK64);
    fcntlalike(Subject::OFD_SETLK64);
    fcntlalike(Subject::OFD_SETLKW64);
#endif
    fcntlalike(Subject::GETLOCK64);
    fcntlalike(Subject::SETLOCK64);
    fcntlalike(Subject::SETLOCK64_WAITING);
    fcntlalike(Subject::GETLOCK64_PROCESS);
    fcntlalike(Subject::SETLOCK64_PROCESS);
    fcntlalike(Subject::SETLOCK64_PROCESS_WAITING);
#ifdef F_OFD_GETLK64
    fcntlalike(Subject::GETLOCK64_FILE);
    fcntlalike(Subject::SETLOCK64_FILE);
    fcntlalike(Subject::SETLOCK64_FILE_WAITING);
#endif
    fcntlalike(Subject::SETLEASE);
    fcntlalike(Subject::GETLEASE);
    fcntlalike(Subject::SETPIPE_SZ);
    fcntlalike(Subject::GETPIPE_SZ);
    fcntlalike(Subject::SETPIPE_SIZE);
    fcntlalike(Subject::GETPIPE_SIZE);
    fcntlalike(Subject::NOTIFY);
    fcntlalike(Subject::GETOWN);
    fcntlalike(Subject::SETOWN);
    fcntlalike(Subject::GETOWN_EX);
    fcntlalike(Subject::SETOWN_EX);
    fcntlalike(Subject::GETOWNER);
    fcntlalike(Subject::SETOWNER);
    fcntlalike(Subject::GETOWNER_EX);
    fcntlalike(Subject::SETOWNER_EX);
    fcntlalike(Subject::GETSIG);
    fcntlalike(Subject::SETSIG);
    fcntlalike(Subject::GETSIGNAL);
    fcntlalike(Subject::SETSIGNAL);
    fcntlalike(Subject::ADD_SEALS);
    fcntlalike(Subject::GET_SEALS);
    fcntlalike(Subject::GET_RW_HINT);
    fcntlalike(Subject::SET_RW_HINT);
    fcntlalike(Subject::GET_RWH_PROCESS);
    fcntlalike(Subject::SET_RWH_PROCESS);
    fcntlalike(Subject::GET_RWH_FILE);
    fcntlalike(Subject::SET_RWH_FILE);
#ifdef F_GETOWNER_UIDS
    fcntlalike(Subject::GETOWNER_UIDS);
#endif
  }
}
#import tests.unit.posix.F.OWNER
#import tests.unit.posix.F.SEAL
#import tests.unit.posix.F.Constants.FCNTL
#import tests.unit.posix.F.Constants.LOCKF
#import rigging.suite.io
auto tests::unit::posix::F::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  using ::rigging::suite::call; // because namespace tests::unit::call occludes
  Stream series("F");
  series << call("mentions", &F::test_mentions)
         << call("calls", &F::test_calls)
         << add<OWNER>()
         << add<SEAL>()
         << add<Constants<FCNTL>>()
         << add<Constants<LOCKF>>()
         << END;
  return finalize(series);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import tests.unit.posix.Fixture
#endiv
#divert <cpp>
#import sys.posix.F
#import sys.posix.cloexec
#import sys.posix.fcntl
auto tests::unit::posix::fixture::Fixture::test_cloexec_get() -> void {
  using F = sys::posix::F;
  auto duped = nat::fcntl(0, F::DUPFD, 0);
  CPPUNIT_ASSERT(good(duped));
  guardian::Closer<guardian::closer::Native> guard{value(duped)};
  auto subject = value(duped);
  auto got = nat::cloexec(subject); // <---------------------- test this
  CPPUNIT_ASSERT(good(got) || !good(got));
}
auto tests::unit::posix::fixture::Fixture::test_cloexec_set_on() -> void {
  using F = sys::posix::F;
  auto duped = nat::fcntl(0, F::DUPFD, 0);
  CPPUNIT_ASSERT(good(duped));
  auto subject = value(duped);
  guardian::Closer<guardian::closer::Native> guard{subject};
  auto done = nat::cloexec(subject, true); // <---------------------- test this
  CPPUNIT_ASSERT(good(done));
  auto got = nat::cloexec(subject);
  CPPUNIT_ASSERT(good(got));
  CPPUNIT_ASSERT(true == value(got));
}
auto tests::unit::posix::fixture::Fixture::test_cloexec_set_off() -> void {
  using F = sys::posix::F;
  auto duped = nat::fcntl(0, F::DUPFD, 0);
  CPPUNIT_ASSERT(good(duped));
  auto subject = value(duped);
  guardian::Closer<guardian::closer::Native> guard{subject};
  auto done = nat::cloexec(subject, false); // <---------------------- test this
  CPPUNIT_ASSERT(good(done));
  auto got = nat::cloexec(subject);
  CPPUNIT_ASSERT(good(got));
  CPPUNIT_ASSERT(false == value(got));
}
#endiv

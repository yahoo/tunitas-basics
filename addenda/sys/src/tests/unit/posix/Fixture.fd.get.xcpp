// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import tests.unit.posix.Fixture
#endiv
#divert <cpp>
#import sys.posix.FD
#import sys.posix.O
#import sys.posix.getfd
#import sys.posix.mktemp
#import sys.posix.open
#import sys.posix.setfd
auto tests::unit::posix::fixture::Fixture::test_getfd_1() -> void {
  using FD = six::FD;
  auto got = nat::getfd(0); // <------------------------- test this
  CPPUNIT_ASSERT(good(got));
  auto flags = value(got);
  // stdin doesn't have cloexec set
  CPPUNIT_ASSERT( ! contains(flags, FD::CLOEXEC) );
  // This proves that ADL will find these (doesn't it?)
  CPPUNIT_ASSERT(sizeof (ok(got)));
  CPPUNIT_ASSERT(sizeof (error_num(got)));
  CPPUNIT_ASSERT(sizeof (value(got)));
}
auto tests::unit::posix::fixture::Fixture::test_getfd_2() -> void {
  using O = six::O;
  using FD = six::FD;
  int file_fd = -1;
  guardian::Close guard(file_fd);
  auto t = six::mktemp("/tmp/t99.tests.unit.posix.getfd.XXXXXX");
  CPPUNIT_ASSERT(good(t));
  std::string tempfile = value(t);
  auto f = nat::open(tempfile, O::RDONLY|O::CREATE);
  CPPUNIT_ASSERT(good(f));
  file_fd = value(f);
  auto s = nat::setfd(file_fd, FD::CLOEXEC);
  CPPUNIT_ASSERT(good(s));
  auto g = nat::getfd(file_fd); // <----------------- test this
  CPPUNIT_ASSERT(good(g));
  auto flags = value(g);
  // fd DOES have cloexec set
  CPPUNIT_ASSERT( contains(flags, FD::CLOEXEC));
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import tests.unit.posix.Fixture
#endiv
#divert <cpp>
#import sys.posix.OK
#import sys.posix.S
#import sys.posix.access
#import sys.posix.chmod
#import sys.posix.creat
#import sys.posix.mktemp
auto tests::unit::posix::fixture::Fixture::test_chmod() -> void {
  auto r = six::mktemp("/tmp/t99.tests.unit.posix.chmod.XXXXXX");
  CPPUNIT_ASSERT(good(r));
  std::string specimen = value(r);
  auto c = nat::creat(specimen, 0600);
  CPPUNIT_ASSERT(good(c)); // <--------- test this
  guardian::Chmod guard(specimen, value(c));
  auto a1 = six::access(specimen, six::OK::R);
  CPPUNIT_ASSERT(good(a1));
  auto a2 = six::access(specimen, six::OK::W);
  CPPUNIT_ASSERT(good(a2));
  auto a3 = six::access(specimen, six::OK::X);
  CPPUNIT_ASSERT(!good(a3)); // it is not executable
  auto all_executable_mode = user(six::S::X) | group(six::S::X) | other(six::S::X);
  auto ch = six::chmod(specimen, all_executable_mode); // <---- test this
  CPPUNIT_ASSERT(good(ch));
  auto a99 = six::access(specimen, six::OK::X); // <------ show it has become executable
  CPPUNIT_ASSERT(good(a99)); // and now it is executable
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <cpp>
#import tests.unit.posix.Fixture
#import sys.posix.alarm
#import sys.posix.SIG
#import sys.posix.signal
#import sys.posix.pause
#import sys.posix.E
#import sys.time.durations
#import sys.time.durations.literals
#import tests.unit.posix.fixture.pause.Handler
namespace tests::unit::posix::fixture {
  auto Fixture::test_pause() -> void {
    using six::SIG;
    using ::sys::time::durations::seconds;
    using namespace ::sys::time::durations::literals;
    using fixture::pause::Handler;
    bool alarmed{false};
    auto guard = Handler::Guard{alarmed};
    six::signal(SIG::ALARM, &Handler::handle);
    auto previous = six::alarm(1s); // [[FIXTHIS]] don't waste a whole second here, rather use itimer on a shorter niterval
    CPPUNIT_ASSERT(!previous || 0 <= previous->count());
    auto pa = six::pause();
    six::signal(SIG::ALARM, SIG::DEFAULT);
    CPPUNIT_ASSERT(fail(pa) && six::E::INTR == error_code(pa));
    CPPUNIT_ASSERT(alarmed);
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::posix { class IPPROTO; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.posix.IPPROTO
struct tests::unit::posix::IPPROTO : public cppunit::test::Fixture {
  using Subject = ::sys::posix::IPPROTO;
  auto test_object() -> void;
  auto test_constants() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
auto tests::unit::posix::IPPROTO::test_object() -> void {
  static_assert(Subject::Protocol{} == Subject::IP);
  static_assert(Subject::NONE != Subject::IP);
  static_assert(Subject::NONE == Subject::Protocol{IPPROTO_NONE});
}
auto tests::unit::posix::IPPROTO::test_constants() -> void {
  static_assert(Subject::Protocol{} == Subject::IP);
  static_assert(Subject::NONE != Subject::IP);
  CPPUNIT_ASSERT(sizeof (Subject::IP));
  CPPUNIT_ASSERT(sizeof (Subject::ICMP));
  CPPUNIT_ASSERT(sizeof (Subject::IGMP));
  CPPUNIT_ASSERT(sizeof (Subject::IPIP));
  CPPUNIT_ASSERT(sizeof (Subject::TCP));
  CPPUNIT_ASSERT(sizeof (Subject::EGP));
  CPPUNIT_ASSERT(sizeof (Subject::PUP));
  CPPUNIT_ASSERT(sizeof (Subject::UDP));
  CPPUNIT_ASSERT(sizeof (Subject::IDP));
  CPPUNIT_ASSERT(sizeof (Subject::TP));
  CPPUNIT_ASSERT(sizeof (Subject::DCCP));
  CPPUNIT_ASSERT(sizeof (Subject::IPV6));
  CPPUNIT_ASSERT(sizeof (Subject::RSVP));
  CPPUNIT_ASSERT(sizeof (Subject::GRE));
  CPPUNIT_ASSERT(sizeof (Subject::ESP));
  CPPUNIT_ASSERT(sizeof (Subject::AH));
  CPPUNIT_ASSERT(sizeof (Subject::MTP));
  CPPUNIT_ASSERT(sizeof (Subject::BEETPH));
  CPPUNIT_ASSERT(sizeof (Subject::ENCAP));
  CPPUNIT_ASSERT(sizeof (Subject::PIM));
  CPPUNIT_ASSERT(sizeof (Subject::COMP));
  CPPUNIT_ASSERT(sizeof (Subject::SCTP));
  CPPUNIT_ASSERT(sizeof (Subject::UDPLITE));
  CPPUNIT_ASSERT(sizeof (Subject::MPLS));
  CPPUNIT_ASSERT(sizeof (Subject::RAW));
  CPPUNIT_ASSERT(sizeof (Subject::HOPOPTS));
  CPPUNIT_ASSERT(sizeof (Subject::ROUTING));
  CPPUNIT_ASSERT(sizeof (Subject::FRAGMENT));
  CPPUNIT_ASSERT(sizeof (Subject::ICMPV6));
  CPPUNIT_ASSERT(sizeof (Subject::NONE));
  CPPUNIT_ASSERT(sizeof (Subject::DSTOPTS));
  CPPUNIT_ASSERT(sizeof (Subject::MH));
#ifdef IPPROTO_L2TP // <linux/l2tp.h>
  CPPUNIT_ASSERT(sizeof (Subject::L2TP));
#endif
}
#import rigging.suite.io
auto tests::unit::posix::IPPROTO::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("IPPROTO");
  series << call("object", &IPPROTO::test_object)
         << call("constants", &IPPROTO::test_constants)
    ;
  return finalize(series);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import tests.unit.posix.Fixture
#endiv
#divert <tpp>
#import sys.id.User
#import sys.id.Group
#import sys.posix.fchown
namespace tests::unit::posix::fixture {
  template<typename FD> auto Fixture::exercise_fchown_Uid(FD fd) -> void {
    namespace id = sys::id;
    auto owned = six::fchown(fd, id::User(-1));
    CPPUNIT_ASSERT(!good(owned)); // ibidem. (bad fd, no permissions to fchown)
  }
  template<typename FD> auto Fixture::exercise_fchown_Gid(FD fd) -> void {
    namespace id = sys::id;
    auto owned = six::fchown(fd, id::Group(-1));
    CPPUNIT_ASSERT(!good(owned)); // ibidem. (bad fd, no permissions to fchown)
  }
  template<typename FD> auto Fixture::exercise_fchown_Uid_Gid(FD fd) -> void {
    namespace id = sys::id;
    auto owned = six::fchown(fd, id::User{}, id::Group{});
    CPPUNIT_ASSERT(!good(owned)); // ibidem. (bad fd, no permissions to fchown)
  }
  template<typename FD> auto Fixture::exercise_fchown_uid_gid(FD fd) -> void {
    namespace id = sys::id;
    auto owned = six::fchown(fd, ::uid_t{}, ::gid_t{});
    CPPUNIT_ASSERT(!good(owned)); // ibidem. (bad fd, no permissions to fchown)
  }
}
#endiv
#divert <cpp>
auto tests::unit::posix::fixture::Fixture::test_fchown_int_uid_gid() -> void {
  //
  // special -------\ (here)
  //                |
  //                v
  auto owned = six::native::fchown(-1, ::uid_t{}, ::gid_t{});
  CPPUNIT_ASSERT(!good(owned)); // ibidem. (bad fd, no permissions to fchown)
}
#import sys.id.File
namespace tests::unit::posix::fixture {
  auto Fixture::test_fchown_File_Uid() -> void { exercise_fchown_Uid(::sys::id::File{-1}); }
  auto Fixture::test_fchown_File_Gid() -> void { exercise_fchown_Gid(::sys::id::File{-1}); }
  auto Fixture::test_fchown_File_Uid_Gid() -> void { exercise_fchown_Uid_Gid(::sys::id::File{-1}); }
  auto Fixture::test_fchown_File_uid_gid() -> void { exercise_fchown_uid_gid(::sys::id::File{-1}); }
}
#import sys.posix.AT
#import sys.posix.O
#import sys.posix.open
#import sys.posix.openat
#import sys.posix.unlinkat
auto tests::unit::posix::fixture::Fixture::test_fchown_something() -> void {
  namespace id = ::sys::id;
  using O = six::O;
  using AT = six::AT;
  auto t = nat::open("/tmp", O::DIRECTORY|O::RDONLY);
  guardian::Close guard0(value(t));
  auto dirfd = value(t);
  std::string file_exists = "t99.tests.unit.posix.test.EXISTS-via-fchown";
  six::unlinkat(dirfd, file_exists, AT::NONE);
  auto c = nat::openat(dirfd, file_exists, O::CREATE|O::WRONLY, 0666);
  guardian::Close guard1(value(c));
  CPPUNIT_ASSERT(good(c));
  auto specimen_fd = id::File{value(c)};
  auto a = six::fchown(specimen_fd, id::User{0}, id::Group{0}); // <---------- test this
  CPPUNIT_ASSERT(!good(a)); // <-------- this should always fail ... because you aren't root (YES?)
  auto u = six::unlinkat(dirfd, file_exists, AT::NONE);
  CPPUNIT_ASSERT(good(u));
}
#endiv

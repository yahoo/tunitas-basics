// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::posix { class AF; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.posix.AF
struct tests::unit::posix::AF : public cppunit::test::Fixture {
  using Subject = ::sys::posix::AF;
  auto test_object() -> void;
  auto test_constants() -> void;
  static auto suite() -> cppunit::Test *;
  struct IP;
  struct UN;
};
#endiv
#divert <cpp>
auto tests::unit::posix::AF::test_object() -> void {
  using Type = Subject::Type;
  CPPUNIT_ASSERT(Type{} == Subject::UNSPECIFIED);
}
auto tests::unit::posix::AF::test_constants() -> void {
  Subject::Type type;
  type = Subject::UNSPECIFIED;
  type = Subject::UNIX;
  type = Subject::LOCAL;
  type = Subject::INET4;
  type = Subject::INET6;
  type = Subject::IPX;
  type = Subject::NETLINK;
  type = Subject::X25;
  type = Subject::AX25;
  type = Subject::ATMPVC;
  type = Subject::APPLETALK;
  type = Subject::PACKET;
  type = Subject::ALGORITHM;
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  type = Subject::UNSPEC;
  type = Subject::INET;
  type = Subject::ALG;
#pragma GCC diagnostic pop
  // there, uttered them all
  CPPUNIT_ASSERT(Subject::UNSPECIFIED != type);
}
#import tests.unit.posix.AF.IP
#import tests.unit.posix.AF.UN
#import rigging.suite.io
auto tests::unit::posix::AF::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("AF");
  series << call("object", &AF::test_object)
         << call("constants", &AF::test_constants)
         << add<AF::IP>()
         << add<AF::UN>()
    ;
  return finalize(series);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import tests.unit.posix.Fixture
#endiv
#divert <cpp>
#import sys.id.File
#import nonstd.dope
#import sys.posix.read
namespace tests::unit::posix::fixture {
  auto Fixture::test_read_function_1() -> void {
    auto const fd = id::File{-1};
    char buf[10];
    auto const size = sizeof (buf);
    auto red = sys::posix::read(fd, &buf[0], size);
    CPPUNIT_ASSERT(fail(red));
  }
  auto Fixture::test_read_function_2() -> void {
    auto const fd = id::File{-1};
    char buf[10];
    auto const size = sizeof (buf);
    auto const dope = nonstd::dope<char>{&buf[0], size};
    auto red = sys::posix::read(fd, dope);
    CPPUNIT_ASSERT(fail(red));
  }
}
namespace tests::unit::posix::fixture {
  auto Fixture::test_read_native_1() -> void {
    auto const fd = int{-1};
    char buf[10];
    auto const size = sizeof (buf);
    auto red = sys::posix::native::read(fd, &buf[0], size);
    CPPUNIT_ASSERT(fail(red));
  }
  auto Fixture::test_read_native_2() -> void {
    auto const fd = int{-1};
    char buf[10];
    auto const size = sizeof (buf);
    auto const dope = nonstd::dope<char>{&buf[0], size};
    auto red = sys::posix::native::read(fd, dope);
    CPPUNIT_ASSERT(fail(red));
  }
}
#endiv

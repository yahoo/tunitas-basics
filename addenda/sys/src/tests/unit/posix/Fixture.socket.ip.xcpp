// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import tests.unit.posix.Fixture
#endiv
#divert <cpp>
#import sys.posix.IPPROTO
#import sys.posix.AF.IP
#import sys.posix.PF.IP
#import sys.posix.ip.socket
#import sys.sock.Type
#import sys.ip.sock.Kind
namespace tests::unit::posix::fixture {
  namespace {
    namespace ip::bundle {
      using AF = six::AF::IP;
      using PF = six::PF::IP; // fun, but doesn't give access to IPPROTO::IP except as PF::IP{}
      using Sock = ::sys::sock::Type;
      template<Sock SOCK> inline constexpr auto Kind = ::sys::ip::sock::Kind<SOCK>;
      using Option = ::sys::sock::Option;
      using IPPROTO = six::IPPROTO;
      using Closer = guardian::Closer<guardian::closer::Native>;
      using six::ip::native::socket;
    }
  }
  auto Fixture::test_socket_ip_type() -> void                  { using namespace ip::bundle; Closer doomed{socket(AF::INET4, Kind<Sock::STREAM>)}; }
  auto Fixture::test_socket_ip_type_options() -> void          { using namespace ip::bundle; Closer doomed{socket(AF::INET6, Kind<Sock::DATAGRAM>, Option::CLOEXEC)}; }
  auto Fixture::test_socket_ip_specification() -> void         { using namespace ip::bundle; Closer doomed{socket(AF::INET6, Kind<Sock::DATAGRAM> | Option::CLOEXEC)}; }
  auto Fixture::test_socket_ip_type_ipproto() -> void          { using namespace ip::bundle; Closer doomed{socket(AF::INET4, Kind<Sock::STREAM>, IPPROTO::IP)}; }
  auto Fixture::test_socket_ip_type_ipproto_options() -> void  { using namespace ip::bundle; Closer doomed{socket(AF::INET4, Kind<Sock::STREAM>, IPPROTO::IP, Option::CLOSE_ON_EXEC)}; }
  auto Fixture::test_socket_ip_type_options_ipproto() -> void  { using namespace ip::bundle; Closer doomed{socket(AF::INET4, Kind<Sock::STREAM>, Option::CLOEXEC, IPPROTO::IP)}; }
  auto Fixture::test_socket_ip_specification_ipproto() -> void { using namespace ip::bundle; Closer doomed{socket(AF::INET4, Kind<Sock::STREAM> | Option::CLOEXEC, IPPROTO::IP)}; }
}
#endiv

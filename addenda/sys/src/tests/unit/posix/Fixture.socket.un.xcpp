// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import tests.unit.posix.Fixture
#endiv
#divert <cpp>
#import sys.posix.AF.UN
#import sys.posix.PF.UN
#import sys.posix.un.socket
#import sys.sock.Type
#import sys.un.sock.Kind
namespace tests::unit::posix::fixture {
  namespace {
    namespace un::bundle {
      using AF = six::AF::UN;
      using PF = six::PF::UN;
      using Sock = ::sys::sock::Type;
      template<Sock SOCK> inline constexpr auto Kind = ::sys::un::sock::Kind<SOCK>;
      using Option = ::sys::sock::Option;
      using Closer = guardian::Closer<guardian::closer::Native>;
      using six::un::native::socket;
    }
  }
  auto Fixture::test_socket_un_type() -> void             { using namespace un::bundle; Closer doomed{socket(AF::LOCAL, Kind<Sock::STREAM>)}; }
  auto Fixture::test_socket_un_type_options() -> void     { using namespace un::bundle; Closer doomed{socket(AF::UNIX, Kind<Sock::DATAGRAM>, Option::CLOEXEC)}; }
  auto Fixture::test_socket_un_specification() -> void    { using namespace un::bundle; Closer doomed{socket(AF::UNIX, Kind<Sock::DATAGRAM> | Option::CLOEXEC)}; }
  auto Fixture::test_socket_un_type_pf() -> void          { using namespace un::bundle; Closer doomed{socket(AF::LOCAL, Kind<Sock::STREAM>, PF::UNSPECIFIED)}; }
  auto Fixture::test_socket_un_type_pf_options() -> void  { using namespace un::bundle; Closer doomed{socket(AF::LOCAL, Kind<Sock::STREAM>, PF::UNSPECIFIED, Option::CLOSE_ON_EXEC)}; }
  auto Fixture::test_socket_un_type_options_pf() -> void  { using namespace un::bundle; Closer doomed{socket(AF::LOCAL, Kind<Sock::STREAM>, Option::CLOEXEC, PF::UNSPECIFIED)}; }
  auto Fixture::test_socket_un_specification_pf() -> void { using namespace un::bundle; Closer doomed{socket(AF::LOCAL, Kind<Sock::STREAM> | Option::CLOEXEC, PF::UNSPECIFIED)}; }
}
#endiv

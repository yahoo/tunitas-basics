// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import tests.unit.posix.Fixture
#endiv
#divert <cpp>
#import off_t
#import sys.id.File
#import nonstd.dope
#import sys.posix.preadv
namespace tests::unit::posix::fixture {
  auto Fixture::test_preadv_function_1() -> void {
    auto const fd = id::File{-1};
    int const COUNT = 3; // yup 'int'
    char buf[COUNT][10];
    iovec io[]{{&buf[0],sizeof(buf[0])}, {&buf[1],sizeof(buf[1])}, {&buf[2],sizeof (buf[2])}};
    auto const offset = off_t{0};
    auto red = sys::posix::preadv(fd, &io[0], COUNT, offset);
    CPPUNIT_ASSERT(fail(red));
  }
  auto Fixture::test_preadv_function_2() -> void {
    auto const fd = id::File{-1};
    int const COUNT = 3; // yup 'int'
    char buf[COUNT][10];
    iovec io[]{{&buf[0],sizeof(buf[0])}, {&buf[1],sizeof(buf[1])}, {&buf[2],sizeof (buf[2])}};
    auto const dope = nonstd::dope<iovec>{&io[0], COUNT};
    auto const offset = off_t{0};
    auto red = sys::posix::preadv(fd, dope, offset);
    CPPUNIT_ASSERT(fail(red));
  }
}
namespace tests::unit::posix::fixture {
  auto Fixture::test_preadv_native_1() -> void {
    auto const fd = int{-1};
    int const COUNT = 3; // yup 'int'
    char buf[COUNT][10];
    iovec io[]{{&buf[0],sizeof(buf[0])}, {&buf[1],sizeof(buf[1])}, {&buf[2],sizeof (buf[2])}};
    auto const offset = off_t{0};
    auto red = sys::posix::native::preadv(fd, &io[0], COUNT, offset);
    CPPUNIT_ASSERT(fail(red));
  }
  auto Fixture::test_preadv_native_2() -> void {
    auto const fd = int{-1};
    int const COUNT = 3; // yup 'int'
    char buf[COUNT][10];
    iovec io[]{{&buf[0],sizeof(buf[0])}, {&buf[1],sizeof(buf[1])}, {&buf[2],sizeof (buf[2])}};
    auto const dope = nonstd::dope<iovec>{&io[0], COUNT};
    auto const offset = off_t{0};
    auto red = sys::posix::native::preadv(fd, dope, offset);
    CPPUNIT_ASSERT(fail(red));
  }
}
#endiv

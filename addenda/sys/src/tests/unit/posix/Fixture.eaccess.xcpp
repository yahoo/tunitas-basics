// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import tests.unit.posix.Fixture
#endiv
#divert <cpp>
#import sys.posix.eaccess
#import sys.posix.OK
//
// copy-pasta from Fixture.access
//
auto tests::unit::posix::fixture::Fixture::test_eaccess_present() -> void {
  using six::OK;
  char const *file_exists = "/dev/null";
  auto e = six::eaccess(file_exists, OK::F);
  CPPUNIT_ASSERT(good(e)); // <--------- test this
  auto r = six::eaccess(file_exists, OK::R);
  CPPUNIT_ASSERT(good(r)); // <--------- test this
  auto w = six::eaccess(file_exists, OK::W);
  CPPUNIT_ASSERT(good(w)); // <--------- test this
  auto x = six::eaccess(file_exists, OK::X);
  CPPUNIT_ASSERT(!good(x)); // <--------- test this
}
auto tests::unit::posix::fixture::Fixture::test_eaccess_missing() -> void {
  using six::OK;
  char const *file_missing = "/root/there/is/no/such/file/as/this";
  auto e = six::eaccess(file_missing, OK::F);
  CPPUNIT_ASSERT(!good(e)); // <--------- test this
  auto r = six::eaccess(file_missing, OK::R);
  CPPUNIT_ASSERT(!good(r)); // <--------- test this
  auto w = six::eaccess(file_missing, OK::W);
  CPPUNIT_ASSERT(!good(w)); // <--------- test this
  auto x = six::eaccess(file_missing, OK::X);
  CPPUNIT_ASSERT(!good(x)); // <--------- test this
}
#endiv

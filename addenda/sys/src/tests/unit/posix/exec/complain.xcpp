// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.call.Result
namespace tests::unit::posix::exec {
  //
  // Complain if the result is not a failure.
  // Accept that certain sys::call::Result and voice among
  //   good(Status) -> hard error because exec returned "good"
  //   fail(Status) -> the test fails
  //
  // This is used only with exec(2)-variant tests so a good(Result) indication is a hard error.
  // That eventuality indicates that the 
  //
  //
  // Usage:
  //
  //   complain(exec("/bin/true", "true"));
  //
  auto complain(::sys::call::Result) -> void;
}
#endiv
#divert <cpp>
#import cppunit.test.Assert
#import std.error_code
#import std.runtime_error
#import std.system_category
#import std.cerr
auto tests::unit::posix::exec::complain(::sys::call::Result r) -> void {
  // Actually this can't be okay ... exec (execp) has failed to exec
  if (good(r)) {
    std::runtime_error("exec fails yet returns as a success");
  } else {
    std::error_code ec(error_num(r), std::system_category());
    std::cerr << "exec (or execp) fails with " << ec.message() << '\n';
    CPPUNIT_ASSERT(false);
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#include <hpp/tests.unit.posix.exec.Palette>
#endiv
#divert <hpp>
#import std.size_t
#import nonstd.required.container.Size
namespace tests::unit::posix::exec {
  template<typename VALUE> class Palette::Forward_List : public std::forward_list<VALUE> {
    static_assert(!nonstd::required::container::Size<std::forward_list<std::string>>);
    using Ancestor = std::forward_list<VALUE>;
  public:
    Forward_List() = default;
    using Ancestor::forward_list;
    // Because forward_list does not have either a forward_list<C, A>::size()
    // AND also because std::size(CONTAINER is not specialized as such
    // we have to do the counting ourselves.
    auto size() const -> std::size_t;
  };
}
#endiv
#divert <tpp>
#import std.distance
namespace tests::unit::posix::exec {
  template<typename _> auto Palette::Forward_List<_>::size() const -> std::size_t {
    return std::distance(this->begin(), this->end());
  }
}
#endiv
#divert <cpp>
#import nonstd.required.container.Type
#import nonstd.required.container.Size
namespace {
  namespace tests {
    using namespace ::tests::unit::posix::exec;
    namespace reqcon = ::nonstd::required::container;
    //
    // Both are "container types"
    static_assert(reqcon::Type<std::forward_list<std::string>>);
    static_assert(reqcon::Type<Palette::Forward_List<std::string>>);
    //
    // Only one has a size() member
    static_assert(!reqcon::Size<std::forward_list<std::string>>);
    static_assert(reqcon::Type<Palette::Forward_List<std::string>>);
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::posix::exec { class String; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import tests.unit.posix.exec.Palette
class tests::unit::posix::exec::String : public cppunit::test::Fixture, protected Palette {
public:
  auto test_arg() -> void;
  auto test_arg_envv() -> void;
  auto test_argv_old() -> void;
  template<typename CONTAINER> auto test_argv() -> void;
  auto test_argv_envv_old() -> void;
  template<typename CONTAINER1, typename CONTAINER2> auto test_argv_envv() -> void;
  auto test_vararg_args_only() -> void;
  auto test_vararg_args_end_envv() -> void;

  static auto suite() -> cppunit::Test *;
protected:
  static auto const EIGHT = 8u;
};
#endiv
#divert <tpp>
#import std.size
#import sys.posix.exec
#import sys.posix.fork
#import tests.unit.posix.exec.complain
namespace tests::unit::posix::exec {
  template<typename CONTAINER> auto String::test_argv() -> void {
    using ::sys::posix::fork;
    using ::sys::posix::exec;
    if (is_child(fork())) {
      std::string path("/bin/echo");
      CONTAINER argv{"echo", "apple", "banana", "cherry", "dog", "eagle", "frog", "goat"};
      CPPUNIT_ASSERT(EIGHT == std::size(argv));
      complain(exec(path, argv));
    }
  }
  template<typename CONTAINER1, typename CONTAINER2> auto String::test_argv_envv() -> void {
    using ::sys::posix::fork;
    using ::sys::posix::exec;
    if (is_child(fork())) {
      std::string path("/bin/echo");
      CONTAINER1 argv{"echo", "apple", "banana", "cherry", "dog", "eagle", "frog", "goat"};
      CPPUNIT_ASSERT(EIGHT == std::size(argv));
      CONTAINER2 envv{"VAR0=zero", "VAR1=one", "VAR2=two"};
      complain(exec(path, argv, envv));
    }
  }
}
#endiv
#divert <cpp>
#import sys.posix.exec
#import sys.posix.fork
#import tests.unit.posix.exec.complain

auto tests::unit::posix::exec::String::test_arg() -> void {
  using ::sys::posix::fork;
  using ::sys::posix::exec;
  if (is_child(fork())) {
    complain(exec("/bin/date", "date"));
  }
}

auto tests::unit::posix::exec::String::test_arg_envv() -> void {
  using ::sys::posix::fork;
  using ::sys::posix::exec;
  if (is_child(fork())) {
    c::const_environv empty;
    complain(exec("/bin/date", "date", empty));
  }
}

auto tests::unit::posix::exec::String::test_argv_old() -> void {
  using ::sys::posix::fork;
  using ::sys::posix::exec;
  if (is_child(fork())) {
    std::string path("/bin/date");
    std::vector<std::string> argv{"date"};
    complain(exec(path, argv));
  }
}

auto tests::unit::posix::exec::String::test_argv_envv_old() -> void {
  using ::sys::posix::fork;
  using ::sys::posix::exec;
  if (is_child(fork())) {
    std::string path("/bin/date");
    std::vector<std::string> argv{"date"};
    std::vector<std::string> envv{"VAR0=zero", "VAR1=one"};
    complain(exec(path, argv, envv));
  }
}

auto tests::unit::posix::exec::String::test_vararg_args_only() -> void {
  using ::sys::posix::fork;
  using ::sys::posix::exec;
  if (is_child(fork())) {
    using csz = c::const_stringz;
    complain(exec("/bin/echo", csz("echo"), csz("echo-dater"), csz("echo-truthful"), csz("echo-truthiness")));
  }
}

auto tests::unit::posix::exec::String::test_vararg_args_end_envv() -> void {
  using ::sys::posix::fork;
  using ::sys::posix::exec;
  if (is_child(fork())) {
    char var0[] = "VAR0=zero";
    char var1[] = "VAR1=one";
    char *vars[] = { var0, var1, nullptr };
    c::const_environv envv(vars);
    using csz = c::const_stringz;
    complain(exec("/bin/echo", csz("echo"), "echo-dater", csz("echo-datie"), csz("echo-dateliness"), envv));
  }
}

#import std.array
#import std.deque
#import std.forward_list
#import std.list
#import std.set
#import std.vector
#import rigging.suite.io
#import tests.unit.posix.exec.Caller
#import tests.unit.posix.exec.Command
#import tests.unit.posix.exec.Scheme
auto tests::unit::posix::exec::String::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  using ::rigging::suite::call; // because namespace tests::unit::call occludes
  Stream series("std::string");
  series << call("arg", &String::test_arg)
         << call("arg_envv", &String::test_arg_envv)
         << []() {
              Stream sub{"argv"};
              sub << call("basic", &String::test_argv_old)
                  << call("array", &String::test_argv<std::array<std::string, EIGHT>>)
                  << call("deque", &String::test_argv<std::deque<std::string>>)
                  << call("forward_list", &String::test_argv<Forward_List<std::string>>)
                  << call("list", &String::test_argv<std::list<std::string>>)
                  << call("set", &String::test_argv<std::set<std::string>>)
                  << call("vector", &String::test_argv<std::vector<std::string>>)
                ;
                return sub;
            }()
         << []() {
              Stream sub{"argv_envv"};
              sub << call("basic", &String::test_argv_envv_old)
                  << call("array,deque", &String::test_argv_envv<std::array<std::string, EIGHT>, std::deque<std::string>>)
                  << call("forward_list,list", &String::test_argv_envv<Forward_List<std::string>, std::list<std::string>>)
                  << call("list,set", &String::test_argv_envv<std::list<std::string>, std::set<std::string>>)
                  << call("set,vector", &String::test_argv_envv<std::set<std::string>, std::vector<std::string>>)
                  << call("vector,array", &String::test_argv_envv<std::vector<std::string>, std::array<std::string, EIGHT>>)
                ;
                return sub;
            }()
         << call("vararg_args_only", &String::test_vararg_args_only)
         << call("vararg_args_end_envv", &String::test_vararg_args_end_envv)
         << add<Scheme<Caller<caller::EXEC>, Command<command::DATE, command::FULL>, Command<command::ECHO, command::FULL>>>()
    ;
  return finalize(series);
}
#endiv

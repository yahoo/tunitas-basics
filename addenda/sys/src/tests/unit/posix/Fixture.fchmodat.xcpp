// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import tests.unit.posix.Fixture
#endiv
#divert <tpp>
#import sys.posix.fchmodat
#import sys.posix.AT.Flags
namespace tests::unit::posix::fixture {
  template<typename FD> auto Fixture::exercise_fchmodat(FD fd) -> void {
    using AT = six::AT;
    auto const mode = 0777;
    auto a = six::fchmodat(fd, "nosuch", mode, AT::NONE);
    CPPUNIT_ASSERT(!good(a));
  }
}
#endiv
#divert <cpp>
auto tests::unit::posix::fixture::Fixture::test_fchmodat_File() -> void { exercise_fchmodat(::sys::id::File{-1}); }
auto tests::unit::posix::fixture::Fixture::test_fchmodat_Cwd() -> void { exercise_fchmodat(::sys::at::Cwd::FDCWD); }
auto tests::unit::posix::fixture::Fixture::test_fchmodat_int() -> void {
  using AT = six::AT;
  auto const mode = 0777;
  //
  // special ---\ (here)
  //            |
  //            v
  auto a = six::native::fchmodat(-1, "nosuch", mode, AT::NONE);
  CPPUNIT_ASSERT(!good(a));
}
#import std.string
#import sys.posix.S.Flags
#import sys.posix.OK.Mode
#import sys.posix.faccessat
#import sys.posix.open
#import sys.posix.mktemp
#import sys.posix.close
auto tests::unit::posix::fixture::Fixture::test_fchmodat_something() -> void {
  using O = six::O;
  using OK = six::OK;
  using AT = six::AT;
  std::string const tmpdir = "/tmp";
  auto t = nat::open(tmpdir, O::DIRECTORY|O::RDONLY);
  auto directory_fd = value(t);
  guardian::Close guard0(directory_fd);
  auto r = six::mktemp(tmpdir + "/t99.tests.unit.posix.fchmodat.XXXXXX");
  CPPUNIT_ASSERT(good(r));
  std::string specimen = value(r);
  std::string subspecimen = specimen.substr(tmpdir.size()+1); // the stuff after the "/tmp/"
  auto c = nat::open(specimen, O::CREATE|O::WRONLY, 0600);
  int specimen_fd = value(c);
  CPPUNIT_ASSERT(good(c)); // <--------- test this
  guardian::Chmod guard(specimen, specimen_fd);
  auto a1 = six::faccessat(directory_fd, subspecimen, OK::R, AT::NONE);
  CPPUNIT_ASSERT(good(a1));
  auto a2 = six::faccessat(directory_fd, subspecimen, OK::W, AT::NONE);
  CPPUNIT_ASSERT(good(a2));
  auto a3 = six::faccessat(directory_fd, subspecimen, OK::X, AT::NONE);
  CPPUNIT_ASSERT(!good(a3)); // it is not executable
  auto all_executable_mode = user(six::S::X) | group(six::S::X) | other(six::S::X);
  auto ch = six::fchmodat(directory_fd, subspecimen, all_executable_mode, AT::NONE); // <---- test this
  CPPUNIT_ASSERT(good(ch));
  auto a99 = six::faccessat(directory_fd, subspecimen, OK::X, AT::NONE); // <------ show it has become executable
  CPPUNIT_ASSERT(good(a99)); // and now it is executable
  auto closed = nat::close(specimen_fd);;
  CPPUNIT_ASSERT(good(closed));
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import tests.unit.posix.Fixture
#endiv
#divert <cpp>
#import sys.posix.SOCK
#import sys.posix.AF
#import sys.posix.PF
#import sys.posix.socket
namespace tests::unit::posix::fixture {
  namespace {
    namespace bundle {
      using AF = six::AF;
      using PF = six::PF;
      using SOCK = six::SOCK;
      using Sock = ::sys::sock::Type;
      using Option = ::sys::sock::Option;
      using Closer = guardian::Closer<guardian::closer::Native>;
      using nat::socket;
    }
  }
  auto Fixture::test_socket_af_type() -> void               { using namespace bundle; Closer doomed{socket(AF::INET4, Sock::STREAM)}; }
  auto Fixture::test_socket_af_type_options() -> void       { using namespace bundle; Closer doomed{socket(AF::INET6, Sock::DATAGRAM, Option::CLOEXEC)}; }
  auto Fixture::test_socket_af_specification() -> void      { using namespace bundle; Closer doomed{socket(AF::INET6, SOCK::DATAGRAM | SOCK::CLOEXEC)}; }
  auto Fixture::test_socket_af_type_pf() -> void            { using namespace bundle; Closer doomed{socket(AF::INET4, Sock::STREAM, PF::UNSPECIFIED)}; }
  auto Fixture::test_socket_af_type_pf_options() -> void    { using namespace bundle; Closer doomed{socket(AF::INET4, Sock::STREAM, PF::UNSPECIFIED, Option::CLOSE_ON_EXEC)}; }
  auto Fixture::test_socket_af_type_options_pf() -> void    { using namespace bundle; Closer doomed{socket(AF::INET4, Sock::STREAM, Option::CLOEXEC, PF::UNSPECIFIED)}; }
  auto Fixture::test_socket_af_specification_pf() -> void   { using namespace bundle; Closer doomed{socket(AF::INET4, SOCK::STREAM | SOCK::CLOEXEC, PF::UNSPECIFIED)}; }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import tests.unit.posix.Fixture
#endiv
#divert <cpp>
#import sys.posix.send
#import sys.posix.MSG
#import nonstd.const_dope
#import std.byte
auto tests::unit::posix::fixture::Fixture::test_send_1() -> void {
  auto const fd = int{-1};
  { char const buf[10] = "something";
    auto sent = six::avoid::send(fd, reinterpret_cast<void const *>(&buf), sizeof (buf), six::MSG::NONE);
    CPPUNIT_ASSERT(!good(sent)); } // of course, because the fd was invalid, but it was callable
}
auto tests::unit::posix::fixture::Fixture::test_send_2() -> void {
  auto const fd = int{-1};
  { char const buf[10] = "something";
    auto const doped = ::nonstd::const_dope<char>{&buf[0], sizeof (buf)};
    auto sent = six::native::send(fd, doped, six::MSG::NONE);
    CPPUNIT_ASSERT(!good(sent)); } // ibidem.
  { auto const B = std::byte{};
    std::byte const buf[10] = { B, B, B, B,  B, B, B, B, B, B };
    auto doped = ::nonstd::const_dope<std::byte const>{&buf[0], sizeof (buf)};
    auto sent = six::native::send(fd, doped, six::MSG::NONE);
    CPPUNIT_ASSERT(!good(sent)); } // ibidem.
  { char unsigned const buf[10] = { 0, 0, 0, 0,  0, 0, 0, 0, 0, 0 };
    auto doped = ::nonstd::const_dope<char unsigned const>{&buf[0], sizeof (buf)};
    auto sent = six::native::send(fd, doped, six::MSG::NONE);
    CPPUNIT_ASSERT(!good(sent)); } // ibidem.
  { char signed const buf[10] = { 0, 0, 0, 0,  0, 0, 0, 0, 0, 0 };
    auto doped = ::nonstd::const_dope<char signed const>{&buf[0], sizeof (buf)};
    auto sent = six::native::send(fd, doped, six::MSG::NONE);
    CPPUNIT_ASSERT(!good(sent)); } // ibidem.
}
#import tests.unit.posix.Fixture.Dummy.Thing
auto tests::unit::posix::fixture::Fixture::test_send_3() -> void {
  auto const fd = int{-1};
  { char const buf{0};
    auto sent = six::native::send(fd, buf, six::MSG::NONE);
    CPPUNIT_ASSERT(!good(sent)); } // ibidem.
  { short const buf{0};
    auto sent = six::native::send(fd, buf, six::MSG::NONE);
    CPPUNIT_ASSERT(!good(sent)); } // ibidem.
  { int const buf{0};
    auto sent = six::native::send(fd, buf, six::MSG::NONE);
    CPPUNIT_ASSERT(!good(sent)); } // ibidem.
  { double const buf{0};
    auto sent = six::native::send(fd, buf, six::MSG::NONE);
    CPPUNIT_ASSERT(!good(sent)); } // ibidem.
  { Dummy::Thing const buf;
    auto sent = six::native::send(fd, buf, six::MSG::NONE);
    CPPUNIT_ASSERT(!good(sent)); } // ibidem.
}
#import tests.unit.posix.Fixture.Dummy.Thing
auto tests::unit::posix::fixture::Fixture::test_send_4() -> void {
  auto const fd = int{-1};
  { char const buf[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    auto sent = six::native::send(fd, buf, six::MSG::NONE);
    CPPUNIT_ASSERT(!good(sent)); } // ibidem.
  { short const buf[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    auto sent = six::native::send(fd, buf, six::MSG::NONE);
    CPPUNIT_ASSERT(!good(sent)); } // ibidem.
  { int const buf[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    auto sent = six::native::send(fd, buf, six::MSG::NONE);
    CPPUNIT_ASSERT(!good(sent)); } // ibidem.
  { double const buf[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    auto sent = six::native::send(fd, buf, six::MSG::NONE);
    CPPUNIT_ASSERT(!good(sent)); } // ibidem.
  { Dummy::Thing const buf[10];
    auto sent = six::native::send(fd, buf, six::MSG::NONE);
    CPPUNIT_ASSERT(!good(sent)); } // ibidem.
}
#endiv

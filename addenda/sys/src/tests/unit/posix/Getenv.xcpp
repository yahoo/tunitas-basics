// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::posix { class Getenv; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import rigging.suite.Stream
#import std.size_t
class tests::unit::posix::Getenv : public cppunit::test::Fixture {
public:
  template<typename ARGUMENT> auto test_function() -> void;
  template<typename RESULT, typename ARGUMENT> auto test_function_template() -> void;
  static auto suite() -> cppunit::Test *;
private:
  struct palette {
    struct Buffer;
  };
  template<typename ARGUMENT> struct Palette;
  template<typename ARGUMENT> static auto generate_stanza() -> rigging::suite::Stream;
  template<typename STRINGISH> static auto sizer(STRINGISH const &) -> std::size_t;
};
#import c.stringz
#import c.stringn
#import std.vector
namespace tests::unit::posix {
  template<> struct Getenv::Palette<char *>;
  template<> struct Getenv::Palette<c::stringz>;
  template<> struct Getenv::Palette<c::stringn>;
  template<> struct Getenv::Palette<std::vector<char>>;
  template<> auto Getenv::sizer(char *const &) -> std::size_t;
  template<> auto Getenv::sizer(char const *const &) -> std::size_t;
}
#endiv
#divert <tpp>
template<typename STRINGISH> auto tests::unit::posix::Getenv::sizer(STRINGISH const &container) -> std::size_t {
  return container.size();
}
#import tests.unit.EnvironmentSaveAndRestore
#import std.string_literals
#import sys.posix.getenv
#import tests.unit.posix.Getenv.Palette
template<typename ARGUMENT> auto tests::unit::posix::Getenv::test_function() -> void {
  using namespace std::string_literals;
  tests::unit::EnvironmentSaveAndRestore saver;
  Palette<ARGUMENT> palette{"PATH"};
  auto argument = palette.get();
  auto r = ::sys::posix::getenv(argument); // <--- test this
  CPPUNIT_ASSERT(good(r));
  std::string path = value(r);
  CPPUNIT_ASSERT(0 != sizer(path));
  std::cout << "PATH=" << path << '\n';
}
template<typename RESULT, typename ARGUMENT> auto tests::unit::posix::Getenv::test_function_template() -> void {
  tests::unit::EnvironmentSaveAndRestore saver;
  Palette<ARGUMENT> palette{"PATH"};
  auto argument = palette.get();
  auto r = ::sys::posix::getenv<RESULT>(argument); // <--- test this
  CPPUNIT_ASSERT(good(r));
  auto const &path = value(r);
  CPPUNIT_ASSERT(0 != sizer(path));
  std::cout << "PATH=" << path << '\n';
}
#import c.const_stringn
#import c.const_stringz
#import c.stringn
#import c.stringz
#import rigging.suite.call
#import rigging.suite.io
#import std.move
#import std.string
#import std.string_view
#import std.type_info
template<typename ARGUMENT> auto tests::unit::posix::Getenv::generate_stanza() -> rigging::suite::Stream {
  using namespace rigging::suite;
  Stream arg{typeid(ARGUMENT).name()};
  arg << call("char const *", &Getenv::test_function_template<char const *, ARGUMENT>)
      << call("c::const_stringz", &Getenv::test_function_template<c::const_stringz, ARGUMENT>)
      << call("c::stringz", &Getenv::test_function_template<c::stringz, ARGUMENT>)
      << call("c::const_stringn", &Getenv::test_function_template<c::const_stringn, ARGUMENT>)
      << call("c::stringn", &Getenv::test_function_template<c::stringn, ARGUMENT>)
      << call("std::string", &Getenv::test_function_template<std::string, ARGUMENT>)
    // NO call("std::string_view", &Getenv::test_function_template<std::string_view, ARGUMENT>)
    // because getenv(...) unambiguously returns a '\0'-terminted string.
    // If you want to use std::string_view then get a c::const_stringz and make it yourself
    ;
  return arg;
}
#endiv
#divert <cpp>
#import std.char_traits
template<> auto tests::unit::posix::Getenv::sizer(char *const &s) -> std::size_t {
  return std::char_traits<char>::length(s);
}
template<> auto tests::unit::posix::Getenv::sizer(char const *const &s) -> std::size_t {
  return std::char_traits<char>::length(s);
}
#import std.string
#import std.string_view
#import std.vector
auto tests::unit::posix::Getenv::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  using ::rigging::suite::call; // because namespace tests::unit::call occludes
  Stream series("getenv");
  series << []() {
              Stream res("function");
              // the result is always std::string; the function is parameterized around the ARGUMENT
              res << call("char const *", &Getenv::test_function<char const *>)
                  << call("c::const_stringz", &Getenv::test_function<c::const_stringz>)
                  << call("c::stringz", &Getenv::test_function<c::stringz>)
                  << call("c::const_stringn", &Getenv::test_function<c::const_stringn>)
                  << call("c::stringn", &Getenv::test_function<c::stringn>)
                  << call("std::string", &Getenv::test_function<std::string>)
                ;
              return move(res);
            }()
         << []() {
              // This one is n^2
              Stream tem("template_instance");
              // generate_stanza is parameterized around the ARGUMENT
              tem << add(generate_stanza<char const *>())
                  << add(generate_stanza<char *>())
                  << add(generate_stanza<c::const_stringz>())
                  << add(generate_stanza<c::stringz>())
                  << add(generate_stanza<c::const_stringn>())
                  << add(generate_stanza<c::stringn>())
                  << add(generate_stanza<std::string>())
                // NONE of these can be arguments, only results (maybe)
                // std::vector<char>>
                // std::string_view
                ;
              return  move(tem);
            }()
    ;
  return finalize(series);
}
#endiv

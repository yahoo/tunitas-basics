// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import tests.unit.posix.Fixture
#endiv
#divert <tpp>
#import sys.posix.fchmod
namespace tests::unit::posix::fixture {
  template<typename FD> auto Fixture::exercise_fchmod(FD fd) -> void {
    auto const mode = 0777;
    auto a = six::fchmod(fd, mode);
    CPPUNIT_ASSERT(!good(a));
  }
}
#endiv
#divert <cpp>
auto tests::unit::posix::fixture::Fixture::test_fchmod_File() -> void       { exercise_fchmod(::sys::id::File{-1}); }
auto tests::unit::posix::fixture::Fixture::test_fchmod_int() -> void {
  auto const mode = 0777;
  //
  // special ---\ (here)
  //            |
  //            v
  auto a = six::native::fchmod(-1, mode);
  CPPUNIT_ASSERT(!good(a));
}
#import sys.id.File
#import sys.posix.OK.Mode
#import sys.posix.S.Flags
#import sys.posix.access
#import sys.posix.close
#import sys.posix.creat
#import sys.posix.fchmod
#import sys.posix.mktemp
auto tests::unit::posix::fixture::Fixture::test_fchmod_something() -> void {
  namespace id = ::sys::id;
  auto r = six::mktemp("/tmp/t99.tests.unit.posix.fchmod.XXXXXX");
  CPPUNIT_ASSERT(good(r));
  std::string specimen = value(r);
  auto c = nat::creat(specimen, 0600);
  auto specimen_fd = id::File{value(c)};
  CPPUNIT_ASSERT(good(c)); // <--------- test this
  guardian::Chmod guard(specimen, value(c));
  auto a1 = six::access(specimen, six::OK::R);
  CPPUNIT_ASSERT(good(a1));
  auto a2 = six::access(specimen, six::OK::W);
  CPPUNIT_ASSERT(good(a2));
  auto a3 = six::access(specimen, six::OK::X);
  CPPUNIT_ASSERT(!good(a3)); // it is not executable
  auto all_executable_mode = user(six::S::X) | group(six::S::X) | other(six::S::X);
  auto ch = six::fchmod(specimen_fd, all_executable_mode); // <---- test this
  CPPUNIT_ASSERT(good(ch));
  auto a99 = six::access(specimen, six::OK::X); // <------ show it has become executable
  CPPUNIT_ASSERT(good(a99)); // and now it is executable
  auto closed = six::close(specimen_fd);;
  CPPUNIT_ASSERT(good(closed));
}
#endiv

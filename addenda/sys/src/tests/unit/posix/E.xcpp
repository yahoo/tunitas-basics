// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::posix { struct E; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.posix.E
struct tests::unit::posix::E : public cppunit::test::Fixture {
  using Subject = ::sys::posix::E;
  auto test_constants() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
namespace tests::unit::posix {
  // Most of these will already have been tested in tests::usage::posix_E
  auto E::test_constants() -> void {
    auto c = Subject::Code{};
    // And there were more in the series; which are expected to be tested in posix_E::Usage<>
    c = Subject::SUCCESS;
    c = Subject::PERM;
    c = Subject::NOENT;
    c = Subject::SRCH;
    c = Subject::INTR;
    c = Subject::IO;
    c = Subject::NXIO;
    c = Subject::TOOBIG;
    c = Subject::NOEXEC;
    c = Subject::BADF;
    c = Subject::CHILD;
    c = Subject::AGAIN;
    c = Subject::NOMEM;
    c = Subject::ACCES;
    c = Subject::FAULT;
    c = Subject::NOTBLK;
    c = Subject::BUSY;
    c = Subject::EXIST;
    c = Subject::XDEV;
    c = Subject::NODEV;
    c = Subject::NOTDIR;
    c = Subject::ISDIR;
    c = Subject::INVAL;
    c = Subject::NFILE;
    c = Subject::MFILE;
    c = Subject::NOTTY;
    c = Subject::TXTBSY;
    c = Subject::FBIG;
    c = Subject::NOSPC;
    c = Subject::SPIPE;
    c = Subject::ROFS;
    c = Subject::MLINK;
    c = Subject::PIPE;
    c = Subject::DOM;
    c = Subject::RANGE;
    CPPUNIT_ASSERT(sizeof (c));
  }
}
#import rigging.suite.io
auto tests::unit::posix::E::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("E");
  series << call("constants", &E::test_constants)
         << END;
  return finalize(series);
}
#endiv

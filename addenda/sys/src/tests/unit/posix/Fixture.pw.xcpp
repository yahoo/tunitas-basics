// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import tests.unit.posix.Fixture
#endiv
#divert <cpp>
#import sys.posix.getpwuid
auto tests::unit::posix::fixture::Fixture::test_getpwuid() -> void {
  auto got = six::native::getpwuid(0);
  CPPUNIT_ASSERT(good(got));
  CPPUNIT_ASSERT_EQUAL(0u, value(got)->pw_uid);
  CPPUNIT_ASSERT_EQUAL("root"s, std::string{value(got)->pw_name});
}
#import sys.posix.getpwname
auto tests::unit::posix::fixture::Fixture::test_getpwname() -> void {
  auto got = six::getpwname("root");
  CPPUNIT_ASSERT(good(got));
  auto const &ptr = value(got);
  auto const &pwd = *ptr;
  std::cerr << "name=" << pwd.pw_name << '\n';
  std::cerr << "uid=" << pwd.pw_uid << '\n';
  std::cerr << "gecos=" << pwd.pw_gecos << '\n';
  CPPUNIT_ASSERT_EQUAL(0u, pwd.pw_uid);
  CPPUNIT_ASSERT_EQUAL("root"s, std::string{pwd.pw_name});
}
#import sys.posix.endpwent
auto tests::unit::posix::fixture::Fixture::test_endpwent() -> void {
  six::endpwent();
}
#import std.exception
#import sys.entry.Endent.passwd
#import sys.id.User
auto tests::unit::posix::fixture::Fixture::test_Endent_passwd() -> void {
  try {
    ::sys::entry::Endent<::passwd> guard;
    auto got = six::getpwuid(::sys::id::User{0});
    CPPUNIT_ASSERT(good(got));
    CPPUNIT_ASSERT_EQUAL(0u, value(got)->pw_uid);
    CPPUNIT_ASSERT_EQUAL("root"s, std::string{value(got)->pw_name});
  } catch (std::exception const &) {
    CPPUNIT_ASSERT(false);
  }
}
#endiv

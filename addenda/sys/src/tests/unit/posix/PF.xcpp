// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::posix { class PF; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.posix.PF
struct tests::unit::posix::PF : public cppunit::test::Fixture {
  using Subject = ::sys::posix::PF;
  auto test_object() -> void;
  auto test_constants() -> void;
  static auto suite() -> cppunit::Test *;
  struct IP;
  struct UN;
};
#endiv
#divert <cpp>
auto tests::unit::posix::PF::test_object() -> void {
  using Type = Subject::Type;
  CPPUNIT_ASSERT(Type{} == Subject::UNSPECIFIED);
}
auto tests::unit::posix::PF::test_constants() -> void {
  CPPUNIT_ASSERT(sizeof (Subject::UNSPECIFIED));
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  CPPUNIT_ASSERT(sizeof (Subject::UNSPEC));
#pragma GCC diagnostic pop
}
#import tests.unit.posix.PF.IP
#import tests.unit.posix.PF.UN
#import rigging.suite.io
auto tests::unit::posix::PF::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("PF");
  series << call("object", &PF::test_object)
         << call("constants", &PF::test_constants)
         << add<PF::IP>()
         << add<PF::UN>()
    ;
  return finalize(series);
}
#endiv

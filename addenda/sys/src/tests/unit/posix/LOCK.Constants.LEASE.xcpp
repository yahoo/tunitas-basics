// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#include <hpp/tests.unit.posix.LOCK>
namespace tests::unit::posix {
  inline constexpr auto LEASE = lib::Call::LEASE;
  template<> struct LOCK::Constants<LEASE>;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.posix.LOCK
#import sys.lease.Operation
namespace tests::unit::posix {
  template<> struct LOCK::Constants<LEASE> : public cppunit::test::Fixture {
    using LEASE = ::sys::posix::LEASE;
    auto test_call() -> void;
    auto test_assignment() -> void;
    static auto suite() -> cppunit::Test *;
  protected:
    using Operation = ::sys::lease::Operation;
    static auto leasealike(Operation) -> void; // Merely show that it can be called unambiguously
  };
}
#endiv
#divert <cpp>
namespace tests::unit::posix {
  auto LOCK::Constants<LEASE>::leasealike(Operation) -> void { CPPUNIT_ASSERT(true); }
  auto LOCK::Constants<LEASE>::test_call() -> void {
    leasealike(LEASE::READ);
    leasealike(LEASE::WRITE);
    leasealike(LEASE::ENDLEASE);
    leasealike(LEASE::END);
    leasealike(LEASE::RD);
    leasealike(LEASE::WR);
    // NO ---> leasealike(LEASE::UN); <---- the UN idiom belongs to the flock(2) system; not to the lease(2) system.
  }
  auto LOCK::Constants<LEASE>::test_assignment() -> void {
    LEASE::Operation o;
    // Is this ugly or what?
    o = LEASE::READ;
    o = LEASE::WRITE;
    o = LEASE::ENDLEASE;
    o = LEASE::END;
    leasealike(o);
  }
}
#import rigging.suite.io
namespace tests::unit::posix {
  auto LOCK::Constants<LEASE>::suite() -> cppunit::Test * {
    using namespace ::rigging::suite;
    using ::rigging::suite::call; // reminder: tests::unit::call occludes this
    Stream series{"Constants<LEASE>"};
    series << call("assignment", &Constants::test_assignment)
           << call("call", &Constants::test_call)
           << END;
    return finalize(series);
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::itimer::unset {
  //
  // Unset the itimer on destruction.
  //
  // Usage:
  //
  //   {
  //     auto guardian = unset::Guardian{};
  //     ... set some timers...
  //   }
  //
  struct Guardian;
}
#endiv
#divert <hpp>
#import sys.itimer.Which
struct tests::unit::itimer::unset::Guardian {
  using Which = sys::itimer::Which;
  inline explicit Guardian(Which);
  Guardian(Guardian const &) = delete;
  auto operator=(Guardian const &) -> Guardian & = delete;
  ~Guardian();
private:
  Which which;
};
#endiv
#divert <ipp>
namespace tests::unit::itimer::unset {
  Guardian::Guardian(Which w) : which{w} { }
}
#endiv
#divert <cpp>
#import sys.posix.unsetitimer
namespace tests::unit::itimer::unset {
  Guardian::~Guardian() {
    // If we failed to unset it ... what are we best able to do?
    //   We can't throw.
    //   This is a tester.
    //
    // ... we could print something to the debug log (std::clog) ... maybe ... hopefully.
    ::sys::posix::unsetitimer(which);
  }
}
#endiv

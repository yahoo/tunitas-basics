// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::itimer { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.itimer.Which
struct tests::unit::itimer::Fixture : public cppunit::test::Fixture {
  using Subject = ::sys::itimer::Which;
  auto test_Which() -> void;
  auto test_constants() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
auto tests::unit::itimer::Fixture::test_Which() -> void {
  auto s = Subject{};
  s = Subject::REAL;
  s = Subject::VIRTUAL;
  s = Subject::PROFILE;
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  s = Subject::PROF;
#pragma GCC diagnostic pop
  static_assert(std::is_enum_v<Subject>);
  CPPUNIT_ASSERT(sizeof (s));
}
#import sys.itimer.constants
auto tests::unit::itimer::Fixture::test_constants() -> void {
  using namespace sys::itimer::constants;
  auto s = Subject{};
  s = REAL;
  s = VIRTUAL;
  s = PROFILE;
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  s = PROF;
#pragma GCC diagnostic pop
  CPPUNIT_ASSERT(sizeof (s));
}
#import rigging.suite.io
auto tests::unit::itimer::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("itimer");
  series << call("Which-", &Fixture::test_Which)
         << call("constants", &Fixture::test_constants)
         << END;
  return finalize(series);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::want { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
struct tests::unit::want::Fixture : public cppunit::test::Fixture {
  auto test_split_elide0() -> void;
  auto test_split_elide1() -> void;
  auto test_zero() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import want.split
#import std.string
#import std.vector
auto tests::unit::want::Fixture::test_split_elide0() -> void {
  using s = std::string;
  // Show it works at least once
  auto splits = ::want::split<std::vector<std::string>>("/apple/banana/cherry/dog/eagle/frog/goat", '/', false);
  CPPUNIT_ASSERT_EQUAL(s(""), splits[0]);
  CPPUNIT_ASSERT_EQUAL(s("apple"), splits[1]);
  CPPUNIT_ASSERT_EQUAL(s("banana"), splits[2]);
  CPPUNIT_ASSERT_EQUAL(s("cherry"), splits[3]);
  CPPUNIT_ASSERT_EQUAL(s("dog"), splits[4]);
  CPPUNIT_ASSERT_EQUAL(s("eagle"), splits[5]);
  CPPUNIT_ASSERT_EQUAL(s("frog"), splits[6]);
  CPPUNIT_ASSERT_EQUAL(s("goat"), splits[7]);
}
auto tests::unit::want::Fixture::test_split_elide1() -> void {
  using s = std::string;
  // Show it works at least once
  auto splits = ::want::split<std::vector<std::string>>("/apple/banana/cherry/dog/eagle/frog/goat", '/', true);
  CPPUNIT_ASSERT_EQUAL(s("apple"), splits[0]);
  CPPUNIT_ASSERT_EQUAL(s("banana"), splits[1]);
  CPPUNIT_ASSERT_EQUAL(s("cherry"), splits[2]);
  CPPUNIT_ASSERT_EQUAL(s("dog"), splits[3]);
  CPPUNIT_ASSERT_EQUAL(s("eagle"), splits[4]);
  CPPUNIT_ASSERT_EQUAL(s("frog"), splits[5]);
  CPPUNIT_ASSERT_EQUAL(s("goat"), splits[6]);
}
#import want.zero
auto tests::unit::want::Fixture::test_zero() -> void {
  int specimen = 99;
  CPPUNIT_ASSERT(99 == specimen);
  ::want::zero(specimen);
  CPPUNIT_ASSERT(0 == specimen);
}
#import tests.unit.want.Split
#import rigging.suite.io
auto tests::unit::want::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("want");
  series << call("split-noelide", &Fixture::test_split_elide0)
    << call("split-yeselide", &Fixture::test_split_elide1)
    << call("zero", &Fixture::test_zero)
    << add<Split>()
    ;
  return finalize(series);
}
#endiv

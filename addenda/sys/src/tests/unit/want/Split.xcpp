// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace want {
      class Split;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::want::Split : public cppunit::test::Fixture {
public:
  auto test_01() -> void;
  auto test_02_false() -> void;
  auto test_02_true() -> void;
  auto test_99_false() -> void;
  auto test_99_true() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import want.split
#import std.string
#import std.vector

auto tests::unit::want::Split::test_01() -> void {
  auto splits = ::want::split<std::vector<std::string>>("", '/');
  CPPUNIT_ASSERT(splits.empty());
}

auto tests::unit::want::Split::test_02_false() -> void {
  using s = std::string;
  auto splits = ::want::split<std::vector<std::string>>("/", '/', false);
  CPPUNIT_ASSERT(1 == splits.size());
  CPPUNIT_ASSERT_EQUAL(s(""), splits[0]);
}

auto tests::unit::want::Split::test_02_true() -> void {
  auto splits = ::want::split<std::vector<std::string>>("/", '/', true);
  CPPUNIT_ASSERT(splits.empty());
}

auto tests::unit::want::Split::test_99_false() -> void {
  using s = std::string;
  auto splits = ::want::split<std::vector<std::string>>("/apple/banana/cherry/dog/eagle/frog/goat", '/', false);
  CPPUNIT_ASSERT_EQUAL(s(""), splits[0]);
  CPPUNIT_ASSERT_EQUAL(s("apple"), splits[1]);
  CPPUNIT_ASSERT_EQUAL(s("banana"), splits[2]);
  CPPUNIT_ASSERT_EQUAL(s("cherry"), splits[3]);
  CPPUNIT_ASSERT_EQUAL(s("dog"), splits[4]);
  CPPUNIT_ASSERT_EQUAL(s("eagle"), splits[5]);
  CPPUNIT_ASSERT_EQUAL(s("frog"), splits[6]);
  CPPUNIT_ASSERT_EQUAL(s("goat"), splits[7]);
}

auto tests::unit::want::Split::test_99_true() -> void {
  using s = std::string;
  auto splits = ::want::split<std::vector<std::string>>("///apple////banana////////////////////////cherry/dog/eagle/frog/goat", '/', true);
  CPPUNIT_ASSERT_EQUAL(s("apple"), splits[0]);
  CPPUNIT_ASSERT_EQUAL(s("banana"), splits[1]);
  CPPUNIT_ASSERT_EQUAL(s("cherry"), splits[2]);
  CPPUNIT_ASSERT_EQUAL(s("dog"), splits[3]);
  CPPUNIT_ASSERT_EQUAL(s("eagle"), splits[4]);
  CPPUNIT_ASSERT_EQUAL(s("frog"), splits[5]);
  CPPUNIT_ASSERT_EQUAL(s("goat"), splits[6]);
}

#import rigging.suite.io
auto tests::unit::want::Split::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream s("split");
  s << call("01", &Split::test_01)
    << call("02-false", &Split::test_02_false)
    << call("02-true", &Split::test_02_true)
    << call("99-false", &Split::test_99_false)
    << call("99-true", &Split::test_99_true)
    ;
  return finalize(s);
}
#endiv

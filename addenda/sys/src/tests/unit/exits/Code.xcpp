// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::exits {
  class Code;
}
#divert </fpp>
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture

class tests::unit::exits::Code : public cppunit::test::Fixture { 
public: 
  Code() = default;
  // no setup or teardown
  auto test_constructor_default() -> void;
  template<typename FROM> auto test_constructor_template() -> void;
  auto test_conversion_from_integer() -> void;
  auto test_assignment() -> void;
  auto test_and_assignment() -> void;
  auto test_or_assignment() -> void;
  auto test_conversion_to_integer() -> void;
  auto test_operator_insert() -> void;
  auto test_operator_equal() -> void;
  auto test_operator_notequal() -> void;
  auto test_operator_and() -> void;
  auto test_operator_or() -> void;
  auto test_ok() -> void;
  auto test_failure() -> void;
  
  static auto suite() -> cppunit::Test *;
};

#import sys.exits.Code
struct sys::exits::Code::tests::Suite {
  // access code.value, which is protected
  inline static auto value(Code const &code) -> Code::value_type;
};
#endiv
#divert <ipp>
auto sys::exits::Code::tests::Suite::value(Code const &code) -> Code::value_type {
  return code.value;
};
#endiv
#divert <tpp>
template<typename FROM> auto tests::unit::exits::Code::test_constructor_template() -> void {
  using From = FROM;
  auto const specimen = From{};
  auto subject = sys::exits::Code{specimen}; // <-------------------- test this
  CPPUNIT_ASSERT(ok(subject));
  CPPUNIT_ASSERT(!failure(subject));
}
#endiv
#divert <cpp>
#import sys.exits.constants

using accessor = sys::exits::Code::tests::Suite;

auto tests::unit::exits::Code::test_constructor_default() -> void {
  sys::exits::Code d;
  CPPUNIT_ASSERT(ok(d));
  CPPUNIT_ASSERT(!failure(d));
}

auto tests::unit::exits::Code::test_conversion_from_integer() -> void {
  for (unsigned i(0), e(sys::exits::MAX+1); e != i; ++i) {
    sys::exits::Code code(i);
    CPPUNIT_ASSERT(accessor::value(code) == i);
  }
}

auto tests::unit::exits::Code::test_assignment() -> void {
  for (unsigned i(0), e(sys::exits::MAX+1); e != i; ++i) {
    sys::exits::Code code;
    CPPUNIT_ASSERT(sys::exits::ZERO == code);
    CPPUNIT_ASSERT(accessor::value(code) == 0);
    code = sys::exits::Code(i);
    CPPUNIT_ASSERT(accessor::value(code) == i);
  }
}

auto tests::unit::exits::Code::test_and_assignment() -> void {
  for (unsigned i(0), e(sys::exits::MAX+1); e != i; ++i) {
    sys::exits::Code base;
    CPPUNIT_ASSERT(sys::exits::ZERO == base);
    CPPUNIT_ASSERT(accessor::value(base) == 0);

    sys::exits::Code item(i);
    CPPUNIT_ASSERT(accessor::value(item) == i);
    bool base_as_truth = ok(base);
    bool item_as_truth = ok(item);

    base &= item; // <-------------------------test this
    base_as_truth &= item_as_truth; // <------ against this
    bool rebase_as_truth = ok(base);
    CPPUNIT_ASSERT(base_as_truth == rebase_as_truth);
  }
}

auto tests::unit::exits::Code::test_or_assignment() -> void {
  for (unsigned i(0), e(sys::exits::MAX+1); e != i; ++i) {
    sys::exits::Code base;
    CPPUNIT_ASSERT(sys::exits::ZERO == base);
    CPPUNIT_ASSERT(accessor::value(base) == 0);
    CPPUNIT_ASSERT(ok(base));

    sys::exits::Code item(i);
    CPPUNIT_ASSERT(accessor::value(item) == i);
    bool base_as_truth = ok(base);
    bool item_as_truth = ok(item);

    base |= item; // <-------------------------test this
    base_as_truth |= item_as_truth; // <------ against this
    bool rebase_as_truth = ok(base);
    CPPUNIT_ASSERT(base_as_truth == rebase_as_truth);
  }
}

auto tests::unit::exits::Code::test_conversion_to_integer() -> void {
  for (int i(0), e(sys::exits::MAX+1); e != i; ++i) {
    sys::exits::Code code(i);
    int recover = code;
    CPPUNIT_ASSERT(i == code);
    CPPUNIT_ASSERT(recover == code);
    CPPUNIT_ASSERT(recover == i);
    CPPUNIT_ASSERT(accessor::value(code) == i);
  }
}

#import std.ostringstream
auto tests::unit::exits::Code::test_operator_insert() -> void {
  {
    sys::exits::Code code;
    std::ostringstream buf;
    buf << code;
    std::string str = buf.str();
    CPPUNIT_ASSERT("exit 0" == str);
  } {
    sys::exits::Code code(33);
    std::ostringstream buf;
    buf << code;
    std::string str = buf.str();
    CPPUNIT_ASSERT("exit 33" == str);
  }
}

auto tests::unit::exits::Code::test_operator_equal() -> void {
  for (unsigned ai(0), ae(sys::exits::MAX+1); ae != ai; ++ai) {
    for (unsigned bi(0), be(sys::exits::MAX+1); be != bi; ++bi) {
      sys::exits::Code a(ai);
      sys::exits::Code b(bi);
      bool integer_truth = ai == bi;
      bool code_truth = a == b;
      CPPUNIT_ASSERT(integer_truth == code_truth);
    }
  }
}

auto tests::unit::exits::Code::test_operator_notequal() -> void {
  for (unsigned ai(0), ae(sys::exits::MAX+1); ae != ai; ++ai) {
    for (unsigned bi(0), be(sys::exits::MAX+1); be != bi; ++bi) {
      sys::exits::Code a(ai);
      sys::exits::Code b(bi);
      bool integer_truth = ai != bi;
      bool code_truth = a != b;
      CPPUNIT_ASSERT(integer_truth == code_truth);
    }
  }
}

auto tests::unit::exits::Code::test_operator_and() -> void {
  sys::exits::Code good;
  sys::exits::Code bad1(1);
  sys::exits::Code bad2(2);
  sys::exits::Code bad3(2);
  sys::exits::Code base;
  CPPUNIT_ASSERT(ok(base));
  base = base & good;
  CPPUNIT_ASSERT(ok(base));
  base = base & bad1;
  CPPUNIT_ASSERT(!ok(base));
  base = base & bad2 & bad3;
  CPPUNIT_ASSERT(!ok(base));
}

auto tests::unit::exits::Code::test_operator_or() -> void {
  sys::exits::Code bad(sys::exits::MAX);
  sys::exits::Code good1;
  sys::exits::Code good2(0);
  sys::exits::Code base = bad;
  CPPUNIT_ASSERT(!ok(base));
  base = base | good1;
  CPPUNIT_ASSERT(ok(base));
  base = base | good2;
  CPPUNIT_ASSERT(ok(base));
}

auto tests::unit::exits::Code::test_ok() -> void {
  sys::exits::Code bad(sys::exits::MAX);
  CPPUNIT_ASSERT(!ok(bad));
  sys::exits::Code good;
  CPPUNIT_ASSERT(ok(good));
  sys::exits::Code regood(good);
  CPPUNIT_ASSERT(ok(regood));
}

auto tests::unit::exits::Code::test_failure() -> void {
  sys::exits::Code bad(sys::exits::MAX);
  CPPUNIT_ASSERT(failure(bad));
  sys::exits::Code good;
  CPPUNIT_ASSERT(!failure(good));
  sys::exits::Code regood(good);
  CPPUNIT_ASSERT(!failure(regood));
}

#import nonstd.integers // all of the sized integers among std::{,u}int{8,16,32,64,128}_t
#import nonstd.sysexits.Code
#import rigging.suite.io
auto tests::unit::exits::Code::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("Code");
  series << []() {
              Stream sub{"constructor"};
              sub << call("default", &Code::test_constructor_default)
                  << call("int8_t", &Code::test_constructor_template<std::int8_t>)
                  << call("uint8_t", &Code::test_constructor_template<std::uint8_t>)
                  << call("int16_t", &Code::test_constructor_template<std::int16_t>)
                  << call("uint16_t", &Code::test_constructor_template<std::uint16_t>)
                  << call("int32_t", &Code::test_constructor_template<std::int32_t>)
                  << call("uint32_t", &Code::test_constructor_template<std::uint32_t>)
#if 0
                // Of course these are ambiguous; and they are nonsensical
                  << call("int64_t", &Code::test_constructor_template<std::int64_t>)
                  << call("uint64_t", &Code::test_constructor_template<std::uint64_t>)
                  << call("int128_t", &Code::test_constructor_template<std::int128_t>)
                  << call("uint128_t", &Code::test_constructor_template<std::uint128_t>)
#endif
                  << call("sys::exits::Code", &Code::test_constructor_template<::sys::exits::Code>)
                  << call("nonstd::sysexits::Code", &Code::test_constructor_template<::nonstd::sysexits::Code>)
                ;
              return move(sub);
            }()
         << call("conversion_from_integer", &Code::test_conversion_from_integer)
         << call("assignment", &Code::test_assignment)
         << call("and_assignment", &Code::test_and_assignment)
         << call("or_assignment", &Code::test_or_assignment)
         << call("conversion_to_integer", &Code::test_conversion_to_integer)
         << call("operator_insert", &Code::test_operator_insert)
         << call("operator_equal", &Code::test_operator_equal)
         << call("operator_notequal", &Code::test_operator_notequal)
         << call("operator_and", &Code::test_operator_and)
         << call("operator_or", &Code::test_operator_or)
         << call("ok", &Code::test_ok)
         << call("failure", &Code::test_failure)
    ;
  return finalize(series);
}
#divert </cpp>

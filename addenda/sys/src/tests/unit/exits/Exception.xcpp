// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::exits { class Exception; }
#divert </fpp>
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::exits::Exception : public cppunit::test::Fixture { 
public: 
  auto test_construction_1() -> void;
  auto test_construction_2() -> void;
  auto test_throwing_1() -> void;
  auto test_throwing_2() -> void;
  static auto suite() -> cppunit::Test *;
};
#divert </hpp>
#divert <cpp>
#import std.string
#import sys.exits.constants
#import sys.exits.Exception
auto tests::unit::exits::Exception::test_construction_1() -> void {
  ::sys::exits::Exception e(::sys::exits::CONFIG);
  CPPUNIT_ASSERT(nullptr != e.what());
  CPPUNIT_ASSERT(::sys::exits::CONFIG == e.code<::sys::exits::Code>());
}
auto tests::unit::exits::Exception::test_construction_2() -> void {
  ::sys::exits::Exception e("BAD", ::sys::exits::SOFTWARE);
  CPPUNIT_ASSERT((std::string)"quitting" == e.what());
  CPPUNIT_ASSERT((std::string)"BAD" == e.message());
  CPPUNIT_ASSERT(::sys::exits::SOFTWARE == e.code<::sys::exits::Code>());
}
auto tests::unit::exits::Exception::test_throwing_1() -> void {
  try {
    ::sys::exits::Exception e("error", ::sys::exits::CONFIG);
    throw e;
  } catch (sys::exits::Exception const &e) {
    CPPUNIT_ASSERT(true); // <--- yup, we should have reached here
    CPPUNIT_ASSERT((std::string)"quitting" == e.what());
    CPPUNIT_ASSERT((std::string)"error" == e.message());
    CPPUNIT_ASSERT(::sys::exits::CONFIG == e.code<::sys::exits::Code>());
  }
}
#import sys.exits.constants
auto tests::unit::exits::Exception::test_throwing_2() -> void {
  try {
    ::sys::exits::Exception e("error", ::sys::exits::TEMPFAIL);
    throw e;
  } catch (::nonstd::exception::Quitting const &e) { // <------------------------ caught differently
    CPPUNIT_ASSERT(true); // <--- yup, we should have reached here
    CPPUNIT_ASSERT((std::string)"quitting" == e.what());
    CPPUNIT_ASSERT((std::string)"error" == e.message());
    CPPUNIT_ASSERT(::sys::exits::TEMPFAIL == e.code<::sys::exits::Code>());
  }
}
#import rigging.suite.io
auto tests::unit::exits::Exception::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("Exception");
  {
    Stream con("construction");
    con << call("1", &Exception::test_construction_1)
        << call("2", &Exception::test_construction_2)
      ;
    series << add(std::move(con));
  } {
    Stream thr("throwing");
    thr << call("1", &Exception::test_throwing_1)
        << call("2", &Exception::test_throwing_2)
      ;
    series << add(std::move(thr));
  }
  return finalize(series);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::exits { class Condition; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::exits::Condition : public cppunit::test::Fixture { 
public: 
  Condition() = default;
  // no setup or teardown
  auto test_default_constructor() -> void;
  auto test_conversion_from_integer() -> void;
  auto test_assignment() -> void;
  auto test_and_assignment() -> void;
  auto test_or_assignment() -> void;
  auto test_conversion_to_integer() -> void;
  auto test_operator_insert() -> void;
  auto test_operator_equal() -> void;
  auto test_operator_notequal() -> void;
  auto test_operator_and() -> void;
  auto test_operator_or() -> void;
  auto test_ok() -> void;
  auto test_success() -> void;
  auto test_failure() -> void; 
  static auto suite() -> cppunit::Test *;
protected:
  static constexpr auto MINIMUM = 0;
  static constexpr auto MAXIMUM = 1;
};
#endiv
#divert <cpp>
#import sys.exits.constants
#import sys.exits.category

#import sys.exits.Condition
auto tests::unit::exits::Condition::test_default_constructor() -> void {
  sys::exits::Condition d = sys::exits::Condition{};
  CPPUNIT_ASSERT(ok(d));
  CPPUNIT_ASSERT(!failure(d));
}

auto tests::unit::exits::Condition::test_conversion_from_integer() -> void {
  for (unsigned i(MINIMUM), e(MAXIMUM+1); e != i; ++i) {
    sys::exits::Condition condition = sys::exits::Condition(i);
    CPPUNIT_ASSERT((unsigned) condition == i);
  }
}

auto tests::unit::exits::Condition::test_assignment() -> void {
  for (unsigned i(MINIMUM), e(MAXIMUM+1); e != i; ++i) {
    sys::exits::Condition condition = sys::exits::Condition{};
    CPPUNIT_ASSERT(sys::exits::Condition() == condition);
    CPPUNIT_ASSERT((unsigned)condition == 0u);
    condition = sys::exits::Condition(i);
    CPPUNIT_ASSERT((unsigned) condition == i);
  }
}

auto tests::unit::exits::Condition::test_and_assignment() -> void {
  for (int i(MINIMUM), e(MAXIMUM+1); e != i; ++i) {
    sys::exits::Condition base = sys::exits::Condition{};
    CPPUNIT_ASSERT(sys::exits::Condition{} == base);

    sys::exits::Condition item = sys::exits::Condition{i};
    bool base_as_truth = ok(base);
    bool item_as_truth = ok(item);

    base &= item; // <-------------------------test this
    base_as_truth &= item_as_truth; // <------ against this
    bool rebase_as_truth = ok(base);
    CPPUNIT_ASSERT(base_as_truth == rebase_as_truth);
  }
}

auto tests::unit::exits::Condition::test_or_assignment() -> void {
  for (int i(MINIMUM), e(MAXIMUM+1); e != i; ++i) {
    sys::exits::Condition base = sys::exits::Condition{};
    CPPUNIT_ASSERT(sys::exits::Condition{} == base);
    CPPUNIT_ASSERT(ok(base));

    sys::exits::Condition item = sys::exits::Condition{i};
    bool base_as_truth = ok(base);
    bool item_as_truth = ok(item);

    base |= item; // <-------------------------test this
    base_as_truth |= item_as_truth; // <------ against this
    bool rebase_as_truth = ok(base);
    CPPUNIT_ASSERT(base_as_truth == rebase_as_truth);
  }
}

auto tests::unit::exits::Condition::test_conversion_to_integer() -> void {
  for (int i(MINIMUM), e(MAXIMUM+1); e != i; ++i) {
    sys::exits::Condition condition = sys::exits::Condition{i};
    int recover = (int) condition;
    CPPUNIT_ASSERT(i == (int) condition);
    CPPUNIT_ASSERT(recover == (int) condition);
    CPPUNIT_ASSERT(recover == i);
  }
}

#import std.ostringstream
auto tests::unit::exits::Condition::test_operator_insert() -> void {
  {
    sys::exits::Condition condition = sys::exits::Condition{};
    std::ostringstream buf;
    buf << condition;
    std::string str = buf.str();
    CPPUNIT_ASSERT("exit 0" == str);
  } {
    sys::exits::Condition condition = sys::exits::Condition{33};
    std::ostringstream buf;
    buf << condition;
    std::string str = buf.str();
    CPPUNIT_ASSERT("exit 33" == str);
  }
}

auto tests::unit::exits::Condition::test_operator_equal() -> void {
  for (int ai(MINIMUM), ae(MAXIMUM+1); ae != ai; ++ai) {
    for (int bi(MINIMUM), be(MAXIMUM+1); be != bi; ++bi) {
      sys::exits::Condition a = sys::exits::Condition{ai};
      sys::exits::Condition b = sys::exits::Condition{bi};
      bool integer_truth = ai == bi;
      bool condition_truth = a == b;
      CPPUNIT_ASSERT(integer_truth == condition_truth);
    }
  }
}

auto tests::unit::exits::Condition::test_operator_notequal() -> void {
  for (int ai(MINIMUM), ae(MAXIMUM+1); ae != ai; ++ai) {
    for (int bi(MINIMUM), be(MAXIMUM+1); be != bi; ++bi) {
      sys::exits::Condition a = sys::exits::Condition{ai};
      sys::exits::Condition b = sys::exits::Condition{bi};
      bool integer_truth = ai != bi;
      bool condition_truth = a != b;
      CPPUNIT_ASSERT(integer_truth == condition_truth);
    }
  }
}

auto tests::unit::exits::Condition::test_operator_and() -> void {
  sys::exits::Condition good = sys::exits::Condition{};
  sys::exits::Condition bad1 = sys::exits::Condition{1};
  sys::exits::Condition bad2 = sys::exits::Condition{2};
  sys::exits::Condition bad3 = sys::exits::Condition{3};
  sys::exits::Condition base = sys::exits::Condition{};
  CPPUNIT_ASSERT(ok(base));
  base = base & good;
  CPPUNIT_ASSERT(ok(base));
  base = base & bad1;
  CPPUNIT_ASSERT(!ok(base));
  base = base & bad2 & bad3;
  CPPUNIT_ASSERT(!ok(base));
}

auto tests::unit::exits::Condition::test_operator_or() -> void {
  sys::exits::Condition bad = sys::exits::Condition{MAXIMUM};
  sys::exits::Condition good1 = sys::exits::Condition{};
  sys::exits::Condition good2 = sys::exits::Condition{MINIMUM};
  sys::exits::Condition base = bad;
  CPPUNIT_ASSERT(!ok(base));
  base = base | good1;
  CPPUNIT_ASSERT(ok(base));
  base = base | good2;
  CPPUNIT_ASSERT(ok(base));
}

auto tests::unit::exits::Condition::test_ok() -> void {
  sys::exits::Condition bad = sys::exits::Condition{MAXIMUM};
  CPPUNIT_ASSERT(!ok(bad));
  sys::exits::Condition good = sys::exits::Condition{};
  CPPUNIT_ASSERT(ok(good));
  sys::exits::Condition regood(good);
  CPPUNIT_ASSERT(ok(regood));
}

auto tests::unit::exits::Condition::test_success() -> void {
  sys::exits::Condition bad = sys::exits::Condition{MAXIMUM};
  CPPUNIT_ASSERT(!success(bad));
  sys::exits::Condition good = sys::exits::Condition{};
  CPPUNIT_ASSERT(success(good));
  sys::exits::Condition regood(good);
  CPPUNIT_ASSERT(success(regood));
}

auto tests::unit::exits::Condition::test_failure() -> void {
  sys::exits::Condition bad = sys::exits::Condition{MAXIMUM};
  CPPUNIT_ASSERT(failure(bad));
  sys::exits::Condition good = sys::exits::Condition{};
  CPPUNIT_ASSERT(!failure(good));
  sys::exits::Condition regood(good);
  CPPUNIT_ASSERT(!failure(regood));
}

#import rigging.suite.io
auto tests::unit::exits::Condition::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("Condition");
  series << call("default_constructor", &Condition::test_default_constructor)
         << call("conversion_from_integer", &Condition::test_conversion_from_integer)
         << call("assignment", &Condition::test_assignment)
         << call("and_assignment", &Condition::test_and_assignment)
         << call("or_assignment", &Condition::test_or_assignment)
         << call("conversion_to_integer", &Condition::test_conversion_to_integer)
         << call("operator_insert", &Condition::test_operator_insert)
         << call("operator_equal", &Condition::test_operator_equal)
         << call("operator_notequal", &Condition::test_operator_notequal)
         << call("operator_and", &Condition::test_operator_and)
         << call("operator_or", &Condition::test_operator_or)
         << call("ok", &Condition::test_ok)
         << call("success", &Condition::test_success)
         << call("failure", &Condition::test_failure)
    ;
  return finalize(series);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::exits { class Category; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::exits::Category : public cppunit::test::Fixture { 
public:
  auto test_name() -> void;
  auto test_default_error_condition() -> void;
  auto test_equivalent_code() -> void;
  auto test_equivalent_condition() -> void;
  auto test_message_zero() -> void;
  auto test_message_one() -> void;
  auto test_message_all() -> void;
  auto test_message_wild() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import sys.exits.constants
#import sys.exits.category
#import sys.exits.error_code
#import sys.exits.error_condition
#import std.error_code
#import std.error_category
#import std.literals
using namespace std::literals;
auto tests::unit::exits::Category::test_name() -> void {
  auto const expected = "sysexits"s;
  auto const actual = std::string{::sys::exits::category().name()};
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::exits::Category::test_default_error_condition() -> void {
  using namespace sys::exits;
  {
    std::error_code ok{OK};
    std::error_condition expected{Condition::SUCCESS};
    auto const actual = ::sys::exits::category().default_error_condition(ok.value());
    CPPUNIT_ASSERT(expected == actual);
  } {
    std::error_code notok{USAGE};
    std::error_condition expected{Condition::FAILURE};
    auto const actual = ::sys::exits::category().default_error_condition(notok.value());
    CPPUNIT_ASSERT(expected == actual);
  }
}
auto tests::unit::exits::Category::test_equivalent_code() -> void {
  using namespace sys::exits;
  {
    std::error_code ok{OK};
    CPPUNIT_ASSERT(::sys::exits::category().equivalent(ok, 0));
  } {
    std::error_code notok{USAGE};
    CPPUNIT_ASSERT(::sys::exits::category().equivalent(notok, (int)USAGE));
  }
}
auto tests::unit::exits::Category::test_equivalent_condition() -> void {
  using namespace sys::exits;
  {
    std::error_condition ok{Condition::SUCCESS};
    CPPUNIT_ASSERT(::sys::exits::category().equivalent(0, ok));
  } {
    std::error_condition notok{Condition::FAILURE};
    CPPUNIT_ASSERT(::sys::exits::category().equivalent(1, notok));
  }
}
#import std.literals
using namespace std::literals;
auto tests::unit::exits::Category::test_message_zero() -> void {
  using namespace sys::exits;
  std::error_code ec{OK};
  auto const expected = "OK"s;
  auto const actual = ec.message();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::exits::Category::test_message_one() -> void {
  using namespace sys::exits;
  std::error_code ec{FAIL};
  auto const expected = "FAILURE, exit 1"s;
  auto const actual = ec.message();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::exits::Category::test_message_all() -> void {
  for (int i{-270}, e{270}; e != i; ++i) {
    std::error_code ec{i, ::sys::exits::category()};
    std::string m = ec.message();
    CPPUNIT_ASSERT(!m.empty());
  }
}
#import std.int32_t
#import std.numeric_limits
auto tests::unit::exits::Category::test_message_wild() -> void {
  for (auto value : {std::numeric_limits<std::int32_t>::min(), std::numeric_limits<std::int32_t>::max()}) {
    std::error_code ec{value, ::sys::exits::category()};
    std::string m = ec.message();
    CPPUNIT_ASSERT(!m.empty());
  }
}
#import rigging.suite.io
auto tests::unit::exits::Category::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("Category");
  series << call("name", &Category::test_name)
         << call("default_error_condition", &Category::test_default_error_condition)
    ;
  {
    Stream equ("equivalent");
    equ << call("code", &Category::test_equivalent_code)
        << call("condition", &Category::test_equivalent_condition)
      ;
    series << add(std::move(equ));
  }
  {
    Stream mes("message");
    mes << call("zero", &Category::test_message_zero)
        << call("one", &Category::test_message_one)
        << call("all", &Category::test_message_all)
        << call("wild", &Category::test_message_wild)
    ;
    series << add(std::move(mes));
  }
  return finalize(series);
}
#endiv

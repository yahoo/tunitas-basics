// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::exits {
  class Fixture;
}
#divert </fpp>
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture

class tests::unit::exits::Fixture : public cppunit::test::Fixture { 
public: 
  Fixture() = default;
  Fixture(Fixture const &) = delete;
  auto operator=(Fixture const &) -> Fixture & = delete;
public:
  auto test_constants() -> void;
  auto test_predicates() -> void;
  auto test_output_zero() -> void;
  auto test_output_all() -> void;
  auto test_throwing() -> void;
  auto test_Codable() -> void;
  auto test_std_error_code() -> void;
  auto test_std_error_condition() -> void;
  static auto suite() -> cppunit::Test *;
};
#divert </hpp>
#divert <cpp>
#import sys.exits
#import sys.exits.Code
#import sys.exits.constants
auto tests::unit::exits::Fixture::test_constants() -> void {
  using namespace sys::exits;
  CPPUNIT_ASSERT(Code(0) == OK);
  CPPUNIT_ASSERT(Code(1) == FAIL);

  // mention them
  CPPUNIT_ASSERT(OK == OK);
  CPPUNIT_ASSERT(OK != FAIL);

  CPPUNIT_ASSERT(OK == ZERO);
  CPPUNIT_ASSERT(OK != ONE);
  CPPUNIT_ASSERT(OK != TWO);

  CPPUNIT_ASSERT(OK != USAGE);
  CPPUNIT_ASSERT(OK != DATAERR);
  CPPUNIT_ASSERT(OK != NOINPUT);
  CPPUNIT_ASSERT(OK != NOUSER);
  CPPUNIT_ASSERT(OK != NOHOST);
  CPPUNIT_ASSERT(OK != UNAVAILABLE);
  CPPUNIT_ASSERT(OK != SOFTWARE);
  CPPUNIT_ASSERT(OK != OSERR);
  CPPUNIT_ASSERT(OK != OSFILE);
  CPPUNIT_ASSERT(OK != CANTCREAT);
  CPPUNIT_ASSERT(OK != IOERR);
  CPPUNIT_ASSERT(OK != TEMPFAIL);
  CPPUNIT_ASSERT(OK != PROTOCOL);
  CPPUNIT_ASSERT(OK != NOPERM);
  CPPUNIT_ASSERT(OK != CONFIG);
  CPPUNIT_ASSERT(OK != CANTREMOVE);

  CPPUNIT_ASSERT(CANTCREAT == CANTCREATE);
  CPPUNIT_ASSERT(CANTCREATE != CANTREMOVE);

  CPPUNIT_ASSERT(OK != MAX);
}

#warning WATCHOUT [[FIXTHIS]] sys.exits.error_code must be instantiated RIGHT HERE
// WATCHOUT [[FIXTHIS]] sys.exits.error_code must be instantiated RIGHT HERE
// else
//   src/sys/exits/error_code.xcpp:21:21: error: specialization of ‘std::is_error_code_enum<sys::exits::Code>’ after instantiation
//   template<> struct is_error_code_enum<sys::exits::Code>;
#import sys.exits.error_code
auto tests::unit::exits::Fixture::test_predicates() -> void {
  CPPUNIT_ASSERT(ok(sys::exits::OK));
  CPPUNIT_ASSERT(failure(sys::exits::FAIL));

  CPPUNIT_ASSERT(failure(sys::exits::ONE));
  CPPUNIT_ASSERT(failure(sys::exits::TWO));

  CPPUNIT_ASSERT(failure(sys::exits::USAGE));
  CPPUNIT_ASSERT(failure(sys::exits::DATAERR));
  CPPUNIT_ASSERT(failure(sys::exits::NOINPUT));
  CPPUNIT_ASSERT(failure(sys::exits::NOUSER));
  CPPUNIT_ASSERT(failure(sys::exits::NOHOST));
  CPPUNIT_ASSERT(failure(sys::exits::UNAVAILABLE));
  CPPUNIT_ASSERT(failure(sys::exits::SOFTWARE));
  CPPUNIT_ASSERT(failure(sys::exits::OSERR));
  CPPUNIT_ASSERT(failure(sys::exits::OSFILE));
  CPPUNIT_ASSERT(failure(sys::exits::CANTCREAT));
  CPPUNIT_ASSERT(failure(sys::exits::CANTCREATE));
  CPPUNIT_ASSERT(failure(sys::exits::IOERR));
  CPPUNIT_ASSERT(failure(sys::exits::TEMPFAIL));
  CPPUNIT_ASSERT(failure(sys::exits::PROTOCOL));
  CPPUNIT_ASSERT(failure(sys::exits::NOPERM));
  CPPUNIT_ASSERT(failure(sys::exits::CONFIG));
  CPPUNIT_ASSERT(failure(sys::exits::CANTREMOVE));

  CPPUNIT_ASSERT(failure(sys::exits::MAX));
}

#import std.ostringstream
auto tests::unit::exits::Fixture::test_output_zero() -> void {
  std::ostringstream buf;
  sys::exits::Code ex;
  buf << ex;
  std::string recovered(buf.str());
  CPPUNIT_ASSERT("exit 0" == recovered);
}

#import std.ostream
#import std.clog
auto tests::unit::exits::Fixture::test_output_all() -> void {
  std::ostream &out(std::clog);
  char const *sep = "all possible exit codes: ";
  for (unsigned i(0), e(sys::exits::MAX+1); i != e; ++i) {
    std::ostringstream buf;
    sys::exits::Code ex(i);
    buf << ex;
    out << sep << buf.str();
    sep = ", ";
  }
  out << ".\n";
}

#import std.exception
auto tests::unit::exits::Fixture::test_throwing() -> void {
  for (unsigned i(0), e(sys::exits::MAX+1); i != e; ++i) {
    sys::exits::Code code(i);
    try {
      throw code;
    } catch (std::exception const &) {
      // Code is not a descendant of std::exception, it is a different animal
      CPPUNIT_ASSERT(false);
    } catch (sys::exits::Code const &) {
      // We can catch these thrown things at the top level without
      // lower-level catchers for std::exception descendants getting in the way
      CPPUNIT_ASSERT(true);
    } catch (...) {
      CPPUNIT_ASSERT(false);
    }
  }
}

#import std.is_same
#import sys.wait.Status // expects to supply sys::wait::exitstatus<...>(...);
#import sys.call.result.wait.Value
auto tests::unit::exits::Fixture::test_Codable() -> void {
  auto waited = ::sys::call::result::wait::Value<pid_t, ::sys::wait::Status>{};
  auto tatus = status(waited);
  // We MUST reference the function template instance by a full path (ADL won't find it)
  using ::sys::wait::exitstatus;
  { auto code = exitstatus<::sys::exits::Code>(tatus); // <-------------------- testing this
    static_assert(std::is_same_v<decltype(code), ::sys::exits::Code>); }
  { auto code = exitstatus<int signed>(tatus); // <---------------------------- testing this
    static_assert(std::is_same_v<decltype(code), int signed>); }
  { auto code = exitstatus<int unsigned>(tatus); // <-------------------------- testing this
    static_assert(std::is_same_v<decltype(code), int unsigned>); }
}
#import std.error_code
#import sys.exits.error_code
#import sys.exits.constants
auto tests::unit::exits::Fixture::test_std_error_code() -> void {
  using namespace ::sys::exits;
  std::error_code ec0{OK};
  CPPUNIT_ASSERT_EQUAL(0, ec0.value());
  std::error_code ec1{FAIL};
  CPPUNIT_ASSERT_EQUAL(1, ec1.value());
  CPPUNIT_ASSERT(ec0.category() == ec1.category());
  std::error_code ec2{TWO};
  CPPUNIT_ASSERT_EQUAL(2, ec2.value());
  CPPUNIT_ASSERT(ec0.category() == ec2.category());
}

#import std.error_condition
#import sys.exits.error_condition
auto tests::unit::exits::Fixture::test_std_error_condition() -> void {
  using namespace ::sys::exits;
  std::error_condition ec0{Condition::SUCCESS};
  CPPUNIT_ASSERT_EQUAL(0, ec0.value());
  std::error_condition ec1{Condition::FAILURE};
  CPPUNIT_ASSERT_EQUAL(1, ec1.value());
  CPPUNIT_ASSERT(ec0.category() == ec1.category());
}

#import tests.unit.exits.Category
#import tests.unit.exits.Code
#import tests.unit.exits.Condition
#import tests.unit.exits.Exception
#import tests.unit.exits.Quitting
#import rigging.suite.io
auto tests::unit::exits::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("exits");
  series << call("constants", &Fixture::test_constants)
         << call("predicates", &Fixture::test_predicates)
         << call("output", &Fixture::test_output_zero)
         << call("output", &Fixture::test_output_all)
         << call("throwing", &Fixture::test_throwing)
         << call("Codable", &Fixture::test_Codable)
    ;
  {
    Stream stud("std");
    stud << call("std::error_code", &Fixture::test_std_error_code)
         << call("std::error_condition", &Fixture::test_std_error_condition)
      ;
    series << add(std::move(stud));
  }
  series << add<Code>()
         << add<Condition>()
         << add<Category>()
         << add<Exception>()
         << add<Quitting>()
    ;
  return finalize(series);
}
#divert </cpp>

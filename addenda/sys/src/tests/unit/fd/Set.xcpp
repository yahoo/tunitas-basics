// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::fd { class Set; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.fd.Set
struct tests::unit::fd::Set : public cppunit::test::Fixture {
  using Subject = ::sys::fd::Set;
  auto test_constructor_default() -> void;
  auto test_constructor_copy() -> void;
  auto test_constructor_move() -> void;
  auto test_assignment_copy() -> void;
  auto test_assignment_move() -> void;
  // Can't test for failure on these because they don't do bounds checking <segfault!>
  auto test_operator_index_lhs() -> void;
  auto test_operator_index_rhs() -> void;
  auto test_at_lhs_good() -> void;
  auto test_at_lhs_fail() -> void;
  auto test_at_rhs_good() -> void;
  auto test_at_rhs_fail() -> void;
  auto test_empty() -> void;
  auto test_size() -> void;
  auto test_capacity() -> void;
  auto test_iterator() -> void;
  auto test_const_iterator() -> void;
  auto test_clear_all() -> void;
  auto test_clear_bit() -> void;
  auto test_set_bit() -> void;
  auto test_is_set() -> void;
  auto test_is_unset() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.move
namespace tests::unit::fd {
  auto Set::test_constructor_default() -> void {
    auto subject = Subject();
    CPPUNIT_ASSERT(subject.empty());
  }
  auto Set::test_constructor_copy() -> void {
    auto specimen = Subject{};
    CPPUNIT_ASSERT(false == specimen.at(333));
    specimen.at(333) = true;
    auto const copy = Subject{specimen};
    CPPUNIT_ASSERT(copy.at(333));
  }
  auto Set::test_constructor_move() -> void {
    auto specimen = Subject{};
    CPPUNIT_ASSERT(false == specimen.at(333));
    specimen.at(333) = true;
    auto copy = Subject{std::move(specimen)};
    CPPUNIT_ASSERT(copy.at(333));
  }
  auto Set::test_assignment_copy() -> void {
    auto specimen = Subject{};
    CPPUNIT_ASSERT(false == specimen.at(333));
    specimen.at(333) = true;
    auto copy = Subject{};
    copy = specimen;
    CPPUNIT_ASSERT(copy.at(333));
  }
  auto Set::test_assignment_move() -> void {
    auto specimen = Subject{};
    CPPUNIT_ASSERT(false == specimen.at(333));
    specimen.at(333) = true;
    auto moved = Subject{};
    moved = std::move(specimen);
    CPPUNIT_ASSERT(moved.at(333));
  }
  auto Set::test_operator_index_lhs() -> void {
    auto subject = Subject{};
    subject[99] = true;
    CPPUNIT_ASSERT(false == subject.at(98));
    CPPUNIT_ASSERT(true == subject.at(99));
    CPPUNIT_ASSERT(false == subject.at(100));
    subject[88] = true;
    CPPUNIT_ASSERT(false == subject.at(87));
    CPPUNIT_ASSERT(true == subject.at(88));
    CPPUNIT_ASSERT(false == subject.at(89));
  }
  auto Set::test_operator_index_rhs() -> void {
    auto subject = Subject{};
    subject[99] = true;
    CPPUNIT_ASSERT(false == subject[98]);
    CPPUNIT_ASSERT(true == subject[99]);
    CPPUNIT_ASSERT(false == subject[100]);
    subject[88] = true;
    CPPUNIT_ASSERT(false == subject[87]);
    CPPUNIT_ASSERT(true == subject[88]);
    CPPUNIT_ASSERT(false == subject[89]);
  }
  auto Set::test_at_lhs_good() -> void try {
    auto subject = Subject();
    subject.at(123) = true;
    CPPUNIT_ASSERT(subject.is_set(123));
  } catch (std::exception const &) {
    CPPUNIT_ASSERT(false);
  }
  auto Set::test_at_lhs_fail() -> void try {
    auto subject = Subject();
    subject.at(123'456'789) = true;
    CPPUNIT_ASSERT(false);
  } catch (std::exception const &) {
    CPPUNIT_ASSERT(true);
  }
  auto Set::test_at_rhs_good() -> void try {
    auto const subject = Subject();
    subject.at(123);
    CPPUNIT_ASSERT(true);
  } catch (std::exception const &) {
    CPPUNIT_ASSERT(false);
  }
  auto Set::test_at_rhs_fail() -> void try {
    auto const subject = Subject();
    subject.at(123'456'789);
    CPPUNIT_ASSERT(false);
  } catch (std::exception const &) {
    CPPUNIT_ASSERT(true);
  }
  auto Set::test_empty() -> void {
    auto subject = Subject{};
    CPPUNIT_ASSERT(subject.empty());
    subject[333] = true;
    CPPUNIT_ASSERT(!subject.empty());
  }
  auto Set::test_size() -> void {
    auto subject = Subject{};
    CPPUNIT_ASSERT(0 == subject.size());
    subject[111] = true;
    subject[222] = true;
    subject[333] = true;
    subject[444] = true;
    CPPUNIT_ASSERT(4 == subject.size());
  }
  auto Set::test_capacity() -> void {
    auto subject = Subject{};
    CPPUNIT_ASSERT(1023 <= subject.capacity());
  }
  auto Set::test_iterator() -> void {
    auto subject = Subject{};
    auto iterations = 0u;
    for (auto _ : subject) {
      CPPUNIT_ASSERT(_ || !_);
      ++iterations;
    }
    CPPUNIT_ASSERT(1023 <= iterations);
  }
  auto Set::test_const_iterator() -> void {
    auto const subject = Subject{};
    auto iterations = 0u;
    for (auto _ : subject) {
      CPPUNIT_ASSERT(_ || !_);
      ++iterations;
    }
    CPPUNIT_ASSERT(1023 <= iterations);
  }
  auto Set::test_clear_all() -> void {
    auto subject = Subject{};
    CPPUNIT_ASSERT(0 == subject.size());
    subject[111] = true;
    subject[222] = true;
    subject[333] = true;
    subject[444] = true;
    CPPUNIT_ASSERT(4 == subject.size());
    subject.clear();
    CPPUNIT_ASSERT(0 == subject.size());
  }
  auto Set::test_clear_bit() -> void {
    auto subject = Subject{};
    CPPUNIT_ASSERT(0 == subject.size());
    subject.set(111);
    subject.set(222);
    subject.set(333);
    subject.set(444);
    CPPUNIT_ASSERT(4 == subject.size());
    subject.clear(111);
    subject.clear(222);
    subject.clear(333);
    subject.clear(444);
    CPPUNIT_ASSERT(0 == subject.size());
  }
  auto Set::test_set_bit() -> void {
    auto subject = Subject{};
    CPPUNIT_ASSERT(0 == subject.size());
    subject.set(111);
    CPPUNIT_ASSERT(1 == subject.size());
  }
  auto Set::test_is_set() -> void {
    auto subject = Subject{};
    CPPUNIT_ASSERT(0 == subject.size());
    subject.set(111);
    CPPUNIT_ASSERT(subject.is_set(111));
    CPPUNIT_ASSERT(!subject.is_set(222));
  }
  auto Set::test_is_unset() -> void {
    auto subject = Subject{};
    CPPUNIT_ASSERT(0 == subject.size());
    subject.set(111);
    CPPUNIT_ASSERT(!subject.is_unset(111));
    CPPUNIT_ASSERT(subject.is_unset(222));
  }
}
#import rigging.suite.io
auto tests::unit::fd::Set::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("Set");
  series << []() {
              Stream con("constructor");
              con << call("default", &Set::test_constructor_default)
                  << call("copy", &Set::test_constructor_copy)
                  << call("move", &Set::test_constructor_move)
                  << END;
              return con;
            }()
         << []() {
              Stream ass("assignment");
              ass << call("copy", &Set::test_assignment_copy)
                  << call("move", &Set::test_assignment_move)
                  << END;
              return ass;
            }()
         << []() {
              Stream ind("operator[]");
              ind << call("lhs", &Set::test_operator_index_lhs)
                  << call("rhs", &Set::test_operator_index_rhs)
                  << END;
              return ind;
            }()
         << []() {
              Stream ind("at");
              ind << []() {
                       Stream lhs("lhs");
                       lhs << call("good", &Set::test_at_lhs_good)
                           << call("fail", &Set::test_at_lhs_fail)
                           << END;
                       return lhs;
                     }()
                  << []() {
                       Stream rhs("rhs");
                       rhs << call("good", &Set::test_at_rhs_good)
                           << call("fail", &Set::test_at_rhs_fail)
                           << END;
                       return rhs;
                     }()
                  << END;
              return ind;
            }()
         << call("empty", &Set::test_empty)
         << call("size", &Set::test_size)
         << call("capacity", &Set::test_capacity)
         << call("iterator", &Set::test_iterator)
         << call("const_iterator", &Set::test_const_iterator)
         << []() {
              Stream clr("clear");
              clr << call("all", &Set::test_clear_all)
                  << call("rhs", &Set::test_clear_bit)
                  << END;
              return clr;
            }()
         << call("set", &Set::test_set_bit)
         << call("is_set", &Set::test_is_set)
         << call("is_unset", &Set::test_is_unset)
         << END;
  return finalize(series);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::fd::set { class Find_First_Set; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.fd.Set
class tests::unit::fd::set::Find_First_Set : public cppunit::test::Fixture {
public:
  using Set = ::sys::fd::Set;
  auto test_case_01() -> void;
  auto test_case_02() -> void;
  auto test_arguments_1() -> void;
  auto test_arguments_2() -> void;
  auto test_arguments_3() -> void;
  auto test_arguments_4() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import sys.fd.set.ffs
auto tests::unit::fd::set::Find_First_Set::test_case_01() -> void {
#warning WRITETHIS auto tests::unit::fd::set::Find_First_Set::test_case_01() -> void
}
auto tests::unit::fd::set::Find_First_Set::test_case_02() -> void {
#warning WRITETHIS auto tests::unit::fd::set::Find_First_Set::test_case_03() -> void
}
auto tests::unit::fd::set::Find_First_Set::test_arguments_1() -> void {
#warning WRITETHIS auto tests::unit::fd::set::Find_First_Set::test_arguments_1() -> void
}
auto tests::unit::fd::set::Find_First_Set::test_arguments_2() -> void {
#warning WRITETHIS auto tests::unit::fd::set::Find_First_Set::test_arguments_2() -> void
}
auto tests::unit::fd::set::Find_First_Set::test_arguments_3() -> void {
#warning WRITETHIS auto tests::unit::fd::set::Find_First_Set::test_arguments_3() -> void
}
auto tests::unit::fd::set::Find_First_Set::test_arguments_4() -> void {
#warning WRITETHIS auto tests::unit::fd::set::Find_First_Set::test_arguments_4() -> void
}
#import rigging.suite.io
auto tests::unit::fd::set::Find_First_Set::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("ffs");
  {
    Stream cas("case");
    cas << call("01", &Find_First_Set::test_case_01)
        << call("02", &Find_First_Set::test_case_02)
      ;
    series << move(cas);
  } {
    Stream arg("arguments");
    arg << call("1", &Find_First_Set::test_arguments_1)
        << call("2", &Find_First_Set::test_arguments_2)
        << call("3", &Find_First_Set::test_arguments_3) 
        << call("4", &Find_First_Set::test_arguments_4)
     ;
    series << move(arg);
  }
  return finalize(series);
}
#endiv

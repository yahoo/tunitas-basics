// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::fd { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.fd.set.Reference
struct tests::unit::fd::Fixture : public cppunit::test::Fixture {
  auto test_Flag() -> void;
  auto test_Flags() -> void;
  auto test_constants() -> void;
  auto test_usage_Managed() -> void;
  auto test_usage_Set() -> void;
  auto test_usage_read() -> void;
  auto test_usage_write() -> void;
  auto test_usage_except() -> void;
  static auto suite() -> cppunit::Test *;
protected:
  using Purpose = ::sys::fd::set::Purpose;
  using Reads = ::sys::fd::set::Reference<Purpose::READ>::Optional;
  using Writes = ::sys::fd::set::Reference<Purpose::WRITE>::Optional;
  using Excepts = ::sys::fd::set::Reference<Purpose::EXCEPT>::Optional;
  // this does nothing ... but is it callable?  That is the test
  auto syscallie(Reads) -> void;
  auto syscallie(Writes) -> void;
  auto syscallie(Excepts) -> void;
  auto syscallie(Reads, unsigned index) -> void;
  auto syscallie(Writes, unsigned index) -> void;
  auto syscallie(Excepts, unsigned index) -> void;
};
#endiv
#divert <cpp>
namespace tests::unit::fd {
  auto Fixture::syscallie(Reads r) -> void   { CPPUNIT_ASSERT(r || !r); }
  auto Fixture::syscallie(Writes w) -> void  { CPPUNIT_ASSERT(w || !w); }
  auto Fixture::syscallie(Excepts e) -> void { CPPUNIT_ASSERT(e || !e); }
  auto Fixture::syscallie(Reads r, unsigned index) -> void   { CPPUNIT_ASSERT(r.value().get().is_set(index)); }
  auto Fixture::syscallie(Writes w, unsigned index) -> void  { CPPUNIT_ASSERT(w.value().get().is_set(index)); }
  auto Fixture::syscallie(Excepts e, unsigned index) -> void { CPPUNIT_ASSERT(e.value().get().is_set(index)); }
}
#import sys.fd.Flag
#import sys.fd.Flags
namespace tests::unit::fd {
  auto Fixture::test_Flag() -> void {
    using Subject = ::sys::fd::Flag;
    auto subject = Subject{};
    subject = Subject::NONE;
    subject = Subject::CLOEXEC;
    CPPUNIT_ASSERT(subject != Subject{});
  }
  auto Fixture::test_Flags() -> void {
    using ::sys::fd::Flag;
    using Subject = ::sys::fd::Flags;
    auto subject = Subject{};
    subject |= Flag::NONE;
    subject |= Flag::CLOEXEC;
    CPPUNIT_ASSERT(subject != Subject{});
  }
}
#import sys.fd.constants
namespace tests::unit::fd {
  auto Fixture::test_constants() -> void {
    using namespace ::sys::fd::constants;
    using Subject = ::sys::fd::Flags;
    auto subject = Subject{};
    subject |= NONE;
    subject |= CLOEXEC;
    CPPUNIT_ASSERT(subject != Subject{});
  }
}
#import sys.fd.Managed
#import sys.fd.Set
#import sys.fd.read
#import sys.fd.write
#import sys.fd.except
namespace tests::unit::fd {
  auto Fixture::test_usage_Managed() -> void {
    using Subject = ::sys::fd::Managed;
    auto subject = Subject{};
    CPPUNIT_ASSERT(sizeof (subject));
  }
  auto Fixture::test_usage_Set() -> void {
    using Subject = ::sys::fd::Set;
    auto subject = Subject{};
    CPPUNIT_ASSERT(sizeof (subject));
  }
  auto Fixture::test_usage_read() -> void {
    using ::sys::fd::Set;
    auto s = Set{};
    auto r = read(s);
    syscallie(r);
    s.set(33);
    syscallie(r, 33);
  }
  auto Fixture::test_usage_write() -> void {
    using ::sys::fd::Set;
    auto s = Set{};
    s.set(44);
    auto w = write(s);
    syscallie(w, 44);
  }
  auto Fixture::test_usage_except() -> void {
    using ::sys::fd::Set;
    auto s = Set{};
    s.set(55);
    auto e = except(s);
    syscallie(e, 55);
  }
}
#import tests.unit.fd.Managed
#import tests.unit.fd.set.Find_First_Set
#import tests.unit.fd.set.Find_Last_Set
#import tests.unit.fd.set.Lhs
#import tests.unit.fd.set.Reference
#import tests.unit.fd.set.Rhs
#import tests.unit.fd.Set
#import rigging.suite.io
auto tests::unit::fd::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("fd");
  series << []() {
              Stream use("usage");
              use << call("Managed", &Fixture::test_usage_Managed)
                  << call("Set", &Fixture::test_usage_Set)
                  << call("read", &Fixture::test_usage_read)
                  << call("write", &Fixture::test_usage_write)
                  << call("except", &Fixture::test_usage_except)
                  << END;
              return use;
            }()
         << call("Flag", &Fixture::test_Flag)
         << call("Flags", &Fixture::test_Flags)
         << call("constants", &Fixture::test_constants)
         << add<Managed>()
         << []() {
              Stream set("set");
              set << add<set::Find_First_Set>()
                  << add<set::Find_Last_Set>()
                  << add<set::Lhs>()
                  << add<set::Rhs>()
                  << add<set::Reference<set::Purpose::READ>>()
                  << add<set::Reference<set::Purpose::WRITE>>()
                  << add<set::Reference<set::Purpose::EXCEPT>>()
                  << add<Set>()
                  << END;
              return set;
            }()
         << END;
  return finalize(series);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::w { class Option; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import tests.unit.w.Palette
#import sys.w.Option
struct tests::unit::w::Option : public cppunit::test::Fixture, private Palette<::sys::w::Option>  {
  using Options = ::sys::w::Options;
  using Subject = ::sys::w::Option;
  auto setUp() -> void override final; // Unify the MI
  auto tearDown() -> void override final;
  auto test_flag_universe() -> void;
  auto test_flag_constants() -> void;
  auto test_flag() -> void;
  auto test_is_flag() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import sys.w.as
namespace tests::unit::w {
  auto Option::setUp() -> void    { Palette<Subject>::setUp(); }
  auto Option::tearDown() -> void { Palette<Subject>::tearDown(); }
  auto Option::test_flag_universe() -> void {
    unsigned count = 0;
    auto none = Options::NONE;
    for (auto o : some_flag_series) {
      CPPUNIT_ASSERT(none == o || (int) o != 0);
      count++;
    }
    CPPUNIT_ASSERT(0 < count);
  }
  auto Option::test_flag_constants() -> void {
    // utter them all
    Subject o;
    o = Subject::CONTINUED;
    o = Subject::EXITED;
    o = Subject::NOHANG;
    o = Subject::NOWAIT;
    o = Subject::STOPPED;
    o = Subject::UNTRACED;
    CPPUNIT_ASSERT(Subject::UNTRACED == o);
  }
  auto Option::test_flag() -> void {
    using ::sys::w::as;
    for (auto item : some_flag_series) {
      Subject o = as<Subject>(item); // <---- test this (the identity transform)
      CPPUNIT_ASSERT(item == o);
      Options s = as<Options>(item);
      CPPUNIT_ASSERT(s == as<Subject>(as<Subject>(o)));
    }
  }
}
#import rigging.suite.io
auto tests::unit::w::Option::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  using ::rigging::suite::call; // because namespace tests::unit::call occludes
  Stream series("Option");
  series << call("flag_universe", &Option::test_flag_universe) 
         << call("flag_constants", &Option::test_flag_constants) 
         << call("flag", &Option::test_flag)
         << END;
  return finalize(series);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::w { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.w.Option
#import sys.w.Options
struct tests::unit::w::Fixture : public cppunit::test::Fixture {
  using Option = ::sys::w::Option;
  using Options = ::sys::w::Options;
  auto test_Option() -> void;
  auto test_Options() -> void;
  auto test_constants() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import sys.w.Option
#import sys.w.Options
auto tests::unit::w::Fixture::test_Option() -> void {
  auto s = Option{};
  s = Option{};
  s = Option::CONTINUED;
  s = Option::EXITED;
  s = Option::NOHANG;
  s = Option::NOWAIT;
  s = Option::STOPPED;
  s = Option::UNTRACED;
  CPPUNIT_ASSERT(sizeof (s));
}
auto tests::unit::w::Fixture::test_Options() -> void {
  using Subject = ::sys::w::Options;
  auto s = Subject{};
  s = Option::CONTINUED | Option::NONE;
  s = Option::EXITED | Option::NONE;
  s = Option::NOHANG | Option::NONE;
  s = Option::NOWAIT | Option::NONE;
  s = Option::STOPPED | Option::NONE;
  s = Option::UNTRACED | Option::NONE;
  CPPUNIT_ASSERT(sizeof (s));
}
#import sys.w.constants
auto tests::unit::w::Fixture::test_constants() -> void {
  using namespace sys::w::constants;
  auto s = Options{};
  //
  s = NONE;
  s = CONTINUED;
  s = EXITED;
  s = NOHANG;
  s = NOWAIT;
  s = STOPPED;
  s = UNTRACED;
  //
  s = NONE | NONE;
  s = CONTINUED | NONE;
  s = EXITED | NONE;
  s = NOHANG | NONE;
  s = NOWAIT | NONE;
  s = STOPPED | NONE;
  s = UNTRACED | NONE;
  //
  s = NONE;
  s = CONTINUED | NONE;
  s = EXITED | CONTINUED | NONE;
  s = NOHANG | EXITED | CONTINUED | NONE;
  s = NOWAIT | NOHANG | EXITED | CONTINUED | NONE;
  s = STOPPED | NOWAIT | NOHANG | EXITED | CONTINUED | NONE;
  s = UNTRACED | STOPPED | NOWAIT | NOHANG | EXITED | CONTINUED | NONE;
  CPPUNIT_ASSERT(sizeof (s));
}
#import tests.unit.w.Options
#import tests.unit.w.Option
#import rigging.suite.io
auto tests::unit::w::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  namespace testing = tests::unit::w; // avoid the ambiguous Option, Options nearby
  Stream series("w");
  series << []() {
              Stream use{"usage"};
              use << call("Option", &Fixture::test_Option)
                  << call("Options", &Fixture::test_Options)
                  << END;
              return use;
            }()
         << call("constants", &Fixture::test_constants)
         << add<testing::Option>()
         << add<testing::Options>()
         << END;
  return finalize(series);
}
#endiv

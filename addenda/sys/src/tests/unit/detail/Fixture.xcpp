// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::detail { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
struct tests::unit::detail::Fixture : public cppunit::test::Fixture {
  auto test_usage_Initialized() -> void;
  static auto suite() -> cppunit::Test *;
protected:
  struct Thing { int i; };
};
#endiv
#divert <cpp>
#import std.is_default_constructible
#import std.is_copy_constructible
#import std.is_move_constructible
#import std.is_copy_assignable
#import std.is_move_assignable
#import sys.detail.Initialized
namespace tests::unit::detail {
  auto Fixture::test_usage_Initialized() -> void {
    using Subject = ::sys::detail::Initialized<Thing>;
    static_assert(std::is_default_constructible_v<Subject>);
    static_assert(std::is_copy_constructible_v<Subject>);
    static_assert(std::is_move_constructible_v<Subject>);
    static_assert(std::is_copy_assignable_v<Subject>);
    static_assert(std::is_move_assignable_v<Subject>);
    CPPUNIT_ASSERT(true);
  }
}
#import rigging.suite.io
auto tests::unit::detail::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("detail");
  series << []() {
              Stream use("usage");
              use << call("Initialized", &Fixture::test_usage_Initialized)
                  << END;
              return use;
            }()
         << END;
  return finalize(series);
}
#endiv

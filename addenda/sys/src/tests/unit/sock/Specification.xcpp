// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::sock { class Specification; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.sock.Type
#import sys.sock.Options
#import sys.sock.Specification
class tests::unit::sock::Specification : public cppunit::test::Fixture {
public:
  using Type = ::sys::sock::Type;
  using Option = ::sys::sock::Option;
  using Options = ::sys::sock::Options;
  using Subject = ::sys::sock::Specification;
  auto test_constructor_default() -> void;
  auto test_constructor_Type() -> void;
  auto test_constructor_Options() -> void;
  auto test_operator_int() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
namespace tests::unit::sock {
  auto Specification::test_constructor_default() -> void {
    auto subject = Subject{}; // <----------- test this, implicitly Type::UNSPECIFIED
    CPPUNIT_ASSERT(0 == (int)subject);
  }
  auto Specification::test_constructor_Type() -> void {
    auto subject = Subject{Type::STREAM};
    CPPUNIT_ASSERT((int)Type::STREAM == (int)subject);
  }
  auto Specification::test_constructor_Options() -> void {
    auto subject = Subject{Option::CLOEXEC}; // <----------- test this, implicitly Type::UNSPECIFIED
    CPPUNIT_ASSERT((int)Option::CLOEXEC == (int)subject);
  }
  auto Specification::test_operator_int() -> void {
    auto subject = Type::STREAM | Option::CLOEXEC;
    auto const actual = (int)subject; // <--------------- test this
    CPPUNIT_ASSERT(0 != actual);
  }
}
#import rigging.suite.io
auto tests::unit::sock::Specification::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("Specification");
  series << []() {
              Stream con{"constructor"};
              con << call("default", &Specification::test_constructor_default)
                  << call("Type", &Specification::test_constructor_Type)
                  << call("Options", &Specification::test_constructor_Options)
                ;
              return move(con);
            }()
         << call("operator int", &Specification::test_operator_int)
    ;
  return finalize(series);
}
#endiv

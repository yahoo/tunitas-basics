// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::seek { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.seek.Whence
struct tests::unit::seek::Fixture : public cppunit::test::Fixture {
  using Subject = ::sys::seek::Whence;
  auto test_Whence() -> void;
  auto test_constants() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
auto tests::unit::seek::Fixture::test_Whence() -> void {
  auto s = Subject{};
  s = Subject::SET;
  s = Subject::CURRENT;
  s = Subject::END;
  s = Subject::CUR;
#ifdef SEEK_DATA
  s = Subject::DATA;
#endif
#ifdef SEEK_HOLE
  s = Subject::HOLE;
#endif
  static_assert(std::is_enum_v<Subject>);
  CPPUNIT_ASSERT(sizeof (s));
}
#import sys.seek.constants
auto tests::unit::seek::Fixture::test_constants() -> void {
  using namespace sys::seek::constants;
  auto s = Subject{};
  s = SET;
  s = CURRENT;
  s = END;
  s = CUR;
#ifdef SEEK_DATA
  s = DATA;
#endif
#ifdef SEEK_HOLE
  s = HOLE;
#endif
  CPPUNIT_ASSERT(sizeof (s));
}
#import rigging.suite.io
auto tests::unit::seek::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("seek");
  series << call("Whence-", &Fixture::test_Whence)
         << call("constants", &Fixture::test_constants)
         << END;
  return finalize(series);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::at { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.at.Position
#import sys.at.Flag
class tests::unit::at::Fixture : public cppunit::test::Fixture {
public:
  using Flag = ::sys::at::Flag;
  using Position = ::sys::at::Position;
  auto test_Cwd() -> void;
  auto test_Position() -> void;
  auto test_Flag() -> void;
  auto test_Flags() -> void;
  auto test_constants() -> void;
  static auto suite() -> cppunit::Test *;
protected:
  auto syscall(Position) -> void;
};
#endiv
#divert <cpp>
namespace tests::unit::at {
  auto Fixture::syscall(Position) -> void {
    // That this was callable at all was the test
    CPPUNIT_ASSERT(true);
  }
}
#import sys.at.Cwd
#import sys.at.Flags
namespace tests::unit::at {
  auto Fixture::test_Cwd() -> void {
    using Subject = ::sys::at::Cwd;
    CPPUNIT_ASSERT(sizeof (Subject::FDCWD));
  }
  auto Fixture::test_Position() -> void {
    using ::sys::at::Cwd;
    using ::sys::id::File;
    syscall(Cwd::FDCWD);
    syscall(3);
    syscall(File{3});
  }
  auto Fixture::test_Flag() -> void {
    using Subject = ::sys::at::Flag;
    auto subject = Subject{};
    subject = Flag::SYMLINK_NOFOLLOW;
    subject = Flag::SYMLINK_FOLLOW;
    subject = Flag::REMOVEDIR;
    subject = Flag::NO_AUTOMOUNT;
    subject = Flag::EMPTY_PATH;
    subject = Flag::EACCESS;
    CPPUNIT_ASSERT(subject != Subject{});
  }
  auto Fixture::test_Flags() -> void {
    using Subject = ::sys::at::Flags;
    auto subject = Subject{};
    subject |= Flag::SYMLINK_NOFOLLOW;
    subject |= Flag::SYMLINK_FOLLOW;
    subject |= Flag::REMOVEDIR;
    subject |= Flag::NO_AUTOMOUNT;
    subject |= Flag::EMPTY_PATH;
    subject |= Flag::EACCESS;
    CPPUNIT_ASSERT(subject != Subject{});
  }
}
#import sys.at.constants
namespace tests::unit::at {
  auto Fixture::test_constants() -> void {
    using namespace ::sys::at::constants;
    using Subject = ::sys::at::Flags;
    auto subject = Subject{};
    subject |= SYMLINK_NOFOLLOW;
    subject |= SYMLINK_FOLLOW;
    subject |= REMOVEDIR;
    subject |= NO_AUTOMOUNT;
    subject |= EMPTY_PATH;
    subject |= EACCESS;
    CPPUNIT_ASSERT(subject != Subject{});
  }
}
#import rigging.suite.io
auto tests::unit::at::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("at");
  series << call("Cwd", &Fixture::test_Cwd)
         << call("Position", &Fixture::test_Position)
         << call("Flag", &Fixture::test_Flag)
         << call("Flags", &Fixture::test_Flags)
         << call("constants", &Fixture::test_constants)
    ;
  return finalize(series);
}
#endiv

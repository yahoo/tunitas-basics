// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.size_t
namespace tests::unit::call {
  template<std::size_t EXPECTED, typename SUBJECT> class Size;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
template<std::size_t EXPECTED_VALUE, typename SUBJECT> class tests::unit::call::Size : public cppunit::test::Fixture { 
public: 
  constexpr static auto EXPECTED = EXPECTED_VALUE;
  using Subject = SUBJECT;
  auto test_expected() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <tpp>
#import sys.call.result.Value
#import sys.call.result.Size
template<std::size_t _1, typename _2> auto tests::unit::call::Size<_1, _2>::test_expected() -> void {
  constexpr auto const actual = ::sys::call::result::Size<Subject>::value;
  constexpr auto const expected = EXPECTED;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

#import std.type_info
#import std.string_literals
#import rigging.suite.io
template<std::size_t _1, typename _2> auto tests::unit::call::Size<_1, _2>::suite() -> cppunit::Test * {
  using namespace std::string_literals;
  using namespace ::rigging::suite;
  using ::rigging::suite::call; // because namespace tests::unit::call occludes
  Stream series("Size<"s + typeid(Subject).name() + ">"s);
  series << call("expected", &Size::test_expected);
  return finalize(series);
}
#endiv

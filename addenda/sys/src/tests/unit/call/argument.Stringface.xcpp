// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::call::argument { class Stringface;  }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.call.argument.Stringface
#import std.size_t
class tests::unit::call::argument::Stringface : public cppunit::test::Fixture { 
public: 
  using Subject = ::sys::call::argument::Stringface;
  auto test_usage() -> void;
  auto test_constructor_charstar_consty() -> void;
  auto test_constructor_charstar_muting() -> void;
  auto test_constructor_stringz_consty() -> void;
  auto test_constructor_stringz_muting() -> void;
  auto test_constructor_stringn_consty() -> void;
  auto test_constructor_stringn_muting() -> void;
  auto test_constructor_string() -> void;
  auto test_constructor_filesystem() -> void;
  auto test_constructor_copy() -> void;
  auto test_constructor_move() -> void;
  auto test_assignment_copy() -> void;
  auto test_assignment_move() -> void;
  auto test_operator_cast_charstar() -> void;
  auto test_operator_cast_stringz() -> void;
  auto test_c_str() -> void;
  template<typename STRINGY> auto test_as() -> void;
  static auto suite() -> cppunit::Test *;
  auto test_data() -> void;
  auto test_size() -> void;
  auto test_empty() -> void;
protected:
  static auto syscall(Subject) -> void;
};
namespace tests::unit::call::argument {
  template<> auto Stringface::test_as<char const *>() -> void;
  template<> auto Stringface::test_as<c::const_stringz>() -> void;
  template<> auto Stringface::test_as<c::const_stringn>() -> void;
  template<> auto Stringface::test_as<std::string_view>() -> void;
}
#endiv
#divert <tpp>
#import sys.call.argument.as
template<typename STRINGY> auto tests::unit::call::argument::Stringface::test_as() -> void {
  auto const specimen = "./looky-here";
  auto test = [start=specimen](Subject subject) {
                auto const actual = ::sys::call::argument::as<STRINGY>(subject);
                auto const expected = [start]() -> STRINGY {
                                        auto const finish = start + std::char_traits<char>::length(start);
                                        return STRINGY{start, finish};
                                      }();
                CPPUNIT_ASSERT(expected == actual); // either a pointer compare or a lexicographic compare
              };
  test(specimen);
}
#endiv
#divert <cpp>
#import c.stringz
#import c.const_stringz
#import c.stringn
#import c.const_stringn
template<> auto tests::unit::call::argument::Stringface::test_as<char const *>() -> void {
  auto const specimen = "./looky-here";
  auto test = [expected=specimen](Subject subject) {
                auto const actual = ::sys::call::argument::as<char const *>(subject);
                CPPUNIT_ASSERT(expected == actual); // either a pointer compare or a lexicographic compare
              };
  test(specimen);
}
template<> auto tests::unit::call::argument::Stringface::test_as<c::const_stringz>() -> void {
  auto const specimen = "./looky-here";
  auto const expected = c::const_stringz{specimen};
  auto test = [expected](Subject subject) {
                auto const actual = ::sys::call::argument::as<c::const_stringz>(subject);
                CPPUNIT_ASSERT(expected == actual); // either a pointer compare or a lexicographic compare
              };
  test(specimen);
}
template<> auto tests::unit::call::argument::Stringface::test_as<c::const_stringn>() -> void {
  auto const specimen = "./looky-here";
  auto test = [start=specimen](Subject subject) {
                auto const actual = ::sys::call::argument::as<c::const_stringn>(subject);
                auto const expected = [start]() {
                                        auto const length = std::char_traits<char>::length(start);
                                        return c::const_stringn{start, length};
                                      }();
                CPPUNIT_ASSERT(expected == actual); // either a pointer compare or a lexicographic compare
              };
  test(specimen);
}
template<> auto tests::unit::call::argument::Stringface::test_as<std::string_view>() -> void {
  auto const specimen = "./looky-here";
  auto test = [start=specimen](Subject subject) {
                auto const actual = ::sys::call::argument::as<std::string_view>(subject);
                auto const expected = [start]() {
                                        auto const length = std::char_traits<char>::length(start);
                                        return std::string_view{start, length};
                                      }();
                CPPUNIT_ASSERT(expected == actual); // either a pointer compare or a lexicographic compare
              };
  test(specimen);
}
#import std.move
#import std.string_literals
using namespace std::string_literals;
auto tests::unit::call::argument::Stringface::syscall(Subject passage) -> void {
  auto const expected = "/tmp/filename"s;
  auto const &actual = (std::string) passage;
  CPPUNIT_ASSERT_EQUAL("/tmp/filename"s, (std::string) passage);
}
#import c.const_stringz
#import c.const_stringn
#import std.string
#import std.filesystem.path
auto tests::unit::call::argument::Stringface::test_usage() -> void {
  // This is the example from the commentariat above sys.call.argument.Stringface
  syscall("/tmp/filename");
  syscall(c::const_stringz("/tmp/filename"));
  syscall(c::const_stringn{"/tmp/filename"});
  syscall(std::string("/tmp/filename"));
  syscall(std::filesystem::path("/tmp/filename"));
}
auto tests::unit::call::argument::Stringface::test_constructor_charstar_consty() -> void {
  // the lifetime of specimen must be longer than that of subject must be longer than subject's test.
  auto const specimen = "that";
  auto test = [](Subject subject) {
                char const *const cs = subject;
                c::const_stringz const csz = ::sys::call::argument::as<c::const_stringz>(subject);
                CPPUNIT_ASSERT("that"s == cs);
                CPPUNIT_ASSERT("that"s == std::string(csz.c_str()));
              };
  test(specimen);
}
auto tests::unit::call::argument::Stringface::test_constructor_charstar_muting() -> void {
  // the lifetime of specimen must be longer than that of subject must be longer than subject's test.
  char buf[] = { "that" };
  auto const specimen{&buf[0]};
  auto test = [](Subject subject) {
                char const *const cs = subject;
                c::const_stringz const csz = ::sys::call::argument::as<c::const_stringz>(subject);
                CPPUNIT_ASSERT("that"s == cs);
                CPPUNIT_ASSERT("that"s == std::string(csz.c_str()));
              };
  test(specimen);
}
auto tests::unit::call::argument::Stringface::test_constructor_stringz_consty() -> void {
  // the lifetime of specimen must be longer than that of subject must be longer than subject's test.
  auto const specimen = c::const_stringz("that");
  auto test = [](Subject subject) {
                using ::sys::call::argument::as;
                char const *const cs = subject;
                c::const_stringz const csz = as<c::const_stringz>(subject);
                CPPUNIT_ASSERT("that"s == cs);
                CPPUNIT_ASSERT("that"s == std::string(csz.c_str()));
              };
  test(specimen);
}
auto tests::unit::call::argument::Stringface::test_constructor_stringz_muting() -> void {
  // the lifetime of specimen must be longer than that of subject must be longer than subject's test.
  char buf[] = { "that" };
  auto specimen = c::stringz{&buf[0]};
  auto test = [](Subject subject) {
                using ::sys::call::argument::as;
                char const *const cs = subject;
                c::const_stringz const csz = as<c::const_stringz>(subject);
                CPPUNIT_ASSERT("that"s == cs);
                CPPUNIT_ASSERT("that"s == std::string(csz.c_str()));
              };
  test(specimen);
}
auto tests::unit::call::argument::Stringface::test_constructor_stringn_consty() -> void {
  // the lifetime of specimen must be longer than that of subject must be longer than subject's test.
  auto const prep = c::const_stringz("that");
  auto const specimen = c::const_stringn(prep.data(), prep.size());
  auto test = [](Subject subject) {
                char const *const cs = subject;
                using ::sys::call::argument::as;
                c::const_stringz const csz = as<c::const_stringz>(subject);
                CPPUNIT_ASSERT("that"s == cs);
                CPPUNIT_ASSERT("that"s == std::string(csz.c_str()));
              };
  test(specimen);
}
auto tests::unit::call::argument::Stringface::test_constructor_stringn_muting() -> void {
  // the lifetime of specimen must be longer than that of subject must be longer than subject's test.
  char buf[] = { "that" };
  auto prep = c::stringz{&buf[0]};
  auto const specimen = c::stringn(prep.data(), prep.size());
  auto test = [](Subject subject) {
                char const *const cs = subject;
                using ::sys::call::argument::as;
                c::const_stringz const csz = as<c::const_stringz>(subject);
                CPPUNIT_ASSERT("that"s == cs);
                CPPUNIT_ASSERT("that"s == std::string(csz.c_str()));
              };
  test(specimen);
}
auto tests::unit::call::argument::Stringface::test_constructor_string() -> void {
  // the lifetime of specimen must be longer than that of subject must be longer than subject's test.
  auto const specimen = "that"s;
  auto test = [](Subject subject) {
                char const *const cs = subject;
                using ::sys::call::argument::as;
                c::const_stringz const csz = as<c::const_stringz>(subject);
                CPPUNIT_ASSERT("that"s == std::string(cs));
                CPPUNIT_ASSERT("that"s == std::string(csz.c_str()));
              };
  test(specimen);
}
auto tests::unit::call::argument::Stringface::test_constructor_filesystem() -> void {
  // the lifetime of specimen must be longer than that of subject must be longer than subject's test.
  auto const specimen = std::filesystem::path{"that"};
  auto test = [](Subject subject) {
                char const *const cs = subject;
                using ::sys::call::argument::as;
                c::const_stringz const csz = as<c::const_stringz>(subject);
                CPPUNIT_ASSERT("that"s == std::string(cs));
                CPPUNIT_ASSERT("that"s == std::string(csz.c_str()));
              };
  test(specimen);
}
auto tests::unit::call::argument::Stringface::test_constructor_copy() -> void {
  auto const specimen = std::filesystem::path{"that"}; // MUST be a separate anchored variable in this test
  auto test = [](Subject original) {
                auto const copied = Subject{original}; // <------------------------------------ copy constructor
                CPPUNIT_ASSERT_EQUAL((std::string) original, (std::string) copied);
              };
  test(specimen);
}
auto tests::unit::call::argument::Stringface::test_constructor_move() -> void {
  auto const specimen = std::filesystem::path{"that"}; // MUST be a separate anchored variable in this test
  auto test = [&expected=specimen](Subject original) {
                auto const moved = Subject{move(original)}; // <------------------------------- test this, move(...) found by ADL
                CPPUNIT_ASSERT_EQUAL((std::string) expected, (std::string) moved);
                CPPUNIT_ASSERT(true || original.empty()); // <--------------------- WATCHOUT the move constructor DOES NOT empty out the donor.
              };
  test(specimen);
}
auto tests::unit::call::argument::Stringface::test_assignment_copy() -> void {
  auto const specimen = std::filesystem::path{"that"}; // MUST be a separate anchored variable in this test
  auto test = [](Subject original) {
                Subject copied{"overwritten"};
                copied = Subject{original}; // <---------------------------------------------- copy constructor
                CPPUNIT_ASSERT_EQUAL((std::string) original, (std::string) copied);
              };
  test(specimen);
}
auto tests::unit::call::argument::Stringface::test_assignment_move() -> void {
  auto const specimen = std::filesystem::path{"that"}; // MUST be a separate anchored variable in this test
  auto test = [&expected=specimen](Subject original) {
                Subject moved{"overwritten"};
                moved = Subject{move(original)}; // <----------------------------------------- test this, move(...) found by ADL
                CPPUNIT_ASSERT_EQUAL((std::string) expected, (std::string) moved);
                CPPUNIT_ASSERT(true || original.empty()); // <--------------------- WATCHOUT the move assignment DOES NOT empty out the donor.
              };
  test(specimen);
}
auto tests::unit::call::argument::Stringface::test_operator_cast_charstar() -> void {
  // tested above
}
auto tests::unit::call::argument::Stringface::test_operator_cast_stringz() -> void {
  // tested above
}
auto tests::unit::call::argument::Stringface::test_c_str() -> void {
  auto const specimen =  std::string{"./that/thing"};
  Subject subject{specimen};
  auto cstr = ::c::str(subject);
  auto restring = std::string{cstr};
  auto const &actual{restring};
  auto const &expected{specimen};
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::call::argument::Stringface::test_data() -> void {
  auto const expected = "that"s;
  auto test = [expected](Subject subject) {
                auto actual = subject.data();
                CPPUNIT_ASSERT_EQUAL(expected, std::string{actual});
              };
  test("that"s);
}
auto tests::unit::call::argument::Stringface::test_size() -> void {
  auto const expected = 4lu;
  auto test = [expected](Subject subject) {
                auto actual = subject.size();
                CPPUNIT_ASSERT_EQUAL(expected, actual);
              };
  test("that"s);
}
auto tests::unit::call::argument::Stringface::test_empty() -> void {
  auto const expected = 4lu;
  auto test = [expected](Subject subject) {
                CPPUNIT_ASSERT(!subject.empty());
              };
  test("that"s);
}
#import c.const_stringz
#import c.const_stringn
#import std.string
#import std.string_view
#import std.vector
#import rigging.suite.io
auto tests::unit::call::argument::Stringface::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  using ::rigging::suite::call; // because namespace tests::unit::call occludes
  Stream series("Stringface");
  series << []() {
              Stream con("constructor");
              con << []() {
                       Stream nst("consty");
                       nst << call("char const *", &Stringface::test_constructor_charstar_consty)
                           << call("c::const_stringz", &Stringface::test_constructor_stringz_consty)
                           << call("c::const_stringn", &Stringface::test_constructor_stringn_consty)
                         ;
                       return move(nst);
                     }()
                  << []() {
                       Stream non("muting");
                       non << call("char *", &Stringface::test_constructor_charstar_muting)
                           << call("c::stringz", &Stringface::test_constructor_stringz_muting)
                           << call("c::stringn", &Stringface::test_constructor_stringn_muting)
                         ;
                       return move(non);
                     }()
                  << call("std::string", &Stringface::test_constructor_string)
                  << call("std::filesystem:path", &Stringface::test_constructor_filesystem)
                  << call("copy", &Stringface::test_constructor_copy)
                  << call("move", &Stringface::test_constructor_move)
                ;
              return move(con);
            }()
         << []() {
              Stream ass("assignment");
              ass << call("copy", &Stringface::test_assignment_copy)
                  << call("move", &Stringface::test_assignment_move)
                ;
              return move(ass);
            }()
         << []() {
              Stream cas("operator cast");
              cas << call("char const *", &Stringface::test_operator_cast_charstar)
                  << call("c::const_stringz", &Stringface::test_operator_cast_stringz)
                ;
              return move(cas);
            }()
         << call("c::str", &Stringface::test_c_str)
         << []() {
              Stream as("as");
              as << call("char const *", &Stringface::test_as<char const *>)
                 << call("c::const_stringz", &Stringface::test_as<c::const_stringz>)
                 << call("c::const_stringn", &Stringface::test_as<c::const_stringn>)
                 << call("std::string", &Stringface::test_as<std::string>)
                 << call("std::string_view", &Stringface::test_as<std::string_view>)
                 << call("std::vector<char>", &Stringface::test_as<std::vector<char>>)
                ;
              return move(as);
            }()
         << call("data", &Stringface::test_data)
         << call("size", &Stringface::test_size)
         << call("empty", &Stringface::test_empty)
    ;
  return finalize(series);
}
#endiv

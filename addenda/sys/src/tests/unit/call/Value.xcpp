// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::call {
  template<typename VALUE> class Value;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import tests.unit.call.Generator_Of_Interesting_Values
#import std.conditional
#import std.error_category
#import std.is_same
#import std.tuple_size
#import sys.call.result.Value
#import sys.call.result.Size
#import sys.call.result.Element
template<typename VALUE> class tests::unit::call::Value : public cppunit::test::Fixture {
  struct evaluate {
    template<typename SPECIMEN> class No_Values {
      struct Void {
        using type = void;
      };
    public:
      using type = Void;
    };
    template<typename SPECIMEN> struct Has_Values { using type = typename ::sys::call::result::Element<0, SPECIMEN>::type; };
    template<typename SPECIMEN> class Payload_Element {
      // The type is either void or the 0th VALUE element
      static constexpr auto const value = 0 == ::sys::call::result::Size<SPECIMEN>::value;
      using choose_which_theme = typename std::conditional<value, No_Values<SPECIMEN>, Has_Values<SPECIMEN>>::type;
    public:
      using type = typename choose_which_theme::type;
    };
  };
  using t00 = typename evaluate::template No_Values<::sys::call::result::Value<void>>;
public: 
  using Subject = VALUE;
  using Value_Payload = typename evaluate::template Payload_Element<Subject>::type;
  using Generator_Of_Interesting_Values = call::Generator_Of_Interesting_Values<Value_Payload>;
  auto test_construction_0arg() -> void;
  auto test_construction_1arg() -> void;
  auto test_construction_2arg() -> void;
  auto test_construction_3arg() -> void;
  auto test_ok() -> void;
  auto test_error_num() -> void;
  auto test_error_code() -> void;
  auto test_error_condition() -> void;
  auto test_error_message() -> void;
  auto test_sys_error_code() -> void;
  auto test_std_error_code() -> void;
  auto test_std_error_condition() -> void;
  auto test_errnum() -> void;
  auto test_value_case0() -> void;
  auto test_value_case1() -> void;
  auto test_value_case2() -> void;

  static auto suite() -> cppunit::Test *;
private:
  //
  // See the commentariat in .../src/sys/call/result/Value.xcpp
  // which reminds that std::system_category() is only to be used for errors
  // that really really emanate from the operating system.  Or such.
  //
  // Everything else is to get std::generic_category(), which iis in all other respects EXACTLY THE SAME.
  //
  // The meaning of that is ambiguous for glibc or libstdc++, but for the purposes of this test
  // the meaning is clear.  The use of std::generic_category() is indicated.
  //
  //   std::error_code      <---> std::system_category()
  //   std::error_condition <---> std::generic_category()
  //
  static auto code_category() -> std::error_category const &;
  static auto condition_category() -> std::error_category const &;
};
namespace tests::unit::call {
  template<> auto Value<::sys::call::result::Value<void>>::test_construction_3arg() -> void;
  template<> auto Value<::sys::call::result::Value<void>>::test_value_case1() -> void;
  template<> auto Value<::sys::call::result::Value<void>>::test_value_case2() -> void;
}
#endiv
#divert <tpp>
#import std.system_category
template<typename _> auto tests::unit::call::Value<_>::code_category() -> std::error_category const & {
  return std::system_category();
}
#import std.generic_category
template<typename _> auto tests::unit::call::Value<_>::condition_category() -> std::error_category const & {
  return std::generic_category();
}

#import sys.call.result.Value
template<typename _> auto tests::unit::call::Value<_>::test_construction_0arg() -> void {
  Subject r0;
  CPPUNIT_ASSERT(ok(r0));
}

template<typename _> auto tests::unit::call::Value<_>::test_construction_1arg() -> void {
  errno = 14;
  Subject r1(false);
  CPPUNIT_ASSERT(!ok(r1));
  CPPUNIT_ASSERT(14 == errnum(r1));
}

template<typename _> auto tests::unit::call::Value<_>::test_construction_2arg() -> void {
  Subject r2(true, 99);
  CPPUNIT_ASSERT(ok(r2));
  CPPUNIT_ASSERT(99 == errnum(r2));
}

template<typename _> auto tests::unit::call::Value<_>::test_construction_3arg() -> void {
  auto some_interesting_value = Generator_Of_Interesting_Values::something_interesting();
  Subject r3(false, 45, some_interesting_value);
  CPPUNIT_ASSERT(!ok(r3));
  CPPUNIT_ASSERT(45 == errnum(r3));
  CPPUNIT_ASSERT(Generator_Of_Interesting_Values::equal(some_interesting_value, value(r3)));
}

template<typename _> auto tests::unit::call::Value<_>::test_ok() -> void {
  {
    Subject r0;
    CPPUNIT_ASSERT(ok(r0));
  } {
    Subject r1(false);
    CPPUNIT_ASSERT(!ok(r1));
  } {
    Subject r2(true);
    CPPUNIT_ASSERT(ok(r2));
  }
}

template<typename _> auto tests::unit::call::Value<_>::test_error_num() -> void {
  {
    errno = 33;
    Subject r1(false);
    CPPUNIT_ASSERT(33 == error_num(r1));
  } {
    auto eno = 2;
    Subject r2(true, eno);
    CPPUNIT_ASSERT(2 == error_num(r2));
  }
}

#import std.error_code
template<typename _> auto tests::unit::call::Value<_>::test_error_code() -> void {
  {
    std::error_code ec(33, code_category());
    errno = 33;
    Subject r1(false);
    std::cerr << "ec: " << ec.category().name() << '\n';
    std::cerr << "r1: " << error_code(r1).category().name() << '\n';
    CPPUNIT_ASSERT(ec == error_code(r1));
  } {
    std::error_code ec(2, code_category());
    auto eno = 2;
    Subject r2(true, eno);
    CPPUNIT_ASSERT(ec == error_code(r2));
  }
}

#import std.error_condition
template<typename _> auto tests::unit::call::Value<_>::test_error_condition() -> void {
  {
    std::error_condition ec(33, condition_category());
    errno = 33;
    Subject r1(false);
    CPPUNIT_ASSERT(ec == error_condition(r1));
  } {
    std::error_condition ec(2, condition_category());
    auto eno = 2;
    Subject r2(true, eno);
    CPPUNIT_ASSERT(ec == error_condition(r2));
  }
}

template<typename _> auto tests::unit::call::Value<_>::test_error_message() -> void {
  {
    std::error_code ec(33, code_category());
    std::string const expected = ec.message();
    Subject r1(false, 33);
    std::string const actual = error_message(r1);
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::error_code ec(2, code_category());
    std::string const expected = ec.message();
    auto eno = 2;
    Subject r2(true, eno);
    std::string const actual = error_message(r2);
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
}

template<typename _> auto tests::unit::call::Value<_>::test_std_error_code() -> void {
  {
    std::error_code ec(33, code_category());
    errno = 33;
    Subject r1(false);
    CPPUNIT_ASSERT(ec == std_error_code(r1));
  } {
    std::error_code ec(2, code_category());
    auto eno = 2;
    Subject r2(true, eno);
    CPPUNIT_ASSERT(ec == std_error_code(r2));
  }
}

template<typename _> auto tests::unit::call::Value<_>::test_std_error_condition() -> void {
  {
    std::error_condition ec(33, condition_category());
    errno = 33;
    Subject r1(false);
    CPPUNIT_ASSERT(ec == std_error_condition(r1));
  } {
    std::error_condition ec(2, condition_category());
    auto eno = 2;
    Subject r2(true, eno);
    CPPUNIT_ASSERT(ec == std_error_condition(r2));
  }
}

template<typename _> auto tests::unit::call::Value<_>::test_sys_error_code() -> void {
  {
    errno = 33;
    Subject r1(false);
    CPPUNIT_ASSERT(::sys::error::code(33) == sys_error_code(r1));
  } {
    auto eno = 2;
    Subject r2(true, eno);
    CPPUNIT_ASSERT(sys::error::code(2) == sys_error_code(r2));
  }
}

template<typename _> auto tests::unit::call::Value<_>::test_errnum() -> void {
  // errnum(...) is declared deprecated; use error_code(...) or error_num(...) instead
  {
    errno = 33;
    Subject r1(false);
    CPPUNIT_ASSERT(33 == errnum(r1));
  } {
    auto eno = 2;
    Subject r2(true, eno);
    CPPUNIT_ASSERT(2 == errnum(r2));
  }
}

template<typename _> auto tests::unit::call::Value<_>::test_value_case0() -> void {
  auto eno = 0;
  Subject r(true, eno);
  CPPUNIT_ASSERT(0 == errnum(r));
}

template<typename _> auto tests::unit::call::Value<_>::test_value_case1() -> void {
  auto val = Generator_Of_Interesting_Values::one();
  auto eno = 0;
  Subject r(true, eno, val);
  CPPUNIT_ASSERT(0 == errnum(r));
  CPPUNIT_ASSERT(Generator_Of_Interesting_Values::equal(val, value(r)));
}

template<typename _> auto tests::unit::call::Value<_>::test_value_case2() -> void {
  auto val = Generator_Of_Interesting_Values::something_interesting();
  auto eno = 13;
  Subject r(true, eno, val);
  CPPUNIT_ASSERT(13 == errnum(r));
  CPPUNIT_ASSERT(Generator_Of_Interesting_Values::equal(val, value(r)));
}

#import std.type_info
#import std.string_literals
#import rigging.suite.io
template<typename _> auto tests::unit::call::Value<_>::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  using ::rigging::suite::call; // because namespace tests::unit::call occludes
  using namespace std::string_literals;
  Stream series("Value<"s + typeid(typename Subject::Value).name() + ">"s);
  {
    Stream construction("construction");
    construction << call("0arg", &Value::test_construction_0arg)
                 << call("1arg", &Value::test_construction_1arg)
                 << call("2arg", &Value::test_construction_2arg)
                 << call("3arg", &Value::test_construction_3arg)
      ;
    series << add(std::move(construction));
  } {
    Stream value("value");
    value << call("case1", &Value::test_value_case0)
          << call("case1", &Value::test_value_case1)
          << call("case2", &Value::test_value_case2)
      ;
    series << add(std::move(value));
  } {
    Stream nonspecific("nonspecific");
    // These aren't specific to any specific sys::call::result::Value<VALUE>
    // but were already developed ... so we retest them here
    nonspecific << call("ok", &Value::test_ok)
               << call("error_num", &Value::test_error_num)
               << call("error_code", &Value::test_error_code)
               << call("error_condition", &Value::test_error_condition)
               << call("error_message", &Value::test_error_message)
               << call("sys_error_code", &Value::test_sys_error_code)
               << call("std_error_code", &Value::test_std_error_code)
               << call("std_error_condition", &Value::test_std_error_condition)
               << call("errnum", &Value::test_errnum)
      ;
    series << add(std::move(nonspecific)) ;
  }
  return finalize(series);
}
#endiv
#divert <cpp>
template<> auto tests::unit::call::Value<::sys::call::result::Value<void>>::test_construction_3arg() -> void {
  // Value<void> has no applicable test
}

template<> auto tests::unit::call::Value<::sys::call::result::Value<void>>::test_value_case1() -> void {
  // Value<void> has no applicable test
}

template<> auto tests::unit::call::Value<::sys::call::result::Value<void>>::test_value_case2() -> void {
  // Value<void> has no applicable test
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::call::argument {
  class Pathstring;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.call.argument.Pathstring
class tests::unit::call::argument::Pathstring : public cppunit::test::Fixture { 
public: 
  using Subject = ::sys::call::argument::Pathstring;
  auto test_constructor_charstar() -> void;
  auto test_constructor_stringz() -> void;
  auto test_constructor_stringn() -> void;
  auto test_constructor_string() -> void;
  auto test_constructor_filesystem() -> void;
  auto test_operator_cast_charstar() -> void;
  auto test_operator_cast_stringz() -> void;
  auto test_operator_cast_string() -> void;
  template<typename STRINGY> auto test_as() -> void;
  static auto suite() -> cppunit::Test *;
};
namespace tests::unit::call::argument {
  template<> auto Pathstring::test_as<char const *>() -> void;
  template<> auto Pathstring::test_as<c::const_stringz>() -> void;
  template<> auto Pathstring::test_as<c::const_stringn>() -> void;
  template<> auto Pathstring::test_as<std::string_view>() -> void;
}
#endiv
#divert <tpp>
template<typename STRINGY> auto tests::unit::call::argument::Pathstring::test_as() -> void {
  auto const specimen = "./looky-here";
  Subject subject{specimen};
  auto const actual = ::sys::call::argument::as<STRINGY>(subject); // <-------------------- testing this
  auto const expected = [specimen]() -> STRINGY {
                          auto start = specimen;
                          auto finish = specimen + std::char_traits<char>::length(start);
                          return STRINGY{start, finish};
                        }();
  CPPUNIT_ASSERT(expected == actual); // either a pointer compare or a lexicographic compare
}
#endiv
#divert <cpp>
template<> auto tests::unit::call::argument::Pathstring::test_as<char const *>() -> void {
  auto const specimen = "./looky-here";
  Subject subject{specimen};
  auto const actual = ::sys::call::argument::as<char const *>(subject); // <-------------------- testing this
  std::string const expected = specimen;
  CPPUNIT_ASSERT(expected == actual); // ensure a lexicographic compare, not a pointer compare
}
template<> auto tests::unit::call::argument::Pathstring::test_as<c::const_stringz>() -> void {
  auto const specimen = "./looky-here";
  Subject subject{specimen};
  auto const actual = ::sys::call::argument::as<c::const_stringz>(subject); // <-------------------- testing this
  auto const expected = c::const_stringz(specimen);
  CPPUNIT_ASSERT(expected == actual); // ensure a lexicographic compare, not a pointer compare
}
template<> auto tests::unit::call::argument::Pathstring::test_as<c::const_stringn>() -> void {
  auto const specimen = "./looky-here";
  Subject subject{specimen};
  auto const actual = ::sys::call::argument::as<c::const_stringn>(subject); // <-------------------- testing this
  auto const expected = [specimen]() {
                          auto start = specimen;
                          auto length = std::char_traits<char>::length(start);
                          return c::const_stringn{start, length};
                        }();
  CPPUNIT_ASSERT(expected == actual); // ensure a lexicographic compare, not a string compare
}
template<> auto tests::unit::call::argument::Pathstring::test_as<std::string_view>() -> void {
  auto const specimen = "./looky-here";
  Subject subject{specimen};
  auto const actual = ::sys::call::argument::as<std::string_view>(subject); // <-------------------- testing this
  auto const expected = [specimen]() {
                          auto start = specimen;
                          auto length = std::char_traits<char>::length(start);
                          return std::string_view{start, length};
                        }();
  CPPUNIT_ASSERT(expected == actual); // will be a lexicographic compare, not a string cmopare
}
#import std.move
#import std.string_literals
using namespace std::string_literals;
auto tests::unit::call::argument::Pathstring::test_constructor_charstar() -> void {
  Subject subject("that");
  using ::sys::call::argument::as;
  std::string const &ss = as<std::string const &>(subject);
  char const *const cs = as<char const *>(subject);
  c::const_stringz const csz = as<c::const_stringz>(subject);
  CPPUNIT_ASSERT("that"s == ss);
  CPPUNIT_ASSERT("that"s == std::string(cs));
  CPPUNIT_ASSERT("that"s == std::string(csz.c_str()));
}
auto tests::unit::call::argument::Pathstring::test_constructor_stringz() -> void {
  Subject subject = c::const_stringz("that");
  std::string const &ss = ::sys::call::argument::as<std::string const &>(subject);
  using ::sys::call::argument::as;
  char const *const cs = as<char const *>(subject);
  c::const_stringz const csz = as<c::const_stringz>(subject);
  CPPUNIT_ASSERT("that"s == ss);
  CPPUNIT_ASSERT("that"s == std::string(cs));
  CPPUNIT_ASSERT("that"s == std::string(csz.c_str()));
}
auto tests::unit::call::argument::Pathstring::test_constructor_stringn() -> void {
  auto const prep = c::const_stringz("that");
  Subject subject = c::const_stringn(prep.data(), prep.size());
  using ::sys::call::argument::as;
  std::string const &ss = as<std::string const &>(subject);
  using ::sys::call::argument::as;
  char const *const cs = as<char const *>(subject);
  c::const_stringz const csz = as<c::const_stringz>(subject);
  CPPUNIT_ASSERT("that"s == ss);
  CPPUNIT_ASSERT("that"s == std::string(cs));
  CPPUNIT_ASSERT("that"s == std::string(csz.c_str()));
}
auto tests::unit::call::argument::Pathstring::test_constructor_string() -> void {
  Subject subject = "that"s;
  using ::sys::call::argument::as;
  std::string const &ss = as<std::string const &>(subject);
  char const *const cs = as<char const *>(subject);
  c::const_stringz const csz = as<c::const_stringz>(subject);
  CPPUNIT_ASSERT("that"s == ss);
  CPPUNIT_ASSERT("that"s == std::string(cs));
  CPPUNIT_ASSERT("that"s == std::string(csz.c_str()));
}
auto tests::unit::call::argument::Pathstring::test_constructor_filesystem() -> void {
  Subject subject = std::filesystem::path("that");
  using ::sys::call::argument::as;
  std::string const &ss = as<std::string const &>(subject);
  using ::sys::call::argument::as;
  char const *const cs = as<char const *>(subject);
  c::const_stringz const csz = as<c::const_stringz>(subject);
  CPPUNIT_ASSERT("that"s == ss);
  CPPUNIT_ASSERT("that"s == std::string(cs));
  CPPUNIT_ASSERT("that"s == std::string(csz.c_str()));
}
auto tests::unit::call::argument::Pathstring::test_operator_cast_charstar() -> void {
  // tested above
}
auto tests::unit::call::argument::Pathstring::test_operator_cast_stringz() -> void {
  // tested above
}
auto tests::unit::call::argument::Pathstring::test_operator_cast_string() -> void {
  // tested above
}
#import c.const_stringz
#import c.const_stringn
#import std.string
#import std.string_view
#import std.vector
#import rigging.suite.io
auto tests::unit::call::argument::Pathstring::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  using ::rigging::suite::call; // because namespace tests::unit::call occludes
  Stream series("Pathstring");
  {
    Stream con("constructor");
    con << call("char const *", &Pathstring::test_constructor_charstar)
        << call("c::const_stringz", &Pathstring::test_constructor_stringz)
        << call("c::const_stringn", &Pathstring::test_constructor_stringn)
        << call("std::string", &Pathstring::test_constructor_string)
        << call("std::filesystem::path", &Pathstring::test_constructor_filesystem)
      ;
    series << move(con);
  } {
    Stream cas("operator cast");
    cas << call("char const *", &Pathstring::test_operator_cast_charstar)
        << call("c::const_stringz", &Pathstring::test_operator_cast_stringz)
        << call("std::string", &Pathstring::test_operator_cast_string)
      ;
    series << move(cas);
  }
  {
    Stream as("as");
    as << call("char const *", &Pathstring::test_as<char const *>)
       << call("c::const_stringz", &Pathstring::test_as<c::const_stringz>)
       << call("c::const_stringn", &Pathstring::test_as<c::const_stringn>)
       << call("std::string", &Pathstring::test_as<std::string>)
       << call("std::string_view", &Pathstring::test_as<std::string_view>)
       << call("std::vector<char>", &Pathstring::test_as<std::vector<char>>)
      ;
    series << move(as);
  }
  return finalize(series);
}
#endiv

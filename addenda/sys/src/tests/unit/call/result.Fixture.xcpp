// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::call::result {
  class Fixture;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::call::result::Fixture : public cppunit::test::Fixture { 
public: 
  auto test_ok() -> void;
  auto test_error_num() -> void;
  auto test_error_code() -> void;
  auto test_error_condition() -> void;
  auto test_error_message() -> void;
  auto test_sys_error_code() -> void;
  auto test_std_error_code() -> void;
  auto test_std_error_condition() -> void;
  auto test_errnum() -> void;
  auto test_value() -> void;
  auto test_get0() -> void;
  auto test_get1() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.move
#import std.string_literals
#import sys.call.Result
#include <cerrno>
auto tests::unit::call::result::Fixture::test_ok() -> void {
  {
    sys::call::Result r0;
    CPPUNIT_ASSERT(ok(r0));
  } {
    sys::call::Result r1(false);
    CPPUNIT_ASSERT(!ok(r1));
  } {
    sys::call::Result r2(true);
    CPPUNIT_ASSERT(ok(r2));
  }
}
auto tests::unit::call::result::Fixture::test_error_num() -> void {
  {
    errno = 33;
    sys::call::Result r1(false);
    CPPUNIT_ASSERT(33 == error_num(r1));
  } {
    auto eno = 2;
    sys::call::Result r2(true, eno);
    CPPUNIT_ASSERT(2 == error_num(r2));
  }
}
#import std.error_code
#import std.system_category
auto tests::unit::call::result::Fixture::test_error_code() -> void {
  {
    std::error_code ec(33, std::system_category());
    errno = 33;
    sys::call::Result r1(false);
    CPPUNIT_ASSERT(ec == error_code(r1));
  } {
    std::error_code ec(2, std::system_category());
    auto eno = 2;
    sys::call::Result r2(true, eno);
    CPPUNIT_ASSERT(ec == error_code(r2));
  }
}
#import std.error_condition
#import std.system_category
auto tests::unit::call::result::Fixture::test_error_condition() -> void {
  {
    std::error_condition ec(33, std::generic_category());
    errno = 33;
    sys::call::Result r1(false);
    CPPUNIT_ASSERT(ec == error_condition(r1));
  } {
    std::error_condition ec(2, std::generic_category());
    auto eno = 2;
    sys::call::Result r2(true, eno);
    CPPUNIT_ASSERT(ec == error_condition(r2));
  }
}
auto tests::unit::call::result::Fixture::test_error_message() -> void {
  {
    std::error_code ec(33, std::system_category());
    std::string const expected = ec.message();
    sys::call::Result r1(false, 33);
    std::string const actual = error_message(r1);
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::error_code ec(2, std::system_category());
    std::string const expected = ec.message();
    auto eno = 2;
    sys::call::Result r2(true, eno);
    std::string const actual = error_message(r2);
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
}
auto tests::unit::call::result::Fixture::test_std_error_code() -> void {
  {
    std::error_code ec(33, std::system_category());
    errno = 33;
    sys::call::Result r1(false);
    CPPUNIT_ASSERT(ec == std_error_code(r1));
  } {
    std::error_code ec(2, std::system_category());
    auto eno = 2;
    sys::call::Result r2(true, eno);
    CPPUNIT_ASSERT(ec == std_error_code(r2));
  }
}
auto tests::unit::call::result::Fixture::test_std_error_condition() -> void {
  {
    std::error_condition ec(33, std::generic_category());
    errno = 33;
    sys::call::Result r1(false);
    CPPUNIT_ASSERT(ec == std_error_condition(r1));
  } {
    std::error_condition ec(2, std::generic_category());
    auto eno = 2;
    sys::call::Result r2(true, eno);
    CPPUNIT_ASSERT(ec == std_error_condition(r2));
  }
}
auto tests::unit::call::result::Fixture::test_sys_error_code() -> void {
  {
    errno = 33;
    sys::call::Result r1(false);
    CPPUNIT_ASSERT(::sys::error::code(33) == sys_error_code(r1));
  } {
    auto eno = 2;
    sys::call::Result r2(true, eno);
    CPPUNIT_ASSERT(sys::error::code(2) == sys_error_code(r2));
  }
}
auto tests::unit::call::result::Fixture::test_errnum() -> void {
  // errnum(...) is declared deprecated; use error_code(...) or error_num(...) instead
  {
    errno = 33;
    sys::call::Result r1(false);
    CPPUNIT_ASSERT(33 == errnum(r1));
  } {
    auto eno = 2;
    sys::call::Result r2(true, eno);
    CPPUNIT_ASSERT(2 == errnum(r2));
  }
}
auto tests::unit::call::result::Fixture::test_value() -> void {
  auto const val = 13;
  auto const eno = 0;
  {
    sys::call::Result const r(true, eno, val);
    CPPUNIT_ASSERT(0 == errnum(r));
    CPPUNIT_ASSERT(13 == value(r));
  } {
    sys::call::Result r(true, eno, val);
    CPPUNIT_ASSERT(0 == errnum(r));
    CPPUNIT_ASSERT(13 == value(r));
    value(r) = 1;
    CPPUNIT_ASSERT(1 == value(r));
  } {
    sys::call::Result r(true, eno, val);
    CPPUNIT_ASSERT(0 == errnum(std::move(r)));
    CPPUNIT_ASSERT(13 == value(std::move(r)));
  }
}
auto tests::unit::call::result::Fixture::test_get0() -> void {
  auto const eno = 0;
  auto const val = 13;
  {
    sys::call::Result const r(true, eno, val);
    CPPUNIT_ASSERT(0 == errnum(r));
    CPPUNIT_ASSERT(13 == sys::call::result::get<0>(r));
  } {
    sys::call::Result r(true, eno, val);
    CPPUNIT_ASSERT(0 == errnum(r));
    CPPUNIT_ASSERT(13 == sys::call::result::get<0>(r));
    sys::call::result::get<0>(r) = 1;
    CPPUNIT_ASSERT(1 == sys::call::result::get<0>(r));
  } {
    sys::call::Result r(true, eno, val);
    CPPUNIT_ASSERT(0 == errnum(r));
    CPPUNIT_ASSERT(13 == sys::call::result::get<0>(std::move(r)));
  }
}
auto tests::unit::call::result::Fixture::test_get1() -> void {
  using namespace std::string_literals;
  auto const eno = 0;
  auto const val = 13;
  auto const name = "cookbook"s;
  using Result = sys::call::result::Value<int, std::string>;
  {   
    Result const r(true, eno, val, name);
    CPPUNIT_ASSERT(0 == errnum(r));
    CPPUNIT_ASSERT(13 == sys::call::result::get<0>(r));
    CPPUNIT_ASSERT("cookbook"s == sys::call::result::get<1>(r));
  } {
    Result r(true, eno, val, name);
    CPPUNIT_ASSERT(0 == errnum(r));
    CPPUNIT_ASSERT(13 == sys::call::result::get<0>(r));
    CPPUNIT_ASSERT("cookbook"s == sys::call::result::get<1>(r));
    sys::call::result::get<0>(r) = 1;
    sys::call::result::get<1>(r) = "lookbook";
    CPPUNIT_ASSERT(1 == sys::call::result::get<0>(r));
    CPPUNIT_ASSERT("lookbook"s == sys::call::result::get<1>(r));
  } {
    Result r(true, eno, val, name);
    CPPUNIT_ASSERT(0 == errnum(r));
    CPPUNIT_ASSERT(13 == sys::call::result::get<0>(std::move(r)));
    CPPUNIT_ASSERT("cookbook"s == sys::call::result::get<1>(std::move(r)));
  }
}
#import tests.unit.call.result.Pipe
#import tests.unit.call.result.Result
#import tests.unit.call.result.Value
#import rigging.suite.io
auto tests::unit::call::result::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  using ::rigging::suite::call; // because namespace tests::unit::call:: occludes
  Stream series("result");
  series << call("ok", &Fixture::test_ok)
         << call("error_num", &Fixture::test_error_num)
         << call("error_code", &Fixture::test_error_code)
         << call("error_condition", &Fixture::test_error_condition)
         << call("error_message", &Fixture::test_error_message)
         << call("sys_error_code", &Fixture::test_sys_error_code)
         << call("std_error_code", &Fixture::test_std_error_code)
         << call("std_error_condition", &Fixture::test_std_error_condition)
         << call("errnum", &Fixture::test_errnum)
         << call("value", &Fixture::test_value)
         << call("get0", &Fixture::test_get0)
         << call("get1", &Fixture::test_get1)
         << add<Result>()
         << add<Value>()
         << add<Pipe>()
    ;
  return finalize(series);
}
#endiv

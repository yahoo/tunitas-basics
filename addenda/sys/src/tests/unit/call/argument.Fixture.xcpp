// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::call::argument { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.call.argument.Pathname
#import sys.call.argument.Pathstring
class tests::unit::call::argument::Fixture : public cppunit::test::Fixture { 
public: 
  auto test_usage_Converter_int_long() -> void;
  auto test_usage_Converter_duration_timespec() -> void;
  auto test_usage_Pathname() -> void;
  auto test_usage_Pathstring() -> void;
  auto test_usage_Permissions() -> void;
  static auto suite() -> cppunit::Test *;
private:
  // models sys::posix::mkdir(...), which accepts a Pathname
  auto syscall(::sys::call::argument::Pathname) -> void;
  // models sys::posix::mkdirp(...), which accepts a Pathstring
  auto libcall(::sys::call::argument::Pathstring) -> void;
};
#endiv
#divert <cpp>
#import std.move
#import std.string_literals
using namespace std::string_literals;
#import sys.call.argument.Pathname
auto tests::unit::call::argument::Fixture::syscall(::sys::call::argument::Pathname pa) -> void {
  // That this call was unambiguous to the compiler is the test.
  char const *ptr = pa;
  CPPUNIT_ASSERT(nullptr != ptr);
  c::const_stringz csz = ::sys::call::argument::as<c::const_stringz>(pa);
  CPPUNIT_ASSERT(!csz.empty());
}
auto tests::unit::call::argument::Fixture::libcall(::sys::call::argument::Pathstring pa) -> void {
  // That this call was unambiguous to the compiler is the test.
  std::string const &ss = ::sys::call::argument::as<std::string const &>(pa);
  CPPUNIT_ASSERT(!ss.empty());
  char const *ptr = pa;
  CPPUNIT_ASSERT(nullptr != ptr);
  using ::sys::call::argument::as;
  c::const_stringz csz = as<c::const_stringz>(pa);
  CPPUNIT_ASSERT(!csz.empty());
}
#import sys.call.argument.Converter
auto tests::unit::call::argument::Fixture::test_usage_Converter_int_long() -> void {
  using From = int;
  using To = long;
  using Subject = ::sys::call::argument::Converter<To, From>;
  auto shorter = 99;
  auto longer = (To) Subject{shorter};
  CPPUNIT_ASSERT(99l == longer);
}
#import std.chrono.nanoseconds
#import timespec
auto tests::unit::call::argument::Fixture::test_usage_Converter_duration_timespec() -> void {
  using From = std::chrono::nanoseconds;
  using To = ::timespec;
  using Subject = ::sys::call::argument::Converter<To, From>;
  auto const raw = 123456789l;
  auto crisp = std::chrono::nanoseconds{raw};
  auto fuzzy = (To) Subject{crisp};
  auto const BILLION = 1'000'000'000;
  CPPUNIT_ASSERT(raw / BILLION == fuzzy.tv_sec);
  CPPUNIT_ASSERT(raw % BILLION == fuzzy.tv_nsec);
}
#import c.const_stringn
#import c.const_stringz
#import std.string
#import std.filesystem.path
auto tests::unit::call::argument::Fixture::test_usage_Pathname() -> void {
  syscall("/tmp/filename");
  auto const ccsz = c::const_stringz("/tmp/filename");
  syscall(ccsz);
  auto const ccsn = c::const_stringn(ccsz.data(), ccsz.size());
  syscall(ccsn);
  syscall("/tmp/filename"s);
  syscall(std::filesystem::path("/tmp/filename"));
}
auto tests::unit::call::argument::Fixture::test_usage_Pathstring() -> void {
  libcall("/tmp/filename");
  auto const ccsz = c::const_stringz("/tmp/filename");
  libcall(ccsz);
  auto const ccsn = c::const_stringn(ccsz.data(), ccsz.size());
  libcall(ccsn);
  libcall("/tmp/filename"s);
  libcall(std::filesystem::path("/tmp/filename"));
}
#import sys.call.argument.Permissions
auto tests::unit::call::argument::Fixture::test_usage_Permissions() -> void {
  using Subject = ::sys::call::argument::Permissions;
  auto subject0 = Subject{};
  auto subject400 = Subject{0400};
  CPPUNIT_ASSERT((mode_t) subject0 != (mode_t) subject400);
  CPPUNIT_ASSERT(0400 == (mode_t) subject400);
}
#import tests.unit.call.argument.Pathname
#import tests.unit.call.argument.Pathstring
#import tests.unit.call.argument.Stringface
#import tests.unit.call.argument.Stringsite
#import tests.unit.call.argument.Permissions
#import rigging.suite.io
auto tests::unit::call::argument::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  using ::rigging::suite::call; // because tests::unit::call occludes
  Stream series("argument");
  series << []() {
              Stream use("usage");
              use << call("Converter<int,long>", &Fixture::test_usage_Converter_int_long)
                  << call("Converter<duration,timespec>", &Fixture::test_usage_Converter_duration_timespec)
                  << call("Pathname", &Fixture::test_usage_Pathname)
                  << call("Pathstring", &Fixture::test_usage_Pathstring)
                  << call("Permissions", &Fixture::test_usage_Permissions)
                ;
              return use;
            }()
         << add<Pathname>()
         << add<Pathstring>()
         << add<Stringface>()
         << add<Stringsite>()
         << add<Permissions>()
    ;
  return finalize(series);
}
#endiv

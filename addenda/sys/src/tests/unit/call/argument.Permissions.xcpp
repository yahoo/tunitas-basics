// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::call::argument { class Permissions; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.call.argument.Permissions
#import sys.posix.S
struct tests::unit::call::argument::Permissions : public cppunit::test::Fixture {
  using S = ::sys::posix::S;
  using Subject = ::sys::call::argument::Permissions;
  auto test_constructor_default() -> void;
  auto test_constructor_mode() -> void;
  auto test_constructor_Flags() -> void;
  auto test_constructor_implicitness() -> void;
  auto test_operator_cast() -> void;
  static auto suite() -> cppunit::Test *;
protected:
  static auto syscall(mode_t expected, Subject actual) -> void;
};
#endiv
#divert <cpp>
#import sys.s.Flags
namespace tests::unit::call::argument {
  auto Permissions::syscall(mode_t expected, Subject actual) -> void {
    CPPUNIT_ASSERT_EQUAL(expected, (mode_t) actual);
  }
  auto Permissions::test_constructor_default() -> void {
    Subject m;
    CPPUNIT_ASSERT(0 == (mode_t)m);
  }
  auto Permissions::test_constructor_mode() -> void {
    mode_t const val = 0777;
    Subject m(val);
    CPPUNIT_ASSERT(val == (mode_t)m);
  }
  auto Permissions::test_constructor_Flags() -> void {
    S::Flags const val = user(S::RW) | group(S::R) | other(S::X);
    Subject m(val);
    CPPUNIT_ASSERT(0641 == (mode_t)m);
  }
  auto Permissions::test_constructor_implicitness() -> void {
    syscall(0111, 0111);
    syscall(0111, user(S::X) | group(S::X) | other(S::X));
    syscall(0750, 0750);
    syscall(0751, user(S::R | S::W | S::X) | group(S::R | S::X) | other(S::X));
    syscall(0750, S::Mode{0750});
  }
  auto Permissions::test_operator_cast() -> void {
    for (int i=0, e(07777+1); e != i; ++i) {
      Subject m(i);
      mode_t const val = (mode_t) m;
      CPPUNIT_ASSERT(val == (mode_t)m);
    }
  }
}
#import rigging.suite.io
auto tests::unit::call::argument::Permissions::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  using ::rigging::suite::call; // because namespace tests::unit::call occludes
  Stream series("Permissions");
  series << []() {
              Stream con("constructor");
              con << call("default", &Permissions::test_constructor_default)
                  << call("mode_t", &Permissions::test_constructor_mode)
                  << call("Flags", &Permissions::test_constructor_Flags)
                  << call("implicitness", &Permissions::test_constructor_implicitness)
                ;
              return con;
            }()
         << call("operator mode_t", &Permissions::test_operator_cast)
    ;
  return finalize(series);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::call {
  class Fixture;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::call::Fixture : public cppunit::test::Fixture {
public: 
  auto test_usage_Value_void() -> void;
  auto test_usage_Value_bool() -> void;
  auto test_usage_Value_int() -> void;
  auto test_usage_Value_container() -> void;
  auto test_usage_Result() -> void;
  //
  auto test_usage_ok() -> void;
  auto test_usage_error_num() -> void;
  auto test_usage_error_code() -> void;
  auto test_usage_error_condition() -> void;
  auto test_usage_error_message() -> void;
  auto test_usage_sys_error_code() -> void;
  auto test_usage_std_error_code() -> void;
  auto test_usage_std_error_condition() -> void;
  auto test_usage_errnum() -> void;
  auto test_usage_value() -> void;
  auto test_usage_get0() -> void;
  auto test_usage_get1() -> void;
  //
  auto test_error_code_vs_condition_01() -> void;
  auto test_error_code_vs_condition_02() -> void;
  auto test_error_code_vs_condition_03() -> void;
  auto test_error_code_vs_condition_04() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.move
#import std.string_literals
#include <cerrno>
#import sys.call.Result
#import sys.call.result.Value
auto tests::unit::call::Fixture::test_usage_ok() -> void {
  {
    sys::call::Result r0;
    CPPUNIT_ASSERT(ok(r0));
  } {
    sys::call::Result r1(false);
    CPPUNIT_ASSERT(!ok(r1));
  } {
    sys::call::Result r2(true);
    CPPUNIT_ASSERT(ok(r2));
  }
}
auto tests::unit::call::Fixture::test_usage_error_num() -> void {
  {
    errno = 33;
    sys::call::Result r1(false);
    CPPUNIT_ASSERT(33 == error_num(r1));
  } {
    auto eno = 2;
    sys::call::Result r2(true, eno);
    CPPUNIT_ASSERT(2 == error_num(r2));
  }
}
#import std.error_code
#import std.system_category
auto tests::unit::call::Fixture::test_usage_error_code() -> void {
  {
    std::error_code ec(33, std::system_category());
    errno = 33;
    sys::call::Result r1(false);
    CPPUNIT_ASSERT(ec == error_code(r1));
  } {
    std::error_code ec(2, std::system_category());
    auto eno = 2;
    sys::call::Result r2(true, eno);
    CPPUNIT_ASSERT(ec == error_code(r2));
  }
}
#import std.error_condition
#import std.system_category
auto tests::unit::call::Fixture::test_usage_error_condition() -> void {
  {
    std::error_condition ec(33, std::generic_category());
    errno = 33;
    sys::call::Result r1(false);
    CPPUNIT_ASSERT(ec == error_condition(r1));
  } {
    std::error_condition ec(2, std::generic_category());
    auto eno = 2;
    sys::call::Result r2(true, eno);
    CPPUNIT_ASSERT(ec == error_condition(r2));
  }
}
auto tests::unit::call::Fixture::test_usage_error_message() -> void {
  {
    std::error_code ec(33, std::system_category());
    std::string const expected = ec.message();
    sys::call::Result r1(false, 33);
    std::string const actual = error_message(r1);
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::error_code ec(2, std::system_category());
    std::string const expected = ec.message();
    auto eno = 2;
    sys::call::Result r2(true, eno);
    std::string const actual = error_message(r2);
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
}
auto tests::unit::call::Fixture::test_usage_std_error_code() -> void {
  {
    std::error_code ec(33, std::system_category());
    errno = 33;
    sys::call::Result r1(false);
    CPPUNIT_ASSERT(ec == std_error_code(r1));
  } {
    std::error_code ec(2, std::system_category());
    auto eno = 2;
    sys::call::Result r2(true, eno);
    CPPUNIT_ASSERT(ec == std_error_code(r2));
  }
}
auto tests::unit::call::Fixture::test_usage_std_error_condition() -> void {
  {
    std::error_condition ec(33, std::generic_category());
    errno = 33;
    sys::call::Result r1(false);
    CPPUNIT_ASSERT(ec == std_error_condition(r1));
  } {
    std::error_condition ec(2, std::generic_category());
    auto eno = 2;
    sys::call::Result r2(true, eno);
    CPPUNIT_ASSERT(ec == std_error_condition(r2));
  }
}
auto tests::unit::call::Fixture::test_usage_sys_error_code() -> void {
  {
    errno = 33;
    sys::call::Result r1(false);
    CPPUNIT_ASSERT(::sys::error::code(33) == sys_error_code(r1));
  } {
    auto eno = 2;
    sys::call::Result r2(true, eno);
    CPPUNIT_ASSERT(sys::error::code(2) == sys_error_code(r2));
  }
}
auto tests::unit::call::Fixture::test_usage_errnum() -> void {
  // errnum(...) is declared deprecated; use error_code(...) or error_num(...) instead
  {
    errno = 33;
    sys::call::Result r1(false);
    CPPUNIT_ASSERT(33 == errnum(r1));
  } {
    auto eno = 2;
    sys::call::Result r2(true, eno);
    CPPUNIT_ASSERT(2 == errnum(r2));
  }
}
auto tests::unit::call::Fixture::test_usage_value() -> void {
  auto const val = 13;
  auto const eno = 0;
  {
    sys::call::Result const r(true, eno, val);
    CPPUNIT_ASSERT(0 == errnum(r));
    CPPUNIT_ASSERT(13 == value(r));
  } {
    sys::call::Result r(true, eno, val);
    CPPUNIT_ASSERT(0 == errnum(r));
    CPPUNIT_ASSERT(13 == value(r));
    value(r) = 1;
    CPPUNIT_ASSERT(1 == value(r));
  } {
    sys::call::Result r(true, eno, val);
    CPPUNIT_ASSERT(0 == errnum(std::move(r)));
    CPPUNIT_ASSERT(13 == value(std::move(r)));
  }
}

auto tests::unit::call::Fixture::test_usage_Result() -> void {
  sys::call::Result r;
  CPPUNIT_ASSERT(ok(r));
}

auto tests::unit::call::Fixture::test_usage_Value_void() -> void {
  {
    sys::call::result::Value<void> r(true, 33);
    CPPUNIT_ASSERT(ok(r));
    CPPUNIT_ASSERT(33 == errnum(r));
  } {
    sys::call::result::Value<void> r(true, 99);
    CPPUNIT_ASSERT(ok(r));
    CPPUNIT_ASSERT(99 == errnum(r));
  }
}

auto tests::unit::call::Fixture::test_usage_Value_bool() -> void {
  bool val = true;
  sys::call::result::Value<bool> r(true, 0, val);
  CPPUNIT_ASSERT(ok(r));
  CPPUNIT_ASSERT(true == value(r));
}

auto tests::unit::call::Fixture::test_usage_Value_int() -> void {
  int val = 99;
  sys::call::result::Value<int> r(true, 0, val);
  CPPUNIT_ASSERT(ok(r));
  CPPUNIT_ASSERT(99 == value(r));
}

#import std.set
auto tests::unit::call::Fixture::test_usage_Value_container() -> void {
  std::set<int> val{1, 3, 5, 7, 9};
  sys::call::result::Value<std::set<int>> r(true, 0, val);
  CPPUNIT_ASSERT(ok(r));
  CPPUNIT_ASSERT(5 == value(r).size());
}

auto tests::unit::call::Fixture::test_usage_get0() -> void {
  auto const eno = 0;
  auto const val = 13;
  {
    sys::call::Result const r(true, eno, val);
    CPPUNIT_ASSERT(0 == errnum(r));
    CPPUNIT_ASSERT(13 == sys::call::result::get<0>(r));
  } {
    sys::call::Result r(true, eno, val);
    CPPUNIT_ASSERT(0 == errnum(r));
    CPPUNIT_ASSERT(13 == sys::call::result::get<0>(r));
    sys::call::result::get<0>(r) = 1;
    CPPUNIT_ASSERT(1 == sys::call::result::get<0>(r));
  } {
    sys::call::Result r(true, eno, val);
    CPPUNIT_ASSERT(0 == errnum(r));
    CPPUNIT_ASSERT(13 == sys::call::result::get<0>(std::move(r)));
  }
}

auto tests::unit::call::Fixture::test_usage_get1() -> void {
  using namespace std::string_literals;
  auto const eno = 0;
  auto const val = 13;
  auto const name = "cookbook"s;
  using Result = sys::call::result::Value<int, std::string>;
  {   
    Result const r(true, eno, val, name);
    CPPUNIT_ASSERT(0 == errnum(r));
    CPPUNIT_ASSERT(13 == sys::call::result::get<0>(r));
    CPPUNIT_ASSERT("cookbook"s == sys::call::result::get<1>(r));
  } {
    Result r(true, eno, val, name);
    CPPUNIT_ASSERT(0 == errnum(r));
    CPPUNIT_ASSERT(13 == sys::call::result::get<0>(r));
    CPPUNIT_ASSERT("cookbook"s == sys::call::result::get<1>(r));
    sys::call::result::get<0>(r) = 1;
    sys::call::result::get<1>(r) = "lookbook";
    CPPUNIT_ASSERT(1 == sys::call::result::get<0>(r));
    CPPUNIT_ASSERT("lookbook"s == sys::call::result::get<1>(r));
  } {
    Result r(true, eno, val, name);
    CPPUNIT_ASSERT(0 == errnum(r));
    CPPUNIT_ASSERT(13 == sys::call::result::get<0>(std::move(r)));
    CPPUNIT_ASSERT("cookbook"s == sys::call::result::get<1>(std::move(r)));
  }
}
#include <cerrno>
#import std.generic_category
#import std.system_category
#import std.errc
auto tests::unit::call::Fixture::test_error_code_vs_condition_01() -> void {
  int r = -1;
  bool b = 0 == r;;
  int errnum = EEXIST;
  auto made = ::sys::call::Result(b, errnum, r);
  auto const why_code = error_code(made);
  CPPUNIT_ASSERT(&why_code.category() == &std::system_category());
#if __GNUC__ <= 7
  CPPUNIT_ASSERT(&std::system_category() == &why_code.category().default_error_condition(why_code.value()).category());
  CPPUNIT_ASSERT(&std::generic_category() != &why_code.category().default_error_condition(why_code.value()).category());
  CPPUNIT_ASSERT(std::errc::file_exists != why_code.category().default_error_condition(why_code.value()));
  CPPUNIT_ASSERT(std::errc::file_exists != why_code); // surprise!
#else
  CPPUNIT_ASSERT(&std::generic_category() == &why_code.category().default_error_condition(why_code.value()).category());
  CPPUNIT_ASSERT(std::errc::file_exists == why_code.category().default_error_condition(why_code.value()));
  CPPUNIT_ASSERT(std::errc::file_exists == why_code); // yay!!
#endif
}
auto tests::unit::call::Fixture::test_error_code_vs_condition_02() -> void {
  int r = -1;
  bool b = 0 == r;;
  int errnum = EEXIST;
  auto made = ::sys::call::Result(b, errnum, r);
  auto const why_cond = error_condition(made);
  CPPUNIT_ASSERT(std::errc::file_exists == why_cond); // expected
}
auto tests::unit::call::Fixture::test_error_code_vs_condition_03() -> void {
  int r = -1;
  bool b = 0 == r;;
  int errnum = EEXIST;
  auto made = ::sys::call::Result(b, errnum, r);
  //
  // Validate that even with different categories, the two are still "the same"
  //
  //   auto operator==(error_code const &, conerror_condition const &) noexcept -> bool;
  //   auto operator==(error_condition const &, error_code const &) noexcept -> bool;
  // 
  // Are true if either code.category().equivalent(code.value(), cond)
  //                 or cond.category().equivalent(code, cond.value()).
  //
  // Because the default implementation of error_category::equivalent
  //
  //   bool error_category::equivalent( int code, std::error_condition const &) const noexcept
  //
  // is equivalent to default_error_condition(code) == condition.
  //
  // So: std::errc::file_exists is converted to std::error_condition in generic_category
  // that error_condition is compared against std::error_code in system_category
  // by default_error_condition(code.value()) which returns a std::error_condition in generic_category
  // 
  auto const why_code = error_code(made);
  CPPUNIT_ASSERT(&std::system_category() == &why_code.category());
#if __GNUC__ <= 7
  CPPUNIT_ASSERT(&std::generic_category() != &why_code.category().default_error_condition(why_code.value()).category());
  CPPUNIT_ASSERT(&std::system_category() == &why_code.category().default_error_condition(why_code.value()).category()); // unexpected
  CPPUNIT_ASSERT(std::errc::file_exists != why_code); // surprise!
#else
  CPPUNIT_ASSERT(&std::generic_category() == &why_code.category().default_error_condition(why_code.value()).category());
  CPPUNIT_ASSERT(std::errc::file_exists == why_code); // yay! because (see above)
#endif
}
auto tests::unit::call::Fixture::test_error_code_vs_condition_04() -> void {
  int r = -1;
  bool b = 0 == r;;
  int errnum = EEXIST;
  auto made = ::sys::call::Result(b, errnum, r);
  auto const why_cond = error_condition(made);
  CPPUNIT_ASSERT(&std::generic_category() == &why_cond.category());
  CPPUNIT_ASSERT(std::errc::file_exists == why_cond); // expected
}
#import rigging.suite.io
#import std.set
#import std.string
#import std.vector
#import tests.unit.call.Element
#import tests.unit.call.Size
#import tests.unit.call.Value
#import tests.unit.call.argument.Fixture
#import tests.unit.call.result.Fixture
auto tests::unit::call::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  using ::rigging::suite::call; // because namespace tests::unit::call occludes
  Stream series("call");
  {
    Stream use("usage");
    {
      Stream con("construction");
      {
        Stream val("Value");
        val << call("Value<bool>", &Fixture::test_usage_Value_bool)
            << call("Value<int>", &Fixture::test_usage_Value_int)
            << call("Value<container>", &Fixture::test_usage_Value_container)
          ;
        con << add(std::move(val));
      }
      con << call("Result", &Fixture::test_usage_Result);
      use << add(std::move(con));
    }
    use << call("ok", &Fixture::test_usage_ok)
        << call("error_num", &Fixture::test_usage_error_num)
        << call("error_code", &Fixture::test_usage_error_code)
        << call("error_condition", &Fixture::test_usage_error_condition)
        << call("error_message", &Fixture::test_usage_error_message)
        << call("sys_error_code", &Fixture::test_usage_sys_error_code)
        << call("std_error_code", &Fixture::test_usage_std_error_code)
        << call("std_error_condition", &Fixture::test_usage_std_error_condition)
        << call("errnum", &Fixture::test_usage_errnum)
        << call("value", &Fixture::test_usage_value)
      ;
    {
      Stream vs("error_code-vs-error_condition");
      vs << call("01", &Fixture::test_error_code_vs_condition_01)
         << call("02", &Fixture::test_error_code_vs_condition_02)
         << call("03", &Fixture::test_error_code_vs_condition_03)
         << call("04", &Fixture::test_error_code_vs_condition_04)
        ;
      use << add(std::move(vs));   
    } {
      Stream get("get");
      get << call("0", &Fixture::test_usage_get0)
          << call("1", &Fixture::test_usage_get1)
        ;
      use << add(std::move(get));   
    }
    series << add(std::move(use));
  }
  namespace rigging = tests::unit::call;
  namespace subject = ::sys::call::result;
  {
    Stream val("Value");
    val << add<rigging::Value<subject::Value<void>>>()
        << add<rigging::Value<subject::Value<bool>>>()
        << add<rigging::Value<subject::Value<int>>>()
        << add<rigging::Value<subject::Value<std::string>>>()
        << add<rigging::Value<subject::Value<std::vector<int>>>>()
        << add<rigging::Value<subject::Value<std::vector<std::string>>>>()
      ;
    series << add(std::move(val));   
  } {
    Stream siz("Size");
    siz << add<rigging::Size<0, subject::Value<void>>>()
        << add<rigging::Size<1, subject::Value<bool>>>()
        << add<rigging::Size<1, subject::Value<int>>>()
        << add<rigging::Size<2, subject::Value<int, int>>>()
        << add<rigging::Size<1, subject::Value<std::string>>>()
        << add<rigging::Size<2, subject::Value<std::string, std::string>>>()
        << add<rigging::Size<1, subject::Value<std::vector<int>>>>()
        << add<rigging::Size<2, subject::Value<int, std::vector<int>>>>()
        << add<rigging::Size<3, subject::Value<bool, int, std::vector<int>>>>()
        << add<rigging::Size<1, subject::Value<std::vector<std::string>>>>()
        << add<rigging::Size<2, subject::Value<std::string, std::vector<std::string>>>>()
        << add<rigging::Size<3, subject::Value<int, std::string, std::vector<std::string>>>>()
      ;
    series << add(std::move(siz));
  } {
    Stream ele("ele");
    // invalid add(rigging::Element<0, subject::Value<void>>::suite())
    ele << add<rigging::Element<0, bool, subject::Value<bool>>>()
        << add<rigging::Element<0, int, subject::Value<int>>>()
        << add<rigging::Element<1, int, subject::Value<int, int>>>()
        << add<rigging::Element<0, std::string, subject::Value<std::string>>>()
        << add<rigging::Element<1, std::string, subject::Value<std::string, std::string>>>()
        << add<rigging::Element<0, std::vector<int>, subject::Value<std::vector<int>>>>()
        << add<rigging::Element<1, std::vector<int>, subject::Value<int, std::vector<int>>>>()
        << add<rigging::Element<2, std::vector<int>, subject::Value<bool, int, std::vector<int>>>>()
        << add<rigging::Element<0, std::vector<std::string>, subject::Value<std::vector<std::string>>>>()
        << add<rigging::Element<1, std::vector<std::string>, subject::Value<std::string, std::vector<std::string>>>>()
        << add<rigging::Element<2, std::vector<std::string>, subject::Value<int, std::string, std::vector<std::string>>>>()
      ;
    series << add(std::move(ele));
  }
  series << add<result::Fixture>()
         << add<argument::Fixture>()
    ;
  return finalize(series);
}
#endiv

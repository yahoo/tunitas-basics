// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.set
#import std.string
#import std.vector
namespace tests::unit::call {
  // A generator of interesting values
  template<typename VALUE> struct Generator_Of_Interesting_Values;
  template<> struct Generator_Of_Interesting_Values<void>;
  template<> struct Generator_Of_Interesting_Values<bool>;
  template<> struct Generator_Of_Interesting_Values<int>;
  template<> struct Generator_Of_Interesting_Values<std::string>;
  template<> struct Generator_Of_Interesting_Values<std::vector<int>>;
  template<> struct Generator_Of_Interesting_Values<std::set<std::string>>;
  template<> struct Generator_Of_Interesting_Values<std::vector<std::string>>;
}
#endiv
#divert <hpp>
template<typename VALUE> struct tests::unit::call::Generator_Of_Interesting_Values {
  using Value = VALUE;
  // that's all we cay say!
  static inline constexpr auto zero() -> Value { return Value(); }
  static inline constexpr auto equal(Value const &a, Value const &b) -> bool { return a == b; }
  static inline constexpr auto not_equal(Value const &a, Value const &b) -> bool { return !equal(a, b); }
};

template<> struct tests::unit::call::Generator_Of_Interesting_Values<void> {
  using Value = void;
  // that's all we cay say!
};

template<> struct tests::unit::call::Generator_Of_Interesting_Values<bool> {
  using Value = bool;
  static inline constexpr auto zero() -> Value { return false; }
  static inline constexpr auto one() -> Value { return true; }
  static inline constexpr auto something_interesting() -> Value { return true; }
  static inline constexpr auto equal(Value const &a, Value const &b) -> bool { return a == b; }
  static inline constexpr auto not_equal(Value const &a, Value const &b) -> bool { return a != b; }
};

template<> struct tests::unit::call::Generator_Of_Interesting_Values<int> {
  using Value = int;
  static inline constexpr auto zero() -> Value { return 0; }
  static inline constexpr auto one() -> Value { return 1; }
  static inline constexpr auto something_interesting() -> Value { return true; }
  static inline constexpr auto equal(Value const &a, Value const &b) -> bool { return a == b; }
  static inline constexpr auto not_equal(Value const &a, Value const &b) -> bool { return a != b; }
};

template<> struct tests::unit::call::Generator_Of_Interesting_Values<std::string> {
  using Value = std::string;
  static inline auto zero() -> Value { return Value("0"); }
  static inline auto one() -> Value { return Value("1"); }
  static inline auto something_interesting() -> Value { return Value{"16336"}; }
  static inline auto equal(Value const &a, Value const &b) -> bool { return a == b; }
  static inline auto not_equal(Value const &a, Value const &b) -> bool { return a != b; }
};

#import std.equal
#import std.mismatch
template<> struct tests::unit::call::Generator_Of_Interesting_Values<std::set<std::string>> {
  using Value = std::set<std::string>;
  static inline auto zero() -> Value { return Value{"0"}; }
  static inline auto one() -> Value { return Value{"1"}; }
  static inline auto something_interesting() -> Value { return Value{"105219120"}; }
  static inline auto equal(Value const &a, Value const &b) -> bool { return std::equal(a.begin(), a.end(), b.begin(), b.end()); }
  static inline auto not_equal(Value const &a, Value const &b) -> bool {
    auto pair = std::mismatch(a.begin(), a.end(), b.begin());
    return a.end() != pair.first || b.end() != pair.second;
  }
};

template<> struct tests::unit::call::Generator_Of_Interesting_Values<std::vector<int>> {
  using Value = std::vector<int>;
  static inline auto zero() -> Value { return Value{0}; }
  static inline auto one() -> Value { return Value{1}; }
  static inline auto something_interesting() -> Value { return Value{10796760}; }
  static inline auto equal(Value const &a, Value const &b) -> bool { return std::equal(a.begin(), a.end(), b.begin(), b.end()); }
  static inline auto not_equal(Value const &a, Value const &b) -> bool {
    auto pair = std::mismatch(a.begin(), a.end(), b.begin());
    return a.end() != pair.first || b.end() != pair.second;
  }
};

template<> struct tests::unit::call::Generator_Of_Interesting_Values<std::vector<std::string>> {
  using Value = std::vector<std::string>;
  static inline auto zero() -> Value { return Value{"0"}; }
  static inline auto one() -> Value { return Value{"1"}; }
  static inline auto something_interesting() -> Value { return Value{"10796760"}; }
  static inline auto equal(Value const &a, Value const &b) -> bool { return std::equal(a.begin(), a.end(), b.begin(), b.end()); }
  static inline auto not_equal(Value const &a, Value const &b) -> bool {
    auto pair = std::mismatch(a.begin(), a.end(), b.begin());
    return a.end() != pair.first || b.end() != pair.second;
  }
};
#endiv

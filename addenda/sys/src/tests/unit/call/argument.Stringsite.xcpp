// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::call::argument { class Stringsite; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.call.argument.Stringsite
class tests::unit::call::argument::Stringsite : public cppunit::test::Fixture { 
public: 
  using Subject = ::sys::call::argument::Stringsite;
  auto test_constructor_charstar_consty() -> void;
  auto test_constructor_charstar_muting() -> void;
  auto test_constructor_stringz_consty() -> void;
  auto test_constructor_stringz_muting() -> void;
  auto test_constructor_stringn_consty() -> void;
  auto test_constructor_stringn_muting() -> void;
  auto test_constructor_string() -> void;
  auto test_constructor_filesystem() -> void;
  auto test_constructor_copy() -> void;
  auto test_constructor_move() -> void;
  auto test_operator_cast_charstar() -> void;
  auto test_operator_cast_stringz() -> void;
  auto test_operator_cast_string() -> void;
  template<typename STRINGY> auto test_as() -> void;
  auto test_data() -> void;
  auto test_size() -> void;
  auto test_empty() -> void;
  static auto suite() -> cppunit::Test *;
};
namespace tests::unit::call::argument {
  template<> auto Stringsite::test_as<char const *>() -> void;
  template<> auto Stringsite::test_as<c::const_stringz>() -> void;
  template<> auto Stringsite::test_as<c::const_stringn>() -> void;
  template<> auto Stringsite::test_as<std::string_view>() -> void;
}
#endiv
#divert <tpp>
template<typename STRINGY> auto tests::unit::call::argument::Stringsite::test_as() -> void {
  auto const specimen = "./looky-here";
  auto test = [start=specimen](Subject subject) {
                auto const actual = ::sys::call::argument::as<STRINGY>(subject); // <-------------------- testing this
                auto const expected = [start]() -> STRINGY {
                                        auto finish = start + std::char_traits<char>::length(start);
                                        return STRINGY{start, finish};
                                      }();
                CPPUNIT_ASSERT(expected == actual); // either a pointer compare or a lexicographic compare
              };
  test(specimen);
}
#endiv
#divert <cpp>
#import c.stringz
#import c.const_stringz
#import c.stringn
#import c.const_stringn
template<> auto tests::unit::call::argument::Stringsite::test_as<char const *>() -> void {
  auto const specimen = "./looky-here";
  std::string const expected = specimen;
  auto test = [expected](Subject subject) {
                auto const actual = ::sys::call::argument::as<char const *>(subject); // <-------------------- testing this
                CPPUNIT_ASSERT(expected == actual); // ensure a lexicographic compare, not a pointer compare
              };
  test(specimen);
}
template<> auto tests::unit::call::argument::Stringsite::test_as<c::const_stringz>() -> void {
  auto const specimen = "./looky-here";
  auto test = [specimen](Subject subject) {
                auto const actual = ::sys::call::argument::as<c::const_stringz>(subject); // <-------------------- testing this
                auto const expected = c::const_stringz(specimen);
                CPPUNIT_ASSERT(expected == actual); // ensure a lexicographic compare, not a pointer compare
              };
  test(specimen);
}
template<> auto tests::unit::call::argument::Stringsite::test_as<c::const_stringn>() -> void {
  auto const specimen = "./looky-here";
  auto test = [start=specimen](Subject subject) {
                auto const actual = ::sys::call::argument::as<c::const_stringn>(subject); // <-------------------- testing this
                auto const expected = [start]() {
                                        auto length = std::char_traits<char>::length(start);
                                        return c::const_stringn{start, length};
                                      }();
                CPPUNIT_ASSERT(expected == actual); // ensure a lexicographic compare, not a string compare
              };
  test(specimen);
}
template<> auto tests::unit::call::argument::Stringsite::test_as<std::string_view>() -> void {
  auto const specimen = "./looky-here";
  auto test = [start=specimen](Subject subject) {
                auto const actual = ::sys::call::argument::as<std::string_view>(subject); // <-------------------- testing this
                auto const expected = [start]() {
                                        auto length = std::char_traits<char>::length(start);
                                        return std::string_view{start, length};
                                      }();
                CPPUNIT_ASSERT(expected == actual); // will be a lexicographic compare, not a string cmopare
              };
  test(specimen);
}
#import std.move
#import std.string_literals
using namespace std::string_literals;
auto tests::unit::call::argument::Stringsite::test_constructor_charstar_consty() -> void {
  char const *specimen = "that";
  auto test = [](Subject subject) {
                using ::sys::call::argument::as;
                std::string const &ss = as<std::string const &>(subject);
                char const *const cs = as<char const *>(subject);
                c::const_stringz const csz = as<c::const_stringz>(subject);
                CPPUNIT_ASSERT("that"s == ss);
                CPPUNIT_ASSERT("that"s == std::string(cs));
                CPPUNIT_ASSERT("that"s == std::string(csz.c_str()));
              };
  test(specimen);
}
auto tests::unit::call::argument::Stringsite::test_constructor_charstar_muting() -> void {
  char specimen[] = { "that" };
  auto test = [](Subject subject) {
                using ::sys::call::argument::as;
                std::string const &ss = as<std::string const &>(subject);
                char const *const cs = as<char const *>(subject);
                c::const_stringz const csz = as<c::const_stringz>(subject);
                CPPUNIT_ASSERT("that"s == ss);
                CPPUNIT_ASSERT("that"s == std::string(cs));
                CPPUNIT_ASSERT("that"s == std::string(csz.c_str()));
              };
  test(&specimen[0]);
}
auto tests::unit::call::argument::Stringsite::test_constructor_stringz_consty() -> void {
  auto const specimen = c::const_stringz("that");
  auto test = [](Subject subject) {
                std::string const &ss = ::sys::call::argument::as<std::string const &>(subject);
                using ::sys::call::argument::as;
                char const *const cs = as<char const *>(subject);
                c::const_stringz const csz = as<c::const_stringz>(subject);
                CPPUNIT_ASSERT("that"s == ss);
                CPPUNIT_ASSERT("that"s == std::string(cs));
                CPPUNIT_ASSERT("that"s == std::string(csz.c_str()));
              };
  test(specimen);
}
auto tests::unit::call::argument::Stringsite::test_constructor_stringz_muting() -> void {
  char buf[] = { "that" };
  auto const specimen = c::stringz{&buf[0]};
  auto test = [](Subject subject) {
                std::string const &ss = ::sys::call::argument::as<std::string const &>(subject);
                using ::sys::call::argument::as;
                char const *const cs = as<char const *>(subject);
                c::const_stringz const csz = as<c::const_stringz>(subject);
                CPPUNIT_ASSERT("that"s == ss);
                CPPUNIT_ASSERT("that"s == std::string(cs));
                CPPUNIT_ASSERT("that"s == std::string(csz.c_str()));
              };
  test(specimen);
}
auto tests::unit::call::argument::Stringsite::test_constructor_stringn_consty() -> void {
  auto const prep = c::const_stringz("that");
  auto const specimen = c::const_stringn(prep.data(), prep.size());
  auto test = [](Subject subject) {
                using ::sys::call::argument::as;
                std::string const &ss = as<std::string const &>(subject);
                using ::sys::call::argument::as;
                char const *const cs = as<char const *>(subject);
                c::const_stringz const csz = as<c::const_stringz>(subject);
                CPPUNIT_ASSERT("that"s == ss);
                CPPUNIT_ASSERT("that"s == std::string(cs));
                CPPUNIT_ASSERT("that"s == std::string(csz.c_str()));
              };
  test(specimen);
}
auto tests::unit::call::argument::Stringsite::test_constructor_stringn_muting() -> void {
  char buf[] = { "that" };
  auto prep = c::stringz{&buf[0]};
  auto const specimen = c::stringn(prep.data(), prep.size());
  auto test = [](Subject subject) {
                using ::sys::call::argument::as;
                std::string const &ss = as<std::string const &>(subject);
                using ::sys::call::argument::as;
                char const *const cs = as<char const *>(subject);
                c::const_stringz const csz = as<c::const_stringz>(subject);
                CPPUNIT_ASSERT("that"s == ss);
                CPPUNIT_ASSERT("that"s == std::string(cs));
                CPPUNIT_ASSERT("that"s == std::string(csz.c_str()));
              };
  test(specimen);
}
auto tests::unit::call::argument::Stringsite::test_constructor_string() -> void {
  auto const specimen = "that"s;
  auto test = [](Subject subject) {
                using ::sys::call::argument::as;
                std::string const &ss = as<std::string const &>(subject);
                char const *const cs = as<char const *>(subject);
                c::const_stringz const csz = as<c::const_stringz>(subject);
                CPPUNIT_ASSERT("that"s == ss);
                CPPUNIT_ASSERT("that"s == std::string(cs));
                CPPUNIT_ASSERT("that"s == std::string(csz.c_str()));
              };
  test(specimen);
}
auto tests::unit::call::argument::Stringsite::test_constructor_filesystem() -> void {
  auto const specimen = std::filesystem::path("that");
  auto test = [](Subject subject) {
                using ::sys::call::argument::as;
                std::string const &ss = as<std::string const &>(subject);
                using ::sys::call::argument::as;
                char const *const cs = as<char const *>(subject);
                c::const_stringz const csz = as<c::const_stringz>(subject);
                CPPUNIT_ASSERT("that"s == ss);
                CPPUNIT_ASSERT("that"s == std::string(cs));
                CPPUNIT_ASSERT("that"s == std::string(csz.c_str()));
              };
  test(specimen);
}
auto tests::unit::call::argument::Stringsite::test_constructor_copy() -> void {
  auto const specimen = std::filesystem::path{"that"}; // MUST be a separate anchored variable in this test
  auto test = [](Subject original) {
                auto const copied = Subject{original}; // <------------------------------------ copy constructor
                CPPUNIT_ASSERT_EQUAL(std::string{(char const *)original}, std::string{(char const *)copied});
              };
  test(specimen);
}
auto tests::unit::call::argument::Stringsite::test_constructor_move() -> void {
  auto const specimen = std::filesystem::path{"that"}; // MUST be a separate anchored variable in this test
  auto test = [specimen](Subject original) {
                auto const moved = Subject{move(original)}; // <------------------------------- test this, move(...) found by ADL
                CPPUNIT_ASSERT_EQUAL(std::string{specimen}, std::string{(char const *)moved});
                CPPUNIT_ASSERT(original.empty());
              };
  test(specimen);
}
auto tests::unit::call::argument::Stringsite::test_operator_cast_charstar() -> void {
  // tested above
}
auto tests::unit::call::argument::Stringsite::test_operator_cast_stringz() -> void {
  // tested above
}
auto tests::unit::call::argument::Stringsite::test_operator_cast_string() -> void {
  // tested above
}
auto tests::unit::call::argument::Stringsite::test_data() -> void {
  auto const expected = "that"s;
  auto test = [expected](Subject subject) {
                auto actual = subject.data();
                CPPUNIT_ASSERT_EQUAL(expected, std::string{actual});
              };
  test("that"s);
}
auto tests::unit::call::argument::Stringsite::test_size() -> void {
  auto const expected = 4lu;
  auto test = [expected](Subject subject) {
                auto actual = subject.size();
                CPPUNIT_ASSERT_EQUAL(expected, actual);
              };
  test("that"s);
}
auto tests::unit::call::argument::Stringsite::test_empty() -> void {
  auto test = [](Subject subject) {
                CPPUNIT_ASSERT(!subject.empty());
              };
  test("that"s);
}
#import c.const_stringz
#import c.const_stringn
#import std.string
#import std.string_view
#import std.vector
#import rigging.suite.io
auto tests::unit::call::argument::Stringsite::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  using ::rigging::suite::call; // because namespace tests::unit::call occludes
  Stream series("Stringsite");
  series << []() {
              Stream con("constructor");
              con << []() {
                       Stream nst("consty");
                       nst << call("char const *", &Stringsite::test_constructor_charstar_consty)
                           << call("c::const_stringz", &Stringsite::test_constructor_stringz_consty)
                           << call("c::const_stringn", &Stringsite::test_constructor_stringn_consty)
                         ;
                       return nst;
                     }()
                  << []() {
                       Stream non("muting");
                       non << call("char *", &Stringsite::test_constructor_charstar_muting)
                           << call("c::stringz", &Stringsite::test_constructor_stringz_muting)
                           << call("c::stringn", &Stringsite::test_constructor_stringn_muting)
                         ;
                       return non;
                     }()
                  << call("std::string", &Stringsite::test_constructor_string)
                  << call("std::filesystem::path", &Stringsite::test_constructor_filesystem)
                  << call("copy", &Stringsite::test_constructor_copy)
                  << call("move", &Stringsite::test_constructor_move)
                ;
              return con;
            }()
         << []() {
              Stream cas("operator cast");
              cas << call("char const *", &Stringsite::test_operator_cast_charstar)
                  << call("c::const_stringz", &Stringsite::test_operator_cast_stringz)
                  << call("std::string", &Stringsite::test_operator_cast_string)
                ;
              return cas;
            }()
         << []() {
              Stream as("as");
              as << call("char const *", &Stringsite::test_as<char const *>)
                 << call("c::const_stringz", &Stringsite::test_as<c::const_stringz>)
                 << call("c::const_stringn", &Stringsite::test_as<c::const_stringn>)
                 << call("std::string", &Stringsite::test_as<std::string>)
                 << call("std::string_view", &Stringsite::test_as<std::string_view>)
                 << call("std::vector<char>", &Stringsite::test_as<std::vector<char>>)
                ;
              return as;
            }()
         << call("data", &Stringsite::test_data)
         << call("size", &Stringsite::test_size)
         << call("empty", &Stringsite::test_empty)
    ;
  return finalize(series);
}
#endiv

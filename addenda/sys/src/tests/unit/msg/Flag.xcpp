// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::msg { class Flag; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.msg.Flag
#import sys.msg.Flags
struct tests::unit::msg::Flag : public cppunit::test::Fixture {
  using Subject = ::sys::msg::Flag;
  using Flags = ::sys::msg::Flags;
  auto test_Flag() -> void;
  auto test_constants_single() -> void;
  auto test_constants_set() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import sys.msg.Flag // this is the new way of saying it
auto tests::unit::msg::Flag::test_Flag() -> void {
  auto mmm1 = Subject::CMSG_CLOEXEC;
  auto mmm2 = Subject::CTRUNC;
  auto mmm3 = Subject::DONTROUTE;
  auto mmm4 = Subject::NOSIGNAL;
  auto mmm5 = Subject::DONTWAIT;
  auto mmm6 = Subject::EOR;
  auto mmm7 = Subject::ERRQUEUE;
  auto mmm8 = Subject::MORE;
  auto mmm9 = Subject::OOB;
  auto mmm10 = Subject::PEEK;
  auto mmm11 = Subject::TRUNC;
  auto mmm12 = Subject::WAITALL;
  CPPUNIT_ASSERT(mmm1 != mmm2);
  CPPUNIT_ASSERT(mmm2 != mmm3);
  CPPUNIT_ASSERT(mmm3 != mmm4);
  CPPUNIT_ASSERT(mmm4 != mmm5);
  CPPUNIT_ASSERT(mmm5 != mmm6);
  CPPUNIT_ASSERT(mmm6 != mmm7);
  CPPUNIT_ASSERT(mmm7 != mmm8);
  CPPUNIT_ASSERT(mmm8 != mmm9);
  CPPUNIT_ASSERT(mmm9 != mmm10);
  CPPUNIT_ASSERT(mmm10 != mmm11);
  CPPUNIT_ASSERT(mmm11 != mmm12);
  CPPUNIT_ASSERT(mmm12 != mmm1);
}
auto tests::unit::msg::Flag::test_constants_single() -> void {
  Subject mmm;
  mmm = Subject::CMSG_CLOEXEC;
  mmm = Subject::CTRUNC;
  mmm = Subject::DONTROUTE;
  mmm = Subject::NOSIGNAL;
  mmm = Subject::EOR;
  mmm = Subject::ERRQUEUE;
  mmm = Subject::MORE;
  mmm = Subject::OOB;
  mmm = Subject::PEEK;
  mmm = Subject::TRUNC;
  mmm = Subject::WAITALL;
  // There, uttered them all [[FIXTHIS]] how do we know this is all of them (build a self-check)
  CPPUNIT_ASSERT(Flags::NONE != mmm);
}
auto tests::unit::msg::Flag::test_constants_set() -> void {
  // There is nothing to test in this combination
  CPPUNIT_ASSERT(true);
}
#import rigging.suite.io
auto tests::unit::msg::Flag::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("Flag");
  series << call("Flag", &Flag::test_Flag)
         << []() {
              Stream sub("constants");
              sub << call("single", &Flag::test_constants_single)
                  << call("set", &Flag::test_constants_set)
                ;
              return move(sub);
            }()
    ;
  return finalize(series);
}
#endiv

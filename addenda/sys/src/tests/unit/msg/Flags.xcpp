// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::msg { class Flags; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.msg.Flag
#import sys.msg.Flags
class tests::unit::msg::Flags : public cppunit::test::Fixture {
public:
  using Flag = ::sys::msg::Flag;
  using Subject = ::sys::msg::Flags;
  using One = Flag;
  using Set = Subject;
  auto test_constructor_default() -> void;
  auto test_constructor_again() -> void;
  auto test_operator_and() -> void;
  auto test_operator_and_eq() -> void;
  auto test_operator_or() -> void;
  auto test_operator_or_eq() -> void;
  auto test_operator_invert() -> void;
  auto test_contains() -> void;
  auto test_is_flag() -> void;
  auto test_as_works() -> void;
  auto test_as_fails_0() -> void;
  auto test_as_fails_2() -> void;
  auto test_constants_single() -> void;
  auto test_constants_set() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import sys.msg.constants
#import sys.msg.as
#import std.invalid_argument
#import std.exception
namespace tests::unit::msg {
  auto Flags::test_constructor_default() -> void {
    using namespace ::sys::msg;
    auto subject0 = Subject{};
    auto subject1 = Subject{1};
    auto subject2 = Subject{NONE};
    auto subject3 = Subject{CTRUNC};
    CPPUNIT_ASSERT(subject0 != subject1);
    CPPUNIT_ASSERT(subject1 != subject2);
    CPPUNIT_ASSERT(subject2 != subject3);
    CPPUNIT_ASSERT(subject3 != subject0);
  }
  auto Flags::test_constructor_again() -> void {
    Subject mmm1 = Flag::CMSG_CLOEXEC;
    Subject mmm2 = Flag::CTRUNC;
    Subject mmm3 = Flag::DONTROUTE;
    Subject mmm4 = Flag::NOSIGNAL;
    Subject mmm5 = Flag::DONTWAIT;
    Subject mmm6 = Flag::EOR;
    Subject mmm7 = Flag::ERRQUEUE;
    Subject mmm8 = Flag::MORE;
    Subject mmm9 = Flag::OOB;
    Subject mmm10 = Flag::PEEK;
    Subject mmm11 = Flag::TRUNC;
    Subject mmm12 = Flag::WAITALL;
    CPPUNIT_ASSERT(mmm1 != mmm2);
    CPPUNIT_ASSERT(mmm2 != mmm3);
    CPPUNIT_ASSERT(mmm3 != mmm4);
    CPPUNIT_ASSERT(mmm4 != mmm5);
    CPPUNIT_ASSERT(mmm5 != mmm6);
    CPPUNIT_ASSERT(mmm6 != mmm7);
    CPPUNIT_ASSERT(mmm7 != mmm8);
    CPPUNIT_ASSERT(mmm8 != mmm9);
    CPPUNIT_ASSERT(mmm9 != mmm10);
    CPPUNIT_ASSERT(mmm10 != mmm11);
    CPPUNIT_ASSERT(mmm11 != mmm12);
    CPPUNIT_ASSERT(mmm12 != mmm1);
  }
  auto Flags::test_operator_and() -> void {
    auto const ZERO = Set{Set::NONE};
    auto const A = Set{One::NOSIGNAL};
    auto const B = Set{One::EOR};
    CPPUNIT_ASSERT(ZERO == (ZERO & A));
    CPPUNIT_ASSERT(ZERO == (B & ZERO));
    CPPUNIT_ASSERT(A == (A & A));
    CPPUNIT_ASSERT(ZERO == (A & B));
  }
  auto Flags::test_operator_and_eq() -> void {
    auto const ZERO = Set{Set::NONE};
    auto const A = Set{One::NOSIGNAL};
    auto const B = Set{One::EOR};
    { auto a = A;
      a &= ZERO;
      CPPUNIT_ASSERT(ZERO == a); }
    { auto b = B;
      b &= ZERO;
      CPPUNIT_ASSERT(ZERO == b); }
    { auto a = A;
      a &= A;
      CPPUNIT_ASSERT(A == a); }
    { auto c = A;
      c &= B;
      CPPUNIT_ASSERT(ZERO == c); }
  }
  auto Flags::test_operator_or() -> void {
    auto const ZERO = Set{Set::NONE};
    auto const A = Set{One::NOSIGNAL};
    auto const B = Set{One::EOR};
    CPPUNIT_ASSERT(A == (ZERO | A));
    CPPUNIT_ASSERT(B == (B | ZERO));
    CPPUNIT_ASSERT(A == (A | A));
    auto const C = Set{(int)A | (int) B};
    CPPUNIT_ASSERT(C == (A | B));
  }
  auto Flags::test_operator_or_eq() -> void {
    auto const ZERO = Set{Set::NONE};
    auto const A = Set{One::NOSIGNAL};
    auto const B = Set{One::EOR};
    { auto a = A;
      a |= ZERO;
      CPPUNIT_ASSERT(A == a); }
    { auto b = ZERO;
      b |= B;
      CPPUNIT_ASSERT(B == b); }
    { auto a = A;
      a |= A;
      CPPUNIT_ASSERT(A == a); }
    { auto c = A;
      c |= B;
      auto const C = Set{(int)A | (int) B};
      CPPUNIT_ASSERT(C == c); }
  }
  auto Flags::test_operator_invert() -> void {
    auto const ZERO = Set{Set::NONE};
    auto const opposite = ~ZERO;
    auto const none = opposite & Set::NONE;
    CPPUNIT_ASSERT(Set::NONE == none);
    auto const batch = opposite & One::BATCH;
    CPPUNIT_ASSERT(batch == One::BATCH);
    auto const cloexec = opposite & One::CMSG_CLOEXEC;
    CPPUNIT_ASSERT(cloexec == One::CMSG_CLOEXEC);
    auto const confirm = opposite & One::CONFIRM;
    CPPUNIT_ASSERT(confirm == One::CONFIRM);
    auto const ctrunc = opposite & One::CTRUNC;
    CPPUNIT_ASSERT(ctrunc == One::CTRUNC);
    auto const dontroute = opposite & One::DONTROUTE;
    CPPUNIT_ASSERT(dontroute == One::DONTROUTE);
    auto const dontwait = opposite & One::DONTWAIT;
    CPPUNIT_ASSERT(dontwait == One::DONTWAIT);
    auto const eor = opposite & One::EOR;
    CPPUNIT_ASSERT(eor == One::EOR);
    auto const errqueue = opposite & One::ERRQUEUE;
    CPPUNIT_ASSERT(errqueue == One::ERRQUEUE);
    auto const fastopen = opposite & One::FASTOPEN;
    CPPUNIT_ASSERT(fastopen == One::FASTOPEN);
    auto const fin = opposite & One::FIN;
    CPPUNIT_ASSERT(fin == One::FIN);
    auto const more = opposite & One::MORE;
    CPPUNIT_ASSERT(more == One::MORE);
    auto const nosignal = opposite & One::NOSIGNAL;
    CPPUNIT_ASSERT(nosignal == One::NOSIGNAL);
    auto const oob = opposite & One::OOB;
    CPPUNIT_ASSERT(oob == One::OOB);
    auto const peek = opposite & One::PEEK;
    CPPUNIT_ASSERT(peek == One::PEEK);
    auto const proxy = opposite & One::PROXY;
    CPPUNIT_ASSERT(proxy == One::PROXY);
    auto const rst = opposite & One::RST;
    CPPUNIT_ASSERT(rst == One::RST);
    auto const syn = opposite & One::SYN;
    CPPUNIT_ASSERT(syn == One::SYN);
    auto const trunc = opposite & One::TRUNC;
    CPPUNIT_ASSERT(trunc == One::TRUNC);
  }
  auto Flags::test_contains() -> void {
    auto const opposite = ~Set::NONE;
    CPPUNIT_ASSERT(contains(opposite, Set::NONE));
    CPPUNIT_ASSERT(contains(opposite, One::BATCH));
    CPPUNIT_ASSERT(contains(opposite, One::CMSG_CLOEXEC));
    CPPUNIT_ASSERT(contains(opposite, One::CONFIRM));
    CPPUNIT_ASSERT(contains(opposite, One::CTRUNC));
    CPPUNIT_ASSERT(contains(opposite, One::DONTROUTE));
    CPPUNIT_ASSERT(contains(opposite, One::DONTWAIT));
    CPPUNIT_ASSERT(contains(opposite, One::EOR));
    CPPUNIT_ASSERT(contains(opposite, One::ERRQUEUE));
    CPPUNIT_ASSERT(contains(opposite, One::FASTOPEN));
    CPPUNIT_ASSERT(contains(opposite, One::FIN));
    CPPUNIT_ASSERT(contains(opposite, One::MORE));
    CPPUNIT_ASSERT(contains(opposite, One::NOSIGNAL));
    CPPUNIT_ASSERT(contains(opposite, One::OOB));
    CPPUNIT_ASSERT(contains(opposite, One::PEEK));
    CPPUNIT_ASSERT(contains(opposite, One::PROXY));
    CPPUNIT_ASSERT(contains(opposite, One::RST));
    CPPUNIT_ASSERT(contains(opposite, One::SYN));
    CPPUNIT_ASSERT(contains(opposite, One::TRUNC));
  }
  auto Flags::test_is_flag() -> void {
    using ::sys::msg::as;
    CPPUNIT_ASSERT(!is_flag(Set{Set::NONE})); // the empty set is not a flag
    CPPUNIT_ASSERT(is_flag(Set{One::BATCH}));
    CPPUNIT_ASSERT(is_flag(Set{One::CMSG_CLOEXEC}));
    CPPUNIT_ASSERT(is_flag(Set{One::CONFIRM}));
    CPPUNIT_ASSERT(is_flag(Set{One::CTRUNC}));
    CPPUNIT_ASSERT(is_flag(Set{One::DONTROUTE}));
    CPPUNIT_ASSERT(is_flag(Set{One::DONTWAIT}));
    CPPUNIT_ASSERT(is_flag(Set{One::EOR}));
    CPPUNIT_ASSERT(is_flag(Set{One::ERRQUEUE}));
    CPPUNIT_ASSERT(is_flag(Set{One::FASTOPEN}));
    CPPUNIT_ASSERT(is_flag(Set{One::FIN}));
    CPPUNIT_ASSERT(is_flag(Set{One::MORE}));
    CPPUNIT_ASSERT(is_flag(Set{One::NOSIGNAL}));
    CPPUNIT_ASSERT(is_flag(Set{One::OOB}));
    CPPUNIT_ASSERT(is_flag(Set{One::PEEK}));
    CPPUNIT_ASSERT(is_flag(Set{One::PROXY}));
    CPPUNIT_ASSERT(is_flag(Set{One::RST}));
    CPPUNIT_ASSERT(is_flag(Set{One::SYN}));
    CPPUNIT_ASSERT(is_flag(Set{One::TRUNC}));
    // NONE is a special case
    CPPUNIT_ASSERT(is_flag(One::BATCH | Set{Set::NONE}));
    CPPUNIT_ASSERT(!is_flag(Set{Set::NONE}));
    // and not-a-flag is two or more
    CPPUNIT_ASSERT(!is_flag(One::TRUNC | Set{One::BATCH}));
    CPPUNIT_ASSERT(!is_flag(One::TRUNC | Set{One::CMSG_CLOEXEC}));
    CPPUNIT_ASSERT(!is_flag(One::TRUNC | Set{One::CONFIRM}));
    CPPUNIT_ASSERT(!is_flag(One::TRUNC | Set{One::CTRUNC}));
    CPPUNIT_ASSERT(!is_flag(One::TRUNC | Set{One::DONTROUTE}));
    CPPUNIT_ASSERT(!is_flag(One::TRUNC | Set{One::DONTWAIT}));
    CPPUNIT_ASSERT(!is_flag(One::TRUNC | Set{One::EOR}));
    CPPUNIT_ASSERT(!is_flag(One::TRUNC | Set{One::ERRQUEUE}));
    CPPUNIT_ASSERT(!is_flag(One::TRUNC | Set{One::FASTOPEN}));
    CPPUNIT_ASSERT(!is_flag(One::TRUNC | Set{One::FIN}));
    CPPUNIT_ASSERT(!is_flag(One::TRUNC | Set{One::MORE}));
    CPPUNIT_ASSERT(!is_flag(One::TRUNC | Set{One::NOSIGNAL}));
    CPPUNIT_ASSERT(!is_flag(One::TRUNC | Set{One::OOB}));
    CPPUNIT_ASSERT(!is_flag(One::TRUNC | Set{One::PEEK}));
    CPPUNIT_ASSERT(!is_flag(One::TRUNC | Set{One::PROXY}));
    CPPUNIT_ASSERT(!is_flag(One::TRUNC | Set{One::RST}));
    CPPUNIT_ASSERT(!is_flag(One::TRUNC | Set{One::SYN}));
    CPPUNIT_ASSERT(!is_flag(One::PEEK | Set{One::TRUNC}));
  }
  auto Flags::test_as_works() -> void {
    using ::sys::msg::as;
    // tested below ---> CPPUNIT_ASSERT(Set::NONE == as<One>(Set{Set::NONE})); <----
    CPPUNIT_ASSERT(One::BATCH == as<One>(Set{One::BATCH}));
    CPPUNIT_ASSERT(One::CMSG_CLOEXEC == as<One>(Set{One::CMSG_CLOEXEC}));
    CPPUNIT_ASSERT(One::CONFIRM == as<One>(Set{One::CONFIRM}));
    CPPUNIT_ASSERT(One::CTRUNC == as<One>(Set{One::CTRUNC}));
    CPPUNIT_ASSERT(One::DONTROUTE == as<One>(Set{One::DONTROUTE}));
    CPPUNIT_ASSERT(One::DONTWAIT == as<One>(Set{One::DONTWAIT}));
    CPPUNIT_ASSERT(One::EOR == as<One>(Set{One::EOR}));
    CPPUNIT_ASSERT(One::ERRQUEUE == as<One>(Set{One::ERRQUEUE}));
    CPPUNIT_ASSERT(One::FASTOPEN == as<One>(Set{One::FASTOPEN}));
    CPPUNIT_ASSERT(One::FIN == as<One>(Set{One::FIN}));
    CPPUNIT_ASSERT(One::MORE == as<One>(Set{One::MORE}));
    CPPUNIT_ASSERT(One::NOSIGNAL == as<One>(Set{One::NOSIGNAL}));
    CPPUNIT_ASSERT(One::OOB == as<One>(Set{One::OOB}));
    CPPUNIT_ASSERT(One::PEEK == as<One>(Set{One::PEEK}));
    CPPUNIT_ASSERT(One::PROXY == as<One>(Set{One::PROXY}));
    CPPUNIT_ASSERT(One::RST == as<One>(Set{One::RST}));
    CPPUNIT_ASSERT(One::SYN == as<One>(Set{One::SYN}));
    CPPUNIT_ASSERT(One::TRUNC == as<One>(Set{One::TRUNC}));
  }
  auto Flags::test_as_fails_0() -> void {
    using ::sys::msg::as;
    try {
      auto const zero = Set::NONE;
      as<One>(zero);
      // It should have thrown
      CPPUNIT_ASSERT(false);
    } catch (std::invalid_argument const &) {
      CPPUNIT_ASSERT(true);
      return;
    } catch (std::exception const &) {
      CPPUNIT_ASSERT(false);
    }
  }
  auto Flags::test_as_fails_2() -> void {
    using ::sys::msg::as;
    try {
      auto const two = One::TRUNC | One::BATCH;
      as<One>(two);
      // It should have thrown
      CPPUNIT_ASSERT(false);
    } catch (std::invalid_argument const &) {
      CPPUNIT_ASSERT(true);
      return;
    } catch (std::exception const &) {
      CPPUNIT_ASSERT(false);
    }
  }
  auto Flags::test_constants_single() -> void {
    Subject mmm;
    mmm = Subject::NONE;
    mmm = Flag::CMSG_CLOEXEC;
    mmm = Flag::CTRUNC;
    mmm = Flag::DONTROUTE;
    mmm = Flag::NOSIGNAL;
    mmm = Flag::EOR;
    mmm = Flag::ERRQUEUE;
    mmm = Flag::MORE;
    mmm = Flag::OOB;
    mmm = Flag::PEEK;
    mmm = Flag::TRUNC;
    mmm = Flag::WAITALL;
    // there, uttered the all
    CPPUNIT_ASSERT(Subject::NONE != mmm);
  }
  auto Flags::test_constants_set() -> void {
    Subject mmm;
    mmm = Subject::NONE;
    mmm = Subject{Flag::CMSG_CLOEXEC};
    mmm = Subject{Flag::CTRUNC};
    mmm = Subject{Flag::DONTROUTE};
    mmm = Subject{Flag::NOSIGNAL};
    mmm = Subject{Flag::EOR};
    mmm = Subject{Flag::ERRQUEUE};
    mmm = Subject{Flag::MORE};
    mmm = Subject{Flag::OOB};
    mmm = Subject{Flag::PEEK};
    mmm = Subject{Flag::TRUNC};
    mmm = Subject{Flag::WAITALL};
    // there, uttered the all
    CPPUNIT_ASSERT(Subject::NONE != mmm);
  }
}
#import rigging.suite.io
auto tests::unit::msg::Flags::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("Flags");
  series << []() {
              Stream sub{"constructor"};
              sub << call("default", &Flags::test_constructor_default)
                  << call("again", &Flags::test_constructor_again)
                ;
              return move(sub);
            }()
         << call("operator&", &Flags::test_operator_and)
         << call("operator&=", &Flags::test_operator_and_eq)
         << call("operator|", &Flags::test_operator_or)
         << call("operator|=", &Flags::test_operator_or_eq)
         << call("operator~", &Flags::test_operator_invert)
         << call("contains", &Flags::test_contains)
         << call("is_flag", &Flags::test_is_flag)
         << []() {
              Stream sub{"as<Flag>(Flags)"};
              sub << call("works", &Flags::test_as_works)
                  << []() {
                       Stream tub{"fails"};
                       tub << call("0", &Flags::test_as_fails_0)
                           << call("2", &Flags::test_as_fails_2)
                         ;
                       return move(tub);
                     }()
                ;
              return move(sub);
            }()
         << []() {
              Stream sub("constants");
              sub << call("single", &Flags::test_constants_single)
                  << call("set", &Flags::test_constants_set)
                ;
              return move(sub);
            }()
    ;
  return finalize(series);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::msg {
  //
  // The palette for Scenario 1
  //
  struct Palette;
}
#endiv
#divert <hpp>
#import sys.msg.Flag
#import sys.msg.Flags
#import tests.flags // Series
namespace tests::unit {
  struct msg::Palette {
    virtual ~Palette() = default;
    Palette() = default;
    using Flag = ::sys::msg::Flag;
    using Flags = ::sys::msg::Flags;
    std::vector<Flag> some_flag_series;
    Flags no_flags;
    Flags all_flags;
    virtual auto setUp() -> void;
    virtual auto tearDown() -> void;
    auto test_flag_constants() -> void;
    auto test_flags_constants() -> void;
    template<typename FLAGGIE> inline static auto as(Flag) -> FLAGGIE;
    template<typename FLAGGIE> inline static auto as(Flags) -> FLAGGIE;
    template<typename FIXTURE> static auto series() -> flags::Series;
  };
  namespace msg {
    template<> inline auto Palette::as<Palette::Flag>(Flag) -> Palette::Flag;
    template<> inline auto Palette::as<Palette::Flag>(Flags) -> Palette::Flag;
    template<> inline auto Palette::as<Palette::Flags>(Flag) -> Palette::Flags;
    template<> inline auto Palette::as<Palette::Flags>(Flags) -> Palette::Flags;
  }
}
#endiv
#divert <ipp>
#import sys.msg.as
namespace tests::unit::msg {
  template<> auto Palette::as<Palette::Flag>(Flag f) -> Palette::Flag    { return sys::msg::as<Flag>(f); }
  template<> auto Palette::as<Palette::Flag>(Flags s) -> Palette::Flag   { return sys::msg::as<Flag>(s); }
  template<> auto Palette::as<Palette::Flags>(Flag f) -> Palette::Flags  { return sys::msg::as<Flags>(f); }
  template<> auto Palette::as<Palette::Flags>(Flags s) -> Palette::Flags { return sys::msg::as<Flags>(s); }
}
#endiv
#divert <tpp>
#import rigging.suite.io
namespace tests::unit::msg {
  template<typename FIXTURE> auto Palette::series() -> flags::Series {
    using namespace rigging::suite;
    Stream con{"constants"};
    // These are actually required to be implemented up in Palette
    con << call("flag", &FIXTURE::test_flag_constants)
        << call("flags", &FIXTURE::test_flags_constants)
      ;
    return con;
  }
}
#endiv
#divert <cpp>
#import tests.flags.required.Palette
namespace tests::unit::msg {
  static_assert(flags::required::Palette<Palette>);
}
#import rigging.unit.lhs
#import rigging.unit.clear
namespace tests::unit::msg {
  using rigging::unit::lhs;
  using rigging::unit::clear;
  auto Palette::setUp() -> void {
    using v = std::vector<Flag>;
    lhs(some_flag_series) = v{// NOT Flag::NONE because that is not a flag, it is the absence of ALL flags.
      Flag::CMSG_CLOEXEC,
      Flag::CONFIRM,
      Flag::CTRUNC,
      Flag::DONTROUTE,
      Flag::NOSIGNAL,
      Flag::DONTWAIT,
      Flag::EOR,
      Flag::ERRQUEUE,
      Flag::MORE,
      Flag::OOB,
      Flag::PEEK,
      Flag::TRUNC,
      Flag::WAITALL};
    lhs(no_flags) = Flags{};
    lhs(all_flags) = Flags{MSG_CMSG_CLOEXEC|
                           MSG_CONFIRM|
                           MSG_CTRUNC|
                           MSG_DONTROUTE|
                           MSG_NOSIGNAL|
                           MSG_DONTWAIT|
                           MSG_EOR|
                           MSG_ERRQUEUE|
                           MSG_MORE|
                           MSG_OOB|
                           MSG_PEEK|
                           MSG_TRUNC|
                           MSG_WAITALL};
    CPPUNIT_ASSERT(0 != some_flag_series.size());
    CPPUNIT_ASSERT(0 == (int)no_flags);
    CPPUNIT_ASSERT(0 != (int)all_flags);
  }
  auto Palette::tearDown() -> void {
    lhs(some_flag_series) = clear;
    lhs(no_flags) = clear;
    lhs(all_flags) = clear;
  }
  auto Palette::test_flag_constants() -> void {
    // Utter them all [[FIXTHIS]] ensure that this is really all of the constants
    Flag f;
    f = Flag::CMSG_CLOEXEC;
    f = Flag::CONFIRM;
    f = Flag::CTRUNC;
    f = Flag::DONTROUTE;
    f = Flag::NOSIGNAL;
    f = Flag::DONTWAIT;
    f = Flag::EOR;
    f = Flag::ERRQUEUE;
    f = Flag::MORE;
    f = Flag::OOB;
    f = Flag::PEEK;
    f = Flag::TRUNC;
    f = Flag::WAITALL;
    CPPUNIT_ASSERT(Flag::WAITALL == f);
  }
  auto Palette::test_flags_constants() -> void {
    // Utter them all [[FIXTHIS]] ensure that this is really all of the constants
    Flags s;
    s = Flags::NONE;
    s = Flag::CMSG_CLOEXEC;
    s = Flag::CONFIRM;
    s = Flag::CTRUNC;
    s = Flag::DONTROUTE;
    s = Flag::NOSIGNAL;
    s = Flag::DONTWAIT;
    s = Flag::EOR;
    s = Flag::ERRQUEUE;
    s = Flag::MORE;
    s = Flag::OOB;
    s = Flag::PEEK;
    s = Flag::TRUNC;
    s = Flag::WAITALL;
    CPPUNIT_ASSERT(Flags::NONE != s);
    CPPUNIT_ASSERT(s != Flags::NONE);
    s = Flags::NONE;
    CPPUNIT_ASSERT(Flags::NONE == s);
    CPPUNIT_ASSERT(s == Flags::NONE);
  }
}
#endiv

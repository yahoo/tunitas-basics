// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::msg { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.msg.Flag
#import sys.msg.Flags
struct tests::unit::msg::Fixture : public cppunit::test::Fixture {
  using Flag = ::sys::msg::Flag;
  using Flags = ::sys::msg::Flags;
  //
  auto test_usage_Flags() -> void;
  //
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
namespace tests::unit::msg {
#warning [[WRITETHIS]] auto Fixture::test_usage_Flags() -> void
  auto Fixture::test_usage_Flags() -> void {
  }
}
#import tests.unit.msg.Palette
#import tests.flags.Scenario
#import tests.unit.msg.Constants
#import tests.unit.msg.Flag
#import tests.unit.msg.Flags
#import rigging.suite.io
auto tests::unit::msg::Fixture::suite() -> cppunit::Test * {
  namespace testing = tests::unit::msg;
  using namespace ::rigging::suite;
  Stream series{"msg"};
  namespace testing = tests::unit::msg;
  series << []() {
              Stream use{"usage"};
              use << call("Flags", &Fixture::test_usage_Flags)
                ;
              return move(use);
            }()
         << add<tests::flags::Scenario<1, Palette>>()
         << add<testing::Constants>()
         << add<testing::Flag>()
         << add<testing::Flags>()
    ;
  return finalize(series);
}
#endiv

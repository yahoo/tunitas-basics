// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::p { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.p.Type
struct tests::unit::p::Fixture : public cppunit::test::Fixture {
  using Subject = ::sys::p::Type;
  auto test_Type() -> void;
  auto test_constants() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
auto tests::unit::p::Fixture::test_Type() -> void {
  auto p = Subject{};
  p = Subject::PID;
  p = Subject::PGID;
  p = Subject::ALL;
  p = Subject::PROCESS;
  p = Subject::GROUP;
  p = Subject::ALL;
  static_assert(std::is_enum_v<Subject>);
  CPPUNIT_ASSERT(sizeof (p));
}
#import sys.p.constants
auto tests::unit::p::Fixture::test_constants() -> void {
  using namespace sys::p::constants;
  auto p = Subject{};
  p = PID;
  p = PGID;
  p = ALL;
  p = PROCESS;
  p = GROUP;
  p = ALL;
  CPPUNIT_ASSERT(sizeof (p));
}
#import rigging.suite.io
auto tests::unit::p::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("p");
  series << call("Type-", &Fixture::test_Type)
         << call("constants", &Fixture::test_constants)
         << END;
  return finalize(series);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::f { class Seals; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
#import sys.f.Seals
class tests::unit::f::Seals : public cppunit::test::Fixture {
public:
  using Single = ::sys::f::Seal;
  using Plural = ::sys::f::Seals;
  auto test_combinations() -> void;
  auto test_operator_and() -> void;
  auto test_operator_or() -> void;
  auto test_operator_invert() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
namespace tests::unit::f {
  auto Seals::test_combinations() -> void { 
    auto subject = Plural{};
    subject = Single::SEAL | Single::SEAL;
    CPPUNIT_ASSERT(Single::SEAL == subject);
    subject = Single::SHRINK & Single::SHRINK;
    CPPUNIT_ASSERT(Single::SHRINK == subject);
    subject = Single::GROW & Single::GROW;
    CPPUNIT_ASSERT(Single::GROW == subject);
    subject = Single::WRITE & Single::WRITE;
    CPPUNIT_ASSERT(Single::WRITE == subject);
    subject = Single::SEAL | Single::SHRINK | Single::GROW | Single::WRITE;
    { auto const expected = Plural{F_SEAL_SEAL | F_SEAL_SHRINK | F_SEAL_GROW | F_SEAL_WRITE};
      auto const actual = subject;
      CPPUNIT_ASSERT(expected == actual); }
  }
  auto Seals::test_operator_and() -> void {
    auto const all = Plural{F_SEAL_SEAL | F_SEAL_SHRINK | F_SEAL_GROW | F_SEAL_WRITE};
    auto const seal = all & Single::SEAL;
    CPPUNIT_ASSERT(Single::SEAL == seal);
    auto const shrink = all & Single::SHRINK;
    CPPUNIT_ASSERT(Single::SHRINK == shrink);
    auto const grow = all & Single::GROW;
    CPPUNIT_ASSERT(Single::GROW == grow);
    auto const write = all & Single::WRITE;
    CPPUNIT_ASSERT(Single::WRITE == write);
  }
  auto Seals::test_operator_or() -> void {
    auto const none = Plural{};
    auto const seal = none | Single::SEAL;
    CPPUNIT_ASSERT(Single::SEAL == seal);
    auto const shrink = none | Single::SHRINK;
    CPPUNIT_ASSERT(Single::SHRINK == shrink);
    auto const grow = none | Single::GROW;
    CPPUNIT_ASSERT(Single::GROW == grow);
    auto const write = none | Single::WRITE;
    CPPUNIT_ASSERT(Single::WRITE == write);
    { auto const expected = Plural{F_SEAL_SEAL | F_SEAL_SHRINK | F_SEAL_GROW | F_SEAL_WRITE};
      auto const actual = seal | shrink | grow | write;
      CPPUNIT_ASSERT(expected == actual); }
  }
  auto Seals::test_operator_invert() -> void {
    auto const none = Plural{};
    auto const known = Single::SEAL | Single::SHRINK | Single::GROW | Single::WRITE;
    auto const inverted = ~none;
    CPPUNIT_ASSERT(known == (known & inverted));
  }
}
#import rigging.suite.io
namespace tests::unit::f {
  auto Seals::suite() -> cppunit::Test * {
    using namespace rigging::suite;
    Stream series{"Seals"};
    series << call("combinations", &Seals::test_combinations)
           << call("and", &Seals::test_operator_and)
           << call("or", &Seals::test_operator_or)
           << call("invert", &Seals::test_operator_invert)
      ;
    return finalize(series);
  }
}
#endiv

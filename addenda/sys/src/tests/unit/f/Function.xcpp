// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::f { class Function; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
#import sys.f.Function
class tests::unit::f::Function : public cppunit::test::Fixture {
public:
  using Subject = ::sys::f::Function;
  auto test_literals() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
namespace tests::unit::f {
  auto Function::test_literals() -> void {
    Subject f;
    f = Subject::DUPFD;
    f = Subject::DUPFD_CLOEXEC;
    f = Subject::GETFD;
    f = Subject::SETFD;
    f = Subject::GETFL;
    f = Subject::SETFL;
    f = Subject::GETLK;
    f = Subject::SETLK;
    f = Subject::SETLKW;
    f = Subject::GETLK64;
    f = Subject::SETLK64;
    f = Subject::SETLKW64;
    f = Subject::OFD_GETLK;
    f = Subject::OFD_SETLK;
    f = Subject::OFD_SETLKW;
#ifdef F_OFD_GETLK64
    f = Subject::OFD_GETLK64;
    f = Subject::OFD_SETLK64;
    f = Subject::OFD_SETLKW64;
#endif
    f = Subject::SETLEASE;
    f = Subject::GETLEASE;
    f = Subject::SETPIPE_SZ;
    f = Subject::GETPIPE_SZ;
    f = Subject::GETOWN;
    f = Subject::SETOWN;
    f = Subject::GETOWN_EX;
    f = Subject::SETOWN_EX;
    f = Subject::GETSIG;
    f = Subject::SETSIG;
    f = Subject::NOTIFY;
    f = Subject::ADD_SEALS;
    f = Subject::GET_SEALS;
    f = Subject::GET_RW_HINT;
    f = Subject::SET_RW_HINT;
    f = Subject::GET_FILE_RW_HINT;
    f = Subject::SET_FILE_RW_HINT;
    CPPUNIT_ASSERT(Subject::GETFD != f);
  }
}
#import rigging.suite.io
namespace tests::unit::f {
  auto Function::suite() -> cppunit::Test * {
    using namespace rigging::suite;
    Stream series{"Function"};
    series << call("literals", &Function::test_literals)
      ;
    return finalize(series);
  }
}
#endiv

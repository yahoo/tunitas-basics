// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::wait { class Status; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.wait.Status
struct tests::unit::wait::Status : public cppunit::test::Fixture {
  using Subject = ::sys::wait::Status;
  auto test_ok() -> void;
  auto test_value_consty() -> void;
  auto test_value_muting() -> void;
  auto test_value_moving() -> void;
  auto test_clear() -> void;
  auto test_ifexited() -> void;
  auto test_ifsignaled() -> void;
  auto test_termsig() -> void;
  auto test_coredump() -> void;
  auto test_ifstopped() -> void;
  auto test_stopsig() -> void;
  auto test_ifcontinued() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.move
namespace tests::unit::wait {
  auto Status::test_ok() -> void {
    {
      auto zero = Subject{};
      CPPUNIT_ASSERT(good(zero));
    } {
      auto ffff = Subject(0x0'ffff'ffff);
      CPPUNIT_ASSERT(!good(ffff));
    }
  }
  auto Status::test_value_consty() -> void {
    {
      auto const &zero = Subject{};
      CPPUNIT_ASSERT(0 == value(zero));
    } {
      auto const &ffff = Subject(0x0'ffff'ffff);
      CPPUNIT_ASSERT(0 != value(ffff));
    }
  }
  auto Status::test_value_muting() -> void {
    {
      auto specimen = Subject{};
      auto &zero{specimen};
      CPPUNIT_ASSERT(0 == value(zero));
    } {
      auto specimen = Subject(0x0'ffff'ffff);
      auto &ffff{specimen};
      CPPUNIT_ASSERT(0 != value(ffff));
    }
  }
  auto Status::test_value_moving() -> void {
    {
      auto zero = Subject{};
      CPPUNIT_ASSERT(0 == value(std::move(zero)));
    } {
      auto ffff = Subject(0x0'ffff'ffff);
      CPPUNIT_ASSERT(0 != value(std::move(ffff)));
    }
  }
  auto Status::test_clear() -> void {
    {
      auto zero = Subject{};
      clear(zero);
      CPPUNIT_ASSERT(good(zero));
    } {
      auto ffff = Subject(0x0'ffff'ffff);
      clear(ffff);
      CPPUNIT_ASSERT(good(ffff));
    }
  }
  auto Status::test_ifexited() -> void {
    {
      auto zero = Subject{};
      CPPUNIT_ASSERT(ifexited(zero));
    } {
      auto ffff = Subject(0x0'ffff'ffff);
      CPPUNIT_ASSERT(!ifexited(ffff));
    }
  }
  auto Status::test_ifsignaled() -> void {
    {
      auto zero = Subject{};
      CPPUNIT_ASSERT(!ifsignaled(zero));
    } {
      auto ffff = Subject(0x0'ffff'ffff);
      CPPUNIT_ASSERT(!good(ffff));
    }
  }
  auto Status::test_termsig() -> void {
    {
      auto zero = Subject{};
      CPPUNIT_ASSERT(0 == termsig(zero));
    } {
      auto ffff = Subject(0x0'ffff'ffff);
      CPPUNIT_ASSERT(0 != termsig(ffff));
    }
  }
  auto Status::test_coredump() -> void {
    {
      auto zero = Subject{};
      CPPUNIT_ASSERT(!coredump(zero));
    } {
      auto ffff = Subject(0x0'ffff'ffff);
      CPPUNIT_ASSERT(coredump(ffff));
    }
  }
  auto Status::test_ifstopped() -> void {
    {
      auto zero = Subject{};
      CPPUNIT_ASSERT(!ifstopped(zero));
    } {
      // This seems to be coded directly in __WIFSTOPPED <bits/waitststus.h>
      auto ffff = Subject(0x0'7f);
      CPPUNIT_ASSERT(ifstopped(ffff));
    }
  }
  auto Status::test_stopsig() -> void {
    {
      auto zero = Subject{};
      CPPUNIT_ASSERT(0 == stopsig(zero));
    } {
      auto ffff = Subject(0x0'ffff'ffff);
      CPPUNIT_ASSERT(0 != stopsig(ffff));
    }
  }
  auto Status::test_ifcontinued() -> void {
    {
      auto zero = Subject{};
      CPPUNIT_ASSERT(!ifcontinued(zero));
    } {
      static_assert(__W_CONTINUED == 0xffff); // <bits/waitstatus.h>
      auto ffff = Subject(0x0'ffff); 
      CPPUNIT_ASSERT(ifcontinued(ffff));
    }
  }
}
#import nonstd.integers
#import rigging.suite.io
auto tests::unit::wait::Status::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("Status");
  series << call("ok", &Status::test_ok)
         << []() {
              Stream val("value");
              val << call("consty", &Status::test_value_consty)
                  << call("muting", &Status::test_value_muting)
                  << call("moving", &Status::test_value_moving)
                  << END;
              return move(val);
            }()
         << call("clear", &Status::test_clear)
         << call("ifexited", &Status::test_ifexited)
         << call("ifsignaled", &Status::test_ifsignaled)
         << call("termsig", &Status::test_termsig)
         << call("coredump", &Status::test_coredump)
         << call("ifstopped", &Status::test_ifstopped)
         << call("stopsig", &Status::test_stopsig)
         << call("ifcontinued", &Status::test_ifcontinued)
         << END;
  return finalize(series);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.exits.required
namespace tests::unit::wait {
  namespace required { using namespace sys::exits::required; }
  class Functions;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.exits.required.Codable
#import sys.wait.Status
#import std.string
struct tests::unit::wait::Functions : public cppunit::test::Fixture {
  using Subject = ::sys::wait::Status;
  auto test_exitstatus_function_constructor_default() -> void;
  auto test_exitstatus_function_constructor_conversion() -> void;
  template<required::Codable CODABLE> auto test_exitstatus_template_constructor_default() -> void;
  template<required::Codable CODABLE> auto test_exitstatus_template_constructor_conversion() -> void;
  template<required::Codable CODABLE> static auto generate_exitstatus_series(std::string name);
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <tpp>
#import sys.wait.functions
#import rigging.suite.io
namespace tests::unit::wait {
  template<required::Codable CODABLE> auto Functions::generate_exitstatus_series(std::string name) {
    using namespace ::rigging::suite;
    Stream series{move(name)};
    series << call("default", &Functions::test_exitstatus_template_constructor_default<CODABLE>)
           << call("conversion", &Functions::test_exitstatus_template_constructor_conversion<CODABLE>)
           << END;
    return series;
  }
  template<required::Codable CODABLE> auto Functions::test_exitstatus_template_constructor_default() -> void {
    using ::sys::wait::exitstatus;
    auto zero = Subject{};
    CPPUNIT_ASSERT(0 == exitstatus<CODABLE>(zero)); // <------------- test this
  }
  template<required::Codable CODABLE> auto Functions::test_exitstatus_template_constructor_conversion() -> void {
    using ::sys::wait::exitstatus;
    auto ffff = Subject(0x0'ffff'ffff);
    // ADL won't find the function template, so we have to help it
    CPPUNIT_ASSERT(CODABLE(0xff) == exitstatus<CODABLE>(ffff)); // <- test this
  }
}
#endiv
#divert <cpp>
namespace tests::unit::wait {
  auto Functions::test_exitstatus_function_constructor_default() -> void {
    auto zero = Subject{};
    CPPUNIT_ASSERT(0 == exitstatus(zero)); // <-------- test this (ADL MUST find it)
  }
  auto Functions::test_exitstatus_function_constructor_conversion() -> void {
    auto ffff = Subject(0x0'ffff'ffff);
    CPPUNIT_ASSERT(0xff == exitstatus(ffff));
  }
}
#import nonstd.integers
#import rigging.suite.io
auto tests::unit::wait::Functions::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("functions");
  series << []() {
              Stream exss("exitstatus");
              exss << []() {
                        Stream fun{"function"};
                        fun << call("default", &Functions::test_exitstatus_function_constructor_default)
                            << call("conversion", &Functions::test_exitstatus_function_constructor_conversion)
                            << END;
                        return fun;
                      }()
                   << []() {
                        Stream tem("template");
                        tem << generate_exitstatus_series<std::int8_t>("int8")
                            << generate_exitstatus_series<std::uint8_t>("uint8")
                            << generate_exitstatus_series<std::int16_t>("int16")
                            << generate_exitstatus_series<std::uint16_t>("uint16")
                            << generate_exitstatus_series<std::int32_t>("int32")
                            << generate_exitstatus_series<std::uint32_t>("uint32")
                            << generate_exitstatus_series<std::int64_t>("int64")
                            << generate_exitstatus_series<std::uint64_t>("uint64")
                            << generate_exitstatus_series<::sys::exits::Code>("Code")
                            << END;
                        return tem;
                      }()
                   << END;
                return exss;
            }()
         << END;
  return finalize(series);
}
#endiv

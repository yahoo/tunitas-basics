// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::log { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.log.Priority
#import va.list
struct tests::unit::log::Fixture : public cppunit::test::Fixture {
  auto test_Option() -> void;
  auto test_Options() -> void;
  auto test_Priority() -> void;
  auto test_Priorities_literals() -> void;
  auto test_Priorities_or() -> void;
  auto test_Priorities_upto() -> void;
  auto test_Facility() -> void;
  auto test_open() -> void;
  auto test_close() -> void;
  auto test_set() -> void;
  auto test_format() -> void;
  auto test_vformat() -> void;
  static auto suite() -> cppunit::Test *;
protected:
  auto run_vformat(::sys::log::Priority level, char const *format, va_list ap) -> void;
  auto run_format(::sys::log::Priority level, char const *format, ...) -> void;
};
#endiv
#divert <cpp>
#import sys.log.Priority
auto tests::unit::log::Fixture::test_Priority() -> void {
  using ::sys::log::Priority;
  auto p = Priority{};
  p = Priority::EMERG;
  p = Priority::EMERGENCY;
  p = Priority::ALERT;
  p = Priority::CRIT;
  p = Priority::CRITICAL;
  p = Priority::ERR;
  p = Priority::ERROR;
  p = Priority::WARNING;
  p = Priority::NOTICE;
  p = Priority::INFO;
  p = Priority::INFORMATION;
  p = Priority::VERBOSE;
  p = Priority::DEBUG;
  CPPUNIT_ASSERT(p != Priority::INFO);
}
#import sys.log.Priorities
auto tests::unit::log::Fixture::test_Priorities_literals() -> void {
  using ::sys::log::Priority;
  using ::sys::log::Priorities;
  auto const e = Priority::EMERGENCY;
  auto const a = Priority::ALERT;
  auto const c = Priority::CRITICAL;
  auto const r = Priority::ERROR;
  auto const w = Priority::WARNING;
  auto const n = Priority::NOTICE;
  auto const i = Priority::INFORMATION;
  auto const v = Priority::VERBOSE;
  auto const d = Priority::DEBUG;
  auto ee = e | e;
  auto aa = a | a;
  auto cc = c | c;
  auto rr = r | r;
  auto ww = w | w;
  auto nn = n | n;
  auto ii = i | i;
  auto vv = v | v;
  auto dd = d | d;
  CPPUNIT_ASSERT((int)ee == (int)e);
  CPPUNIT_ASSERT((int)aa == (int)a);
  CPPUNIT_ASSERT((int)cc == (int)c);
  CPPUNIT_ASSERT((int)rr == (int)r);
  CPPUNIT_ASSERT((int)ww == (int)w);
  CPPUNIT_ASSERT((int)nn == (int)n);
  CPPUNIT_ASSERT((int)ii == (int)i);
  CPPUNIT_ASSERT((int)vv == (int)v);
  CPPUNIT_ASSERT((int)dd == (int)d);
}
auto tests::unit::log::Fixture::test_Priorities_or() -> void {
  using ::sys::log::Priority;
  using ::sys::log::Priorities;
  {
    auto const e = Priority::EMERGENCY;
    auto ee = e | e;
    auto xe = ee | e;
    auto ye = e | ee;
    auto ze = ee | ee;
    CPPUNIT_ASSERT((int) ee == (int)xe);
    CPPUNIT_ASSERT((int) ee == (int)ye);
    CPPUNIT_ASSERT((int) ee == (int)ze);
  } {
    auto const n = Priority::NOTICE;
    auto nn = n | n;
    auto xn = nn | n;
    auto yn = n | nn;
    auto zn = nn | nn;
    CPPUNIT_ASSERT((int) nn == (int)xn);
    CPPUNIT_ASSERT((int) nn == (int)yn);
    CPPUNIT_ASSERT((int) nn == (int)zn);
  }
}
auto tests::unit::log::Fixture::test_Priorities_upto() -> void {
  using ::sys::log::Priority;
  using ::sys::log::Priorities;
  auto p = Priorities{};
  p = upto(Priority::EMERG);
  p = upto(Priority::EMERGENCY);
  p = upto(Priority::ALERT);
  p = upto(Priority::CRIT);
  p = upto(Priority::CRITICAL);
  p = upto(Priority::ERR);
  p = upto(Priority::ERROR);
  p = upto(Priority::WARNING);
  p = upto(Priority::NOTICE);
  p = upto(Priority::INFO);
  p = upto(Priority::INFORMATION);
  p = upto(Priority::VERBOSE);
  p = upto(Priority::DEBUG);
  CPPUNIT_ASSERT(p != Priorities{});
}
#import sys.log.Option
auto tests::unit::log::Fixture::test_Option() -> void {
  using ::sys::log::Option;
  auto o = Option{};
  o = Option::PID;
  o = Option::CONS;
  o = Option::CONSOLE;
  o = Option::ODELAY;
  o = Option::NDELAY;
  o = Option::NODELAY;
  o = Option::NOWAIT;
  o = Option::PERROR;
  CPPUNIT_ASSERT(o != Option{});
}
#import sys.log.Options
auto tests::unit::log::Fixture::test_Options() -> void {
  using ::sys::log::Option;
  using ::sys::log::Options;
  auto const pi = Option::PID;
  auto const c0 = Option::CONS;
  auto const co = Option::CONSOLE;
  auto const o0 = Option::ODELAY;
  auto const n0 = Option::NDELAY;
  auto const nd = Option::NODELAY;
  auto const nw = Option::NOWAIT;
  auto const pe = Option::PERROR;
  auto const ppi = pi | pi;
  auto const cc0 = c0 | c0;
  auto const cco = co | co;
  auto const oo0 = o0 | o0;
  auto const nn0 = n0 | n0;
  auto const nnd = nd | nd;
  auto const nnw = nw | nw;
  auto const ppe = pe | pe;
  CPPUNIT_ASSERT(ppi == Options{pi});
  CPPUNIT_ASSERT(cc0 == Options{c0});
  CPPUNIT_ASSERT(cco == Options{co});
  CPPUNIT_ASSERT(oo0 == Options{o0});
  CPPUNIT_ASSERT(nn0 == Options{n0});
  CPPUNIT_ASSERT(nnd == Options{nd});
  CPPUNIT_ASSERT(nnw == Options{nw});
  CPPUNIT_ASSERT(ppe == Options{pe});
}
#import sys.log.Facility
auto tests::unit::log::Fixture::test_Facility() -> void {
  using ::sys::log::Facility;
  auto f = Facility{};
  f = Facility::KERN;
  f = Facility::KERNEL;
  f = Facility::USER;
  f = Facility::MAIL;
  f = Facility::DAEMON;
  f = Facility::AUTH;
  f = Facility::SYSLOG;
  f = Facility::LPR;
  f = Facility::PRINTER;
  f = Facility::NEWS;
  f = Facility::UUCP;
  f = Facility::CRON;
  f = Facility::AUTHPRIV;
  f = Facility::FTP;
  f = Facility::LOCAL0;
  f = Facility::LOCAL1;
  f = Facility::LOCAL2;
  f = Facility::LOCAL3;
  f = Facility::LOCAL4;
  f = Facility::LOCAL5;
  f = Facility::LOCAL6;
  f = Facility::LOCAL7;
  CPPUNIT_ASSERT(f != Facility::KERNEL);
}
#import sys.log.api // a.k.a. open(..., close(...), set(...), format(...)
auto tests::unit::log::Fixture::test_open() -> void {
  using ::sys::log::Facility;
  using ::sys::log::Option;
  ::sys::log::open("a.out"s, Option::PID, Facility::USER); // ADL should find this
  open(std::string{"a.out"}, Option::PID, Facility::USER); // ADL should find this
  ::sys::log::open(c::str("a.out"s), Option::PID, Facility::USER); // ADL should find this
  ::sys::log::open("program", Option::PID, Facility::USER); // ADL should find this
  open("program"s, Option::PID, Facility::USER); // ADL should find this
  ::sys::log::close(); // ADL can't find this because there are no arguments
}
auto tests::unit::log::Fixture::test_close() -> void {
  ::sys::log::close();
}
auto tests::unit::log::Fixture::test_set() -> void {
  using ::sys::log::Facility;
  using ::sys::log::Priority;
  using ::sys::log::Option;
  open(Option::PID, Facility::USER); // ADL should find this
  set(upto(Priority::ALERT));
  ::sys::log::close(); // ADL can't find this because there are no arguments
}
auto tests::unit::log::Fixture::test_format() -> void {
  using ::sys::log::Facility;
  using ::sys::log::Priority;
  using ::sys::log::Option;
  // ADL finds these
  open(Option::PID|Option::NODELAY, Facility::USER); // ADL should find this
  set(upto(Priority::VERBOSE));
  format(Priority::NOTICE, "GOOD string=\"%s\" char-'%c' int-%d float-%f", "string", 'c', 99, 567.890);
  ::sys::log::close(); // ADL can't find this because there are no arguments
}
auto tests::unit::log::Fixture::run_format(::sys::log::Priority level, char const *format, ...) -> void {
  va_list ap;
  va_start(ap, format);
  run_vformat(level, format, ap); // <--- test this
  va_end(ap);
}
auto tests::unit::log::Fixture::run_vformat(::sys::log::Priority level, char const *format, va_list ap) -> void {
  vformat(level, format, ap); // <--- test this
}
auto tests::unit::log::Fixture::test_vformat() -> void {
  using ::sys::log::Facility;
  using ::sys::log::Priority;
  using ::sys::log::Option;
  // ADL finds these
  open(Option::PID, Facility::USER); // ADL should find this
  set(upto(Priority::DEBUG));
  run_format(Priority::NOTICE, "GOOD string=\"%s\" char-'%c' int-%d float-%f", "string", 'c', 99, 567.890);
  ::sys::log::close(); // ADL can't find this because there are no arguments
}
#import tests.unit.log.LOG
#import rigging.suite.io
auto tests::unit::log::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("log");
  series << call("Priority", &Fixture::test_Priority)
         << []() {
              Stream sub("Priorities");
              sub << call("literals", &Fixture::test_Priorities_literals)
                  << call("or", &Fixture::test_Priorities_or)
                  << call("upto", &Fixture::test_Priorities_upto)
                  << END;
                return sub;
            }()
         << call("Option", &Fixture::test_Option)
         << call("Options", &Fixture::test_Options)
         << call("Facility", &Fixture::test_Facility)
         << call("open", &Fixture::test_open)
         << call("close", &Fixture::test_close)
         << call("set", &Fixture::test_set)
         << call("format", &Fixture::test_format)
         << call("vformat", &Fixture::test_vformat)
         << add<LOG>()
         << END;
  return finalize(series);
}
#endiv

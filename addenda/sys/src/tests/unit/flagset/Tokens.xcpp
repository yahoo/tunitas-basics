// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.flagset.Shift
#import sys.flagset.Container
namespace tests::unit::flagset {
  //
  // A normal set of flags.  Normal meaning "int-sized"
  // Booorrring.
  // But this is a tester, so it is supposed to be didactic.
  //
  namespace tokens {
    enum class Single {
      T0, T1, T2, T3, T4, T5, T6, T7, T8, T9,
      T10, T11, T12, T13, T14, T15, T16, T17, T18, T19,
      T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
      T30, T31,
    };
    using Plural = ::sys::flagset::Container<Single, int, ::sys::flagset::Shift<Single, int>>;
  }
  class Tokens;
}
#endiv
#divert <hpp>
namespace tests::unit::flagset::tokens {
  constexpr auto operator&(Single a, Single b) -> Plural { return Plural::meet(a, b); }
  constexpr auto operator|(Single a, Single b) -> Plural { return Plural::join(a, b); }
  constexpr auto operator~(Single a) -> Plural { return Plural::complement(a); }
}
#import cppunit.test.Fixture
#import cppunit.Test
class tests::unit::flagset::Tokens : public cppunit::test::Fixture {
public:
  auto test_constructor_default() -> void;
  auto test_constructor_empty() -> void;
  auto test_single_and() -> void;
  auto test_single_or() -> void;
  auto test_single_invert() -> void;
  auto test_contains() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
namespace tests::unit::flagset {
  auto Tokens::test_constructor_default() -> void {
    auto subject = tokens::Plural{};
    CPPUNIT_ASSERT(sizeof (subject));
  }
  auto Tokens::test_constructor_empty() -> void {
    auto subject = tokens::Plural::NONE;
    CPPUNIT_ASSERT(sizeof (subject));
  }
  auto Tokens::test_single_and() -> void {
    { auto const expected = tokens::Plural{1};
      auto const actual = tokens::Single::T0 & /* <---- test this */  tokens::Single::T0;
      CPPUNIT_ASSERT(expected == actual); }
    { auto const expected = tokens::Plural{2};
      auto const actual = tokens::Single::T1 & /* <---- test this */  tokens::Single::T1;
      CPPUNIT_ASSERT(expected == actual); }
  }
  auto Tokens::test_single_or() -> void {
    { auto const expected = tokens::Plural{1};
      auto const actual = tokens::Single::T0 | /* <---- test this */  tokens::Single::T0;
      CPPUNIT_ASSERT(expected == actual); }
    { auto const expected = tokens::Plural{2};
      auto const actual = tokens::Single::T1 | /* <---- test this */ tokens::Single::T1;
      CPPUNIT_ASSERT(expected == actual); }
  }
  auto Tokens::test_single_invert() -> void {
    auto const none = tokens::Plural::NONE;
    auto const all = ~none;
    { auto const expected = all;
      auto const actual = tokens::Single::T0 | /* test this ---> */ ~tokens::Single::T0;
      CPPUNIT_ASSERT(expected == actual); }
    { auto const expected = all;
      auto const actual = tokens::Single::T1 | /* test this ---> */ ~tokens::Single::T1;
      CPPUNIT_ASSERT(expected == actual); }
  }
  auto Tokens::test_contains() -> void {
    {
      auto const all = ~tokens::Plural::NONE;
      CPPUNIT_ASSERT(contains(all, tokens::Single::T0));
      CPPUNIT_ASSERT(contains(all, tokens::Single::T1));
      CPPUNIT_ASSERT(contains(all, tokens::Single::T2));
      CPPUNIT_ASSERT(contains(all, tokens::Single::T29));
      CPPUNIT_ASSERT(contains(all, tokens::Single::T30));
      CPPUNIT_ASSERT(contains(all, tokens::Single::T31));
    } {
      auto const none = tokens::Plural::NONE;
      CPPUNIT_ASSERT(!contains(none, tokens::Single::T0));
      CPPUNIT_ASSERT(!contains(none, tokens::Single::T1));
      CPPUNIT_ASSERT(!contains(none, tokens::Single::T2));
      CPPUNIT_ASSERT(!contains(none, tokens::Single::T29));
      CPPUNIT_ASSERT(!contains(none, tokens::Single::T30));
      CPPUNIT_ASSERT(!contains(none, tokens::Single::T31));
    }
  }
}
#import rigging.suite.io
namespace tests::unit::flagset {
  auto Tokens::suite() -> cppunit::Test * {
    using namespace ::rigging::suite;
    Stream series{"Tokens"};
    series << []() {
                Stream con{"constructor"};
                con << call("default", &Tokens::test_constructor_default)
                    << call("empty", &Tokens::test_constructor_empty)
                  ;
                return con;
              }()
           << []() {
                Stream sin{"single"};
                sin << call("and", &Tokens::test_single_and)
                    << call("or", &Tokens::test_single_or)
                    << call("invert", &Tokens::test_single_invert)
                  ;
                return sin;
              }()
           << call("contains", &Tokens::test_contains)
      ;
    return finalize(series);
  }
}
#endiv

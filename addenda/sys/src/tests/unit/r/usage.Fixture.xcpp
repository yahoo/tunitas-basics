// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::r::usage { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.r.Usage
#import sys.r.Usages
struct tests::unit::r::usage::Fixture : public cppunit::test::Fixture {
  using Usage = ::sys::r::Usage;
  using Usages = ::sys::r::Usages;
  auto test_Usage() -> void;
  auto test_Usages() -> void;
  auto test_constants() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.is_class
#import std.is_enum
#import sys.r.constants
namespace tests::unit::r::usage {
  auto Fixture::test_Usage() -> void {
    auto u = Usage{}; // <---------------------------------- test this
    static_assert(std::is_enum_v<Usage>);
    CPPUNIT_ASSERT(sizeof (u));
  }
  auto Fixture::test_Usages() -> void {
    auto u = Usages{};
    static_assert(std::is_class_v<Usages>);
    CPPUNIT_ASSERT(sizeof (u));
  }
  auto usage::Fixture::test_constants() -> void {
    using namespace sys::r::constants;
    auto u = Usage{};
    u = SELF;
    u = CHILDREN;
    u = THREAD;
    CPPUNIT_ASSERT(sizeof (u));
  }
}
#import rigging.suite.io
auto tests::unit::r::usage::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("usage");
  series << call("Usage", &Fixture::test_Usage)
         << call("Usages", &Fixture::test_Usages)
         << call("constants", &Fixture::test_constants)
         << END;
  return finalize(series);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::e { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sys.e.Code
#import sys.e.Condition
struct tests::unit::e::Fixture : public cppunit::test::Fixture {
  using Code = ::sys::e::Code;
  using Condition = ::sys::e::Condition;
  auto test_Code() -> void;
  auto test_Condition() -> void;
  auto test_constants() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
namespace tests::unit::e {
  auto Fixture::test_Code() -> void {
    auto c = Code::SUCCESS;
    CPPUNIT_ASSERT(0 == (int)c);
  }
  auto Fixture::test_Condition() -> void {
    auto c = Condition::SUCCESS;
    CPPUNIT_ASSERT(0 == (int)c);
  }
}
#import sys.e.constants
namespace tests::unit::e {
  auto Fixture::test_constants() -> void {
    using namespace ::sys::e::constants;
    CPPUNIT_ASSERT(SUCCESS == Code::SUCCESS);
  }
}
#import rigging.suite.io
auto tests::unit::e::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  namespace testing = tests::unit::e;
  Stream series("e");
  series << call("Code", &Fixture::test_Code)
         << call("Condition", &Fixture::test_Condition)
         << call("constants", &Fixture::test_constants)
         << END;
  return finalize(series);
}
#endiv

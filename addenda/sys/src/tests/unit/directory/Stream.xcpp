// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace directory {
      class Stream;
    }
  }
}
#divert </fpp>
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture

class tests::unit::directory::Stream : public cppunit::test::Fixture { 
  using ancestor = cppunit::test::Fixture;
public: 
  auto test_constructor() -> void;
  auto test_destructor() -> void;
  auto test_operator_extract_string() -> void;
  auto test_operator_extract_Entry() -> void;

  static auto suite() -> cppunit::Test *;
};
#divert </hpp>
#divert <cpp>
#import sys.directory.Entry
#import sys.directory.Stream
#import std.string

auto tests::unit::directory::Stream::test_constructor() -> void {
  {
    ::sys::directory::Stream s;
    CPPUNIT_ASSERT(true);
  } {
    ::sys::directory::Stream s("/tmp");
    CPPUNIT_ASSERT(true);
  } {
    ::sys::directory::Stream s;
    s.open("/tmp");
    CPPUNIT_ASSERT(true);
  }
}

auto tests::unit::directory::Stream::test_destructor() -> void {
  {
    ::sys::directory::Stream s("/tmp");
    CPPUNIT_ASSERT(s.is_open());
    // <------- tst this (surely the destructor is run)
  }
}

#import std.string
#import sys.directory.Entry
auto tests::unit::directory::Stream::test_operator_extract_string() -> void {
  ::sys::directory::Stream in("/tmp");
  std::string s;
  while (in >> s) {
    std::cout << "string qq|" << s << "|\n";
  }
}

auto tests::unit::directory::Stream::test_operator_extract_Entry() -> void {
  ::sys::directory::Stream in("/tmp");
  ::sys::directory::Entry e;
  while (in >> e) {
    std::cout << "entry qq|" << e.name << "|\n";
  }
}

#import rigging.suite.io
auto tests::unit::directory::Stream::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  namespace suite = ::rigging::suite; // avoid tests::unit::directory::Stream (this class)
  namespace testing = tests::unit::directory;
  suite::Stream series("Stream");
  series << call("constructor", &testing::Stream::test_constructor)
         << call("destructor", &testing::Stream::test_destructor)
         << call("operator-extract-string", &testing::Stream::test_operator_extract_string)
         << call("operator-extract-Entry", &testing::Stream::test_operator_extract_Entry)
    ;
  return finalize(series);
}
#divert </cpp>

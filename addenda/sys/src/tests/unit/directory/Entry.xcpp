// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace directory {
      class Entry;
    }
  }
}
#divert </fpp>
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture

class tests::unit::directory::Entry : public cppunit::test::Fixture { 
public: 
  auto test_constructor_default() -> void;
  auto test_constructor_ino_off_type_stringz() -> void;
  auto test_constructor_ino_off_type_string_copy() -> void;
  auto test_constructor_ino_off_type_string_move() -> void;
  auto test_constructor_entry() -> void;
  auto test_destructor() -> void;
  auto test_ino() -> void;
  auto test_off() -> void;
  auto test_name() -> void;
  auto test_container() -> void;

  static auto suite() -> cppunit::Test *;
};
#divert </hpp>
#divert <cpp>
#import sys.directory.Entry
#import sys.directory.open
#import sys.directory.read

auto tests::unit::directory::Entry::test_constructor_default() -> void {
  ::sys::directory::Entry e;
  CPPUNIT_ASSERT(0 == e.ino);
  CPPUNIT_ASSERT(0 == e.off);
  CPPUNIT_ASSERT(0 == e.name.size());
}

#import sys.directory.Type
auto tests::unit::directory::Entry::test_constructor_ino_off_type_stringz() -> void {
  using sys::directory::Entry;
  using sys::directory::Type;
  auto literal = "appla-banana-cherry";
  Entry ee(99, 88, Type::LNK, literal);
  CPPUNIT_ASSERT(99 == ee.ino);
  CPPUNIT_ASSERT(88 == ee.off);
  CPPUNIT_ASSERT(Type::LNK == ee.type);
  CPPUNIT_ASSERT(literal == ee.name);
}

auto tests::unit::directory::Entry::test_constructor_ino_off_type_string_copy() -> void {
  using sys::directory::Entry;
  using sys::directory::Type;
  std::string const literal("appla-banana-cherry");
  Entry ee(99, 88, Type::LNK, literal);
  CPPUNIT_ASSERT(99 == ee.ino);
  CPPUNIT_ASSERT(88 == ee.off);
  CPPUNIT_ASSERT(Type::LNK == ee.type);
  CPPUNIT_ASSERT(literal == ee.name);
}

auto tests::unit::directory::Entry::test_constructor_ino_off_type_string_move() -> void {
  using sys::directory::Entry;
  using sys::directory::Type;
  auto literal = (std::string)"appla-banana-cherry";
  Entry ee(99, 88, Type::LNK, literal);
  CPPUNIT_ASSERT(99 == ee.ino);
  CPPUNIT_ASSERT(88 == ee.off);
  CPPUNIT_ASSERT(Type::LNK == ee.type);
  CPPUNIT_ASSERT(literal == ee.name);
}

#import c.str
#import std.copy
auto tests::unit::directory::Entry::test_constructor_entry() -> void {
  using sys::directory::Type;
  ::sys::directory::entry e;
  e.d_ino = 99;
  e.d_off = 88;
  e.d_type = (decltype(e.d_type))(Type::LNK);
  e.d_reclen = 77;
  c::const_stringz literal = "appla-banana-cherry";
  std::copy(literal.begin(), literal.end()+1, &e.d_name[0]);
  ::sys::directory::Entry ee(e);
  CPPUNIT_ASSERT(99 == ee.ino);
  CPPUNIT_ASSERT(88 == ee.off);
  CPPUNIT_ASSERT(Type::LNK == ee.type);
  CPPUNIT_ASSERT(c::str(literal) == ee.name);
}

auto tests::unit::directory::Entry::test_destructor() -> void {
  // sure ... there's nothing to destruct
  CPPUNIT_ASSERT(true);
}

auto tests::unit::directory::Entry::test_ino() -> void {
  ::sys::directory::Entry ee;
  ee.ino = 99;
  CPPUNIT_ASSERT(99 == ee.ino);
}

auto tests::unit::directory::Entry::test_off() -> void {
  ::sys::directory::Entry ee;
  ee.off = 88;
  CPPUNIT_ASSERT(88 == ee.off);
}

auto tests::unit::directory::Entry::test_name() -> void {
  ::sys::directory::Entry ee;
  ee.name = "Smithsonian";
  CPPUNIT_ASSERT("Smithsonian" == ee.name);
}

#import std.multimap
auto tests::unit::directory::Entry::test_container() -> void {
  using ::sys::directory::Type;
  std::multimap<std::string, ::sys::directory::Entry> setee;
  using vt = std::multimap<std::string, ::sys::directory::Entry>::value_type; 
  setee.insert(vt("apple", sys::directory::Entry(99, 88, Type::LNK, "apple")));
  setee.insert(vt("banana", sys::directory::Entry(98, 87, Type::LNK, "banana")));
  setee.insert(vt("cherry", sys::directory::Entry(97, 86, Type::LNK, "cherry")));
  setee.insert(vt("dog", sys::directory::Entry(96, 85, Type::LNK, "dog")));
  CPPUNIT_ASSERT(4 == setee.size());
}

#import rigging.suite.io
auto tests::unit::directory::Entry::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("entry");
  series << call("constructor1", &Entry::test_constructor_default)
         << call("constructor2", &Entry::test_constructor_ino_off_type_stringz)
         << call("constructor3", &Entry::test_constructor_ino_off_type_string_copy)
         << call("constructor4", &Entry::test_constructor_ino_off_type_string_move)
         << call("constructor5", &Entry::test_constructor_entry)
         << call("destructor", &Entry::test_destructor)
         << call("ino", &Entry::test_ino)
         << call("off", &Entry::test_off)
         << call("name", &Entry::test_name)
         << call("container", &Entry::test_container)
    ;
  return finalize(series);
}
#divert </cpp>

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::sys { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::sys::Fixture : public cppunit::test::Fixture { 
public: 
  Fixture() = default;
  // no setup or teardown
  auto test_anything_at_all() -> void;
  auto test_detail_flagof_good() -> void;  
  auto test_detail_flagof_fail() -> void;  
  auto test_detail_is_flag() -> void;  
  static auto suite() -> cppunit::Test *;
protected:
  enum class Bit { ZERO, ONE, TWO, THREE };
  enum class Mask { ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT };
};
#endiv
#divert <cpp>
auto tests::unit::sys::Fixture::test_anything_at_all() -> void {
  CPPUNIT_ASSERT(true);
}
#import sys.flags.is_flag
auto tests::unit::sys::Fixture::test_detail_is_flag() -> void {
  using ::sys::flags::is_flag;
  CPPUNIT_ASSERT(!is_flag<Bit>(Mask::ZERO, 0, 16));
  CPPUNIT_ASSERT(is_flag<Bit>(Mask::ONE, 0, 8));
  CPPUNIT_ASSERT(is_flag<Bit>(Mask::TWO, 0, 32));
  CPPUNIT_ASSERT(!is_flag<Bit>(Mask::THREE, 0, 64));
}
#import sys.flags.flagof
auto tests::unit::sys::Fixture::test_detail_flagof_good() -> void {
  using ::sys::flags::flagof;
  // There is a bit right there
  CPPUNIT_ASSERT(Bit::ZERO == (flagof<Bit,Mask>(Mask::ONE, 0, 8)));
}
#import cppunit.Exception
#import std.exception
auto tests::unit::sys::Fixture::test_detail_flagof_fail() -> void try {
  using ::sys::flags::flagof;
  // There are no bits enabled in positions two through four
  CPPUNIT_ASSERT(Bit::ZERO == (flagof<Bit,Mask>(Mask::ONE, 2, 4)));
} catch (cppunit::Exception const &) {
  throw;
} catch (std::exception const &) {
  CPPUNIT_ASSERT(true);
}
#import rigging.suite.io
auto tests::unit::sys::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  using ::rigging::suite::call; // because namespace tests::unit::call occludes
  Stream series{"sys"};
  series << call("anything", &Fixture::test_anything_at_all)
         << []() {
              Stream det{"detail"};
              det << []() {
                       Stream gov{"flagof"};
                       gov << call("good", &Fixture::test_detail_flagof_good)
                           << call("fail", &Fixture::test_detail_flagof_fail)
                         ;
                       return move(gov);
                     }()
                  << call("is_flag", &Fixture::test_detail_is_flag)
                ;
              return move(det);
            }()
    ;
  return finalize(series);
}
#endiv

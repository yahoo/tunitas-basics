// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace error {
      namespace E {
        class Code;
      }
    }
  }
}
#divert </fpp>
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import tests.unit.error.Palette
class tests::unit::error::E::Code : public cppunit::test::Fixture, Palette {
public:
  // Unify the MI
  auto setUp() -> void override final;
  auto tearDown() -> void override final;

  auto test_construction() -> void;
  auto test_universe() -> void;
  auto test_ok() -> void;
  auto test_failure() -> void;
  auto test_operator_eq() -> void;
  auto test_operator_ne() -> void;
  auto test_operator_insert() -> void;
  auto test_make_error_code() -> void;

  static auto suite() -> cppunit::Test *;
};
#divert </hpp>
#divert <cpp>
auto tests::unit::error::E::Code::setUp() -> void {
  Palette::setUp();
}

auto tests::unit::error::E::Code::tearDown() -> void {
  Palette::tearDown();
}
#import sys.error.e.Code // deprecating ... use sys.e.Code for new work
#import sys.error.E.constants // deprecating ... use sys.e.constants or sys.posix.E for new work
auto tests::unit::error::E::Code::test_construction() -> void {
  ::sys::error::e::Code d = ::sys::error::e::Code();
  CPPUNIT_ASSERT(::sys::error::E::SUCCESS == d);
}
#import sys.error.E.constants // deprecating ... use sys.e.constants for new work or else sys.posix.E
auto tests::unit::error::E::Code::test_universe() -> void {
  // utter the all
  ::sys::error::e::Code v;
  v = ::sys::error::E::SUCCESS;
  v = ::sys::error::E::PERM;
  v = ::sys::error::E::NOENT;
  v = ::sys::error::E::SRCH;
  v = ::sys::error::E::INTR;
  v = ::sys::error::E::IO;
  v = ::sys::error::E::NXIO;
  v = ::sys::error::E::TOOBIG;
  v = ::sys::error::E::NOEXEC;
  v = ::sys::error::E::BADF;
  v = ::sys::error::E::CHILD;
  v = ::sys::error::E::AGAIN;
  v = ::sys::error::E::NOMEM;
  v = ::sys::error::E::ACCES;
  v = ::sys::error::E::FAULT;
  v = ::sys::error::E::NOTBLK;
  v = ::sys::error::E::BUSY;
  v = ::sys::error::E::EXIST;
  v = ::sys::error::E::XDEV;
  v = ::sys::error::E::NODEV;
  v = ::sys::error::E::NOTDIR;
  v = ::sys::error::E::ISDIR;
  v = ::sys::error::E::INVAL;
  v = ::sys::error::E::NFILE;
  v = ::sys::error::E::MFILE;
  v = ::sys::error::E::NOTTY;
  v = ::sys::error::E::TXTBSY;
  v = ::sys::error::E::FBIG;
  v = ::sys::error::E::NOSPC;
  v = ::sys::error::E::SPIPE;
  v = ::sys::error::E::ROFS;
  v = ::sys::error::E::MLINK;
  v = ::sys::error::E::PIPE;
  v = ::sys::error::E::DOM;
  v = ::sys::error::E::RANGE;
  CPPUNIT_ASSERT(::sys::error::E::RANGE == v);
}

auto tests::unit::error::E::Code::test_ok() -> void {
  CPPUNIT_ASSERT(ok(::sys::error::E::SUCCESS));
  CPPUNIT_ASSERT(!ok(::sys::error::E::PERM));
  CPPUNIT_ASSERT(!ok(::sys::error::E::NOENT));
  CPPUNIT_ASSERT(!ok(::sys::error::E::SRCH));
  CPPUNIT_ASSERT(!ok(::sys::error::E::INTR));
  CPPUNIT_ASSERT(!ok(::sys::error::E::IO));
  CPPUNIT_ASSERT(!ok(::sys::error::E::NXIO));
  CPPUNIT_ASSERT(!ok(::sys::error::E::TOOBIG));
  CPPUNIT_ASSERT(!ok(::sys::error::E::NOEXEC));
  CPPUNIT_ASSERT(!ok(::sys::error::E::BADF));
  CPPUNIT_ASSERT(!ok(::sys::error::E::CHILD));
  CPPUNIT_ASSERT(!ok(::sys::error::E::AGAIN));
  CPPUNIT_ASSERT(!ok(::sys::error::E::NOMEM));
  CPPUNIT_ASSERT(!ok(::sys::error::E::ACCES));
  CPPUNIT_ASSERT(!ok(::sys::error::E::FAULT));
  CPPUNIT_ASSERT(!ok(::sys::error::E::NOTBLK));
  CPPUNIT_ASSERT(!ok(::sys::error::E::BUSY));
  CPPUNIT_ASSERT(!ok(::sys::error::E::EXIST));
  CPPUNIT_ASSERT(!ok(::sys::error::E::XDEV));
  CPPUNIT_ASSERT(!ok(::sys::error::E::NODEV));
  CPPUNIT_ASSERT(!ok(::sys::error::E::NOTDIR));
  CPPUNIT_ASSERT(!ok(::sys::error::E::ISDIR));
  CPPUNIT_ASSERT(!ok(::sys::error::E::INVAL));
  CPPUNIT_ASSERT(!ok(::sys::error::E::NFILE));
  CPPUNIT_ASSERT(!ok(::sys::error::E::MFILE));
  CPPUNIT_ASSERT(!ok(::sys::error::E::NOTTY));
  CPPUNIT_ASSERT(!ok(::sys::error::E::TXTBSY));
  CPPUNIT_ASSERT(!ok(::sys::error::E::FBIG));
  CPPUNIT_ASSERT(!ok(::sys::error::E::NOSPC));
  CPPUNIT_ASSERT(!ok(::sys::error::E::SPIPE));
  CPPUNIT_ASSERT(!ok(::sys::error::E::ROFS));
  CPPUNIT_ASSERT(!ok(::sys::error::E::MLINK));
  CPPUNIT_ASSERT(!ok(::sys::error::E::PIPE));
  CPPUNIT_ASSERT(!ok(::sys::error::E::DOM));
  CPPUNIT_ASSERT(!ok(::sys::error::E::RANGE));
}

auto tests::unit::error::E::Code::test_failure() -> void {
  CPPUNIT_ASSERT(!failure(::sys::error::E::SUCCESS));
  CPPUNIT_ASSERT(failure(::sys::error::E::PERM));
  CPPUNIT_ASSERT(failure(::sys::error::E::NOENT));
  CPPUNIT_ASSERT(failure(::sys::error::E::SRCH));
  CPPUNIT_ASSERT(failure(::sys::error::E::INTR));
  CPPUNIT_ASSERT(failure(::sys::error::E::IO));
  CPPUNIT_ASSERT(failure(::sys::error::E::NXIO));
  CPPUNIT_ASSERT(failure(::sys::error::E::TOOBIG));
  CPPUNIT_ASSERT(failure(::sys::error::E::NOEXEC));
  CPPUNIT_ASSERT(failure(::sys::error::E::BADF));
  CPPUNIT_ASSERT(failure(::sys::error::E::CHILD));
  CPPUNIT_ASSERT(failure(::sys::error::E::AGAIN));
  CPPUNIT_ASSERT(failure(::sys::error::E::NOMEM));
  CPPUNIT_ASSERT(failure(::sys::error::E::ACCES));
  CPPUNIT_ASSERT(failure(::sys::error::E::FAULT));
  CPPUNIT_ASSERT(failure(::sys::error::E::NOTBLK));
  CPPUNIT_ASSERT(failure(::sys::error::E::BUSY));
  CPPUNIT_ASSERT(failure(::sys::error::E::EXIST));
  CPPUNIT_ASSERT(failure(::sys::error::E::XDEV));
  CPPUNIT_ASSERT(failure(::sys::error::E::NODEV));
  CPPUNIT_ASSERT(failure(::sys::error::E::NOTDIR));
  CPPUNIT_ASSERT(failure(::sys::error::E::ISDIR));
  CPPUNIT_ASSERT(failure(::sys::error::E::INVAL));
  CPPUNIT_ASSERT(failure(::sys::error::E::NFILE));
  CPPUNIT_ASSERT(failure(::sys::error::E::MFILE));
  CPPUNIT_ASSERT(failure(::sys::error::E::NOTTY));
  CPPUNIT_ASSERT(failure(::sys::error::E::TXTBSY));
  CPPUNIT_ASSERT(failure(::sys::error::E::FBIG));
  CPPUNIT_ASSERT(failure(::sys::error::E::NOSPC));
  CPPUNIT_ASSERT(failure(::sys::error::E::SPIPE));
  CPPUNIT_ASSERT(failure(::sys::error::E::ROFS));
  CPPUNIT_ASSERT(failure(::sys::error::E::MLINK));
  CPPUNIT_ASSERT(failure(::sys::error::E::PIPE));
  CPPUNIT_ASSERT(failure(::sys::error::E::DOM));
}

auto tests::unit::error::E::Code::test_operator_eq() -> void {
  CPPUNIT_ASSERT(::sys::error::E::SUCCESS == ::sys::error::E::SUCCESS);
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS == ::sys::error::E::PERM)  );
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS == ::sys::error::E::NOENT)  );
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS == ::sys::error::E::SRCH)  );
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS == ::sys::error::E::INTR)  );
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS == ::sys::error::E::IO)  );
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS == ::sys::error::E::NXIO)  );
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS == ::sys::error::E::TOOBIG)  );
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS == ::sys::error::E::NOEXEC)  );
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS == ::sys::error::E::BADF)  );
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS == ::sys::error::E::CHILD)  );
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS == ::sys::error::E::AGAIN)  );
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS == ::sys::error::E::NOMEM)  );
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS == ::sys::error::E::ACCES)  );
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS == ::sys::error::E::FAULT)  );
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS == ::sys::error::E::NOTBLK)  );
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS == ::sys::error::E::BUSY)  );
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS == ::sys::error::E::EXIST)  );
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS == ::sys::error::E::XDEV)  );
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS == ::sys::error::E::NODEV)  );
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS == ::sys::error::E::NOTDIR)  );
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS == ::sys::error::E::ISDIR)  );
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS == ::sys::error::E::INVAL)  );
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS == ::sys::error::E::NFILE)  );
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS == ::sys::error::E::MFILE)  );
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS == ::sys::error::E::NOTTY)  );
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS == ::sys::error::E::TXTBSY)  );
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS == ::sys::error::E::FBIG)  );
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS == ::sys::error::E::NOSPC)  );
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS == ::sys::error::E::SPIPE)  );
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS == ::sys::error::E::ROFS)  );
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS == ::sys::error::E::MLINK)  );
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS == ::sys::error::E::PIPE)  );
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS == ::sys::error::E::DOM)  );
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS == ::sys::error:: E::RANGE)  );
}

auto tests::unit::error::E::Code::test_operator_ne() -> void {
  CPPUNIT_ASSERT( !  (::sys::error::E::SUCCESS != ::sys::error::E::SUCCESS)  );
  CPPUNIT_ASSERT(    (::sys::error::E::SUCCESS != ::sys::error::E::PERM)  );
  CPPUNIT_ASSERT(    (::sys::error::E::SUCCESS != ::sys::error::E::NOENT)  );
  CPPUNIT_ASSERT(    (::sys::error::E::SUCCESS != ::sys::error::E::SRCH)  );
  CPPUNIT_ASSERT(    (::sys::error::E::SUCCESS != ::sys::error::E::INTR)  );
  CPPUNIT_ASSERT(    (::sys::error::E::SUCCESS != ::sys::error::E::IO)  );
  CPPUNIT_ASSERT(    (::sys::error::E::SUCCESS != ::sys::error::E::NXIO)  );
  CPPUNIT_ASSERT(    (::sys::error::E::SUCCESS != ::sys::error::E::TOOBIG)  );
  CPPUNIT_ASSERT(    (::sys::error::E::SUCCESS != ::sys::error::E::NOEXEC)  );
  CPPUNIT_ASSERT(    (::sys::error::E::SUCCESS != ::sys::error::E::BADF)  );
  CPPUNIT_ASSERT(    (::sys::error::E::SUCCESS != ::sys::error::E::CHILD)  );
  CPPUNIT_ASSERT(    (::sys::error::E::SUCCESS != ::sys::error::E::AGAIN)  );
  CPPUNIT_ASSERT(    (::sys::error::E::SUCCESS != ::sys::error::E::NOMEM)  );
  CPPUNIT_ASSERT(    (::sys::error::E::SUCCESS != ::sys::error::E::ACCES)  );
  CPPUNIT_ASSERT(    (::sys::error::E::SUCCESS != ::sys::error::E::FAULT)  );
  CPPUNIT_ASSERT(    (::sys::error::E::SUCCESS != ::sys::error::E::NOTBLK)  );
  CPPUNIT_ASSERT(    (::sys::error::E::SUCCESS != ::sys::error::E::BUSY)  );
  CPPUNIT_ASSERT(    (::sys::error::E::SUCCESS != ::sys::error::E::EXIST)  );
  CPPUNIT_ASSERT(    (::sys::error::E::SUCCESS != ::sys::error::E::XDEV)  );
  CPPUNIT_ASSERT(    (::sys::error::E::SUCCESS != ::sys::error::E::NODEV)  );
  CPPUNIT_ASSERT(    (::sys::error::E::SUCCESS != ::sys::error::E::NOTDIR)  );
  CPPUNIT_ASSERT(    (::sys::error::E::SUCCESS != ::sys::error::E::ISDIR)  );
  CPPUNIT_ASSERT(    (::sys::error::E::SUCCESS != ::sys::error::E::INVAL)  );
  CPPUNIT_ASSERT(    (::sys::error::E::SUCCESS != ::sys::error::E::NFILE)  );
  CPPUNIT_ASSERT(    (::sys::error::E::SUCCESS != ::sys::error::E::MFILE)  );
  CPPUNIT_ASSERT(    (::sys::error::E::SUCCESS != ::sys::error::E::NOTTY)  );
  CPPUNIT_ASSERT(    (::sys::error::E::SUCCESS != ::sys::error::E::TXTBSY)  );
  CPPUNIT_ASSERT(    (::sys::error::E::SUCCESS != ::sys::error::E::FBIG)  );
  CPPUNIT_ASSERT(    (::sys::error::E::SUCCESS != ::sys::error::E::NOSPC)  );
  CPPUNIT_ASSERT(    (::sys::error::E::SUCCESS != ::sys::error::E::SPIPE)  );
  CPPUNIT_ASSERT(    (::sys::error::E::SUCCESS != ::sys::error::E::ROFS)  );
  CPPUNIT_ASSERT(    (::sys::error::E::SUCCESS != ::sys::error::E::MLINK)  );
  CPPUNIT_ASSERT(    (::sys::error::E::SUCCESS != ::sys::error::E::PIPE)  );
  CPPUNIT_ASSERT(    (::sys::error::E::SUCCESS != ::sys::error::E::DOM)  );
  CPPUNIT_ASSERT(    (::sys::error::E::SUCCESS != ::sys::error::E::RANGE)  );
}

auto tests::unit::error::E::Code::test_operator_insert() -> void {
  // exhibit them
  std::cout
    << ::sys::error::E::SUCCESS << '\n'
    << ::sys::error::E::PERM << '\n'
    << ::sys::error::E::NOENT << '\n'
    << ::sys::error::E::SRCH << '\n'
    << ::sys::error::E::INTR << '\n'
    << ::sys::error::E::IO << '\n'
    << ::sys::error::E::NXIO << '\n'
    << ::sys::error::E::TOOBIG << '\n'
    << ::sys::error::E::NOEXEC << '\n'
    << ::sys::error::E::BADF << '\n'
    << ::sys::error::E::CHILD << '\n'
    << ::sys::error::E::AGAIN << '\n'
    << ::sys::error::E::NOMEM << '\n'
    << ::sys::error::E::ACCES << '\n'
    << ::sys::error::E::FAULT << '\n'
    << ::sys::error::E::NOTBLK << '\n'
    << ::sys::error::E::BUSY << '\n'
    << ::sys::error::E::EXIST << '\n'
    << ::sys::error::E::XDEV << '\n'
    << ::sys::error::E::NODEV << '\n'
    << ::sys::error::E::NOTDIR << '\n'
    << ::sys::error::E::ISDIR << '\n'
    << ::sys::error::E::INVAL << '\n'
    << ::sys::error::E::NFILE << '\n'
    << ::sys::error::E::MFILE << '\n'
    << ::sys::error::E::NOTTY << '\n'
    << ::sys::error::E::TXTBSY << '\n'
    << ::sys::error::E::FBIG << '\n'
    << ::sys::error::E::NOSPC << '\n'
    << ::sys::error::E::SPIPE << '\n'
    << ::sys::error::E::ROFS << '\n'
    << ::sys::error::E::MLINK << '\n'
    << ::sys::error::E::PIPE << '\n'
    << ::sys::error::E::DOM << '\n'
    << ::sys::error::E::RANGE << '\n';
}

auto tests::unit::error::E::Code::test_make_error_code() -> void {
  // exhibit them
  std::cout
    << make_error_code(::sys::error::E::SUCCESS).message() << '\n'
    << make_error_code(::sys::error::E::PERM).message() << '\n'
    << make_error_code(::sys::error::E::NOENT).message() << '\n'
    << make_error_code(::sys::error::E::SRCH).message() << '\n'
    << make_error_code(::sys::error::E::INTR).message() << '\n'
    << make_error_code(::sys::error::E::IO).message() << '\n'
    << make_error_code(::sys::error::E::NXIO).message() << '\n'
    << make_error_code(::sys::error::E::TOOBIG).message() << '\n'
    << make_error_code(::sys::error::E::NOEXEC).message() << '\n'
    << make_error_code(::sys::error::E::BADF).message() << '\n'
    << make_error_code(::sys::error::E::CHILD).message() << '\n'
    << make_error_code(::sys::error::E::AGAIN).message() << '\n'
    << make_error_code(::sys::error::E::NOMEM).message() << '\n'
    << make_error_code(::sys::error::E::ACCES).message() << '\n'
    << make_error_code(::sys::error::E::FAULT).message() << '\n'
    << make_error_code(::sys::error::E::NOTBLK).message() << '\n'
    << make_error_code(::sys::error::E::BUSY).message() << '\n'
    << make_error_code(::sys::error::E::EXIST).message() << '\n'
    << make_error_code(::sys::error::E::XDEV).message() << '\n'
    << make_error_code(::sys::error::E::NODEV).message() << '\n'
    << make_error_code(::sys::error::E::NOTDIR).message() << '\n'
    << make_error_code(::sys::error::E::ISDIR).message() << '\n'
    << make_error_code(::sys::error::E::INVAL).message() << '\n'
    << make_error_code(::sys::error::E::NFILE).message() << '\n'
    << make_error_code(::sys::error::E::MFILE).message() << '\n'
    << make_error_code(::sys::error::E::NOTTY).message() << '\n'
    << make_error_code(::sys::error::E::TXTBSY).message() << '\n'
    << make_error_code(::sys::error::E::FBIG).message() << '\n'
    << make_error_code(::sys::error::E::NOSPC).message() << '\n'
    << make_error_code(::sys::error::E::SPIPE).message() << '\n'
    << make_error_code(::sys::error::E::ROFS).message() << '\n'
    << make_error_code(::sys::error::E::MLINK).message() << '\n'
    << make_error_code(::sys::error::E::PIPE).message() << '\n'
    << make_error_code(::sys::error::E::DOM).message() << '\n'
    << make_error_code(::sys::error::E::RANGE).message() << '\n';
}

#import rigging.suite.io
auto tests::unit::error::E::Code::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("E::Code");
  series << call("construction", &Code::test_construction)
         << call("universe", &Code::test_universe)
         << call("ok", &Code::test_ok)
         << call("failure", &Code::test_failure)
         << call("operator==", &Code::test_operator_eq)
         << call("operator!=", &Code::test_operator_ne)
         << call("operator<<", &Code::test_operator_insert)
         << call("make_error_code", &Code::test_make_error_code)
    ;
  return finalize(series);
}
#divert </cpp>

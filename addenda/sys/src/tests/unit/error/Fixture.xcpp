// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace error {
      class Fixture;
    }
  }
}
#divert </fpp>
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import tests.unit.error.Palette
class tests::unit::error::Fixture : public cppunit::test::Fixture, Palette {
public:
  // unify the MI
  auto setUp() -> void;
  auto tearDown() -> void;

  auto test_code_0arg() -> void;
  auto test_code_1arg() -> void;
  auto test_Code() -> void;
  auto test_operator_insert_Code() -> void;
  auto test_E_Code() -> void;
  auto test_operator_insert_E_Code() -> void;

  static auto suite() -> cppunit::Test *;
};
#divert </hpp>
#divert <cpp>
#import sys.error.Code
#import sys.error.E.Code
#import sys.error.E.constants

auto tests::unit::error::Fixture::setUp() -> void {
  Palette::setUp();
}

auto tests::unit::error::Fixture::tearDown() -> void {
  Palette::tearDown();
}

#include <cerrno>
auto tests::unit::error::Fixture::test_code_0arg() -> void {
  errno = E2BIG;
  ::sys::error::Code c = ::sys::error::code();
  CPPUNIT_ASSERT(::sys::error::Code(::sys::error::E::TOOBIG) == c);
}

#include <cerrno>
auto tests::unit::error::Fixture::test_code_1arg() -> void {
  ::sys::error::Code c = ::sys::error::code(EPERM);
  CPPUNIT_ASSERT(::sys::error::Code(::sys::error::E::PERM) == c);
}

auto tests::unit::error::Fixture::test_Code() -> void {
  ::sys::error::Code d;
  ::sys::error::Code s = ::sys::error::E::SUCCESS;
  CPPUNIT_ASSERT(d == s);
}

auto tests::unit::error::Fixture::test_operator_insert_Code() -> void {
  // Basically this shows that the library doesn't crash when presented with these codes.
  // We aren't checking tha tthe answers returned are reasonable.
  for (auto c : some_code_series) {
    ::sys::error::Code cooked_c(c);
    std::cout << cooked_c << '\n';
  }
  CPPUNIT_ASSERT(true);
}
#import sys.error.e.Code // deprecating ... just use sys.e.Code in new work
auto tests::unit::error::Fixture::test_E_Code() -> void {
  ::sys::error::e::Code d = ::sys::error::e::Code(0);
  ::sys::error::e::Code s = ::sys::error::E::SUCCESS;
  CPPUNIT_ASSERT(d == s);
}

auto tests::unit::error::Fixture::test_operator_insert_E_Code() -> void {
  // Basically this shows that the library doesn't crash when presented with these codes.
  // We aren't checking tha tthe answers returned are reasonable.
  for (auto pure_c : some_code_series) {
    std::cout << pure_c << '\n';
  }
  CPPUNIT_ASSERT(true);
}

#import tests.unit.error.Code
#import tests.unit.error.E.Code
#import rigging.suite.io
auto tests::unit::error::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("error");
  series << call("err()", &Fixture::test_code_0arg)
         << call("err(int)", &Fixture::test_code_1arg)
         << call("code", &Fixture::test_Code)
         << call("operator<< Code", &Fixture::test_operator_insert_Code)
         << call("E::Code", &Fixture::test_E_Code)
         << call("opeator<< E::Code", &Fixture::test_operator_insert_E_Code)
         << add<Code>()
         << add<E::Code>()
    ;
  return finalize(series);
}
#divert </cpp>

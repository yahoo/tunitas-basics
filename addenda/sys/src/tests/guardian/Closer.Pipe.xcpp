// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import tests.guardian.Closer.declaration
#import sys.call.result.Pipe
namespace tests::guardian {
  //
  // Close two descriptors as from the pipe system call.
  // Suitable for testing only ...
  // because it is opaque.
  // because it accepts the sycall result directly
  //
  // Usage:
  //
  //   auto fd1 = ...somehow...;
  //   auto fd2 = ...somehow...;
  //   guardian::Closer<Pipe> close{fd1, fd2)
  //    ...and the fds are closed upon destruction.
  //
  //   guardian::Closer<Pipe> close{socketpair(AF::UNIX, SOCK::DGRAM, PF::UNIX)};
  //   ... and the socket, if it was created will be closed on exit from the scope.
  //
  namespace closer {
    using Pipe = ::sys::call::result::pipe::Value<int>;
  }
  template<> class Closer<closer::Pipe>;
}
#endiv
#divert <hpp>
#import sys.fd.Managed
#import std.pair
#import std.is_same
namespace tests::guardian {
  template<> class Closer<closer::Pipe> : private std::pair<fd::Managed, fd::Managed> {
    using Ancestor = std::pair<fd::Managed, fd::Managed>;
  public:
    Closer() = default;
    using Ancestor::pair;
    using Result = closer::Pipe;
    explicit Closer(Result);
    static_assert(std::is_same_v<Result, ::sys::call::result::pipe::Value<int>>);
  };
}
#endiv
#divert <cpp>
namespace tests::guardian {
  Closer<closer::Pipe>::Closer(Result result)
    : Ancestor{ok(result) ? read_side(result) : -1,
               ok(result) ? write_side(result) : -1}
  { }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import tests.guardian.Cleanup_Descriptor.declaration
namespace tests::guardian {
  //
  // Cleanup an open file descriptor.
  //
  // Usage:
  //
  //     int fd = open(...filename..., O::RDONLY);
  //     guardian::Cleanup_Descriptor<int> cleanup{fd};
  //
  template<> struct Cleanup_Descriptor<int>;
}
#endiv
#divert <hpp>
namespace tests::guardian {
  template<> struct Cleanup_Descriptor<int> {
    using Managed = int; 
    inline explicit Cleanup_Descriptor(Managed &);
    inline ~Cleanup_Descriptor();
    Cleanup_Descriptor(Cleanup_Descriptor const &) = delete;
    auto operator=(Cleanup_Descriptor const &) -> Cleanup_Descriptor & = delete;
  protected:
    Managed &fd;
  };
}
#endiv
#divert <ipp>
#import std.cerr
#import std.swap
#import sys.posix.close
namespace tests::guardian {
  Cleanup_Descriptor<int>::Cleanup_Descriptor(Managed &fd)
    : fd(fd) {
    std::cerr << "DEBUG: holding file descriptor " << fd << '\n';
  }
  Cleanup_Descriptor<int>::~Cleanup_Descriptor() {
    if (fd >= 0) {
      std::cerr << "DEBUG: closing file descriptor " << fd << '\n';
      auto tmp = Managed{-1};
      std::swap(tmp, fd);
      (void) six::native::close(tmp); // <---------- only this is different (unique to the specialization)
    }
  }
}
#endiv

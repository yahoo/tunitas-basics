// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.required.Descriptor
#import sys.call.result.Value
#import sys.call.result.Pipe
#import sys.call.result.Element
#include <hpp/sys.call.result.Element>
#import sys.fd.Descriptor
#import std.is_same
namespace tests::guardian::required::closer {
  //
  // For the Closer family of guardians,
  // the Result, used as the conversion argument of the constructor
  // is a managed or unmanaged file descriptor.
  //
  // Usage:
  //
  //   template<required::closer::Result RESULT> Closer::Closer(RESULT) ... or ...
  //
#if 0
  namespace result {
    template<typename TYPE> concept bool Managed = std::is_same_v<TYPE, fd::Descriptor>;
    template<typename TYPE> concept bool Unmanaged = Descriptor<TYPE>;
    template<typename TYPE> concept bool Result = Managed<TYPE> || Unmanaged<TYPE>;
  }
#else
  namespace result {
    // See the test cases in <cpp>
    namespace pair {
      using namespace ::sys::call::result::pipe;
      // [[FIXTHIS]] there should be a simpler way to do this
      template<typename RESULT> concept bool Pair = std::is_same_v<RESULT, Value<int>> || std::is_same_v<RESULT, Value<sys::id::File>>;
    }
    namespace single {
      using namespace ::sys::call::result;
      template<typename RESULT> concept bool Single = requires(RESULT) {
        requires sys::fd::required::Descriptor<typename Element<0, RESULT>::type>;
        requires std::is_same_v<RESULT, Value<typename Element<0, RESULT>::type>>;
      };
    }
    template<typename RESULT> concept bool Result = pair::Pair<RESULT> || single::Single<RESULT>;
  }
#endif
  using result::Result;
}
#endiv
#divert <cpp>
namespace {
  namespace tests {
    using namespace ::tests::guardian::required;
    static_assert(closer::Result<sys::call::Result>);
    static_assert(closer::Result<sys::call::result::Value<int>>);
    static_assert(closer::Result<sys::call::result::Value<sys::id::File>>);
    static_assert(closer::Result<sys::call::result::pipe::Value<int>>);
    static_assert(closer::Result<sys::call::result::pipe::Value<sys::id::File>>);
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import tests.guardian.Closer.declaration
#import sys.call.result.Value
namespace tests::guardian {
  //
  // A file descriptor closer.
  // Suitable for testing only ...
  // because it is opaque.
  // because it accepts the sycall result directly
  //
  // Usage:
  //
  //   auto fd = open(...somehow...)
  //   guardian::Closer<Native> close{fd};
  //
  //   guardian::Closer<Native> close{socket(AF::INET4, SOCK::STREAM)};
  //   ... and the socket, if it was created will be closed on exit from the scope.
  //
  namespace closer {
    using Native = ::sys::call::result::Value<int>;
  }
  template<> struct Closer<closer::Native>;
}
#endiv
#divert <hpp>
#import sys.fd.Managed
#import std.is_same
namespace tests::guardian {
  template<> class Closer<closer::Native> : private ::sys::fd::Managed {
    using Ancestor = ::sys::fd::Managed;
  public:
    Closer() = default;
    using Ancestor::Managed;
    using Result = closer::Native;
    explicit Closer(Result);
    static_assert(std::is_same_v<Result, ::sys::call::result::Value<int>>);
  };
}
#endiv
#divert <cpp>
namespace tests::guardian {
  Closer<closer::Native>::Closer(Result result)
    : Ancestor{ok(result) ? value(result) : -1}
  { }
}
#endiv

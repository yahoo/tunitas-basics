// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#divert <cpp>
#import c.const_argv
#import std.stoi
#import sys.call.Result
#import sys.posix.access
#import sys.posix.OK
#import tests.binutils.Main
#import tests.binutils.exception.Argument_Access
#import tests.binutils.exception.Argument_Count
auto main(int c, char *v[]) -> int {
  tests::binutils::Main<sys::call::Result> remain("access", [](c::const_argv av) {
      using namespace sys::posix;
      using namespace tests::binutils::exception;
      auto const mode = [av]() {
        using sys::posix::OK;
        if (false) {
        } else if (2 == av.size()) {
          return OK::EXISTS;
        } else if (3 == av.size()) {
          std::string const modeword = av[2];
          std::size_t end(0);
          auto const candidate = std::stoi(modeword, &end);
          if (candidate < 0 && 7 < candidate) {
            throw Argument_Access(modeword);
          }
          if (modeword.size() != end) {
            throw Argument_Access(modeword);
          }
          return OK::Mode(candidate);
        }
        throw Argument_Count();
      };
      if (av.size() < 2) {
        throw Argument_Count();
      }
      return access(av[1], mode());
    });
  return remain(c::const_argv(c, v));
}
#endiv

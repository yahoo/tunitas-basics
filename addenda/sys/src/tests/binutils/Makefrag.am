# This is a GNU -*- Makefile -*- fragment that is included by Automake
# For terms and provenance see the LICENSE file at the top of this repository.

binutilsdir = libexec/binutils
binutilsdir_LDADD_SET = $(check_lib_libtests_binutils_la)
binutilsdir_LDFLAGS_SET = \
  $(minuslsys_directory_module) \
  $(minuslsys_posix_module) \
  $(minuslsys_time_module) \
  $(minuslsys_module) \
  $(CHECK_LDFLAGS_SET) $(comment whereas this is a tester, use CHECK not PACKAGE_LDFLAGS_SET) \
  $(end)

check_lib_libtests_binutils_la = check/lib/libtests-binutils.la
check_lib_libtests_binutils_la_LIBADD = -lnonstd-module
check_lib_libtests_binutils_la_MODULES = $(call HT_SOURCEStoMODULES,$(check_lib_libtests_binutils_la_SOURCES))
check_lib_libtests_binutils_la_SOURCES = \
  $(check_lib_libtests_binutils_la_REAL_SOURCES_SET) \
  $(check_lib_libtests_binutils_la_FAKE_SOURCES_SET) \
  $(end)
check_lib_libtests_binutils_la_REAL_SOURCES_SET = \
  obj/src/tests/binutils/Main.cpp \
  obj/src/tests/binutils/Main.bool.cpp \
  obj/src/tests/binutils/Main.call.result.Value.int.cpp \
  obj/src/tests/binutils/Main.call.result.Value.string.cpp \
  obj/src/tests/binutils/Main.exits.Code.cpp \
  obj/src/tests/binutils/exception.Generic.cpp \
  obj/src/tests/binutils/exception.Argument_Count.cpp \
  obj/src/tests/binutils/exception.Argument_Access.cpp \
  obj/src/tests/binutils/exception.Argument_Permissions.cpp \
  obj/src/tests/binutils/parse.cpp \
  obj/src/tests/binutils/parse.Access.cpp \
  obj/src/tests/binutils/parse.Mode.cpp \
  obj/src/tests/binutils/required.Syscall_Result.cpp \
  $(end)
check_lib_libtests_binutils_la_FAKE_SOURCES_SET = \
  obj/src/tests/binutils/namespace.cpp \
  $(end)

libexec_posix_access = libexec/posix/access
libexec_posix_access_LDADD = $(binutilsdir_LDADD_SET)
libexec_posix_access_LDFLAGS = $(binutilsdir_LDFLAGS_SET)
libexec_posix_access_SOURCES = obj/src/tests/binutils/access.cpp

libexec_posix_chmod = libexec/posix/chmod
libexec_posix_chmod_LDADD = $(binutilsdir_LDADD_SET)
libexec_posix_chmod_LDFLAGS = $(binutilsdir_LDFLAGS_SET)
libexec_posix_chmod_SOURCES = obj/src/tests/binutils/chmod.cpp

libexec_posix_executable = libexec/posix/executable
libexec_posix_executable_LDADD = $(binutilsdir_LDADD_SET)
libexec_posix_executable_LDFLAGS = $(binutilsdir_LDFLAGS_SET)
libexec_posix_executable_SOURCES = obj/src/tests/binutils/executable.cpp

libexec_posix_exists = libexec/posix/exists
libexec_posix_exists_LDADD = $(binutilsdir_LDADD_SET)
libexec_posix_exists_LDFLAGS = $(binutilsdir_LDFLAGS_SET)
libexec_posix_exists_SOURCES = obj/src/tests/binutils/exists.cpp

libexec_posix_mkdir = libexec/posix/mkdir
libexec_posix_mkdir_LDADD = $(binutilsdir_LDADD_SET)
libexec_posix_mkdir_LDFLAGS = $(binutilsdir_LDFLAGS_SET)
libexec_posix_mkdir_SOURCES = obj/src/tests/binutils/mkdir.cpp

libexec_posix_realpath = libexec/posix/realpath
libexec_posix_realpath_LDADD = $(binutilsdir_LDADD_SET)
libexec_posix_realpath_LDFLAGS = $(binutilsdir_LDFLAGS_SET)
libexec_posix_realpath_SOURCES = obj/src/tests/binutils/realpath.cpp

libexec_posix_readable = libexec/posix/readable
libexec_posix_readable_LDADD = $(binutilsdir_LDADD_SET)
libexec_posix_readable_LDFLAGS = $(binutilsdir_LDFLAGS_SET)
libexec_posix_readable_SOURCES = obj/src/tests/binutils/readable.cpp

libexec_posix_writable = libexec/posix/writable
libexec_posix_writable_LDADD = $(binutilsdir_LDADD_SET)
libexec_posix_writable_LDFLAGS = $(binutilsdir_LDFLAGS_SET)
libexec_posix_writable_SOURCES = obj/src/tests/binutils/writable.cpp

src_tests_binutils_REAL_SOURCES_SET = \
  $(check_lib_libtests_binutils_la_REAL_SOURCES_SET) \
  $(libexec_posix_access_SOURCES) \
  $(libexec_posix_chmod_SOURCES) \
  $(libexec_posix_executable_SOURCES) \
  $(libexec_posix_exists_SOURCES) \
  $(libexec_posix_mkdir_SOURCES) \
  $(libexec_posix_readable_SOURCES) \
  $(libexec_posix_realpath_SOURCES) \
  $(libexec_posix_writable_SOURCES) \
  $(end)
src_tests_binutils_FAKE_SOURCES_SET = \
  $(check_lib_libtests_binutils_la_FAKE_SOURCES_SET) \
  $(end)

src_tests_binutils_CHECK_LTLIBRARIES_SET = \
  $(check_lib_libtests_binutils_la) \
  $(end)
src_tests_binutils_CHECK_PROGRAMS_SET = \
  $(libexec_posix_access) \
  $(libexec_posix_chmod) \
  $(libexec_posix_executable) \
  $(libexec_posix_exists) \
  $(libexec_posix_mkdir) \
  $(libexec_posix_readable) \
  $(libexec_posix_realpath) \
  $(libexec_posix_writable) \
  $(end)
src_tests_binutils_MODULES_SET = \
  $(check_lib_libtests_binutils_la_MODULES) \
  $(libexec_posix_access_MODULES) \
  $(libexec_posix_chmod_MODULES) \
  $(libexec_posix_executable_MODULES) \
  $(libexec_posix_exists_MODULES) \
  $(libexec_posix_mkdir_MODULES) \
  $(libexec_posix_readable_MODULES) \
  $(libexec_posix_realpath_MODULES) \
  $(libexec_posix_writable_MODULES) \
  $(end)
src_tests_binutils_SOURCES_SET = \
  $(src_tests_binutils_REAL_SOURCES_SET) \
  $(src_tests_binutils_FAKE_SOURCES_SET) \
  $(end)
src_tests_binutils_OBJECTS_SET = \
  $(check_lib_libtests_binutils_la_OBJECTS) \
  $(libexec_posix_access_OBJECTS) \
  $(libexec_posix_chmod_OBJECTS) \
  $(libexec_posix_executable_OBJECTS) \
  $(libexec_posix_exists_OBJECTS) \
  $(libexec_posix_mkdir_OBJECTS) \
  $(libexec_posix_readable_OBJECTS) \
  $(libexec_posix_realpath_OBJECTS) \
  $(libexec_posix_writable_OBJECTS) \
  $(end)

# whereas this is a tester, this is necessary
$(src_tests_binutils_OBJECTS_SET): AM_CPPFLAGS+=$(AND_CHECK_CPPFLAGS_SET)
$(src_tests_binutils_OBJECTS_SET): AM_CXXFLAGS+=$(AND_CHECK_CXXFLAGS_SET)

check_lib_libtests_binutils_la_SCOLD_SOURCES_SET = $(patsubst obj/%.cpp,%.xcpp,$(check_lib_libtests_binutils_la_FAKE_SOURCES_SET))
clean-dependencies:: clean-namespaces
clean-namespaces::
	rm -f $(check_lib_libtests_binutils_la_SCOLD_SOURCES_SET)
$(check_lib_libtests_binutils_la_SCOLD_SOURCES_SET):
	@echo "Creating $@"
	@mkdir -p $(@D) && { echo '#divert <fpp>' ; \
	  echo 'namespace $(strip $(subst .,::,$(call HT_SOURCEStoMODULENAMES, $@))) { }' ; \
	  echo '#endiv' ; \
	  : ok ; } > $(@D)/t99.$$$$.$(@F)~ && chmod a-w $(@D)/t99.$$$$.$(@F)~ && mv $(@D)/t99.$$$$.$(@F)~ $@
__DC_OPTIONS = \
  $(bbDC_FLAGS) \
  $(comment --verbose) \
  --make-directories \
  $(addprefix --su=, $(SUBDIRS)) \
  $(bbDC_SEARCHPATH) \
  --modulesdir-directory=$(scold_cxx_modulesdir) \
  --modulesdir-variable='$$(scold_cxx_modulesdir)' \
  --objdir-directory=$(scold_cxxdir) \
  --objdir-variable='$$(scold_cxxdir)' \
  --srcdir-directory=$(scold_cxxdir) $(comment THIS IS NON-STANDARD) \
  --srcdir-variable='$$(scold_cxxdir)' $(comment THIS IS NON-STANDARD)  \
  $(end)
# Synthesize those pesky & substantially-empty namespace.xcpp files
__SCOLD_SOURCEStoSOURCES = $(patsubst %.cpp, %.xcpp, $1)
__SCOLD_DISAGGREGATE_COMPILE = $(bbDC) $(__DC_OPTIONS) $(call __SCOLD_SOURCEStoSOURCES, $1)
# This dependency ensures that all the compilable sources exist, even the synthetic namespace.xcpp files
$(if $(src_tests_binutils_SOURCES_SET),$(__ok),$(error src_tests_binutils_SOURCES_SET is empty))
# NO NEED ---> $(AM_V_BB1ST) $(call bbSCOLD_DISAGGREGATE_COMPILE, $(src_tests_binutils_REAL_SOURCES_SET))
# NO NEED ---> $(AM_V_BB1ST) $(call __SCOLD_DISAGGREGATE_COMPILE, $(check_lib_libtests_binutils_la_SCOLD_SOURCES_SET))
$(scold_cxxdir)/tests/binutils/dependencies.mk: $(src_tests_binutils_SOURCES_SET)
$(src_tests_binutils_SOURCES_SET) : obj/src/%.cpp : src/%.xcpp
	$(HT_V_COLD) $(call HT_XCPP2CPP, $^)
	@test -e $@
$(scold_cxxdir)/tests/binutils/dependencies.mk:
	$(HT_V_BOTH) $(call HT_DEPENDENCIES, $^)
	@test -e $@
include $(scold_cxxdir)/tests/binutils/dependencies.mk # automake deletes am--include-marker during make am--depfiles
am--depfiles: $(scold_cxxdir)/sys/dependencies.mk #      automake during configure
clean-dependencies::
	rm -f $(scold_cxxdir)/tests/binutils/dependencies.mk

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.s.Mode
#import tests.binutils.parse
namespace tests::binutils {
  //
  // The parser for the file mode of chmod(2), creat(2), mkdir(2), open(2)
  //
  // Usage:
  //
  //    return r = chmod(av[1], parse<Mode>(av, 2));
  //    return r = creat(av[1], parse<Mode>(av, 2));
  //    return r = mkdir(av[1], parse<Mode>(av, 2));
  //    return r = open(av[1], parse<O::Flags>(av, 2), parse<Mode>(av, 3));
  //
  template<> inline auto parse<sys::s::Mode>(c::const_argv av, std::size_t position) -> sys::s::Mode;
}
#endiv
#divert <ipp>
#import std.stoi
#import std.string
#import tests.binutils.exception.Argument_Count
#import tests.binutils.exception.Argument_Permissions
template<> inline auto tests::binutils::parse<sys::s::Mode>(c::const_argv av, std::size_t position) -> sys::s::Mode {
  if (position >= av.size()) {
    throw exception::Argument_Count();
  }
  std::string const modeword = av[position];
  std::size_t end(0);
  auto const BASE_IS_OCTAL = 8;
  auto const candidate = std::stoi(modeword, &end, BASE_IS_OCTAL); // WATCHOUT [[FIXTHIS]] this throws independently of other error signalling
  if (modeword.size() != end || candidate < 0 || 07777 < candidate) {
    throw exception::Argument_Permissions(modeword);
  }
  return sys::s::Mode(candidate);
}
#endiv

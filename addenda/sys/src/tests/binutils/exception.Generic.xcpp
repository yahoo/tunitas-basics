// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::binutils::exception {
  //
  // The generic exception of the binutils
  // As a mixin so that the descendants can choose freely among the <stdexcept>
  // Descendants only.
  //
  // Usage:
  //
  //   class Descendant : public std::invalid_argument, public Generic {
  //     using ancestor = std::invalid_argument;
  //   public:
  //     Descendant() : ancestor("Badness Happened") { }
  //     using ancestor::invalid_argument;
  //     inline auto what() const noexcept -> char const * { return ancestor::what(); }
  //   };
  //
  //   try {
  //     ...do stuff...
  //   } catch (exception::Generic const &e) {
  //     std::cerr << "exception: " << e.what() << '\n';
  //   }
  //   
  class Generic;
}
#endiv
#divert <hpp>
class tests::binutils::exception::Generic {
protected:
  virtual ~Generic() = default;
public:
  // this must be unified in the descendant's MI context.
  virtual auto what() const noexcept -> char const * = 0;
};
#endiv

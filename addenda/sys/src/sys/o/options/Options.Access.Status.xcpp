// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.o.options.Options.declaration
#import sys.o.Access
#import sys.o.Status
namespace sys::o::options {
  //
  // The composition of the Accesses and Statuses
  //
  // The options is a function-argument call-site object (you SHOULD not use it for any data storage)
  //
  // Usage:
  //
  //   auto fd = ...somehow...
  //
  //   auto ed = something(pathname, O::APPEND | O::EXCLUSIVE)
  //   auto ed = something(pathname, O::APPEND | O::EXCLUSIVE)
  //
  template<> class Options<Access, Status>;
}
#endiv
#divert <hpp>
#import sys.o.options.Composer.Options.Access.Status
#import sys.o.Accesses
#import sys.o.Statuses
namespace sys::o::options {
  template<> class Options<Access, Status> : public Composer<Options<Access, Status>> {
    using Ancestor = Composer<Options<Access, Status>>;
  public:
    constexpr Options() : Ancestor{typename Ancestor::Value{}} { }
    constexpr explicit Options(typename Ancestor::Value value) : Ancestor{value} { }
    using Ancestor::Composer;
    auto operator=(Options const &) -> Options & = default;
    // WRONG --- creates ambiguities --> auto operator=(Ancestor a) -> Options & { Ancestor::value = (typename Ancestor::Value) a; return *this; }
    inline constexpr auto operator&=(Options s) -> Options & { Ancestor::value &= (typename Ancestor::Value) s; return *this; }
    inline constexpr auto operator|=(Options s) -> Options & { Ancestor::value |= (typename Ancestor::Value) s; return *this; }
    inline constexpr auto operator~() -> Options & { Ancestor::value = ~Ancestor::value; return *this; }
    inline constexpr explicit operator typename Ancestor::Value() const { return Ancestor::value; } // this one is explicit, the ancestor's is implicit
    inline friend constexpr auto operator==(Options const &a, Options const &b) -> bool { return a.value == b.value; }
    inline friend constexpr auto operator!=(Options const &a, Options const &b) -> bool { return a.value != b.value; }
    // composition
    inline friend constexpr auto operator|(Options a, Options b) -> Options  { return Options{(typename Options::Value)a | (typename Options::Value)b}; }
    inline friend constexpr auto operator|(Access a, Options b) -> Options   { return Options{(typename Options::Value)a | (typename Options::Value)b}; }
    inline friend constexpr auto operator|(Accesses a, Options b) -> Options { return Options{(typename Options::Value)a | (typename Options::Value)b}; }
    inline friend constexpr auto operator|(Status a, Options b) -> Options   { return Options{(typename Options::Value)a | (typename Options::Value)b}; }
    inline friend constexpr auto operator|(Statuses a, Options b) -> Options { return Options{(typename Options::Value)a | (typename Options::Value)b}; }
    // extraction
    inline friend constexpr auto operator&(Options a, Options b) -> Options  { return Options{(typename Options::Value)a & (typename Options::Value)b}; }
    inline friend constexpr auto operator&(Access a, Options b) -> Options   { return Options{(typename Options::Value)a & (typename Options::Value)b}; }
    inline friend constexpr auto operator&(Accesses a, Options b) -> Options { return Options{(typename Options::Value)a & (typename Options::Value)b}; }
    inline friend constexpr auto operator&(Status a, Options b) -> Options   { return Options{(typename Options::Value)a & (typename Options::Value)b}; }
    inline friend constexpr auto operator&(Statuses a, Options b) -> Options { return Options{(typename Options::Value)a & (typename Options::Value)b}; }
    // inversion
    inline friend constexpr auto contains(Options a, Options b) -> bool { return (typename Options::Value)b == (typename Options::Value)(b & a); }
  };
}
static_assert(sizeof (sys::o::options::Options<sys::o::Access, sys::o::Status>));
namespace sys::o {
  namespace options {
    inline constexpr auto operator|(Access a, Status b) -> Options<Access,Status>     { return Options<Access,Status>{(Accesses::Value)a | (Statuses::Value)b}; }
    inline constexpr auto operator|(Status a, Access b) -> Options<Access,Status>     { return Options<Access,Status>{(Statuses::Value)a | (Accesses::Value)b}; }
    inline constexpr auto operator|(Accesses a, Statuses b) -> Options<Access,Status> { return Options<Access,Status>{(Accesses::Value)a | (Statuses::Value)b}; }
    inline constexpr auto operator|(Statuses a, Accesses b) -> Options<Access,Status> { return Options<Access,Status>{(Statuses::Value)a | (Accesses::Value)b}; }
    //
    inline constexpr auto operator&(Access a, Status b) -> Options<Access,Status>     { return Options<Access,Status>{(Accesses::Value)a & (Statuses::Value)b}; }
    inline constexpr auto operator&(Status a, Access b) -> Options<Access,Status>     { return Options<Access,Status>{(Statuses::Value)a & (Accesses::Value)b}; }
    inline constexpr auto operator&(Accesses a, Statuses b) -> Options<Access,Status> { return Options<Access,Status>{(Accesses::Value)a & (Statuses::Value)b}; }
    inline constexpr auto operator&(Statuses a, Accesses b) -> Options<Access,Status> { return Options<Access,Status>{(Statuses::Value)a & (Accesses::Value)b}; }
  }
  using options::operator|;
  using options::operator&;
}
#endiv

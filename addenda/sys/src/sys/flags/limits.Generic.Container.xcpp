// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.flags.limits.Generic.declaration
#forward sys.flagset.Container
namespace sys::flags::limits {
  //
  // This one should be deprecating in favor of the simpler sys::flags::Flags<S,C>
  //
  template<required::Enumeration SINGLE, required::Integer CARRIER, flagset::required::Pluralizer<SINGLE, CARRIER> PLURALIZER, unsigned WIDTH> struct Generic<flagset::Container<SINGLE, CARRIER, PLURALIZER>, SINGLE, CARRIER, WIDTH>;
}
#endiv
#divert <hpp>
namespace sys::flags::limits {
  template<required::Enumeration SINGLE, required::Integer CARRIER, flagset::required::Pluralizer<SINGLE, CARRIER> PLURALIZER, unsigned WIDTH> struct Generic<flagset::Container<SINGLE, CARRIER, PLURALIZER>, SINGLE, CARRIER, WIDTH> {
    using Index = unsigned; // this is a bit index 0..7, 0..15, 0..31, 0..63, 0..127, 0..255
    using Container = flagset::Container<SINGLE, CARRIER, PLURALIZER>;
    using Flag = SINGLE;
    using Flagset = CARRIER;
    inline constexpr static auto min() -> Index { return begin(); }
    inline constexpr static auto max() -> Index { return end()-1; }
    inline constexpr static auto begin() -> Index { return 0u; }
    inline constexpr static auto end() -> Index { return WIDTH; }
  };
}
#endiv
#divert <ipp>
#import sys.flagset.Container
#endiv

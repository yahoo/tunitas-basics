// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.flags.Flags
#import sys.msg.Flag
namespace sys::msg {
  //
  // The flags, aggregated into a set of them
  // They are made of the same stuuff as a mode_t (but are not a mode_t)
  // Check opperator~ to seee that only the low twelve bits  are preserved upon complementationn.
  //
  // The emplacers: special(...), user(...), group(...), other(...)
  // The positiioners: specialof(...), userof(...), groupof(...), otherf(...)
  //
  // Usage:
  //
  //   auto flags = Flags{0777};
  //   auto flags = Flag::ROTHER | WOTHER | XOTHER;
  //
  namespace flags {
    using Single = Flag;
    using Carrier = int; // WATCHOUT - this must be (signed) int to match the signature of the system calls
  }
  using Flags = sys::flags::Flags<flags::Single, flags::Carrier>;
}
#endiv
#divert <hpp>
#import std.underlying_type
namespace sys::msg {
  namespace packaging::flags {
    using Uf = std::underlying_type_t<Flag>;
    namespace bundle {
      inline constexpr auto operator|(Flag a, Flag b) -> Flags { return Flags{(Uf) a | (Uf)b}; }
      inline constexpr auto operator&(Flag a, Flag b) -> Flags { return Flags{(Uf) a & (Uf)b}; }
      inline constexpr auto operator~(Flag b) -> Flags         { return Flags{~(Uf)b}; }
    }
  }
  // NOT HELPFUL ---> using namespace packaging::flags::bundle; <--- NOT HELPFUL ENOUGH
  // In order for ADL to find these, we need to have a declaration positioned (not just visibility)
  using packaging::flags::bundle::operator|;
  using packaging::flags::bundle::operator&;
  using packaging::flags::bundle::operator~;
} 
#endiv

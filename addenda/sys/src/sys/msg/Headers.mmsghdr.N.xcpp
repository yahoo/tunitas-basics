// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.msg.Headers.declaration
#import std.size_t
#import mmsghdr
namespace sys::msg {
  //
  // The {send,recv}msg(2) message header structure
  // Default initialized to zero.
  // The size must be specified in adance.
  //
  // Question: But what if I want a variable sized array?
  // Answer: go for it.
  // Suggest: std::vector<mmsgvector>
  // 
  // Usage:
  //
  //   #import sys.msg.Headers
  //   auto flags = Flags{...};
  //   auto timeout = timespec{...};
  //
  //   sys::msg::Headers<mmsghdr, 10> buf{sys::UNINITIALIZED};
  //   auto received = recvmmsg(fd, buf, flags, timeout);
  //
  //   sys::msg::Headers<mmsghdr, 5> buf;
  //   auto sent = sendmmsg(fd, buf, flags);
  //
  template<std::size_t N> struct Headers<::mmsghdr, N>;
}
#endiv
#divert <hpp>
#import std.array
namespace sys::msg {
  template<std::size_t N> struct Headers<::mmsghdr, N> : public std::array<::mmsghdr, N> {
    inline Headers();
    inline explicit Headers(Uninitialized);
  };
}
#endiv
#divert <ipp>
#import nonstd.uninitialized.zero
namespace sys::msg {
  template<std::size_t _> Headers<mmsghdr, _>::Headers() { nonstd::uninitialized::zero(this->data(), this->size()); }
  template<std::size_t _> Headers<mmsghdr, _>::Headers(Uninitialized) { }
}
#endiv

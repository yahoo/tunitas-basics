// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.string
#import c.basic_stringz
#import c.basic_stringn
namespace sys::required::stringz {
  //
  // A type conforming to Stringz must manage a '\0'-terminated char const * data range.
  // This is the very data type that scares everyone.  Unbounded memory with a hoped-for termination condition. 
  //
  // Examples:
  //   std::string
  //   c::const_stringz
  //   c::const_stringn
  //
  // Anti-examples, which do not guarantee  the '\0' terminator sentinel:
  //   std:string_view
  //   c::const_buffer<char>
  //   nonstd::const_dope<char>
  // 
  template<typename STRINGZ> struct Does_Conform;
  // Whereas there is no existential quantification in the condept system,
  // only std::basic_string with the default TRAITS and standard ALLOC are considered.
  template<> struct Does_Conform<std::string>;
  template<> struct Does_Conform<char const *>; // WATCHOUT - this enables getenv<char const *>(Argument) -> Result<char const *>
  template<> struct Does_Conform<c::basic_stringz<char>>;
  template<> struct Does_Conform<c::basic_stringz<char const>>;
  template<> struct Does_Conform<c::basic_stringn<char>>;
  template<> struct Does_Conform<c::basic_stringn<char const>>;
  // Add yours here too!
}
#endiv
#divert <hpp>
#import std.true_type
#import std.false_type
namespace sys::required {
  template<typename STRINGZ> struct stringz::Does_Conform : public std::false_type { };
}
namespace sys::required::stringz {
  template<> struct Does_Conform<std::string> : std::true_type { };
  template<> struct Does_Conform<char const *> : std::true_type { };
  template<> struct Does_Conform<c::basic_stringz<char>> : std::true_type { };
  template<> struct Does_Conform<c::basic_stringz<char const>> : std::true_type { };
  template<> struct Does_Conform<c::basic_stringn<char>> : std::true_type { };
  template<> struct Does_Conform<c::basic_stringn<char const>> : std::true_type { };
  // Add yours here too!
}
#endiv

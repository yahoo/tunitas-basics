// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#include <signal.h> // -> bits/signum-generic.h  as viewed in glibc-headers-2.28-9.fc29.x86_64
namespace sys::sig {
  enum class Number : int {
    // ISO C99 Signals
    ZERO = 0,
    INT = SIGINT, // ......... Interactive attention signal.
    INTERACTIVE = INT,
    ILL = SIGILL, // ......... Illegal instruction.
    ILLEGAL = ILL,
    ABRT = SIGABRT, // ....... Abnormal termination.
    ABORT = ABRT,
    FPE = SIGFPE, // ......... Erroneous arithmetic operation.
    FLOATING_POINT_EXCEPTION = FPE,
    SEGV = SIGSEGV, // ....... Invalid access to storage.
    SEGMENTATION_VIOLATION = SEGV,
    TERM = SIGTERM, // ....... Termination request.
    TERMINATE = TERM,
    //
    // Historical signals specified by POSIX.
    HUP = SIGHUP, // ......... Hangup.
    HANGUP = HUP,
    QUIT = SIGQUIT, // ....... Quit.
    TRAP = SIGTRAP, // ....... Trace/breakpoint trap.
    BREAKPOINT = TRAP,
    KILL = SIGKILL, // ....... Killed.
    BUS = SIGBUS, // ......... Bus error.
    BUS_ERROR = BUS,
    SYS = SIGSYS, // ......... Bad system call.
    SYSTEM_CALL = SYS,
    PIPE = SIGPIPE, // ....... Broken pipe.
    ALRM = SIGALRM, // ....... Alarm clock.
    ALARM = ALRM,
    //
    // New(er) POSIX signals (1003.1-2008, 1003.1-2013).
    URG = SIGURG, // ......... Urgent data is available at a socket.
    URGENT = URG,
    STOP = SIGSTOP, // ....... Stop, unblockable.
    TSTP = SIGTSTP, // ....... Keyboard stop.
    TERMINAL_STOP = TSTP,
    CONT = SIGCONT, // ....... Continue.
    CONTINUE = CONT,
    CHLD = SIGCHLD, // ....... Child terminated or stopped.
    CHILD = CHLD,
    TTIN = SIGTTIN, // ....... Background read from control terminal.
    TERMINAL_INPUT = TTIN,
    TTOU = SIGTTOU, // ....... Background write to control terminal.
    TERMINAL_OUTPUT = TTOU,
    POLL = SIGPOLL, // ....... Pollable event occurred (System V).
    XCPU = SIGXCPU, // ....... CPU time limit exceeded.
    EXCEEDED_CPU = XCPU,
    XFSZ = SIGXFSZ, // ....... File size limit exceeded.
    EXCEEDED_FILE_SIZE = XFSZ,
    VTALRM = SIGVTALRM, // ... Virtual timer expired.
    VIRTUAL_TIMER_ALARM = VTALRM,
    PROF = SIGPROF, // ....... Profiling timer expired.
    PROFILE_TIMER_EXPIRY = PROF,
    USR1 = SIGUSR1, // ....... User-defined signal 1.
    USER1 = USR1,
    USR2 = SIGUSR2, // ....... User-defined signal 2.
    USER2 = USR2,
    //
    // Nonstandard signals found in all modern POSIX systems (including both BSD and Linux).
    WINCH = SIGWINCH, // ..... Window size change (4.3 BSD, Sun).
    WINDOW_SIZE_CHANGE = WINCH,
    //
    // Archaic names for compatibility.
    IO = SIGIO, // ........... I/O now possible (4.2 BSD).
    IOT = SIGIOT, // ......... IOT instruction, abort() on a PDP-11.
    CLD = SIGCLD, // ......... Old System V name
    //
    // WATCHOUT - SIGRTMIN and SIGRTMAX are actually function calls
    // They are modeled nearby and in SIG
    //
  };
}
#endiv
#divert <hpp>
namespace sys::sig {
  //
  // Expect signals 32..64 to be real-time signals
  // with glibc reserving certain (which?) signals for its internal use
  // 
  inline auto rtmin() -> Number { return Number{SIGRTMIN}; }
  inline auto rtmax() -> Number { return Number{SIGRTMAX}; }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys::sig {
  //
  // The signal set.
  // By default, is self-initializing
  //
  // Usage:
  //
  //   auto setthese = sys::sig::Set{};
  //   auto gotthese = sys::sig::Set{};
  //   auto masked = sys::posix::sigprocmask(SIG::BLOCK, setthese, getthese);
  //
  // Also
  //
  //   auto count = pselect(fds, read, mask);
  //
  struct Set;
}
#endiv
#divert <hpp>
#import sigset_t
#import nonstd.uninitialized // Uninitialized
class sys::sig::Set : public sigset_t {
  using Ancestor = sigset_t;
public:
  using Uninitialized = nonstd::uninitialized::Uninitialized;
  inline static constexpr auto uninitialized = nonstd::uninitialized::UNINITIALIZED;;
  inline Set(); // ......................... is zeroed
  inline explicit Set(Uninitialized); // ... not zeroed
};
#endiv
#divert <ipp>
#import nonstd.uninitialized.zero
namespace sys::sig {
  Set::Set() {
    nonstd::uninitialized::zero(*this);
  }
  Set::Set(Uninitialized) {
    // per spec: perform NO initialization
  }
}
#endiv

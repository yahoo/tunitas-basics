// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#include <pwd.h> // [[FIXTHIS]] module-posix-os #import passwd
#include <grp.h> // [[FIXTHIS]] module-posix-os #import group
#import sys.entry.required.Entry
namespace sys::entry {
  //
  // The Buffer for the reentrant family of "entries" databases.
  // e.g. getpwnam_r(...),     (passwd)
  //      getgrnam_r(...),     (group)
  //      getspnam_r(...),     (shadow password)
  //      getsgnam_r(...),     (shadow group)
  //      get{gr,alias,rpc,host,net,serv,prot,netgr,utx,mnt,tty}ent(...)
  //      etc.
  //
  // Usage:
  //
  //   entry::Pointer<::passwd> ptr{new entry::Buffer<::passwd>{}};
  //   ::passwd *result{nullptr};
  //   int got = ::getpwuid_r(...some_uid..., ptr->entry(), ptr->data(), ptr->size(), &result);
  //
  template<required::Entry ENTRY> struct Buffer;
}
#endiv
#divert <hpp>
#import std.size_t
#import std.unique_ptr
namespace sys {
  template<entry::required::Entry ENTRY> struct entry::Buffer {
    Buffer();
    Buffer(Buffer const &) = delete;
    using Entry = ENTRY;
    inline auto entry() const -> Entry const *;
    inline auto entry() -> Entry *;
    inline auto data() const -> char const *;
    inline auto data() -> char *;
    inline auto size() const -> std::size_t;
  protected:
    Entry entry_buffer;
    std::unique_ptr<char []> string_buffer;
    std::size_t string_buffer_size;
    inline static std::size_t const SYSCONF_STRING_BUFFER_SIZE;
    inline static auto const DEFAULT_STRING_BUFFER_SIZE = 1lu << 16; // arbitrarily
  };
}
#include <unistd.h> // [[FIXTHIS]] with module-posix-os #import sysconf and its #define (gak!) constants
#include <pwd.h> // [[FIXTHIS]] with module-posix-os #import passwd
#include <grp.h> // [[FIXTHIS]] with module-posix-os #import group
namespace sys::entry {
  template<> std::size_t const Buffer<::passwd>::SYSCONF_STRING_BUFFER_SIZE = _SC_GETPW_R_SIZE_MAX;
  template<> std::size_t const Buffer<::group>::SYSCONF_STRING_BUFFER_SIZE = _SC_GETGR_R_SIZE_MAX;
}
#endiv
#divert <ipp>
#import nonstd.uninitialized_zero
namespace sys::entry {
  template<required::Entry _> Buffer<_>::Buffer()
    : string_buffer_size{0} {
    nonstd::uninitialized_zero(entry_buffer);
    if (0 == string_buffer_size) {
      // the special values: 0 means "no answer"; -1 means "not supported"
      auto got = sysconf(SYSCONF_STRING_BUFFER_SIZE);
      if (0 < got) {
	string_buffer_size = got;
      }
    }
    if (0 == string_buffer_size) {
      string_buffer_size = DEFAULT_STRING_BUFFER_SIZE;
    }
    string_buffer.reset(new char[string_buffer_size]);
  }
  template<required::Entry _> auto Buffer<_>::entry() const -> Entry const * { return &entry_buffer; }
  template<required::Entry _> auto Buffer<_>::entry() -> Entry * { return &entry_buffer; }
  template<required::Entry _> auto Buffer<_>::data() const -> char const * { return string_buffer.get(); }
  template<required::Entry _> auto Buffer<_>::data() -> char * { return string_buffer.get(); }
  template<required::Entry _> auto Buffer<_>::size() const -> std::size_t { return string_buffer_size; }
}
#endiv

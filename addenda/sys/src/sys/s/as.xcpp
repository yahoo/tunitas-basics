// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.s.Bits
#import sys.s.required.Bits
namespace sys::s {
  template<required::Bits RESULT> auto as(Bits) -> RESULT = delete;
  template<required::Bits RESULT> auto as(Bit) -> RESULT = delete;
  template<> inline auto as<Bit>(Bit) -> Bit;  //   unexceptional (identity)
  template<> inline auto as<Bit>(Bits) -> Bit;  //  demotion can throw because it demotion of multi-flag values is ambiguous.
  template<> inline auto as<Bits>(Bit) -> Bits; //  unexceptional (simple promotion)
  template<> inline auto as<Bits>(Bits) -> Bits; // unexceptional (identity)
}
#import sys.s.Flags
#import sys.s.required.Flags
namespace sys::s {
  template<required::Flags RESULT> auto as(Flags) -> RESULT = delete;
  template<required::Flags RESULT> auto as(Flag) -> RESULT = delete;
  template<> inline auto as<Flag>(Flag) -> Flag;  //   unexceptional (identity)
  template<> inline auto as<Flag>(Flags) -> Flag;  //  demotion can throw because it demotion of multi-flag values is ambiguous.
  template<> inline auto as<Flags>(Flag) -> Flags; //  unexceptional (simple promotion)
  template<> inline auto as<Flags>(Flags) -> Flags; // unexceptional (identity)
}
#endiv
#divert <ipp>
#import sys.flags.maskof
namespace sys {
  template<> auto s::as<s::Bit>(Bit b) -> Bit    { return b; }
  template<> auto s::as<s::Bit>(Bits s) -> Bit   { return sys::flags::maskof<Bit>(s, Bits::Limits::begin(), Bits::Limits::end()); }
  template<> auto s::as<s::Bits>(Bit b) -> Bits  { return Bits{b}; }
  template<> auto s::as<s::Bits>(Bits s) -> Bits { return s; }
}
namespace sys {
  template<> auto s::as<s::Flag>(Flag f) -> Flag    { return f; }
  template<> auto s::as<s::Flag>(Flags s) -> Flag   { return sys::flags::maskof<Flag>(s, Flags::Limits::begin(), Flags::Limits::end()); }
  template<> auto s::as<s::Flags>(Flag f) -> Flags  { return Flags{f}; }
  template<> auto s::as<s::Flags>(Flags s) -> Flags { return s; }
}
#endiv

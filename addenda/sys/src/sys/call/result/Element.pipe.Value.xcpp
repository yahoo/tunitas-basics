// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.call.result.Element.declaration
#forward sys.call.result.pipe.Value
#import sys.call.result.required.Pipe
namespace sys::call::result {
  //
  // Specialized for the pipe;:Value<FD>
  //
  // Usage:
  //
  //     using t99 = call::result::pipe::Value<id::File>; ....... one template argument
  //     using Read = Element<0, t99>::Type;
  //     using Write = Element<1, t99>::Type;
  //     static_assert(is_same_v<Read, id::File>);
  //     static_assert(is_same_v<Write, id::File>);
  //
  template<std::size_t N, required::Pipe FD> struct Element<N, pipe::Value<FD>>;
}
#endiv
#divert <hpp>
#import sys.call.result.Element.Value
#import sys.call.result.pipe.Value
namespace sys::call {
  template<std::size_t N, result::required::Pipe FD> struct result::Element<N, result::pipe::Value<FD>> : public Element<N, typename pipe::Value<FD>::Ancestor> { };
}
#endiv

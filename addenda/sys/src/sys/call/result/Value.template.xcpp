// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.call.result.Value.declaration
#endiv
#divert <hpp>
#import error_t
#import std.enable_if
#import std.error_code
#import std.error_condition
#import std.is_integral
#import std.size_t
#import std.tuple_element
#import sys.error.Code
namespace sys::call::result {
  template<typename VALUE, typename... VALUES> inline auto ok(Value<VALUE, VALUES...> const &) -> bool;
  template<typename VALUE, typename... VALUES> inline auto good(Value<VALUE, VALUES...> const &) -> bool;
  template<typename VALUE, typename... VALUES> inline auto fail(Value<VALUE, VALUES...> const &) -> bool;
  template<typename VALUE, typename... VALUES> [[deprecated("instead use error_num(Value)")]] inline auto errnum(Value<VALUE, VALUES...> const &) -> int;
  template<typename VALUE, typename... VALUES> inline auto error_num(Value<VALUE, VALUES...> const &) -> int;
  template<typename VALUE, typename... VALUES> inline auto error_code(Value<VALUE, VALUES...> const &) -> std::error_code;
  template<typename VALUE, typename... VALUES> inline auto error_condition(Value<VALUE, VALUES...> const &) -> std::error_condition;
  template<typename VALUE, typename... VALUES> inline auto error_message(Value<VALUE, VALUES...> const &) -> std::string;
  // transitional, for symmetry with sys_error_code
  template<typename VALUE, typename... VALUES> [[deprecated("instead use std_system_error_code(Value) or std_generic_error_code(Value)")]] inline auto std_error_code(Value<VALUE, VALUES...> const &) -> std::error_code;
  template<typename VALUE, typename... VALUES> [[deprecated("instead use std_system_error_condition(Value) or std_generic_error_condition(Value)")]] inline auto std_error_condition(Value<VALUE, VALUES...> const &) -> std::error_condition;
  template<typename VALUE, typename... VALUES> inline auto std_system_error_code(Value<VALUE, VALUES...> const &) -> std::error_code;
  template<typename VALUE, typename... VALUES> inline auto std_system_error_condition(Value<VALUE, VALUES...> const &) -> std::error_condition;
  template<typename VALUE, typename... VALUES> inline auto std_generic_error_code(Value<VALUE, VALUES...> const &) -> std::error_code;
  template<typename VALUE, typename... VALUES> inline auto std_generic_error_condition(Value<VALUE, VALUES...> const &) -> std::error_condition;
  template<typename VALUE, typename... VALUES> inline auto sys_error_code(Value<VALUE, VALUES...> const &) -> sys::error::Code;

  template<typename VALUE, typename... VALUES> inline auto value(Value<VALUE, VALUES...> const &) -> VALUE const &; // [[FIXTHIS]] ... still needed?
  template<typename VALUE, typename... VALUES> inline auto value(Value<VALUE, VALUES...> &) -> VALUE &; //             [[FIXTHIS]] ... still needed?
  template<typename VALUE, typename... VALUES> inline auto value(Value<VALUE, VALUES...> &&) -> VALUE &&;
  // for integral values, e.g. 'int', turns a syscall success value(...) of value(r) == 0 to a value(r) == true.
  // enbooleanate, en-boolean-ate; like ensmoothen, ensmoothenate, en-smoothen-ate.
  template<typename VALUE, typename... VALUES> inline auto enbooleanate(Value<VALUE, VALUES...> const &) -> typename std::enable_if<std::is_integral<VALUE>::value, Value<bool>>::type;
  template<typename... VALUES> inline auto enbooleanate(Value<bool, VALUES...> const &r) -> Value<bool>;
  // Convenient cast-type access to multi-valued tuples
  template<std::size_t N, typename VALUE, typename... VALUES> inline auto get(Value<VALUE, VALUES...> const &) -> typename std::tuple_element<N, std::tuple<VALUE, VALUES...>>::type  const &;
  template<std::size_t N, typename VALUE, typename... VALUES> inline auto get(Value<VALUE, VALUES...> &) -> typename std::tuple_element<N, std::tuple<VALUE, VALUES...>>::type &;
  template<std::size_t N, typename VALUE, typename... VALUES> inline auto get(Value<VALUE, VALUES...> &&) -> typename std::tuple_element<N, std::tuple<VALUE, VALUES...>>::type &&;
}
#import std.tuple
template<typename VALUE, typename... VALUES> class sys::call::result::Value : public std::tuple<bool, error_t, VALUE, VALUES...> {
  using Ancestor = std::tuple<bool, error_t, VALUE, VALUES...>;
public:
  using value_type [[deprecated("instead prefer Element<0, Value<VALUE, VALUES...>::type")]] = VALUE;
  inline Value();
  inline explicit Value(bool ok);
  inline Value(bool ok, int errnum_errno);
  inline Value(bool ok, int errnum_errno, VALUE const &, VALUES const &...);
  inline Value(bool ok, int errnum_errno, VALUE &&, VALUES &&...);
private:
  template<std::size_t N, typename V, typename... VS> friend auto result::get(Value<V, VS...> const &) -> typename std::tuple_element<N, std::tuple<V, VS...>>::type  const &;
  template<std::size_t N, typename V, typename... VS> friend auto result::get(Value<V, VS...> &) -> typename std::tuple_element<N, std::tuple<V, VS...>>::type &;
  template<std::size_t N, typename V, typename... VS> friend auto result::get(Value<V, VS...> &&) -> typename std::tuple_element<N, std::tuple<V, VS...>>::type &&;
};
#endiv
#divert <ipp>
namespace sys::call {
 
  template<typename VALUE, typename... VALUES> auto result::enbooleanate(Value<VALUE, VALUES...> const &r) -> typename std::enable_if<std::is_integral<VALUE>::value, Value<bool>>::type { return {ok(r), error_num(r), 0 == value(r)}; } // ... Whereas syscall zero was success, now bool true is success.
  template<typename... VALUES> auto result::enbooleanate(Value<bool, VALUES...> const &r) -> Value<bool>                                                                                 { return {ok(r), error_num(r), value(r)}; } // ........ Drop the carried types, and the identity transform
}
#import std.get
namespace sys::call {
  template<typename VALUE, typename... VALUES> auto result::ok(Value<VALUE, VALUES...> const &r) -> bool { return good(r); }
  template<typename VALUE, typename... VALUES> auto result::good(Value<VALUE, VALUES...> const &r) -> bool { return std::get<0>(r); }
  template<typename VALUE, typename... VALUES> auto result::fail(Value<VALUE, VALUES...> const &r) -> bool { return not good(r); }
  template<typename VALUE, typename... VALUES> auto result::errnum(Value<VALUE, VALUES...> const &r) -> int { return error_num(r); }
  template<typename VALUE, typename... VALUES> auto result::error_num(Value<VALUE, VALUES...> const &r) -> int { return std::get<1>(r); }
}
// WATCHOUT - the error_code is for system_category, as returned by the operating system (by libc)
//            the error_condition is for generic_category as uttered within your application.
//
// The following code can work
// because the error_condition 'why_failed' is in generic_category
// and so is std::errc::file
// The enabled constructor of std::error_condition uses generic_category
// because    true  == std::is_error_condition_enum<errc>::value
// but        false == std::is_error_code_enum<errc>::value
//
//     auto const why_failed = error_condition(made);
//     if (std::errc::file_exists == why_failed) { ... do something ... }
//
// The following code always fails
// because the error_code 'why_failed' is in system_category
//
//     auto const why_failed = error_code(made);
//     if (std::errc::file_exists == why_failed) { ... never is executed ... }
//  
// the constant is converted to an error condition by
//
//     std::error_condition::error_condition<std::errc, void>(std::errc::file_exists)
//
// The comparison then is
//
//     std::operator==(__lhs=..., __rhs=...) at /usr/include/c++/7/system_error:306
//     { return (__rhs.category().equivalent(__rhs.value(), __lhs); }
//
// To Wit:
//
//     17.6.5.14 Value of error codes [value.error.codes]
//     Certain functions in the C++ standard library report errors via a std::error_code (19.5.2.1) object. That object’s category() member shall return std::system_category() for errors originating from the operating system, or a reference to an implementation-defined error_category object for errors originating elsewhere. The implementation shall define the possible values of value() for each of these error categories. [ Example: For operating systems that are based on POSIX, implementations are encouraged to define the std::system_category() values as identical to the POSIX errno values, with additional values as defined by the operating system’s documentation. Implementations for operating systems that are not based on POSIX are encouraged to define values identical to the operating system’s values. For errors that do not originate from the operating system, the implementation may provide enums for the associated values. —end example ]
//
// Thus:
//
//   std::error_code      <---> std::system_category()
//   std::error_condition <---> std::generic_category()
//
// And yet it is very cumbersom (but not impossible) to throw an exception against std::error_condition
// the generic std::error_condition with std::generic_category such that the receiver can use the enums
//
//  system_error( std::error_code ec );
//  system_error( std::error_code ec, const std::string& what_arg );
//  system_error( std::error_code ec, const char* what_arg );
//  system_error( int ev, const std::error_category& ecat );
//  system_error( int ev, const std::error_category& ecat, const std::string& what_arg);
//  system_error( int ev, const std::error_category& ecat, const char* what_arg);
//
// c.f. nonstd::generic_error
//      nonstd::system_error a.k.a. std::system_error
//
// try {
//   auto r = some_system_call(...args...);
//   if (!ok(r)) {
//     throw system_error{error_code(r)};
//   }
// } catch (std::system_error const &e) {
//   auto ec = e.code();
//   if (std::errc::no_such_file_or_directory != ec.category().default_condition(ec.value())) {
//     ...a true error...
//   }
// }
//
#import std.system_category
#import std.generic_category
#import std.forward
namespace sys::call {
  template<typename VALUE, typename... VALUES> auto result::error_code(Value<VALUE, VALUES...> const &r) -> std::error_code                       { return std_system_error_code(r); } // the commentariat above pertains to 'generic_category' versus 'system_category' ... right here'
  template<typename VALUE, typename... VALUES> auto result::error_condition(Value<VALUE, VALUES...> const &r) -> std::error_condition             { return std_generic_error_condition(r); } // the commentariat above pertains to 'generic_category' right here.
  template<typename VALUE, typename... VALUES> auto result::error_message(Value<VALUE, VALUES...> const &r) -> std::string                        { return error_code(r).message(); } // whatever the unprefixed error_code(...) variant delivers
  template<typename VALUE, typename... VALUES> auto result::std_system_error_code(Value<VALUE, VALUES...> const &r) -> std::error_code            { return std::error_code{error_num(r), std::system_category()}; }
  template<typename VALUE, typename... VALUES> auto result::std_system_error_condition(Value<VALUE, VALUES...> const &r) -> std::error_condition  { return std::error_condition{error_num(r), std::system_category()}; }
  template<typename VALUE, typename... VALUES> auto result::std_generic_error_code(Value<VALUE, VALUES...> const &r) -> std::error_code           { return std::error_code{error_num(r), std::generic_category()}; }
  template<typename VALUE, typename... VALUES> auto result::std_generic_error_condition(Value<VALUE, VALUES...> const &r) -> std::error_condition { return std::error_condition{error_num(r), std::generic_category()}; }
  template<typename VALUE, typename... VALUES> auto result::std_error_code(Value<VALUE, VALUES...> const &r) -> std::error_code                   { return std_system_error_code(r); }
  template<typename VALUE, typename... VALUES> auto result::std_error_condition(Value<VALUE, VALUES...> const &r) -> std::error_condition         { return std_generic_error_condition(r); }
  template<typename VALUE, typename... VALUES> auto result::sys_error_code(Value<VALUE, VALUES...> const &r) -> error::Code                       { return error::Code{e::Code{std::get<1>(r)}}; }
  template<typename VALUE, typename... VALUES> auto result::value(Value<VALUE, VALUES...> const &r) -> VALUE const & { return std::get<2>(r); }
  template<typename VALUE, typename... VALUES> auto result::value(Value<VALUE, VALUES...> &r) -> VALUE &             { return std::get<2>(r); }
  template<typename VALUE, typename... VALUES> auto result::value(Value<VALUE, VALUES...> &&anon) -> VALUE &&        { return std::get<2>(std::forward<Value<VALUE, VALUES...>>(anon)); }
  template<std::size_t N, typename VALUE, typename... VALUES> auto result::get(Value<VALUE, VALUES...> const &r) -> typename std::tuple_element<N, std::tuple<VALUE, VALUES...>>::type  const & { return std::get<N+2>(static_cast<typename Value<VALUE, VALUES...> ::Ancestor const &>(r)); }
  template<std::size_t N, typename VALUE, typename... VALUES> auto result::get(Value<VALUE, VALUES...> &r) -> typename std::tuple_element<N, std::tuple<VALUE, VALUES...>>::type &              { return std::get<N+2>(static_cast<typename Value<VALUE, VALUES...> ::Ancestor &>(r)); }
  template<std::size_t N, typename VALUE, typename... VALUES> auto result::get(Value<VALUE, VALUES...> &&r) -> typename std::tuple_element<N, std::tuple<VALUE, VALUES...>>::type &&            { return std::get<N+2>(static_cast<typename Value<VALUE, VALUES...> ::Ancestor &&>(std::forward<Value<VALUE, VALUES...>>(r))); }
}
#import errno
#import std.move
namespace sys::call::result {
  template<typename VALUE, typename... VALUES> result::Value<VALUE, VALUES...>::Value()
    : Ancestor(true, 0, VALUE(), VALUES()...)
  { }
  template<typename VALUE, typename... VALUES> Value<VALUE, VALUES...>::Value(bool arg_ok)
    : Ancestor(arg_ok, errno, VALUE(), VALUES()...)
  { }
  template<typename VALUE, typename... VALUES> Value<VALUE, VALUES...>::Value(bool arg_ok, int arg_errno)
    : Ancestor(arg_ok, arg_errno, VALUE(), VALUES()...)
  { }
  template<typename VALUE, typename... VALUES> Value<VALUE, VALUES...>::Value(bool arg_ok, int arg_errno, VALUE const &copy_in, VALUES const &...copies_in)
    : Ancestor(arg_ok, arg_errno, copy_in, copies_in...)
  { }
  template<typename VALUE, typename... VALUES> Value<VALUE, VALUES...>::Value(bool arg_ok, int arg_errno, VALUE &&move_in, VALUES &&...moves_in)
    : Ancestor(arg_ok, arg_errno, std::forward<VALUE>(move_in), std::forward<VALUES>(moves_in)...)
  { }
}
#endiv

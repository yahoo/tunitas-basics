// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys::call::argument {
  //
  // A call-site argument converter.
  // Avoid the combinatorial explosion of overloading by converting at the call site.
  //
  // The argument Converter<LHS, RHS1, RHS2, RHS3, RHS4...> is left-from-right like an assignment.
  // The underlyng converter::Conversion<SOURCE, TARGET> is ordered left-to-right like std::is_convertible<From, To>.
  //
  // Usage:
  //
  //   auto function(Converter<A>, Converter<B, C>, Converter<D, E, F>) -> Something;
  //
  template<typename MAIN, typename... ALTERNATES> struct Converter; 
}
#endiv
#divert <hpp>
#import sys.call.argument.converter.Telescope
namespace sys::call {
  template<typename MAIN, typename... ALTERNATES> class argument::Converter : public converter::Telescope<MAIN, ALTERNATES...> {
    using Ancestor = converter::Telescope<MAIN, ALTERNATES...>;
  public:
    Converter() = default;
    using Ancestor::Telescope;
  };
}
#endiv
ons.i

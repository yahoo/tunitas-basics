// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#forward sys.call.argument.Stringsite
#import sys.call.argument.required.stringsite.Resultable
#import std.vector
namespace sys::call::argument {
  //
  // Recover the stringable type from a Stringsite by explicit means
  // Always performs a copy.
  //
  // Usage:
  //
  //   auto ppp = as<char const *>(thing);
  //   auto csz = as<c::const_stringz>(thing);
  //   auto csn = as<c::const_stringn>(thing);
  //   auto csn = as<std::string>(thing);
  //   auto csn = as<std::string_view>(thing);
  //
  template<required::stringsite::Resultable RESULT> inline auto as(Stringsite const &) -> RESULT;
  // If a reference is desired, then disgorge that.
  template<> inline auto as<std::string const &>(Stringsite const &) -> std::string const &;
  // These must be specialized because they take a 2-arg constructor
  template<> inline auto as<std::vector<char>>(Stringsite const &) -> std::vector<char>;
}
#endiv
#divert <ipp>
#import sys.call.argument.Stringsite
#import sys.call.argument.detail.as
namespace sys::call::argument {
#if 10 == __GNUC__ && 0 == __GNUC_MINOR__ && 1 == __GNUC_PATCHLEVEL__
  // viz. gcc (GCC) 10.0.1 20200407 (experimental) [20200408:20200413-1752] of cxx-modules branch
#warning gcc 10.0.1 (cxx-modules) definition specializations for sys::call::argument::as<...>(...) are not available
#else
  template<> auto as<std::string const &>(Stringsite const &p) -> std::string const & {
    return p.preserved;
  }
  template<> auto as<std::vector<char>>(Stringsite const &p) -> std::vector<char> {
    return detail::as2<std::vector<char>>(p);
  }
#endif
}
#import std.is_same
namespace sys::call {
  template<argument::required::stringsite::Resultable RESULT> auto argument::as(Stringsite const &p) -> RESULT {
    static_assert(!std::is_same_v<RESULT, std::string const &>);
    return detail::as1<RESULT>(p);
  }
}
#endiv

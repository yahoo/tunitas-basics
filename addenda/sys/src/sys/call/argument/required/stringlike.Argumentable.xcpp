// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.call.argument.Pathstring
#import sys.call.argument.Pathname
#import std.is_same
// Do we need the complete type of these things?  No: if is_same; Yes: if is_base_of
// #include <hpp/sys.call.argument.Pathstring>
// #include <hpp/sys.call.argument.Pathname>
namespace sys::call::argument::required::stringlike {
  //
  // There are only two possible argument to
  //   detail::as1<RESULT>(ARGUMENT const &) -> RESULT;
  //   detail::as2<RESULT>(ARGUMENT const &) -> RESULT;
  //
  template<typename ARGUMENT> concept bool Argumentable = (std::is_same<ARGUMENT, Pathname>::value || std::is_same<ARGUMENT, Pathstring>::value);
}
#endiv

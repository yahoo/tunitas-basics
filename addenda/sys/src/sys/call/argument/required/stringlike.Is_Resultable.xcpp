// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import c.const_stringz
#import c.const_stringn
#import std.string
#import std.string_view
#import std.vector
namespace sys::call::argument::required::stringlike {
  //
  // Is the "stringish" RESULT type a possible result of 
  //   as<RESULT>(Pathname const &) -> RESULT;
  //   as<RESULT>(Pathstring const &) -> RESULT;
  //   detail::as1<RESULT>(ARGUMENT const &) -> RESULT;
  //   detail::as2<RESULT>(ARGUMENT const &) -> RESULT;
  //
  // See also the nearby concept Resultable<RESULT>
  // See also the nearby function as<<RESULT>(Pathname const &) -> RESULT
  //
  template<typename STRINGY> struct Is_Resultable;
  template<> struct Is_Resultable<char const *>;
  template<> struct Is_Resultable<c::const_stringz>;
  template<> struct Is_Resultable<c::const_stringn>;
  template<> struct Is_Resultable<std::string>;
  template<> struct Is_Resultable<std::string_view>;
  template<> struct Is_Resultable<std::vector<char>>;
  //
  // And you could specialize your stringy type here too!
  // One could imagine:
  //   template<> struct Is_Resultable<nonstd::const_dope<char>>;
  //   template<> struct Is_Resultable<c::const_buffer<char>>;
  // but no system call actually needs those.
  //
}
#endiv
#divert <hpp>
#import std.true_type
#import std.false_type
namespace sys::call::argument::required {
  template<typename STRINGY> struct stringlike::Is_Resultable : public std::false_type { };
}
namespace sys::call::argument::required::stringlike {
  // only the consty-pointer dope vector rypes; or the fully copying types
  // but remember ... only the consty ones
  template<> struct Is_Resultable<char const *> : public std::true_type { };
  template<> struct Is_Resultable<c::const_stringz> : public std::true_type { };
  template<> struct Is_Resultable<c::const_stringn> : public std::true_type { };
  template<> struct Is_Resultable<std::string> : public std::true_type { };
  template<> struct Is_Resultable<std::string const &> : public std::true_type { }; // werein we return the original reference 'preserved'
  template<> struct Is_Resultable<std::string_view> : public std::true_type { };
  template<> struct Is_Resultable<std::vector<char>> : public std::true_type { };
  // and you could specialize your stringy type here too!
}
#endiv

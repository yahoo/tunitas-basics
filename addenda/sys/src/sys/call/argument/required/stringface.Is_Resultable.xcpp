// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys::call::argument::required::stringface {
  //
  // Is the "stringish" RESULT type a possible result of 
  //   as<RESULT>(Pathname const &) -> RESULT;
  //
  // See also the nearby concept Resultable<RESULT>
  // See also the nearby function as<<RESULT>(Pathname const &) -> RESULT
  //
  template<typename STRINGY> struct Is_Resultable;
  //
  // And you could specialize your stringy type here too!
  // One could imagine:
  //   template<> struct Is_Resultable<nonstd::const_dope<char>>;
  //   template<> struct Is_Resultable<c::const_buffer<char>>;
  // but no system call actually needs those (so they are not provided).
}
#endiv
#divert <hpp>
#import std.true_type
#import std.false_type
#import sys.call.argument.required.stringlike.Is_Resultable
namespace sys::call::argument::required {
  template<typename STRINGY> struct stringface::Is_Resultable : public stringlike::Is_Resultable<STRINGY> { };
}
namespace sys::call::argument::required::stringface {
  // and you could specialize your stringy type here too!
  // but remember ... only the consty ones
}
#endiv

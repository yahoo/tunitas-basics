// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.call.argument.required.stringlike.Resultable
#import sys.call.argument.required.stringlike.Argumentable
#import c.const_stringz
namespace sys::call::argument::detail {
  //
  // The 1-arg or 2-arg constructor
  //
  // Usage: the templates as(Pathname const &)
  // Usage: the templates as(Pathstring const &)
  //
  template<required::stringlike::Resultable RESULT, required::stringlike::Argumentable ARGUMENT> inline auto as1(ARGUMENT const &) -> RESULT;
  template<required::stringlike::Resultable RESULT, required::stringlike::Argumentable ARGUMENT> inline auto as2(ARGUMENT const &) -> RESULT;
}
#endiv
#divert <ipp>
#import std.is_reference
namespace sys::call::argument {
  template<required::stringlike::Resultable RESULT, required::stringlike::Argumentable ARGUMENT> auto detail::as1(ARGUMENT const &argument) -> RESULT {
    static_assert(!std::is_reference_v<RESULT>); // ensure we avoid as1<std::string const &>(...)
    // Copy out with the 1-arg constructor, depending upon the trailing \0 sentinel
    return RESULT{argument.data()}; // e.g. c::stringz, std::string, std::string_view
  }
  template<required::stringlike::Resultable RESULT, required::stringlike::Argumentable ARGUMENT> auto detail::as2(ARGUMENT const &argument) -> RESULT {
    // Copy out with the 2-arg constructor, depending upon the trailing \0 sentinel
    auto const start = argument.data();
    auto const finish = start +  argument.size();
    return RESULT{start, finish}; // e.g. std::vector<char>
  }
}
#endiv

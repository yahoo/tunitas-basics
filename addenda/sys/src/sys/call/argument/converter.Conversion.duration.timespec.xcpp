// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.call.argument.converter.Conversion.declaration
#import sys.call.argument.required // cascade the namespaces
#import nonstd.required.Ratio
#import sys.time // ............. clocks::Base<...> (sic) ...... clocks::base<...>
#import sys.time.durations // ... durations::Base<...> (sic) ... durations::base<...>
#import sys.time.spec
namespace sys::call::argument::converter {
  template<required::Ratio RATIO> struct Conversion<time::durations::base<time::durations::integral_type, RATIO>, time::spec>;
}
#endiv
#divert <hpp>
#import sys.time.spec
#import sys.time.durations
namespace sys::call::argument::converter {
  template<required::Ratio RATIO> struct Conversion<time::durations::base<time::durations::integral_type, RATIO>, time::spec> {
    using Source = time::durations::base<time::durations::integral_type, RATIO>;
    using Target = time::spec;
    inline static auto convert(Source source) -> Target;
  };
}
#endiv
#divert <ipp>
#import sys.time.as
namespace sys::call::argument::converter {
  template<required::Ratio RATIO> auto Conversion<time::durations::base<time::durations::integral_type, RATIO>, time::spec>::convert(Source source) -> Target { return time::as<Target>(source); }
}
#endiv
#divert <cpp>
#import std.chrono.nanoseconds
namespace {
  namespace tests {
    using namespace sys::call::argument::converter;
    static_assert(sizeof (Conversion<std::chrono::nanoseconds, sys::time::spec>));
    static_assert(sizeof (Conversion<sys::time::durations::nanoseconds, sys::time::spec>));
  }
}
#endiv

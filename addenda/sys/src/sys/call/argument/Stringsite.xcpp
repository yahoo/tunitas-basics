// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys::call::argument {
  //
  // A "string site" is a site where a std::string is constructed or referenced.
  // Where a std::string is already present then the const reference is captured.
  //
  // This class is an implementation detail of glue at the interface of those functions.
  // You aren't expected to use this class directly.
  // It is a helper class to facilitate overload resolution in the syscalls.
  // e.g. see sys::posix::mkdirp(...)
  //
  // Reminder: the expectation is that Stringsite is a function *argument* where the
  // construction of the temporary at the call site is part of the functions' interface.
  //
  // Certain system calls, e.g. mkdirp, need to work on the string sense of the pathname..
  // Whereas the Stringface, immediately crushes out the std::string sense of the
  // std::string or std::fileystem::path object.  Here, it is preserved at the
  // cost of an optional copy-construction of a string, and an extra pointer.
  //
  // As with the Stringface, the lifetime of the Stringsite must be shorter than
  // the liftime of the objects upon which it is interfacing.  It is envisioned
  // only to be useful for doing argument conversions into the syscall functions.
  //
  // Lifetimes:
  //
  //   The lifetime of the constructor arguments must be longer than that of the Stringsite.
  //   WATCHOUT - this can't be checked or enforced in the type system.
  //
  // Usage:
  //
  //     auto mkdirp(Stringsite ps) -> Result {
  //        ...etc...
  //        vector<string> = split('/', ps); <-------------- where split requires a std::string const &
  //     }
  //
  // Without having to write multiple overloads for the same syscall (wrapper)
  //
  class Stringsite;
}
#endiv
#divert <hpp>
#import c.basic_stringn
#import c.basic_stringz
#import std.filesystem.path
#import std.move
#import std.optional
#import std.size_t
#import std.string
#import sys.call.argument.as.Stringsite
#import sys.call.argument.required.character.Narrow
#import sys.call.argument.required.stringsite.Resultable
#import sys.call.argument.str.Stringsite
namespace sys::call {
  namespace argument {
    using std::move;
  }
  class argument::Stringsite {
  public:
    // This preserves the original string by reference.
    inline [[implicit]] Stringsite(std::string const &);
    // These always copy the value into the prepared area.
    inline [[implicit]] Stringsite(std::string &&);
    // These templates are necessary to avoid the ambiguity inherent in all the implicit conversion constructors
    template<required::character::Narrow CHAR> inline [[implicit]] Stringsite(CHAR *);
    template<required::character::Narrow CHAR> inline [[implicit]] Stringsite(c::basic_stringz<CHAR>);
    template<required::character::Narrow CHAR> inline [[implicit]] Stringsite(c::basic_stringn<CHAR>);
    inline [[implicit]] Stringsite(std::filesystem::path const &);
    inline Stringsite(Stringsite const &);
    auto operator=(Stringsite const &) -> Stringsite & = delete;
    inline Stringsite(Stringsite &&);
    inline auto operator=(Stringsite &&) -> Stringsite & = delete; // because of the embedded reference
    inline operator char const *() const;
    inline auto data() const -> char const *;
    inline auto size() const -> std::size_t;
    inline auto empty() const -> bool;
    // Instead use argument::as<RESULT>(Stringsite const &)
    operator std::string const &() const = delete;
    operator c::const_stringz() const = delete;
  private:
    template<required::stringsite::Resultable RESULT> friend auto argument::as(Stringsite const &) -> RESULT;
    using Maybe = std::optional<std::string>;
    Maybe maybe;
    std::string const &preserved;
  };
}
#import std.is_copy_constructible
#import std.is_copy_assignable
#import std.is_move_constructible
#import std.is_move_assignable
namespace sys::call::argument {
  static_assert(std::is_copy_constructible_v<Stringsite>);
  static_assert(!std::is_copy_assignable_v<Stringsite>);
  static_assert(std::is_move_constructible_v<Stringsite>);
  static_assert(!std::is_move_assignable_v<Stringsite>);
}
#endiv
#divert <ipp>
namespace sys::call::argument {
  // a reference to the original string; do not copy
  Stringsite::Stringsite(std::string const &original)
    : maybe()
    , preserved(original)
  { }
  Stringsite::Stringsite(std::string &&temporary)
    : maybe(std::forward<std::string>(temporary))
    , preserved(maybe.value())
  { }
  // make a copy of the values in the maybe area
  template<required::character::Narrow CHAR> Stringsite::Stringsite(CHAR *raw)
    : maybe(raw)
    , preserved(maybe.value())
  { }
  template<required::character::Narrow CHAR> Stringsite::Stringsite(c::basic_stringz<CHAR> raw)
    : maybe(raw.data())
    , preserved(maybe.value())
  { }
  template<required::character::Narrow CHAR> Stringsite::Stringsite(c::basic_stringn<CHAR> raw)
    : maybe(raw.data())
    , preserved(maybe.value())
  { }
  Stringsite::Stringsite(std::filesystem::path const &original)
    : maybe(original.native())
    , preserved(maybe.value())
  { }
  Stringsite::Stringsite(Stringsite const &other)
    : maybe{other.maybe}
    , preserved{maybe ? maybe.value() : other.preserved} // tricky
  { }
  Stringsite::Stringsite(Stringsite &&other)
    : maybe{move(other.maybe)}
    , preserved{maybe ? maybe.value() : other.preserved} // tricky
  { }
  Stringsite::operator char const *() const {
    return preserved.c_str();
  }
  auto Stringsite::data() const -> char const * {
    return preserved.data();
  }
  auto Stringsite::size() const -> std::size_t {
    return preserved.size();
  }
  auto Stringsite::empty() const -> bool {
    return preserved.empty();
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.time.Duration
#forward sys.time.Point
#import sys.time.Old
#import sys.time.Since
#import sys.time.Spec
#import sys.time.Val
#forward sys.time.Managed
namespace sys::time {
  template<typename RESULT> auto cast(Duration const &) -> RESULT = delete;
  // DISALLOWED convert Duration <--> Managed ................. Point::time_since_epoch() for that.
  // ESPECIALLY DISALLOWED convert Duration <--> Point ... use Point::time_since_epoch() for that.
  // These time types naturally have a "duration sense" cast well as (arguably) a "point sense"
  template<> inline auto cast<Point>(Duration const &) -> Point = delete;
  template<> inline auto cast<Duration>(Duration const &) -> Duration; // and use duration_cast<...>(...) to change precision
  template<> inline auto cast<Since>(Duration const &) -> Since;
  template<> inline auto cast<Old>(Duration const &) -> Old;
  template<> inline auto cast<Val>(Duration const &) -> Val;
  template<> inline auto cast<Spec>(Duration const &) -> Spec;
  template<> inline auto cast<Managed>(Duration const &) -> Managed = delete;
}
#endiv
#divert <ipp>
template<> auto sys::time::cast<sys::time::Since>(Duration const &v0) -> Since { return Since{cast<Old>(v0).t_sec}; }
#import sys.time.Point
template<> auto sys::time::cast<sys::time::Old>(Duration const &v0) -> Old {
  auto v1 = Point{v0};
  auto v2 = Point::clock::to_time_t(v1);
  return {v2};
}
#import sys.time.duration_cast
#import std.int64_t
#import std.uint64_t
template<> auto sys::time::cast<sys::time::duration>(Duration const &v0) -> Duration { return v0; }
template<> auto sys::time::cast<sys::time::Val>(Duration const &v0) -> Val {
  auto const &v1{v0};
  durations::microseconds const v2(duration_cast<durations::microseconds>(v1));
  std::int64_t const micro_per_sec = std::micro::den;
  static_assert(1 < micro_per_sec, "micro/sec should be one million");
  static_assert(1 == std::micro::num, "micro should be fractional");
  val const v3 = {
    v2.count() / micro_per_sec,
    v2.count() % micro_per_sec,
  };
  return v3;
}
template<> auto sys::time::cast<sys::time::Spec>(duration const &v0) -> Spec {
  auto const &v1{v0};
  durations::nanoseconds const v2(duration_cast<durations::nanoseconds>(v1));
  std::int64_t const nano_per_sec = std::nano::den;
  static_assert(1 < nano_per_sec, "nano/sec should be one billion");
  static_assert(1 == std::nano::num, "nano should be fractional");
  spec const v3 = {
    v2.count() / nano_per_sec,
    v2.count() % nano_per_sec,
  };
  return v3;
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#forward sys.time.durations.literals
namespace sys {
  namespace time {
    namespace durations {
      namespace literals {

	// Medium (singular)
	constexpr inline fractional operator"" _nsec(long double);
	constexpr inline fractional operator"" _usec(long double);
	constexpr inline fractional operator"" _msec(long double);
	constexpr inline fractional operator"" _sec(long double);
	constexpr inline fractional operator"" _min(long double);
	constexpr inline fractional operator"" _hr(long double);

      }
    }
  }
}

#import sys.time.duration_cast

constexpr auto sys::time::durations::literals::operator"" _nsec(long double d) -> fractional {
    return duration_cast<fractional>(durations::fractional::nanoseconds(d));
}

constexpr auto sys::time::durations::literals::operator"" _usec(long double d) -> fractional {
    return duration_cast<fractional>(durations::fractional::microseconds(d));
}

constexpr auto sys::time::durations::literals::operator"" _msec(long double d) -> fractional {
    return duration_cast<fractional>(durations::fractional::milliseconds(d));
}

constexpr auto sys::time::durations::literals::operator"" _sec(long double d) -> fractional {
    return duration_cast<fractional>(durations::fractional::seconds(d));
}

constexpr auto sys::time::durations::literals::operator"" _min(long double d) -> fractional {
    return duration_cast<fractional>(durations::fractional::minutes(d));
}

constexpr auto sys::time::durations::literals::operator"" _hr(long double d) -> fractional {
    return duration_cast<fractional>(durations::fractional::hours(d));
}
#endiv


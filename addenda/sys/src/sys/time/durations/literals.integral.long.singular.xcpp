// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#forward sys.time.durations.literals
namespace sys {
  namespace time {
    namespace durations {
      namespace literals {

	// Long (singular)
	constexpr inline integral operator"" _nanosecond(unsigned long long);
	constexpr inline integral operator"" _microsecond(unsigned long long);
	constexpr inline integral operator"" _millisecond(unsigned long long);
	constexpr inline integral operator"" _second(unsigned long long);
	constexpr inline integral operator"" _minute(unsigned long long);
	constexpr inline integral operator"" _hour(unsigned long long);
	constexpr inline integral operator"" _day(unsigned long long);
	constexpr inline integral operator"" _week(unsigned long long);
	constexpr inline integral operator"" _month(unsigned long long);
	constexpr inline integral operator"" _year(unsigned long long);

      }
    }
  }
}

#import sys.time.duration_cast

constexpr auto sys::time::durations::literals::operator"" _nanosecond(unsigned long long n) -> integral {
    return duration_cast<integral>(durations::nanoseconds(n));
}

constexpr auto sys::time::durations::literals::operator"" _microsecond(unsigned long long n) -> integral {
    return duration_cast<integral>(durations::microseconds(n));
}

constexpr auto sys::time::durations::literals::operator"" _millisecond(unsigned long long n) -> integral {
    return duration_cast<integral>(durations::milliseconds(n));
}

constexpr auto sys::time::durations::literals::operator"" _second(unsigned long long n) -> integral {
    return duration_cast<integral>(durations::seconds(n));
}

constexpr auto sys::time::durations::literals::operator"" _minute(unsigned long long n) -> integral {
    return duration_cast<integral>(durations::minutes(n));
}

constexpr auto sys::time::durations::literals::operator"" _hour(unsigned long long n) -> integral {
    return duration_cast<integral>(durations::hours(n));
}

constexpr auto sys::time::durations::literals::operator"" _day(unsigned long long n) -> integral {
    return duration_cast<integral>(durations::days(n));
}

constexpr auto sys::time::durations::literals::operator"" _week(unsigned long long n) -> integral {
    return duration_cast<integral>(durations::weeks(n));
}

constexpr auto sys::time::durations::literals::operator"" _month(unsigned long long n) -> integral {
    return duration_cast<integral>(durations::months(n));
}

constexpr auto sys::time::durations::literals::operator"" _year(unsigned long long n) -> integral {
    return duration_cast<integral>(durations::years(n));
}
#endiv

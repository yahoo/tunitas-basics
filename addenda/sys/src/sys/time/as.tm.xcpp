// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.time.point
#import sys.time.duration
#import sys.time.spec
#import sys.time.t
#import sys.time.tm
#import sys.time.val
namespace sys {
  namespace time {
    template<typename RESULT> auto as(tm) -> RESULT = delete;
    template<> inline auto as<duration>(tm) -> duration = delete; // see the commentariat in as.duration.xcpp
    template<> inline auto as<point>(tm) -> point; // reasonable since tm is semantically a time point
    template<> inline auto as<spec>(tm) -> spec;
    template<> inline auto as<val>(tm) -> val;
    template<> inline auto as<t>(tm) -> t;
    template<> inline auto as<tm>(tm) -> tm;
  }
}
#endiv
#divert <ipp>
#import sys.time.unix
#import sys.time.as.t
template<> auto sys::time::as<sys::time::point>(tm v0) -> point {
    t const v1 = as<t>(v0);
    point const v2 = time::clock::base::from_time_t(v1);
    return v2;
}    

#import sys.time.as.t
#import sys.time.as.spec
template<> auto sys::time::as<sys::time::spec>(tm v0) -> spec {
    t const v1 = as<t>(v0);
    spec const v2 = as<spec>(v1);
    return v2;
}

#import sys.time.as.t
#import sys.time.as.val
template<> auto sys::time::as<sys::time::val>(tm v0) -> val {
    t const v1 = as<t>(v0);
    val const v2 = as<val>(v1);
    return v2;
}

#import timegm
#import std.system_error
#import std.system_category
#import errno
template<> auto sys::time::as<sys::time::t>(tm v0) -> t {
  // for a non-throwing interface, call sys::time::timegm(...) directly
  t const v1 = ::timegm(&v0);
  if (-1 == v1) {
    throw std::system_error{errno, std::system_category(), "timegm"};
  }
  return v1;
}

template<> auto sys::time::as<sys::time::tm>(tm v0) -> tm {
    return v0;
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.time.Point
#import sys.time.Duration
#import sys.time.Managed
#import sys.time.Old
#import sys.time.Since
#import sys.time.Spec
#import sys.time.Val
namespace sys::time {
  template<typename RESULT> auto cast(Spec::From const &) -> RESULT = delete;
  template<> inline auto cast<Point>(Spec::From const &) -> Point; // ......... dubious but allowed
  template<> inline auto cast<Duration>(Spec::From const &) -> Duration; // and use duration_cast<...>(...) to change precision
  template<> inline auto cast<Since>(Spec::From const &) -> Since;
  template<> inline auto cast<Old>(Spec::From const &) -> Old;
  template<> inline auto cast<Val>(Spec::From const &) -> Val;
  template<> inline auto cast<Spec>(Spec::From const &) -> Spec;
  template<> inline auto cast<Managed>(Spec::From const &) -> Managed;
}
#endiv
#divert <ipp>
#import sys.time.duration_cast
#import std.int64_t
#import sys.time.as
template<> auto sys::time::cast<sys::time::point>(Spec::From const &v0) -> Point {
  duration const v1{cast<time::duration>(v0)};
  return Point{v1};
}    
template<> auto sys::time::cast<sys::time::Duration>(Spec::From const &v0) -> Duration {
  // Properly formed or improperly formed
  durations::seconds     const v1_sec(v0.tv_sec);
  durations::nanoseconds const v1_nsec(v0.tv_nsec);
  durations::nanoseconds const v2_sec(duration_cast<durations::nanoseconds>(v1_sec));
  durations::nanoseconds const v2_nsec(v1_nsec);
  durations::nanoseconds const v3(v2_sec + v2_nsec);
  return duration_cast<duration>(v3);
}
template<> auto sys::time::cast<sys::time::Spec>(Spec::From const &v0) -> Spec { return v0; }
template<> auto sys::time::cast<sys::time::Val>(Spec::From const &v0) -> Val {
  std::int64_t const nano_per_sec = std::nano::den;
  static_assert(1 < nano_per_sec, "nano/sec should be one billion");
  static_assert(1 == std::nano::num, "micro should be fractional");
  if (v0.tv_nsec < nano_per_sec) {
    // Properly formed
    int64_t const nano_per_micro = std::nano::den/std::micro::den;
    static_assert(1 < nano_per_micro, "nano/micro should be one thousand");
    static_assert(1 == std::nano::num, "nano should be fractional");
    static_assert(1 == std::micro::num, "micro should be fractional");
    val v1 = {
      v0.tv_sec,
      v0.tv_nsec / nano_per_micro,
    };
    return v1;
  } else {
    // Improperly formed - this handles excess & overflow in v0.tv_nsec
    int64_t const micro_per_sec = std::micro::den;
    static_assert(1 < micro_per_sec, "micro/sec should be one million");
    static_assert(1 == std::micro::num, "micro should be fractional");
    durations::seconds const v1_sec(v0.tv_sec);
    durations::nanoseconds const v1_nsec(v0.tv_nsec);
    durations::nanoseconds const v2_sec(duration_cast<durations::nanoseconds>(v1_sec));
    durations::nanoseconds const v2_nsec(v1_nsec);
    durations::nanoseconds const v3(v2_sec + v2_nsec);
    durations::microseconds const v4(duration_cast<durations::microseconds>(v3));
    val const v5 = {
      v4.count() / micro_per_sec,
      v4.count() % micro_per_sec,
    };
    return v5;
  }
}
template<> auto sys::time::cast<sys::time::Since>(Spec::From const &v0) -> Since { return Since{cast<Old>(v0).t_sec}; }
template<> auto sys::time::cast<sys::time::Old>(Spec::From const &v0) -> Old {
  std::int64_t const nano_per_sec = std::nano::den;
  static_assert(1 < nano_per_sec, "nano/sec should be one billion");
  static_assert(1 == std::nano::num, "nano should be fractional");
  if (v0.tv_nsec < nano_per_sec) {
    // Properly formed
    return {v0.tv_sec};
  } else {
    // Improperly formed
    durations::seconds const v1_sec(v0.tv_sec);
    durations::nanoseconds const v1_nsec(v0.tv_nsec);
    durations::nanoseconds const v2_sec(duration_cast<durations::nanoseconds>(v1_sec));
    durations::nanoseconds const v2_nsec(v1_nsec);
    durations::nanoseconds const v3(v2_sec + v2_nsec);
    durations::seconds const v4(duration_cast<durations::seconds>(v3));
    t const v5(v4.count());
    return v5;
  }
}
#import sys.time.cast.Old
template<> auto sys::time::cast<sys::time::Managed>(Spec::From const &v0) -> Managed {
  auto const v1 = cast<Old>(v0);
  return cast<Managed>(v1);
}
#endiv

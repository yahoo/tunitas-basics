// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.time.point
#import sys.time.duration
#import sys.time.spec
#import sys.time.val
#import sys.time.t
#import sys.time.tm
namespace sys::time {
  template<typename RESULT> auto as(point) -> RESULT = delete;
  template<> inline auto as<duration>(point) -> duration = delete; // see the commentariat in as.duration.xcpp
  template<> inline auto as<point>(point) -> point;
  template<> inline auto as<spec>(point) -> spec;
  template<> inline auto as<val>(point) -> val;
  template<> inline auto as<t>(point) -> t;
  template<> inline auto as<tm>(point) -> tm;
}
#endiv
#divert <ipp>
#import sys.time.duration_cast
#import std.invalid_argument
#import std.int64_t
#import std.uint64_t
template<> auto sys::time::as<sys::time::point>(point v0) -> point {
    return v0;
}

template<> auto sys::time::as<sys::time::spec>(point v0) -> spec {
    point::duration const v1(v0.time_since_epoch());
    durations::nanoseconds const v2(duration_cast<durations::nanoseconds>(v1));
    std::int64_t const nano_per_sec = std::nano::den;
    static_assert(1 < nano_per_sec, "nano/sec should be one billion");
    static_assert(1 == std::nano::num, "nano should be fractional");
    spec const v3 = {
        v2.count() / nano_per_sec,
        v2.count() % nano_per_sec,
    };
    return v3;
}

template<> auto sys::time::as<sys::time::val>(point v0) -> val {
    point::duration const v1(v0.time_since_epoch());
    durations::microseconds const v2(duration_cast<durations::microseconds>(v1));
    std::int64_t const micro_per_sec = std::micro::den;
    static_assert(1 < micro_per_sec, "micro/sec should be one million");
    static_assert(1 == std::micro::num, "micro should be fractional");
    val const v3 = {
        v2.count() / micro_per_sec,
        v2.count() % micro_per_sec,
    };
    return v3;
}

template<> auto sys::time::as<sys::time::t>(point v0) -> t {
    t v1(point::clock::to_time_t(v0));
    return v1;
}

#import gmtime_r
#import sys.time.as.t
template<> auto sys::time::as<sys::time::tm>(point v0) -> tm {
    t const v1 = as<t>(v0);
    tm v2;
    if (nullptr == ::gmtime_r(&v1, &v2)) {
        throw std::invalid_argument("gmtime_r fails");
    }
    return v2;
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.time.Point
#import sys.time.Duration
#import sys.time.Managed
#import sys.time.Old
#import sys.time.Since
#import sys.time.Spec
#import sys.time.Val
namespace sys::time {
  template<typename RESULT> auto cast(Managed::From const &) -> RESULT = delete;
  template<> inline auto cast<Duration>(Managed::From const &) -> Duration = delete; // ... see the commentariat in cast.duration.xcpp
  template<> inline auto cast<Point>(Managed::From const &) -> Point; // ............... .. reasonable since tm is semantically a time point
  template<> inline auto cast<Since>(Managed::From const &) -> Since;
  template<> inline auto cast<Old>(Managed::From const &) -> Old;
  template<> inline auto cast<Val>(Managed::From const &) -> Val;
  template<> inline auto cast<Spec>(Managed::From const &) -> Spec;
  template<> inline auto cast<Managed>(Managed::From const &) -> Managed;
}
#endiv
#divert <ipp>
#import sys.time.as
template<> auto sys::time::cast<sys::time::Point>(Managed::From const &v0) -> Point {
  t const v1 = as<t>(v0);
  point const v2 = time::clock::base::from_time_t(v1);
  return v2;
}    
#import timegm
#import std.system_error
#import std.system_category
#import errno
template<> auto sys::time::cast<sys::time::Old>(Managed::From const &v0) -> Old {
  // for a non-throwing interface, call sys::time::timegm(...) directly
  // that ::timegm(...) returns a value AND side-effects its argument to normalize it
  auto copy = v0;
  t const v1 = ::timegm(&copy);
  if (-1 == v1) {
    throw std::system_error{errno, std::system_category(), "timegm"};
  }
  return {v1};
}
template<> auto sys::time::cast<sys::time::Since>(Managed::From const &v0) -> Since { return Since{cast<Old>(v0).t_sec}; }
#import sys.time.as.t
#import sys.time.as.val
template<> auto sys::time::cast<sys::time::Val>(Managed::From const &v0) -> Val {
  t const v1 = as<t>(v0);
  val const v2 = as<val>(v1);
  return {v2};
}
template<> auto sys::time::cast<sys::time::Spec>(Managed::From const &v0) -> Spec {
  t const v1 = as<t>(v0);
  spec const v2 = as<spec>(v1);
  return {v2};
}
template<> auto sys::time::cast<sys::time::Managed>(Managed::From const &v0) -> Managed { return v0; }
#endiv

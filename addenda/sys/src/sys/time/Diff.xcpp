// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.time // [[FIXTHIS]] everything is in the "namespace" module
#forward sys.time.Since
#import std.underlying_type
#import std.is_signed
namespace sys::time {
  //
  // Time DIFF(erence)
  //
  // Concept:
  //  
  //   This is the analog of sys::time::t, a.k.a. time_t (a large signed integer).
  //   As a struct so that it can have ADL status
  //   Rhymes with timeval and timespec.
  //   Continues with the traditional compiler-is-weak all-fields-must-be-uniquely-named  field.
  //
  // Traditions:
  //
  //   Flavored like POSIX with system time precision and semantics.
  //   However avoid the use of a type alias
  //
  // Relatives:
  //
  //   The sys::time::Since is analogous to std::chrono::time_point.
  //
  enum Diff : std::underlying_type_t<Since>;
  static_assert(std::is_signed_v<std::underlying_type_t<Diff>>);
}
#endiv
#divert <hpp>
#import nonstd.to_underlying
namespace sys::time {
  inline constexpr auto u(Diff d) { return nonstd::to_underlying(d); }
#if 10 <= __GNUC__
  inline constexpr auto operator<=>(Diff d1, Diff d2) { ... something something dark_side }
#else
  inline constexpr auto operator<(Diff d1, Diff d2)  { return u(d1) < u(d2); }
  inline constexpr auto operator<=(Diff d1, Diff d2) { return u(d1) <= u(d2); }
  inline constexpr auto operator>(Diff d1, Diff d2)  { return u(d1) > u(d2); }
  inline constexpr auto operator>=(Diff d1, Diff d2) { return u(d1) >= u(d2); }

#endif
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.time.Point
#import sys.time.Duration
#import sys.time.Managed
#import sys.time.Old
#import sys.time.Since
#import sys.time.Spec
#import sys.time.Val
namespace sys::time {
  template<typename RESULT> auto cast(Since) -> RESULT = delete;
  template<> inline auto cast<Point>(Since) -> Point; // ......... because Since is explicitly "since the epoch"
  template<> inline auto cast<Duration>(Since) -> Duration; // ... ibidem.
  template<> inline auto cast<Since>(Since) -> Since;
  template<> inline auto cast<Old>(Since) -> Old;
  template<> inline auto cast<Val>(Since) -> Val;
  template<> inline auto cast<Spec>(Since) -> Spec;
  template<> inline auto cast<Managed>(Since) -> Managed;
}
#endiv
#divert <ipp>
template<> auto sys::time::cast<sys::time::Point>(Since v0) -> Point       { return time::clock::base::from_time_t(u(v0)); }
template<> auto sys::time::cast<sys::time::Duration>(Since v0) -> Duration { return cast<Point>(v0).time_since_epoch(); }
template<> auto sys::time::cast<sys::time::Since>(Since v0) -> Since       { return v0; }
template<> auto sys::time::cast<sys::time::Old>(Since v0) -> Old           { return {u(v0)}; }
template<> auto sys::time::cast<sys::time::Val>(Since v0) -> Val           { return {u(v0), 0u}; }
template<> auto sys::time::cast<sys::time::Spec>(Since v0) -> Spec         { return {u(v0), 0u}; }
#import sys.time.cast.Old
template<> auto sys::time::cast<sys::time::Managed>(Since v0) -> Managed { return cast<Managed>(Old{u(v0)}); }
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.time.point
#import sys.time.duration
#import sys.time.spec
#import sys.time.val
#import sys.time.t
#import sys.time.tm
namespace sys::time {
  template<typename RESULT> auto as(spec) -> RESULT = delete;
  template<> inline auto as<point>(spec) -> point; // dubious but since time_t is both duration and point we allow it
  template<> inline auto as<duration>(spec) -> duration; // and use duration_cast<...>(...) to change precision
  template<> inline auto as<spec>(spec) -> spec;
  template<> inline auto as<val>(spec) -> val;
  template<> inline auto as<t>(spec) -> t;
  template<> inline auto as<tm>(spec) -> tm;
}
#endiv
#divert <ipp>
#import sys.time.duration_cast
#import std.int64_t

template<> auto sys::time::as<sys::time::duration>(spec v0) -> duration {
  // Properly formed or improperly formed
  durations::seconds     const v1_sec(v0.tv_sec);
  durations::nanoseconds const v1_nsec(v0.tv_nsec);
  durations::nanoseconds const v2_sec(duration_cast<durations::nanoseconds>(v1_sec));
  durations::nanoseconds const v2_nsec(v1_nsec);
  durations::nanoseconds const v3(v2_sec + v2_nsec);
  auto const v4 = duration_cast<duration>(v3);
  return v4;
}

template<> auto sys::time::as<sys::time::point>(spec v0) -> point {
  duration const v1{as<sys::time::duration>(v0)};
  point const v2(v1);
  return v2;
}    

template<> auto sys::time::as<sys::time::spec>(spec v0) -> spec {
  return v0;
}

template<> auto sys::time::as<sys::time::val>(spec v0) -> val {
  std::int64_t const nano_per_sec = std::nano::den;
  static_assert(1 < nano_per_sec, "nano/sec should be one billion");
  static_assert(1 == std::nano::num, "micro should be fractional");
  if (v0.tv_nsec < nano_per_sec) {
    // Properly formed
    int64_t const nano_per_micro = std::nano::den/std::micro::den;
    static_assert(1 < nano_per_micro, "nano/micro should be one thousand");
    static_assert(1 == std::nano::num, "nano should be fractional");
    static_assert(1 == std::micro::num, "micro should be fractional");
    val v1 = {
      v0.tv_sec,
      v0.tv_nsec / nano_per_micro,
    };
    return v1;
  } else {
    // Improperly formed - this handles excess & overflow in v0.tv_nsec
    int64_t const micro_per_sec = std::micro::den;
    static_assert(1 < micro_per_sec, "micro/sec should be one million");
    static_assert(1 == std::micro::num, "micro should be fractional");
    durations::seconds const v1_sec(v0.tv_sec);
    durations::nanoseconds const v1_nsec(v0.tv_nsec);
    durations::nanoseconds const v2_sec(duration_cast<durations::nanoseconds>(v1_sec));
    durations::nanoseconds const v2_nsec(v1_nsec);
    durations::nanoseconds const v3(v2_sec + v2_nsec);
    durations::microseconds const v4(duration_cast<durations::microseconds>(v3));
    val const v5 = {
      v4.count() / micro_per_sec,
      v4.count() % micro_per_sec,
    };
    return v5;
  }
}

template<> auto sys::time::as<sys::time::t>(spec v0) -> t {
  std::int64_t const nano_per_sec = std::nano::den;
  static_assert(1 < nano_per_sec, "nano/sec should be one billion");
  static_assert(1 == std::nano::num, "nano should be fractional");
  if (v0.tv_nsec < nano_per_sec) {
    // Properly formed
    t const v1(v0.tv_sec);
    return v1;
  } else {
    // Improperly formed
    durations::seconds const v1_sec(v0.tv_sec);
    durations::nanoseconds const v1_nsec(v0.tv_nsec);
    durations::nanoseconds const v2_sec(duration_cast<durations::nanoseconds>(v1_sec));
    durations::nanoseconds const v2_nsec(v1_nsec);
    durations::nanoseconds const v3(v2_sec + v2_nsec);
    durations::seconds const v4(duration_cast<durations::seconds>(v3));
    t const v5(v4.count());
    return v5;
  }
}

#import sys.time.as.t
template<> auto sys::time::as<sys::time::tm>(spec v0) -> tm {
  t const v1 = as<t>(v0);
  tm const v2 = as<tm>(v1);
  return v2;
}
#endiv

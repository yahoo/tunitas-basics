// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.time // [[FIXTHIS]] everything is in the "namespace" module
namespace sys::time {
  //
  // Time SINCE the epoch.
  //
  // Concept:
  //  
  //   This is the analog of sys::time::t, a.k.a. time_t (a large signed integer).
  //   As a struct so that it can have ADL status
  //   Rhymes with timeval and timespec.
  //   Continues with the traditional compiler-is-weak all-fields-must-be-uniquely-named  field.
  //
  // Traditions:
  //
  //   Flavored like POSIX with system time precision and semantics.
  //   However avoid the use of a type alias
  //
  // Relatives:
  //
  //   The sys::time::Since is analogous to std::chrono::time_point.
  //
  enum Since : time::t;
}
#endiv
#divert <hpp>
#import nonstd.to_underlying
#import sys.time.Diff
namespace sys::time {
  inline constexpr auto u(Since s) { return nonstd::to_underlying(s); }
  inline constexpr auto operator+(Since s, Diff d) { return Since(u(s) + u(d)); }
  inline constexpr auto operator+(Diff d, Since s) { return Since(u(s) + u(d)); }
  inline constexpr auto operator-(Since s1, Since s2) { return Diff(u(s1) - u(s2)); }
  inline constexpr auto operator-(Since s, Diff d) { return Since(u(s) - u(d)); }
#if 10 <= __GNUC__
  inline constexpr auto operator<=>(Since s1, Since s2) { ... something something dark_side }
#else
  inline constexpr auto operator<(Since s1, Since s2)  { return u(s1) < u(s2); }
  inline constexpr auto operator<=(Since s1, Since s2) { return u(s1) <= u(s2); }
  inline constexpr auto operator>(Since s1, Since s2)  { return u(s1) > u(s2); }
  inline constexpr auto operator>=(Since s1, Since s2) { return u(s1) >= u(s2); }

#endif
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.time.duration
#import sys.time.point
#import sys.time.spec
#import sys.time.val
#import sys.time.t
namespace sys::time {
  template<typename RESULT> auto as(duration) -> RESULT = delete;
  // DISALLOWED convert duration <--> tm ................. point::time_since_epoch() for that.
  // ESPECIALLY DISALLOWED convert duration <--> point ... use point::time_since_epoch() for that.
  // These time types naturally have a "duration sense" as well as (arguably) a "point sense"
  template<> inline auto as<point>(duration) -> point = delete;
  template<> inline auto as<duration>(duration) -> duration; // and use duration_cast<...>(...) to change precision
  template<> inline auto as<spec>(duration) -> spec;
  template<> inline auto as<val>(duration) -> val;
  template<> inline auto as<t>(duration) -> t;
}
#endiv
#divert <ipp>
#import sys.time.duration_cast
#import std.int64_t
#import std.uint64_t
template<> auto sys::time::as<sys::time::duration>(duration v0) -> duration {
  return v0;
}
template<> auto sys::time::as<sys::time::spec>(duration v1) -> spec {
  durations::nanoseconds const v2(duration_cast<durations::nanoseconds>(v1));
  std::int64_t const nano_per_sec = std::nano::den;
  static_assert(1 < nano_per_sec, "nano/sec should be one billion");
  static_assert(1 == std::nano::num, "nano should be fractional");
  spec const v3 = {
    v2.count() / nano_per_sec,
    v2.count() % nano_per_sec,
  };
  return v3;
}
template<> auto sys::time::as<sys::time::val>(duration v1) -> val {
  durations::microseconds const v2(duration_cast<durations::microseconds>(v1));
  std::int64_t const micro_per_sec = std::micro::den;
  static_assert(1 < micro_per_sec, "micro/sec should be one million");
  static_assert(1 == std::micro::num, "micro should be fractional");
  val const v3 = {
    v2.count() / micro_per_sec,
    v2.count() % micro_per_sec,
  };
  return v3;
}
#import sys.time.point
template<> auto sys::time::as<sys::time::t>(duration v0) -> t {
  point v1{v0};
  t v2(point::clock::to_time_t(v1));
  return v2;
}
#endiv

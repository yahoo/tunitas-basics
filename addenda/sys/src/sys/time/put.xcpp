// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.time.detail.Putter
#import sys.time.required.Time
#import sys.time.required.Char
#import sys.time.required.Char_Traits
#import std.basic_string
namespace sys::time {
  //
  // For TIME in { time::points::base<C,D>, time::spec, time::t, time::val }
  // Usage:
  //     using sys::time::put;
  //
  //     sys::time::point val = ...
  //     out << put(val, "%s") << '\n';
  //
  //     sys::time::spec val = ...
  //     out << put(val, "%s") << '\n';
  //
  //     ... and so on ...
  //
  // But recall, std::time_put and std::put_time are vastly confusing; something about the locale theory.
  //
  // Yet the the std ones, they both,
  // they take only a pointer to a 'struct tm' (a pointer!), just like the old days.
  // they only take a pointer to a 'CHAR const *' (a pointer to z-bounded space!), just like the bad old days.
  //
  // They are a very very thin wrapper around strftime(...)
  // They expect a simplistic use in & around the single-threaded POSIX calls gmtime(...) and localtime(...)
  //      out << std::put_time(std::localtime(&t), L"%A %c") << '\n';
  //
  // template<class CharT> auto put_time(std::tm const *, CharT const *fmt) -> /*unspecified*/;
  // template<class CharT, class OutputIt = std::ostreambuf_iterator<CharT>> class time_put;
  //
  // http://www.cplusplus.com/reference/iomanip/put_time/
  //
  // http://en.cppreference.com/w/cpp/io/manip/put_time
  // http://en.cppreference.com/w/cpp/locale/time_put
  //
  // The lifetime of the format string must be longer than that of the call.
  // The lifetime of the TIME not relevant; it is is pass by value.
  template<required::Time TIME, required::Char CHAR, required::Char_Traits<CHAR> TRAITS, typename ALLOC> inline auto put(TIME, std::basic_string<CHAR, TRAITS, ALLOC> const &format) -> detail::Putter<CHAR>;
  template<required::Time TIME, required::Char CHAR> inline auto put(TIME, CHAR const *format) -> detail::Putter<CHAR>;
}
#endiv
#divert <ipp>
#import sys.time.point
#import sys.time.as
template<sys::time::required::Time TIME, sys::time::required::Char CHAR, sys::time::required::Char_Traits<CHAR> TRAITS, typename ALLOC> auto sys::time::put(TIME item, std::basic_string<CHAR, TRAITS, ALLOC> const &format) -> detail::Putter<CHAR> {
  return detail::Putter<CHAR>(time::as<time::point>(item), format.data());
}
template<sys::time::required::Time TIME, sys::time::required::Char CHAR> auto sys::time::put(TIME item, CHAR const *format) -> detail::Putter<CHAR> {
  return detail::Putter<CHAR>(time::as<time::point>(item), format);
}
#endiv

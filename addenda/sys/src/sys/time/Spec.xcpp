// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys::time {
  //
  // The time "SPEC"ification
  //
  // Concept:
  //
  //   Nanoseconds.
  //   Not at global scope; ADL capable.
  //
  //   If you want more fluidity & facilities then use duration::Nanoseconds.
  //
  // Traditions:
  //
  //   Keep with the POSIX tradition of dropping vowels and consonants.
  //   Keep with the POSIX tradition of arbitrary names like "spec" contra "value"
  //    
  struct Spec;
}
#endiv
#divert <hpp>
#import sys.time // [[FIXTHIS]] everything is in the "namespace" module
class sys::time::Spec : public time::spec {
  using Ancestor = time::spec;
public:
  using From = Ancestor;
  constexpr Spec() noexcept : Ancestor{spec{}} { }
  constexpr Spec(Ancestor const &a) noexcept : Ancestor{a} { }
  constexpr Spec(time_t whole, long fraction) noexcept : Ancestor{whole, fraction} { }
  using Ancestor::timespec;
};
#endiv

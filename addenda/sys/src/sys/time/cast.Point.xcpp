// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.time.Point
#import sys.time.Duration
#import sys.time.Old
#import sys.time.Since
#import sys.time.Spec
#import sys.time.Val
#import sys.time.Managed
namespace sys::time {
  template<typename RESULT> auto cast(Point const &) -> RESULT = delete;
  template<> inline auto cast<Duration>(Point const &) -> Duration = delete; // see the commentariat in cast.duration.xcpp
  template<> inline auto cast<Point>(Point const &) -> Point;
  template<> inline auto cast<Since>(Point const &) -> Since;
  template<> inline auto cast<Old>(Point const &) -> Old;
  template<> inline auto cast<Val>(Point const &) -> Val;
  template<> inline auto cast<Spec>(Point const &) -> Spec;
  template<> inline auto cast<Managed>(Point const &) -> Managed;
}
#endiv
#divert <ipp>
#import sys.time.duration_cast
#import std.int64_t
#import std.uint64_t
template<> auto sys::time::cast<sys::time::Point>(Point const &v0) -> Point { return v0; }
template<> auto sys::time::cast<sys::time::Since>(Point const &v0) -> Since { return Since{cast<Old>(v0).t_sec}; }
template<> auto sys::time::cast<sys::time::Old>(Point const &v0) -> Old {
    t v1(point::clock::to_time_t(v0));
    return {v1};
}
template<> auto sys::time::cast<sys::time::Val>(Point const &v0) -> Val {
    point::duration const v1(v0.time_since_epoch());
    durations::microseconds const v2(duration_cast<durations::microseconds>(v1));
    std::int64_t const micro_per_sec = std::micro::den;
    static_assert(1 < micro_per_sec, "micro/sec should be one million");
    static_assert(1 == std::micro::num, "micro should be fractional");
    val const v3 = {
        v2.count() / micro_per_sec,
        v2.count() % micro_per_sec,
    };
    return v3;
}
template<> auto sys::time::cast<sys::time::Spec>(Point const &v0) -> Spec {
    point::duration const v1(v0.time_since_epoch());
    durations::nanoseconds const v2(duration_cast<durations::nanoseconds>(v1));
    std::int64_t const nano_per_sec = std::nano::den;
    static_assert(1 < nano_per_sec, "nano/sec should be one billion");
    static_assert(1 == std::nano::num, "nano should be fractional");
    spec const v3 = {
        v2.count() / nano_per_sec,
        v2.count() % nano_per_sec,
    };
    return v3;
}
#import gmtime_r
#import sys.time.cast.Old
#import std.invalid_argument
template<> auto sys::time::cast<sys::time::Managed>(Point const &v0) -> Managed {
    auto v1 = cast<Old>(v0);
    auto v2 = Managed{};
    if (nullptr == ::gmtime_r(&v1.t_sec, &v2)) {
        throw std::invalid_argument("gmtime_r fails");
    }
    return v2;
}
#endiv

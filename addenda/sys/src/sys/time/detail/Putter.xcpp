// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys::time::detail {
  template<typename CHAR> struct Putter;
}
#endiv
#divert <hpp>
#import std.basic_ostream
namespace sys::time::detail {
  template<typename CHAR, typename TRAITS> inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, Putter<CHAR> const &) -> std::basic_ostream<CHAR, TRAITS> &;
}

#import sys.time.point
template<typename CHAR> struct sys::time::detail::Putter {
public:
  inline Putter(point value, CHAR const *format);
  point value;
  CHAR const *format;
};
#endiv
#divert <ipp>
#import std.put_time
#import std.system_error
#import sys.time.tm
#import sys.posix.localtime
template<typename CHAR, typename TRAITS> auto sys::time::detail::operator<<(std::basic_ostream<CHAR, TRAITS> &o, detail::Putter<CHAR> const &p) -> std::basic_ostream<CHAR, TRAITS> & {
  auto lt = posix::localtime(p.value); // DO NOT USE buf = time::as<time::tm>(p.value); as that produces a struct tm in UTC.
  if (!good(lt)) {
    throw std::system_error(error_code(lt), "localtime");
  }
  auto const &buf = value(lt);
  return o << std::put_time(&buf, p.format);
}

template<typename CHAR> sys::time::detail::Putter<CHAR>::Putter(time::point arg_value, CHAR const *arg_format)
  : value(arg_value)
  , format(arg_format) {
  ;
}
#endiv

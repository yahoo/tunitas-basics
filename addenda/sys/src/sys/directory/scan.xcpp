// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.directory
#import sys.call.argument.Pathname
#import sys.directory.detail.scan.Result
namespace sys::directory {
  //
  // TODO ... Concepts
  //
  // CONTAINER is a template<typename> CONTAINER<Entry>
  //
  // SELECTOR is a function(oid) of signature
  //     auto SELECTOR(Entry const &) -> bool;
  //     e.g. [](Entry const &item) -> bool { return true; }
  //          [](Entry const &item) -> bool { return "." == item.substr(0, 1); }
  //
  // COMPARATOR is a function object of signature
  //     auto COMPARATOR::operator(Entry const &, Entry const &) -> bool;
  //     e.g. std::less<Entry>
  //          std::greater<Entry>
  //
  // n.b. if you want an interface that slurps up the directory entry names (only)
  // and does not pull in the sys::directory::Entry (sys::directory::entry) structure
  // then use ::slurp::directory::read<...>(...).  This is the system-level interface
  // that produces a container of system-level structures.
  //
  template<typename CONTAINER> auto scan(call::argument::Pathname) -> detail::scan::Result<CONTAINER>;
  template<typename CONTAINER, typename SELECTOR> auto scan(call::argument::Pathname, SELECTOR) -> detail::scan::Result<CONTAINER>;
  template<typename CONTAINER, typename SELECTOR, typename COMPARATOR> inline auto scan(call::argument::Pathname, SELECTOR, COMPARATOR) -> detail::scan::Result<CONTAINER>;
  namespace {
    template<typename CONTAINER, typename SELECTOR> auto scandir(call::argument::Pathname, SELECTOR) -> detail::scan::Result<CONTAINER>;
    template<typename CONTAINER, typename SELECTOR, typename COMPARATOR> auto scandir(call::argument::Pathname, SELECTOR, COMPARATOR) -> detail::scan::Result<CONTAINER>;
  }
}
#endiv
#divert <ipp>
#import std.move
#import sys.directory.Entry
template<typename CONTAINER> auto sys::directory::scan(call::argument::Pathname n) -> detail::scan::Result<CONTAINER> {
  auto all = [](Entry const &) -> bool { return true; };
  return std::move(scan<CONTAINER>(n, all));
}

#import std.sort
#import std.move
template<typename CONTAINER, typename SELECTOR, typename COMPARATOR> auto sys::directory::scan(call::argument::Pathname n, SELECTOR s, COMPARATOR c) -> detail::scan::Result<CONTAINER> {
  auto ret = scan<CONTAINER>(n, s);
  if (ok(ret)) {
    CONTAINER &retval = value(ret);
    std::sort(retval.begin(), retval.end(), c);
  }
  return ret;
}

namespace sys {
  namespace directory {
    namespace {
      // Because the "-dir" suffix is amusing to the legacy C-language interface
      template<typename CONTAINER, typename SELECTOR> auto scandir(call::argument::Pathname n, SELECTOR s) -> detail::scan::Result<CONTAINER> {
        return std::move(scan<CONTAINER>(n, s));
      }
      template<typename CONTAINER, typename SELECTOR, typename COMPARATOR> auto scandir(call::argument::Pathname n, SELECTOR s, COMPARATOR c) -> detail::scan::Result<CONTAINER> {
        return std::move(scan<CONTAINER>(n, s, c));
      }
    }
  }
}
#endiv
#divert <tpp>
#import sys.directory.open
#import sys.directory.read
#import sys.directory.Entry
#import sys.directory.Guard
#import std.is_same
#import std.move
template<typename CONTAINER, typename SELECTOR> auto sys::directory::scan(call::argument::Pathname name, SELECTOR selector) -> detail::scan::Result<CONTAINER> {
  //
  // Until Concepts of gcc6, we use static_assert to ensure that CONTAINER is actually a container
  // of sys;:directory::Entry (not something weeker like sys::directory::entry or std::string)
  //
  static_assert(std::is_same<Entry, typename CONTAINER::value_type>::value, "not a sys::directory::Entry");
  using open_type = detail::open::Result;
  // We have to read<Entry> because we are copying the data out ... we cannot store read<entry*> values, they are overwritten
  using read_type = detail::read::Result<Entry>;
  using result_type = detail::scan::Result<CONTAINER>;
  result_type ret;
  open_type opened;
  Guard<open_type> guard(opened);
  opened = open(name);
  if (!ok(opened)) {
    ret = result_type(ok(opened), error_num(opened));
  } else {
    read_type read;
    CONTAINER &retval = value(ret);
    while (ok(read = directory::read<Entry>(value(opened)))) {
      Entry &e = value(read);
      if (selector(e)) {
        retval.push_back(std::move(e));
      }
    }
  }
  return ret;
}
#endiv

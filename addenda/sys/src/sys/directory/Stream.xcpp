// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys {
  namespace directory {
    class Stream;
  }
}
#endiv
#divert <hpp>
#import sys.directory.Entry
#import std.string
namespace sys {
  namespace directory {
    inline auto operator>>(Stream &, std::string &fill) -> Stream &;
    inline auto operator>>(Stream &, Entry &fill) -> Stream &;
  }
}

#import std.swap
namespace std {
  inline auto swap(sys::directory::Stream &, sys::directory::Stream &) -> void;
}

#import c.const_stringz
#import sys.directory.DIR
#import std.string
#import sys.call.result.Value
class sys::directory::Stream {
public:
  inline Stream();
  inline explicit Stream(c::const_stringz pathname);
  // This captures the descriptor and closes it upon destruction
  inline explicit Stream(DIR *descriptor);
  // no copy semantic
  Stream(Stream const &) = delete;
  auto operator=(Stream const &) -> Stream & = delete;
  // yes move semantic
  inline Stream(Stream &&);
  inline auto operator=(Stream &&) -> Stream &;
  inline ~Stream();
  inline auto is_open() -> bool;
  inline auto open(c::const_stringz pathname) -> sys::call::result::Value<bool>; // nope, not detail::open::Result
  inline auto close() -> sys::call::result::Value<bool>;
  inline operator bool() const;
  inline auto operator!() const -> bool;
  // avoid...
  inline auto reset(DIR * = nullptr) -> void;
  inline auto release() -> DIR *;
  inline auto dir() const -> DIR *;
protected:
  friend auto directory::operator>>(Stream &, std::string &fill) -> Stream &;
  friend auto directory::operator>>(Stream &, Entry &fill) -> Stream &;
  friend auto std::swap(Stream &, Stream &) -> void;
  DIR *descriptor;
};
#endiv
#divert <ipp>

#import sys.directory.read
auto sys::directory::operator>>(Stream &s, std::string &fill) -> Stream & {
  if (s) {
    auto red = read<std::string>(s.descriptor);
    if (ok(red)) {
      fill = value(red);
    } else {
      s.close();
    }
  }
  return s;
}

auto sys::directory::operator>>(Stream &s, Entry &fill) -> Stream & {
  if (s) {
    auto red = read<Entry>(s.descriptor);
    if (ok(red)) {
      fill = value(red);
    } else {
      s.close();
    }
  }
  return s;
}

auto std::swap(sys::directory::Stream &a, sys::directory::Stream &b) -> void {
  std::swap(a.descriptor, b.descriptor);
}

sys::directory::Stream::Stream()
  : descriptor(nullptr) {
}

auto sys::directory::Stream::is_open() -> bool {
  return nullptr != this->descriptor;
}

sys::directory::Stream::Stream(c::const_stringz pathname)
  : Stream() {
  open(pathname);
}

sys::directory::Stream::Stream(DIR *arg_descriptor)
  : descriptor(arg_descriptor) {
  ;
}

#import std.forward
sys::directory::Stream::Stream(Stream &&anon)
  : descriptor(anon.descriptor) {
  anon.descriptor = nullptr;
}

#import sys.directory.close
#import std.swap
sys::directory::Stream::~Stream() {
  if (nullptr != this->descriptor) {
    DIR *tmp(nullptr);
    std::swap(tmp, this->descriptor);
    // Ignore the return value (what else can we do in a destructor?)
    (void)directory::close(tmp);
  }
}

#import std.swap
auto sys::directory::Stream::operator=(Stream &&anon) -> Stream & {
  Stream tmp(std::forward<Stream>(anon));
  std::swap(*this, tmp);
  return *this;
}

#import sys.directory.open
#import std.move
auto sys::directory::Stream::open(c::const_stringz pathname) -> sys::call::result::Value<bool> {
  using result_type = sys::call::result::Value<bool>;
  auto opened = directory::open(pathname);
  result_type ret(ok(opened), error_num(opened), ok(opened));
  if (ok(ret)) {
    this->descriptor = value(opened);
  }
  return ret;
}

#import sys.directory.close
auto sys::directory::Stream::close() -> sys::call::result::Value<bool> {
  using result_type = sys::call::result::Value<bool>;
  if (nullptr == this->descriptor) {
    return result_type();
  } else {
    DIR *tmp(nullptr);
    std::swap(tmp, this->descriptor);
    auto closed = directory::close(tmp);
    result_type ret(ok(closed), error_num(closed), ok(closed));
    return ret;
  }
}

sys::directory::Stream::operator bool() const {
  return nullptr != this->descriptor;
}

auto sys::directory::Stream::operator!() const -> bool {
  return nullptr == this->descriptor;
}

auto sys::directory::Stream::reset(DIR *other) -> void {
  Stream tmp(other);
  std::swap(tmp, *this);
}

auto sys::directory::Stream::release() -> DIR * {
  DIR *tmp(nullptr);
  std::swap(this->descriptor, tmp);
  return tmp;
}

auto sys::directory::Stream::dir() const -> DIR * {
  return this->descriptor;
}
#endiv

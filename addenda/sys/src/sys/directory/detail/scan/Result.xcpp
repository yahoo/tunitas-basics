// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys {
  namespace directory {
    namespace detail {
      namespace scan {
        template<typename CONTAINER> class Result;
      }
    }
  }
}
#endiv
#divert <hpp>
#import sys.call.result.Value
namespace sys {
  namespace directory {
    namespace detail {
      namespace scan {
        using sys::call::result::ok;
        using sys::call::result::errnum;
        using sys::call::result::value;
      }
    }
  }
}

//
// Usage
//     Result<CONTAINER> - with CONTAINER being any STL container over directory::entry or directory:Entry
//
#import sys.call.result.Value
template<typename CONTAINER> class sys::directory::detail::scan::Result : public call::result::Value<CONTAINER> {
  using ancestor = call::result::Value<CONTAINER>;
public:
  using container_type = CONTAINER;
  inline Result();
  inline explicit Result(bool ok);
  inline Result(bool ok, int errnum_errno);
  inline Result(bool ok, int errnum_errno, container_type const &);
  inline Result(bool ok, int errnum_errno, container_type &&);
};
#endiv
#divert <ipp>
template<typename CONTAINER> sys::directory::detail::scan::Result<CONTAINER>::Result()
  : ancestor(true, 0, CONTAINER()) {
  ;
}

#include <cerrno>
template<typename CONTAINER> sys::directory::detail::scan::Result<CONTAINER>::Result(bool arg_ok)
  : ancestor(arg_ok, errno, CONTAINER()) {
}

template<typename CONTAINER> sys::directory::detail::scan::Result<CONTAINER>::Result(bool arg_ok, int arg_errno)
  : ancestor(arg_ok, arg_errno, CONTAINER()) {
}

template<typename CONTAINER> sys::directory::detail::scan::Result<CONTAINER>::Result(bool arg_ok, int arg_errno, container_type const &copy_in)
  : ancestor(arg_ok, arg_errno, copy_in) {
  ;
}

#import std.move
template<typename CONTAINER> sys::directory::detail::scan::Result<CONTAINER>::Result(bool arg_ok, int arg_errno, container_type &&move_in)
  : ancestor(arg_ok, arg_errno, std::forward<container_type>(move_in)) {
  ;
}
#endiv

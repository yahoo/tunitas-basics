// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.call.result.Value
namespace sys {
  namespace directory {
    namespace detail {
      namespace read {
        template<typename ENTRY> class Result;
      }
    }
  }
}
#endiv
#divert <hpp>
namespace sys {
  namespace directory {
    namespace detail {
      namespace read {
        using sys::call::result::ok;
        using sys::call::result::errnum;
        using sys::call::result::value;
        // read::Result is a complete new type so that ADL will find this (one) function
        template<typename ENTRY> inline auto eof(Result<ENTRY> const &) -> bool;
      }
    }
  }
}

//
// Usage
//     Result<ENTRY> - with ENTRY being any STL entry over directory::entry or directory:Entry
//
#import sys.call.result.Value
template<typename ENTRY> class sys::directory::detail::read::Result : public call::result::Value<ENTRY, bool /*eof*/> {
  // n.b.  the 3rd & 4th positions of the tuple are different than the 3rd & 4th position of the constructor
  //
  // tuple - the 'ENTRY' is in the 3rd position so that value(...) will find it.
  // constructor - The constructor puts 'eof' the 3rd position and the 'entry' in the 4th position
  //               for consistency with the theme that "metadata goes first, payload data goes second"
  //
  // One can have EOF without having 'entry' payload metadta.
  using ancestor = call::result::Value<ENTRY, bool>;
public:
  using entry_type = ENTRY;
  inline Result();
  inline explicit Result(bool ok);
  inline Result(bool ok, int errnum_errno);
  inline Result(bool ok, int errnum_errno, bool eof);
  inline Result(bool ok, int errnum_errno, bool eof, entry_type const &);
  inline Result(bool ok, int errnum_errno, bool eof, entry_type &&);
};
#endiv
#divert <ipp>
#import std.get
template<typename ENTRY> auto sys::directory::detail::read::eof(Result<ENTRY> const &r) -> bool {
  return std::get<3>(r);
}

template<typename ENTRY> sys::directory::detail::read::Result<ENTRY>::Result()
  : ancestor(true, 0, ENTRY(), false) {
  ;
}

#include <cerrno>
template<typename ENTRY> sys::directory::detail::read::Result<ENTRY>::Result(bool arg_ok)
  : ancestor(arg_ok, errno, ENTRY(), false) {
}

template<typename ENTRY> sys::directory::detail::read::Result<ENTRY>::Result(bool arg_ok, int arg_errno)
  : ancestor(arg_ok, arg_errno, ENTRY(), false) {
}

template<typename ENTRY> sys::directory::detail::read::Result<ENTRY>::Result(bool arg_ok, int arg_errno, bool arg_eof)
  : ancestor(arg_ok, arg_errno, ENTRY(), arg_eof) {
}

template<typename ENTRY> sys::directory::detail::read::Result<ENTRY>::Result(bool arg_ok, int arg_errno, bool arg_eof, entry_type const &copy_in)
  : ancestor(arg_ok, arg_errno, copy_in, arg_eof) {
  ;
}

#import std.forward
template<typename ENTRY> sys::directory::detail::read::Result<ENTRY>::Result(bool arg_ok, int arg_errno, bool arg_eof, entry_type &&move_in)
  : ancestor(arg_ok, arg_errno, std::forward<entry_type>(move_in), arg_eof) {
  ;
}
#endiv

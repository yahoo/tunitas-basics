// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import c.const_stringn
#import c.const_stringz
#import nonstd.required.Stringlike
#import std.filesystem.path
#import std.is_same
#import std.string
#import std.string_view
#import sys.required // cascade that certain namespace
namespace sys::un::required {
  //
  // The possible path values for un::path(Sockaddr)
  // Something stringy or filesystem-path-like
  //
  template<typename STRING> concept Path = (std::is_same_v<STRING, char const *> ||
                                            std::is_same_v<STRING, c::const_stringn> ||
                                            std::is_same_v<STRING, c::const_stringz> ||
                                            std::is_same_v<STRING, std::string_view> || // .... [[FIXTHIS]] should have "or descendants" and variants here too
                                            nonstd::required::Stringlike<STRING> || // ........ being std::string or descendants (but allowing no other representation)
                                            std::is_same_v<STRING, std::filesystem::path>);
}
#endiv
#divert <cpp>
#import c.basic_stringn
#import c.basic_stringz
namespace {
  namespace tests {
    using namespace sys::un;
    static_assert(!required::Path<char *>);
    static_assert(required::Path<char const *>);
    static_assert(!required::Path<c::basic_stringz<char>>);
    static_assert(required::Path<c::basic_stringz<char const>>);
    static_assert(!required::Path<c::basic_stringz<char>>);
    static_assert(required::Path<c::basic_stringz<char const>>);
    static_assert(required::Path<std::string>);
    static_assert(required::Path<std::string_view>);
    static_assert(required::Path<std::filesystem::path>);
  }
}
#endiv

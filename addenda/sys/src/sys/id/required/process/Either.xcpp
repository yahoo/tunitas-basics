// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.is_same
#import sys.id.process.Process
#import sys.id.process.Group
#import sys.id.process.Either
namespace sys::id::required::process {
  //
  // The constituents of the process::Either
  // With the various possibilities for the Variant and the subspace.
  //
  namespace either {
    using namespace std;
    namespace id = sys::id::process;
    template<typename EITHER> concept Variant = is_same_v<EITHER, id::Either>;
    template<typename EITHER> concept Subspace = (is_same_v<EITHER, id::Process> || is_same_v<EITHER, id::Group>);
    template<typename EITHER> concept Combined = Variant<EITHER> || Subspace<EITHER>;
  }
  template<typename EITHER> concept Either = either::Combined<EITHER>;
}
#endiv
#divert <cpp>
#import sys.id.process.Process
#import sys.id.process.Group
#import sys.id.process.Either
#import sys.id.process.Thread
#import id_t
#import pid_t
namespace {
  namespace tests {
    using namespace sys::id::required::process;
    static_assert(Either<sys::id::process::Process>);
    static_assert(Either<sys::id::process::Group>);
    static_assert(Either<sys::id::process::Either>);
    static_assert(!Either<sys::id::process::Thread>);
    static_assert(!Either<pid_t>);
    static_assert(!Either<id_t>);
  }
}
#endiv

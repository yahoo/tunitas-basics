// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import id_t
#import sys.p.Type
#import std.is_integral
#import std.tuple
#import std.false_type
#import std.true_type
namespace sys::id::required::school {
  //
  // The original POSIX types
  // (ahem, 32-bit) signed integers and unsigned integers
  // never enumerations, never structures (classes)
  //
  // pure: int, unsigned int, long, unsigned long
  //
  // honorific typedef names
  //     pid_t contra id_t
  //     off_t contra size_t contra ssize_t
  //     int (signal, file descriptor, etc)
  //
  // and because we must ... tuples of such.
  // and tuple<p::Type, id_t> ... we're not purists in this.
  //
  namespace [[detail]] old_beau {
    using namespace std;
    template<typename TYPE> concept Basis = is_integral_v<TYPE>;
    namespace [[detail, cannot("name this namespace tuple")]] two_pull {
      template<typename TYPE> struct Deconstructor : public false_type { };
      template<typename... TYPES> requires (true && ... && Basis<TYPES>) struct Deconstructor<tuple<TYPES...>> : public true_type { };
      template<typename TYPE> concept Tuple = Deconstructor<TYPE>::value;
    }
    using two_pull::Tuple;
    namespace [[detail]] except_for_the {
      template<typename TYPE> concept Exceptions = is_same_v<TYPE, tuple<p::Type, id_t>>;
    }
    template<typename TYPE> concept Old = Basis<TYPE> || Tuple<TYPE> || except_for_the::Exceptions<TYPE>;
  }
  using old_beau::Old;
}
#endiv
#divert <cpp>
#import sys.id.File
#import sys.id.Process
#import sys.id.Signal
#import sys.id.Wait
#import sys.id.process.Process
#import sys.id.process.Group
#import sys.id.process.Thread
#import sys.id.process.Any
#import sys.id.process.Either
#import sys.id.wait.Untyped
#import sys.id.wait.Typed
#import pid_t
#import id_t
#import gid_t
#import uid_t
#import off_t
#import sys.id.wait.Typed // wherein lives typed_t
namespace {
  namespace tests {
    using namespace sys::id::required::school;
    static_assert(!Old<sys::id::File>);
    static_assert(!Old<sys::id::Process>);
    static_assert(!Old<sys::id::Signal>);
    static_assert(!Old<sys::id::Wait>);
    static_assert(!Old<sys::id::process::Either>);
    static_assert(!Old<sys::id::process::Any>);
    static_assert(!Old<sys::id::wait::Typed>);
    static_assert(!Old<sys::id::wait::Untyped>);
    //
    static_assert(Old<pid_t>);
    static_assert(Old<id_t>);
    static_assert(Old<size_t>);
    static_assert(Old<ssize_t>);
    static_assert(Old<off_t>);
    static_assert(Old<sys::id::wait::typed_t>);
  }
}
#endiv

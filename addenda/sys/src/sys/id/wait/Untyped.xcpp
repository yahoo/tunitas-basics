// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.wait.Identifier
namespace sys::id::wait {
  //
  // either <----> id_t <-------> Wait
  // process <---> pid_t <------> process::Process
  // group <-----> pgid_t <-----> process::Group            n.b. pgid_t is not an actual type
  // thread <----> pid_t <------> process::Thread
  //
  // And yet to work with variant process-or-group identifiers or thread-or-process-or-group
  //                   ...                                       prefer id::process::Group
  //                   prefer id::process::Process               prefer id::process::Process
  //                   prefer id::process::Group                 prefer id::process::Group
  //                   prefer id::process::Either                prefer id::process::Any
  //
  // id_t can be a pid_t (positive) or a pgid_t (negative)
  // to wit:
  //    id  < -1    meaning wait for any child process whose process group ID is equal to the absolute value of pid.
  //    id == -1    meaning wait for any child process.
  //    id ==  0    meaning wait for any child process whose process group ID is equal to that of the calling process.
  //    id  >  0    meaning wait for the child whose process ID is equal to the value of pid.
  //
  using Untyped = sys::wait::Identifier;
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import pid_t
namespace sys::id::process {
  //
  // Process Identifier (pid)
  //
  enum class Process : pid_t;
}
#endiv
#divert <hpp>
#import std.underlying_type
#import id_t
#import sys.p.Type
#import std.tuple
namespace sys::id::process {
  //
  // Yes, WATCHOUT - the Process data type can hold a Group.
  // The POSIX convention is ot use a boxed integer with the sign bit playing the role of a type key.
  // This leaves place for a third type ... but they hack it with id_t and sys::f::Owner 
  //
  inline constexpr auto is_thread(Process) -> bool    { return false; }
  inline constexpr auto is_process(Process p) -> bool { return 0 <= std::underlying_type_t<Process>(p); }
  inline constexpr auto is_group(Process p) -> bool   { return std::underlying_type_t<Process>(p) < 0; }
  //
  inline constexpr auto identify(Process p) -> std::tuple<p::Type, id_t> { return {p::Type::PROCESS, id_t(p)}; }
}
#endiv
#divert <cpp>
namespace {
  namespace tests {
    using namespace sys::id::process;
    static_assert(is_process(Process{}));
    static_assert(is_process(Process{1}));
    static_assert(!is_process(Process{-1}));
    //
    static_assert(!is_group(Process{}));
    static_assert(!is_group(Process{1}));
    static_assert(is_group(Process{-1}));
  }
}
#endiv

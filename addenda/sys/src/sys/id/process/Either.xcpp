// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.id.process.Process
#import sys.id.process.Group
#import std.variant
namespace sys::id::process {
  // Because splitting each of these on-liners out into separate modules is excessive
  // but sure, why not?
  using Either = std::variant<Process, Group>;
}
#endiv
#divert <hpp>
#import id_t
#import std.common_type
#import std.tuple
#import std.underlying_type
#import sys.p.Type
namespace sys::id::process {
  namespace packaging::of_Either::disgorge {
    using namespace std;
    using namespace id::process;
    // [[FIXTHIS]] ... is there a way to enumerate the alternative types?
    using Result = common_type_t<underlying_type_t<Process>, underlying_type_t<Group>>;
    namespace function {
      inline auto disgorge(Either) -> Result;
    }
  }
  namespace packaging::of_Either::identify {
    using namespace id::process;
    using Result = std::tuple<p::Type, id_t>;
    using P = p::Type;
    namespace function {
      inline auto identify(Either) -> Result;
    }
  }
  using packaging::of_Either::disgorge::function::disgorge; // so ADL will find it
  namespace packaging::of_Either::is {
    namespace function {
      inline auto is_group(Either) -> bool;
      inline auto is_process(Either) -> bool;
      inline auto is_thread(Either) -> bool;
    }
  }
  // declarations, so ADL will find them.
  using packaging::of_Either::is::function::is_group;
  using packaging::of_Either::is::function::is_process;
  using packaging::of_Either::is::function::is_thread;
}
#endiv
#divert <ipp>
#import nonstd.Visitor
#import std.visit // [[FIXTHIS]] when available, #import nonstd.visit;
#import std.underlying_type
namespace sys::id::process::packaging::of_Either {
  using nonstd::Visitor;
  using std::visit;
  using namespace id::process;
  namespace disgorge {
    auto function::disgorge(Either e) -> Result {
      auto v = Visitor{[](Process p) { return (pid_t)p; }, // .... expected to be positive
                       [](Group g)   { return (pid_t)g; }}; // ... expected to be negative
      return visit(v, e);
    }
  }
  namespace identify {
    auto function::identify(Either e) -> Result {
      using UG = std::underlying_type_t<Group>;
      auto v = Visitor{[](Process p) { return Result{P::PROCESS, id_t(p)}; }, // ... p was expected to be positive
                       [](Group g)   { return Result{P::GROUP, id_t(-UG(g))}; }}; // ... g was expected to be negative
      return visit(v, e);
    }
  }
  namespace is {
    auto function::is_group(Either e) -> bool {
      auto v = Visitor{[](Process) { return false; },
                       [](Group)   { return true; }};
      return visit(v,  e);
    }
    auto function::is_process(Either e) -> bool {
      auto v = Visitor{[](Process) { return true; },
                       [](Group)   { return false; }};
      return visit(v,  e);
    }
  }
}
#endiv

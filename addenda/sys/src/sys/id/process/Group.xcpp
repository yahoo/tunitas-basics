// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
// NO SUCH ---> #import pgid_t <--- NO SUCH
#import pid_t
namespace sys::id::process {
  //
  // Process Group
  //
  // A process group number is (almost) always & everywhere a negative id::Process
  // (except when it isn't, and those are documented [[WHERE]])
  //
  enum class Group : pid_t;
}
#endiv
#divert <hpp>
#import std.underlying_type
#import sys.id.process.Process
#import id_t
#import sys.p.Type
#import std.tuple
namespace sys::id::process {
  //
  // WATCHOUT - the sign convention is respected here.
  // A valid process group (Group) is expected to be negative.
  // See further commentariat in sysid.process.Process
  //
  inline constexpr auto is_thread(Group) -> bool    { return false; }
  inline constexpr auto is_process(Group g) -> bool { return 0 < std::underlying_type_t<Group>(g); }
  inline constexpr auto is_group(Group g) -> bool   { return std::underlying_type_t<Group>(g) <= 0; }
  //
  inline constexpr auto processof(Group g) -> Process { return Process{-(std::underlying_type_t<Group>)(g)}; }
  inline constexpr auto groupof(Process p) -> Group   { return Group{-(std::underlying_type_t<Process>)(p)}; }
  //
  inline constexpr auto identify(Group g) -> std::tuple<p::Type, id_t> { return {p::Type::GROUP, id_t(-std::underlying_type_t<Group>(g))}; }
}
#endiv
#divert <cpp>
namespace {
  namespace tests {
    using namespace sys::id::process;
    static_assert(!is_process(Group{}));
    static_assert(is_process(Group{1}));
    static_assert(!is_process(Group{-1}));
    //
    static_assert(is_group(Group{}));
    static_assert(!is_group(Group{1}));
    static_assert(is_group(Group{-1}));
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
//
// The same thing as sys::errc, but named and numbered according to POSIX
// AND according to the actual system that you are on now.
// This is the naming that you remember from POSIX
//
// Plays well with
//
//   std::error_condition
//   std::error_code
//   std::system_error
//
// Usage:
//
//   using sys::posix::E;
//   auto e = E::SUCCESS;
//   auto ec = std::error_code{E::BADF};
//   throw std::system_error{E::BADF};
//
#include <cerrno>
namespace sys::e {
  enum class Condition {
    SUCCESS = 0,
    // want to say something like 'using enum class'
    // want to say "inherits from" enum class std::errc
    //
    // Instead we copypasta and hope for the best.
    // This is cut out of 
    //   /usr/include/c++/8/x86_64-redhat-linux/bits/error_constants.h
    //   libstdc++-devel-8.2.1-5.fc29.x86_64
    //
    // What else are we to do? "you use macros when you run out of language"
    //
    ADDRESS_FAMILY_NOT_SUPPORTED         = EAFNOSUPPORT,
    ADDRESS_IN_USE                       = EADDRINUSE,
    ADDRESS_NOT_AVAILABLE                = EADDRNOTAVAIL,
    ALREADY_CONNECTED                    = EISCONN,
    ARGUMENT_LIST_TOO_LONG               = E2BIG,
    ARGUMENT_OUT_OF_DOMAIN               = EDOM,
    BAD_ADDRESS                          = EFAULT,
    BAD_FILE_DESCRIPTOR                  = EBADF,

#ifdef EBADMSG
    BAD_MESSAGE                          = EBADMSG,
#endif

    BROKEN_PIPE                          = EPIPE,
    CONNECTION_ABORTED                   = ECONNABORTED,
    CONNECTION_ALREADY_IN_PROGRESS       = EALREADY,
    CONNECTION_REFUSED                   = ECONNREFUSED,
    CONNECTION_RESET                     = ECONNRESET,
    CROSS_DEVICE_LINK                    = EXDEV,
    DESTINATION_ADDRESS_REQUIRED         = EDESTADDRREQ,
    DEVICE_OR_RESOURCE_BUSY              = EBUSY,
    DIRECTORY_NOT_EMPTY                  = ENOTEMPTY,
    EXECUTABLE_FORMAT_ERROR              = ENOEXEC,
    FILE_EXISTS                          = EEXIST,
    FILE_TOO_LARGE                       = EFBIG,
    FILENAME_TOO_LONG                    = ENAMETOOLONG,
    FUNCTION_NOT_SUPPORTED               = ENOSYS,
    HOST_UNREACHABLE                     = EHOSTUNREACH,

#ifdef EIDRM
    IDENTIFIER_REMOVED                   = EIDRM,
#endif

    ILLEGAL_BYTE_SEQUENCE                = EILSEQ,
    INAPPROPRIATE_IO_CONTROL_OPERATION   = ENOTTY,
    INTERRUPTED                          = EINTR,
    INVALID_ARGUMENT                     = EINVAL,
    INVALID_SEEK                         = ESPIPE,
    IO_ERROR                             = EIO,
    IS_A_DIRECTORY                       = EISDIR,
    MESSAGE_SIZE                         = EMSGSIZE,
    NETWORK_DOWN                         = ENETDOWN,
    NETWORK_RESET                        = ENETRESET,
    NETWORK_UNREACHABLE                  = ENETUNREACH,
    NO_BUFFER_SPACE                      = ENOBUFS,
    NO_CHILD_PROCESS                     = ECHILD,

#ifdef ENOLINK
    NO_LINK                              = ENOLINK,
#endif

    NO_LOCK_AVAILABLE                    = ENOLCK,

#ifdef ENODATA
    NO_MESSAGE_AVAILABLE                 = ENODATA,
#endif

    NO_MESSAGE                           = ENOMSG,
    NO_PROTOCOL_OPTION                   = ENOPROTOOPT,
    NO_SPACE_ON_DEVICE                   = ENOSPC,

#ifdef ENOSR
    NO_STREAM_RESOURCES                  = ENOSR,
#endif

    NO_SUCH_DEVICE_OR_ADDRESS            = ENXIO,
    NO_SUCH_DEVICE                       = ENODEV,
    NO_SUCH_FILE_OR_DIRECTORY            = ENOENT,
    NO_SUCH_PROCESS                      = ESRCH,
    NOT_A_DIRECTORY                      = ENOTDIR,
    NOT_A_SOCKET                         = ENOTSOCK,

#ifdef ENOSTR
    NOT_A_STREAM                         = ENOSTR,
#endif

    NOT_CONNECTED                        = ENOTCONN,
    NOT_ENOUGH_MEMORY                    = ENOMEM,

#ifdef ENOTSUP
    NOT_SUPPORTED                        = ENOTSUP,
#endif

#ifdef ECANCELED
    OPERATION_CANCELED                   = ECANCELED,
#endif

    OPERATION_IN_PROGRESS                = EINPROGRESS,
    OPERATION_NOT_PERMITTED              = EPERM,
    OPERATION_NOT_SUPPORTED              = EOPNOTSUPP,
    OPERATION_WOULD_BLOCK                = EWOULDBLOCK,

#ifdef EOWNERDEAD
    OWNER_DEAD                           = EOWNERDEAD,
#endif

    PERMISSION_DENIED                    = EACCES,

#ifdef EPROTO
    PROTOCOL_ERROR                       = EPROTO,
#endif

    PROTOCOL_NOT_SUPPORTED               = EPROTONOSUPPORT,
    READ_ONLY_FILE_SYSTEM                = EROFS,
    RESOURCE_DEADLOCK_WOULD_OCCUR        = EDEADLK,
    RESOURCE_UNAVAILABLE_TRY_AGAIN       = EAGAIN,
    RESULT_OUT_OF_RANGE                  = ERANGE,

#ifdef ENOTRECOVERABLE
    STATE_NOT_RECOVERABLE                = ENOTRECOVERABLE,
#endif

#ifdef ETIME
    STREAM_TIMEOUT                       = ETIME,
#endif

#ifdef ETXTBSY
    TEXT_FILE_BUSY                       = ETXTBSY,
#endif

    TIMED_OUT                            = ETIMEDOUT,
    TOO_MANY_FILES_OPEN_IN_SYSTEM        = ENFILE,
    TOO_MANY_FILES_OPEN                  = EMFILE,
    TOO_MANY_LINKS                       = EMLINK,
    TOO_MANY_SYMBOLIC_LINK_LEVELS        = ELOOP,

#ifdef EOVERFLOW
    VALUE_TOO_LARGE                      = EOVERFLOW,
#endif

    WRONG_PROTOCOL_TYPE                  = EPROTOTYPE
    //
    // Linux-specific values
    // NONE ... use sys::e::Code if you need non-standard or vendor-specific values.
  };
}
#endiv
#divert <hpp>
#import std.error_condition
namespace sys::e {
  inline auto make_error_condition(Condition) -> std::error_condition;
}
#endiv
#divert <ipp>
#import std.generic_category
auto sys::e::make_error_condition(Condition condition) -> std::error_condition {
  // "basically" the same as std::make_error_condition
  return std::error_condition{(int) condition, std::generic_category()};
}
#endiv

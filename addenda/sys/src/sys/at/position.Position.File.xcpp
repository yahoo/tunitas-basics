// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.id.File
#import sys.at.position.Position.declaration
namespace sys::at::position {
  //
  // The id::File variant of the file descriptor convenience.
  // Major commentariat is in sys.at.position.Position.declaration
  //
  template<> struct Position<id::File>;
}
#endiv
#divert <hpp>
#forward sys.at.position.Position.int
#import sys.at.Cwd
#forward sys.fd.Managed
#import sys.id.File
namespace sys::at::position {
  template<> class Position<id::File> {
    using Managed = fd::Managed;
    using File = id::File;
  public:
    inline [[implicit]] Position(int directory);
    inline [[implicit]] Position(fd::Managed const &);
    inline [[implicit]] Position(id::File);
    inline [[implicit]] Position(Cwd);
    using Value = id::File;
    inline explicit operator Value() const;
  protected:
    Value directory;
    friend struct Position<int>;
  };
}
#endiv
#divert <ipp>
#import sys.fd.Managed
namespace sys::at::position {
  Position<id::File>::Position(int directory) : directory{directory} { } 
  Position<id::File>::Position(Managed const &directory) : directory{(int)directory.get()} { }
  Position<id::File>::Position(File directory) : directory{(int)directory} { }
  Position<id::File>::Position(Cwd cwd) : directory{(int)cwd} { }
  Position<id::File>::operator Value() const { return directory; }
}
#endiv

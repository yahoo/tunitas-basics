// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.flags.Flags
#import sys.at.Flag
namespace sys::at {
  //
  // A bitmask of the (singular) Flag
  // Constructed with operators and casts
  //
  // This is a class so that we can get the implicit constructor promotion from Flag to Flags.
  //
  namespace flags {
    using Single = Flag;
    // WATCHOUT - this can't be defaulted.
    // It must be 'signed int' so that Flags::Value will match the POSIX-specified system call signatures
    using Carrier = int;
  }
  using Flags = sys::flags::Flags<flags::Single, flags::Carrier>;
}
#endiv
#divert <hpp>
#import std.underlying_type
namespace sys::at {
  namespace packaging::flags {
    using Uf = std::underlying_type_t<Flag>;
    namespace bundle {
      inline constexpr auto operator|(Flag a, Flag b) -> Flags { return Flags{(Uf) a | (Uf)b}; }
      inline constexpr auto operator&(Flag a, Flag b) -> Flags { return Flags{(Uf) a & (Uf)b}; }
      inline constexpr auto operator~(Flag b) -> Flags         { return Flags{~(Uf)b}; } // no known bitwidth limitations
    }
  }
  // NOT HELPFUL ---> using namespace packaging::flags::bundle; <--- NOT HELPFUL ENOUGH
  // In order for ADL to find these, we need to have a declaration positioned (not just visibility)
  using packaging::flags::bundle::operator|;
  using packaging::flags::bundle::operator&;
  using packaging::flags::bundle::operator~;
}
#endiv

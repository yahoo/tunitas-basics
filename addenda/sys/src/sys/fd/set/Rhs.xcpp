// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys::fd::set {
  //
  // A proxy object to support read access from the Set
  //
  // Usage:
  //
  //   auto const set = Set{...somehow...};
  //   if (set[99]) {
  //      ...blah blah blah...
  //   }
  //
  class Rhs;
}
#endiv
#divert <hpp>
#forward sys.fd.set.Set
#forward sys.fd.set.Iterator
#import sys.fd.set.Indirect
struct sys::fd::set::Rhs : public set::Indirect<Set const> {
  using ancestor = set::Indirect<Set const>;
protected:
  friend class set::Set;
  template<Constancy> friend class set::Iterator;
  // The caller must guarantee the bounds-check.
  //  e.g. Set::operator[] or Set::at()
  //  e.g. Iterator::operator*
  inline Rhs(Set const &owner, Index index) : ancestor{owner, index} { }
};
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys::fd::set {
  //
  // The set for the purposes of (select(2)
  //
  // Usage:
  //
  //   Set rd, wr, ex;
  //   auto selected = select(read(rd), write(wr), except);
  //
  class Set;
}
#endiv
#divert <hpp>
#import std.size_t
#forward sys.fd.set.Indirect
#forward sys.fd.set.Lhs
#forward sys.fd.set.Rhs
#forward sys.fd.set.Iterator
#forward sys.fd.set.Reference
struct sys::fd::set::Set {
  inline Set();
  // New School
  using Value = bool;
  using Index = std::size_t;
  // old_school
  using value_type = Value;
  // by convention, these are unchecked
  inline auto operator[](Index) const -> bool;
  inline auto operator[](Index) -> Lhs;
  // by convention, these are bounds-checked
  inline auto at(Index) const -> bool;
  inline auto at(Index) -> Lhs;
  inline auto empty() const -> bool; // ......... WATCHOUT - returns whether any bit is set
  inline auto size() const -> std::size_t; // ... WATCHOUT - returns the count of bits actually set to true
  constexpr auto capacity() const -> std::size_t { return SIZE; }
  using iterator = set::Iterator<set::MUTABLE>;
  inline auto begin() -> iterator;
  inline auto end() -> iterator;
  using const_iterator = set::Iterator<set::CONSTANT>;
  inline auto begin() const -> const_iterator;
  inline auto end() const -> const_iterator;
  inline auto clear() -> void;
  inline auto clear(Index) -> void;
  inline auto set(Index, bool = true) -> void;
  inline auto is_set(Index) const -> bool; // these are silly
  inline auto is_unset(Index) const -> bool;
protected:
  // Pretty much every class in namespace sys::fd::set gets access
  template<Constancy> friend class set::Iterator;
  template<Purpose> friend class set::Reference;
  template<typename> friend class set::Indirect;
  friend class set::Lhs;
  friend class set::Rhs;
  ::fd_set core; // these are heavy, avoid copying
};
#endiv
#divert <ipp>
#import sys.fd.set.Lhs
#import sys.fd.set.Rhs
#import sys.fd.set.Iterator
#import std.out_of_range
namespace sys::fd::set {
  Set::Set() {
    FD_ZERO(&core);
  }
  auto Set::operator[](Index index) const -> bool {
    return FD_ISSET(index, &core);
  }
  auto Set::operator[](Index index) -> Lhs {
    return Lhs{*this, index};
  }
  auto Set::at(Index index) const -> bool {
    if (SIZE <= index) { throw std::out_of_range{"index"}; }
    return FD_ISSET(index, &core);
  }
  auto Set::at(Index index) -> Lhs {
    if (SIZE <= index) { throw std::out_of_range{"index"}; }
    return Lhs{*this, index};
  }
  auto Set::empty() const -> bool {
    for (auto rhs : *this) {
      if (rhs) { return false; }
    }
    return true;
  }
  auto Set::size() const -> std::size_t {
    auto count = 0lu;
    for (auto rhs : *this) {
      if (rhs) { ++count; }
    }
    return count;
  }
  auto Set::begin() -> iterator {
    return iterator{*this, 0};
  }
  auto Set::end() -> iterator {
    return iterator{*this, SIZE};
  }
  auto Set::begin() const -> const_iterator {
    return const_iterator{*this, 0};
  }
  auto Set::end() const -> const_iterator {
    return const_iterator{*this, SIZE};
  }
  auto Set::clear() -> void {
    FD_ZERO(&core);
  }
  auto Set::clear(Index index) -> void {
    at(index) = false;
  }
  auto Set::set(Index index, bool value) -> void {
    at(index) = value;
  }
  auto Set::is_set(Index index) const -> bool {
    return true == at(index);
  }
  auto Set::is_unset(Index index) const -> bool {
    return false == at(index);
  }
}
#endiv
#divert <cpp>
#import nonstd.required.Container
namespace sys::fd::set {
  static_assert(nonstd::required::Container<Set>);
}
#endiv

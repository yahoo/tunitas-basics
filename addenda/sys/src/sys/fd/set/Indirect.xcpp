// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys::fd::set {
  //
  // A proxy object to support read or write access from the Set
  // Descendants only; only descending into Lhs adn Rhs
  // OWNER is Set or Set const.
  //
  // Usage:
  //
  //   See set::Lhs or set::Rhs
  //
  template<typename OWNER> class Indirect;
}
#endiv
#divert <hpp>
#forward sys.fd.set.Set
#forward sys.fd.set.Iterator
#import std.size_t
template<typename OWNER> struct sys::fd::set::Indirect {
  inline operator bool() const;
  using Index = std::size_t;
  inline auto index() const -> Index;
protected:
  ~Indirect() = default;
  friend class set::Set;
  template<Constancy> friend class set::Iterator;
  // The caller must bounds-check
  //  e.g. Set::operator[] or Set::at()
  //  e.g. Iterator::operator*
  using Owner = OWNER;
  Indirect(Owner &, Index);
  Owner &owner;
  Index owner_index;
};
#endiv
#divert <ipp>
#import sys.fd.set.Set
namespace sys::fd::set {
  template<typename _> Indirect<_>::Indirect(Owner &owner, Index idx) : owner{owner}, owner_index{idx} { }
  template<typename _> Indirect<_>::operator bool() const { return FD_ISSET(owner_index, &owner.core); }
  template<typename _> auto Indirect<_>::index() const -> Index { return owner_index; }
}
#endiv

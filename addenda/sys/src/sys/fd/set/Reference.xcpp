// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys::fd::set {
  //
  // The purposes of a fd::Set can be colored on their references
  //
  // Usage: 
  //
  //   auto s = Set{...somehow...}
  //   auto r = read(s);
  //   auto w = write(s);
  //   auto e = except(s);
  //   auto selected = select(r);
  //   auto selected = select(w);
  //   auto selected = select(e);
  //   auto selected = select(r, w);
  //   auto selected = select(w, e);
  //   auto selected = select(r, w, e);  ... ahem, you get the idea ...
  //
  enum class Purpose { READ, WRITE, EXCEPT };
  template<Purpose> struct Reference;
}
#endiv
#divert <hpp>
#import std.reference_wrapper
#import std.optional
#forward sys.fd.set.Set
namespace sys::fd {
  template<set::Purpose SET_PURPOSE> struct set::Reference  : public std::reference_wrapper<Set> {
    // Always 'Set', never 'Set const' because select(2) modifies its arguments, always
    using Ancestor = std::reference_wrapper<Set>;
  public:
    inline static Purpose const PURPOSE = SET_PURPOSE;
    using Optional = std::optional<Reference>;
    // New School
    using Value = Ancestor::type;
    inline explicit Reference(Set &);
    inline explicit Reference(Ancestor const &);
    inline auto operator=(Ancestor const &) -> Reference &;
    auto operator=(Reference const &) -> Reference & = default;
    // Returns the address of the referenced Set
    inline auto repointer() const -> ::fd_set *;
  };
}
namespace sys::fd::set {
  // This is used by sys::posix::select(...) and sys::posix::pselect(...)
  // The POSIX C APIs use indirections (pointers and nullptr) to signal optional values.
  // As such, this is an implementation detail within the implementation detail namespace
  template<Purpose PURPOSE> inline auto repointer(std::optional<Reference<PURPOSE>>) -> ::fd_set *;
}
namespace sys::fd::set {
  inline auto read() -> Reference<Purpose::READ>::Optional;
  inline auto read(Set &) -> Reference<Purpose::READ>::Optional;
  inline auto read(Reference<Purpose::READ>::Optional) -> Reference<Purpose::READ>::Optional;
}
namespace sys::fd::set {
  inline auto write() -> Reference<Purpose::WRITE>::Optional;
  inline auto write(Set &) -> Reference<Purpose::WRITE>::Optional;
  inline auto write(Reference<Purpose::WRITE>::Optional) -> Reference<Purpose::WRITE>::Optional;
}
namespace sys::fd::set {
  inline auto except() -> Reference<Purpose::EXCEPT>::Optional;
  inline auto except(Set &) -> Reference<Purpose::EXCEPT>::Optional;
  inline auto except(Reference<Purpose::EXCEPT>::Optional) -> Reference<Purpose::EXCEPT>::Optional;
}
#endiv
#divert <ipp>
#import sys.fd.set.Set
#import std.ref
namespace sys::fd {
  auto set::read() -> Reference<Purpose::READ>::Optional {
    return Reference<Purpose::READ>::Optional{};
  }
  auto set::read(Set &s) -> Reference<Purpose::READ>::Optional {
    return Reference<Purpose::READ>::Optional{std::ref(s)};
  }
  auto set::read(std::optional<Reference<Purpose::READ>> s) -> Reference<Purpose::READ>::Optional {
    return s;
  }
}
namespace sys::fd {
  auto set::write() -> Reference<Purpose::WRITE>::Optional {
    return Reference<Purpose::WRITE>::Optional{};
  }
  auto set::write(Set &s) -> Reference<Purpose::WRITE>::Optional {
    return Reference<Purpose::WRITE>::Optional{std::ref(s)};
  }
  auto set::write(std::optional<Reference<Purpose::WRITE>> s) -> Reference<Purpose::WRITE>::Optional {
    return s;
  }
}
namespace sys::fd {
  auto set::except() -> Reference<Purpose::EXCEPT>::Optional {
    return Reference<Purpose::EXCEPT>::Optional{};
  }
  auto set::except(Set &s) -> Reference<Purpose::EXCEPT>::Optional {
    return Reference<Purpose::EXCEPT>::Optional{std::ref(s)};
  }
  auto set::except(std::optional<Reference<Purpose::EXCEPT>> s) -> Reference<Purpose::EXCEPT>::Optional {
    return s;
  }
}
namespace sys::fd {
  template<set::Purpose PURPOSE> auto set::repointer(std::optional<Reference<PURPOSE>> op) -> ::fd_set * {
    // Easier there because Reference<P> is friends with Set
    return op ? op->repointer() : nullptr;
  }
}
namespace sys::fd::set {
  template<set::Purpose _> Reference<_>::Reference(Set &captured) : Ancestor{captured} { }
  template<set::Purpose _> Reference<_>::Reference(Ancestor const &other) : Ancestor{other} { }
  template<set::Purpose _> auto Reference<_>::repointer() const -> ::fd_set * { return &Ancestor::get().core; }
  template<set::Purpose _> auto Reference<_>::operator=(Ancestor const &other) -> Reference & {
    Ancestor::operator=(other);
    return *this;
  }
}
#endiv
#divert <cpp>
#import sys.fd.required.Set
namespace {
  namespace tests {
    using namespace sys::fd::set;
    namespace required = sys::fd::required;
    static_assert(required::Set<Set>);
    static_assert(required::set::Reference<Reference<Purpose::READ>>);
    static_assert(required::set::Any<Reference<Purpose::READ>>);
    static_assert(required::set::Any<Reference<Purpose::READ>::Optional>);
    //
    static_assert(required::set::Optional_Reference<std::optional<Reference<Purpose::READ>>>);
    static_assert(required::set::Any<std::optional<Reference<Purpose::READ>>>);
    //
    static_assert(required::set::Any<Reference<Purpose::WRITE>::Optional>);
    static_assert(required::set::Any<Reference<Purpose::EXCEPT>::Optional>);
  }
}
#endiv

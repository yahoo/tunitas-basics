// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys::fd::set {
  //
  // A proxy object to support assignment into the Set
  //
  // Usage:
  //
  //   auto set = Set{...somehow...};
  //   set[99] = true;
  //   set[88] = false;
  //
  class Lhs;
}
#endiv
#divert <hpp>
#forward sys.fd.set.Set
#forward sys.fd.set.Iterator
#import sys.fd.set.Indirect
class sys::fd::set::Lhs : public Indirect<Set> {
  using ancestor = Indirect<Set>;
public:
  inline auto operator=(bool) -> Lhs &;
protected:
  friend class set::Set;
  template<Constancy> friend class set::Iterator;
  // The the caller must guarantee the bounds-check; see Rhs::Rhs(...)
  inline Lhs(Set &, Index);
};
#endiv
#divert <ipp>
namespace sys::fd::set {
  Lhs::Lhs(Set &owner, Index index) : ancestor{owner, index} { }
  auto Lhs::operator=(bool value) -> Lhs & {
    if (value) { FD_SET(owner_index, &owner.core); }
    else { FD_CLR(owner_index, &owner.core); }
    return *this;
  }
}
#endiv

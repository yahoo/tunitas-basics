// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#forward sys.fd.set.Set
#forward sys.fd.set.Reference
#import std.optional
#import std.is_same
namespace sys::fd::required {
  //
  // Is it a Set
  // ... mostly (only) Useful in vararg templates argument constraints
  //
  // Usage:
  //
  //   rly?
  //
  namespace set {
    template<typename SET> concept Set = std::is_same<SET, fd::set::Set>::value;
    // Blik.  Whereas there is no existential quantification in concepts, we have to enumerate all the purposes.
    template<typename REF> concept Reference = (std::is_same<REF, fd::set::Reference<fd::set::Purpose::READ>>::value ||
                                                std::is_same<REF, fd::set::Reference<fd::set::Purpose::WRITE>>::value ||
                                                std::is_same<REF, fd::set::Reference<fd::set::Purpose::EXCEPT>>::value);
    template<typename OPT> concept Optional_Reference = (std::is_same<OPT, std::optional<fd::set::Reference<fd::set::Purpose::READ>>>::value ||
                                                         std::is_same<OPT, std::optional<fd::set::Reference<fd::set::Purpose::WRITE>>>::value ||
                                                         std::is_same<OPT, std::optional<fd::set::Reference<fd::set::Purpose::EXCEPT>>>::value);
    template<typename ANY> concept Any = Set<ANY> || Reference<ANY> || Optional_Reference<ANY>;
  }
  using set::Set;
}
#endiv

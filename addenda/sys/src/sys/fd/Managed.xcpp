// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys::fd {
  //
  // The fd::Managed rhymes with std::unique_ptr or std::shared_ptr.
  // To access its contents use: get(), release(), reset()
  //
  // Manage a file descriptor with RAII.
  // No copy semantic; but move semantics.
  // Close the file descriptor on destructtion (release the resource).
  //
  // Usage:
  //
  //   fd::Managed socky{socket(...arguments...)};
  //   fd::Managed filey{open(...arguments...)};
  //
  struct Managed;
}
#endiv
#divert <hpp>
#import sys.call.Result
#import sys.id.File
#import std.move
namespace sys {
  namespace fd {
    using std::move;
  }
  class fd::Managed {
  public:
    inline Managed();
    inline explicit Managed(int); // becomes owned by the Managed and is closed upon destruction
    inline explicit Managed(id::File); // ibidem.
    Managed(Managed const &) = delete;
    auto operator=(Managed const &) -> Managed & = delete;
    inline Managed(Managed &&);
    inline auto operator=(Managed &&) -> Managed &;
    inline ~Managed();
    using Closed = call::Result;
    inline auto close() -> Closed;
    inline auto is_open() const -> bool;
    inline auto get() const -> id::File; // .................. returns the managed descriptor
    template<typename FD> inline auto get() const -> FD = delete;
    inline auto release() -> id::File; // .................... returns, forgets, and does not close the managed descriptor
    template<typename FD> inline auto release() -> FD = delete;
    inline auto reset() -> void; // .......................... does a close on the previous managed descriptor
    inline auto reset(int successor) -> void;
    inline auto reset(id::File successor) -> void;
  protected:
    int descriptor;
  };
  namespace fd {
    template<> inline auto Managed::get<int>() const -> int;
    template<> inline auto Managed::get<id::File>() const -> id::File;
    template<> inline auto Managed::release<int>() -> int;
    template<> inline auto Managed::release<id::File>() -> id::File;
  }
}
#import std.is_default_constructible
#import std.is_copy_constructible
#import std.is_copy_assignable
#import std.is_move_constructible
#import std.is_move_assignable
namespace sys::fd {
  static_assert(std::is_default_constructible_v<Managed>);
  static_assert(!std::is_copy_constructible_v<Managed>);
  static_assert(!std::is_copy_assignable_v<Managed>);
  static_assert(std::is_move_constructible_v<Managed>);
  static_assert(std::is_move_assignable_v<Managed>);
}
#endiv
#divert <ipp>
#import std.swap
#import sys.posix.close
namespace sys::fd {
  Managed::Managed() : descriptor{-1} { }
  Managed::Managed(int descriptor) : descriptor{descriptor} { }
  Managed::Managed(id::File descriptor) : descriptor{(int)descriptor} { }
  Managed::~Managed() try {
    if (descriptor >= 0) {
      this->close();
    }
  } catch (...) {
    // posix::close(2) threw an exception, which is very very exceptional
    // but we can't tell anyone
  }
  Managed::Managed(Managed &&other) : descriptor{-1} {
    std::swap(this->descriptor, other.descriptor);
  }
  auto Managed::operator=(Managed &&other) -> Managed & {
    std::swap(this->descriptor, other.descriptor);
    return *this;
  }
  auto Managed::is_open() const -> bool { return descriptor >= 0; }
  auto Managed::get() const -> id::File { return get<id::File>(); }
  template<> auto Managed::get<int>() const -> int { return descriptor; }
  template<> auto Managed::get<id::File>() const -> id::File { return id::File{descriptor}; }
  auto Managed::release() -> id::File { return release<id::File>(); }
  template<> auto Managed::release<int>() -> int { return (int)release<id::File>(); }
  template<> auto Managed::release<id::File>() -> id::File {
    int disgorged{-1};
    std::swap(disgorged, descriptor);
    return id::File{disgorged};
  }
  auto Managed::reset() -> void { reset(-1); }
  auto Managed::reset(id::File successor) -> void { reset((int)successor); }
  auto Managed::reset(int successor) -> void {
    Managed doomed{std::move(*this)};
    std::swap(successor, descriptor);
  }
  auto Managed::close() -> Closed {
    int doomed{-1};
    std::swap(doomed, descriptor);
    return sys::posix::native::close(doomed);
  }
}
#endiv

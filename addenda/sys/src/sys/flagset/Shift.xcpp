// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.required.Enumeration
#import sys.required.Integer
#import sys.flagset.required // cascaded namespaces
namespace sys::flagset {
  //
  // The Shift<S,C> is a pluralizer that enforces a (left-) shifting to move from the ordinal representation to the bitset representation.
  // It is applicable when the underlying SINGLE enum is ordinal (er, cardinal) being 0, 1, 2, 3, etc.
  //
  template<required::Enumeration SINGLE, required::Integer CARRIER> struct Shift;
}
#endiv
#divert <hpp>
namespace sys {
  template<required::Enumeration SINGLE, required::Integer CARRIER> struct flagset::Shift {
    using Single = SINGLE;
    using Plural = CARRIER;
    static constexpr auto promote(Single single) -> Plural { return Plural(1u<<(typename std::underlying_type<Single>::type)single); }
  };;
}
#endiv
#divert <cpp>
#import sys.flagset.required.Pluralizer
// Of course this is test code
namespace {
  namespace tests {
    using namespace sys::flagset;
    enum Ordinal { O0 = 0, O1, O2, O3, O4, O5 };
    static_assert(required::Pluralizer<Shift<Ordinal, int>, Ordinal, int>);
  }
}
#endiv

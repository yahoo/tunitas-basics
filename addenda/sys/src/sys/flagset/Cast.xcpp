// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.required.Enumeration
#import sys.required.Integer
#import sys.flagset.required // cascaded namespaces
namespace sys::flagset {
  //
  // The Cast<S,C> is a pluralizer which merely casts the SINGLE to recover the CARRIER value.
  // It is applicable when the underlying SINGLE enum really is encoded as a bitmask.
  //
  template<required::Enumeration SINGLE, required::Integer CARRIER> struct Cast;
}
#endiv
#divert <hpp>
namespace sys {
  template<required::Enumeration SINGLE, required::Integer CARRIER> struct flagset::Cast {
    using Single = SINGLE;
    using Plural = CARRIER;
    static constexpr auto promote(Single single) -> Plural { return Plural(single); }
  };
}
#endiv
#divert <cpp>
#import sys.flagset.required.Pluralizer
// Of course this is test code
namespace {
  namespace tests {
    using namespace sys::flagset;
    enum class Maskish { M0 = 1, M1 = 2, M2 = 4, M3 = 8, M4 = 16 };
    static_assert(required::Pluralizer<Cast<Maskish, int>, Maskish, int>);
  }
}
#endiv

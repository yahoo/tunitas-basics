// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.required.Enumeration
#import sys.required.Integer
namespace sys::flagset::required {
  //
  // A pluralizer functor. 
  //
  // Examples:
  //
  //   Shift<...>
  //   Cast<...>
  //
  // Usage:
  //
  //   template<required::Enumeration SINGLE, required::Integer CARRIER, required::Pluralizer<SINGLE, CARRIER> PLURALIZER> struct Container;
  //
  template<typename PLURALIZER, typename SINGLE, typename CARRIER> concept bool Pluralizer = Enumeration<SINGLE> && Integer<CARRIER> && requires(PLURALIZER, SINGLE single) {
    { PLURALIZER::promote(single) } -> CARRIER;
  };
}
#endiv
#divert <cpp>
#import sys.flagset.Cast
#import sys.flagset.Shift
// Of course this is test code
namespace {
  namespace tests {
    using namespace sys::flagset;
    enum Ordinal { };
    static_assert(required::Pluralizer<Cast<Ordinal, int>, Ordinal, int>);
    enum Masklike { };
    static_assert(required::Pluralizer<Shift<Masklike, int>, Masklike, int>);
  }
}
#endiv

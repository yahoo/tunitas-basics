// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
namespace sys::wait {
  namespace addresser {
    enum [[deprecated("AVOID")]] Choice { INT, WAIT_STATUS };
    template<Choice> [[deprecated("AVOID")]] struct Implementation;
    template<> [[deprecated("AVOID")]] struct Implementation<INT>;
    template<> [[deprecated("AVOID")]] struct Implementation<WAIT_STATUS>;
  }
  template<typename SYSCALL> struct [[deprecated("AVOID")]] Addresser;
}
#pragma GCC diagnostic pop
#endiv
#divert <hpp>
#import sys.wait.Status
#include <sys/wait.h>
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
// Lots of hair to allow traditional BSD use of `union wait' as well as POSIX.1 use of `int' for the status word.
// Among 'void *', 'int *', 'union wait' and various anonymous transparent unions as attempts to elide this
namespace sys::wait {
  template<> struct addresser::Implementation<addresser::INT> {
    using Result = int *;
    inline auto operator()(Status &status) -> Result {
      auto &wait_integer = value(status);
      return &wait_integer;
    }
  };
  template<> struct addresser::Implementation<addresser::WAIT_STATUS> {
    // __WAIT_STATUS a macro that is defined in <sys/wait>
    // among
    // #define __WAIT_STATUS	void *
    // #define __WAIT_STATUS	int *
    using Result =
#ifndef __WAIT_STATUS
      int * // we nave no idea either ... just guess
#else
      __WAIT_STATUS
#endif
      ;
    inline auto operator()(Status &status) -> Result { return (Result)(&status); }
  };
  template<typename SYSCALL> struct Addresser : public addresser::Implementation<addresser::WAIT_STATUS> { };
  template<> struct Addresser<decltype(::waitpid)> : public addresser::Implementation<addresser::INT> { };
}
#pragma GCC diagnostic pop
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys::wait {
  //
  // The wait status ... all the bits
  //
  // WATCHOUT - some code "knows" that this is a 32-bit integer with the distinguished value of zero
  // being synonymous with "exited with success."  However, that is optimistic because exiting nonzero
  // is NOT encoded in nearly the same way.  e.g. exit(1) has a value of 256.  Use the accessor functions.
  //
  // Usage:
  //
  //    auto waited = wait(...);
  //    if (ok(waited)) {
  //      auto us = status(waited);
  //      if (ok(us)) {
  //         ...true == ifexited(us)...
  //         ...0 == exitstatus(us)...
  //      } else {
  //         ...exit nonzero...
  //         ...killed by signal...
  //         ...stopped...
  //      }
  //    }
  //
  class Status;
}
#endiv
#divert <hpp>
#import sys.wait.functions
#import std.uint8_t
#import sys.exits.required.Codable
#import sys.id.required.Signal
class sys::wait::Status {
public:
  using Value = int; //        New School
  using value_type = Value; // old_school (deprecate this ... [[ahem]] when ISO C++ LEWDG deprecates the "_type" suffix or the sun grows cold)
  Status() = default;
  //
  // WATCHOUT - this integer 'Value status' is the status integer (int32_t on LP)64 that is returned from the wait(2) system calls
  //    wait(int *status) -> pid_t
  //    waitpid(pid_t, int *status, options) -> pid_t
  //    waitid(idtype_t, id_t, siginfo_t *status, optinos) -> int{success} -- see status.si_code and status.si_status
  //    wait3(...[[FIXTHIS]]...)
  //    wait4(...[[FIXTHIS]]...)
  //
  inline explicit Status(Value);
public:
  [[deprecated("use ifexited(Status), exitstatus(Status)")]] inline explicit operator Value() const;
  inline operator Value &();
  inline operator Value const &() const;
  // Convenience for calling the actual system calls.
  inline auto operator&() const -> Value const *;
  inline auto operator&() -> Value *;
  // returns true if the child terminated normally; by calling exit(3) or _exit(2), or by returning from main().
  inline auto ifexited() const -> bool;
  // returns the exit status of the child; only if WIFEXITED returned true.
  inline auto exitstatus() const -> std::uint8_t;
  template<exits::required::Codable CODABLE> inline auto exitstatus() const -> CODABLE;
  // returns true if the child process was terminated by a signal.
  inline auto ifsignaled() const -> bool;
  // returns the number of the signal that caused the child process to terminate; only if WIFSIGNALED returned true.
  inline auto termsig() const -> int;
  template<id::required::Signal SIGNAL> auto termsig() const -> SIGNAL;
  // returns true if the child produced a core dump; only if WIFSIGNALED returned true.
  inline auto coredump() const -> bool; 
  // returns true if the child process was stopped by delivery of a signal; only when wait(2) with WUNTRACED or child under ptrace(2).
  inline auto ifstopped() const -> bool;
  // returns the number of the signal which caused the child to stop. This macro should be employed only if WIFSTOPPED returned true.
  inline auto stopsig() const -> int;
  template<id::required::Signal SIGNAL> auto stopsig() const -> SIGNAL;
  // (since Linux 2.6.10) returns true if the child process was resumed by delivery of SIGCONT.
  inline auto ifcontinued() const -> bool;
protected:
  friend auto wait::value(Status const &) -> int const &;
  friend auto wait::value(Status &) -> int &;
  friend auto wait::value(Status &&) -> int;
  // An 'int' as declared in wait(2), waitpid(2), wait3(2) and wait4(2).
  Value precious_and_difficult_wait_status_word{};
};
#endiv
#divert <ipp>
#include <sys/wait.h> // Require (macro-function) definitions of WXXXYYYZZZ(status)
namespace sys::wait {
  Status::Status(Value value) : precious_and_difficult_wait_status_word(value) { }
  Status::operator Value() const                   { return precious_and_difficult_wait_status_word; }
  Status::operator Value const &() const           { return precious_and_difficult_wait_status_word; }
  Status::operator Value &()                       { return precious_and_difficult_wait_status_word; }
  auto Status::operator &() const -> Value const * { return &precious_and_difficult_wait_status_word; }
  auto Status::operator&() -> Value *              { return &precious_and_difficult_wait_status_word; }
  //
  // Subfield accessors
  auto Status::ifexited() const -> bool                                                 { return WIFEXITED(precious_and_difficult_wait_status_word); }
  auto Status::exitstatus() const -> std::uint8_t                                       { return WEXITSTATUS(precious_and_difficult_wait_status_word); }
  template<exits::required::Codable CODABLE> auto Status::exitstatus() const -> CODABLE { return exitstatus(); }
  auto Status::ifsignaled() const -> bool                                               { return WIFSIGNALED(precious_and_difficult_wait_status_word); }
  auto Status::termsig() const -> int                                                   { return WTERMSIG(precious_and_difficult_wait_status_word); }
  template<id::required::Signal SIGNAL> auto Status::termsig() const -> SIGNAL          { return SIGNAL{termsig()}; }
  auto Status::coredump() const -> bool                                                 { return WCOREDUMP(precious_and_difficult_wait_status_word); }
  auto Status::ifstopped() const -> bool                                                { return WIFSTOPPED(precious_and_difficult_wait_status_word); }
  auto Status::stopsig() const -> int                                                   { return WSTOPSIG(precious_and_difficult_wait_status_word); }
  template<id::required::Signal SIGNAL> auto Status::stopsig() const -> SIGNAL          { return SIGNAL{stopsig()}; }
  auto Status::ifcontinued() const -> bool                                              { return WIFCONTINUED(precious_and_difficult_wait_status_word); }
}
#endiv

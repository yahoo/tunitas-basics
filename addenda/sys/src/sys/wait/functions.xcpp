// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys::wait {
  //
  // The functions namespace is inlined so that
  // (a) ADL will find the functions therein
  // (b) the function set can conveniently be imported elsewhere
  //
  inline namespace functions { }
}
#endiv
#divert <hpp>
#forward sys.wait.Status
#import sys.exits.required.Codable
#import sys.id.required.Signal
namespace sys::wait::functions {
  // Return the whole "status" as an 'int', preserving references
  //
  // WATCHOUT - this isn't helpful, in fact, it misdirects you away from the actual exit code.
  // Therefore it is declared forthwith as deprecated to incentivize you to use the actual interface.
  [[deprecated("avoid this idiom; instead prefer ifexited(Status) and exitstatus(Status)")]] inline auto value(Status const &) -> int const &;
  [[deprecated("avoid this idiom; instead prefer ifexited(Status) and exitstatus(Status)")]] inline auto value(Status &) -> int &;
  [[deprecated("avoid this idiom; instead prefer ifexited(Status) and exitstatus(Status)")]] inline auto value(Status &&) -> int;
  inline auto ok(Status const &) -> bool;
  inline auto good(Status const &) -> bool;
  inline auto fail(Status const &) -> bool;
  inline auto clear([[out]] Status &) -> void;
  inline auto ifexited(Status const &) -> bool;
  inline auto exitstatus(Status const &) -> std::uint8_t;
  template<exits::required::Codable CODABLE> inline auto exitstatus(Status const &) -> CODABLE;
  inline auto ifsignaled(Status const &) -> bool;
  inline auto termsig(Status const &) -> int;
  template<id::required::Signal SIGNAL> inline auto termsig(Status const &) -> SIGNAL;
  inline auto coredump(Status const &) -> bool; 
  inline auto ifstopped(Status const &) -> bool;
  inline auto stopsig(Status const &) -> int;
  template<id::required::Signal SIGNAL> inline auto stopsig(Status const &) -> SIGNAL;
  inline auto ifcontinued(Status const &) -> bool;
}
#endiv
#divert <ipp>
#import sys.wait.Status
namespace sys::wait {
  auto functions::ok(Status const &s) -> bool           { return good(s); }
  auto functions::good(Status const &s) -> bool         { return ifexited(s) && 0 == exitstatus(s); }
  auto functions::fail(Status const &s) -> bool         { return !good(s); }
  auto functions::value(Status const &s) -> int const & { return s.precious_and_difficult_wait_status_word; }
  auto functions::value(Status &s) -> int &             { return s.precious_and_difficult_wait_status_word; }
  auto functions::value(Status &&s) -> int              { return s.precious_and_difficult_wait_status_word; }
  auto functions::clear(Status &fill) -> void           { fill = Status{}; }
  //
  // Subfield accessors
  auto functions::ifexited(Status const &s) -> bool                                                 { return s.ifexited(); }
  auto functions::exitstatus(Status const &s) -> std::uint8_t                                       { return s.exitstatus(); }
  template<exits::required::Codable CODABLE> auto functions::exitstatus(Status const &s) -> CODABLE { return CODABLE(exitstatus(s)); }
  auto functions::ifsignaled(Status const &s) -> bool                                               { return s.ifsignaled(); }
  auto functions::termsig(Status const &s) -> int                                                   { return s.termsig(); }
  template<id::required::Signal SIGNAL> auto functions::termsig(Status const &s) -> SIGNAL          { return SIGNAL(termsig(s)); }
  auto functions::coredump(Status const &s) -> bool                                                 { return s.coredump(); }
  auto functions::ifstopped(Status const &s) -> bool                                                { return s.ifstopped(); }
  auto functions::stopsig(Status const &s) -> int                                                   { return s.stopsig(); }
  template<id::required::Signal SIGNAL> auto functions::stopsig(Status const &s) -> SIGNAL          { return SIGNAL(stopsig(s)); }
  auto functions::ifcontinued(Status const &s) -> bool                                              { return s.ifcontinued(); }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys::flock::specification {
  //
  // Useful in flock(3) where the 2nd argument is a Specification combining an Operation and some Options.
  // [[Why?]] because the Linux kernel & GNU libc crew declined to break ABI.
  // Instead they made much more complicated API semantics that subsequent API replicators must reimplement.
  //
  // Usage:
  //
  //  auto function(Specification) -> Result;
  //
  //  auto result = function(LOCK::SH);
  //  auto result = function(LOCK::EX | SOCK::NB);
  //
  struct Composer;
}
#endiv
#divert <hpp>
#import sys.flock.Operation
#import sys.flock.Options
#import sys.flock.Option
struct sys::flock::specification::Composer {
  inline constexpr [[implicit]] Composer() : value{0} { }
  inline constexpr [[implicit]] Composer(Operation o) : value{(int) o} { }
  inline constexpr [[implicit]] Composer(Option o) : value{(int) o} { }
  inline constexpr [[implicit]] Composer(Options s) : value{(int) s} { }
  using Value = int; // This is the type of the 2nd argument to flock(2)
  using value_type [[deprecated]] = Value;
  inline constexpr operator Value() const { return value; }
protected:
  inline constexpr explicit Composer(Value v) : value{v} { }
  Value value;
};
#endiv

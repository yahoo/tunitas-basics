// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys::flock::specification {
  //
  // The specification is a composition of the Operation and the Options
  // The Operation is one of the basic ones { SH, EX, UN }
  //
  // Constructors
  // The Specification consists of two components
  //   1. bitfield as a Type (an enum)
  //   2. a bitset of the other options.
  //
  // The specification is a function-argument call-site object.
  //
  // Usage:
  //
  //   auto fd = ...somehow...
  //
  //   auto f = flock(fd, LOCK::SH);
  //   auto f = flock(fd, LOCK::EX);
  //   auto f = flock(fd, LOCK::UN);
  //   auto f = flock(fd, LOCK::SH | LOCK::NB);
  //
  class Specification;
}
#endiv
#divert <hpp>
#import sys.flock.specification.Composer
#import sys.flock.Operation
#import sys.flock.Option
#import sys.flock.Options
class sys::flock::specification::Specification : public Composer {
  using Ancestor = Composer;
public:
  constexpr Specification() : Ancestor{Operation{}} { }
  constexpr explicit Specification(typename Ancestor::Value value) : Ancestor{value} { }
  using Ancestor::Composer;
  auto operator=(Specification const &) -> Specification & = default;
  auto operator=(Composer c) -> Specification & { Ancestor::value = (typename Ancestor::Value) c; return *this; }
  inline constexpr auto operator&=(Specification f) -> Specification & { Ancestor::value &= (typename Ancestor::Value) f; return *this; }
  // DELETE inline constexpr auto operator&=(Composer c) -> Specification & { Ancestor::value &= (typename Ancestor::Value) c; return *this; }
  inline constexpr auto operator|=(Specification f) -> Specification & { Ancestor::value |= (typename Ancestor::Value) f; return *this; }
  // DELETE inline constexpr auto operator|=(Composer c) -> Specification & { Ancestor::value |= (typename Ancestor::Value) c; return *this; }
  inline constexpr auto operator~() -> Specification & { Ancestor::value = ~Ancestor::value; return *this; }
  inline constexpr explicit operator typename Ancestor::Value() const { return Ancestor::value; } // this one is explicit, the ancestor's is implicit
  inline friend constexpr auto operator==(Specification const &a, Specification const &b) -> bool { return a.value == b.value; }
  inline friend constexpr auto operator!=(Specification const &a, Specification const &b) -> bool { return a.value != b.value; }
  // composition
  inline friend constexpr auto operator|(Specification a, Specification b) -> Specification { return Specification{(typename Specification::Value)a | (typename Specification::Value)b}; }
  inline friend constexpr auto operator|(Options a, Specification b) -> Specification       { return Specification{(typename Specification::Value)a | (typename Specification::Value)b}; }
  inline friend constexpr auto operator|(Option a, Specification b) -> Specification        { return Specification{(typename Specification::Value)a | (typename Specification::Value)b}; }
  inline friend constexpr auto operator|(Operation a, Specification b) -> Specification     { return Specification{(typename Specification::Value)a | (typename Specification::Value)b}; }
  // extraction
  inline friend constexpr auto operator&(Specification a, Specification b) -> Specification { return Specification{(typename Specification::Value)a & (typename Specification::Value)b}; }
  inline friend constexpr auto operator&(Options a, Specification b) -> Specification       { return Specification{(typename Specification::Value)a & (typename Specification::Value)b}; }
  inline friend constexpr auto operator&(Option a, Specification b) -> Specification        { return Specification{(typename Specification::Value)a & (typename Specification::Value)b}; }
  inline friend constexpr auto operator&(Operation a, Specification b) -> Specification     { return Specification{(typename Specification::Value)a & (typename Specification::Value)b}; }
  // inversion
  inline friend constexpr auto contains(Specification a, Specification b) -> bool { return (typename Specification::Value)b == (typename Specification::Value)(b & a); }
};
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.flock.Option
#import sys.flock.Options
#import sys.flock.Specification
namespace sys::flock {
  template<typename RESULT> auto as(Option) -> RESULT;
  template<typename RESULT> auto as(Options) -> RESULT;
  template<typename RESULT> auto as(Specification) -> RESULT;
  template<> inline auto as<Operation>(Specification) -> Operation; // ........... unexceptional (extracts out those certain bits)
  template<> inline auto as<Option>(Option) -> Option; // ........................ unexceptional (identity)
  template<> inline auto as<Option>(Options) -> Option; // ....................... demotion can throw because it demotes
  template<> inline auto as<Option>(Specification) -> Option; // ................. demotion can throw because it demotes
  template<> inline auto as<Options>(Option) -> Options; // ...................... unexceptional (promotion)
  template<> inline auto as<Options>(Options) -> Options; // ..................... unexceptional (identity)
  template<> inline auto as<Options>(Specification) -> Options; // ............... unexceptional (projection)
  template<> inline auto as<Specification>(Option) -> Specification; // .......... unexceptional (promotion)
  template<> inline auto as<Specification>(Options) -> Specification; // ......... unexceptional (promotion)
  template<> inline auto as<Specification>(Specification) -> Specification; // ... unexceptional (identity)
}
#endiv
#divert <ipp>
#import sys.flags.maskof
#import sys.flock.Operation // for operation::FIELD_MASK
namespace sys {
  template<> auto flock::as<flock::Option>(Option o) -> Option                      { return o; }
  template<> auto flock::as<flock::Option>(Options s) -> Option                     { return sys::flags::maskof<Option>(s, Options::Limits::begin(), Options::Limits::end()); }
  template<> auto flock::as<flock::Option>(Specification s) -> Option               { return as<Option>(as<Options>(s)); }
  template<> auto flock::as<flock::Options>(Option o) -> Options                    { return Options{o}; }
  template<> auto flock::as<flock::Options>(Options s) -> Options                   { return s; }
  template<> auto flock::as<flock::Options>(Specification s) -> Options             { return Options{(int)~operation::FIELD_BITMASK & (Specification::Value)s}; }
  template<> auto flock::as<flock::Operation>(Specification s) -> Operation         { return Operation{(int)operation::FIELD_BITMASK & (Specification::Value)s}; }
  template<> auto flock::as<flock::Specification>(Option o) -> Specification        { return Specification{o}; }
  template<> auto flock::as<flock::Specification>(Options s) -> Specification       { return Specification{s}; }
  template<> auto flock::as<flock::Specification>(Specification s) -> Specification { return s; }
}
#endiv

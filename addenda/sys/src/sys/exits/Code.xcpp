// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.uint8_t
namespace sys::exits {
  class Code;
  namespace literal {
    // not an enum here, as the exit code is returned back to the OS
    // Only 8 bits are returned across the exec boundary
    using Code = std::uint8_t;
  }
}
#endiv
#divert <hpp>
#import std.basic_ostream
#import sys.exits.required // cascade namespace required
#import nonstd.required.character.Type
#import nonstd.required.character.Traits
namespace sys::exits {
  template<required::character::Type CHAR, required::character::Traits<CHAR> TRAITS> inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, Code const &) -> std::basic_ostream<CHAR, TRAITS> &;

  inline auto operator==(Code const &, Code const &) -> bool;
  inline auto operator!=(Code const &, Code const &) -> bool;

  // Accreting failure codes across a series
  inline auto operator|(Code const &, Code const &) -> Code;
  // Accreting success codes across a series
  inline auto operator&(Code const &, Code const &) -> Code;

  // Wherein 'ok' is nearby and elsewhere, frequently used as a namespace name, so it occludes
  inline auto ok(Code const &) -> bool; // ..... historical
  inline auto good(Code const &) -> bool; // ... alternative (newer)
  inline auto fail(Code const &) -> bool; // ... its inverse
  [[deprecated("intead prefer good(Code) or fail(Code)")]] inline auto failure(Code const &) -> bool;
}
#import sys.exits.Code.sysexits
#import nonstd.sysexits.Code
#import std.numeric_limits
class sys::exits::Code {
public:
  inline Code();
  using Value = literal::Code; // New School
  using value_type = Value; // old_school
  // DO NOT go 'implicit' here as that makes int and Code ambiguous
  inline constexpr explicit Code(value_type);
  // Because 'literal::Code' as 'int8_t' is really a "char" one needs the overload to be able to construct "reasonably"
  inline explicit Code(int signed);
  inline explicit Code(int unsigned);
  // And convert from the simpler enum of the nonstd realm
  inline Code(nonstd::sysexits::Code);
  auto operator=(Code const &) -> Code & = default;
  inline auto operator&=(Code const &) -> Code &;
  inline auto operator|=(Code const &) -> Code &;
  // implicit conversion back out to 'int' so on can return sys::exits out of main(...) without further ceremony
  inline constexpr operator value_type() const;
private:
  //
  // DO NOT implement operator bool() the sense and intent of that conflicts with operator value_type()
  // NOT operator bool() const;
  // To wit: error: conversion from 'const sys::exits::Code' to 'int' is ambiguous
  //
  // DO NOT implement operator!() for the same reason (here: 0 == value <--> success)
  // NOT auto operator!() const -> bool;
protected:
  template<required::character::Type C, required::character::Traits<C> T> friend auto exits::operator<<(std::basic_ostream<C, T> &, Code const &) -> std::basic_ostream<C, T> &;
  friend auto operator==(Code const &, Code const &) -> bool;
  value_type value;
private:
  using Limits = std::numeric_limits<Value>;
  // These throw if the validation fails.
  // They are templates because INTEGER may be signed or unsigned and of some call-site specific width
  template<typename INTEGER> inline auto validate_not_negative(INTEGER) -> void;
  template<typename INTEGER> inline auto validate_not_too_big(INTEGER) -> void;
public:
  struct tests { struct Suite; };
  friend struct tests::Suite;
};
constexpr sys::exits::Code::Code(value_type arg_value)
  : value{arg_value}
{ }
constexpr sys::exits::Code::operator value_type() const {
  return value;
}
#endiv
#divert <ipp>
namespace sys {
  template<required::character::Type CHAR, required::character::Traits<CHAR> TRAITS> auto exits::operator<<(std::basic_ostream<CHAR, TRAITS> &o, Code const &c) -> std::basic_ostream<CHAR, TRAITS> & {
    CHAR const leader[]{'e','x','i','t',' ','\0'};  // make the compiler widen char -> CHAR
    return o << leader << (int)(c.value);
  }
  auto exits::operator==(Code const &a, Code const &b) -> bool {
    return a.value == b.value;
  }
  auto exits::operator!=(Code const &a, Code const &b) -> bool {
    return !operator==(a, b);
  }
  auto exits::operator|(Code const &a, Code const &b) -> Code {
    // absorb the failures (this is boolean OR implemented on true-coded-as-zero)
    // usage:
    //   Code c = a | b;
    //   c succeeds if either a or b succeeded.
    //   c fails if both a or b failed.
    //
    return ok(a) ? a : b;
  }
  auto exits::operator&(Code const &a, Code const &b) -> Code {
    // saturate the success (this is boolean AND implemented on true-coded-as-zero) 
    // usage:
    //   Code c = a & b
    //   c succeeds if both a and b succeeded.
    //   c fails if either or a and b failed.
    //
    return ok(a) ? b : a;
  }
  auto exits::ok(Code const &code) -> bool      { return 0 == (int)(code); }
  auto exits::good(Code const &code) -> bool    { return 0 == (int)(code); }
  auto exits::fail(Code const &code) -> bool    { return 0 != (int)(code); }
  auto exits::failure(Code const &code) -> bool { return ! ok(code); }
}
// The default constructor must be manifest else the POD types remain uninitialized
sys::exits::Code::Code()
  : value(0) {
  ;
}
sys::exits::Code::Code(nonstd::sysexits::Code arg_value)
  : value{(value_type)arg_value}
{ }
sys::exits::Code::Code(int signed arg_value)
  : value(arg_value) {
  validate_not_negative(arg_value);
  validate_not_too_big(arg_value);
}
sys::exits::Code::Code(int unsigned arg_value)
  : value(arg_value) {
  validate_not_too_big(arg_value);
}
auto sys::exits::Code::operator&=(Code const &b) -> Code & {
  Code const &a(*this);
  Code &c(*this);
  c = a & b;
  return *this;
}
auto sys::exits::Code::operator|=(Code const &b) -> Code & {
  Code const &a(*this);
  Code &c(*this);
  c = a | b;
  return  *this;
}
#import std.invalid_argument
#import std.type_info
#import std.ostringstream
template<typename INTEGER> auto sys::exits::Code::validate_not_negative(INTEGER candidate) -> void {
  if (candidate < 0) {
    std::ostringstream buf;
    buf << "negative value " << candidate << " is invalid for " << typeid(Value).name() << " (uint8_t)";
    throw std::invalid_argument{buf.str()};
  }
}
template<typename INTEGER> inline auto sys::exits::Code::validate_not_too_big(INTEGER candidate) -> void {
  std::ostringstream buf;
  if (std::numeric_limits<Value>::max() < candidate) {
    buf << "large value " << candidate << " is too big for " << typeid(Value).name() << " (uint8_t)";
    throw std::invalid_argument{buf.str()};
  }
}
#endiv

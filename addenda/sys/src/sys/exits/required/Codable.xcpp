// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.is_constructible // ... explicit
#import std.is_convertible // ..... implicit
#import sys.exits.Code
#include <hpp/sys.exits.Code>
namespace sys::exits::required {
  //
  // Is this type able to be converted into a sys::exits::Code?
  // This is a semantic wrapping of std::is_constructible_v into a concept form
  //
  // Usage:
  //
  //   template<required::Codable COD> auto function(COD) -> void;
  //
  //   auto waited = sys::exits::wait();
  //   auto tatus = status(waited);
  //   auto code = exitstatus<sys::exits::Code>(tatus);
  //   static_assert(std::is_same_v<decltype(code), sys::exits::Code>);
  //
  template<typename CODABLE> concept bool Codable = std::is_constructible_v<CODABLE, sys::exits::Code>;
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys::exits {
  inline namespace constants { }
}
#endiv
#divert <hpp>
#import sys.exits.Code
#import std.numeric_limits
#include <sysexits.h>
namespace sys::exits::constants {
  constexpr Code const OK = Code(Code::value_type(EX_OK)); // ..... a.k.a. ok(Code)
  constexpr Code const GOOD = Code(Code::value_type(EX_OK)); // ... a.k.a. good(Code)
  constexpr Code const FAIL = Code(Code::value_type(1));

  // Because exit(0), exit(1) and exit(2) are common
  constexpr Code const ZERO = Code(Code::value_type(0));
  constexpr Code const ONE = Code(Code::value_type(1));
  constexpr Code const TWO = Code(Code::value_type(2));

  constexpr Code const USAGE = Code(Code::value_type(EX_USAGE));
  constexpr Code const DATA = Code(Code::value_type(EX_DATAERR));
  [[deprecated("of course these are errors, don't repeat yourself. instead prefer merely DATA")]] constexpr Code const DATAERROR = DATA;
  [[deprecated("of course these are errors, don't repeat yourself. instead prefer merely DATA")]] constexpr Code const DATAERR = DATA;
  constexpr Code const INPUT = Code(Code::value_type(EX_NOINPUT));
  [[deprecated("yes, there was a problem with the INPUT: there was not enough or none. instead prefer merely INPUT")]] constexpr Code const NOINPUT = INPUT;
  constexpr Code const USER = Code(Code::value_type(EX_NOUSER));
  [[deprecated("yes, there was a problem with the USER: there was none. instead prefer merely USER")]] constexpr Code const NOUSER = USER;
  constexpr Code const HOST = Code(Code::value_type(EX_NOHOST));
  [[deprecated("yes, there was a problem with the HOST: there was none. instead prefer merely HOST")]] constexpr Code const NOHOST = HOST;
  constexpr Code const UNAVAILABLE = Code(Code::value_type(EX_UNAVAILABLE));
  constexpr Code const SOFTWARE = Code(Code::value_type(EX_SOFTWARE));
  constexpr Code const OS = Code(Code::value_type(EX_OSERR));
  [[deprecated("of course these are errors, don't repeat yourself. instead prefer merely OS")]] constexpr Code const OSERR = OS;
  [[deprecated("of course these are errors, don't repeat yourself. instead prefer merely OS")]] constexpr Code const OSERROR = OS;
  constexpr Code const FILE = Code(Code::value_type(EX_OSFILE));
  [[deprecated("there was a problem with some FILE owned by the operating system. instead prefer merely FILE")]] constexpr Code const OSFILE = FILE;
  constexpr Code const CANTCREATE = Code(Code::value_type(EX_CANTCREAT));
  [[deprecated("buy a vowel. instead prefer CANTCREATE with an E at the end")]] constexpr Code const CANTCREAT = CANTCREATE;
  constexpr Code const IO = Code(Code::value_type(EX_IOERR));
  [[deprecated("of course these are errors, don't repeat yourself. intead prefer merely IO")]] constexpr Code const IOERR = IO;
  [[deprecated("of course these are errors, don't repeat yourself. intead prefer merely IO")]] constexpr Code const IOERROR = IO;
  constexpr Code const TEMPORARY = Code(Code::value_type(EX_TEMPFAIL));
  [[deprecated("yes, there was a temporary failure, but spell it out. instead prefer TEMPORARY")]] constexpr Code const TEMPFAIL = TEMPORARY;
  constexpr Code const PROTOCOL = Code(Code::value_type(EX_PROTOCOL));
  constexpr Code const PERMISSION = Code(Code::value_type(EX_NOPERM));
  [[deprecated("yes, there was a problem with the PERMISSION but keep it simple. instead prefer PERMISSION")]] constexpr Code const NOPERMISSION = PERMISSION;
  [[deprecated("yes, there was a problem with the PERMISSION but spell it out. instead prefer PERMISSION")]] constexpr Code const NOPERM = PERMISSION;
  constexpr Code const CONFIGURATION = Code(Code::value_type(EX_CONFIG));
  [[deprecated("spell it out. instead prefer CONFIGURATION")]] constexpr Code const CONFIG = CONFIGURATION;

  // Extensions beyond <sysexits.h>
  constexpr Code const CANTREMOVE = Code(Code::value_type(EX__MAX+1));
  constexpr Code const GROUP = Code(Code::value_type(EX__MAX+2));
  [[deprecated("yes, there was a problem with the group: there was none. instead prefer merely GROUP")]] constexpr Code const NOGROUP = GROUP;

  // Extensions beyond <sysexits.h>
  // originating ... [[somewhere]]
  //
  // origination: anguish-answer >= 2.0 (as a practice)
  constexpr Code const TESTING = Code(Code::value_type(111));
  constexpr Code const UNIMPLEMENTED = Code(Code::value_type(112));
  //
  // origination: incendiary-sophist >= 0.2, .../lib/rigging/sysexits.sh
  constexpr Code const UNCOMMITTED = Code(Code::value_type(113));
  constexpr Code const GOLDEN = Code(Code::value_type(114));
  [[deprecated("yes, there was a problem with the GOLDEN file: there was none. instead prefer merely GOLDEN")]] constexpr Code const NOGOLDEN = GOLDEN;
  constexpr Code const OUTPUT = Code(Code::value_type(115));
  [[deprecated("yes, there was a problem with the OUTPUT: there was none. instead prefer merely OUTPUT")]] constexpr Code const NOOUTPUT = OUTPUT;
  // origination: institutional this is common from sh, bash, etc.
  constexpr Code const COMMAND = Code(Code::value_type(127));
  [[deprecated("")]] constexpr Code const NOCOMMAND = COMMAND;

  // WATCHOUT - this MAX is not the same as EX__MAX, which is not used
  constexpr Code const MAX = Code((Code::value_type)std::numeric_limits<Code::value_type>::max());
}
#endiv
#divert <cpp>
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
static_assert(sys::exits::CONFIG == EX__MAX, "<sysexits.h> is a surprise");
static_assert(sys::exits::MAX < 256, "system exits must be 8 bits, unsigned");
#pragma GCC diagnostic pop
#endiv

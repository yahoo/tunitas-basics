// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys::error::api471 {
  //
  // Holds the errno as a class, an enumerated value; as sys::error::api471::E::Code.
  //
  // This system is substantially redundant with the stdc++ library but elides
  // the generic_category versus system_category dichotomy that is inherent therein.
  //
  // The only advantage herein is that the names of the error constants are very very similar to those of the POSIX errno system.
  // e.g. E::NOENT for ENOENT for std::errc::no_such_file_or_directory
  //
  //   std::error_condition
  //   std::error_code
  //   std::system_error
  //
  // Somewhat redundant with & cruder than the stdc++ library
  //
  //   nonstd::error_code           --> std::error_code
  //   nonstd::error_condition      --> std::error_condition
  //   nonstd::system_error         --> std::system_error
  //   nonstd::generic_error (new)
  //
  // Usage:
  //
  //   auto c = error::code()     captures errno, same as referencing that global variable from <cerrno>
  //   auto c = error::SUCCESS;
  //   auto c = error::Code{error::E::NOENT};
  //   if (ok(c)) {
  //     ...good...
  //   }
  //   if (failure(c)) {
  //     ...bad...
  //   }
  //
  class [[deprecated("AVOID")]] Code;
}
#endiv
#divert <hpp>
#import nonstd.required.Character
#import nonstd.required.Character_Traits
#import std.basic_ostream
#import sys.error.e.Code
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
namespace sys::error::api471 {
  // Recover the per-thread global variable 'errno'
  // Like the macro 'errno' but namespace-qualified.
   [[deprecated("AVOID")]] inline auto code() -> Code;
  // Construction of a Code from an error_t (errno integer code).
  // Not simply the constructor to make it obvious the reinterpretation of the integer as the sys::error::E::Code enum
  // Also because it is not a constructor, it can be used in templates as a function object
   [[deprecated("AVOID")]] inline auto code(int errno_type_number) -> Code;
  // Categorization
   [[deprecated("AVOID")]] inline auto ok(Code const &) -> bool;
   [[deprecated("AVOID")]] inline auto failure(Code const &) -> bool;
   [[deprecated("AVOID")]] inline auto operator==(Code const &, Code const &) -> bool;
   [[deprecated("AVOID")]] inline auto operator!=(Code const &, Code const &) -> bool;
  template<nonstd::required::Character CHAR, nonstd::required::Character_Traits TRAITS>  [[deprecated("AVOID")]] inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, Code const &) -> std::basic_ostream<CHAR, TRAITS> &;
}
class sys::error::api471::Code {
protected:
  friend auto api471::code() -> Code;
  friend auto api471::code(int errno_type_number) -> Code;
  inline explicit Code(int); // unchecked whether value is a legal enum value
public:
  // Must be manifest to initialize the POD
  inline constexpr Code();
  inline constexpr [[implicit]] Code(e::Code);
  // DO NOT create 'operator bool()' as that is ambiguous
  // DO NOT add 'good()' 'success()' or such here
  // See the nearby free functions 'ok(Code const &)' and 'failure(Code const &)
  inline operator e::Code() const;
private:
  e::Code value;
  friend auto api471::ok(Code const &) -> bool;
  friend auto api471::operator==(Code const &, Code const &) -> bool;
  template<nonstd::required::Character CHAR, nonstd::required::Character_Traits TRAITS> friend auto operator<<(std::basic_ostream<CHAR, TRAITS> &, Code const &) -> std::basic_ostream<CHAR, TRAITS> &;
};
namespace sys::error::api471 {
  constexpr Code::Code() : value(e::Code()) { }
  constexpr Code::Code(e::Code the_value) : value(the_value) { }
}
#pragma GCC diagnostic pop
#endiv
#divert <ipp>
#include <cerrno>
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#import sys.error.Code
namespace sys::error {
  auto api471::operator==(Code const &a, Code const &b) -> bool { return a.value == b.value; }
  auto api471::operator!=(Code const &a, Code const &b) -> bool { return !operator==(a, b); }
  template<nonstd::required::Character CHAR, nonstd::required::Character_Traits TRAITS> auto api471::operator<<(std::basic_ostream<CHAR, TRAITS> &o, Code const &c) -> std::basic_ostream<CHAR, TRAITS> & {
    return operator<<(o, error::Code{c.value}.message());;
  }
  auto api471::code() -> Code { return Code{errno}; }
  auto api471::code(int errno_type_number) -> Code { return Code{errno_type_number}; }
  auto api471::ok(Code const &c) -> bool { return ok(c.value); }
  auto api471::failure(Code const &c) -> bool { return !ok(c); }
}
namespace sys::error::api471 {
  Code::Code(int the_value)  : value((e::Code)(the_value)) { }
  Code::operator e::Code() const { return value; }
}
#pragma GCC diagnostic pop
#endiv

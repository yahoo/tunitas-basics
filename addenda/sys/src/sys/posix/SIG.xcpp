// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys::posix {
  //
  // It's a fake namespace-in-a-struct.
  // PREFER namespace sys::sig
  // PREFER namespace sys::sig::constants
  // PREFER sys::sig::Number
  //        etc.
  //
  // Usage:
  //
  //   using SIG = sys::posix::SIG;
  //   auto const s0 = SIG::NONE;
  //   auto const s1 = SIG::TERM;
  //   auto const s1 = SIG::KILL;
  //   ...etc...
  //
  struct SIG;
}
#endiv
#divert <hpp>
#import sys.sig.Number
#import sys.sig.Handler
#import sys.sig.constants
struct sys::posix::SIG {
  using Handler = sig::Handler;
  using Number = sig::Number;
  //
  // The (symbolic) signal handlers
  //
  inline static auto const IGNORE  = sig::Handler{SIG_IGN};
  inline static auto const DEFAULT = sig::Handler{SIG_DFL};
  inline static auto const ERROR   = sig::Handler{SIG_ERR};
  [[deprecated("buy a vowel, spell it out! prefer sig::IGNORE")]]  inline static auto const IGN = sig::Handler{SIG_IGN};
  [[deprecated("buy a vowel, spell it out! prefer sig::DEFAULT")]] inline static auto const DFL = sig::Handler{SIG_DFL};
  [[deprecated("buy a vowel, spell it out! prefer sig::ERROR")]]   inline static auto const ERR = sig::Handler{SIG_ERR};
  //
  // The signal numbers
  //
  // ISO C99 Signals
  inline static constexpr auto INT  = sig::INT; // ........ Interactive attention signal.
  inline static constexpr auto ILL  = sig::ILL; // ........ Illegal instruction.
  inline static constexpr auto ABRT = sig::ABRT; // ....... Abnormal termination.
  inline static constexpr auto FPE  = sig::FPE; // ........ Erroneous arithmetic operation.
  inline static constexpr auto SEGV = sig::SEGV; // ....... Invalid access to storage.
  inline static constexpr auto TERM = sig::TERM; // ....... Termination request.
  //
  // Historical signals specified by POSIX.
  inline static constexpr auto HUP  = sig::HUP; // ........ Hangup.
  inline static constexpr auto QUIT = sig::QUIT; // ....... Quit.
  inline static constexpr auto TRAP = sig::TRAP; // ....... Trace/breakpoint trap.
  inline static constexpr auto KILL = sig::KILL; // ....... Killed.
  inline static constexpr auto BUS  = sig::BUS; // ........ Bus error.
  inline static constexpr auto SYS  = sig::SYS; // ........ Bad system call.
  inline static constexpr auto PIPE = sig::PIPE; // ....... Broken pipe.
  inline static constexpr auto ALRM = sig::ALRM; // ....... Alarm clock.
  //
  // New(er) POSIX signals (1003.1-2008; 1003.1-2013).
  inline static constexpr auto URG    = sig::URG; // ...... Urgent data is available at a socket.
  inline static constexpr auto STOP   = sig::STOP; // ..... Stop; unblockable.
  inline static constexpr auto TSTP   = sig::TSTP; // ..... Keyboard stop.
  inline static constexpr auto CONT   = sig::CONT; // ..... Continue.
  inline static constexpr auto CHLD   = sig::CHLD; // ..... Child terminated or stopped.
  inline static constexpr auto TTIN   = sig::TTIN; // ..... Background read from control terminal.
  inline static constexpr auto TTOU   = sig::TTOU; // ..... Background write to control terminal.
  inline static constexpr auto POLL   = sig::POLL; // ..... Pollable event occurred (System V).
  inline static constexpr auto XCPU   = sig::XCPU; // ..... CPU time limit exceeded.
  inline static constexpr auto XFSZ   = sig::XFSZ; // ..... File size limit exceeded.
  inline static constexpr auto VTALRM = sig::VTALRM; // ... Virtual timer expired.
  inline static constexpr auto PROF   = sig::PROF; // ..... Profiling timer expired.
  inline static constexpr auto USR1   = sig::USR1; // ..... User-defined signal 1.
  inline static constexpr auto USR2   = sig::USR2; // ..... User-defined signal 2.
  //
  // Nonstandard signals found in all modern POSIX systems (including both BSD and Linux).
  inline static constexpr auto WINCH = sig::WINCH; // ..... Window size change (4.3 BSD; Sun).
  //
  // Archaic names for compatibility.
  inline static constexpr auto IO  = sig::IO; // .......... I/O now possible (4.2 BSD).
  inline static constexpr auto IOT = sig::IOT; // ......... IOT instruction; abort() on a PDP-11.
  inline static constexpr auto CLD = sig::CLD; // ......... Old System V name
  //
  // WATCHOUT - SIGRTMIN and SIGRTMAX are actually function calls
  // They are modeled nearby and in the SIG object
  //
  // New Names with all the vowels and all the consonants
  // These are our inventions because we now know how to spell.
  //
  inline static constexpr auto ZERO                     = sig::ZERO;
  inline static constexpr auto INTERACTIVE              = sig::INTERACTIVE;
  inline static constexpr auto ILLEGAL                  = sig::ILLEGAL;
  inline static constexpr auto ABORT                    = sig::ABORT;
  inline static constexpr auto FLOATING_POINT_EXCEPTION = sig::FLOATING_POINT_EXCEPTION;
  inline static constexpr auto SEGMENTATION_VIOLATION   = sig::SEGMENTATION_VIOLATION;
  inline static constexpr auto TERMINATE                = sig::TERMINATE;
  //
  // Historical signals specified by POSIX.
  inline static constexpr auto HANGUP      = sig::HANGUP;
  inline static constexpr auto BREAKPOINT  = sig::BREAKPOINT;
  inline static constexpr auto BUS_ERROR   = sig::BUS_ERROR;
  inline static constexpr auto SYSTEM_CALL = sig::SYSTEM_CALL;
  inline static constexpr auto ALARM       = sig::ALARM;
  //
  // New(er) POSIX signals (1003.1-2008; 1003.1-2013).
  inline static constexpr auto URGENT               = sig::URGENT;
  inline static constexpr auto TERMINAL_STOP        = sig::TERMINAL_STOP;
  inline static constexpr auto CONTINUE             = sig::CONTINUE;
  inline static constexpr auto CHILD                = sig::CHILD;
  inline static constexpr auto TERMINAL_INPUT       = sig::TERMINAL_INPUT;
  inline static constexpr auto TERMINAL_OUTPUT      = sig::TERMINAL_OUTPUT;
  inline static constexpr auto EXCEEDED_CPU         = sig::EXCEEDED_CPU;
  inline static constexpr auto EXCEEDED_FILE_SIZE   = sig::EXCEEDED_FILE_SIZE;
  inline static constexpr auto VIRTUAL_TIMER_ALARM  = sig::VIRTUAL_TIMER_ALARM;
  inline static constexpr auto PROFILE_TIMER_EXPIRY = sig::PROFILE_TIMER_EXPIRY;
  inline static constexpr auto USER1                = sig::USER1;
  inline static constexpr auto USER2                = sig::USER2;
  //
  // Nonstandard signals found in all modern POSIX systems (including both BSD and Linux).
  inline static constexpr auto WINDOW_SIZE_CHANGE = sig::WINDOW_SIZE_CHANGE;
  //
  // Archaic names for compatibility.
  //
  // WATCHOUT - SIGRTMIN and SIGRTMAX are actually function calls
  //
  inline static auto rtmin() -> Number;
  inline static auto rtmax() -> Number;
  SIG() = delete;
  SIG(SIG const &) = delete;
  auto operator=(SIG const &) -> SIG & = delete;
};
#endiv
#divert <ipp>
namespace sys::posix {
  auto SIG::rtmin() -> Number { return sig::rtmin(); }
  auto SIG::rtmax() -> Number { return sig::rtmax(); }
}
#endiv
#divert <cpp>
#import tests.usage.posix_SIG.Usage
static_assert(tests::usage::posix_SIG::Usage<>);
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import std.string
#import sys.call.argument.Pathname
#import sys.call.result.Value
namespace sys::posix {
  namespace packaging::realpath_function {
    using call::argument::Pathname;
    using Result = call::result::Value<std::string>;
    inline auto realpath(Pathname) -> Result;
  }
  using packaging::realpath_function::realpath;
}
using sys::posix::realpath; // avoid ambiguity with the POSIX C API
#endiv
#divert <ipp>
#include <climits>
#include <cerrno>
#import realpath
#import std.move
auto sys::posix::packaging::realpath_function::realpath(Pathname pathname) -> Result {
  //
  // From Fedora 27, realpath(3), man-pages-4.12-1.fc27.noarch
  // The resulting pathname is stored as a null-terminated string, up to a maximum of PATH_MAX bytes,
  // in the buffer pointed to by resolved_path.
  // If resolved_path is  specified as NULL, then realpath() uses malloc(3) to allocate a buffer
  // of up to PATH_MAX bytes to hold the resolved pathname, and returns a pointer to this buffer.
  // The caller should deallocate this buffer using free(3).
  //
  std::string buf;
  buf.resize(PATH_MAX);
  auto resolved = ::realpath((char const *)pathname, buf.data()); // WATCHOUT for the potential recursion
  auto errnum = errno; // capture the value of errno before doing anything else
  auto ok = nullptr != resolved;
  if (ok) {
    // There seems to be no other way to do this but to walk down the string (again) and find its length.
    buf.resize(std::string::traits_type::length(buf.data()));
  } else {
    buf.clear();
  }
  Result ret(ok, errnum, std::move(buf));
  return ret;
}
#endiv

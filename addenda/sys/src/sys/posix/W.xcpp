// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys::posix {
  //
  // It's a fake namespace-in-a-struct.
  // PREFER namespace sys::w
  // PREFER namespace sys::w::constants
  // PREFER sys::w::Options
  //        etc.
  //
  // Usage:
  //
  //   using W = sys::posix::W;
  //   auto const e0 = W::NONE;
  //   auto const e1 = W::NOHANG; or whatever
  //   ...etc...
  //
  struct W;
}
#endiv
#divert <hpp>
#import sys.w.Option
#import sys.w.Options
#import sys.w.constants
#import sys.w.required.Options
#import sys.wait.constants
#import sys.wait.Status
#import sys.posix.required.rebundled
struct sys::posix::W {
  using Option = w::Option;
  using Options = w::Options;
  template<required::w::Options RESULT> inline static auto as(Option) -> RESULT;
  template<required::w::Options RESULT> inline static auto as(Options) -> RESULT;
  //
  inline static constexpr auto NONE      = w::NONE;
  inline static constexpr auto CONTINUED = w::CONTINUED;
  inline static constexpr auto EXITED    = w::EXITED;
  inline static constexpr auto NOHANG    = w::NOHANG;
  inline static constexpr auto NOWAIT    = w::NOWAIT;
  inline static constexpr auto STOPPED   = w::STOPPED;
  inline static constexpr auto UNTRACED  = w::UNTRACED;
  //
  inline static constexpr auto NOSTATUS = wait::constants::NOSTATUS;
  inline static constexpr auto NOINFO   = wait::constants::NOINFO;
  inline static constexpr auto NOUSAGES = wait::constants::NOUSAGES;
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  [[deprecated("prefer W::NOUSAGES")]] inline static constexpr auto NOUSAGE = wait::constants::NOUSAGE;
  [[deprecated("prefer W::NOINFO")]] inline static constexpr auto NOSIGINFO = wait::constants::NOSIGINFO;
#pragma GCC diagnostic pop
  using Status = wait::Status;
  inline static auto ok(Status const &) -> bool;
  inline static auto good(Status const &) -> bool;
  inline static auto fail(Status const &) -> bool;
  inline static auto clear([[out]] Status &) -> void;
  inline static auto ifexited(Status const &) -> bool;
  inline static auto exitstatus(Status const &) -> std::uint8_t;
  template<required::exits::Codable CODABLE> inline auto exitstatus(Status const &) -> CODABLE;
  inline static auto ifsignaled(Status const &) -> bool;
  inline static auto termsig(Status const &) -> int;
  template<required::id::Signal SIGNAL> inline auto termsig(Status const &s) -> SIGNAL;
  inline static auto coredump(Status const &) -> bool; 
  inline static auto ifstopped(Status const &) -> bool;
  inline static auto stopsig(Status const &) -> int;
  template<required::id::Signal SIGNAL> inline auto stopsig(Status const &s) -> SIGNAL;
  inline static auto ifcontinued(Status const &) -> bool;
  W() = delete;
  W(W const &) = delete;
  auto operator=(W const &) -> W & = delete;
};
#endiv
#divert <ipp>
#import sys.w.as
namespace sys::posix {
  auto W::ok(Status const &s) -> bool                 { return wait::ok(s); }
  auto W::good(Status const &s) -> bool               { return wait::good(s); }
  auto W::fail(Status const &s) -> bool               { return wait::fail(s); }
  auto W::clear(Status &fill) -> void                 { fill = Status(); }
  auto W::ifexited(Status const &s) -> bool           { return s.ifexited(); }
  auto W::exitstatus(Status const &s) -> std::uint8_t { return s.exitstatus(); }
  auto W::ifsignaled(Status const &s) -> bool         { return s.ifsignaled(); }
  auto W::termsig(Status const &s) -> int             { return s.termsig(); }
  auto W::coredump(Status const &s) -> bool           { return s.coredump(); }
  auto W::ifstopped(Status const &s) -> bool          { return s.ifstopped(); }
  auto W::stopsig(Status const &s) -> int             { return s.stopsig(); }
  auto W::ifcontinued(Status const &s) -> bool        { return s.ifcontinued(); }
  template<required::w::Options RESULT> auto W::as(Option o) -> RESULT  { return w::as<RESULT>(o); }
  template<required::w::Options RESULT> auto W::as(Options s) -> RESULT { return w::as<RESULT>(s); }
  template<required::exits::Codable CODABLE> auto W::exitstatus(Status const &s) -> CODABLE { return CODABLE(s.exitstatus()); }
  template<required::id::Signal SIGNAL> auto W::termsig(Status const &s) -> SIGNAL          { return SIGNAL(s.termsig()); }
  template<required::id::Signal SIGNAL> auto W::stopsig(Status const &s) -> SIGNAL          { return SIGNAL(s.stopsig()); }
}
#endiv
#divert <cpp>
#import tests.usage.posix_W.Usage
static_assert(tests::usage::posix_W::Usage<>);
#endiv

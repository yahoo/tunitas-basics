// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys::posix {
  //
  // AVOID this usage with upper-case 'PF' as the namespace name
  // PREFER that other usage with lower-case 'pf'
  //
  // Hoisting, convenience.
  // Compatibility with module-sys-devel < 0.27
  //
  // Also of note via https://en.wikipedia.org/wiki/Berkeley_sockets
  // <quote>
  //   A socket for communications using any family is created with the socket() function,
  //       by specifying the desired protocol family (PF_-identifier) as an argument.
  //   The original design concept of the socket interface distinguished between protocol types (families) and the specific address types that each may use.
  //   It was envisioned that a protocol family may have several address types.
  //   Address types were defined by additional symbolic constants, using the prefix AF instead of PF.
  //   The AF-identifiers are intended for all data structures that specifically deal with the address type and not the protocol family.
  //   However, this concept of separation of protocol and address type has not found implementation support
  //       and the AF-constants were defined by the corresponding protocol identifier,
  //       leaving the distinction between AF and PF constants as a technical argument of no practical consequence.
  //   Indeed, much confusion exists in the proper usage of both forms.
  //   The POSIX.1â€”2008 specification doesn't specify any PF-constants, but only AF-constants.
  //
  //   See
  //     UNIX Network Programming Volume 1, Third Edition: The Sockets Networking API,
  //         W. Richard Stevens, Bill Fenner, Andrew M. Rudoff, Addison Wesley, 2003.
  //     "The Open Group Base Specifications Issue 7".
  //         pubs.opengroup.org. availability claimed: 2012-07-26.
  //  </quote>
  //          
  // Usage (AVOID):
  //
  //   #import sys.posix.PF ................................. provides type [[avoid]] posix::PF, contra [[prefer]] posix::pf::Type
  //   sys::posix::PF pf = sys::posix::PF::INET6;
  //   auto fam = sys::posix::PF::INET6;
  //
  //   #import sys.posix.PF.constants  ...................... is demi-pointless here
  //   sys::posix::PF pf = sys::posix::PF::INET6;
  //   auto fam = sys::posix::PF::INET6;
  //   
  // Suggest (PREFER):
  //
  //   #import sys.posix.pf.Type
  //   sys::posix::pf::Type fam = sys::posix::pf::Type::INET6;
  //   auto ily = sys::posix::pf::Type::INET6;
  //   #import sys.posix.pf.constants
  //   auto ily = sys::posix::pf::INET6;
  //
  // WATCHOUT --there is NO SUCH ----> sys::posix::PF::Type <--- NO SUCH
  //                       exists ---> sys::posix::pf::Type <---- exists
  struct PF;
}
#endiv
#divert <hpp>
#import sys.pf.Type
#import sys.pf.constants
struct sys::posix::PF {
  struct _IP_;
  using IP = _IP_; // so we can say PF::IP::IP and not name that certain constructor
  struct UN;
  // NOT ---> using Network = ...
  // NOT ---> using Family = ...
  using Protocol = pf::Type;
  using Type [[deprecated]] = pf::Type;
  inline static auto const UNSPECIFIED = pf::UNSPECIFIED;
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  [[deprecated("instead prefer AF::UNIX")]] inline static auto const UNIX = pf::UNIX;
  [[deprecated("instead prefer AF::LOCAL")]] inline static auto const LOCAL = pf::LOCAL;
  [[deprecated("instead prefer AF::INET4")]] inline static auto const INET4 = pf::INET4;
  [[deprecated("instead prefer AF::INET6")]] inline static auto const INET6 = pf::INET6;
  [[deprecated("instead prefer AF::IPX")]] inline static auto const IPX = pf::IPX;
  [[deprecated("instead prefer AF::NETLINK")]] inline static auto const NETLINK = pf::NETLINK;
  [[deprecated("instead prefer AF::X25")]] inline static auto const X25 = pf::X25;
  [[deprecated("instead prefer AF::AX25")]] inline static auto const AX25 = pf::AX25;
  [[deprecated("instead prefer AF::ATMPVC")]] inline static auto const ATMPVC = pf::ATMPVC;
  [[deprecated("instead prefer AF::APPLETALK")]] inline static auto const APPLETALK = pf::APPLETALK;
  [[deprecated("instead prefer AF::PACKET")]] inline static auto const PACKET = pf::PACKET;
  [[deprecated("instead prefer AF::ALGORITHM")]] inline static auto const ALGORITHM = pf::ALGORITHM;
  inline static auto const UNSPEC = pf::UNSPEC;
  [[deprecated("instead prefer AF::INET")]] inline static auto const INET = pf::INET;
  [[deprecated("instead prefer AF::ALG")]] inline static auto const ALG = pf::ALG;
#pragma GCC diagnostic pop
  PF() = delete;
  PF(PF const &) = delete;
  auto operator=(PF const &) -> PF & = delete;
};
#endiv
#divert <cpp>
#import tests.usage.posix_PF.Usage
static_assert(tests::usage::posix_PF::Usage<>);
#endiv

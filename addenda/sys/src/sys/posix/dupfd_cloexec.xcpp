// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.posix.packaging.fcntl.interface
namespace sys::posix {
  //
  // Duplicate a file descriptor, using a "not less than" algorithm.
  // This semantic is different that dup(2) or dup2(2)
  //
  namespace packaging::dupfd_cloexec {
    using namespace packaging::fcntl::interface;
    namespace function {
      using Result = result::Descriptor<File>;
      inline auto dupfd_cloexec(File, File minimum) -> Result;
    }
    namespace native {
      using Result = result::Descriptor<int>;
      inline auto dupfd_cloexec(int fd, int minimum) -> Result;
    }
  }
  using packaging::dupfd_cloexec::function::dupfd_cloexec;
  namespace native { using packaging::dupfd_cloexec::native::dupfd_cloexec; }
}
#endiv
#divert <ipp>
#import sys.posix.fcntl
namespace sys::posix::packaging::dupfd_cloexec {
  auto function::dupfd_cloexec(File fd, File minimum) -> Result {
    auto called = native::dupfd_cloexec((int)fd, (int)minimum);
    return {good(called), error_num(called), File{value(called)}};
  }
  auto native::dupfd_cloexec(int fd, int minimum) -> Result { return posix::native::fcntl(fd, F::DUPFD_CLOEXEC, minimum); }
}
#endiv

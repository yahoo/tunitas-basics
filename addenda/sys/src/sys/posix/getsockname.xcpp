// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.posix.packaging.sock.interface
namespace sys::posix {
  namespace packaging::getsockname {
    using namespace packaging::sock::interface;
    namespace got = result::status;
    namespace function {
      inline auto getsockname(File, [[out]] Sockaddr &, [[inout]] Socklen &) -> got::Status;
      template<required::Sockaddr SOCKADDR> inline auto getsockname(File, [[out]] SOCKADDR &) -> got::Status;
      template<required::Sockaddr SOCKADDR> inline auto getsockname(File) -> got::Sockaddr<SOCKADDR>;
    }
    namespace native {
      inline auto getsockname(int fd, [[out]] Sockaddr &, [[inout]] Socklen &) -> got::Status;
      template<required::Sockaddr SOCKADDR> inline auto getsockname(int fd, [[out]] SOCKADDR &) -> got::Status;
      template<required::Sockaddr SOCKADDR> inline auto getsockname(int fd) -> got::Sockaddr<SOCKADDR>;
    }
  }
  using packaging::getsockname::function::getsockname;
  namespace native { using packaging::getsockname::native::getsockname; }
}
#endiv
#divert <ipp>
#import sys.sock.addr.upcast
#import sys.posix.syscall
#import std.runtime_error
namespace sys::posix::packaging::getsockname {
  namespace upcast = sys::sock::addr::upcast;
  auto function::getsockname(File fd, Sockaddr &addr, Socklen &addrlen) -> got::Status                     { return native::getsockname((int)fd, addr, addrlen); }
  template<required::Sockaddr SOCKADDR> auto function::getsockname(File fd, SOCKADDR &addr) -> got::Status { return native::getsockname<SOCKADDR>((int)fd, addr); }
  template<required::Sockaddr SOCKADDR> auto function::getsockname(File fd) -> got::Sockaddr<SOCKADDR>     { return native::getsockname<SOCKADDR>((int)fd); }
  //
  auto native::getsockname(int fd, Sockaddr &addr, socklen_t &addrlen) -> got::Status { return idiomatic::syscall<int>(Syscall::GETSOCKNAME, fd, upcast::to_address(addr), &addrlen); }
  template<required::Sockaddr SOCKADDR> auto native::getsockname(int fd, SOCKADDR &addr) -> got::Status {
    Socklen proposed{sizeof (addr)};
    auto called = idiomatic::syscall<int>(Syscall::GETSOCKNAME, fd, &addr, &proposed);
    if (proposed != sizeof (addr)) {
      // We got something else (which was unexpected).   What else can we do?
      // This can happen when SOCKADDR=sockaddr and we get sockaddr_in4 back; or a sockaddr_in6
      throw std::runtime_error{"sockaddr size surprise"};
    }
    return called;
  }
  template<required::Sockaddr SOCKADDR> auto native::getsockname(int fd) -> got::Sockaddr<SOCKADDR> {
    SOCKADDR addr;
    Socklen proposed{sizeof (addr)};
    auto called = idiomatic::syscall<int>(Syscall::GETSOCKNAME, fd, &addr, &proposed);
    return {good(called), error_num(called), value(called), addr, proposed};
  }
}
#endiv

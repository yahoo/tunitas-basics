// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.posix.packaging.iov.interface
namespace sys::posix {
  namespace packaging::preadv {
    using namespace packaging::iov::interface;
    namespace function {
      inline auto preadv(File, [[out]] io::Vec *, Count, Offset) -> Result;
      inline auto preadv(File, [[out]] io::Vector<io::Vec>, Offset) -> Result;
    }
    namespace native {
      inline auto preadv(int fd, [[out]] io::Vec *, Count, Offset) -> Result;
      inline auto preadv(int fd, [[out]] io::Vector<io::Vec>, Offset) -> Result;
    }
  }
  using packaging::preadv::function::preadv;
  namespace native { using packaging::preadv::native::preadv; }
}
#endiv
#divert <ipp>
#import sys.posix.readv
namespace sys::posix::packaging::preadv {
  auto function::preadv(File fd, io::Vec *vec, Count count, Offset offset) -> Result { return posix::readv(fd, vec, count, offset); }
  auto function::preadv(File fd, io::Vector<io::Vec> vec, Offset offset) -> Result   { return posix::readv(fd, vec, offset); }
  //
  auto native::preadv(int fd, io::Vec *vec, Count count, Offset offset) -> Result    { return posix::native::readv(fd, vec, count, offset); }
  auto native::preadv(int fd, io::Vector<io::Vec> vec, Offset offset) -> Result      { return posix::native::readv(fd, vec, offset); }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.posix.packaging.wait.interface
namespace sys::posix {
  namespace packaging::waitpid {
    using namespace packaging::wait::interface;
    namespace function { using namespace bundle::waitpid::function; }
    namespace native { using namespace bundle::waitpid::native; }
  }
}
#endiv
#divert <hpp>
namespace sys::posix::packaging::waitpid {
  // 
  // id_t can be a pid_t (positive) or a pgid_t (negative)
  // to wit:
  //    id  < -1    meaning wait for any child process whose process group ID is equal to the absolute value of pid.
  //    id == -1    meaning wait for any child process.
  //    id ==  0    meaning wait for any child process whose process group ID is equal to that of the calling process.
  //    id  >  0    meaning wait for the child whose process ID is equal to the value of pid.
  //
  // Invariants:
  //   it is unspecified behavior to put a negative number in an id::process::Process
  //   it is unspecified behavior to put a positive number in an id::process::Group
  //
  namespace function {
    template<identifier::Indicated MATCHED> inline auto waitpid(MATCHED, [[in]] Options = Options{}) -> status::Returned;
    template<identifier::Indicated MATCHED> inline auto waitpid(MATCHED, [[in]] Options, [[out]] status::Filled &) -> identifier::Returned;
    template<identifier::Indicated MATCHED> [[signature("original ordering")]] inline auto waitpid(MATCHED, [[out]] status::Filled &, [[in]] Options) -> identifier::Returned;
    template<identifier::Indicated MATCHED> inline auto waitpid(MATCHED, [[in]] Options, status::Unfilled) -> identifier::Returned;
    template<identifier::Indicated MATCHED> [[signature("original ordering")]] inline auto waitpid(MATCHED, status::Unfilled, [[in]] Options) -> identifier::Returned;
    //
    template<> inline auto waitpid<id::Either>(id::Either, [[in]] Options) -> status::Returned;
    template<> inline auto waitpid<id::Either>(id::Either, [[in]] Options, [[out]] status::Filled &) -> identifier::Returned;
    template<> [[signature("original ordering")]] inline auto waitpid<id::Either>(id::Either, [[out]] status::Filled &, [[in]] Options) -> identifier::Returned;
    template<> inline auto waitpid<id::Either>(id::Either, [[in]] Options, status::Unfilled) -> identifier::Returned;
    template<> [[signature("original ordering")]] inline auto waitpid<id::Either>(id::Either, status::Unfilled, [[in]] Options) -> identifier::Returned;
  }
  namespace native {
    inline auto waitpid(pid_t, [[in]] Options = Options{}) -> status::Returned;
    inline auto waitpid(pid_t, [[in]] Options, [[out]] status::Filled &) -> identifier::Returned;
    [[signature("original ordering")]] inline auto waitpid(pid_t, [[out]] status::Filled &, [[in]] Options) -> identifier::Returned;
    inline auto waitpid(pid_t, [[in]] Options, status::Unfilled) -> identifier::Returned;
    [[signature("original ordering")]] inline auto waitpid(pid_t, status::Unfilled, [[in]] Options) -> identifier::Returned;
  }
}
namespace sys::posix {
  using packaging::waitpid::function::waitpid;
  namespace native { using packaging::waitpid::native::waitpid; }
}
#endiv
#divert <ipp>
#import nonstd.Visitor
#import std.visit // [[FIXTHIS]] move to nonstd.visit when convenient
#import sys.posix.packaging.waitpid.returned
namespace sys::posix::packaging::waitpid {
  template<function::identifier::Indicated MATCHED> auto function::waitpid(MATCHED match, Options options) -> status::Returned                              { return returned::waitpid<id::Process>((pid_t)match, options); }
  template<function::identifier::Indicated MATCHED> auto function::waitpid(MATCHED match, Options options, status::Filled &sutats) -> identifier::Returned  { return returned::waitpid<id::Process>((pid_t)match, options, sutats); }
  template<function::identifier::Indicated MATCHED> auto function::waitpid(MATCHED match, status::Filled &sutats, Options options) -> identifier::Returned  { return returned::waitpid<id::Process>((pid_t)match, options, sutats); }
  template<function::identifier::Indicated MATCHED> auto function::waitpid(MATCHED match, Options options, status::Unfilled sutats) -> identifier::Returned { return returned::waitpid<id::Process>((pid_t)match, options, sutats); }
  template<function::identifier::Indicated MATCHED> auto function::waitpid(MATCHED match, status::Unfilled sutats, Options options) -> identifier::Returned { return returned::waitpid<id::Process>((pid_t)match, options, sutats); }
  namespace function {
    namespace {
      using nonstd::Visitor;
      using std::visit;
    }
    template<> auto waitpid<>(id::Either match, Options options) -> status::Returned {
      auto vv = Visitor{[options](id::Process match) { return waitpid(match, options); },
                        [options](id::Group match)   { return waitpid(match, options); }};
      return visit(vv, match);
    }
    template<> auto waitpid<>(id::Either match, Options options, status::Filled &sutats) -> identifier::Returned {
      auto vv = Visitor{[options, &sutats](id::Process match) { return waitpid(match, options, sutats); },
                        [options, &sutats](id::Group match)   { return waitpid(match, options, sutats); }};
      return visit(vv, match);
    }
    template<> auto waitpid<>(id::Either match, status::Filled &sutats, Options options) -> identifier::Returned {
      auto vv = Visitor{[&sutats, options](id::Process match) { return waitpid(match, sutats, options); },
                        [&sutats, options](id::Group match)   { return waitpid(match, sutats, options); }};
      return visit(vv, match);
    }
    template<> auto waitpid<>(id::Either match, Options options, status::Unfilled sutats) -> identifier::Returned {
      auto vv = Visitor{[options, &sutats](id::Process match) { return waitpid(match, options, sutats); },
                        [options, &sutats](id::Group match)   { return waitpid(match, options, sutats); }};
      return visit(vv, match);
    }
    template<> auto waitpid<>(id::Either match, status::Unfilled sutats, Options options) -> identifier::Returned {
      auto vv = Visitor{[&sutats, options](id::Process match) { return waitpid(match, sutats, options); },
                        [&sutats, options](id::Group match)   { return waitpid(match, sutats, options); }};
      return visit(vv, match);
    }
  }
  //
  auto native::waitpid(pid_t match, Options options) -> status::Returned                              { return returned::waitpid<pid_t>(match, options); }
  auto native::waitpid(pid_t match, Options options, status::Filled &sutats) -> identifier::Returned  { return returned::waitpid<pid_t>(match, options, sutats); }
  auto native::waitpid(pid_t match, status::Filled &sutats, Options options) -> identifier::Returned  { return returned::waitpid<pid_t>(match, options, sutats); }
  auto native::waitpid(pid_t match, Options options, status::Unfilled sutats) -> identifier::Returned { return returned::waitpid<pid_t>(match, options, sutats); }
  auto native::waitpid(pid_t match, status::Unfilled sutats, Options options) -> identifier::Returned { return returned::waitpid<pid_t>(match, options, sutats); }
}
#endiv
#divert <cpp>
#import tests.usage.posix_waitpid.Usage
static_assert(tests::usage::posix_waitpid::Usage<>);
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.posix.packaging.at.interface // in lieu of packaging::mkdir::interface
namespace sys::posix {
  //
  // reminder ... from mkdirat(2) c.f. man-pages-4.16-3.fc29.noarch
  // <quote>
  //   Under Linux apart from the permission bits, only the S_ISVTX mode bit is honored.   
  //   That is, under Linux the created directory actually gets mode (mode & ~umask & 01777).
  //   See also stat(2).
  // </quote>
  //
  namespace packaging::mkdirat {
    using namespace packaging::at::interface;
    namespace function {
      using Position = argument::Position<File>;
      inline auto mkdirat(Position, Pathname, Permissions) -> result::Status;
    }
    namespace native {
      using Position = argument::Position<int>;
      inline auto mkdirat(Position, Pathname, Permissions) -> result::Status;
    }    
  }
  using packaging::mkdirat::function::mkdirat;
  namespace native { using packaging::mkdirat::native::mkdirat; }
}
using sys::posix::mkdirat; // avoid ambiguity with the POSIX C API
#endiv
#divert <ipp>
#import sys.posix.syscall
namespace sys::posix::packaging::mkdirat {
  auto function::mkdirat(Position directory, Pathname pathname, Permissions perms) -> result::Status { return native::mkdirat(directory, move(pathname), perms); }
  auto native::mkdirat(Position directory, Pathname pathname, Permissions perms) -> result::Status   { return idiomatic::syscall<int>(Syscall::MKDIRAT, (int) directory, (char const *)pathname, (mode_t)perms); }
}
#endiv

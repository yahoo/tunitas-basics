// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys::posix {
  //
  // AVOID this usage with upper-case 'AF' as the namespace name
  // PREFER that other usage with lower-case 'af'
  //
  // Hoisting, convenience, compatibility & uniformity
  // Compatibility with module-sys-devel < 0.27
  //
  // Usage (AVOID):
  //
  //   #import sys.posix.AF ................................. provides type [[avoid]] posix::AF, contra [[prefer]] posix::af::Type
  //   sys::posix::AF af = sys::posix::AF::INET6;
  //   auto fam = sys::posix::AF::INET6;
  //
  //   #import sys.posix.AF.constants  ...................... is demi-pointless here
  //   sys::posix::AF af = sys::posix::AF::INET6;
  //   auto fam = sys::posix::AF::INET6;
  //   
  // Suggest (PREFER):

  //   #import sys.posix.af.Type
  //   sys::posix::af::Type fam = sys::posix::af::Type::INET6;
  //   auto ily = sys::posix::af::Type::INET6;
  //   #import sys.posix.af.constants
  //   auto ily = sys::posix::af::INET6;
  //
  // WATCHOUT --there is NO SUCH ----> sys::posix::AF::Type <--- NO SUCH
  //                       exists ---> sys::posix::af::Type <---- exists
  struct AF;
}
#endiv
#divert <hpp>
#import sys.af.Type
#import sys.af.constants
struct sys::posix::AF {
  struct IP; // for ip(7)
  using IN [[deprecated("instead prefer posix::AF::IP")]] = IP;
  struct UN; // for unix(7)
  // NOT ---> using Network = ...
  // NOT ---> using Family = ...
  using Address = af::Type;
  using Type [[deprecated]] = af::Type;
  inline static auto const UNSPECIFIED = af::UNSPECIFIED;
  inline static auto const UNIX = af::UNIX;
  inline static auto const LOCAL = af::LOCAL;
  inline static auto const INET4 = af::INET4;
  inline static auto const INET6 = af::INET6;
  inline static auto const IPX = af::IPX;
  inline static auto const NETLINK = af::NETLINK;
  inline static auto const X25 = af::X25;
  inline static auto const AX25 = af::AX25;
  inline static auto const ATMPVC = af::ATMPVC;
  inline static auto const APPLETALK = af::APPLETALK;
  inline static auto const PACKET = af::PACKET;
  inline static auto const ALGORITHM = af::ALGORITHM;
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  inline static auto const UNSPEC = af::UNSPEC;
  inline static auto const INET = af::INET;
  inline static auto const ALG = af::ALG;
#pragma GCC diagnostic pop
  AF() = delete;
  AF(AF const &) = delete;
  auto operator=(AF const &) -> AF & = delete;
};
#endiv
#divert <cpp>
#import tests.usage.posix_AF.Usage
static_assert(tests::usage::posix_AF::Usage<>);
#endiv

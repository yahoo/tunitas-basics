// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.posix.packaging.sleep.interface
namespace sys::posix {
  //
  // Noted via man-pages-4.16-3.fc29.noarch
  //
  //    (on Linux) extern "C" sleep(...) uses nanosleep(2)
  //    and so do we herein
  //
  // Precision:
  //
  //   The sleep is specified in precision of seconds.
  //   For finer precision use an nanosleep(2) directly.
  //
  // Design:
  //
  //   Given diverse representations for seconds, possibly at even higher precision,
  //   the value is ALWAYS truncated (downward) to seconds and a call to nanoseconds is made.
  //
  //   Whereas there is no unambiguous C data structure for milliseconds or seconds (unsigned int, good luck!)
  //   those two precisions are only available using the std::chrono (time::duration::Duration<REP, RATIO> system)

  // Returns:
  //
  //    The time remaining.
  //    zero if the dormant interval expired.
  //    nonero if a signal interrupted the dormancy.
  //
  namespace packaging::sleep {
    namespace interface {
      using namespace sleep::interface;
      template<required::Integer REP, required::Ratio RATIO> inline auto sleep(duration::Duration<REP, RATIO> const &) -> result::Returned<duration::Duration<REP, RATIO>>;
      inline auto sleep(time::Val const &) -> result::Returned<time::Val>;
      inline auto sleep(time::Spec const &) -> result::Returned<time::Spec>;
    }
  }
  using packaging::sleep::interface::sleep;
}
#endiv
#divert <ipp>
#import sys.posix.packaging.sleep.coerce
#import sys.posix.packaging.sleep.returning
namespace sys::posix::packaging::sleep {
  auto interface::sleep(time::Val const &interval) -> result::Returned<time::Val>   { return coerce<time::Val>(returning(coerce<duration::Seconds>(interval))); }
  auto interface::sleep(time::Spec const &interval) -> result::Returned<time::Spec> { return coerce<time::Spec>(returning(coerce<duration::Seconds>(interval))); }
  template<required::Integer REP, required::Ratio RATIO> auto interface::sleep(duration::Duration<REP, RATIO> const &interval) -> result::Returned<duration::Duration<REP, RATIO>> { return coerce<duration::Duration<REP, RATIO>>(returning(coerce<duration::Seconds>(interval))); }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
//
// The unix(7) protocol types & constants
//
// Usage:
//
//   auto sd = un::socket(AF::UN::LOCAL, SOCK::DATAGRAM, PF::UN::LOCAL);
//   auto sd = un::socket(AF::UN::UNIX, SOCK::STREAM, PF::UN::UNIX);
//
//   auto sd2 = un::socketpair(AF::UN::LOCAL, SOCK::STREAM, PF::UN::LOCAL);
//   auto sd2 = un::socketpair(AF::UN::UNIX, SOCK::DATAGRAM, PF::UN::UNIX);
//
#include <hpp/sys.posix.PF>
#endiv
#divert <hpp>
#import sys.net.Network
#import sys.un.proto.Type
#import sys.un.proto.Family
#import sys.un.constants
class sys::posix::PF::UN {
  using Network = net::Network;
  template<Network NETWORK> inline static constexpr auto Family = un::proto::Family<NETWORK>;
  static_assert(un::UNSPECIFIED == Family<Network::UNSPECIFIED>);
public:
  using Protocol = un::proto::Type;
  inline static constexpr auto UNSPECIFIED = un::UNSPECIFIED;
  UN() = delete;
  UN(UN const &) = delete;
  auto operator=(UN const &) -> UN & = delete;
};
#endiv
#divert <cpp>
#import tests.usage.posix_PF_UN.Usage
static_assert(tests::usage::posix_PF_UN::Usage<>);
#endiv

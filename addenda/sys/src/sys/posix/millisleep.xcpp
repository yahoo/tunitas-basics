// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.posix.packaging.sleep.interface
namespace sys::posix {
  //
  // Design:
  //
  //   The time literals, e.g. 1s, 1ms, 1us, 1ns are in the basic precision unit
  //   They SHOULD be converted to millisecond precision at the call site
  //
  // Usage:
  //
  //   auto slept = milliseconds(duration_cast<Milliseconds>(10ms));
  //   auto slept = milliseconds(10ms);
  //   
  namespace packaging::millisleep {
    using namespace packaging::sleep;
    namespace interface {
      using namespace packaging::sleep::interface;
      namespace required = packaging::sleep::interface::required;
      template<required::Integer REP, required::Ratio RATIO> inline auto millisleep(duration::Duration<REP, RATIO> const &) -> result::Returned<duration::Duration<REP, RATIO>>;
      template<required::Integer REP, required::Ratio RATIO> inline auto millisleep(duration::Duration<REP, RATIO> const &, [[out]] duration::Duration<REP, RATIO> &) -> result::Status;
      //
      // reminder ... there is no natural container struct(ure) in posix to capture.
      // we do not (yet) acknowledge struct timeb because it is deprecated and abandoned by its one syscall ftimes.
      // If you really really want millisecond precision then use time::duration::Milliseconds (std::chrono::duration and milliseconds)
      //
      inline auto millisleep([[in]] time::Val const &) -> result::Returned<time::Val>;
      inline auto millisleep([[in]] time::Val const &, nullptr_t) -> result::Status;
      inline auto millisleep([[in]] time::Val const &, [[out]] time::Val &) -> result::Status;
      inline auto millisleep([[in]] time::Spec const &) -> result::Returned<time::Spec>;
      inline auto millisleep([[in]] time::Spec const &, nullptr_t) -> result::Status;
      inline auto millisleep([[in]] time::Spec const &, [[out]] time::Spec &) -> result::Status;
    }
  }
  using packaging::millisleep::interface::millisleep;
}
#endiv
#divert <ipp>
#import sys.posix.syscall
#import sys.posix.packaging.sleep.coerce
#import sys.posix.packaging.sleep.returning
#import sys.posix.packaging.sleep.status
namespace sys::posix::packaging::millisleep {
  auto interface::millisleep(time::Val const &interval) -> result::Returned<time::Val>          { return returning(interval); }
  auto interface::millisleep(time::Val const &interval, std::nullptr_t) -> result::Status       { return status(interval); }
  auto interface::millisleep(time::Val const &interval, time::Val &remaining) -> result::Status {
    auto const presented = coerce<time::Spec>(interval);
    auto collected = time::Spec{};
    auto slept = idiomatic::syscall<int>(Syscall::NANOSLEEP, &presented, &collected);
    remaining = coerce<time::Val>(collected);
    return slept;
  }
  auto interface::millisleep(time::Spec const &interval) -> result::Returned<time::Spec>          { return coerce<time::Spec>(returning(coerce<duration::Milliseconds>(interval))); }
  auto interface::millisleep(time::Spec const &interval, std::nullptr_t) -> result::Status        { return status(coerce<duration::Milliseconds>(interval)); }
  auto interface::millisleep(time::Spec const &interval, time::Spec &remaining) -> result::Status {
    auto const presented = coerce<time::Spec>(coerce<duration::Milliseconds>(interval));
    return idiomatic::syscall<int>(Syscall::NANOSLEEP, &presented, &remaining);
  }
  template<interface::required::Integer REP, interface::required::Ratio RATIO> auto interface::millisleep(duration::Duration<REP, RATIO> const &interval) -> result::Returned<duration::Duration<REP, RATIO>> {
    auto const presented = coerce<time::Spec>(coerce<duration::Milliseconds>(interval));
    return coerce<duration::Duration<REP, RATIO>>(returning(presented));
  }
  template<interface::required::Integer REP, interface::required::Ratio RATIO> auto interface::millisleep(duration::Duration<REP, RATIO> const &interval, duration::Duration<REP, RATIO> &remaining) -> result::Status {
    auto const presented = coerce<time::Spec>(coerce<duration::Milliseconds>(interval));
    auto collected = time::Spec{};
    auto status = idiomatic::syscall<int>(Syscall::NANOSLEEP, &presented, &collected);
    // ALWAYS update the remaining, even when the return is fail(slept) ... e.g. interrupted by a signal handler.
    remaining = coerce<duration::Duration<REP, RATIO>>(collected);
    return status;
  }
}
#endiv

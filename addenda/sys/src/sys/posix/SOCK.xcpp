// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys::posix {
  //
  // The UPPERCASE variant is a type (i.e. struct SOCK contra namepace sock)
  // This needs to be a type for uniformity with AF, PF, IPPROTO, MSG and the others.
  // If you want a namespace-oriented interface then use 'namespace sock'
  //
  // Usage:
  //
  //   using SOCK = sys::posix::SOCK;
  //   auto const t = SOCK::STREAM; ............... a socket type
  //   auto const c = SOCK::CLOEXC ................ a socket flag crammed into the type field (ick!)
  //   auto const n = SOCK::NONBLOCK
  //   auto const f = t | c |  n;
  //
  // There are enum class name declarations nearby.
  // at least: Flags, Option, Options, Type
  //
  // Usage:
  //
  //   struct-as-namespace
  struct SOCK;
}
#endiv
#divert <hpp>
#import sys.sock.Type
#import sys.sock.Option
#import sys.sock.Options
#import sys.sock.Specification
#import sys.sock.constants
#import sys.sock.required.Options
struct sys::posix::SOCK {
  using Type = sock::Type;
  using Option = sock::Option;
  using Options = sock::Options;
  using Specification = sock::Specification;
  template<sock::required::Options<Type> RESULT> inline static auto as(Option) -> RESULT;
  template<sock::required::Options<Type> RESULT> inline static auto as(Options) -> RESULT;
  template<sock::required::Options<Type> RESULT> inline static auto as(Specification) -> RESULT;
  //
  inline constexpr static auto UNSPECIFIED = sock::UNSPECIFIED;
  inline constexpr static auto STREAM = sock::STREAM;
  inline constexpr static auto DATAGRAM = sock::DATAGRAM;
  inline constexpr static auto SEQUENCED = sock::SEQUENCED;
  inline constexpr static auto RDM = sock::RDM;
  inline constexpr static auto RELIABLE = sock::RELIABLE;
  inline constexpr static auto DCCP = sock::DCCP;
  inline constexpr static auto RAW = sock::RAW;
  //
  inline constexpr static auto NONE = sock::NONE;
  inline constexpr static auto CLOEXEC = sock::CLOEXEC;
  inline constexpr static auto CLOSE_ON_EXEC = sock::CLOSE_ON_EXEC;
  inline constexpr static auto NONBLOCK = sock::NONBLOCK;
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  inline constexpr static auto UNSPEC = sock::UNSPEC;
  inline constexpr static auto DGRAM = sock::DGRAM;
  inline constexpr static auto SEQPACKET = sock::SEQPACKET;
  [[deprecated("instead use packet(7) with socket(AF::PACKET, SOCK::RAW, protocol) or socket(AF::PACKET, SOCK::DGRAM, protocol) with <protocol> in network order")]]
  inline constexpr static auto PACKET = sock::PACKET;
#pragma GCC diagnostic pop
  SOCK() = delete;
  SOCK(SOCK const &) = delete;
  auto operator=(SOCK const &) -> SOCK & = delete;
};
#endiv
#divert <ipp>
#import sys.sock.as
namespace sys::posix {
  template<sock::required::Options<SOCK::Type> RESULT> inline auto SOCK::as(Option o) -> RESULT { return sock::template as<RESULT>(o); }
  template<sock::required::Options<SOCK::Type> RESULT> inline auto SOCK::as(Options s) -> RESULT { return sock::template as<RESULT>(s); }
  template<sock::required::Options<SOCK::Type> RESULT> inline auto SOCK::as(Specification n) -> RESULT { return sock::template as<RESULT>(n); }
}
#endiv
#divert <cpp>
#import tests.usage.posix_SOCK.Usage
static_assert(tests::usage::posix_SOCK::Usage<>);
#endiv

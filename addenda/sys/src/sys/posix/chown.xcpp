// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.call.argument.Pathname
#import sys.call.Result
#import sys.id.User
#import sys.id.Group
#import uid_t
#import gid_t
namespace sys::posix {
  namespace packaging::chown_function {
    using call::argument::Pathname;
    using call::Result;
    using id::User;
    using id::Group;
    inline auto chown(Pathname, User) -> call::Result;
    inline auto chown(Pathname, Group) -> call::Result;
    inline auto chown(Pathname, User, Group) -> call::Result;
    inline auto chown(Pathname, uid_t, gid_t) -> call::Result;
  }
  using packaging::chown_function::chown;
}
using sys::posix::chown; // avoid ambiguity with the POSIX C API
#endiv
#divert <ipp>
#import sys.posix.packaging.chown.Pathname
namespace sys::posix::packaging {
  auto chown_function::chown(Pathname pathname, User uid) -> call::Result             { return packaging::chown::Pathname<Syscall::CHOWN>::call(move(pathname), uid); }
  auto chown_function::chown(Pathname pathname, Group gid) -> call::Result            { return packaging::chown::Pathname<Syscall::CHOWN>::call(move(pathname), gid); }
  auto chown_function::chown(Pathname pathname, User uid, Group gid) -> call::Result  { return packaging::chown::Pathname<Syscall::CHOWN>::call(move(pathname), uid, gid); }
  auto chown_function::chown(Pathname pathname, uid_t uid, gid_t gid) -> call::Result { return packaging::chown::Pathname<Syscall::CHOWN>::call(move(pathname), uid, gid); }
}
#endiv

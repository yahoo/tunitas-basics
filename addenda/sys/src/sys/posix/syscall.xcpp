// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.posix.Syscall
#import sys.call.result.Value
#import sys.posix.packaging.required // cascade the namespaces
#import sys.posix.required.syscall.Argument
#import sys.posix.required.syscall.result.Idiomatic
#import sys.posix.required.syscall.result.Stylized
namespace sys::posix {
  namespace packaging::syscall {
    using Result = call::result::Value<long>;
    using required::syscall::Argument;
    namespace function {
      // The preferred usage.
      template<typename... TYPES> inline auto syscall(Syscall, TYPES ...) -> Result requires (true && ... && Argument<TYPES>);
    }
    namespace native {
      // NO SUCH (it would be ill-defined) but see 'namespace direct' below.
      template<typename... TYPES> inline auto syscall(Syscall, TYPES ...) -> Result = delete;
    }
    namespace idiomatic {
      // This is an implementation detail.
      // The system call idiom (e.g. recovers errno) returning the converted RESULT as indicated.
      template<required::syscall::result::Idiomatic RESULT, typename... TYPES> inline auto syscall(Syscall, TYPES ...) -> call::result::Value<RESULT> requires (true && ... && Argument<TYPES>);
    }
    namespace stylized {
      // This is an (another) implementation detail.
      // The stylistic system call is expected define its own result type which "is similar to" result::Value<RESULT> but is richer
      template<required::syscall::result::Stylized RESULT, typename... TYPES> inline auto syscall(Syscall, TYPES ...) -> RESULT requires (true && ... && Argument<TYPES>);
    }
    namespace direct {
      // This is an implementation detail.
      // Direct calls to ::syscall(...), returns the standard-defined 'long' result
      // Its value-add is in the hard typechecking which ensures that the TYPES... are all syscall-appropriate.
      template<typename... TYPES> inline auto syscall(Syscall, TYPES ...) -> long requires (true && ... && Argument<TYPES>);
    }
  }
  using packaging::syscall::function::syscall;
  namespace [[detail]] idiomatic { using packaging::syscall::idiomatic::syscall; } // [[FIXTHIS]] find a way to NOT export this implementation detail out to namespace sys::posix
  namespace direct { using packaging::syscall::direct::syscall; }
}
#endiv
#divert <ipp>
#include <cerrno>
#include <unistd.h>
#import sys.call.result.Element
namespace sys::posix::packaging::syscall {
  template<typename... TYPES> inline auto function::syscall(Syscall number, TYPES ...arguments) -> Result requires (true && ... && Argument<TYPES>)                                                               { return idiomatic::syscall<long>(number, arguments...); }
  template<typename... TYPES> inline auto direct::syscall(Syscall number, TYPES ...arguments) -> long requires (true && ... && Argument<TYPES>)                                                                   { return ::syscall((long)number, arguments...); }
  template<required::syscall::result::Idiomatic PAYLOAD, typename... TYPES> auto idiomatic::syscall(Syscall number, TYPES ...arguments) -> call::result::Value<PAYLOAD> requires (true && ... && Argument<TYPES>) { return stylized::syscall<call::result::Value<PAYLOAD>>(number, arguments...); }
  template<required::syscall::result::Stylized RESULT, typename... TYPES> auto stylized::syscall(Syscall number, TYPES ...arguments) -> RESULT requires (true && ... && Argument<TYPES>) {
    using Narrowed = typename call::result::Element<0, RESULT>::Type;
    auto const called = direct::syscall(number, arguments...);
    auto const errnum = errno; // ................ capture the value of errno before doing anything else
    auto const ok = 0 <= called; // .............. this expression must signal success for the fd-returning syscalls (e.g. open) AND ALSO the bool-returning syscalls (e.g. close) that return {0, -1}
    auto const narrowed = Narrowed(called); // ... this is narrowing when RESULT is 'int' and called is (always) 'long'
    return {ok, errnum, narrowed};
  }
}
#endiv

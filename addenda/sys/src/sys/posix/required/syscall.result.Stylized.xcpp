// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import error_t
#import std.is_enum
#import std.is_integral
#import nonstd.convertible_to
#import sys.call.result.Element
#import sys.call.result.Size
namespace sys::posix::required::syscall::result {
  //
  // This is the stylized result of a system call which packages up
  //   goodness     (truth, actionable truth)
  //   error numer  (error_t)
  //   payload      (a single integral value, convertible from a long, the natural return type of the syscall)
  //
  // Usage:
  //
  //   Hack the Spew - see, nearby, the usage in posix::syscall(...)
  //
  namespace [[detail]] stylized {
    using nonstd::convertible_to;
    // ... with long being the natural return type of the syscall(...) [[FIXTHAT]] derive that return value from decltype(...)
    using That_Certain_Native_Syscall_Result_Type = long;
    template<typename RESULT, typename PAYLOAD> concept Result = requires(RESULT result, bool was_good, error_t error_number, PAYLOAD payload) {
      // requires convertible_to<That_Certain_Native_Syscall_Result_Type, PAYLOAD>;
      requires requires(PAYLOAD, That_Certain_Native_Syscall_Result_Type that) {
        // Not quite the same as convertible_to [[WHY]]
        { PAYLOAD(that) };
        // { PAYLOAD{that} };
      };
      requires std::is_integral_v<PAYLOAD> || std::is_enum_v<PAYLOAD>;
      { RESULT{} };
      { RESULT{was_good, error_number, payload} };
      { good(result) } -> convertible_to<bool>;
      { error_num(result) } -> convertible_to<error_t>;
      { value(result) } -> convertible_to<PAYLOAD>;
    };
    template<typename RESULT> concept Stylized = requires(RESULT) {
      typename call::result::Element<0, RESULT>::Type;
      requires 1 == call::result::Size<RESULT>::value;
      requires Result<RESULT, typename call::result::Element<0, RESULT>::Type>;
    };
  }
  using stylized::Stylized;
}
#endiv
#divert <cpp>
#import size_t
#import ssize_t
#import uid_t
#import gid_t
#import pid_t
#import mode_t
#import std.size_t
#import std.ssize_t
#import sys.id.File
#import sys.id.Process
#import sys.wait.Identifier
#import sys.call.result.wait.Value
namespace {
  namespace tests {
    using namespace std;
    using namespace sys;
    using posix::required::syscall::result::Stylized;
    namespace scr = call::result;
    namespace scrw = scr::wait;
    static_assert(Stylized<scr::Value<int>>);
    static_assert(Stylized<scr::Value<ssize_t>>);
    static_assert(Stylized<scr::Value<size_t>>);
    static_assert(Stylized<scr::Value<uid_t>>);
    static_assert(Stylized<scr::Value<gid_t>>);
    static_assert(Stylized<scr::Value<pid_t>>);
    static_assert(Stylized<scr::Value<mode_t>>);
    // What else can a system call return?
    static_assert(Stylized<scr::Value<id::File>>);
    // For example the wait(...) family.
    namespace scrw = sys::call::result::wait;
    using Stalking = scrw::Value<id::Process>;
    using Type = call::result::Element<0, Stalking>::Type;
    static_assert(Stylized<scrw::Value<id::Process>>);
  }
}
#endiv

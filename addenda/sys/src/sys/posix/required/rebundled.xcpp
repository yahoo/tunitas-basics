// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.af // there is yet no sys.af.required
#import sys.at.required
#import sys.dn.required
#import sys.fd.required
#import sys.e // NO SUCH sys.e.required
#import sys.exits.required
#import sys.f.required
#import sys.id.required
#import sys.msg.required
#import sys.ip // NO SUCH sys.ip.proto.required
#import sys.ok.required
#import sys.o.required
#import sys.p // NO SUCH namespace sys.p.required
#import sys.pf // there is no sys.af.required (yet)
#import sys.posix.required
#import sys.s.required
#import sys.sig.required
#import sys.sock.required
#import sys.w.required
namespace sys::posix::required {
  //
  // Usage:
  //
  //   #import sys.posix.required
  //   template<required::fd::Unmanaged FD> struct Thing;
  //
  //   #import sys.posix.required
  //   namespace something::something::dark_side {
  //     namespace required {
  //       using namespace rebundled;
  //     }
  //   }
  //
  inline namespace rebundled { }
  namespace rebundled {
    namespace af { using namespace sys::af::required; }
    namespace at { using namespace sys::at::required; }
    namespace dn { using namespace sys::dn::required; }
    // NO SUCH namespace e { using namespace sys::e::required; }
    namespace exits { using namespace sys::exits::required; }
    namespace f { using namespace sys::f::required; }
    namespace fd { using namespace sys::fd::required; }
    namespace id { using namespace sys::id::required; }
    // NO SUCH namespace ipproto { using namespace sys::ip::proto::required; }
    namespace msg { using namespace sys::msg::required; }
    namespace o { using namespace sys::o::required; }
    namespace ok { using namespace sys::ok::required; }
    // NO SUCH namespace p { using namespace sys::p::required; }
    namespace pf { using namespace sys::pf::required; }
    namespace s { using namespace sys::s::required; }
    namespace sig { using namespace sys::sig::required; }
    namespace sock { using namespace sys::sock::required; }
    namespace w { using namespace sys::w::required; }
  }
}
#endiv

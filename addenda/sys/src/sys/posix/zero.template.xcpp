// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
//
// Granted, this module does not contain a "template"  But that is aligned frequently with the naming convention.
//
#import sys.posix.packaging.zero.implementation
#endiv
#divert <hpp>
#import std.byte
#import std.size_t
namespace sys::posix {
  namespace packaging::zero::implementation {
    namespace interface {
      inline auto zero(std::byte *, std::size_t) -> void;
    }
  }
  // And by virtue of this 'using' declaration, all the other overloads and specializations will appear too
  // The use of 'using namespace' allows this to work; the trickery will not work with 'using' [[FIXTHIS]] use the formal names of the C++ declarations
  // It is important therefore that the only occupants of namespace interface' be the overloads named 'zero(...)'
  //
  // see sys.posix.zero
  //     sys.posix.zero.itimerval   [[buy a vowel!]]
  //     sys.posix.zero.msghdr      [[buy a vowel!]]
  //     ...etc...
  //
  using namespace packaging::zero::implementation::interface;
}
#endiv
#divert <ipp>
namespace sys::posix::packaging::zero::implementation {
  auto interface::zero(std::byte *b, std::size_t s) -> void { uninitialized_zero(b, s); }
}
#endiv

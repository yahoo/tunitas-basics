// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.posix.packaging.dup.interface
namespace sys::posix {
  namespace packaging::dup {
    using namespace packaging::dup::interface;
    namespace function {
      inline auto dup(File oldfd) -> Result<File>;
      inline auto dup(File oldfd, File newfd) -> Result<File>;
      inline auto dup(File oldfd, File newfd, fd::Flags) -> Result<File>;
      inline auto dup(File oldfd, File newfd, o::Flags) -> Result<File>;
   }
    namespace native {
      inline auto dup(int oldfd) -> Result<int>;
      inline auto dup(int oldfd, int newfd) -> Result<int>;
      inline auto dup(int oldfd, int newfd, fd::Flags) -> Result<int>;
      inline auto dup(int oldfd, int newfd, o::Flags) -> Result<int>;
    }
  }
  using packaging::dup::function::dup;
  namespace native { using packaging::dup::native::dup; }
}
#endiv
#divert <ipp>
#import sys.posix.syscall
namespace sys::posix::packaging::dup {
  auto function::dup(File oldfd) -> Result<File>                              { return idiomatic::syscall<File>(Syscall::DUP, (int)oldfd); }
  auto function::dup(File oldfd, File newfd) -> Result<File>                  { return idiomatic::syscall<File>(Syscall::DUP2, (int)oldfd, (int)newfd); }
  auto function::dup(File oldfd, File newfd, fd::Flags flags) -> Result<File> { return idiomatic::syscall<File>(Syscall::DUP3, (int)oldfd, (int)newfd, (int)flags); }
  auto function::dup(File oldfd, File newfd, o::Flags flags) -> Result<File>  { return idiomatic::syscall<File>(Syscall::DUP3, (int)oldfd, (int)newfd, (int)flags); }
  //
  auto native::dup(int oldfd) -> Result<int>                             { return idiomatic::syscall<int>(Syscall::DUP, (int)oldfd); }
  auto native::dup(int oldfd, int newfd) -> Result<int>                  { return idiomatic::syscall<int>(Syscall::DUP2, (int)oldfd, (int)newfd); }
  auto native::dup(int oldfd, int newfd, fd::Flags flags) -> Result<int> { return idiomatic::syscall<int>(Syscall::DUP3, (int)oldfd, (int)newfd, (int)flags); }
  auto native::dup(int oldfd, int newfd, o::Flags flags) -> Result<int>  { return idiomatic::syscall<int>(Syscall::DUP3, (int)oldfd, (int)newfd, (int)flags); }

}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.posix.packaging.select.interface
namespace sys::posix {
  namespace packaging::select {
    using namespace packaging::select::interface;
    using namespace bundle::select;
    namespace required = bundle::required;
    //
    // n.b. because pselect(2) does not trade in file descriptors *directly* there is no 'native' variant subinterface.
    //
    // It is 'int max' because select(2) is defined that way
    // <quote ref="man:select(2)">
    //   max  should be set to the highest-numbered file descriptor in any of the three sets, plus 1.
    //   The indicated file descriptors in each set are checked, up to this limit (but see BUGS).
    // </quote>
    //
    // <quote>
    //   On Linux, select() modifies timeout to reflect the amount of time not slept; most other implementations do not do this.
    //   (POSIX.1 permits either behavior.)
    //   This causes problems both when Linux code which reads timeout is ported to other operating systems,
    //   and when code is ported to Linux that reuses a struct timeval for multiple select()s in a loop without reinitializing it.
    //   Consider timeout to be undefined after select() returns.
    // </quote>
    //
    namespace function {
      // select(2)
      // The timeout, if present, is passed by value so the remaining time cannot possibly be recovered
      inline auto select(Reads, Timeout = Timeout{}) -> Count;
      inline auto select(Writes, Timeout = Timeout{}) -> Count;
      inline auto select(Excepts, Timeout = Timeout{}) -> Count;
      inline auto select(Reads, Writes, Timeout = Timeout{}) -> Count;
      inline auto select(Reads, Excepts, Timeout = Timeout{}) -> Count;
      inline auto select(Reads, Writes, Excepts, Timeout = Timeout{}) -> Count;
      inline auto select(Writes, Excepts, Timeout = Timeout{}) -> Count;
      inline auto select(int max, Reads, Timeout = Timeout{}) -> Count;
      inline auto select(int max, Writes, Timeout = Timeout{}) -> Count;
      inline auto select(int max, Excepts, Timeout = Timeout{}) -> Count;
      inline auto select(int max, Reads, Writes, Timeout = Timeout{}) -> Count;
      inline auto select(int max, Reads, Excepts, Timeout = Timeout{}) -> Count;
      inline auto select(int max, Writes, Excepts, Timeout = Timeout{}) -> Count;
      [[terminal]] inline auto select(int max, Reads, Writes, Excepts, Timeout = Timeout{}) -> Count;
      // select(2) with any time duration
      template<required::Duration DURATION> inline auto select(Reads, Optional<DURATION>) -> Count;
      template<required::Duration DURATION> inline auto select(Writes, Optional<DURATION>) -> Count;
      template<required::Duration DURATION> inline auto select(Excepts, Optional<DURATION>) -> Count;
      template<required::Duration DURATION> inline auto select(Reads, Writes, Optional<DURATION>) -> Count;
      template<required::Duration DURATION> inline auto select(Reads, Excepts, Optional<DURATION>) -> Count;
      template<required::Duration DURATION> inline auto select(Writes, Excepts, Optional<DURATION>) -> Count;
      template<required::Duration DURATION> inline auto select(Reads, Writes, Excepts, Optional<DURATION>) -> Count;
      template<required::Duration DURATION> inline auto select(int max, Reads, Optional<DURATION>) -> Count;
      template<required::Duration DURATION> inline auto select(int max, Writes, Optional<DURATION>) -> Count;
      template<required::Duration DURATION> inline auto select(int max, Excepts, Optional<DURATION>) -> Count;
      template<required::Duration DURATION> inline auto select(int max, Reads, Writes, Optional<DURATION>) -> Count;
      template<required::Duration DURATION> inline auto select(int max, Reads, Excepts, Optional<DURATION>) -> Count;
      template<required::Duration DURATION> inline auto select(int max, Writes, Excepts, Optional<DURATION>) -> Count;
      template<required::Duration DURATION> inline auto select(int max, Reads, Writes, Excepts, Optional<DURATION>) -> Count;
      //
      // How do we know you wanted to call pselect(2) instead of select(2)?
      // Because of the presence of the sigset argument.  Only pselect(2) has a sigset argument.
      //
      // pselect(2) with any time duration
      // the timeout, if present, is passed by value so the remaining time cannot possibly be recovered.
      template<required::Duration DURATION> inline auto select(Reads, Optional<DURATION>, Sigset) -> Count;
      template<required::Duration DURATION> inline auto select(Writes, Optional<DURATION>, Sigset) -> Count;
      template<required::Duration DURATION> inline auto select(Excepts, Optional<DURATION>, Sigset) -> Count;
      template<required::Duration DURATION> inline auto select(Reads, Writes, Optional<DURATION>, Sigset) -> Count;
      template<required::Duration DURATION> inline auto select(Reads, Excepts, Optional<DURATION>, Sigset) -> Count;
      template<required::Duration DURATION> inline auto select(Writes, Excepts, Optional<DURATION>, Sigset) -> Count;
      template<required::Duration DURATION> inline auto select(Reads, Writes, Excepts, Optional<DURATION>, Sigset) -> Count;
      template<required::Duration DURATION> inline auto select(int max, Reads, Optional<DURATION>, Sigset) -> Count;
      template<required::Duration DURATION> inline auto select(int max, Writes, Optional<DURATION>, Sigset) -> Count;
      template<required::Duration DURATION> inline auto select(int max, Excepts, Optional<DURATION>, Sigset) -> Count;
      template<required::Duration DURATION> inline auto select(int max, Reads, Writes, Optional<DURATION>, Sigset) -> Count;
      template<required::Duration DURATION> inline auto select(int max, Reads, Excepts, Optional<DURATION>, Sigset) -> Count;
      template<required::Duration DURATION> inline auto select(int max, Writes, Excepts, Optional<DURATION>, Sigset) -> Count;
      template<required::Duration DURATION> inline auto select(int max, Reads, Writes, Excepts, Optional<DURATION>, Sigset) -> Count;
      // pselect(2) without the optional timeout
      // [[irk]] can't use an optional argument *and* overload resolution because the template doesn't exist until the argument set is known.
      inline auto select(Reads, Sigset) -> Count;
      inline auto select(Writes, Sigset) -> Count;
      inline auto select(Excepts, Sigset) -> Count;
      inline auto select(Reads, Writes, Sigset) -> Count;
      inline auto select(Reads, Excepts, Sigset) -> Count;
      inline auto select(Writes, Excepts, Sigset) -> Count;
      inline auto select(Reads, Writes, Excepts, Sigset) -> Count;
      inline auto select(int max, Reads, Sigset) -> Count;
      inline auto select(int max, Writes, Sigset) -> Count;
      inline auto select(int max, Excepts, Sigset) -> Count;
      inline auto select(int max, Reads, Writes, Sigset) -> Count;
      inline auto select(int max, Reads, Excepts, Sigset) -> Count;
      inline auto select(int max, Writes, Excepts, Sigset) -> Count;
      inline auto select(int max, Reads, Writes, Excepts, Sigset) -> Count;
      // pselect(2) and with the optional timeout
      template<required::Duration DURATION> inline auto select(Reads, Sigset, Optional<DURATION>) -> Count;
      template<required::Duration DURATION> inline auto select(Writes, Sigset, Optional<DURATION>) -> Count;
      template<required::Duration DURATION> inline auto select(Excepts, Sigset, Optional<DURATION>) -> Count;
      template<required::Duration DURATION> inline auto select(Reads, Writes, Sigset, Optional<DURATION>) -> Count;
      template<required::Duration DURATION> inline auto select(Reads, Excepts, Sigset, Optional<DURATION>) -> Count;
      template<required::Duration DURATION> inline auto select(Writes, Excepts, Sigset, Optional<DURATION>) -> Count;
      template<required::Duration DURATION> inline auto select(Reads, Writes, Excepts, Sigset, Optional<DURATION>) -> Count;
      template<required::Duration DURATION> inline auto select(int max, Reads, Sigset, Optional<DURATION>) -> Count;
      template<required::Duration DURATION> inline auto select(int max, Writes, Sigset, Optional<DURATION>) -> Count;
      template<required::Duration DURATION> inline auto select(int max, Excepts, Sigset, Optional<DURATION>) -> Count;
      template<required::Duration DURATION> inline auto select(int max, Reads, Writes, Sigset, Optional<DURATION>) -> Count;
      template<required::Duration DURATION> inline auto select(int max, Reads, Excepts, Sigset, Optional<DURATION>) -> Count;
      template<required::Duration DURATION> inline auto select(int max, Writes, Excepts, Sigset, Optional<DURATION>) -> Count;
      template<required::Duration DURATION> inline auto select(int max, Reads, Writes, Excepts, Sigset, Optional<DURATION>) -> Count;
      [[terminal]] inline auto select(int max, Reads, Writes, Excepts, Sigset, Optional<Timespec>) -> Count;
    }
    namespace detail {
      template<required::Duration DURATION> inline auto as(Optional<DURATION>) -> Optional<DURATION>;
    }
  }
  using packaging::select::function::select;
}
#endiv
#divert <ipp>
#import sys.time.as
namespace sys::posix::packaging::select {
  template<required::duration::Syscall RESULT, required::Duration DURATION> auto detail::as(Optional<DURATION> o) -> Optional<RESULT> { return o ? Optional<RESULT>{time::as<RESULT>(*o)} : Optional<RESULT>{}; }
}
namespace sys::posix::packaging::select {
  // select (2) directly with its native (a time::val, a.k.a. struct timeval)
  auto function::select(Reads reads__, Timeout timeout) -> Count                                     { return select(1+fls(reads__), /*................*/ reads__, Writes{}, Excepts{}, timeout); }
  auto function::select(Writes writes__, Timeout timeout) -> Count                                   { return select(1+fls(writes__), /*...............*/ Reads{}, writes__, Excepts{}, timeout); }
  auto function::select(Excepts excepts__, Timeout timeout) -> Count                                 { return select(1+fls(excepts__), /*..............*/ Reads{}, Writes{}, excepts__, timeout); }
  auto function::select(Reads reads__, Writes writes__, Timeout timeout) -> Count                    { return select(1+fls(reads__, writes__), /*......*/ reads__, writes__, Excepts{}, timeout); }
  auto function::select(Reads reads__, Excepts excepts__, Timeout timeout) -> Count                  { return select(1+fls(reads__, excepts__),  /*....*/ reads__, Writes{}, excepts__, timeout); }
  auto function::select(Writes writes__, Excepts excepts__, Timeout timeout) -> Count                { return select(1+fls(writes__, excepts__), /*....*/ Reads{}, writes__, excepts__, timeout); }
  auto function::select(Reads reads__, Writes writes__, Excepts excepts__, Timeout timeout) -> Count { return select(1+fls(reads__, writes__, excepts__), reads__, writes__, excepts__, timeout); }
  auto function::select(int max, Reads reads__, Timeout timeout) -> Count                           { return select(max, reads__, Writes{}, Excepts{}, timeout); }
  auto function::select(int max, Writes writes__, Timeout timeout) -> Count                         { return select(max, Reads{}, writes__, Excepts{}, timeout); }
  auto function::select(int max, Excepts excepts__, Timeout timeout) -> Count                       { return select(max, Reads{}, Writes{}, excepts__, timeout); }
  auto function::select(int max, Reads reads__, Writes writes__, Timeout timeout) -> Count          { return select(max, reads__, writes__, Excepts{}, timeout); }
  auto function::select(int max, Reads reads__, Excepts excepts__, Timeout timeout) -> Count        { return select(max, reads__, Writes{}, excepts__, timeout); }
  auto function::select(int max, Writes writes__, Excepts excepts__, Timeout timeout) -> Count      { return select(max, Reads{}, writes__, excepts__, timeout); }
  // ...below... select(int max, Reads reads__, Writes writes__, Excepts excepts__, Timeout timeout) -> Count
}
namespace sys::posix::packaging::select {
  // select(2) with a different precision for the timeout
  // These template definitions call the non-template version after converting to Timeval
  template<required::Duration DURATION> auto function::select(Reads reads__, Optional<DURATION> timeout) -> Count                                              { return select(reads__, Writes{}, Excepts{}, detail::as<Timeval>(timeout)); }
  template<required::Duration DURATION> auto function::select(Writes writes__, Optional<DURATION> timeout) -> Count                                            { return select(Reads{}, writes__, Excepts{}, detail::as<Timeval>(timeout)); }
  template<required::Duration DURATION> auto function::select(Excepts excepts__, Optional<DURATION> timeout) -> Count                                          { return select(Reads{}, Writes{}, excepts__, detail::as<Timeval>(timeout)); }
  template<required::Duration DURATION> auto function::select(Reads reads__, Writes writes__, Optional<DURATION> timeout) -> Count                             { return select(reads__, writes__, Excepts{}, detail::as<Timeval>(timeout)); }
  template<required::Duration DURATION> auto function::select(Reads reads__, Excepts excepts__, Optional<DURATION> timeout) -> Count                           { return select(reads__, Writes{}, excepts__, detail::as<Timeval>(timeout)); }
  template<required::Duration DURATION> auto function::select(Writes writes__, Excepts excepts__, Optional<DURATION> timeout) -> Count                         { return select(Reads{}, writes__, excepts__, detail::as<Timeval>(timeout)); }
  template<required::Duration DURATION> auto function::select(Reads reads__, Writes writes__, Excepts excepts__, Optional<DURATION> timeout) -> Count          { return select(reads__, writes__, excepts__, detail::as<Timeval>(timeout)); }
  template<required::Duration DURATION> auto function::select(int max, Reads reads__, Optional<DURATION> timeout) -> Count                                     { return select(max, reads__, Writes{}, Excepts{}, detail::as<Timeval>(timeout)); }
  template<required::Duration DURATION> auto function::select(int max, Writes writes__, Optional<DURATION> timeout) -> Count                                   { return select(max, Reads{}, writes__, Excepts{}, detail::as<Timeval>(timeout)); }
  template<required::Duration DURATION> auto function::select(int max, Excepts excepts__, Optional<DURATION> timeout) -> Count                                 { return select(max, Reads{}, Writes{}, excepts__, detail::as<Timeval>(timeout)); }
  template<required::Duration DURATION> auto function::select(int max, Reads reads__, Writes writes__, Optional<DURATION> timeout) -> Count                    { return select(max, reads__, writes__, Excepts{}, detail::as<Timeval>(timeout)); }
  template<required::Duration DURATION> auto function::select(int max, Reads reads__, Excepts excepts__, Optional<DURATION> timeout) -> Count                  { return select(max, reads__, Writes{}, excepts__, detail::as<Timeval>(timeout)); }
  template<required::Duration DURATION> auto function::select(int max, Writes writes__, Excepts excepts__, Optional<DURATION> timeout) -> Count                { return select(max, Reads{}, writes__, excepts__, detail::as<Timeval>(timeout)); }
  template<required::Duration DURATION> auto function::select(int max, Reads reads__, Writes writes__, Excepts excepts__, Optional<DURATION> timeout) -> Count { return select(max, reads__, writes__, excepts__, detail::as<Timeval>(timeout)); }
}
namespace sys::posix::packaging::select {
  // pselect (2) with argument order duration-then-sigset
  // These template definitions recur after reordering (timeout, sigset) -> (sigset timeout)
  template<required::Duration DURATION> auto function::select(Reads reads__, Optional<DURATION> timeout, Sigset sigset) -> Count                                              { return select(1+fls(reads__), /*................*/ reads__, Writes{}, Excepts{}, timeout, sigset); }
  template<required::Duration DURATION> auto function::select(Writes writes__, Optional<DURATION> timeout, Sigset sigset) -> Count                                            { return select(1+fls(writes__), /*...............*/ Reads{}, writes__, Excepts{}, timeout, sigset); }
  template<required::Duration DURATION> auto function::select(Excepts excepts__, Optional<DURATION> timeout, Sigset sigset) -> Count                                          { return select(1+fls(excepts__), /*..............*/ Reads{}, Writes{}, excepts__, timeout, sigset); }
  template<required::Duration DURATION> auto function::select(Reads reads__, Writes writes__, Optional<DURATION> timeout, Sigset sigset) -> Count                             { return select(1+fls(reads__, writes__), /*......*/ reads__, writes__, Excepts{}, timeout, sigset); }
  template<required::Duration DURATION> auto function::select(Reads reads__, Excepts excepts__, Optional<DURATION> timeout, Sigset sigset) -> Count                           { return select(1+fls(reads__, excepts__),  /*....*/ reads__, Writes{}, excepts__, timeout, sigset); }
  template<required::Duration DURATION> auto function::select(Writes writes__, Excepts excepts__, Optional<DURATION> timeout, Sigset sigset) -> Count                         { return select(1+fls(writes__, excepts__), /*....*/ Reads{}, writes__, excepts__, timeout, sigset); }
  template<required::Duration DURATION> auto function::select(Reads reads__, Writes writes__, Excepts excepts__, Optional<DURATION> timeout, Sigset sigset) -> Count          { return select(1+fls(reads__, writes__, excepts__), reads__, writes__, excepts__, timeout, sigset); }
  template<required::Duration DURATION> auto function::select(int max, Reads reads__, Optional<DURATION> timeout, Sigset sigset) -> Count                                     { return select(max, reads__, Writes{}, Excepts{}, sigset, timeout); }
  template<required::Duration DURATION> auto function::select(int max, Writes writes__, Optional<DURATION> timeout, Sigset sigset) -> Count                                   { return select(max, Reads{}, writes__, Excepts{}, sigset, timeout); }
  template<required::Duration DURATION> auto function::select(int max, Excepts excepts__, Optional<DURATION> timeout, Sigset sigset) -> Count                                 { return select(max, Reads{}, Writes{}, excepts__, sigset, timeout); }
  template<required::Duration DURATION> auto function::select(int max, Reads reads__, Writes writes__, Optional<DURATION> timeout, Sigset sigset) -> Count                    { return select(max, reads__, writes__, Excepts{}, sigset, timeout); }
  template<required::Duration DURATION> auto function::select(int max, Reads reads__, Excepts excepts__, Optional<DURATION> timeout, Sigset sigset) -> Count                  { return select(max, reads__, Writes{}, excepts__, sigset, timeout); }
  template<required::Duration DURATION> auto function::select(int max, Writes writes__, Excepts excepts__, Optional<DURATION> timeout, Sigset sigset) -> Count                { return select(max, Reads{}, writes__, excepts__, sigset, timeout); }
  template<required::Duration DURATION> auto function::select(int max, Reads reads__, Writes writes__, Excepts excepts__, Optional<DURATION> timeout, Sigset sigset) -> Count { return select(max, reads__, writes__, excepts__, sigset, timeout); }
}
namespace sys::posix::packaging::select {
  // pselect (2) with just sigset (default duration-is-null)
  auto function::select(Reads reads__, Sigset sigset) -> Count                                              { return select(1+fls(reads__), /*................*/ reads__, Writes{}, Excepts{}, sigset, Timespec{}); }
  auto function::select(Writes writes__, Sigset sigset) -> Count                                            { return select(1+fls(writes__), /*...............*/ Reads{}, writes__, Excepts{}, sigset, Timespec{}); }
  auto function::select(Excepts excepts__, Sigset sigset) -> Count                                          { return select(1+fls(excepts__), /*..............*/ Reads{}, Writes{}, excepts__, sigset, Timespec{}); }
  auto function::select(Reads reads__, Writes writes__, Sigset sigset) -> Count                             { return select(1+fls(reads__, writes__), /*......*/ reads__, writes__, Excepts{}, sigset, Timespec{}); }
  auto function::select(Reads reads__, Excepts excepts__, Sigset sigset) -> Count                           { return select(1+fls(reads__, excepts__), /*.....*/ reads__, Writes{}, excepts__, sigset, Timespec{}); }
  auto function::select(Writes writes__, Excepts excepts__, Sigset sigset) -> Count                         { return select(1+fls(writes__, excepts__), /*....*/ Reads{}, writes__, excepts__, sigset, Timespec{}); }
  auto function::select(Reads reads__, Writes writes__, Excepts excepts__, Sigset sigset) -> Count          { return select(1+fls(reads__, writes__, excepts__), reads__, writes__, excepts__, sigset, Timespec{}); }
  auto function::select(int max, Reads reads__, Sigset sigset) -> Count                                     { return select(max, reads__, Writes{}, Excepts{}, sigset, Timespec{}); }
  auto function::select(int max, Writes writes__, Sigset sigset) -> Count                                   { return select(max, Reads{}, writes__, Excepts{}, sigset, Timespec{}); }
  auto function::select(int max, Excepts excepts__, Sigset sigset) -> Count                                 { return select(max, Reads{}, Writes{}, excepts__, sigset, Timespec{}); }
  auto function::select(int max, Reads reads__, Writes writes__, Sigset sigset) -> Count                    { return select(max, reads__, writes__, Excepts{}, sigset, Timespec{}); }
  auto function::select(int max, Reads reads__, Excepts excepts__, Sigset sigset) -> Count                  { return select(max, reads__, Writes{}, excepts__, sigset, Timespec{}); }
  auto function::select(int max, Writes writes__, Excepts excepts__, Sigset sigset) -> Count                { return select(max, Reads{}, writes__, excepts__, sigset, Timespec{}); }
  auto function::select(int max, Reads reads__, Writes writes__, Excepts excepts__, Sigset sigset) -> Count { return select(max, reads__, writes__, excepts__, sigset, Timespec{}); }
}
namespace sys::posix::packaging::select {
  // pselect (2) with argument order duration-sigset-then
  // These template definitions recur after converting to the canonial Timespec
  template<required::Duration DURATION> auto function::select(Reads reads__, Sigset sigset, Optional<DURATION> timeout) -> Count                                              { return select(1+fls(reads__), /*................*/ reads__, Writes{}, Excepts{}, sigset, detail::as<Timespec>(timeout)); }
  template<required::Duration DURATION> auto function::select(Writes writes__, Sigset sigset, Optional<DURATION> timeout) -> Count                                            { return select(1+fls(writes__), /*...............*/ Reads{}, writes__, Excepts{}, sigset, detail::as<Timespec>(timeout)); }
  template<required::Duration DURATION> auto function::select(Excepts excepts__, Sigset sigset, Optional<DURATION> timeout) -> Count                                          { return select(1+fls(excepts__), /*..............*/ Reads{}, Writes{}, excepts__, sigset, detail::as<Timespec>(timeout)); }
  template<required::Duration DURATION> auto function::select(Reads reads__, Writes writes__, Sigset sigset, Optional<DURATION> timeout) -> Count                             { return select(1+fls(reads__, writes__), /*......*/ reads__, writes__, Excepts{}, sigset, detail::as<Timespec>(timeout)); }
  template<required::Duration DURATION> auto function::select(Reads reads__, Excepts excepts__, Sigset sigset, Optional<DURATION> timeout) -> Count                           { return select(1+fls(reads__, excepts__), /*.....*/ reads__, Writes{}, excepts__, sigset, detail::as<Timespec>(timeout)); }
  template<required::Duration DURATION> auto function::select(Writes writes__, Excepts excepts__, Sigset sigset, Optional<DURATION> timeout) -> Count                         { return select(1+fls(writes__, excepts__), /*....*/ Reads{}, writes__, excepts__, sigset, detail::as<Timespec>(timeout)); }
  template<required::Duration DURATION> auto function::select(Reads reads__, Writes writes__, Excepts excepts__, Sigset sigset, Optional<DURATION> timeout) -> Count          { return select(1+fls(reads__, writes__, excepts__), reads__, writes__, excepts__, sigset, detail::as<Timespec>(timeout)); }
  template<required::Duration DURATION> auto function::select(int max, Reads reads__, Sigset sigset, Optional<DURATION> timeout) -> Count                                     { return select(max, reads__, Writes{}, Excepts{}, sigset, detail::as<Timespec>(timeout)); }
  template<required::Duration DURATION> auto function::select(int max, Writes writes__, Sigset sigset, Optional<DURATION> timeout) -> Count                                   { return select(max, Reads{}, writes__, Excepts{}, sigset, detail::as<Timespec>(timeout)); }
  template<required::Duration DURATION> auto function::select(int max, Excepts excepts__, Sigset sigset, Optional<DURATION> timeout) -> Count                                 { return select(max, Reads{}, Writes{}, excepts__, sigset, detail::as<Timespec>(timeout)); }
  template<required::Duration DURATION> auto function::select(int max, Reads reads__, Writes writes__, Sigset sigset, Optional<DURATION> timeout) -> Count                    { return select(max, reads__, writes__, Excepts{}, sigset, detail::as<Timespec>(timeout)); }
  template<required::Duration DURATION> auto function::select(int max, Reads reads__, Excepts excepts__, Sigset sigset, Optional<DURATION> timeout) -> Count                  { return select(max, reads__, Writes{}, excepts__, sigset, detail::as<Timespec>(timeout)); }
  template<required::Duration DURATION> auto function::select(int max, Writes writes__, Excepts excepts__, Sigset sigset, Optional<DURATION> timeout) -> Count                { return select(max, Reads{}, writes__, excepts__, sigset, detail::as<Timespec>(timeout)); }
  template<required::Duration DURATION> auto function::select(int max, Reads reads__, Writes writes__, Excepts excepts__, Sigset sigset, Optional<DURATION> timeout) -> Count { return select(max, reads__, writes__, excepts__, sigset, detail::as<Timespec>(timeout)); }
}
#import sys.posix.syscall
#import errno
#import select // backstop with the glibc version ... which (sortof) is documented as layering some policy and limits on top of the call.
namespace sys::posix::packaging::select {
  // WATCHOUT - if 0 == max and there is no timeout, then select waits "forever" on an event that can never present itself.
  // This appears to be a "feature" of select(2)
  //
  // WATCHOUT - select(2) modifies the timeval to return the "time not slept"
  //            pselect(2) does not modify its timeval argument
  //
  // as documented in select(2), if timeout is null then this can block indefinitely.
  auto function::select(int max, Reads reads, Writes writes, Excepts excepts, Timeout timeout) -> Count {
#if 1
    return idiomatic::syscall<int>(Syscall::SELECT, max, repointer(reads), repointer(writes), repointer(excepts), repointer(timeout));
#else
    auto count = ::select(max, repointer(reads), repointer(writes), repointer(excepts), repointer(timeout));
    auto errnum = errno; // capture the value of errno before doing anything else
    auto ok = 0 <= count;
    return {ok, errnum, count};
#endif
  }
}
#import errno
#import pselect // backstop with the glibc version ... which (sortof) is documented as layering some policy and limits on top of the call.
#import sys.posix.syscall
namespace sys::posix::packaging::select {
  auto function::select(int max, Reads reads, Writes writes, Excepts excepts, Sigset sigset, Optional<timespec> timeout) -> Count {
#if 0
    // Syscall::PSELECT -- THERE IS NO SUCH
    //
    // <quote ref=man:pselect(2)>
    //   The final argument of the pselect6() system call is not a sigset_t * pointer, but is instead a structure of the form:
    //   struct {
    //     kernel_sigset_t const *ss;   /* Pointer to signal set */
    //     size_t ss_len;               /* Size (in bytes) of object pointed to by 'ss' */
    //   };
    // </quote>
    //
    struct {
      kernel_sigset_t const *ss;
      size_t ss_len;
    } last6{repointer(sigset), sizeof (sigset_t)};
    return idiomatic::syscall(Syscall::PSELECT6, max, repointer(reads), repointer(writes), repointer(excepts), repointer(timeout), &last6)
#else
      auto count = ::pselect(max, repointer(reads), repointer(writes), repointer(excepts), repointer(timeout), repointer(sigset));
    auto errnum = errno; // capture the value of errno before doing anything else
    auto ok = 0 <= count;
    return {ok, errnum, count};
#endif
  }
}
#endiv
#divert <cpp>
#import tests.usage.posix_select.Usage
static_assert(tests::usage::posix_select::Usage<>);
#endiv

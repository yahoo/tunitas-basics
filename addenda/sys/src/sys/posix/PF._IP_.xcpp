// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
//
// The ip(7) protocol types & constants
//
//  Usage:
//
//   auto sd = ip::socket(AF::IP::INET4, SOCK::STREAM, PF::IP::NONE);
//   auto sd = ip::socket(AF::IP::INET6, SOCK::DATAGRAM, PF::IP::NONE);
//
//   auto sd = ip::socket(AF::IP::INET6, SOCK::RAW, PF::IP::TCP);
//   auto sd = ip::socket(AF::IP::INET4, SOCK::RAW, PF::IP::UDP);
//   auto sd = ip::socket(AF::IP::INET6, SOCK::RAW, ...blahblahblah...);
//
#include <hpp/sys.posix.PF>
#endiv
#divert <hpp>
#import sys.net.Network
#import sys.ip.Version
#import sys.ip.proto.Family
#import sys.posix.IPPROTO
struct sys::posix::PF::_IP_ : public IPPROTO {
  using Version = ip::Version;
  template<Version VERSION> inline static constexpr auto Family = ip::proto::Family<VERSION>;
  inline static constexpr auto UNSPEC = pf::UNSPEC;
  inline static constexpr auto UNSPECIFIED = pf::UNSPECIFIED;
  using IPPROTO::IP; // remind us
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  [[instead("use AF::INET4 or IPPROTO::TCP, IPPROTO::UDP")]] inline static constexpr auto INET4 = pf::INET4;
  [[instead("use AF::INET6 or IPPROTO::TCP, IPPROTO::UDP")]] inline static constexpr auto INET6 = pf::INET6;
  using Protocol = ip::proto::Protocol;
#pragma GCC diagnostic pop
  static_assert((int)Protocol{} == (int)UNSPECIFIED); // ... to belabor the point
  static_assert(Protocol{} == ip::proto::IP); // ........... ibidem.
  _IP_() = delete;
  _IP_(_IP_ const &) = delete;
  auto operator=(_IP_ const &) -> _IP_ & = delete;
};
#endiv
#divert <cpp>
#import sys.posix.PF.IP
#import tests.usage.posix_PF_IP.Usage
static_assert(tests::usage::posix_PF_IP::Usage<>);
#endiv

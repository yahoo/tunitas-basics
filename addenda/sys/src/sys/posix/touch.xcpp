// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.posix.packaging.open.interface
namespace sys::posix {
  namespace packaging::touch {
    using namespace packaging::open::interface;
    namespace function {
      using Result = result::Single<int>;
      inline auto touch(Pathname, Permissions) -> Result;
    }
  }
  using packaging::touch::function::touch;
}
using sys::posix::touch; // avoid ambiguity with the POSIX C API
#endiv
#divert <ipp>
#import sys.posix.creat
#import sys.posix.close
#import std.is_same
#import std.invoke_result
namespace sys::posix::packaging::touch {
  auto function::touch(Pathname pathname, Permissions perms) -> Result {
    {
      using Creat_Result = std::invoke_result_t<decltype(posix::native::creat), decltype(""), decltype(0666)>;
      using Close_Result = std::invoke_result_t<decltype(posix::native::close), decltype(0)>;
      static_assert(std::is_same_v<Creat_Result, Close_Result>);
      static_assert(std::is_same_v<packaging::creat::native::Result, packaging::close::Result>); // .... a happy accident
      static_assert(std::is_same_v<packaging::close::Result, Result>); // .............................. how very convenient
    }
    if (auto created = posix::native::creat(move(pathname), perms); good(created)) {
      return posix::native::close(value(created));
    } else {
      return created;
    }
  }
}
#endiv

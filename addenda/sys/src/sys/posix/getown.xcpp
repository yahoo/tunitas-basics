// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.posix.packaging.owner.interface
namespace sys::posix {
  namespace packaging::getown {
    using namespace packaging::owner::interface;
    using namespace bundle::getowner::basic;
    namespace function {
      template<required::f::Owner PAYLOAD> [[deprecated("buy a vowel, prefer getown(File)")]] inline auto getown(File) -> Returned<PAYLOAD>;
      [[deprecated("buy a vowel, prefer getown(File, Either &)")]] inline auto getown(File, [[out]] Argument &) -> Status;
    }
    namespace native {
      template<required::f::Owner PAYLOAD> [[deprecated("buy a vowel, prefer getown(int fd)")]] inline auto getown(int fd) -> Returned<PAYLOAD>;
      [[deprecated("buy a vowel, prefer getown(int fd, Either &)")]] inline auto getown(int fd, [[out]] Argument &) -> Status;
    }
  }
  using packaging::getown::function::getown;
  namespace native { using packaging::getown::native::getown; }
}
#endiv
#divert <ipp>
#import sys.posix.getowner
namespace sys::posix::packaging::getown {
  template<required::f::Owner PAYLOAD> auto function::getown(File fd) -> Returned<PAYLOAD> { return posix::getowner<PAYLOAD>(fd); }
  auto function::getown(File fd, Argument &arg) -> Status                                  { return posix::getowner(fd, arg); }
  template<required::f::Owner PAYLOAD> auto native::getown(int fd) -> Returned<PAYLOAD>    { return posix::native::getowner<PAYLOAD>(fd); }
  auto native::getown(int fd, Argument &arg) -> Status                                     { return posix::native::getowner(fd, arg); }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.posix.packaging.socket.interface
namespace sys::posix {
  //
  // The socket descriptors are returned in the outcome.
  // Upon success they must be used or closed
  //
  // From socketpair(2) of man-pages-4.16-3.fc29.noarch
  //
  // <quote>On Linux, the only supported domain for this call is AF_UNIX  (or  synonymously,  AF_LOCAL).</quote>
  //
  // Usage:
  //
  //   auto socked = sys::posix::socketpair(AF::UNIX, sock::Flags{}, PF::UNIX);
  //   if (ok(socked)) {
  //     std::cerr << "bad " << error_message(socked) << '\n';
  //   } else {
  //     auto rfd = read_side(socked);
  //     auto wfd = write_side(socked);
  //   }
  //
  namespace packaging::socketpair {
    using namespace packaging::socket::interface;
    namespace function {
      using Result = result::Pair<File>;
      inline auto socketpair(Address, Specification, Protocol = UNSPECIFIED) -> Result;
    }
    namespace native {
      using Result = result::Pair<int>;
      inline auto socketpair(Address, Specification, Protocol = UNSPECIFIED) -> Result;
    }
  }
  using packaging::socketpair::function::socketpair;
  namespace native { using packaging::socketpair::native::socketpair; }
}
#endiv
#divert <ipp>
#import sys.posix.syscall
#import errno
#import std.get
namespace sys::posix::packaging::socketpair {
  auto function::socketpair(Address domain, Specification specification, Protocol protocol) -> Result {
    auto called = native::socketpair(domain, specification, protocol);
    return {good(called), error_num(called), File{get<0>(called)}, File{get<1>(called)}};
  }
  auto native::socketpair(Address domain, Specification specification, Protocol protocol) -> Result   {
    int sockfd[2]{-1,-1};
    auto called = direct::syscall(Syscall::SOCKETPAIR, (int)domain, (int)specification, (int)protocol, sockfd);
    auto errnum = errno; // capture the value of errno before doing anything else
    auto good = 0 <= called;
    return {good, errnum, sockfd[0], sockfd[1]};
  }
}
#endiv

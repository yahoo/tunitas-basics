// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.posix.packaging.mmsg.interface
namespace sys::posix {
  namespace packaging::recvmmsg {
    using namespace packaging::mmsg::interface;
    //
    // the [[out]] parameters are universal.
    // The timeout is not updated upon return; it is passed by value and is, obviously, an [[in]] parameter
    //
    namespace function {
      // single (false multiple)
      inline auto recvmmsg(File, [[out]] Header<mmsghdr> &, Flags = NONE) -> Result;
      inline auto recvmmsg(File, [[out]] Header<mmsghdr> &, Timeout, Flags = NONE) -> Result;
      [[old_school]] inline auto recvmmsg(File, [[out]] Header<mmsghdr> &, Flags, Timeout) -> Result;
      // (true) multiple
      inline auto recvmmsg(File, [[out]] Dope<mmsghdr>, Flags = NONE) -> Result;
      inline auto recvmmsg(File, [[out]] Dope<mmsghdr>, Timeout, Flags = NONE) -> Result;
      [[old_school]] inline auto recvmmsg(File, [[out]] Dope<mmsghdr>, Flags, Timeout) -> Result;
      // ...and again
      template<std::size_t N> inline auto recvmmsg(File, [[out]] Headers<mmsghdr, N> &, Flags = NONE) -> Result;
      template<std::size_t N> inline auto recvmmsg(File, [[out]] Headers<mmsghdr, N> &, Timeout, Flags = NONE) -> Result;
      template<std::size_t N> [[old_school]] inline auto recvmmsg(File, [[out]] Headers<mmsghdr, N> &, Flags, Timeout) -> Result;
      // ...and again
      inline auto recvmmsg(File, [[out]] mmsghdr *, size::Count, Flags = NONE) -> Result;
      inline auto recvmmsg(File, [[out]] mmsghdr *, size::Count, Timeout, Flags = NONE) -> Result;
      [[old_school]] inline auto recvmmsg(File, [[out]] mmsghdr *, size::Count, Flags, Timeout) -> Result;
    }
    namespace native {
      // single (false multiple)
      inline auto recvmmsg(int fd, [[out]] mmsghdr &, Flags = NONE) -> Result;
      inline auto recvmmsg(int fd, [[out]] mmsghdr &, Timeout, Flags = NONE) -> Result;
      inline auto recvmmsg(int fd, [[out]] mmsghdr &, Flags, Timeout) -> Result;
      // (true) multiple
      inline auto recvmmsg(int fd, [[out]] Dope<mmsghdr>, Flags) -> Result;
      inline auto recvmmsg(int fd, [[out]] Dope<mmsghdr>, Flags, time::Duration) -> Result;
      inline auto recvmmsg(int fd, [[out]] Dope<mmsghdr>, Flags, time::Specification) -> Result;
      // ...and again
      inline auto recvmmsg(int fd, [[out]] mmsghdr *, size::Count, Flags = NONE) -> Result;
      inline auto recvmmsg(int fd, [[out]] mmsghdr *, size::Count, Timeout, Flags = NONE) -> Result;
      [[old_school]] inline auto recvmmsg(int fd, [[out]] mmsghdr *, size::Count, Flags, Timeout) -> Result;
    }
  }
  using packaging::recvmmsg::function::recvmmsg;
  namespace native { using packaging::recvmmsg::native::recvmmsg; }
}
#endiv
#divert <ipp>
#import sys.posix.syscall
namespace sys::posix::packaging::recvmmsg {
  auto function::recvmmsg(File fd, Header<mmsghdr> &buf, Flags flags) -> Result { return native::recvmmsg((int) fd, buf, flags); }
  auto native::recvmmsg(int fd, mmsghdr &buf, Flags flags) -> Result { return idiomatic::syscall<size::Signed>(Syscall::RECVMMSG, fd, &buf, (int)flags); }
}
#endiv

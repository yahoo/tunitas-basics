// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys::posix {
  //
  // It's a fake namespace-in-a-struct
  // PREFER namespace sys.msg
  // PREFER sys.msg.Flags
  // ...etc...
  //
  // This is almost-but-not-quite:
  //   ---> using MSG = msg::Flag; <---
  //
  // Usage:
  //
  //   using MSG = sys::posix::MSG;
  //   auto flags = MSG::NONE;
  //   auto flags = MSG::FASTOPEN | MSG::PEEK;
  //   ...etc...
  //
  struct MSG;
}
#endiv
#divert <hpp>
#import sys.msg.Flags
#import sys.msg.constants
#import sys.msg.required.Flags
#import sys.posix.required.rebundled
struct sys::posix::MSG {
  using Flag = msg::Flag;
  using Flags = msg::Flags;
  template<required::msg::Flags RESULT> inline static auto as(Flag) -> RESULT;
  template<required::msg::Flags RESULT> inline static auto as(Flags) -> RESULT;
  //
  // So we can mirror the shape of the #defines from the C preprocessor system
  //
  //   MSG::NONE    is MSG_NONE 
  //   MSG::BATCH   is MSG_BATCH
  //   ...you get the idea...
  //
  inline static constexpr auto NONE = msg::NONE; // <------------ this is why we can't say ---> using MSG = msg::Flag; <---
  inline static constexpr auto BATCH = msg::BATCH;
  inline static constexpr auto CMSG_CLOEXEC = msg::CMSG_CLOEXEC;
  inline static constexpr auto CONFIRM = msg::CONFIRM;
  inline static constexpr auto CTRUNCATE = msg::CTRUNCATE;
  inline static constexpr auto DONTROUTE = msg::DONTROUTE;
  inline static constexpr auto DONTWAIT = msg::DONTWAIT;
  inline static constexpr auto EOR = msg::EOR;
  inline static constexpr auto ERRQUEUE = msg::ERRQUEUE;
  inline static constexpr auto FASTOPEN = msg::FASTOPEN;
  inline static constexpr auto FIN = msg::FIN;
  inline static constexpr auto MORE = msg::MORE;
  inline static constexpr auto NOSIGNAL = msg::NOSIGNAL;
  inline static constexpr auto OOB = msg::OOB;
  inline static constexpr auto PEEK = msg::PEEK;
  inline static constexpr auto PROXY = msg::PROXY;
  inline static constexpr auto RST = msg::RST;
  inline static constexpr auto SYN = msg::SYN;
  inline static constexpr auto TRUNCATE = msg::TRUNCATE;
#ifdef __USE_GNU
  inline static constexpr auto TRYHARD = msg::TRYHARD; // ibidem.
#endif
  inline static constexpr auto WAITALL = msg::WAITALL;
  inline static constexpr auto WAITFORONE = msg::WAITFORONE;
  inline static constexpr auto ZEROCOPY = msg::ZEROCOPY;
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  inline static constexpr auto CTRUNC = msg::CTRUNC;
  inline static constexpr auto TRUNC = msg::TRUNC;
#pragma GCC diagnostic pop
  MSG() = delete;
  MSG(MSG const &) = delete;
  auto operator=(MSG const &) -> MSG & = delete;
};
#endiv
#divert <ipp>
#import sys.msg.as
namespace sys::posix {
  template<required::msg::Flags RESULT> auto MSG::as(Flag x) -> RESULT  { return msg::as<RESULT>(x); }
  template<required::msg::Flags RESULT> auto MSG::as(Flags s) -> RESULT { return msg::as<RESULT>(s); }
}
#divert <cpp>
#import tests.usage.posix_MSG.Usage
static_assert(tests::usage::posix_MSG::Usage<>);
#endiv

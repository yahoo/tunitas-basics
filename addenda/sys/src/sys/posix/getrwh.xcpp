// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.posix.packaging.rwh.interface
namespace sys::posix {
  namespace packaging::getrwh {
    using namespace packaging::rwh::interface;
    namespace function {
      inline auto getrwh(File, [[out]] Hint &) -> Status;
      inline auto getrwh(File, Process, [[out]] Hint &) -> Status;
      inline auto getrwh(File, Filetable, [[out]] Hint &) -> Status;
      inline auto getrwh(File, Which, [[out]] Hint &) -> Status;
    } 
    namespace native {
      inline auto getrwh(int fd, [[out]] Hint &) -> Status;
      inline auto getrwh(int fd, Process, [[out]] Hint &) -> Status;
      inline auto getrwh(int fd, Filetable, [[out]] Hint &) -> Status;
      inline auto getrwh(int fd, Which, [[out]] Hint &) -> Status;
    } 
    namespace detail {
      // indeed, anything but Which::FILE defaults to the original "Process-Associated" hint.
      inline constexpr auto witcher(Which which) -> Function;
    }
  }
  using packaging::getrwh::function::getrwh;
  namespace native { using packaging::getrwh::native::getrwh; }
}
#endiv
#divert <ipp>
namespace sys::posix::packaging::getrwh {
  constexpr auto detail::witcher(Which which) -> Function { return Which::FILE == which ? F::GET_RWH_FILE : F::GET_RWH_PROCESS; }
  // function
  auto function::getrwh(File fd, Hint &arg) -> Status                  { return native::getrwh((int)fd, arg); }
  auto function::getrwh(File fd, Process which, Hint &arg) -> Status   { return native::getrwh((int)fd, arg); }
  auto function::getrwh(File fd, Filetable which, Hint &arg) -> Status { return native::getrwh((int)fd, arg); }
  auto function::getrwh(File fd, Which which, Hint &arg) -> Status     { return native::getrwh((int)fd, arg); }
  // native
  auto native::getrwh(int fd, Hint &arg) -> Status                  { return native::getrwh((int)fd, arg); }
  auto native::getrwh(int fd, Process which, Hint &arg) -> Status   { return native::getrwh((int)fd, arg); }
  auto native::getrwh(int fd, Filetable which, Hint &arg) -> Status { return native::getrwh((int)fd, arg); }
  auto native::getrwh(int fd, Which which, Hint &arg) -> Status {
    auto called = posix::native::fcntl(fd, detail::witcher(which));
    auto const ok = good(called); 
    if (ok) {
      arg = Hint(value(called));
    }
    auto val = ok ? 0 : -1;
    return {ok, error_num(called), val};
  }
}
#endiv
#divert <cpp>
#import nonstd.convertible_to
#import sys.fd.required.Unmanaged
#import sys.id.File
namespace {
  namespace tests {
    namespace usage {
      using namespace sys::posix;
      using namespace native;
      using nonstd::convertible_to;
      using Argument = packaging::rwh::interface::Hint;
      template<typename UNMANAGED> concept Signature2 = requires(UNMANAGED fd, Argument &returned) {
        requires sys::fd::required::Unmanaged<UNMANAGED>;
        { good(getrwh(fd, returned)) } -> convertible_to<convertible_to<bool>>;
        { value(getrwh(fd, returned)) } -> convertible_to<convertible_to<int>>;
        { getrwh(fd, returned) };
      };
      template<typename UNMANAGED> concept Signature3Process = requires(UNMANAGED fd, Argument &returned) {
        requires sys::fd::required::Unmanaged<UNMANAGED>;
        { good(getrwh(fd, F::PROCESS, returned)) } -> convertible_to<convertible_to<bool>>;
        { value(getrwh(fd, F::PROCESS, returned)) } -> convertible_to<convertible_to<int>>;
        { getrwh(fd, F::PROCESS, returned) };
      };
      template<typename UNMANAGED> concept Signature3File = requires(UNMANAGED fd, Argument &returned) {
        requires sys::fd::required::Unmanaged<UNMANAGED>;
        { good(getrwh(fd, F::FILE, returned)) } -> convertible_to<convertible_to<bool>>;
        { value(getrwh(fd, F::FILE, returned)) } -> convertible_to<convertible_to<int>>;
        { getrwh(fd, F::FILE, returned) };
      };
      template<typename UNMANAGED> concept Signature3Which = requires(UNMANAGED fd, F::Which which, Argument &returned) {
        requires sys::fd::required::Unmanaged<UNMANAGED>;
        { good(getrwh(fd, which, returned)) } -> convertible_to<convertible_to<bool>>;
        { value(getrwh(fd, which, returned)) } -> convertible_to<convertible_to<int>>;
        { getrwh(fd, which, returned) };
      };
      template<typename UNMANAGED> concept Usage = requires(UNMANAGED) {
        requires sys::fd::required::Unmanaged<UNMANAGED>;
        requires Signature2<UNMANAGED>;
        requires Signature3Process<UNMANAGED>;
        requires Signature3File<UNMANAGED>;
        requires Signature3Which<UNMANAGED>;
      };
    }
    using usage::Usage;
    static_assert(Usage<int>);
    static_assert(Usage<sys::id::File>);
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys::posix {
  //
  // It's a fake namespace-in-a-struct
  // PREFER namespace sys.dn
  // PREFER sys.dn.Notifies
  // ...etc...
  //
  // This is almost-but-not-quite:
  //   ---> using DN = dn::Notify; <---
  //
  // Usage:
  //
  //   using DN = sys::posix::DN;
  //   auto flags = DN::NONE;
  //   auto flags = DN::ACCESS | MSG::MODIFY;
  //   ...etc...
  //
  struct DN;
}
#endiv
#divert <hpp>
#import sys.dn.Notifies
#import sys.dn.constants
#import sys.dn.required.Notifies
#import sys.posix.required.rebundled
struct sys::posix::DN {
  using Notify = dn::Notify;
  using Notifies = dn::Notifies;
  template<required::dn::Notifies RESULT> inline static auto as(Notify) -> RESULT;
  template<required::dn::Notifies RESULT> inline static auto as(Notifies) -> RESULT;
  inline static constexpr auto NONE = dn::NONE;
  inline static constexpr auto ACCESS = dn::ACCESS;
  inline static constexpr auto MODIFY = dn::MODIFY;
  inline static constexpr auto CREATE = dn::CREATE;
  inline static constexpr auto DELETE = dn::DELETE;
  inline static constexpr auto RENAME = dn::RENAME;
  inline static constexpr auto ATTRIBUTE = dn::ATTRIBUTE;
  inline static constexpr auto MULTISHOT = dn::MULTISHOT;
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  inline static constexpr auto ATTRIB [[deprecated("buy a vowel.  instead prefer ATTRIBUTE")]] = ATTRIBUTE;
#pragma GCC diagnostic pop
  DN() = delete;
  DN(DN const &) = delete;
  auto operator=(DN const &) -> DN & = delete;
};
#endiv
#divert <ipp>
#import sys.dn.as
namespace sys::posix {
  template<required::dn::Notifies RESULT> auto DN::as(Notify x) -> RESULT  { return dn::as<RESULT>(x); }
  template<required::dn::Notifies RESULT> auto DN::as(Notifies s) -> RESULT { return dn::as<RESULT>(s); }
}
#divert <cpp>
#import tests.model.Namespace_Object
#import tests.model.Namespace_Object_Flags
namespace tests {
  using namespace sys;
  using DN = posix::DN;
  namespace {
    static_assert(model::Namespace_Object<DN>);
    static_assert(model::Namespace_Object_Flags<DN, DN::Notify, DN::Notifies>);
    static_assert(sizeof (DN::NONE));
    static_assert(sizeof (DN::ACCESS));
    static_assert(sizeof (DN::CREATE));
    static_assert(sizeof (DN::DELETE));
    static_assert(sizeof (DN::RENAME));
    static_assert(sizeof (DN::ATTRIBUTE));
    static_assert(sizeof (DN::MULTISHOT));
    //
    static_assert(dn::NONE == DN::NONE);
    static_assert(dn::ACCESS == DN::ACCESS);
    static_assert(dn::CREATE == DN::CREATE);
    static_assert(dn::DELETE == DN::DELETE);
    static_assert(dn::RENAME == DN::RENAME);
    static_assert(dn::ATTRIBUTE == DN::ATTRIBUTE);
    static_assert(dn::MULTISHOT == DN::MULTISHOT);
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    static_assert(dn::ATTRIB == DN::ATTRIB);
#pragma GCC diagnostic pop
  }
}
#endiv

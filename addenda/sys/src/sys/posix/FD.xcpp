// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys::posix {
  //
  // It's a fake namespace-in-a-struct.
  // Prefer namespace sys::fd.
  //
  // Usage:
  //
  //   using FD = sys::posix::FD;
  //   auto clo = FD::CLOEXEC;
  //
  struct FD;
}
#endiv
#divert <hpp>
#import sys.fd.Flag
#import sys.fd.Flags
#import sys.fd.constants
#import sys.fd.required.Flags
#import sys.posix.required.rebundled
#import sys.fd.required.Flags
struct sys::posix::FD {
  using Flag = fd::Flag;
  using Flags = fd::Flags;
  template<required::fd::Flags RESULT> inline static auto as(Flag) -> RESULT;
  template<required::fd::Flags RESULT> inline static auto as(Flags) -> RESULT;
  inline static constexpr auto NONE = fd::NONE;
  inline static constexpr auto CLOEXEC = fd::CLOEXEC;
private:
  FD(FD const &) = delete;
  auto operator=(FD const &) -> FD & = delete;
};
#endiv
#divert <ipp>
#import sys.fd.as
namespace sys::posix {
  template<required::fd::Flags RESULT> auto FD::as(Flag f) -> RESULT { return fd::as<RESULT>(f); }
  template<required::fd::Flags RESULT> auto FD::as(Flags s) -> RESULT { return fd::as<RESULT>(s); }
}
#endiv
#divert <cpp>
#import tests.usage.posix_FD.Usage
static_assert(tests::usage::posix_FD::Usage<>);
#endiv

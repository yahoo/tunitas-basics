// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.posix.packaging.sock.interface
namespace sys::posix {
  namespace packaging::connect {
    using namespace packaging::sock::interface;
    using Result = result::status::Status;
    namespace function {
      inline auto connect(File, [[in]] Sockaddr const &, Socklen) -> Result;
      template<required::Sockaddr SOCKADDR> inline auto connect(File fd, [[in]] SOCKADDR const &) -> Result;
    }
    namespace native {
      inline auto connect(int fd, [[in]] Sockaddr const &, Socklen) -> Result;
      template<required::Sockaddr SOCKADDR> inline auto connect(int fd, [[in]] SOCKADDR const &) -> Result;
    }
  }
  using packaging::connect::function::connect;
  namespace native { using packaging::connect::native::connect; }
}
#endiv
#divert <ipp>
#import sys.posix.syscall
namespace sys::posix::packaging::connect {
  auto function::connect(File fd, Sockaddr const &addr, Socklen addrlen) -> Result                    { return native::connect((int)fd, addr, addrlen); }
  template<required::Sockaddr SOCKADDR> auto native::connect(File fd, SOCKADDR const &addr) -> Result { return native::connect<SOCKADDR>((int)fd, addr); }
  auto native::connect(int fd, Sockaddr const &addr, Socklen addrlen) -> Result                       { return idiomatic::syscall<int>(Syscall::CONNECT, fd, &addr, addrlen); }
  template<required::Sockaddr SOCKADDR> auto native::connect(int fd, SOCKADDR const &addr) -> Result  { return connect(fd, addr, sizeof (addr)); }
}
#endiv

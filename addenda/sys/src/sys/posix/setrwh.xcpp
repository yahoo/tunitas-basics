// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.posix.packaging.rwh.interface
namespace sys::posix {
  namespace packaging::setrwh {
    using namespace packaging::rwh::interface;
    namespace function {
      inline auto setrwh(File, Hint) -> Status;
      inline auto setrwh(File, Process, [[in]] Hint) -> Status;
      inline auto setrwh(File, Filetable, [[in]] Hint) -> Status;
      inline auto setrwh(File, Which, [[in]] Hint) -> Status;
    }
    namespace native {
      inline auto setrwh(int fd, [[in]] Hint) -> Status;
      inline auto setrwh(int fd, Process, [[in]] Hint) -> Status;
      inline auto setrwh(int fd, Filetable, [[in]] Hint) -> Status;
      inline auto setrwh(int fd, Which, [[in]] Hint) -> Status;
    }
    namespace detail {
    // indeed, anything but Which::FILE defaults to the original "Process-Associated" hint.
      inline constexpr auto witcher(Which which) -> Function;
    }
  }
  using packaging::setrwh::function::setrwh;
  namespace native { using packaging::setrwh::native::setrwh; }
}
#endiv
#divert <ipp>
namespace sys::posix::packaging::setrwh {
  constexpr auto detail::witcher(Which which) -> Function { return Which::FILE == which ? F::SET_RWH_FILE : F::SET_RWH_PROCESS; }
  // function
  auto function::setrwh(File fd, Hint hint) -> Status                  { return native::setrwh((int)fd, F::PROCESS, hint); }
  auto function::setrwh(File fd, Process which, Hint hint) -> Status   { return native::setrwh((int)fd, which, hint); }
  auto function::setrwh(File fd, Filetable which, Hint hint) -> Status { return native::setrwh((int)fd, which, hint); }
  auto function::setrwh(File fd, Which which, Hint hint) -> Status     { return native::setrwh((int)fd, which, hint); }
  // native
  auto native::setrwh(int fd, Hint hint) -> Status              { return setrwh(fd, F::PROCESS, hint); }
  auto native::setrwh(int fd, Process, Hint hint) -> Status     { return setrwh(fd, Which::PROCESS, hint); }
  auto native::setrwh(int fd, Filetable, Hint hint) -> Status   { return setrwh(fd, Which::FILE, hint); }
  auto native::setrwh(int fd, Which which, Hint hint) -> Status { return posix::native::fcntl(fd, detail::witcher(which), hint); }
}
#endiv
#divert <cpp>
#import nonstd.convertible_to
#import sys.fd.required.Unmanaged
#import sys.id.File
namespace {
  namespace tests {
    namespace usage {
      using namespace sys::posix;
      using namespace native;
      using nonstd::convertible_to;
      using Argument = packaging::rwh::interface::Hint;
      template<typename UNMANAGED> concept Signature2Installed = requires(UNMANAGED fd, Argument installed) {
    requires sys::fd::required::Unmanaged<UNMANAGED>;
    { good(setrwh(fd, installed)) } -> convertible_to<convertible_to<bool>>;
    { value(setrwh(fd, installed)) } -> convertible_to<convertible_to<int>>;
        { setrwh(fd, installed) };
      };
      template<typename UNMANAGED> concept Signature3ProcessInstalled = requires(UNMANAGED fd, Argument installed) {
    requires sys::fd::required::Unmanaged<UNMANAGED>;
    { good(setrwh(fd, F::PROCESS, installed)) } -> convertible_to<convertible_to<bool>>;
    { value(setrwh(fd, F::PROCESS, installed)) } -> convertible_to<convertible_to<int>>;
        { setrwh(fd, F::PROCESS, installed) };
      };
      template<typename UNMANAGED> concept Signature3FileInstalled = requires(UNMANAGED fd, Argument installed) {
    requires sys::fd::required::Unmanaged<UNMANAGED>;
    { good(setrwh(fd, F::FILE, installed)) } -> convertible_to<convertible_to<bool>>;
    { value(setrwh(fd, F::FILE, installed)) } -> convertible_to<convertible_to<int>>;
        { setrwh(fd, F::FILE, installed) };
      };
      template<typename UNMANAGED> concept Signature3WhichInstalled = requires(UNMANAGED fd, F::Which which, Argument installed) {
    requires sys::fd::required::Unmanaged<UNMANAGED>;
    { good(setrwh(fd, which, installed)) } -> convertible_to<convertible_to<bool>>;
    { value(setrwh(fd, which, installed)) } -> convertible_to<convertible_to<int>>;
        { setrwh(fd, which, installed) };
      };
      template<typename UNMANAGED> concept Usage = requires(UNMANAGED) {
    requires sys::fd::required::Unmanaged<UNMANAGED>;
        requires Signature2Installed<UNMANAGED>;
        requires Signature3ProcessInstalled<UNMANAGED>;
        requires Signature3FileInstalled<UNMANAGED>;
        requires Signature3WhichInstalled<UNMANAGED>;
      };
    }
    using usage::Usage;
    static_assert(Usage<int>);
    static_assert(Usage<sys::id::File>);
  }
}
#endiv

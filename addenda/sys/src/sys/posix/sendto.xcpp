// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.posix.packaging.msg.interface
namespace sys::posix {
  namespace packaging::sendto {
    using namespace packaging::msg::interface;
    //
    // The [[in]] attributes don't add much value here because they are all [[in]]
    //
    namespace avoid {
      // New School - Flags are optional and at the end.
      /*not a template at all*/             inline auto sendto(int fd, [[in]] void const *, [[in]] size_t, [[in]] sockaddr const *, [[in]] socklen_t, [[in]] Flags = NONE) -> Result;
      template<required::Sockaddr SOCKADDR> inline auto sendto(int fd, [[in]] void const *, [[in]] size_t, [[in]] SOCKADDR const &, [[in]] Flags = NONE) -> Result;
      // old_school - Flags are in the middle and never optional.
      /*not a template at all*/             inline auto sendto(int fd, [[in]] void const *, [[in]] size_t, [[in]] Flags, [[in]] sockaddr const *, [[in]] socklen_t) -> Result;
      template<required::Sockaddr SOCKADDR> inline auto sendto(int fd, [[in]] void const *, [[in]] size_t, [[in]] Flags, [[in]] SOCKADDR const &) -> Result;
    }
    namespace function {
      // New School - ibidem.
      template<required::Sockaddr SOCKADDR, required::Octet OCTET>           inline auto sendto(File, [[in]] Dope<OCTET const>, [[in]] SOCKADDR const &, [[in]] Flags = NONE) -> Result;
      template<required::Sockaddr SOCKADDR, typename TYPE>                   inline auto sendto(File, [[in]] TYPE const &, [[in]] SOCKADDR const &, [[in]] Flags = NONE) -> Result requires !required::Dopelike<TYPE>;
      template<required::Sockaddr SOCKADDR, typename TYPE, size::Unsigned N> inline auto sendto(File, [[in]] TYPE const (&)[N], [[in]] SOCKADDR const &, [[in]] Flags = NONE) -> Result requires ! required::Dopelike<TYPE>;
      // old_school - ibidem.
      template<required::Sockaddr SOCKADDR, required::Octet OCTET>           inline auto sendto(File, [[in]] Dope<OCTET const>, [[in]] Flags, SOCKADDR const &) -> Result;
      template<required::Sockaddr SOCKADDR, typename TYPE>                   inline auto sendto(File, [[in]] TYPE const &, [[in]] Flags, SOCKADDR const &) -> Result requires ! required::Dopelike<TYPE>;
      template<required::Sockaddr SOCKADDR, typename TYPE, size::Unsigned N> inline auto sendto(File, [[in]] TYPE const (&)[N], [[in]] Flags, SOCKADDR const &) -> Result requires ! required::Dopelike<TYPE>;
    }
    namespace native {
      // New School - ibidem.
      template<required::Sockaddr SOCKADDR, required::Octet OCTET>           inline auto sendto(int fd, [[in]] Dope<OCTET const>, [[in]] SOCKADDR const &, [[in]] Flags = NONE) -> Result;
      template<required::Sockaddr SOCKADDR, typename TYPE>                   inline auto sendto(int fd, [[in]] TYPE const &, [[in]] SOCKADDR const &, [[in]] Flags = NONE) -> Result requires !required::Dopelike<TYPE>;
      template<required::Sockaddr SOCKADDR, typename TYPE, size::Unsigned N> inline auto sendto(int fd, [[in]] TYPE const (&)[N], [[in]] SOCKADDR const &, [[in]] Flags = NONE) -> Result requires ! required::Dopelike<TYPE>;
      // old_school - ibidem.
      template<required::Sockaddr SOCKADDR, required::Octet OCTET>           inline auto sendto(int fd, [[in]] Dope<OCTET const>, [[in]] Flags, SOCKADDR const &) -> Result;
      template<required::Sockaddr SOCKADDR, typename TYPE>                   inline auto sendto(int fd, [[in]] TYPE const &, [[in]] Flags, SOCKADDR const &) -> Result requires ! required::Dopelike<TYPE>;
      template<required::Sockaddr SOCKADDR, typename TYPE, size::Unsigned N> inline auto sendto(int fd, [[in]] TYPE const (&)[N], [[in]] Flags, SOCKADDR const &) -> Result requires ! required::Dopelike<TYPE>;
    }
  }
  using packaging::sendto::function::sendto;
  namespace native { using packaging::sendto::native::sendto; }
  namespace avoid { using packaging::sendto::avoid::sendto; }
}
#endiv
#divert <ipp>
#import sys.posix.syscall
namespace sys::posix::packaging::sendto {
  auto avoid::sendto(int fd, void const *buf, size_t len, sockaddr const *sa, socklen_t sl, Flags fl) -> Result { return idiomatic::syscall<size::Signed>(Syscall::SENDTO, fd, buf, len, (int)fl, sa, sl); }
  auto avoid::sendto(int fd, void const *buf, size_t len, Flags fl, sockaddr const *sa, socklen_t sl) -> Result { return idiomatic::syscall<size::Signed>(Syscall::SENDTO, fd, buf, len, (int)fl, sa, sl); }
  template<posix::required::Sockaddr SOCKADDR> auto avoid::sendto(int fd, void const *buf, size_t len, SOCKADDR const &sa, Flags fl) -> Result { return sendto(fd, buf, len, fl, sa); }
  template<posix::required::Sockaddr SOCKADDR> auto avoid::sendto(int fd, void const *buf, size_t len, Flags fl, SOCKADDR const &sa) -> Result { return idiomatic::syscall<size::Signed>(Syscall::SENDTO, fd, buf, len, (int)fl, &sa, sizeof (sa)); }
}
namespace sys::posix::packaging::sendto {
  // New School
  template<required::Sockaddr SOCKADDR, required::Octet OCTET>            auto function::sendto(File fd, Dope<OCTET const> buf, SOCKADDR const &sa, Flags fl) -> Result                                   { return native::sendto((int)fd, buf, fl, sa); }
  template<required::Sockaddr SOCKADDR, typename TYPE>                    auto function::sendto(File fd, TYPE const &buf, SOCKADDR const &sa, Flags fl) -> Result requires !required::Dopelike<TYPE>      { return native::sendto((int)fd, buf, fl, sa); }
  template<required::Sockaddr SOCKADDR, typename TYPE, size::Unsigned N>  auto function::sendto(File fd, TYPE const (&buf)[N], SOCKADDR const &sa, Flags fl) -> Result requires !required::Dopelike<TYPE> { return native::sendto((int)fd, buf, fl, sa); }
  // old_school
  template<required::Sockaddr SOCKADDR, required::Octet OCTET>            auto function::sendto(File fd, Dope<OCTET const> buf, Flags fl, SOCKADDR const &sa) -> Result                                   { return native::sendto((int)fd, buf, fl, sa); }
  template<required::Sockaddr SOCKADDR, typename TYPE>                    auto function::sendto(File fd, TYPE const &buf, Flags fl, SOCKADDR const &sa) -> Result requires !required::Dopelike<TYPE>      { return native::sendto((int)fd, buf, fl, sa); }
  template<required::Sockaddr SOCKADDR, typename TYPE, size::Unsigned N>  auto function::sendto(File fd, TYPE const (&buf)[N], Flags fl, SOCKADDR const &sa) -> Result requires !required::Dopelike<TYPE> { return native::sendto((int)fd, buf, fl, sa); }
}
namespace sys::posix::packaging::sendto {
  // New School
  template<required::Sockaddr SOCKADDR, required::Octet OCTET>            auto native::sendto(int fd, Dope<OCTET const> buf, SOCKADDR const &sa, Flags fl) -> Result                                   { return avoid::sendto(fd, buf.data(), buf.size(), fl, sa); }
  template<required::Sockaddr SOCKADDR, typename TYPE>                    auto native::sendto(int fd, TYPE const &buf, SOCKADDR const &sa, Flags fl) -> Result requires !required::Dopelike<TYPE>      { return avoid::sendto(fd, &buf, sizeof (buf), fl, sa); }
  template<required::Sockaddr SOCKADDR, typename TYPE, size::Unsigned N>  auto native::sendto(int fd, TYPE const (&buf)[N], SOCKADDR const &sa, Flags fl) -> Result requires !required::Dopelike<TYPE> { return avoid::sendto(fd, &buf[0], sizeof (buf), fl, sa); }
  // old_school
  template<required::Sockaddr SOCKADDR, required::Octet OCTET>            auto native::sendto(int fd, Dope<OCTET const> buf, Flags fl, SOCKADDR const &sa) -> Result                                   { return avoid::sendto(fd, buf.data(), buf.size(), fl, sa); }
  template<required::Sockaddr SOCKADDR, typename TYPE>                    auto native::sendto(int fd, TYPE const &buf, Flags fl, SOCKADDR const &sa) -> Result requires !required::Dopelike<TYPE>      { return avoid::sendto(fd, &buf, sizeof (buf), fl, sa); }
  template<required::Sockaddr SOCKADDR, typename TYPE, size::Unsigned N>  auto native::sendto(int fd, TYPE const (&buf)[N], Flags fl, SOCKADDR const &sa) -> Result requires !required::Dopelike<TYPE> { return avoid::sendto(fd, &buf[0], sizeof (buf), fl, sa); }
}
#endiv

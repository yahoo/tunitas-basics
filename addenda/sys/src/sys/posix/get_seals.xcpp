// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.posix.packaging.seals.interface
namespace sys::posix {
  namespace packaging::get_seals {
    using namespace packaging::seals::interface;
    using namespace bundle::get_seals;
    namespace function {
      inline auto get_seals(File) -> Returned;
      inline auto get_seals(File, [[out]] Argument &) -> Status;
    } 
    namespace native {
      inline auto get_seals(int fd) -> Returned;
      inline auto get_seals(int fd, [[out]] Argument &) -> Status;
    } 
  }
  using packaging::get_seals::function::get_seals;
  namespace native { using packaging::get_seals::native::get_seals; }
}
#endiv
#divert <ipp>
namespace sys::posix::packaging::get_seals {
  auto function::get_seals(File fd) -> Returned              { return native::get_seals((int)fd); }
  auto function::get_seals(File fd, Argument &arg) -> Status { return native::get_seals((int)fd, arg); }
  //
  auto native::get_seals(int fd) -> Returned {
    auto called = posix::native::fcntl(fd, F::GET_SEALS);
    return {good(called), error_num(called), Payload{value(called)}};
  }
  auto native::get_seals(int fd, Argument &arg) -> Status {
    auto called = posix::native::fcntl(fd, F::GET_SEALS);
    auto const ok = good(called); 
    if (ok) {
      arg = Payload{value(called)};
    }
    auto val = ok ? 0 : -1;
    return {ok, error_num(called), val};
  }
}
#endiv

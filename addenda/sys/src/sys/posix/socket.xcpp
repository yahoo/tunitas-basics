// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.posix.packaging.socket.interface
namespace sys::posix {
  //
  // What an amazing mess of historical compatibility, untyped future-proof fungibility and abandoned concepts!
  // Contains overloads for socket and socket4 type function signatures
  //
  // See also
  //   posix::ip::socket(...) for overloads against IPPROTO
  //
  // The POSIX C interface
  //   is largely untyped with 'int' fields variously interpreted.
  //   tried to keep ABI compatibility with a 3-arg variant by cramming more info into the 2nd argument.
  //   SHOULD have evolved to a 4-arg variant following accept(2) and accept4(2)
  //
  // Usage:
  //
  //   auto sd = socket(AF::INET4, SOCK::DATAGRAM);
  //   auto sd = socket(AF::INET6, SOCK::STREAM, PF::INET4);
  //   auto sd = socket(AF::INET4, SOCK::DATAGRAM, PF::INET4, SOCK::NONBLOCK | SOCK::CLOEXEC);
  //   auto sd = socket(AF::INET6, SOCK::STREAM, SOCK::NONBLOCK | SOCK::CLOEXEC);
  //   auto sd = socket(AF::INET4, SOCK::STREAM, SOCK::NONBLOCK | SOCK::CLOEXEC, PF::UNSPECIFIED);
  //   
  //   auto sd = socket(AF::LOCAL, SOCK::STREAM)
  //   auto sd = socket(AF::LOCAL, SOCK::DATAGRAM, PF::LOCAL)
  //   auto sd = socket(AF::LOCAL, SOCK::STREAM, PF::UNSPECIFIED, SOCK::NONBLOCK | SOCK::CLOEXEC)
  //   auto sd = socket(AF::LOCAL, SOCK::DATAGRAM, SOCK::NONBLOCK | SOCK::CLOEXEC)
  //   auto sd = socket(AF::LOCAL, SOCK::DATAGRAM, SOCK::NONBLOCK | SOCK::CLOEXEC, PF::UNSPECIFIED)
  //
  namespace packaging::socket {
    using namespace packaging::socket::interface;
    namespace function {
      using Result = result::Single<File>;
      inline auto socket(Address, Specification) -> Result; // ..... a.k.a. socket(2)
      inline auto socket(Address, Socket, Options) -> Result; // ... a.k.a. socket4(2)
      [[deprecated("only works with PF::UNSPECIFIED, instead prefer socket(Address, Socket, Options)")]] inline auto socket(Address, Socket, Options, Protocol) -> Result; // a.k.a. socket4
      [[deprecated("only works with PF::UNSPECIFIED, instead prefer socket(Address, Socket, Options)")]] inline auto socket(Address, Socket, Protocol, Options) -> Result; // a.k.a. socket4
      [[deprecated("only works with PF::UNSPECIFIED, instead prefer socket(Address, Specification)")]] inline auto socket(Address, Specification, Protocol) -> Result;
    }
    namespace native {
      using Result = result::Single<int>;
      inline auto socket(Address, Specification) -> Result; // ..... a.k.a. socket(2)
      inline auto socket(Address, Socket, Options) -> Result; // ... a.k.a. socket4(2)
      [[deprecated("only works with PF::UNSPECIFIED, instead prefer socket(Address, Socket, Options)")]] inline auto socket(Address, Socket, Options, Protocol) -> Result; // a.k.a. socket4
      [[deprecated("only works with PF::UNSPECIFIED, instead prefer socket(Address, Socket, Options)")]] inline auto socket(Address, Socket, Protocol, Options) -> Result; // a.k.a. socket4
      [[deprecated("only works with PF::UNSPECIFIED, instead prefer socket(Address, Specification)")]] inline auto socket(Address, Specification, Protocol) -> Result;
    }
    namespace direct {
      // Untyped, direct access to the lowest-level API. Every parameter is an unflavored integer.  So Good Luck to you!
      // RTM for usage and conventions.
      // This is purposely a awkward-unto-very difficult to access.
      using Result = result::Single<int>;
      inline auto socket(int address, int specification, int protocol) -> Result;
    }
  }
  using packaging::socket::function::socket;
  namespace native { using packaging::socket::native::socket; }
  namespace direct { using packaging::socket::direct::socket; }
}
#endiv
#divert <ipp>
#import sys.posix.syscall
namespace sys::posix::packaging::socket {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  auto function::socket(Address address, Specification specification) -> Result                     { return socket(address, specification, UNSPECIFIED); }
  auto function::socket(Address address, Socket type, Options options) -> Result                    { return socket(address, type | options, UNSPECIFIED); }
  auto function::socket(Address address, Socket type, Options options, Protocol protocol) -> Result { return socket(address, type | options, protocol); }
  auto function::socket(Address address, Socket type, Protocol protocol, Options options) -> Result { return socket(address, type | options, protocol); }
  auto function::socket(Address address, Specification specification, Protocol protocol) -> Result  { return idiomatic::syscall<File>(Syscall::SOCKET, (int) address, (int) specification, (int) protocol); }
  //
  auto native::socket(Address address, Specification specification) -> Result                       { return socket(address, specification, UNSPECIFIED); }
  auto native::socket(Address address, Socket type, Options options) -> Result                      { return socket(address, type | options, UNSPECIFIED); }
  auto native::socket(Address address, Socket type, Options options, Protocol protocol) -> Result   { return socket(address, type | options, protocol); }
  auto native::socket(Address address, Socket type, Protocol protocol, Options options) -> Result   { return socket(address, type | options, protocol); }
  auto native::socket(Address address, Specification specification, Protocol protocol) -> Result    { return idiomatic::syscall<int>(Syscall::SOCKET, (int) address, (int) specification, (int) protocol); }
  auto direct::socket(int address, int specification, int protocol) -> Result                       { return idiomatic::syscall<int>(Syscall::SOCKET, address, specification, protocol); }
#pragma GCC diagnostic pop
}
#endiv

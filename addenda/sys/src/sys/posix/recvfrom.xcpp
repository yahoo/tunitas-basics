// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.posix.packaging.msg.interface
namespace sys::posix {
  namespace packaging::recvfrom {
    using namespace packaging::msg::interface;
    namespace avoid {
      // New School- Flags are optional and at the end.
      /*not a template at all*/             inline auto recvfrom(int fd, void *, size_t, sockaddr *, socklen_t *, Flags = NONE) -> Result;
      template<required::Sockaddr SOCKADDR> inline auto recvfrom(int fd, void *, size_t, [[out]] SOCKADDR &, Flags = NONE) -> Result requires !std::is_const_v<SOCKADDR>;
      // old_school - Flags are in the middle and never optional
      /**/                                  inline auto recvfrom(int fd, void *, size_t, Flags, sockaddr *, socklen_t *) -> Result;
      template<required::Sockaddr SOCKADDR> inline auto recvfrom(int fd, void *, size_t, Flags, [[out]] SOCKADDR &) -> Result requires !std::is_const_v<SOCKADDR>;
    }
    namespace function {
      // New School - ibidem.
      template<required::Sockaddr SOCKADDR, required::Octet OCTET>           inline auto recvfrom(File, [[inout]] Dope<OCTET>, [[out]] SOCKADDR &, Flags = NONE) -> Result requires !std::is_const_v<SOCKADDR> && !std::is_const_v<OCTET>;
      template<required::Sockaddr SOCKADDR, typename TYPE>                   inline auto recvfrom(File, [[out]] TYPE &, [[out]] SOCKADDR &, Flags = NONE) -> Result requires !std::is_const_v<SOCKADDR> && !required::Dopelike<TYPE>;
      template<required::Sockaddr SOCKADDR, typename TYPE, size::Unsigned N> inline auto recvfrom(File, [[out]] TYPE (&)[N], [[out]] SOCKADDR &, Flags = NONE) -> Result requires !std::is_const_v<SOCKADDR> && !required::Dopelike<TYPE>;
      // old_school - ibidem.
      template<required::Sockaddr SOCKADDR, required::Octet OCTET>           inline auto recvfrom(File, [[inout]] Dope<OCTET>, [[in]] Flags, [[out]] SOCKADDR &) -> Result requires !std::is_const_v<SOCKADDR> && !std::is_const_v<OCTET>;
      template<required::Sockaddr SOCKADDR, typename TYPE>                   inline auto recvfrom(File, [[out]] TYPE &, [[in]] Flags, [[out]] SOCKADDR &) -> Result requires !std::is_const_v<SOCKADDR> && !required::Dopelike<TYPE>;;
      template<required::Sockaddr SOCKADDR, typename TYPE, size::Unsigned N> inline auto recvfrom(File, [[out]] TYPE (&)[N], [[in]] Flags, [[out]] SOCKADDR &) -> Result requires !std::is_const_v<SOCKADDR> && !required::Dopelike<TYPE>;
    }
    namespace native {
      // New School - ibidem.
      template<required::Sockaddr SOCKADDR, required::Octet OCTET>           inline auto recvfrom(int fd, [[inout]] Dope<OCTET>, [[out]] SOCKADDR &, Flags = NONE) -> Result requires !std::is_const_v<SOCKADDR> && !std::is_const_v<OCTET>;
      template<required::Sockaddr SOCKADDR, typename TYPE>                   inline auto recvfrom(int fd, [[out]] TYPE &, [[out]] SOCKADDR &, Flags = NONE) -> Result requires !std::is_const_v<SOCKADDR> && !required::Dopelike<TYPE>;
      template<required::Sockaddr SOCKADDR, typename TYPE, size::Unsigned N> inline auto recvfrom(int fd, [[out]] TYPE (&)[N], [[out]] SOCKADDR &, Flags = NONE) -> Result requires !std::is_const_v<SOCKADDR> && !required::Dopelike<TYPE>;
      // old_school - ibidem.
      template<required::Sockaddr SOCKADDR, required::Octet OCTET>           inline auto recvfrom(int fd, [[inout]] Dope<OCTET>, [[in]] Flags, [[out]] SOCKADDR &) -> Result requires !std::is_const_v<SOCKADDR> && !std::is_const_v<OCTET>;
      template<required::Sockaddr SOCKADDR, typename TYPE>                   inline auto recvfrom(int fd, [[out]] TYPE &, [[in]] Flags, [[out]] SOCKADDR &) -> Result requires !std::is_const_v<SOCKADDR> && !required::Dopelike<TYPE>;;
      template<required::Sockaddr SOCKADDR, typename TYPE, size::Unsigned N> inline auto recvfrom(int fd, [[out]] TYPE (&)[N], [[in]] Flags, [[out]] SOCKADDR &) -> Result requires !std::is_const_v<SOCKADDR> && !required::Dopelike<TYPE>;
    }
  }
  using packaging::recvfrom::function::recvfrom;
  namespace native { using packaging::recvfrom::native::recvfrom; }
  namespace avoid { using packaging::recvfrom::avoid::recvfrom; }
}
#endiv
#divert <ipp>
#import sys.posix.syscall
#import sys.sock.addr.upcast
namespace sys::posix::packaging::recvfrom {
  namespace upcast = sock::addr::upcast;
  auto avoid::recvfrom(int fd, void *buf, size_t len, sockaddr *sa, socklen_t *sl, Flags fl) -> Result { return idiomatic::syscall<size::Signed>(Syscall::RECVFROM, fd, buf, len, (int)fl, sa, sl); }
  auto avoid::recvfrom(int fd, void *buf, size_t len, Flags fl, sockaddr *sa, socklen_t *sl) -> Result { return idiomatic::syscall<size::Signed>(Syscall::RECVFROM, fd, buf, len, (int)fl, sa, sl); }
  template<required::Sockaddr SOCKADDR> auto avoid::recvfrom(int fd, void *buf, size_t len, SOCKADDR &sa, Flags fl) -> Result requires !std::is_const_v<SOCKADDR> { return recvfrom(fd, buf, len, fl, sa); }
  template<required::Sockaddr SOCKADDR> auto avoid::recvfrom(int fd, void *buf, size_t len, Flags fl, SOCKADDR &addr) -> Result requires !std::is_const_v<SOCKADDR> {
    socklen_t proposed{sizeof (addr)}; // yes, this is thrown away since the caller already knows the SOCKADDR size (but that isn't the point of the interface now is it?)
#warning FIXTHIS the other ones throw if proposed != sizeof (addr) upon return
    return idiomatic::syscall<size::Signed>(Syscall::RECVFROM, fd, buf, len, (int)fl, upcast::to_address(addr), &proposed);
  }
}
namespace sys::posix::packaging::recvfrom {
  // New School
  template<required::Sockaddr SOCKADDR, required::Octet OCTET>           auto function::recvfrom(File fd, Dope<OCTET> buf, SOCKADDR &sa, Flags fl) -> Result requires !std::is_const_v<SOCKADDR> && !std::is_const_v<OCTET>  { return native::recvfrom((int)fd, buf, fl, sa); }
  template<required::Sockaddr SOCKADDR, typename TYPE>                   auto function::recvfrom(File fd, TYPE &buf, SOCKADDR &sa, Flags fl) -> Result requires !std::is_const_v<SOCKADDR> && !required::Dopelike<TYPE>      { return native::recvfrom((int)fd, buf, fl, sa); }
  template<required::Sockaddr SOCKADDR, typename TYPE, size::Unsigned N> auto function::recvfrom(File fd, TYPE (&buf)[N], SOCKADDR &sa, Flags fl) -> Result requires !std::is_const_v<SOCKADDR> && !required::Dopelike<TYPE> { return native::recvfrom((int)fd, buf, fl, sa); }
  // old_school
  template<required::Sockaddr SOCKADDR, required::Octet OCTET>           auto function::recvfrom(File fd, Dope<OCTET> buf, Flags fl, SOCKADDR &sa) -> Result requires !std::is_const_v<SOCKADDR> && !std::is_const_v<OCTET>  { return native::recvfrom((int)fd, buf, fl, sa); }
  template<required::Sockaddr SOCKADDR, typename TYPE>                   auto function::recvfrom(File fd, TYPE &buf, Flags fl, SOCKADDR &sa) -> Result requires !std::is_const_v<SOCKADDR> && !required::Dopelike<TYPE>      { return native::recvfrom((int)fd, buf, fl, sa); }
  template<required::Sockaddr SOCKADDR, typename TYPE, size::Unsigned N> auto function::recvfrom(File fd, TYPE (&buf)[N], Flags fl, SOCKADDR &sa) -> Result requires !std::is_const_v<SOCKADDR> && !required::Dopelike<TYPE> { return native::recvfrom((int)fd, buf, fl, sa); }
}
namespace sys::posix::packaging::recvfrom {
  // New School
  template<required::Sockaddr SOCKADDR, required::Octet OCTET>           auto native::recvfrom(int fd, Dope<OCTET> buf, SOCKADDR &sa, Flags fl) -> Result requires !std::is_const_v<SOCKADDR> && !std::is_const_v<OCTET>  { return avoid::recvfrom(fd, buf.data(), buf.size(), fl, sa); }
  template<required::Sockaddr SOCKADDR, typename TYPE>                   auto native::recvfrom(int fd, TYPE &buf, SOCKADDR &sa, Flags fl) -> Result requires !std::is_const_v<SOCKADDR> && !required::Dopelike<TYPE>      { return avoid::recvfrom(fd, &buf, sizeof (buf), fl, sa); }
  template<required::Sockaddr SOCKADDR, typename TYPE, size::Unsigned N> auto native::recvfrom(int fd, TYPE (&buf)[N], SOCKADDR &sa, Flags fl) -> Result requires !std::is_const_v<SOCKADDR> && !required::Dopelike<TYPE> { return avoid::recvfrom(fd, &buf[0], sizeof (buf), fl, sa); }
  // old_school
  template<required::Sockaddr SOCKADDR, required::Octet OCTET>           auto native::recvfrom(int fd, Dope<OCTET> buf, Flags fl, SOCKADDR &sa) -> Result requires !std::is_const_v<SOCKADDR> && !std::is_const_v<OCTET>  { return avoid::recvfrom(fd, buf.data(), buf.size(), fl, sa); }
  template<required::Sockaddr SOCKADDR, typename TYPE>                   auto native::recvfrom(int fd, TYPE &buf, Flags fl, SOCKADDR &sa) -> Result requires !std::is_const_v<SOCKADDR> && !required::Dopelike<TYPE>      { return avoid::recvfrom(fd, &buf, sizeof (buf), fl, sa); }
  template<required::Sockaddr SOCKADDR, typename TYPE, size::Unsigned N> auto native::recvfrom(int fd, TYPE (&buf)[N], Flags fl, SOCKADDR &sa) -> Result requires !std::is_const_v<SOCKADDR> && !required::Dopelike<TYPE> { return avoid::recvfrom(fd, &buf[0], sizeof (buf), fl, sa); }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.sig.Number
#import sys.call.result.Value
namespace sys::posix {
  //
  // Of course we take a viewpoint on whether sighandler_t should exist.
  // This is 2025 <humming>in the year 2525, if man is still alive</humming> and we have to move forward.
  //
  // Specification via man-pages-4.16-3.fc29.noarch
  //
  //   <quote>
  //     The kernel's signal() system call provides System V semantics.
  //
  //     By default, in glibc 2 and later, the signal() wrapper function does not invoke the kernel system call. 
  //     Instead, it calls sigaction(2) using flags that supply BSD semantics.
  //     This default behavior is provided as long as a suitable feature test macro is defined:
  //          _BSD_SOURCE on glibc 2.19 and earlier
  //       or _DEFAULT_SOURCE in glibc 2.19 and later.
  //     (By default, these macros are defined; see feature_test_macros(7) for details.)
  //     If such a feature test macro is not defined, then signal() provides System V semantics.
  //   </quote>
  //
  //   ...and...
  //
  //   <quote>
  //     The only portable use of signal() is to set a signal's disposition to SIG_DFL or SIG_IGN.
  //     The semantics when using signal() to establish a signal handler vary across systems (and POSIX.1 explicitly permits this variation).
  //
  //     DO NOT USE IT FOR THIS PURPOSE [emphasis herein]
  //   </quote>
  //
  // Here we call the library function because it has various semantics.
  // Yuk.
  // Avoid.
  //
  // Usage:
  //
  //   Read it, know it, live it: signal(2)
  //
  [[deprecated("AVOID.  See the commentariat Portability within signal(2)")]] inline auto signal(sig::Number, sighandler_t) -> call::result::Value<sighandler_t>;
}
#endiv
#divert <ipp>
#import sys.posix.syscall
#import errno
auto sys::posix::signal(sig::Number n, sighandler_t h) -> call::result::Value<sighandler_t> {
  auto recovered = [n, h]() -> sighandler_t {
#ifdef SYS_signal
                     return idiomatic::syscall<sighandler_t>(Syscall::SIGNAL, (int)n, h);
#else
                     return ::signal((int) n, h);
#endif
                   }();
  if (SIG_ERR == recovered) {
    return {false, errno, recovered};
  } else {
    return {true, error_t{}, recovered};
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#include <hpp/sys.posix.AF>
#endiv
#divert <hpp>
#import sys.net.Network
#import sys.ip.Version
#import sys.ip.addr.Family
#import sys.ip.addr.Address
#import sys.ip.addr.Sockaddr
class sys::posix::AF::IP {
  // Used exclusively to manufacture the public constants
  struct Generator {
    template<ip::Version VERSHEEN> inline static constexpr auto Family = ip::addr::Family<VERSHEEN>;
  };
public:
  using Version = ip::Version;
  inline static constexpr auto V4 = Version::IPv4;
  inline static constexpr auto V6 = Version::IPv6;
  using Family = af::Type; // the carrier of the Family<NETWORK> constrained-constant generator
  inline static constexpr auto UNSPEC = af::UNSPEC;
  inline static constexpr auto UNSPECIFIED = af::UNSPECIFIED;
  inline static constexpr auto INET4 = Generator::Family<V4>;
  inline static constexpr auto INET6 = Generator::Family<V6>;
  template<Version VERSION> using Address = ip::addr::Address<VERSION>;
  template<Version VERSION> using Sockaddr = ip::addr::Sockaddr<VERSION>;
  IP() = delete;
  IP(IP const &) = delete;
  auto operator=(IP const &) -> IP & = delete;
private:
  struct Avoid { };
  [[deprecated("really")]] inline static constexpr Avoid INET = {};
};
#endiv
#divert <cpp>
#import tests.usage.posix_AF_IP.Usage
static_assert(tests::usage::posix_AF_IP::Usage<>);
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.posix.packaging.msg.interface
namespace sys::posix {
  namespace packaging::recv {
    using namespace packaging::msg::interface;
    //
    // Via recv(2)
    //   <quote>
    //     Also, the following call
    //       recv(sockfd, buf, len, flags);
    //     is equivalent to
    //       recvfrom(sockfd, buf, len, flags, NULL, 0);
    //   </quote>
    //
    // As such, there is no Syscall::RECV, only Syscall::RECVFROM
    //
    namespace avoid {
      inline auto recv(int fd, [[out]] void *, [[in]] size_t, Flags = NONE) -> Result;
    }
    namespace function {
      template<required::Octet OCTET>            inline auto recv(File, [[inout]] Dope<OCTET>, Flags = NONE) -> Result requires !std::is_const_v<OCTET>;
      template<typename TYPE>                    inline auto recv(File, [[out]] TYPE &, Flags = NONE) -> Result requires !std::is_const_v<TYPE> && !required::Dopelike<TYPE>;
      template<typename TYPE, size::Unsigned N>  inline auto recv(File, [[out]] TYPE (&)[N], Flags = NONE) -> Result requires !std::is_const_v<TYPE> && !required::Dopelike<TYPE>;
    }
    namespace native {
      template<required::Octet OCTET>            inline auto recv(int fd, [[inout]] Dope<OCTET>, Flags = NONE) -> Result requires !std::is_const_v<OCTET>;
      template<typename TYPE>                    inline auto recv(int fd, [[out]] TYPE &, Flags = NONE) -> Result requires !std::is_const_v<TYPE> && !required::Dopelike<TYPE>;
      template<typename TYPE, size::Unsigned N>  inline auto recv(int fd, [[out]] TYPE (&)[N], Flags = NONE) -> Result requires !std::is_const_v<TYPE> && !required::Dopelike<TYPE>;
    }
  }
  using packaging::recv::function::recv;
  namespace native { using packaging::recv::native::recv; }
  namespace avoid { using packaging::recv::avoid::recv; }
}
#endiv
#divert <ipp>
#import sys.posix.recvfrom
namespace sys::posix::packaging::recv {
  auto avoid::recv(int fd, void *buf, size_t len, Flags fl) -> Result { return posix::avoid::recvfrom(fd, buf, len, fl, (sockaddr *)0, (socklen_t *)0); }
  // function
  template<required::Octet OCTET>            auto function::recv(File fd, Dope<OCTET> buf, Flags fl) -> Result requires !std::is_const_v<OCTET>                            { return native::recv((int)fd, buf, fl); }
  template<typename TYPE>                    auto function::recv(File fd, TYPE &buf, Flags fl) -> Result requires !std::is_const_v<TYPE> && !required::Dopelike<TYPE>      { return native::recv((int)fd, buf, fl); }
  template<typename TYPE, size::Unsigned N>  auto function::recv(File fd, TYPE (&buf)[N], Flags fl) -> Result requires !std::is_const_v<TYPE> && !required::Dopelike<TYPE> { return native::recv((int)fd, buf, fl); }
  // native
  template<required::Octet OCTET>            auto native::recv(int fd, Dope<OCTET> buf, Flags fl) -> Result requires !std::is_const_v<OCTET>                            { return avoid::recv(fd, buf.data(), buf.size(), fl); }
  template<typename TYPE>                    auto native::recv(int fd, TYPE &buf, Flags fl) -> Result requires !std::is_const_v<TYPE> && !required::Dopelike<TYPE>      { return avoid::recv(fd, &buf, sizeof (buf), fl); }
  template<typename TYPE, size::Unsigned N>  auto native::recv(int fd, TYPE (&buf)[N], Flags fl) -> Result requires !std::is_const_v<TYPE> && !required::Dopelike<TYPE> { return avoid::recv(fd, &buf[0], sizeof (buf), fl); }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.posix.packaging.access.interface
namespace sys::posix {
  namespace packaging::eaccess {
    using namespace packaging::access::interface;
    namespace function {
      inline auto eaccess(Pathname, Access) -> result::Status;
    }
  }
  using packaging::eaccess::function::eaccess;
}
using sys::posix::eaccess; // avoid ambiguity with the POSIX C API
#endiv
#divert <ipp>
#import sys.s.Bits
#import sys.s.Flags
#import sys.posix.access
#import sys.posix.getegid
#import sys.posix.geteuid
#import sys.posix.getgid
#import sys.posix.getuid
#import sys.posix.group_member
#import sys.posix.stat
#import errno // EACCESS
#import mode_t
namespace sys::posix::packaging::eaccess {
  //
  // REMINDER -- this is not actually a system call in glibc (c.f. glibc-2.28-9.fc29.x86_64)
  // REMINDER -- it is a library emulation of the access computation
  // REMINDER -- the libc version performs reasoning on the stat buffer
  //             we replay that algebra here.
  //
  auto function::eaccess(Pathname pathname, Access mode) -> result::Status {
    using namespace sys::s;
    using namespace packaging::access::implementation;
    auto const [uid, gid, euid, egid] = Quad{getuid(), getgid(), geteuid(), getegid()};
    if (false) {
    } else if (uid == euid && gid == egid) {
      return posix::access(move(pathname), mode);
    } else if (auto ted = posix::stat(move(pathname)); fail(ted)) {
      return {false, error_num(ted), -1};
    } else {
      auto granted = [euid, egid, ted]() -> Bits {
                       auto const &st = value(ted);
                       auto const st_mode = Flags{st.st_mode};
                       if (false) {
                       } else if (euid == User{0}) {
                         //
                         // The super-user can read and write any file, and execute any file that anyone can execute.
                         // [[FIXTHIS]] why is there any checking at all here?
                         // (  executable(mode) && executable(st)
                         // || readable(mode) && readable(st)
                         // || writable(mode) && writable(st) )
                         // 
                         return ~Bit{};
                       } else if (auto const st_uid=User{st.st_uid}; euid == st_uid) {
                         return userof(st_mode);
                       } else if (auto const st_gid=Group{st.st_gid}; egid == st_gid || posix::group_member(st_gid)) {
                         return groupof(st_mode);
                       } else {
                         return otherof(st_mode);
                       }
                     }();
      auto finalize = [granted]() -> result::Status {
                        if (auto good = Bits::NONE != granted; good) {
                          return {good, 0, 0};
                        } else { 
                          return {good, EACCES, -1};
                        }
                      };
      return finalize();
    }
  }
}
#endiv

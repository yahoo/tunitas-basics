// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.posix.packaging.path.interface
#import sys.call.Result
namespace sys::posix {
  namespace packaging::remove {
    using namespace packaging::path::interface;
    namespace function {
      inline auto remove(Pathname) -> result::Status;
    }
  }
  using packaging::remove::function::remove;
}
#endiv
#divert <ipp>
#import sys.posix.unlink
#import sys.posix.rmdir
#import sys.posix.E
namespace sys::posix::packaging::remove {
  auto function::remove(Pathname pathname) -> result::Status {
    //
    // This is the same as is *documented* for glibc.
    // The code for glibc-2.17-21 checks for EPERM to indicate "NOT A DIRECTORY"
    //
    // The manual page for man-pages-4.16-3.fc29.noarch says the following
    //
    // EISDIR    A pathname refers to a directory. (This is the non-POSIX value returned by Linux since 2.1.132.)
    // ENOTDIR   A component used as a directory in pathname is not, in fact, a directory.
    // EPERM     The system does not allow unlinking of directories, or unlinking of directories requires privileges that the calling process doesn't have.
    //           (This is the POSIX prescribed error return; as noted above, Linux returns EISDIR for this case.)
    //
    // This code handles either eventuality.  But does not call the glibc ::remove(...)
    auto probably_a_directory = [](auto result) {
                                  auto ec = error_code(result);
                                  return E::PERM == ec || E::ISDIR == ec;
                                };
    //
    // To wit:
    if (auto unlinked = posix::unlink(pathname); good(unlinked) || !probably_a_directory(unlinked)) {
      return unlinked;
    }
    return posix::rmdir(pathname);
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.posix.packaging.at.interface
#import sys.id.User
#import sys.id.Group
#import uid_t
#import gid_t
namespace sys::posix {
  namespace packaging::fchownat {
    using namespace packaging::at::interface;
    using id::User;
    using id::Group;
    namespace function { 
      using Position = argument::Position<File>;
      inline auto fchownat(Position, Pathname, User, Flags = Flags::NONE) -> result::Status;
      inline auto fchownat(Position, Pathname, Group, Flags = Flags::NONE) -> result::Status;
      inline auto fchownat(Position, Pathname, User, Group, Flags = Flags::NONE) -> result::Status;
      inline auto fchownat(Position, Pathname, uid_t, gid_t, Flags = Flags::NONE) -> result::Status;
    }
    namespace native {
      using Position = argument::Position<int>;
      inline auto fchownat(Position dirfd, Pathname, uid_t, gid_t, Flags flags) -> result::Status;
    }
  }
  using packaging::fchownat::function::fchownat;
  namespace native { using packaging::fchownat::native::fchownat; }
}
using sys::posix::fchownat; // avoid ambiguity with the POSIX C API
#endiv
#divert <ipp>
#import sys.posix.syscall 
namespace sys::posix::packaging::fchownat {
  auto function::fchownat(Position position, Pathname pathname, User uid, Flags flags) -> result::Status             { return native::fchownat(position, move(pathname), (uid_t)uid, gid_t(-1), flags); }
  auto function::fchownat(Position position, Pathname pathname, Group gid, Flags flags) -> result::Status            { return native::fchownat(position, move(pathname), uid_t(-1), (gid_t)gid, flags); }
  auto function::fchownat(Position position, Pathname pathname, User uid, Group gid, Flags flags) -> result::Status  { return native::fchownat(position, move(pathname), (uid_t)uid, (gid_t)gid, flags); }
  auto function::fchownat(Position position, Pathname pathname, uid_t uid, gid_t gid, Flags flags) -> result::Status { return native::fchownat(position, move(pathname), uid, gid, flags); }
  auto native::fchownat(Position position, Pathname pathname, uid_t uid, gid_t gid, Flags flags) -> result::Status   { return idiomatic::syscall<int>(Syscall::FCHOWNAT, (int)position, (char const *)pathname, uid, gid, (int)flags); }
}
#endiv

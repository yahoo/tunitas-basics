// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys::posix {
  //
  // The ip(7) protocol types & constants.
  // The older name for it; but it's okay to prefer PF::IP in new work.
  //
  //  Usage:
  //
  //   auto sd = ip::socket(AF::IP::INET4, SOCK::STREAM, IPPROTO::IP);
  //   auto sd = ip::socket(AF::IP::INET6, SOCK::DATAGRAM, IPPROTO::IP);
  //
  //   auto sd = ip::socket(AF::IP::INET6, SOCK::RAW, IPPROTO::TCP);
  //   auto sd = ip::socket(AF::IP::INET4, SOCK::RAW, IPPROTO::UDP);
  //   auto sd = ip::socket(AF::IP::INET6, SOCK::RAW, ...blahblahblah...);
  //
  //
  struct IPPROTO;
}
#endiv
#divert <hpp>
#import sys.ip.proto.constants
#import sys.ip.proto.Protocol
#import sys.pf.constants
namespace sys::posix {
  namespace {
    namespace [[detail]] belabor {
      inline constexpr auto the_point_that_NONE_notequal_UNSPECIFIED() -> ip::proto::Protocol {
        constexpr auto NONE = ip::proto::NONE;  // IPv6 no-next-header "protocol"
        static_assert((int)NONE != (int)pf::UNSPECIFIED);
        static_assert((int)NONE != IPPROTO_IP);
        static_assert((int)NONE == IPPROTO_NONE);
        return NONE;
      }
    }
  }
}
#import sys.ip.proto.Protocol
#import sys.ip.constants
struct sys::posix::IPPROTO {
  using Protocol = ip::proto::Protocol;
  inline static constexpr auto IP = ip::proto::IP;
  inline static constexpr auto ICMP = ip::proto::ICMP;
  inline static constexpr auto IGMP = ip::proto::IGMP;
  inline static constexpr auto IPIP = ip::proto::IPIP;
  inline static constexpr auto TCP = ip::proto::TCP;
  inline static constexpr auto EGP = ip::proto::EGP;
  inline static constexpr auto PUP = ip::proto::PUP;
  inline static constexpr auto UDP = ip::proto::UDP;
  inline static constexpr auto IDP = ip::proto::IDP;
  inline static constexpr auto TP = ip::proto::TP;
  inline static constexpr auto DCCP = ip::proto::DCCP;
  inline static constexpr auto IPV6 = ip::proto::IPV6;
  inline static constexpr auto RSVP = ip::proto::RSVP;
  inline static constexpr auto GRE = ip::proto::GRE;
  inline static constexpr auto ESP = ip::proto::ESP;
  inline static constexpr auto AH = ip::proto::AH;
  inline static constexpr auto MTP = ip::proto::MTP;
  inline static constexpr auto BEETPH = ip::proto::BEETPH;
  inline static constexpr auto ENCAP = ip::proto::ENCAP;
  inline static constexpr auto PIM = ip::proto::PIM;
  inline static constexpr auto COMP = ip::proto::COMP;
  inline static constexpr auto SCTP = ip::proto::SCTP;
  inline static constexpr auto UDPLITE = ip::proto::UDPLITE;
  inline static constexpr auto MPLS = ip::proto::MPLS;
  inline static constexpr auto RAW = ip::proto::RAW;
  inline static constexpr auto HOPOPTS = ip::proto::HOPOPTS;
  inline static constexpr auto ROUTING = ip::proto::ROUTING;
  inline static constexpr auto FRAGMENT = ip::proto::FRAGMENT;
  inline static constexpr auto ICMPV6 = ip::proto::ICMPV6;
  inline static constexpr auto NONE = belabor::the_point_that_NONE_notequal_UNSPECIFIED();
  inline static constexpr auto DSTOPTS = ip::proto::DSTOPTS;
#ifdef IPPROTO_MH // enable by #include WHAT?
  inline static constexpr auto MH = ip::proto::MH;
#endif
#ifdef IPPROTO_L2TP // enable by #include WHAT?
  inline static constexpr auto L2TP = ip::proto::L2TP;
#endif
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  [[deprecated("AVOID, instead say PF::IP::UNSPECIFIED")]] inline static constexpr auto UNSPEC = pf::UNSPEC;
#pragma GCC diagnostic pop
  IPPROTO() = delete;
  IPPROTO(IPPROTO const &) = delete;
  auto operator=(IPPROTO const &) -> IPPROTO & = delete;
};
#endiv
#divert <cpp>
#import tests.usage.posix_IPPROTO.Usage
static_assert(tests::usage::posix_IPPROTO::Usage<>);
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys::posix {
  //
  // It's a fake namespace-in-a-struct.
  // PREFER namespace sys::seek
  // PREFER namespace sys::seek::constants
  // PREFER sys::seek::Whence
  //        etc.
  //
  // Usage:
  //
  //   using SEEK = sys::posix::SEEK;
  //   auto const s0 = SEEK::SET;
  //   auto const s1 = SEEK::CURRENT;
  //   auto const s2 = SEEK::END;
  //   ...etc...
  //
  struct SEEK;
}
#endiv
#divert <hpp>
#import sys.seek.Whence
#import sys.seek.constants
struct sys::posix::SEEK {
  using Whence = seek::Whence;
  inline static constexpr auto SET     = seek::SET;
  inline static constexpr auto CURRENT = seek::CURRENT;
  inline static constexpr auto END     = seek::END;
#ifdef SEEK_DATA
  inline static constexpr auto DATA    = seek::DATA;
#endif
#ifdef SEEK_HOLE
  inline static constexpr auto HOLE    = seek::HOLE;
#endif
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  inline static constexpr auto CUR [[deprecated("spell it out! buy a vowel! instead prefer SEEK::CURRENT")]] = seek::CUR;
#pragma GCC diagnostic pop
  SEEK() = delete;
  SEEK(SEEK const &) = delete;
  auto operator=(SEEK const &) -> SEEK & = delete;
};
#endiv
#divert <cpp>
#import tests.usage.posix_SEEK.Usage
static_assert(tests::usage::posix_SEEK::Usage<>);
#endiv

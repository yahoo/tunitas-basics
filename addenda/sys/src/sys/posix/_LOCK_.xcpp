// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys::posix {
  //
  // Compatibility and uniformity.
  // We have 'struct LOCK' contra 'namespace lock'
  // Also this is _LOCK_ to allow ::LOCK::LOCK to be uttered without naming the constructor
  //
  // Also, LOCK and LEASE have different constants
  // The "lock" constants are of a different type than the "lease" constants
  //
  //   LOCK::READ ............... getlock(3), setlock(3) an siblings
  //   LOCK::LEASE::READ ........ getlease(3) and setlease(3)
  //   LEASE::READ .............. getlease(3) and setlease(3)
  //
  // Pattern
  //   struct-as-namespace.
  //
  // Usage:
  //
  //   patterns shown in the struct definition body
  //
  struct _LOCK_;
}
#endiv
#divert <hpp>
#import sys.flock.Operation
#import sys.flock.Specification
#import sys.flock.constants
#import sys.lock.Operation
#import sys.lock.constants
#import sys.unlock.Call
#import sys.unlock.call.Traits
#import sys.posix.LEASE
#import sys.posix.FLOCK
struct sys::posix::_LOCK_ : public LEASE, public FLOCK {
  //
  // getlock(fd) -> Value<Lock>;
  // setlock(fd, struct flock { .l_type{LOCK::READ} });
  // setlock(fd, struct flock { .l_type{LOCK::WRITE} });
  // setlock(fd, struct flock { .l_type{LOCK::UNLOCK<LOCK::FCNTL>} });
  //
  // see Operation<NAME> <---> using Operation = lock::Operation;
  inline static constexpr auto READ    = lock::READ;
  inline static constexpr auto WRITE   = lock::WRITE;
  inline static constexpr auto END     = lock::UNLOCK; // else UNLOCK<LOCK::LOCK> (see compatibility, below)
  // see UNLOCK<NAME> <---> inline static constexpr auto UNLOCK  = lock::UNLOCK;
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  [[deprecated("spell it out! instead, prefer LOCK::READ")]]       inline static constexpr auto RD      = lock::RD;
  [[deprecated("spell it out! instead, prefer LOCK::WRITE")]]      inline static constexpr auto WR      = lock::WR;
  [[deprecated("spell it out! instead, prefer LOCK::END")]]        inline static constexpr auto UN      = lock::UN;
#pragma GCC diagnostic pop
  //
  // Blending lock(fcntl LCK), lease(fcntl LEASE), flock(sic) ... the legacy blend. 
  // Only lockf(3) is omitted from this hellish stew of names and rhymes.
  // Good luck to you remembering which goes where.
  //
  inline static constexpr auto FLOCK = unlock::Call::FLOCK; // WATCHOUT - this occludes an ancestor, instead use Ancestors::LEASE
  inline static constexpr auto LOCKF = unlock::Call::LOCKF;
  inline static constexpr auto LOCK  = unlock::Call::LOCK;
  inline static constexpr auto LEASE = unlock::Call::LEASE; // WATCHOUT - ibidem
  struct Ancestors {
    using FLOCK = sys::posix::FLOCK;
    using LEASE = sys::posix::LEASE;
  };
  //
  // Legacy use of fcntl(2) "LEASE" nomenclature
  //
  //    getlease(fd) -> Value<Lease>
  //
  //                 <---LEASE--->                        <---------- LOCK ----------->
  //                 <----------->                        <---------- avoid ---------->
  //    setlease(fd, LEASE::READ);           setlease(fd, LOCK::Ancestors::LEASE::READ);
  //    setlease(fd, LEASE::WRITE);          setlease(fd, LOCK::Ancestors::LEASE::WRITE);
  //    setlease(fd, LEASE::END);            setlease(fd, LOCK::Ancestors::LEASE::END);
  //    setlease(fd, LEASE::UNLOCK);         setlease(fd, LOCK::Ancestors::LEASE::UNLOCK);
  //    setlease(fd, LEASE::ENDLEASE);       setlease(fd, LOCK::Ancestors::LEASE::ENDLEASE);
  //                                         setlease(fd, LOCK::UNLOCK<LOCK::LEASE>);
  //
  using Lease [[reminder("instead, prefer LOCK::Operation<LOCK::LEASE>")]] = lease::Operation;
  [[deprecated("use the common form. instead, prefer LEASE::END or LOCK::UNLOCK<LOCK::LEASE>")]] inline static constexpr auto UNLEASE = lease::UNLOCK;
  //
  // Legacy use of fcntl(2) "LCK" nomenclatures with "OFD" and "64" variants
  //
  //    getlock(fd) -> Value<Lock>;
  //    setlock(fd, struct flock { .l_type{ ...LOCK::Operation... } });
  //                                           ^
  //                                           |
  //                                           \---- among LOCK::READ, LOCK::WRITE, LOCK::END
  //
  using Lock [[reminder("instead, prefer LOCK::Operation<LOCK::LOCK>")]] = lock::Operation;
  [[deprecated("use the common form. instead, prefer LOCK::END or LOCK::UNLOCK<LOCK::LOCK>")]] inline static constexpr auto ENDLOCK = lock::UNLOCK;
  //
  // legacy use of flock(2)
  //
  // flock(fd, LOCK::SHARED);
  // flock(fd, LOCK::EXCLUSIVE);
  // flock(fd, LOCK::SHARED | LOCK::ADVISORY);
  // flock(fd, LOCK::EXCLUSIVE | LOCK::NONBLOCK);
  // flock(fd, LOCK::ENDFLOCK);
  // flock(fd, LOCK::UNFLOCK);
  // flock(fd, LOCK::ENDLOCK<FLOCK>);
  // flock(fd, LOCK::UNLOCK<FLOCK>);
  //
  using Flock [[reminder("instead, prefer LOCK::Operation<LOCK::FLOCK>")]] = flock::Operation;
  [[deprecated("use the common form. instead, prefer FLOCK::END or LOCK::UNLOCK<LOCK::FLOCK>")]] inline static constexpr auto UNFLOCK = flock::UNLOCK;
  //
  // Overloaded variable names (everyone API wants to say "UNLOCK")
  //
  // LOCK::UNLOCK<LOCK::FLOCK> ..... is not FCNTL nor LOCK nor LEASE
  // LOCK::UNLOCK<LOCK::LOCK> ...... is not FLOCK
  // LOCK::UNLOCK<LOCK::LEASE> ..... same
  //
  template<unlock::Call CALL> requires CALL != FLOCK inline static constexpr auto UNLOCK = unlock::call::Traits<CALL>::UNLOCK;
  //
  // LOCK::Operation<FLOCK>   LOCK::Options<FLOCK>
  // LOCK::Operation<LOCK>    n/a
  // LOCK::Operation<LEASE>   n/a
  //
  template<unlock::Call CALL> requires CALL != LOCKF using Operation = typename unlock::call::Traits<CALL>::Operation;
  template<unlock::Call CALL> requires CALL == FLOCK using Options = typename unlock::call::Traits<CALL>::Options;
  _LOCK_() = delete;
  _LOCK_(_LOCK_ const &) = delete;
  auto operator=(_LOCK_ const &) -> _LOCK_ & = delete;
};
#endiv
#divert <cpp>
// see LOCK.xcpp for the self-check
#endiv

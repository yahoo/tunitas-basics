// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import c.const_stringz
#import re.string
#import sys.posix
#import sys.posix.packaging.getgr
namespace sys::posix {
  //
  // Get a group file entry, by name
  // Is thread safe.
  //
  // Usage:
  //
  //   std::string some_name{...somehow...}
  //   auto got = getgrname(some_name);
  //   if (ok(got)) {
  //      auto ptr = value(std::move(got));
  //      ...use ptr->gr_gid...
  //      ...etc...
  //   } else {
  //      std::cerr << "could not get " << some_name << " because " << error_code(got).message() << '\n';
  //   }
  //
  inline auto getgrname(re::string<c::const_stringz> name) -> packaging::getgr::Result;
}
#endiv
#divert <ipp>
#import std.move
#import sys.entry.Buffer
#import errno
#import group
#import getgrnam_r
auto sys::posix::getgrname(re::string<c::const_stringz> name) -> packaging::getgr::Result {
  using namespace packaging::getgr;
  using std::move;
  Pointer ptr{new Buffer{}};
  ::group *result{nullptr};
  auto r = [&ptr, name, &result]() {
	     auto g = ptr.get();
	     return ::getgrnam_r((char const *) name, g->entry(), g->data(), g->size(), &result);
	   }();
  auto errnum = errno; // capture as soon as practical
  auto b = 0 == r && nullptr != result;
  if (!b) {
    ptr.reset();
  }
  return {move(b), move(errnum), move(ptr), move(result), move(r)};
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.posix.packaging.lock.interface
namespace sys::posix {
  //
  // Either
  // The original "Process-Associated" locks.
  // Or the newfangled " Open File Descript{or,ion} (OFD) locks
  //
  // [[Decision]] The flock struct(ure) is too big and too vaguely defined to offer it inn return as Value<flock> return.
  //
  // See the note on Mandatory-versus-Advisory Locking.  Mandatory locking is deprecating since Linux 4.5.
  //
  // These are the "process-associated" locks: F_GETLK, F_SETLK, F_SETLKW
  // These are the "file description" locks: F_OFD_GETLK, F_OFD_SETLK, F_OFD_SETLKW
  //
  namespace packaging::getlock {
    using namespace packaging::lock::interface;
    using namespace bundle::getlock;
    namespace function {
      inline auto getlock(File, [[out]] truct::flock &) -> Status;
      inline auto getlock(File, Process, [[out]] truct::flock &) -> Status;
      inline auto getlock(File, Filetable, [[out]] truct::flock &) -> Status;
      inline auto getlock(File, Which, [[out]] truct::flock &) -> Status;
    }
    namespace native {
      inline auto getlock(int fd, [[out]] truct::flock &) -> Status;
      inline auto getlock(int fd, Process, [[out]] truct::flock &) -> Status;
      inline auto getlock(int fd, Filetable, [[out]] truct::flock &) -> Status;
      inline auto getlock(int fd, Which, [[out]] truct::flock &) -> Status;
    }
  }
  using packaging::getlock::function::getlock;
  namespace native { using packaging::getlock::native::getlock; }
}
#endiv
#divert <ipp>
namespace sys::posix::packaging::getlock {
  auto function::getlock(File fd, truct::flock &lock) -> Status                  { return native::getlock((int)fd, F::PROCESS, lock); }
  auto function::getlock(File fd, Process which, truct::flock &lock) -> Status   { return native::getlock((int)fd, which, lock); }
  auto function::getlock(File fd, Filetable which, truct::flock &lock) -> Status { return native::getlock((int)fd, which, lock); }
  auto function::getlock(File fd, Which which, truct::flock &lock) -> Status     { return native::getlock((int)fd, which, lock); }
  //
  auto native::getlock(int fd, truct::flock &lock) -> Status              { return getlock((int)fd, F::PROCESS, lock); }
  auto native::getlock(int fd, Process, truct::flock &lock) -> Status     { return posix::native::fcntl(fd, F::GETLOCK_PROCESS, lock); }
  auto native::getlock(int fd, Filetable, truct::flock &lock) -> Status   { return posix::native::fcntl(fd, F::GETLOCK_FILE, lock); }
  auto native::getlock(int fd, Which which, truct::flock &lock) -> Status {
    if (Which::FILE == which) { return native::getlock(fd, F::FILE, lock); }
    else                      { return native::getlock(fd, F::PROCESS, lock); } // indeed, anything but FILE defaults to the original "Process-Associated" locks.
  }
}
#endiv
#divert <cpp>
#import nonstd.convertible_to
#import sys.fd.required.Unmanaged
#import sys.id.File
#import sys.posix.LOCK
namespace {
  namespace tests {
    namespace usage {
      using namespace sys::posix;
      using namespace native;
      using nonstd::convertible_to;
      using Argument = packaging::lock::interface::truct::flock;
      template<typename UNMANAGED> concept Signature2 = requires(UNMANAGED fd, Argument &returned) {
        requires sys::fd::required::Unmanaged<UNMANAGED>;
        { good(getlock(fd, returned)) } -> convertible_to<bool>;
        { value(getlock(fd, returned)) } -> convertible_to<int>;
        { getlock(fd, returned) };
      };
      template<typename UNMANAGED> concept Signature3Process = requires(UNMANAGED fd, Argument &returned) {
        requires sys::fd::required::Unmanaged<UNMANAGED>;
        { good(getlock(fd, F::PROCESS, returned)) } -> convertible_to<bool>;
        { value(getlock(fd, F::PROCESS, returned)) } -> convertible_to<int>;
        { getlock(fd, F::PROCESS, returned) };
      };
      template<typename UNMANAGED> concept Signature3File = requires(UNMANAGED fd, Argument &returned) {
        requires sys::fd::required::Unmanaged<UNMANAGED>;
        { good(getlock(fd, F::FILE, returned)) } -> convertible_to<bool>;
        { value(getlock(fd, F::FILE, returned)) } -> convertible_to<int>;
        { getlock(fd, F::FILE, returned) };
      };
      template<typename UNMANAGED> concept Signature3Which = requires(UNMANAGED fd, F::Which which, Argument &returned) {
        requires sys::fd::required::Unmanaged<UNMANAGED>;
        { good(getlock(fd, which, returned)) } -> convertible_to<bool>;
        { value(getlock(fd, which, returned)) } -> convertible_to<int>;
        { getlock(fd, which, returned) };
      };
      template<typename UNMANAGED> concept Usage = requires(UNMANAGED) {
        requires sys::fd::required::Unmanaged<UNMANAGED>;
        requires Signature2<UNMANAGED>;
        requires Signature3Process<UNMANAGED>;
        requires Signature3File<UNMANAGED>;
        requires Signature3Which<UNMANAGED>;
      };
    }
    using usage::Usage;
    static_assert(Usage<int>);
    static_assert(Usage<sys::id::File>);
  }
}
#endiv

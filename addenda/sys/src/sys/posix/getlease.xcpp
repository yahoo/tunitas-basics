// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.posix.packaging.lock.interface
namespace sys::posix {
  //
  // Get the lease (lock)
  namespace packaging::getlease {
    using namespace packaging::lock::interface;
    using namespace bundle::getlease;
    namespace function {
      inline auto getlease(File) -> Returned;
      inline auto getlease(File, [[out]] Argument &) -> Status;
    } 
    namespace native {
      inline auto getlease(int fd) -> Returned;
      inline auto getlease(int fd, [[out]] Argument &) -> Status;
    } 
  }
  using packaging::getlease::function::getlease;
  namespace native { using packaging::getlease::native::getlease; }
}
#endiv
#divert <ipp>
namespace sys::posix::packaging::getlease {
  auto function::getlease(File fd) -> Returned              { return native::getlease((int)fd); }
  auto function::getlease(File fd, Argument &arg) -> Status { return native::getlease((int)fd, arg); }
  //
  auto native::getlease(int fd) -> Returned {
    auto called = posix::native::fcntl(fd, F::GETLEASE);
    return {good(called), error_num(called), Payload{value(called)}};
  }
  auto native::getlease(int fd, Argument &arg) -> Status {
    auto called = posix::native::fcntl(fd, F::GETLEASE);
    auto const ok = good(called); 
    if (ok) {
      arg = Payload{value(called)};
    }
    return {ok, error_num(called), ok ? 0 : -1};
  }
}
#endiv
#divert <cpp>
#import tests.usage.posix_getlease.Usage
static_assert(tests::usage::posix_getlease::Usage<>);
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.posix.packaging.fcntl.interface
#import sys.posix.required.syscall.Argument
namespace sys::posix {
  namespace packaging::fcntl {
    using namespace packaging::fcntl::interface;
    namespace function {
      // WATCHOUT - the arguments are unchecked. with respect to Function (a.k.a. F::Function, F::Command).
      // use the command-specific and type-checkable variations nearby:
      //    getfd, getfl, dupfd, dupfd_cloexec, getlk, getlease, getown, getown_ex, getsig, notify
      //    (and "set"- variants)
      inline auto fcntl(File, Function) -> Result;
      inline auto fcntl(File, Function, [[in]] bool) -> Result;
      inline auto fcntl(File, Function, [[in]] int) -> Result;
      inline auto fcntl(File, Function, [[in]] o::Statuses) -> Result; // because the fcntl<Create,Status>, etc. don't exist yet.
      template<typename... NAMES> inline auto fcntl(File, Function, [[in]] o::Options<NAMES...>) -> Result requires Names<NAMES...>;
      inline auto fcntl(File, Function, [[in]] fd::Flags) -> Result;
      inline auto fcntl(File, Function, [[in]] File) -> Result;
      inline auto fcntl(File, Function, [[in]] Size) -> Result;
      inline auto fcntl(File, Function, [[in]] Lease) -> Result;
      inline auto fcntl(File, Function, [[in]] Lock) -> Result;
      inline auto fcntl(File, Function, [[in]] Notifies) -> Result;
      inline auto fcntl(File, Function, [[in]] Seals) -> Result;
      inline auto fcntl(File, Function, [[in]] id::process::Process) -> Result;
      inline auto fcntl(File, Function, [[in]] id::process::Group) -> Result;
      inline auto fcntl(File, Function, [[in]] id::process::Either) -> Result;
      inline auto fcntl(File, Function, [[in]] id::Signal) -> Result;
      inline auto fcntl(File, Function, [[out]] truct::flock &) -> Result;
      inline auto fcntl(File, Function, [[in]] truct::flock const &) -> Result;
      inline auto fcntl(File, Function, [[out]] truct::flock64 &) -> Result;
      inline auto fcntl(File, Function, [[in]] truct::flock64 const &) -> Result;
      inline auto fcntl(File, Function, [[out]] f_owner_ex &) -> Result;
      inline auto fcntl(File, Function, [[in]] f_owner_ex const &) -> Result;
      inline auto fcntl(File, Function, [[out]] int64_t &) -> Result;
      inline auto fcntl(File, Function, [[in]] int64_t const &) -> Result;
    }
    namespace native {
      inline auto fcntl(int, Function) -> Result;
      inline auto fcntl(int, Function, [[in]] bool) -> Result;
      inline auto fcntl(int, Function, [[in]] int) -> Result;
      inline auto fcntl(int, Function, [[in]] o::Statuses) -> Result; // ibidem.
      template<typename... NAMES> inline auto fcntl(int, Function, [[in]] o::Options<NAMES...>) -> Result requires Names<NAMES...>;
      inline auto fcntl(int, Function, [[in]] fd::Flags) -> Result;
      inline auto fcntl(int, Function, [[in]] File) -> Result = delete; // these must be integer file descriptors in native mode
      inline auto fcntl(int, Function, [[in]] Size) -> Result;
      inline auto fcntl(int, Function, [[in]] Lease) -> Result;
      inline auto fcntl(int, Function, [[in]] Lock) -> Result;
      inline auto fcntl(int, Function, [[in]] Notifies) -> Result;
      inline auto fcntl(int, Function, [[in]] Seals) -> Result;
      inline auto fcntl(int, Function, [[in]] id::process::Process) -> Result;
      inline auto fcntl(int, Function, [[in]] id::process::Group) -> Result;
      inline auto fcntl(int, Function, [[in]] id::process::Either) -> Result;
      inline auto fcntl(int, Function, [[in]] id::Signal) -> Result;
      inline auto fcntl(int, Function, [[out]] truct::flock &) -> Result;
      inline auto fcntl(int, Function, [[in]] truct::flock const &) -> Result;
      inline auto fcntl(int, Function, [[out]] truct::flock64 &) -> Result;
      inline auto fcntl(int, Function, [[in]] truct::flock64 const &) -> Result;
      inline auto fcntl(int, Function, [[out]] f_owner_ex &) -> Result;
      inline auto fcntl(int, Function, [[in]] f_owner_ex const &) -> Result;
      inline auto fcntl(int, Function, [[out]] int64_t &) -> Result;
      inline auto fcntl(int, Function, [[in]] int64_t const &) -> Result;
    }
    namespace detail {
      template<typename... ARGUMENTS> inline auto call(int fd, Function fu, ARGUMENTS ...args) -> result::Value<int> requires (true && ... && required::syscall::Argument<ARGUMENTS>);
    }
  }
  using packaging::fcntl::function::fcntl;
  namespace native {using packaging::fcntl::native::fcntl; }
}
#endiv
#divert <ipp>
namespace sys::posix::packaging::fcntl {
  auto function::fcntl(File fd, Function fu) -> Result                            { return native::fcntl((int)fd, fu); }
  auto function::fcntl(File fd, Function fu, bool arg) -> Result                  { return native::fcntl((int)fd, fu, arg); }
  auto function::fcntl(File fd, Function fu, int arg) -> Result                   { return native::fcntl((int)fd, fu, arg); }
  auto function::fcntl(File fd, Function fu, o::Statuses arg) -> Result           { return native::fcntl((int)fd, fu, arg); }
  template<typename... NAMES> auto function::fcntl(File fd, Function fu, o::Options<NAMES...> arg) -> Result requires Names<NAMES...> { return native::fcntl((int)fd, fu, arg); }
  auto function::fcntl(File fd, Function fu, fd::Flags arg) -> Result             { return native::fcntl((int)fd, fu, arg); }
  auto function::fcntl(File fd, Function fu, File arg) -> Result                  { return native::fcntl((int)fd, fu, (int)arg); }
  auto function::fcntl(File fd, Function fu, Size arg) -> Result                  { return native::fcntl((int)fd, fu, arg); }
  auto function::fcntl(File fd, Function fu, Lease arg) -> Result                 { return native::fcntl((int)fd, fu, arg); }
  auto function::fcntl(File fd, Function fu, Lock arg) -> Result                  { return native::fcntl((int)fd, fu, arg); }
  auto function::fcntl(File fd, Function fu, Notifies arg) -> Result              { return native::fcntl((int)fd, fu, arg); }
  auto function::fcntl(File fd, Function fu, Seals arg) -> Result                 { return native::fcntl((int)fd, fu, arg); }
  auto function::fcntl(File fd, Function fu, id::process::Process arg) -> Result  { return native::fcntl((int)fd, fu, arg); }
  auto function::fcntl(File fd, Function fu, id::process::Group arg) -> Result    { return native::fcntl((int)fd, fu, arg); }
  auto function::fcntl(File fd, Function fu, id::process::Either arg) -> Result   { return native::fcntl((int)fd, fu, arg); }
  auto function::fcntl(File fd, Function fu, id::Signal arg) -> Result            { return native::fcntl((int)fd, fu, arg); }
  auto function::fcntl(File fd, Function fu, truct::flock &arg) -> Result         { return native::fcntl((int)fd, fu, arg); }
  auto function::fcntl(File fd, Function fu, truct::flock const &arg) -> Result   { return native::fcntl((int)fd, fu, arg); }
  auto function::fcntl(File fd, Function fu, truct::flock64 &arg) -> Result       { return native::fcntl((int)fd, fu, arg); }
  auto function::fcntl(File fd, Function fu, truct::flock64 const &arg) -> Result { return native::fcntl((int)fd, fu, arg); }
  auto function::fcntl(File fd, Function fu, f_owner_ex &arg) -> Result           { return native::fcntl((int)fd, fu, arg); }
  auto function::fcntl(File fd, Function fu, f_owner_ex const &arg) -> Result     { return native::fcntl((int)fd, fu, arg); }
  auto function::fcntl(File fd, Function fu, int64_t &arg) -> Result              { return native::fcntl((int)fd, fu, arg); }
  auto function::fcntl(File fd, Function fu, int64_t const &arg) -> Result        { return native::fcntl((int)fd, fu, arg); }
}
namespace sys::posix::packaging::fcntl {
  // The vararg template does all the heavy lifting.
  auto native::fcntl(int fd, Function fu) -> Result                            { return detail::call(fd, fu); }
  auto native::fcntl(int fd, Function fu, bool arg) -> Result                  { return detail::call(fd, fu, (int)arg); }
  auto native::fcntl(int fd, Function fu, int arg) -> Result                   { return detail::call(fd, fu, arg); }
  auto native::fcntl(int fd, Function fu, o::Statuses arg) -> Result           { return detail::call(fd, fu, (int)arg); }
  template<typename... NAMES> auto native::fcntl(int fd, Function fu, o::Options<NAMES...> arg) -> Result requires Names<NAMES...> { return detail::call(fd, fu, (int)arg); }
  auto native::fcntl(int fd, Function fu, fd::Flags arg) -> Result             { return detail::call(fd, fu, (int)arg); }
  auto native::fcntl(int fd, Function fu, Size arg) -> Result                  { return detail::call(fd, fu, (int)arg); }
  auto native::fcntl(int fd, Function fu, Lease arg) -> Result                 { return detail::call(fd, fu, (int)arg); }
  auto native::fcntl(int fd, Function fu, Lock arg) -> Result                  { return detail::call(fd, fu, (int)arg); }
  auto native::fcntl(int fd, Function fu, Notifies arg) -> Result              { return detail::call(fd, fu, (unsigned)arg); }
  auto native::fcntl(int fd, Function fu, Seals arg) -> Result                 { return detail::call(fd, fu, (int)arg); }
  auto native::fcntl(int fd, Function fu, id::process::Process arg) -> Result  { return detail::call(fd, fu, (int)arg); }
  auto native::fcntl(int fd, Function fu, id::process::Group arg) -> Result    { return detail::call(fd, fu, (int)arg); }
  auto native::fcntl(int fd, Function fu, id::process::Either arg) -> Result   { return detail::call(fd, fu, disgorge(arg)); }
  auto native::fcntl(int fd, Function fu, id::Signal arg) -> Result            { return detail::call(fd, fu, (int)arg); }
  auto native::fcntl(int fd, Function fu, truct::flock &arg) -> Result         { return detail::call(fd, fu, &arg); }
  auto native::fcntl(int fd, Function fu, truct::flock const &arg) -> Result   { return detail::call(fd, fu, &arg); }
  auto native::fcntl(int fd, Function fu, truct::flock64 &arg) -> Result       { return detail::call(fd, fu, &arg); }
  auto native::fcntl(int fd, Function fu, truct::flock64 const &arg) -> Result { return detail::call(fd, fu, &arg); }
  auto native::fcntl(int fd, Function fu, f_owner_ex &arg) -> Result           { return detail::call(fd, fu, &arg); }
  auto native::fcntl(int fd, Function fu, f_owner_ex const &arg) -> Result     { return detail::call(fd, fu, &arg); }
  auto native::fcntl(int fd, Function fu, int64_t &arg) -> Result              { return detail::call(fd, fu, &arg); }
  auto native::fcntl(int fd, Function fu, int64_t const &arg) -> Result        { return detail::call(fd, fu, &arg); }
}
#import sys.posix.syscall
#import sys.posix.packaging.fcntl.Syscallable
namespace sys::posix::packaging::fcntl {
  template<typename... ARGUMENTS> auto detail::call(int fd, Function fu, ARGUMENTS ...args) -> result::Value<int> requires (true && ... && required::syscall::Argument<ARGUMENTS>) {
    return posix::idiomatic::syscall<int>(Syscall::FCNTL, fd, (int)fu, sys::posix::packaging::fcntl::Syscallable<decltype(args)>(args)...);
  }
}
#endiv
#divert <cpp>
#import tests.usage.posix_fcntl.Usage
static_assert(tests::usage::posix_fcntl::Usage<>);
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys::posix {
  //
  // It's a fake namespace-in-a-struct.
  // PREFER namespace sys::o
  // PREFER sys::o::Accesses
  // PREFER sys::o::Creates
  // PREFER sys::o::Statuses
  // PREFER sys::o::Specification
  //        etc.
  //
  // Usage:
  //
  //   using O = sys::posix::O;
  //   auto flags = O::NONE;
  //   auto flags = O::WRITE | O::APPEND | O::TMPFILE;
  //   ...etc...
  //
  struct O;
}
#endiv
#divert <hpp>
#import sys.o.Accesses
#import sys.o.Creates
#import sys.o.Statuses
#import sys.o.Flags
#import sys.o.Options
#import sys.o.options.required.Names
#import sys.o.constants
#import sys.o.required.Accesses
#import sys.o.required.Creates
#import sys.o.required.Statuses
#import sys.posix.required.rebundled
static_assert(!sys::posix::required::o::Accesses<int>, "REMOVEWHEN ... DEBUG namespace visibility");
namespace sys::posix { static_assert(!required::o::Accesses<int>, "REMOVEWHEN ... DEBUG namespace visibility"); }
struct sys::posix::O {
  static_assert(!required::o::Accesses<int>, "REMOVEWHEN ... DEBUG namespace visibility");
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  using Flags [[not_yet_deprecated("prefer sys::o::Specification")]] = o::Flags;
#pragma GCC diagnostic pop
  template<typename... NAMES> requires o::options::required::Names<NAMES...> using Options = o::Options<NAMES...>;
  using Access = o::Access;
  using Accesses = o::Accesses;
  using Create = o::Create;
  using Creates = o::Creates;
  using Status = o::Status;
  using Statuses = o::Statuses;
  template<required::o::Accesses RESULT> inline static auto as(Access) -> RESULT;
  template<required::o::Accesses RESULT> inline static auto as(Accesses) -> RESULT;
  template<required::o::Creates RESULT> inline static auto as(Create) -> RESULT;
  template<required::o::Creates RESULT> inline static auto as(Creates) -> RESULT;
  template<required::o::Statuses RESULT> inline static auto as(Status) -> RESULT;
  template<required::o::Statuses RESULT> inline static auto as(Statuses) -> RESULT;
  //
  template<required::o::Accesses RESULT> inline static auto as(Flags) -> RESULT;
  template<required::o::Creates RESULT> inline static auto as(Flags) -> RESULT;
  template<required::o::Statuses RESULT> inline static auto as(Flags) -> RESULT;
  // Accesses
  inline static constexpr auto READ      = o::READ;
  inline static constexpr auto WRITE     = o::WRITE;
  inline static constexpr auto READWRITE = o::READWRITE;
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  [[deprecated("instead, prefer O::READ")]]      inline static constexpr auto RD        = o::RD;
  [[deprecated("instead, prefer O::WRITE")]]     inline static constexpr auto WR        = o::WR;
  [[deprecated("instead, prefer O::READWRITE")]] inline static constexpr auto RDWR      = o::RDWR;
  [[deprecated("instead, prefer O::READ")]]      inline static constexpr auto RDONLY    = o::RDONLY;
  [[deprecated("instead, prefer O::WRITE")]]     inline static constexpr auto WRONLY    = o::WRONLY;
  [[deprecated("instead, prefer O::READ")]]      inline static constexpr auto READONLY  = o::READONLY;
  [[deprecated("instead, prefer O::WRITE")]]     inline static constexpr auto WRITEONLY = o::WRITEONLY;
#pragma GCC diagnostic pop
  // Creates
  inline static constexpr auto NOCREATE            = o::NOCREATE;
  inline static constexpr auto CLOSE_ON_EXEC       = o::CLOSE_ON_EXEC;
  inline static constexpr auto CREATE              = o::CREATE;
  inline static constexpr auto DIRECTORY           = o::DIRECTORY;
  inline static constexpr auto EXCLUSIVE           = o::EXCLUSIVE;
  inline static constexpr auto NO_CONTROL_TERMINAL = o::NO_CONTROL_TERMINAL;
  inline static constexpr auto NOFOLLOW            = o::NOFOLLOW;
  inline static constexpr auto TRUNCATE            = o::TRUNCATE;
  [[deprecating(not_yet)]] inline static constexpr auto CLOEXEC = o::CLOEXEC;
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  [[deprecated("instead, buy a vowel! prefer O::CREATE")]]               inline static constexpr auto CREAT  = o::CREAT;
  [[deprecated("instead, prefer O::EXCLUSIVE")]]                         inline static constexpr auto EXCL   = o::EXCL;
  [[deprecated("instead, spell it out! prefer O::NO_CONTROL_TERMINAL")]] inline static constexpr auto NOCTTY = o::NOCTTY;
  [[deprecated("instead, buy a vowel! prefer O::TRUNCATE")]]             inline static constexpr auto TRUNC  = o::TRUNC;
#pragma GCC diagnostic pop
  // Statuses
  inline static constexpr auto NONE      = o::NONE;
  inline static constexpr auto APPEND    = o::APPEND;
  inline static constexpr auto ASYNC     = o::ASYNC;
  inline static constexpr auto DIRECT    = o::DIRECT;
  inline static constexpr auto DSYNC     = o::DSYNC;
  inline static constexpr auto LARGEFILE = o::LARGEFILE;
  inline static constexpr auto NOATIME   = o::NOATIME;
  inline static constexpr auto NONBLOCK  = o::NONBLOCK;
  inline static constexpr auto PATH      = o::PATH;
  inline static constexpr auto SYNC      = o::SYNC;
  inline static constexpr auto TMPFILE   = o::TMPFILE;
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  [[deprecated("instead, prefer O::NONBLOCK")]] inline static constexpr auto NDELAY    = o::NDELAY;
#pragma GCC diagnostic pop
  O() = delete;
  O(O const &) = delete;
  auto operator=(O const &) -> O & = delete;
};
#endiv
#divert <ipp>
#import sys.o.as
namespace sys::posix {
  template<required::o::Accesses RESULT> auto O::as(Access a) -> RESULT    { return o::as<RESULT>(a); }
  template<required::o::Accesses RESULT> auto O::as(Accesses s) -> RESULT  { return o::as<RESULT>(s); }
  template<required::o::Creates RESULT> auto O::as(Create c) -> RESULT     { return o::as<RESULT>(c); }
  template<required::o::Creates RESULT> auto O::as(Creates s) -> RESULT    { return o::as<RESULT>(s); }
  template<required::o::Statuses RESULT> auto O::as(Status s) -> RESULT    { return o::as<RESULT>(s); }
  template<required::o::Statuses RESULT> auto O::as(Statuses s) -> RESULT  { return o::as<RESULT>(s); }
  //
  template<required::o::Accesses RESULT> auto O::as(Flags s) -> RESULT { return o::as<RESULT>(s); }
  template<required::o::Creates RESULT> auto O::as(Flags s) -> RESULT  { return o::as<RESULT>(s); }
  template<required::o::Statuses RESULT> auto O::as(Flags s) -> RESULT { return o::as<RESULT>(s); }
}
#endiv
#divert <cpp>
#import tests.usage.posix_O.Usage
static_assert(tests::usage::posix_O::Usage<>);
#endiv

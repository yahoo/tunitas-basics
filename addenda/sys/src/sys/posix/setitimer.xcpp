// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.posix.packaging.itimer.interface
#import std.nullptr_t
namespace sys::posix {
  namespace packaging::setitimer {
    using namespace itimer::interface;
    namespace function {
      //
      // And we are reminded from the documentation of setitimer(2) via man-pages-4.16-3.fc29.noarch
      //
      // <quote>
      //   POSIX.1 leaves the interaction between setitimer() and the three interfaces alarm(2), sleep(3), and usleep(3) unspecified.
      //   The standards are silent on the meaning of the call:
      //
      //     setitimer(which, NULL, &old_value);
      //
      //   Many systems (Solaris, the BSDs, and perhaps others) treat this as equivalent to:
      //
      //     getitimer(which, &old_value);
      //
      //   In Linux, this is treated as being equivalent to a call in which the new_value fields are zero; that is, the timer is disabled.
      //   Don't use this Linux misfeature: it is nonportable and unnecessary.
      // </quote>
      //
      // As such, the latter invalid idiomatic usage of setitimer with a nullptr first argument is not supported herein.
      //
      inline auto setitimer(Which, [[in]] itimerval const &) -> Result;
      inline auto setitimer(Which, [[in]] itimerval const &, std::nullptr_t) -> Status;
      inline auto setitimer(Which, [[in]] itimerval const &, [[out]] itimerval &) -> Status;
    }
  }
  using packaging::setitimer::function::setitimer;
}
#endiv
#divert <ipp>
#import sys.posix.syscall
namespace sys::posix::packaging::setitimer {
  auto function::setitimer(Which which, itimerval const &noob) -> Result {
    auto fill = itimerval{};
    auto sat = setitimer(which, noob, fill);
    if (auto b = good(sat); b) {
      return {true, error_t{}, fill};
    } else {
      return {false, error_num(sat), {}};
    }
  }
  auto function::setitimer(Which which, itimerval const &noobie, std::nullptr_t) -> Status   { return idiomatic::syscall<int>(Syscall::SETITIMER, (int)which, &noobie, reinterpret_cast<itimerval const *>(0)); }
  auto function::setitimer(Which which, itimerval const &noobie, itimerval &oldie) -> Status { return idiomatic::syscall<int>(Syscall::SETITIMER, (int)which, &noobie, &oldie); }
}
#endiv

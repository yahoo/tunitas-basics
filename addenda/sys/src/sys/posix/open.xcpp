// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.posix.packaging.open.interface
namespace sys::posix {
  //
  // Per open(2), you must use the 3-argument variant when the O::CREATE or O::TMPFILE flags are present.
  // We do not provide runtime detection of such here.
  //
  // When inlining, the compiler and headers can detect this and provide an error message
  // To wit:
  //   In function 'int open(const char*, int, ...)',
  //       ...call chain...
  //       /usr/include/bits/fcntl2.h:50:24: error: call to '__open_missing_mode' declared with attribute error: open with O_CREAT or O_TMPFILE in second argument needs 3 arguments
  //       __open_missing_mode ();
  //
  // But, in general "you just have to know" and there is no guarantee of detection.
  // 
  namespace packaging::open {
    using namespace packaging::open::interface;
    namespace function {
      using Result = result::Single<id::File>;
      inline auto open(Pathname, Opening) -> Result;
      inline auto open(Pathname, Opening, Permissions) -> Result;
    }
    namespace native {
      using Result = result::Single<int>;
      inline auto open(Pathname, Opening) -> Result;
      inline auto open(Pathname, Opening, Permissions) -> Result;
    }
  }
  using packaging::open::function::open;
  namespace native { using packaging::open::native::open; }
}
#endiv
#divert <ipp>
#import sys.posix.syscall
namespace sys::posix::packaging::open {
  auto function::open(Pathname pathname, Opening flags) -> Result                    { return idiomatic::syscall<id::File>(Syscall::OPEN, (char const *)pathname, (int) flags); }
  auto function::open(Pathname pathname, Opening flags, Permissions perms) -> Result { return idiomatic::syscall<id::File>(Syscall::OPEN, (char const *)pathname, (int)flags, (mode_t)perms); }
  auto native::open(Pathname pathname, Opening flags) -> Result                      { return idiomatic::syscall<int>(Syscall::OPEN, (char const *)pathname, (int) flags); }
  auto native::open(Pathname pathname, Opening flags, Permissions perms) -> Result   { return idiomatic::syscall<int>(Syscall::OPEN, (char const *)pathname, (int)flags, (mode_t)perms); }
}
#endiv

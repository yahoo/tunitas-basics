// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys::posix {
  //
  // It's a fake namespace-in-a-struct.
  // PREFER namespace sys::s
  // PREFER sys::s::Mode
  // PREFER sys::s::Flags
  //        etc.
  //
  // S is for 'stat'
  // I is for 'inode'
  //
  // Usage:
  //
  //   using S = sys::posix::S;
  //   auto mode = S::NONE;
  //   auto mode = S::IWUSR | S::IWGRP | S::IWOTH
  //   auto mode = S::Mode{0777};
  //   auto mode = S::user(S::Bits{07}) | group(S::Bits(05}) | other(S::Bits{04})
  //   ...etc...
  //
  struct S;
}
#endiv
#divert <hpp>
#import sys.s.Bits
#import sys.s.Flags
#import sys.s.Mode
#import sys.s.constants
#import sys.s.required.Bits
#import sys.s.required.Flags
#import sys.posix.required.rebundled
struct sys::posix::S {
  using Bit = s::Bit;
  using Bits = s::Bits;
  using Flag = s::Flag;
  using Flags = s::Flags;
  using Mode = s::Mode;
  template<required::s::Bits RESULT> inline static auto as(Bit) -> RESULT;
  template<required::s::Bits RESULT> inline static auto as(Bits) -> RESULT;
  template<required::s::Flags RESULT> inline static auto as(Flag) -> RESULT;
  template<required::s::Flags RESULT> inline static auto as(Flags) -> RESULT;
  inline static constexpr auto special(Bits b) -> Flags;
  inline static constexpr auto specialof(Flags f) -> Bits;
  inline static constexpr auto user(Bits b) -> Flags;
  inline static constexpr auto userof(Flags f) -> Bits;
  inline static constexpr auto group(Bits b) -> Flags;
  inline static constexpr auto groupof(Flags f) -> Bits;
  inline static constexpr auto other(Bits b) -> Flags;
  inline static constexpr auto otherof(Flags f) -> Bits;
  // Bits  of RWX
  inline static constexpr auto N = s::N;
  inline static constexpr auto R = s::R;
  inline static constexpr auto W = s::W;
  inline static constexpr auto X = s::X;
  inline static constexpr auto RW = s::RW;
  inline static constexpr auto RX = s::RX;
  inline static constexpr auto WX = s::WX;
  inline static constexpr auto RWX = s::RWX;
  // Flags of sstrwxrwxrwx (a.k.a. rwsrwsrwt)
  // OLDSCHOOL
  inline static constexpr auto ISUID = s::ISUID;
  inline static constexpr auto ISGID = s::ISGID;
  inline static constexpr auto ISVTX = s::ISVTX;
  inline static constexpr auto IRUSR = s::IRUSR;
  inline static constexpr auto IWUSR = s::IWUSR;
  inline static constexpr auto IXUSR = s::IXUSR;
  inline static constexpr auto IRGRP = s::IRGRP;
  inline static constexpr auto IWGRP = s::IWGRP;
  inline static constexpr auto IXGRP = s::IXGRP;
  inline static constexpr auto IROTH = s::IROTH;
  inline static constexpr auto IWOTH = s::IWOTH;
  inline static constexpr auto IXOTH = s::IXOTH;
  // New School
  inline static constexpr auto NONE  = s::NONE;
  inline static constexpr auto SETUID = s::SETUID;
  inline static constexpr auto SETGID = s::SETGID;
  inline static constexpr auto STICKY = s::STICKY;
  inline static constexpr auto RUSER  = s::RUSER;
  inline static constexpr auto WUSER  = s::WUSER;
  inline static constexpr auto XUSER  = s::XUSER;
  inline static constexpr auto RGROUP = s::RGROUP;
  inline static constexpr auto WGROUP = s::WGROUP;
  inline static constexpr auto XGROUP = s::XGROUP;
  inline static constexpr auto ROTHER = s::ROTHER;
  inline static constexpr auto WOTHER = s::WOTHER;
  inline static constexpr auto XOTHER = s::XOTHER;
  S() = delete;
  S(S const &) = delete;
  auto operator=(S const &) -> S & = delete;
};
#endiv
#divert <ipp>
#import sys.s.as
namespace sys::posix {
  template<required::s::Bits RESULT> auto S::as(Bit b) -> RESULT    { return s::as<RESULT>(b); }
  template<required::s::Bits RESULT> auto S::as(Bits s) -> RESULT   { return s::as<RESULT>(s); }
  template<required::s::Flags RESULT> auto S::as(Flag f) -> RESULT  { return s::as<RESULT>(f); }
  template<required::s::Flags RESULT> auto S::as(Flags s) -> RESULT { return s::as<RESULT>(s); }
  //
  constexpr auto S::special(Bits b) -> Flags   { return s::special(b); }
  constexpr auto S::specialof(Flags f) -> Bits { return s::specialof(f); }
  constexpr auto S::user(Bits b) -> Flags      { return s::user(b); }
  constexpr auto S::userof(Flags f) -> Bits    { return s::userof(f); }
  constexpr auto S::group(Bits b) -> Flags     { return s::group(b); }
  constexpr auto S::groupof(Flags f) -> Bits   { return s::groupof(f); }
  constexpr auto S::other(Bits b) -> Flags     { return s::other(b); }
  constexpr auto S::otherof(Flags f) -> Bits   { return s::otherof(f); }
}
#endiv
#divert <cpp>
#import tests.usage.posix_S.Usage
static_assert(tests::usage::posix_S::Usage<>);
#endiv

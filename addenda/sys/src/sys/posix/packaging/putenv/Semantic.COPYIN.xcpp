// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.posix.packaging.putenv.Semantic.declaration
namespace sys::posix::packaging::putenv {
  template<> struct Semantic<Policy::COPYIN>;
}
#endiv
#divert <hpp>
#import nonstd.required.Stringview
#import sys.posix.packaging.required
namespace sys::posix::packaging::putenv {
  template<> struct Semantic<Policy::COPYIN> {
    //
    // prepares the buffer and calls ::putenv
    // with the assumption that putenv makes its own copy of the string.
    //
    // The assumption & claim here is that putenv makes its own copy of the data
    // If that is not true in "your" version of putenv, then don't change *this* function, instead use Semantic<MOVEIN>
    //
    // Natural language parsing the putenv(3) man page is unclear on what happens.
    // It is likely that this implementation is always wrong.
    //
    // To wit, from putenv (3)
    //
    //     The putenv() function is not required to be reentrant, and the one in libc4, libc5 and glibc 2.0 is not,
    //     but the glibc 2.1 version is.
    //     
    //     Description for libc4, libc5, glibc: If the argument string is of the form name, and does not contain an
    //     '=' character, then the variable name is removed from the environment. If putenv() has to allocate a
    //     new array environ, and the previous array was also allocated by putenv(), then it will be freed. In no
    //     case will the old storage associated to the environment variable itself be freed.
    //     
    //     The libc4 and libc5 and glibc 2.1.2 versions conform to SUSv2: the pointer string given to putenv() is
    //     used. In particular, this string becomes part of the environment; changing it later will change the
    //     environment. (Thus, it is an error is to call putenv() with an automatic variable as the argument, then
    //     return from the calling function while string is still part of the environment.) However, glibc
    //     2.0-2.1.1 differs: a copy of the string is used. On the one hand this causes a memory leak, and on the
    //     other hand it violates SUSv2. This has been fixed in glibc 2.1.2.
    //     
    //     The 4.4BSD version, like glibc 2.0, uses a copy.
    //     
    //     SUSv2 removes the const from the prototype, and so does glibc 2.1.3
    //
    template<required::Stringview STRINGVIEW> auto operator()(STRINGVIEW const &name_eq_value) -> int;
  };
}
#endiv
#divert <ipp>
#import putenv
#import sys.posix.packaging.putenv.copy
#import std.vector
namespace sys::posix::packaging::putenv {
  template<required::Stringview STRINGVIEW> auto Semantic<Policy::COPYIN>::operator()(STRINGVIEW const &name_eq_value) -> int {
    // putenv takes its own copy, yet we hve a 'char const *'
    //
    // we have to copy to an intermediate vector<char> to get nonconst access to the internal buffer
    //     'char *vector<char>::data()'
    // we could not supply merely a string because there is no non-const access to the internal buffer of the string
    //     'char const *string::data() const'
    //
    std::vector<char> buf;
    putenv::copy(name_eq_value, buf);
    return ::putenv(buf.data());
  }
}
#endiv

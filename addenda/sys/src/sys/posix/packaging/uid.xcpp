// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.id.User
#import uid_t
#import std.tuple
#import sys.call.Result
#import sys.call.result.Value
namespace sys::posix::packaging::uid {
  using id::User;
  using call::Result;
  namespace function {
    using Triple = std::tuple<User, User, User>;
    using Result = call::result::Value<Triple>;
  }
  namespace native {
    using Triple = std::tuple<uid_t, uid_t, uid_t>;
    using Result = call::result::Value<Triple>;
  }
}
#endiv
#divert <hpp>
#import std.get
namespace sys::posix::packaging::uid {
  //
  // Get the (real) user id (UID)
  // Yup, this can't fail.
  //
  // getresuid(2) and setresuid(2)
  // <quote>These calls are nonstandard; they also appear on HP-UX and some of the BSDs.</quote>
  //
  // Specification: see getuid(2)
  //
  //   #include <sys/types.h>
  //   #include <unistd.h>
  //   uid_t getuid();
  //
  // Usage:  really?
  //
  namespace function {
    inline auto getuid() -> User;
    inline auto geteuid() -> User;
    inline auto getresuid() -> Result;
    inline auto setuid(User) -> uid::Result;
    inline auto seteuid(User) -> uid::Result;
    inline auto setreuid(User r, User e) -> uid::Result;
    inline auto setresuid(User r, User e, User s) -> uid::Result;
  }
  namespace native {
    inline auto getuid() -> User;
    inline auto geteuid() -> User;
    inline auto getresuid() -> Result;
    inline auto setuid(uid_t) -> uid::Result;
    inline auto seteuid(uid_t) -> uid::Result;
    inline auto setreuid(uid_t r, uid_t e) -> uid::Result;
    inline auto setresuid(Triple) -> uid::Result;
    inline auto setresuid(uid_t r, uid_t e, uid_t s) -> uid::Result;
    using std::get;
    template<unsigned N> inline auto up(Triple) -> User;
  }
}
#endiv
#divert <ipp>
#import errno
#import sys.posix.syscall
#import std.get
namespace sys::posix::packaging::uid {
  auto function::getuid() -> User  { return User(direct::syscall(Syscall::GETUID)); }
  auto function::geteuid() -> User { return User(direct::syscall(Syscall::GETEUID)); }
  auto function::getresuid() -> Result {
    auto called = native::getresuid();
    if (fail(called)) {
      return Result{false, error_num(called), Triple{}};
    } else {
      auto const &triple = value(called);
      using native::up;
      return Result{true, error_t{}, Triple{up<0>(triple), up<1>(triple), up<2>(triple)}};
    }
  }
  auto native::getuid() -> User  { return User(direct::syscall(Syscall::GETUID)); }
  auto native::geteuid() -> User { return User(direct::syscall(Syscall::GETEUID)); }
  auto native::getresuid() -> Result {
    uid_t real{}, effective{}, saved{};
    int called = direct::syscall(Syscall::GETRESUID, &real, &effective, &saved);
    auto errnum = errno; // capture as soon as practical
    auto ok = 0 == called;
    return Result{ok, errnum, Triple{real, effective, saved}};
  }
  template<unsigned N> auto native::up(Triple t) -> User { return User{std::get<N>(t)}; }
}
namespace sys::posix::packaging::uid {
  auto function::setuid(User uid) -> uid::Result  { return native::setuid((uid_t) uid); }
  auto function::seteuid(User uid) -> uid::Result { return native::seteuid((uid_t) uid); }
  auto function::setreuid(User real, User effective) -> uid::Result { return native::setreuid((uid_t) real, (uid_t) effective); }
  auto function::setresuid(User real, User effective, User saved) -> uid::Result {
    return native::setresuid((uid_t)real, (uid_t)effective, (uid_t)saved);
  }
  //
  // From setresuid(2), package man-pages-4.16-3.fc29.noarch
  //
  // <quote>
  //   The NPTL threading implementation does some work to ensure that any change to user or group credentials
  //   (e.g., calls to setuid(2), setresuid(2)) is carried through to all of the POSIX threads in a process.
  //   See nptl(7) for further details.
  // </quote>
  //
  //
  // Therefore ... we MUST call the library function, never the syscall.
  //
  auto native::setuid(uid_t uid) -> uid::Result  {
    int called = ::setuid(uid);
    auto errnum = errno; // capture as soon as practical
    auto ok = 0 == called;
    return uid::Result{ok, errnum, called};
  }
  auto native::seteuid(uid_t uid) -> uid::Result {
    int called  = ::seteuid(uid);
    auto errnum = errno; // capture as soon as practical
    auto ok = 0 == called;
    return uid::Result{ok, errnum, called};
  }
  auto native::setreuid(uid_t real, uid_t effective) -> uid::Result {
    int called  = ::setreuid(real, effective);
    auto errnum = errno; // capture as soon as practical
    auto ok = 0 == called;
    return uid::Result{ok, errnum, called};
  }
  auto native::setresuid(Triple t) -> uid::Result { return setresuid(get<0>(t), get<0>(t), get<0>(t));}
  auto native::setresuid(uid_t real, uid_t effective, uid_t saved) -> uid::Result {
    int called = ::setresuid(real, effective, saved);
    auto errnum = errno; // capture as soon as practical
    auto ok = 0 == called;
    return uid::Result{ok, errnum, called};
  }
}
#endiv

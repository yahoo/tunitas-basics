// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.posix.packaging.from_tm.interface
#import sys.posix.packaging.required.from_tm.Result
#import sys.posix.packaging.required.from_tm.Thunk
namespace sys::posix::packaging::from_tm {
  //
  // Usage:
  //
  //   auto const &in = Disaggregated{...somehow...};
  //   return perform(::timelocal, in);
  //   return perform(::timegm, in);
  //
  using namespace packaging::from_tm::interface;
  namespace required = packaging::required;
  template<required::from_tm::Result RESULT, required::from_tm::Thunk THUNK> auto perform(THUNK, Disaggregated const &) -> Result<RESULT>;
}
#endiv
#divert <ipp>
#import sys.time.as
#import errno
namespace sys::posix::packaging::from_tm {
  template<required::from_tm::Result RESULT, required::from_tm::Thunk THUNK> auto perform(THUNK thunk, Disaggregated const &in) -> Result<RESULT> {
    auto out = thunk(&in);
    auto e = errno; // capture this quickly.
    auto b = -1 != out;
    auto payload = [b, out]() { return b ? time::as<RESULT>(out) : RESULT{}; };
    return {b, e, payload()};
  }
}
#endiv

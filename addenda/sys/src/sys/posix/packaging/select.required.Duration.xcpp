// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.posix.packaging.required
#import nonstd.required.Ratio
#import std.intmax_t
#import std.is_same
#import std.ratio
#import sys.time.t
#import sys.time.val
#import sys.time.spec
#import sys.time.duration
#import std.chrono.seconds
namespace sys::posix::packaging::select::required {
  //
  // All the possible durations.
  // All of them.   And there are a lot of ways of specifying time.
  //
  // Usage:
  //
  //   template<required::Duration DURATION> struct Something;
  //   template<required::duration::Oldtime OLDTIME> struct Something;
  //   template<required::duration::Ratio RATIO> struct Something<std::chrono::duration<int64_t, RATIO>>;
  //
  namespace duration {
    using namespace std;
    template<typename DURATION> concept Select = is_same_v<DURATION, time::val>;
    template<typename DURATION> concept PSelect = is_same_v<DURATION, time::spec>;
    template<typename DURATION> concept Syscall = Select<DURATION> || PSelect<DURATION>;
    // AVOID using Oldtime except for system calls (which reqwuire it)
    // instead, PREFER using sys::time::duration<R,P>, a.k.a. std::chrono::duration<REP, PERIOD>
    template<typename DURATION> concept Oldtime = (is_same_v<DURATION, time::t> || // ..... seconds
                                                   // ... time::b (struct timeb) .......... milliseconds
                                                   is_same_v<DURATION, time::val> || // ... microseconds
                                                   is_same_v<DURATION, time::spec>); // ... nanoseconds
    using nonstd::required::Ratio;
    template<typename DURATION> concept Duration = Oldtime<DURATION> || requires(DURATION) {
    typename DURATION::period;
      requires Ratio<typename DURATION::period>;
      requires is_same_v<DURATION, chrono::duration<chrono::seconds::rep, typename DURATION::period>>;
    };
  }
  using duration::Duration;
}
#endiv
#divert <cpp>
#import sys.time.durations // gets them all?
#import sys.time.spec
#import sys.time.t
#import sys.time.val
namespace {
  namespace tests {
    using namespace sys::posix::packaging::select::required;
    static_assert(Duration<sys::time::t>);
    // NO SUCH .. Duration<sys::time::b>;
    static_assert(Duration<sys::time::val>);
    static_assert(Duration<sys::time::spec>);
    static_assert(Duration<sys::time::durations::nanoseconds>);
    static_assert(Duration<sys::time::durations::microseconds>);
    static_assert(Duration<sys::time::durations::milliseconds>);
    static_assert(Duration<sys::time::durations::seconds>);
    static_assert(Duration<sys::time::durations::minutes>);
    static_assert(Duration<sys::time::durations::hours>);
  }
}
#endiv

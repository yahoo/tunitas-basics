// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.call.Result
#import sys.call.result.Value
#import sys.id.File
#import sys.posix.sockaddr
#import sys.posix.packaging.required // cascade the namespaces
#import sys.posix.required.Sockaddr
#import sys.required.Descriptor
#import sys.sock.Options
namespace sys::posix::packaging::sock::interface {
  //
  // Scope:
  //
  //   accept(2), accept4(2)
  //   bind(2)
  //   connect(2)
  //   getpeername(2)
  //
  // Usage:
  //
  //   the usual
  //
  // NOT ---->using namespace sock::core; <--- NOT (not enough s haring to make it worth while)
  using id::File;
  using sys::sock::Options;
  using Sockaddr = sys::posix::sockaddr;
  using Socklen = ::socklen_t;
  namespace result {
    namespace status {
      // Status only, the int indicates success by the usual method; it is nevver a file descriptor.
      using Status = call::Result;
      template<required::Sockaddr SOCKADDR> using Sockaddr = call::result::Value<int, SOCKADDR, Socklen>;
    }
    namespace accepted {
      // As accepted, a live socket descriptor.
      template<required::Descriptor FD> using Socket = call::result::Value<FD>;
      template<required::Descriptor FD, required::Sockaddr SOCKADDR> using Sockaddr = call::result::Value<FD, SOCKADDR, Socklen>;
    }
  }
}
#endiv
#divert <hpp>
#import sys.id.File
#import sys.call.result.Value
namespace sys::posix::packaging::sock::interface {
  namespace packaging::promote {
    using id::File;
    using call::result::Value;
    namespace function {
      template<typename... TYPES> inline auto promote(call::result::Value<int, TYPES...>) -> call::result::Value<File, TYPES...>;
    }
  }
  using packaging::promote::function::promote;
}
#endiv
#divert <ipp>
#import std.index_sequence
#import std.index_sequence_for
namespace sys::posix::packaging::sock::interface::packaging::promote {
  using call::result::get;
  template<typename... TYPES> auto function::promote(Value<int, TYPES...> in) -> Value<File, TYPES...> {
    auto boost = []<unsigned... INDEX>(auto lowrank, std::index_sequence<INDEX...>) -> Value<File, TYPES...> {
                    auto boosted = File{value(lowrank)};
                    return {good(lowrank), error_num(lowrank), boosted, get<INDEX>(lowrank)...};
                  };
    return boost(in, std::index_sequence_for<TYPES...>{});
  }
}
#endiv

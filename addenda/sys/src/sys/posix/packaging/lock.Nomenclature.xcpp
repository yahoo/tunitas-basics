// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.lockf.Operation
#import sys.flock.Specification
#import sys.lock.Operation
namespace sys::posix::packaging::lock {
  //
  //  Usage:
  //
  //   #import sys.posix.packaging.lock.Nomenclature
  //
  //   As if ...
  //   namespace sys::posix::packaging::lock {
  //      Nomeclature<FCNTL>
  //      Nomeclature<FLOCK>
  //      Nomeclature<LOCKF>
  //   }
  //
  //  Also the bundle
  //   #import sys.posix.packaging.lock.Nomenclature
  //   using namespace packaging::lock::nomenclature::bundle;
  //
  namespace nomenclature {
    //
    // These are here merely to systematize the three great locking regimes.
    // They are not API interface data structures  in their own right; i.e. they are type aliases and indices into type aliaes.
    // They all have *almost* same nomenclature.
    //
    enum class Nomen {
      LEASE, // basically the same as LOCK, but separated for clarity
      LOCK,
      FCNTL [[deprecated("instead, prefer Nomen::LOCK")]] = LOCK,
      FLOCK,
      LOCKF
    };
    template<Nomen> struct Nomenclature;
    template<> struct Nomenclature<Nomen::LEASE> { using Type = sys::lock::Operation; };
    template<> struct Nomenclature<Nomen::LOCK>  { using Type = sys::lock::Operation; };
    template<> struct Nomenclature<Nomen::FLOCK> { using Type = sys::flock::Specification; }; // [[blik]] blending Operation and Options
    template<> struct Nomenclature<Nomen::LOCKF> { using Type = sys::lockf::Operation; };
  }
  template<nomenclature::Nomen NOMEN> using Nomenclature = typename nomenclature::Nomenclature<NOMEN>::Type;
  namespace nomenclature::bundle {
    using lock::Nomenclature; // NOT nomenclature::Nomenclature
#if 202003L <= __cplusplus
    // C++20? http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1099r5.html
    using enum class nomenclature::Nomen;
#else
    inline constexpr auto LEASE = Nomen::LEASE;
    inline constexpr auto LOCK  = Nomen::LOCK;
    inline constexpr auto FLOCK = Nomen::FLOCK;
    inline constexpr auto LOCKF = Nomen::LOCKF;
#endif
  }
  using namespace nomenclature::bundle;
}
#endiv

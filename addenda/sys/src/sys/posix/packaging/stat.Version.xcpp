// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.posix.packaging.stat.Call
#import sys.posix.packaging.stat.Buffer
namespace sys::posix::packaging::stat {
  //
  // How to call the version-controlled system calls.
  // In the stat family.
  //
  struct Prototype;
  template<Call> struct Version;
  template<> struct Version<Call::FSTATAT>;
  template<> struct Version<Call::FSTAT>;
  template<> struct Version<Call::STAT>;
  template<> struct Version<Call::LSTAT>;
}
#endiv
#divert <hpp>
#import stat
#include <sys/stat.h> // for the dubious _STAT_VER and (redundantly, struct ::stat).
namespace sys::posix::packaging {
  struct stat::Prototype {
    inline static const auto VERSION =  // commentariat below in <ipp>
#ifdef _STAT_VER
      _STAT_VER // If defined keep that value.  In <sys/stat.h> it will default to 0 if otherwise undefined.
#else
      -1 // otherwise use some other value (which will be ignored in the syscall(...) delegations herein.
#endif
      ;
    using Buffer = stat::Buffer;
  };
  namespace stat {
    template<> struct Version<Call::FSTATAT> : public Prototype { inline static auto call(int fd, char const *filename, Buffer *, int flags) -> int; };
    template<> struct Version<Call::FSTAT> : public Prototype   { inline static auto call(int fd, Buffer *) -> int; };
    template<> struct Version<Call::STAT> : public Prototype    { inline static auto call(char const *filename, Buffer *) -> int; };
    template<> struct Version<Call::LSTAT> : public Prototype   { inline static auto call(char const *filename, Buffer *) -> int; };
  }
}
#endiv
#divert <ipp>
#ifdef _STAT_VER
#include <sys/stat.h> // for the libc-version-thunk inlines __fxstatat(...), __fxstat(...) etc.
namespace sys::posix::packaging::stat {
  //
  // From /usr/include/sys/stat.h
  // Fedora 29, specifically glibc-headers-2.28-9.fc29.x86_
  // Um, wow.
  //
  // To allow the `struct stat' structure and the file type `mode_t'
  // bits to vary without changing shared library major version number,
  // the `stat' family of functions and `mknod' are in fact inline
  // wrappers around calls to `xstat', `fxstat', `lxstat', and `xmknod',
  // which all take a leading version-number argument designating the
  // data structure and bits used.  <bits/stat.h> defines _STAT_VER with
  // the version number corresponding to `struct stat' as defined in
  // that file; and _MKNOD_VER with the version number corresponding to
  // the S_IF* macros defined therein.  It is arranged that when not
  // inlined these function are always statically linked; that way a
  // dynamically-linked executable always encodes the version number
  // corresponding to the data structures it uses, so the `x' functions
  // in the shared library can adapt without needing to recompile all callers.
  //
  // From <sys/stat.h>
  auto Version<Call::FSTATAT>::call(int fd, char const *filename, Buffer *buf, int flags) -> int { return __fxstatat(VERSION, fd, filename, buf, flags); }
  auto Version<Call::FSTAT>::call(int fd, Buffer *buf) -> int                                    { return __fxstat(VERSION, fd, buf); }
  auto Version<Call::STAT>::call(char const *filename, Buffer *buf) -> int                       { return __xstat(VERSION, filename, buf); }
  auto Version<Call::LSTAT>::call(char const *filename, Buffer *buf) -> int                      { return __lxstat(VERSION, filename, buf); }
}
#else
#include <sys/syscall.h> // ... chooses SYS_fstatat -> fstatat
#include <sys/stat.h> // ...... chooses fstatat
namespace sys::posix::packaging::stat {
  // [[FIXTHIS]] define NUMBER for when not on linux (where?) and not using the _STAT_VER and libc thunk inlining system.
  auto Version<Call::FSTATAT>::call(int fd, char const *filename, Buffer *buf, int flags) -> int { return ::syscall(NUMBER, fd, filename, buf, flags); }
  auto Version<Call::FSTAT>::call(int fd, Buffer *buf) -> int                                    { return ::syscall(NUMBER, fd, buf); }
  auto Version<Call::STAT>::call(char const *filename, Buffer *buf) -> int                       { return ::syscall(NUMBER, filename, buf); }
  auto Version<Call::LSTAT>::call(char const *filename, Buffer *buf) -> int                      { return ::syscall(NUMBER, filename, buf); }
}
#endif
#endiv

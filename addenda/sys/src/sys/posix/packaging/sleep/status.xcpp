// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.posix.packaging.sleep.interface
namespace sys::posix::packaging::sleep {
  //
  // nanosleep(2), returning only the status, never the remaining
  // 
  // concept:
  //
  //   Always call nanosleep(2)
  //   Always return a status (throw away the remaining)
  //
  //   Called from sleep(3) and usleep(3) and elsewhere in cases where th remaining is irrelevant.
  //
  //   No further truncation is guaranteed herein.
  //   The truncation occurring when the precision is finer than nanoseconds is unspecified herein (femtoseconds?, attoseconds?  come on!).
  //
  //   The interval SHOULD already be tuned to the appropriate (semantic) presision as follows:
  //     sleep(3) ....... seconds
  //     usleep(3) ...... microseconds
  //     nanosleep(2) ... nanoseconds
  //
  // Design:
  //
  //   discard the remaining, always.
  //
  template<required::Integer REP, required::Ratio RATIO> inline auto status(duration::Duration<REP, RATIO> const &) -> result::Status;
  inline auto status(time::Val const &) -> result::Status;
  inline auto status(time::Spec const &) -> result::Status;
}
#endiv
#divert <ipp>
#import sys.posix.syscall
#import sys.posix.packaging.sleep.coerce
namespace sys::posix::packaging {
  template<required::Integer REP, required::Ratio RATIO> auto sleep::status(duration::Duration<REP, RATIO> const &interval) -> result::Status { return status(coerce<time::Spec>(interval)); }
  auto sleep::status(time::Val const &interval) -> result::Status                                                                             { return status(coerce<time::Spec>(interval)); }
  auto sleep::status(time::Spec const &interval) -> result::Status                                                                            { return idiomatic::syscall<int>(Syscall::NANOSLEEP, &interval, reinterpret_cast<time::Spec const *>(0)); }
}
#endiv

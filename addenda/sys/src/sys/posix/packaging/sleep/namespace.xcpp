// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.time.Duration
#import sys.time.Old
#import sys.time.Spec
#import sys.time.Val
#import sys.time.durations // seconds, microseconds, nanoseconds
#import sys.posix.packaging.required
#import nonstd.required.Integer
#import nonstd.required.Ratio
#import nonstd.same_as
#import std.is_class
namespace sys::posix::packaging::sleep {
#if 0
  namespace time {
    using Duration = sys::time::duration; // this is the system clock precision which is unspecified.
    static_assert(std::is_class_v<Duration>);     // herein Duration is instantiated as the system clock duration
    using Old = sys::time::Old;
    using Val = sys::time::Val;
    using Spec = sys::time::Spec;
  }
  using nonstd::same_as;
  namespace required {
    using namespace packaging::required; // cascade namespace required
    template<typename TYPE> concept POSIX_Time_Structure = same_as<TYPE, time::Old> || same_as<TYPE, time::Val> || same_as<TYPE, time::Spec>;
    template<typename DURATION> concept Duration = requires(DURATION) {
    typename DURATION::rep;
      typename DURATION::period;
      requires required::Integer<typename DURATION::rep>;
      requires required::Ratio<typename DURATION::period>;
    };
    template<typename COERCABLE> concept Coercable = POSIX_Time_Structure<COERCABLE> || Duration<COERCABLE>;
  }
  namespace duration {
    template<required::Integer REP, required::Ratio RATIO> using Duration = sys::time::durations::base<REP, RATIO>;
    static_assert(std::is_class_v<Duration<int, std::ratio<1>>>);     // herein Duration is the template, still has flexibility for Duration<REP,RATIO>
    using Seconds = sys::time::durations::seconds;
    using Milliseconds = sys::time::durations::milliseconds;
    using Microseconds = sys::time::durations::microseconds;
    using Nanoseconds = sys::time::durations::nanoseconds;
  }
#endif
}
#endiv
#divert <hpp>
#import sys.time.as // [[deprecating]]
#import sys.time.cast // [[preferring]]
#import sys.time.duration_cast
#if 0
namespace sys::posix::packaging::sleep {
  namespace time {
    using sys::time::as;
    using sys::time::cast;
    using sys::time::duration_cast;
  }
}
#endif
#endiv

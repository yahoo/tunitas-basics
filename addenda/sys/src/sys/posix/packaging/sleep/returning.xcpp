// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.posix.packaging.sleep.duration // ... duration::Duration
#import sys.posix.packaging.sleep.time // ....... time::Val, Spec, etc.
#import sys.posix.packaging.sleep.interface
namespace sys::posix::packaging::sleep {
  //
  // nanosleep(2), returning the remaining and other provenances of status
  //
  // Concept:
  //
  //   Always call nanosleep(2)
  //   Variously return a result DURATION, capturing the remaining.
  //  
  //   Called from sleep(3) and usleep(3) and elsewhere in cases where th remaining is returned.
  //
  //   Same as with status(...) nearby, see the documentation therein.
  //   No further truncation is guaranteed herein.
  //   The interval SHOULD already be tuned to nanoseconds precision.
  //
  // Design:
  //
  //   Returns the type that it was given.
  //
  template<required::Integer REP, required::Ratio RATIO> inline auto returning(duration::Duration<REP, RATIO> const &) -> result::Returned<duration::Duration<REP, RATIO>>;
  inline auto returning(time::Val const &) -> result::Returned<time::Val>;
  inline auto returning(time::Spec const &) -> result::Returned<time::Spec>;
}
#endiv
#divert <ipp>
#import sys.posix.syscall
#import sys.posix.packaging.sleep.coerce
namespace sys::posix::packaging {
  template<required::Integer REP, required::Ratio RATIO> auto sleep::returning(duration::Duration<REP, RATIO> const &interval) -> result::Returned<duration::Duration<REP, RATIO>> { return coerce<duration::Duration<REP, RATIO>>(returning(coerce<time::Spec>(interval))); }
  auto sleep::returning(time::Val const &interval) -> result::Returned<time::Val>                                                                                                  { return coerce<time::Val>(returning(coerce<time::Spec>(interval))); }
  auto sleep::returning(time::Spec const &interval) -> result::Returned<time::Spec> {
    auto remaining = time::Spec{};
    auto slept = idiomatic::syscall<int>(Syscall::NANOSLEEP, &interval, &remaining);
    // ALWAYS return the remaininng, even on error (which could merely be a signal interruption, which is expected and "not an error")
    if (good(slept)) {
      return {true, error_t{}, remaining};
    } else {
      return {false, error_num(slept), remaining};
    }
  }
}
#endiv

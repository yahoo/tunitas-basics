// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.posix.packaging.getenv.interface
#import c.basic_stringz
#import c.basic_stringn
#import std.function
#forward sys.posix.getenv // just the types, not the function declaration
namespace sys::posix::packaging::getenv {
  //
  // Whereas getenv(3) and secure_getenv(...) are basically the same code
  // The packaging::getenv(...) abstracts the glue around them both.
  //
  // The Name is a "string faced" type appropriate for c::str(...) which produces a '\0'-terminated char const *.
  // The function is either ::getenv or ::secure_getenv.
  // The RESULT conforms to the appropriate '\0'-terminated data type produced by the C library.
  //
  using namespace interface;
  //
  template<required::Stringz RESULT> inline auto perform(Name, std::function<char * (char const *)>) -> Result<RESULT>;
  // These guarantee the '\0' terminator sentinel but have a 2-arg constructor which requires some work
  template<> inline auto perform<c::basic_stringn<char>>(Name, std::function<char * (char const *)>) -> Result<c::basic_stringn<char>>;
  template<> inline auto perform<c::basic_stringn<char const>>(Name, std::function<char * (char const *)>) -> Result<c::basic_stringn<char const>>;
  template<typename CHAR> inline auto perform2n(Name, std::function<char * (char const *)>) -> Result<c::basic_stringn<CHAR>>;
}
#endiv
#divert <ipp>
namespace sys::posix::packaging::getenv {
#if 10 == __GNUC__ && 0 == __GNUC_MINOR__ && 1 == __GNUC_PATCHLEVEL__
// viz. gcc (GCC) 10.0.1 20200407 (experimental) [20200408:20200413-1752] of cxx-modules branch
#warning gcc 1.0.1 (cxx-modules) the specialization definitions of sys::posix::packaging::getenv::perform<...>(...) are not available
#else
  template<> auto perform<c::basic_stringn<char>>(Name a, std::function<char * (char const *)> f) -> Result<c::basic_stringn<char>> {
    return perform2n<char>(a, f);
  }
  template<> auto perform<c::basic_stringn<char const>>(Name a, std::function<char * (char const *)> f) -> Result<c::basic_stringn<char const>> {
    return perform2n<char const>(a, f);
  }
#endif
}
#include <cerrno>
#import std.is_same
#import c.str
namespace sys::posix::packaging {
  template<typename CHAR> auto getenv::perform2n(Name a, std::function<char * (char const *)> f) -> Result<c::basic_stringn<CHAR>> {
    using Stringn = c::basic_stringn<CHAR>;
    using Stringz = c::basic_stringz<CHAR>;
    auto got = perform<Stringz>(a, f);
    auto val = value(got);
    return {good(got), error_num(got), Stringn{val.data(), val.size()}};
  }
  template<required::Stringz RESULT> auto getenv::perform(Name name, std::function<char *(char const *)> getter) -> Result<RESULT> {
    static_assert(!std::is_same_v<RESULT, c::basic_stringn<char>>);
    static_assert(!std::is_same_v<RESULT, c::basic_stringn<char const>>); // need RESULT to have a one-arg char-pointer \0-terminated constructor.
    auto val = getter(c::str(name)); 
    bool ok = nullptr != val;
    auto payload = [ok, val]() -> RESULT { return ok ? RESULT{val} : RESULT{}; };
    return {ok, errno, payload()};
  }
}
#endiv

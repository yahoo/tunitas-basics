// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys::posix::packaging::wait {
  namespace [[detail]] portability { }
}
#endiv
#divert <hpp>
#import pid_t
#import sys.id.required.process.Process
#import std.is_same
#import sys.posix.packaging.wait.required // rqeuired::process::Process
#import sys.posix.packaging.wait.required.identifier.Returned
#import sys.posix.packaging.wait.interface
#import sys.posix.syscall // ... WATCHOUT - the call signatures of functions are used this must all be at <hpp>
#import sys.call.result.wait.Value
#import sys.posix.packaging.wait4.returned // ..... ibidem.
namespace sys::posix::packaging::wait::portability {
  //
  // <quote ref="man:waitpid(2)" ref="man-pages-4.16-3.fc29.noarch">
  //   On some architectures, there is no waitpid() system call;
  //   instead, this interface is implemented via a C library wrapper function that calls wait4(2).
  // <quote>
  //
  // Usage: in and around waitpid(...)
  //
  //   static_assert(portability::Checkpoint<ID>);
  //
  // Prove that it compiles on both sides of that ghastly #ifdef ... without having to build on a system which supports both.
  //
  namespace [[detail]] checkpoint {
    using std::is_same_v;
    using packaging::wait::interface::Options;
    namespace identifier = packaging::wait::interface::bundle::waitpid::returned::identifier;
    namespace [[default]] {
      template<typename RETURNED, typename MATCHED> concept Case_ifdef_Title_Case = requires(RETURNED, MATCHED matched, Options options) {
        requires sys::id::required::process::Process<RETURNED>;
        requires is_same_v<identifier::Returned<RETURNED>, decltype(packaging::wait4::returned::wait4<RETURNED>((pid_t)matched, options, {}, {}))>;
      };
      template<typename RETURNED, typename MATCHED> concept Case_elsedef_Lower_Case = requires(RETURNED, Syscall waitpid, MATCHED matched, Options options) {
        requires sys::id::required::process::Process<RETURNED>;
        requires is_same_v<identifier::Returned<RETURNED>, decltype(packaging::syscall::stylized::syscall<identifier::Returned<RETURNED>>(waitpid, matched, (int *)0, (int)options))>;
      };
    }
    template<typename PROCESS> concept Checkpoint = requires(PROCESS) {
      requires sys::id::required::process::Process<PROCESS>;
      requires required::process::Process<PROCESS>; // same thing
      requires is_same_v<identifier::Returned<PROCESS>, sys::call::result::wait::Value<PROCESS>>; // ibidem.
      requires Case_ifdef_Title_Case<PROCESS, PROCESS>;
      requires Case_elsedef_Lower_Case<PROCESS, pid_t>;
    };
  }
  using checkpoint::Checkpoint;
}
#endiv
#divert <cpp>
#import pid_t
#import sys.id.Process
namespace {
  namespace tests {
    using namespace sys::posix::packaging::wait::portability;
    static_assert(Checkpoint<pid_t>);
    static_assert(Checkpoint<sys::id::Process>);
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.posix.packaging.wait.required.identifier.Matched
#import sys.posix.packaging.wait.continuation.Unmatched
#import std.is_same
namespace sys::posix::packaging::wait::required::identifier {
  //
  // A process identifier or else the special-magic type Unmatched.
  // So many to choose from:
  //
  // Usages:
  //
  //   template<required::identifier::Unmatched UNMATCHED, required::identifier::Returned RETURNED> struct Thing<Libcall, UNMATCHED, RETURNED>;
  //
  //   template<required::identifier::Matched MATCHED, required::identifier::Returned RETURNED> auto wait(MATCHED) -> Output<WAITPID, MATCHED, RETURNED>;
  //
  template<typename PROCESS> concept Unmatched = Matched<PROCESS> || std::is_same_v<PROCESS, packaging::wait::continuation::Unmatched>;
}
#endiv
#divert <cpp>
#import sys.id.Process
#import sys.id.process.Process
#import sys.id.process.Group
#import sys.id.process.Either
#import sys.id.Wait
#import sys.id.wait.Typed
#import sys.id.wait.Untyped
#import sys.wait.Identifier
#import pid_t
#import id_t
namespace {
  namespace tests {
    using namespace sys::posix::packaging::wait::required::identifier;
    // Effectively "null"
    static_assert(Unmatched<sys::posix::packaging::wait::continuation::Unmatched>);
    // But also the other ones that are expected in the matched argument slot.
    //
    // Title Case
    static_assert(Unmatched<sys::id::Process>);
    static_assert(Unmatched<sys::id::process::Process>);
    static_assert(Unmatched<sys::id::process::Group>);
    static_assert(Unmatched<sys::id::process::Either>);
    static_assert(!Unmatched<sys::wait::Identifier>, "need wait::Typed");
    static_assert(!Unmatched<sys::id::Wait>, "need wait::Typed");
    static_assert(!Unmatched<sys::id::wait::Untyped>, "need wait::Typed");
    static_assert(Unmatched<sys::id::wait::Typed>);
    // lower case
    static_assert(Unmatched<pid_t>);
    static_assert(!Unmatched<id_t>, "need wait::typed_t");
    static_assert(Unmatched<sys::id::wait::typed_t>);
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp> 
#import sys.id.required.process.Process
#import sys.id.required.process.Group
#import sys.id.required.process.Either
#import sys.id.required.wait.Typed
namespace sys::posix::packaging::wait::required::identifier {
  //
  // Among the many process identifier types that can be used for matching in the API
  // So many to choose from.
  // Either Hew School or old_school.
  //
  // Usage:
  //
  //   template<required::identifier::Matched MATCHED, required::identifier::Returned RETURNED> auto wait(MATCHED) -> Output<WAITPID, MATCHED, RETURNED>;
  //
  namespace matched {
    using namespace sys::id::required;
    // These match the New School (Title Case) as well as the old_school (lower case).  All of them; any of them.   See the test cases
    template<typename PROCESS> concept Matched = process::Either<PROCESS> || process::Group<PROCESS> || process::Process<PROCESS> || wait::Typed<PROCESS>;
  }
  using matched::Matched;
}
#endiv
#divert <cpp>
#import sys.id.Process
#import sys.id.process.Process
#import sys.id.process.Group
#import sys.id.process.Either
#import sys.posix.packaging.wait.continuation.Unmatched
#import sys.wait.Identifier
#import sys.id.Wait
#import sys.id.wait.Untyped
#import sys.id.wait.Typed // and typed_t
#import pid_t
#import id_t
namespace {
  namespace tests {
    using namespace sys::posix::packaging::wait::required::identifier;
    // title Case
    static_assert(Matched<sys::id::Process>);
    static_assert(Matched<sys::id::process::Process>);
    static_assert(Matched<sys::id::process::Group>);
    static_assert(Matched<sys::id::process::Either>);
    static_assert(!Matched<sys::wait::Identifier>, "need wait::Typed");
    static_assert(!Matched<sys::id::Wait>, "need wait::Typed");
    static_assert(!Matched<sys::id::wait::Untyped>, "need wait::Typed");
    static_assert(Matched<sys::id::wait::Typed>);
    // lower case
    static_assert(Matched<pid_t>);
    static_assert(!Matched<id_t>, "need typed_t");
    static_assert(Matched<sys::id::wait::typed_t>);
    //
    // NOT the "null" type
    static_assert(!Matched<sys::posix::packaging::wait::continuation::Unmatched>);
  }
}
#endiv

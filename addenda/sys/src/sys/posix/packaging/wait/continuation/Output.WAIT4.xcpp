// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.posix.packaging.wait.continuation.Output.declaration
namespace sys::posix::packaging::wait::continuation {
  //
  // The continuation for the overloads of wait(2) against wait4(2)
  // We have to do this because we cannot use overloading to distingusih between an [[in]] argument passed by value and an [[out]] argument passed by reference.
  //
  // Reminder:
  //
  //   We are looking to avoid the ambiguity among the following, at least:
  //
  //   wait(pid_t) -> Something                     using pid_t = int;
  //   wait(status::Filled &) -> Something;         using status::Filled = int;
  //
  //   int xyzzy{};
  //   auto waited = wait(xyzzy); .......... this is ambiguous
  //
  // Usage:
  //
  //   oh come on
  //
  template<required::identifier::Matched MATCHED, required::identifier::Returned RETURNED> struct Output<Call::WAIT4, MATCHED, RETURNED>;
}
#endiv
#divert <hpp>
namespace sys::posix::packaging::wait::continuation {
  template<required::identifier::Matched MATCHED, required::identifier::Returned RETURNED> struct Output<Call::WAIT4, MATCHED, RETURNED> {
    using Matched = MATCHED;
    using Returned = RETURNED;
    Matched matched;
    Options options;
    inline auto operator()() const -> both::Returned<Returned>;
    inline auto operator()([[out]] usages::Filled &) const -> status::Returned<Returned>;
    inline auto operator()([[out]] status::Filled &) const -> usages::Returned<Returned>;

    inline auto operator()(status::Unfilled) const -> usages::Returned<Returned>;
    inline auto operator()(usages::Unfilled) const -> status::Returned<Returned>;

    inline auto operator()([[out]] status::Filled &, [[out]] usages::Filled &) const -> identifier::Returned<Returned>;
    inline auto operator()(status::Unfilled, [[out]] usages::Filled &) const -> identifier::Returned<Returned>;
    inline auto operator()([[out]] status::Filled &, usages::Unfilled) const -> identifier::Returned<Returned>;
    inline auto operator()(status::Unfilled, usages::Unfilled) const -> identifier::Returned<Returned>;
  };
}
#endiv
#divert <ipp>
#import sys.posix.packaging.wait.returned
namespace sys::posix::packaging::wait::continuation {
  template<required::identifier::Matched _M, required::identifier::Returned _R> auto Output<Call::WAIT4, _M, _R>::operator()() const -> both::Returned<Returned>                         { return returned::wait4<Returned>(matched, options); }
  template<required::identifier::Matched _M, required::identifier::Returned _R> auto Output<Call::WAIT4, _M, _R>::operator()(usages::Filled &segasu) const -> status::Returned<Returned> { return returned::wait4<Returned>(matched, options, segasu); }
  template<required::identifier::Matched _M, required::identifier::Returned _R> auto Output<Call::WAIT4, _M, _R>::operator()(status::Filled &sutats) const -> usages::Returned<Returned> { return returned::wait4<Returned>(matched, options, sutats); }

  template<required::identifier::Matched _M, required::identifier::Returned _R> auto Output<Call::WAIT4, _M, _R>::operator()(usages::Unfilled segasu) const -> status::Returned<Returned> { return returned::wait4<Returned>(matched, options, segasu); }
  template<required::identifier::Matched _M, required::identifier::Returned _R> auto Output<Call::WAIT4, _M, _R>::operator()(status::Unfilled sutats) const -> usages::Returned<Returned> { return returned::wait4<Returned>(matched, options, sutats); }

  template<required::identifier::Matched _M, required::identifier::Returned _R> auto Output<Call::WAIT4, _M, _R>::operator()(status::Filled &sutats, usages::Filled &segasu) const -> identifier::Returned<Returned>   { return returned::wait4<Returned>(matched, options, sutats, segasu); }
  template<required::identifier::Matched _M, required::identifier::Returned _R> auto Output<Call::WAIT4, _M, _R>::operator()(status::Unfilled sutats, usages::Filled &segasu) const -> identifier::Returned<Returned>  { return returned::wait4<Returned>(matched, options, sutats, segasu); }
  template<required::identifier::Matched _M, required::identifier::Returned _R> auto Output<Call::WAIT4, _M, _R>::operator()(status::Filled &sutats, usages::Unfilled segasu) const -> identifier::Returned<Returned>  { return returned::wait4<Returned>(matched, options, sutats, segasu); }
  template<required::identifier::Matched _M, required::identifier::Returned _R> auto Output<Call::WAIT4, _M, _R>::operator()(status::Unfilled sutats, usages::Unfilled segasu) const -> identifier::Returned<Returned> { return returned::wait4<Returned>(matched, options, sutats, segasu); }
}
#endiv

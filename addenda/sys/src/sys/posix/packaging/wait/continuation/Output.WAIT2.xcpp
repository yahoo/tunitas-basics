// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.posix.packaging.wait.continuation.Output.declaration
namespace sys::posix::packaging::wait::continuation {
  //
  // The continuation for the overloads of wait(2) against wait2(2)
  //
  // Reminder:
  //
  //   We are looking to avoid the ambiguity among the following, at least:
  //
  //   wait(pid_t) -> Something                     using pid_t = int;
  //   wait(status::Filled &) -> Something;         using status::Filled = int;
  //
  //   int xyzzy{};
  //   auto waited = wait(xyzzy); .......... this is ambiguous
  //
  // Usage:
  //
  //   oh come on
  //
  template<required::identifier::Returned RETURNED> struct Output<Call::WAIT2, Unmatched, RETURNED>;
}
#endiv
#divert <hpp>
namespace sys::posix::packaging::wait::continuation {
  template<required::identifier::Returned RETURNED> struct Output<Call::WAIT2, Unmatched, RETURNED> {
    using Returned = RETURNED;
    using Matched = Returned;
    inline static constexpr auto matched = Matched(-1);
    inline auto operator()() const -> status::Returned<Returned>;
    inline auto operator()(status::Filled &) const -> identifier::Returned<Returned>;
    inline auto operator()(status::Unfilled) const -> identifier::Returned<Returned>;
  };
}
#endiv
#divert <ipp>
#import sys.posix.packaging.wait.returned
namespace sys::posix::packaging::wait::continuation {
  template<required::identifier::Returned _> auto Output<Call::WAIT2, Unmatched, _>::operator()() const -> status::Returned<Returned>                            { return returned::waitpid(matched, Options{}); }
  template<required::identifier::Returned _> auto Output<Call::WAIT2, Unmatched, _>::operator()(status::Filled &sutats) const -> identifier::Returned<Returned>  { return returned::waitpid(matched, Options{}, sutats); }
  template<required::identifier::Returned _> auto Output<Call::WAIT2, Unmatched, _>::operator()(status::Unfilled sutats) const -> identifier::Returned<Returned> { return returned::waitpid(matched, Options{}, sutats); }
}
#endiv

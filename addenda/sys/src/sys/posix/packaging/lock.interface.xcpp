// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import flock
#import flock64
#import sys.call.Result
#import sys.id.File
#import off_t
#import sys.f.Function
#import sys.f.layer.Which
#import sys.f.Wait
#import sys.flock.Operation
#import sys.flock.Options
#import sys.flock.Specification
#import sys.lock.Operation
#import sys.lockf.Operation
#import sys.posix.packaging.lock.Nomenclature
namespace sys::posix::packaging::lock::interface {
  namespace truct {
    using flock = struct flock;  // [[yuk]] because there is a ::flock and a (struct) ::flock
    using ::flock64;
  }
  using flock [[deprecated("prefer truct::flock")]] = struct flock;
  using flock64 [[deprecated("prefer truct::flock64")]] = ::flock64;
  using id::File;
  using Offset = off_t;
  using Result = call::Result;
  using f::Function;
  namespace layer = f::layer; // for at least f::layer::Which
  using Filetable = f::layer::File; // to avoid the clash with id::File
  using f::layer::Process;
  using f::layer::Which;
  using f::Wait;
  using namespace nomenclature::bundle;
  namespace leasing {
    using Lease = sys::lock::Operation;
    static_assert(std::is_same_v<Lease, Nomenclature<LEASE>>);
    using Argument = Lease;
    using Payload = Lease;
    using Status = call::Result;
  }
  namespace locking {
    // fcntl(2) locks use 'struct flock'
    // flock(2) do NOT use 'struct flock'
    using Argument = truct::flock;
    using Payload = truct::flock;
    using Status = call::Result;
  }
  namespace bundle {
    namespace flock {
      // flock(2) uses that grody trick of blending more bits into the existing API to (hopefully) not break the ABI.
      using Specification = sys::flock::Specification;
      static_assert(std::is_same_v<Specification, Nomenclature<FLOCK>>);
      using Operation = sys::flock::Operation;
      using Options = sys::flock::Options;
      using Status = call::Result;
    }
    namespace lockf {
      using Operation = sys::lockf::Operation;
      static_assert(std::is_same_v<Operation, Nomenclature<LOCKF>>);
      using Status = call::Result;
    }
    namespace getlock {
      using namespace locking;
    }
    namespace setlock {
      using namespace locking;
    }
    namespace getlease {
      using namespace leasing;
      using Returned = call::result::Value<Payload>;
    }
    namespace setlease {
      using namespace leasing;
    }
  }
}
#endiv
#divert <ipp>
#import sys.posix.F
#import sys.posix.fcntl
namespace sys::posix::packaging::lock::interface {
  using posix::F;
}
#endiv

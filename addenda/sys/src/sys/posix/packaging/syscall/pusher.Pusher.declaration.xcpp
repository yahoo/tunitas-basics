// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import off_t
#import std.pair
namespace sys::posix::packaging::syscall::pusher {
  //
  // The off_t type must be handled specially when moving it into the kernel.
  // Even 64-on-64.
  //
  // From glibc-2.23, e.g. glibc-2.23-62-g1915d6d
  //
  //   sysdeps/unix/sysv/linux/pread64.c
  //   sysdeps/unix/sysv/linux/pread64.c
  //
  // Also
  // 
  // https://www.kernel.org/doc/html/v4.10/process/adding-syscalls.html
  // <quote>
  //   The second situation that requires a compatibility layer is if one of the system callâ€™s arguments has a type that is explicitly 64-bit even on a 32-bit architecture, for example loff_t or __u64.
  //   In this case, a value that arrives at a 64-bit kernel from a 32-bit application will be split into two 32-bit values, which then need to be re-assembled in the compatibility layer.
  // </quote>
  //
  //
  // Also consult http://www.unix.org/version2/whatsnew/lp64_wp.html
  //
  // Usage:
  //
  //   auto some_syscall_xyzzy(off_t offset) -> void {
  //     auto pusher = Pusher{offset};
  //     return direct::syscall(Syscall::XYZZY, pusher.first(), pusher.second());
  //   }
  //
  template<typename UNIQUENESS> struct Pusher;
  namespace bundle {
    using pusher::Pusher;
  }
}
#endiv

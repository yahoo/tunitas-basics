// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys::posix::packaging::syscall {
  //
  // Call the system calls with the off_t arguments that require special stack pushing.
  //
  // Usage:
  //
  //   using Call = packaging::syscall::Offset;
  //   auto called = Call::pread(fd, buf, count, offset);
  //   auto called = Call::pwrite(fd, buf, count, offset);
  //   ...etc...
  //
  struct Offset;
}
#endiv
#divert <hpp>
#import size_t
#import off_t
#import ssize_t
#import iovec
#import sys.posix.Syscall
#import sys.call.result.Value
struct sys::posix::packaging::syscall::Offset {
  using Result = call::result::Value<ssize_t>;
  inline static auto pread(int fd, void *buf, size_t count, off_t offset) -> Result;
  inline static auto pwrite(int fd, void const *buf, size_t count, off_t offset) -> Result;
  inline static auto preadv(int fd, iovec const *buf, int count, off_t offset) -> Result;
  inline static auto pwritev(int fd, iovec const *buf, int count, off_t offset) -> Result;
  inline static auto preadv2(int fd, iovec const *buf, int count, off_t offset, int flags) -> Result;
  inline static auto pwritev2(int fd, iovec const *buf, int count, off_t offset, int flags) -> Result;
private:
  inline static constexpr auto PREAD =
#if defined SYS_pread
  Syscall::PREAD
#elif defined SYS_pread64
  Syscall::PREAD64
#else
#error neither pread nor pread64 are definedon this system
#endif
  ;
    inline static constexpr auto PWRITE =
#if defined SYS_pwrite
  Syscall::PWRITE
#elif defined SYS_pwrite64
  Syscall::PWRITE64
#else
#error neither pwrite nor pwrite64 are defined on this system
#endif
    ;
  inline static constexpr auto PREADV = Syscall::PREADV;
  inline static constexpr auto PWRITEV = Syscall::PWRITEV;
  inline static constexpr auto PREADV2 = Syscall::PREADV2;
  inline static constexpr auto PWRITEV2 = Syscall::PWRITEV2;
};
#endiv
#divert <ipp>
#import sys.posix.syscall
#import sys.posix.packaging.syscall.Pusher
namespace sys::posix::packaging::syscall {
  auto Offset::pread(int fd, void *buf, size_t count, off_t offset) -> Result {
    auto const pusher = Pusher<SYSCALL_LL_PRW>{offset};
    return idiomatic::syscall<ssize_t>(PREAD, fd, buf, count, pusher.first(), pusher.second());
  }
  auto Offset::pwrite(int fd, void const *buf, size_t count, off_t offset) -> Result {
    auto const pusher = Pusher<SYSCALL_LL_PRW>{offset};
    return idiomatic::syscall<ssize_t>(PWRITE, fd, buf, count, pusher.first(), pusher.second());
  }
  auto Offset::preadv(int fd, iovec const *buf, int count, off_t offset) -> Result {
    auto const pusher = Pusher<LO_HI_LONG>{offset};
    return idiomatic::syscall<ssize_t>(PREADV, fd, buf, count, pusher.first(), pusher.second());
  }
  auto Offset::pwritev(int fd, iovec const *buf, int count, off_t offset) -> Result {
    auto const pusher = Pusher<LO_HI_LONG>{offset};
    return idiomatic::syscall<ssize_t>(PWRITEV, fd, buf, count, pusher.first(), pusher.second());
  }
  auto Offset::preadv2(int fd, iovec const *buf, int count, off_t offset, int flags) -> Result {
    auto const pusher = Pusher<LO_HI_LONG>{offset};
    return idiomatic::syscall<ssize_t>(PREADV2, fd, buf, count, pusher.first(), pusher.second(), flags);
  }
  auto Offset::pwritev2(int fd, iovec const *buf, int count, off_t offset, int flags) -> Result {
    auto const pusher = Pusher<LO_HI_LONG>{offset};
    return idiomatic::syscall<ssize_t>(PWRITEV2, fd, buf, count, pusher.first(), pusher.second(), flags);
  }
}
#endiv

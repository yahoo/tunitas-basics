// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.posix.packaging.syscall.pusher.Pusher.declaration
namespace sys::posix::packaging::syscall::pusher {
  //
  // Newer, circa glibc-2.30
  //
  //   return SYSCALL_CANCEL (pread, fd, buf, count, SYSCALL_LL_PRW (offset));
  //
  //   string/endian.h
  //   #if __BYTE_ORDER == __LITTLE_ENDIAN
  //   # define __LONG_LONG_PAIR(HI, LO) LO, HI
  //   #elif __BYTE_ORDER == __BIG_ENDIAN
  //   # define __LONG_LONG_PAIR(HI, LO) HI, LO
  //   #endif
  //
  // From sysdeps/unix/sysv/linux/sysdep.h
  //   /* Provide a common macro to pass 64-bit value on syscalls.  */
  //   #if __WORDSIZE == 64 || defined __ASSUME_WORDSIZE64_ILP32
  //   # define SYSCALL_LL(val)   (val)
  //   # define SYSCALL_LL64(val) (val)
  //   #else
  //   #define SYSCALL_LL(val)   __LONG_LONG_PAIR ((val) >> 31, (val))
  //   #define SYSCALL_LL64(val) __LONG_LONG_PAIR ((long) ((val) >> 32), (long) ((val) & 0xffffffff))
  //   #endif
  //
#ifdef DUBIOUS
  // Older, circa glibc-2.23 and such
  //
  // 32-bit systems
  // sysdeps/unix/sysv/linux/pread.c
  //
  //   assert (sizeof (offset) == 4);
  //   result = SYSCALL_CANCEL (pread, fd, buf, count, __LONG_LONG_PAIR (offset >> 31, <--------------- and the sign bit?
  //                                                                     offset));
  //
  // portable and 64-bit systems
  // sysdeps/unix/sysv/linux/pread64.c
  //
  //   return SYSCALL_CANCEL (pread, fd, buf, count, __LONG_LONG_PAIR ((off_t) (offset >> 32),
  //                                                                   (off_t) (offset & 0xffffffff)));
  //
#endif
  enum SYSCALL_LL_PRW { };
  using LONG_LONG_PAIR [[deprecated("since glibc-2.30 prefer SYSCALL_LL_PRW")]] = SYSCALL_LL_PRW;
  template<> struct Pusher<SYSCALL_LL_PRW>;
  namespace bundle {
    using pusher::SYSCALL_LL_PRW;
    using pusher::LONG_LONG_PAIR;
  }
}
#endiv
#divert <hpp>
#import off_t
#import std.pair
#import nonstd.endian
#import sys.posix.packaging.syscall.pusher.Memory
namespace sys::posix::packaging::syscall::pusher {
  template<> class Pusher<SYSCALL_LL_PRW> : private std::pair<off_t, off_t>, protected Memory {
    using Ancestor = std::pair<off_t, off_t>;
  public:
    using Value = off_t;
    inline explicit Pusher(Value original);
    inline auto first() const;
    inline auto second() const;
  private:
    using Endian = nonstd::endian;
    static_assert(Endian::native == Endian::little || Endian::native == Endian::big);
    inline static auto lo(Value) -> Value;
    inline static auto hi(Value) -> Value;
  };
}
#endiv
#divert <ipp>
namespace sys::posix::packaging::syscall::pusher {
  Pusher<SYSCALL_LL_PRW>::Pusher(Value value) : Ancestor{lo(value), hi(value)} { }
  auto Pusher<SYSCALL_LL_PRW>::first() const  { return std::endian::native == std::endian::little ? Ancestor::first : Ancestor::first; }
  auto Pusher<SYSCALL_LL_PRW>::second() const { return std::endian::native == std::endian::little ? Ancestor::second : Ancestor::first; }
  auto Pusher<SYSCALL_LL_PRW>::hi(Value specimen) -> Value {
    if constexpr (IS_LP64)  { return 0; }
    else
      if constexpr (IS_ILP32) { return specimen >> 31; }
      else                    { return specimen >> 32; }
  }
  auto Pusher<SYSCALL_LL_PRW>::lo(Value specimen) -> Value {
    if constexpr (IS_LP64)  { return specimen; }
    else
      if constexpr (IS_ILP32) { return specimen; }
      else                    { return specimen & 0x0'ffff'ffff; }
  }
}
#endiv

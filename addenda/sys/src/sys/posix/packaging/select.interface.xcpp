// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.optional
#import std.reference_wrapper
#import sys.call.result.Value
#import sys.fd.set.Reference
#include <hpp/sys.fd.set.Reference> // need the complete type
#import sys.posix.packaging.select.required.Duration
#import sys.posix.packaging.select.Optional
#import sys.posix.packaging.required // cascade namespace required and select::required
#import sys.time.spec
#import sys.time.val
#import sys.sig.Set // and sigset_t
namespace sys::posix::packaging::select::interface {
  //
  // Supports both select(2) and pselect(2)
  //
  // Usage:
  //
  //   #import sys.posix.packaging.select.interface
  //   using sys::posix::detail::interface;
  //   using namespace bundle::select;
  //   namespace required = sys::posix::detail::bundle::required; <-------- this is special and unique herein
  //
  // Alternate:
  //
  //   #import sys.posix.packaging.select.interface
  //   using sys::posix::detail::interface;
  //   using namespace bundle::pselect;
  //   namespace required = sys::posix::detail::bundle::required;
  //
  namespace [[detail]] reference {
    using namespace sys::fd::set;
    using Reads = Reference<Purpose::READ>::Optional;
    using Writes = Reference<Purpose::WRITE>::Optional;
    using Excepts = Reference<Purpose::EXCEPT>::Optional;
  }
  using reference::Reads;
  using reference::Writes;
  using reference::Excepts;
  using Count = call::result::Value<int>; // where 'int' is the count of the active file descriptors
  using Sigset = std::optional<std::reference_wrapper<sigset_t const>>; // used in sys::posix::pselect(...) but also with overloaded sys::posix::select(...) 
  namespace bundle {
    // See the Usage message above. which is necessary to disambiguate namespace required
    namespace required = packaging::select::required; // presents required::Duration, required::duration::Ratio, required::duration::Oldtime
    namespace select {
      using Timeval = time::val; // .......... for select(2)
      using Timespec = time::spec; // ........ for pselect(2)
      using Timeout = std::optional<Timeval>; // the default timeout is for select(2)
      using packaging::select::Optional;
    }
    namespace pselect {
      using Timeout = std::optional<time::spec>;
    }
  }
}
#endiv
#divert <hpp>
#import sys.fd.fls
namespace sys::posix::packaging::select::interface {
  // These are NOT exported out of the packaging; they are implementation details.
  using sys::fd::fls;
  using sys::fd::set::repointer;
  // WATCHOUT - we have to accept reference and return a const pointer into *THAT* optional object (not a copy)
  template<typename TYPE> auto repointer(std::optional<TYPE> const &) -> TYPE const *;
  template<typename TYPE> auto repointer(std::optional<TYPE> &) -> TYPE *;
  template<typename TYPE> auto repointer(std::optional<TYPE> &&) -> TYPE * = delete;
  template<typename TYPE> auto repointer(std::optional<std::reference_wrapper<TYPE const>> const &) -> TYPE const *;
  template<typename TYPE> auto repointer(std::optional<std::reference_wrapper<TYPE>> &) -> TYPE *;
  template<typename TYPE> auto repointer(std::optional<std::reference_wrapper<TYPE>> &&) -> TYPE * = delete;
}
#divert <ipp>
#import std.addressof
namespace sys::posix::packaging::select {
  template<typename TYPE> auto interface::repointer(std::optional<TYPE> &op) -> TYPE *             { return op ? std::addressof(*op) : nullptr; }
  template<typename TYPE> auto interface::repointer(std::optional<TYPE> const &op) -> TYPE const * { return op ? std::addressof(*op) : nullptr; }
  template<typename TYPE> auto interface::repointer(std::optional<std::reference_wrapper<TYPE>> &op) -> TYPE *                   { return op ? std::addressof(op->get()) : nullptr; }
  template<typename TYPE> auto interface::repointer(std::optional<std::reference_wrapper<TYPE const>> const &op) -> TYPE const * { return op ? std::addressof(op->get()) : nullptr; }
}
#endiv

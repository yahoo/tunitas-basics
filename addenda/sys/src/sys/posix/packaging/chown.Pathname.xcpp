// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.posix.Syscall
namespace sys::posix::packaging::chown {
  //
  // Implementation for the commonality between chown(2) and lchown(2)
  //
  // Ahem, we only support "modern" kernels circa 4-series and 5-series and later.
  // History on on CHOWN32, LCHOWN32, FCHOWN32 from man-pages-4.16-3.fc29.noarch
  // <quote>
  //   The original Linux chown(), fchown(), and lchown() system calls supported only 16-bit user and group IDs.
  //   Subsequently, Linux 2.4 added chown32(), fchown32(), and lchown32(), supporting 32-bit IDs.
  //   The glibc chown(), fchown(), and lchown() wrapper functions transparently deal with the variations across kernel versions.
  // </quote>

  // Usage:
  //
  //   Hack the Spew
  //   return Pathname<SYS_chown>::call(move(pathname), uid, gid);
  //
  template<Syscall> struct Pathname;
}
#endiv
#divert <hpp>
#import sys.call.argument.Pathname
#import sys.call.Result
#import sys.id.User
#import sys.id.Group
#import uid_t
#import gid_t
#import syscall // for the  manifest constants SYS_{chown,lchown}
namespace sys::posix::packaging {
  template<Syscall CHOWN> struct chown::Pathname {
    using Filepath = call::argument::Pathname;
    using Result = call::Result;
    using User = id::User;
    using Group = id::Group;
    inline static auto call(Filepath, User) -> Result;
    inline static auto call(Filepath, Group) -> Result;
    inline static auto call(Filepath, User, Group) -> Result;
    inline static auto call(Filepath, uid_t, gid_t) -> Result;
    static_assert(4 == sizeof (uid_t));
    static_assert(4 == sizeof (gid_t));
    inline static auto const SYSCALL = CHOWN;
    static_assert(SYSCALL == Syscall::CHOWN || SYSCALL == Syscall::LCHOWN); // ... only these two
#ifdef SYS_chown32
    static_assert(SYSCALL != Syscall::CHOWN32); // ............................... (i386) especially not that
#endif
#ifdef SYS_lchown32
    static_assert(SYSCALL != Syscall::LCHOWN32); // .............................. (i386) and especially not that
#endif
  };
}
#endiv
#divert <ipp>
#import sys.posix.syscall
namespace sys::posix::packaging::chown {
  template<Syscall _> auto Pathname<_>::call(Filepath pathname, User uid) -> Result             { return idiomatic::syscall<int>(SYSCALL, (char const *)pathname, (uid_t)uid, gid_t(-1)); }
  template<Syscall _> auto Pathname<_>::call(Filepath pathname, Group gid) -> Result            { return idiomatic::syscall<int>(SYSCALL, (char const *)pathname, uid_t(-1), (gid_t)gid); }
  template<Syscall _> auto Pathname<_>::call(Filepath pathname, User uid, Group gid) -> Result  { return idiomatic::syscall<int>(SYSCALL, (char const *)pathname, (uid_t)uid, (gid_t)gid); }
  template<Syscall _> auto Pathname<_>::call(Filepath pathname, uid_t uid, gid_t gid) -> Result { return idiomatic::syscall<int>(SYSCALL, (char const *)pathname, uid, gid); }
}
#endiv

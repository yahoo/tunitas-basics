// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import f_owner_ex
#import sys.call.Result
#import sys.call.result.Value
#import sys.f.required.Owner
#import sys.id.File
#import sys.id.Process
#import sys.id.process.Either
#import sys.id.process.Group
#import sys.id.process.Process
#import sys.posix.required.rebundled // cascade namespace required for d::required<-->required::f, etc.
#import sys.posix.packaging.required
namespace sys::posix::packaging::owner::interface {
  using ::f_owner_ex;
  using id::File;
  using Result = call::Result;
  namespace result {
    template<required::f::Owner PAYLOAD> using Process = call::result::Value<PAYLOAD>; // [[reminder]] Owner::THREAD, PROCESS, GROUP
    using Owner = call::result::Value<f_owner_ex>;
    namespace process {
      using Process = call::result::Value<id::process::Process>;
      using Either = call::result::Value<id::process::Either>;
      using Group = call::result::Value<id::process::Group>;
    }
    using Status = call::Result;
  }
  namespace bundle {
    namespace getowner {
      using Status = result::Status;
      namespace basic {
        using Argument = id::process::Either;
        using Payload = id::process::Either;
        template<required::f::Owner PAYLOAD> using Returned = result::Process<PAYLOAD>;
        using Status = result::Status; // yes, place a declaration into here too
      }
      namespace extended {
        using Argument = f_owner_ex;
        using Payload = f_owner_ex;
        using Returned = result::Owner;
        using Status = result::Status; // ibidem
      }
      namespace ba = basic;
      namespace ex = extended;
    }
    namespace setowner {
      using Status = result::Status;
      namespace basic {
        using Argument = id::process::Either;
        using Payload = id::process::Either;
        using Status = result::Status; // yes, place a declaration into here too
      }
      namespace extended {
        using Argument = f_owner_ex;
        using Payload = f_owner_ex;
        using Status = result::Status; // ibidem
      }
      namespace ba = basic;
      namespace ex = extended;
    }
  }
}
#endiv
#divert <ipp>
#import sys.posix.F
#import sys.posix.fcntl
namespace sys::posix::packaging::owner::interface {
  using posix::F;
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#include <unistd.h>
namespace sys::posix::packaging::exec {
  namespace type {
    using fd = int;
    using path = char const *;
    using argl = char const *;
    using argv = char /*nonconst*/ *const *;
    using envv = char /*nonconst*/ *const *;
  }
  namespace declared {
    using execl = decltype(::execl);
    using execle = decltype(::execle);
    using execv = decltype(::execv);
    using execve = decltype(::execve);
    using fexecve = decltype(::fexecve);
  }
  namespace function = declared;
}
#import std.function
namespace sys::posix::packaging::exec {
  namespace unworkable_candidate_implementation_of_namespace_function {
    namespace almost {
      using execl = std::function<int (type::path, type::argl, ...)>;
      using execle = std::function<int (type::path, type::argl, ... /* ends at nullptr then one more 'char *const environ[]' */)>;
      using execv = std::function<int (type::path, type::argv)>;
      using execve = std::function<int (type::path, type::argv, type::envv)>;
      using fexecve = std::function<int (type::fd, type::argv, type::envv)>;
    }
    using execl = std::function<declared::execl>;
    using execle = std::function<declared::execle>;
    using execv = std::function<declared::execv>;
    using execve = std::function<declared::execve>;
    using fexecve = std::function<declared::fexecve>;
  }
}
#endiv
#divert <hpp>
#import sys.posix.packaging.exec.Pair
#include <unistd.h>
namespace sys::posix::packaging::exec {
  // WATCHOUT - the cast is important to ensure that the result is a full 64-bit pointer.
  constexpr char const *const END_SENTINEL = (char const *)(nullptr);
  // There is NO SUCH ::execlep( ... ) so we build our own (blik!)
  auto execlep(char const *path, char const *arg, ... /*, (char *) NULL, char * const envp[] */) noexcept -> int;
  inline constexpr auto PAIRL = Pair<declared::execl>(&::execl, &::execlp);
  inline constexpr auto PAIRLE = Pair<declared::execle>(&::execl, &execlep);
  inline constexpr auto PAIRV = Pair<declared::execv>(&::execv, &::execvp);
  inline constexpr auto PAIRVE = Pair<declared::execve>(&::execve, &::execvpe);
  inline constexpr auto EXECLE = ::execle; // there is no execp(...) variant of this
  constexpr declared::fexecve const *const FEXECVE = &::fexecve;
}
#endiv
#divert <cpp>
#import std.invalid_argument
#import va.start
#import va.end
#import va.arg
namespace {
  auto re_execvpe(char const *path, va_list ap) noexcept -> int {
    std::vector<char const *> collect;
    for (char const *arg=va_arg(ap, char const *); nullptr != arg; arg=va_arg(ap, char const *)) {
      collect.push_back(arg);
    }
    collect.push_back(nullptr);
    using Vector = char *const *; // NOT char const *const *
    Vector argv = const_cast<Vector>(collect.data());
    Vector envv = const_cast<Vector>(va_arg(ap, char const *const *));
    return ::execvpe(path, argv, envv);
  }
}
auto sys::posix::packaging::exec::execlep(char const *path, char const *arg, ... /*, (char *) NULL, char * const envp[] */) noexcept -> int {
  va_list ap;
  va_start(ap, arg);
  return re_execvpe(path, ap);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.posix.packaging.exec.Collector.declaration
#import c.basic_stringz
namespace sys::posix::packaging::exec {
  template<typename CHAR> class Collector<c::basic_stringz<CHAR>>;
}
#endiv
#divert <hpp>
#import c.basic_stringz
#import std.deque
#import std.vector
#import std.remove_const
namespace sys::posix::packaging::exec {
  template<typename CHAR> class Collector<c::basic_stringz<CHAR>> {
  public:
    using char_type = typename std::remove_const<CHAR>::type;
    //                              <----- penultimate ----->     ultimate
    // Collector<Stringz> collector(stringz, stringz, stringz ... stringz)
    using penultimate_type = c::basic_stringz<CHAR>;
    using ultimate_type = c::basic_stringz<CHAR>;
  public:
    template<typename... PRECEEDING> Collector(PRECEEDING const &..., ultimate_type const &);
  protected:
    // Only descendants get to use the default constructor
    Collector() = default;
    Collector(Collector const &) = delete;
    auto operator=(Collector const &) -> void = delete;
  private:
    // These are for our convenience, not part of the interface
    using staging_vector = std::deque<CHAR const *>;
    using finished_vector = std::vector<CHAR const *>;
  public:
    staging_vector staging;
    finished_vector argv;
  private:
    // Descendants necessarily have a different ultimate treatment
    inline auto treat_ultimate(ultimate_type const &) -> void;
  protected:
    inline auto treat_penultimate(penultimate_type const &) -> void;
    inline auto peel(penultimate_type const &) -> void;
    template<typename... PRECEEDING, typename FINAL> inline auto peel(PRECEEDING const &..., penultimate_type const &) -> void;
    inline auto finish() -> void;
  };
}
#endiv
#divert <ipp>
#import c.str
#import std.reverse_iterator
#import std.copy
#import std.back_inserter
#import sys.posix.packaging.exec.function // END_SENTINEL
namespace sys::posix::packaging::exec {
  template<typename CHAR> template<typename... PRECEEDING> Collector<c::basic_stringz<CHAR>>::Collector(PRECEEDING const &...preceeding, ultimate_type const &ultimate)
    : staging()
    , argv() {
    treat_ultimate(ultimate);
    peel(preceeding...);
    finish();
  }
  template<typename CHAR> auto Collector<c::basic_stringz<CHAR>>::treat_ultimate(ultimate_type const &value) -> void {
    treat_penultimate(value);
  }
  template<typename CHAR> auto Collector<c::basic_stringz<CHAR>>::treat_penultimate(penultimate_type const &value) -> void {
    // We're peeling off from the end, so we need to push_front
    staging.push_front(c::str(value));
  }
  template<typename CHAR> auto Collector<c::basic_stringz<CHAR>>::peel(penultimate_type const &value) -> void {
    treat_penultimate(value);
  }
  template<typename CHAR> template<typename... PRECEEDING, typename FINAL> auto Collector<c::basic_stringz<CHAR>>::peel(PRECEEDING const &...preceeding, penultimate_type const &penultimate) -> void {
    treat_penultimate(penultimate);
    peel(preceeding...);
  }
  template<typename CHAR> auto Collector<c::basic_stringz<CHAR>>::finish() -> void {
    using reverse_iterator = std::reverse_iterator<typename staging_vector::iterator>;
    reverse_iterator const last(staging.end());
    reverse_iterator const first(staging.begin());
    std::copy(last, first, std::back_inserter(argv));
    argv.push_back(exec::END_SENTINEL);
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import std.string
#import std.vector
#import nonstd.required.container.Holding
namespace sys::posix::packaging::exec {
  //
  // From a container of std::string, return a vector of char const * which is suitable for use in exec(2)
  // Any sort of string-containing container is appropriate: vector, deque, array, map, etc.
  //
  // Requirements:
  //
  //   There must be at least one element in the container; else an invalid_argument exception is thrown.
  //
  // Lifetimes:
  //
  //   The source container must be stable over the lifetime of the returned std::vector<char const *>
  //     a) the container MUST NOT move the strings
  //     b) the strings MUST NOT be modified.
  //   The temporary returned by vec(...) MUST live on the stack through and beyond the exec(2) call.
  //
  // usage:
  //
  //   auto args = CONTAINER<std::string>{...something...};
  //   auto envs = CONTAINER<std::string>{...something...};
  //   auto ed = exec(filepath, vec(args), vec(envs))
  //
  template<typename CONTAINER> inline auto vec(CONTAINER const &) -> std::vector<char const *> requires nonstd::required::container::Holding<CONTAINER, std::string>;
}
#endiv
#divert <ipp>
#import std.back_inserter
#import std.transform
#import std.move
#import std.invalid_argument
template<typename CONTAINER> auto sys::posix::packaging::exec::vec(CONTAINER const &subject) -> std::vector<char const *> requires nonstd::required::container::Holding<CONTAINER, std::string> {
  if (subject.empty()) {
    throw std::invalid_argument{"invalid empty container"};
  }
  auto extract = [](std::string const &subject_i) -> char const * {
    return subject_i.data();
  };
  std::vector<char const *> ret;
  std::transform(subject.begin(), subject.end(), std::back_inserter(ret), extract);
  ret.push_back(nullptr); // Need one more ... the nullptr sentinel at the end
  return ret;
}
#endiv
5

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.posix.packaging.exec.Dispatcher.declaration
#import c.const_stringz
#import c.stringz
#import c.const_stringn
#import c.stringn
#import c.const_stringn
#import std.string
namespace sys::posix::packaging::exec {
  // These are '\0'-terminated character series
  template<typename... PRECEEDING> class Dispatcher<char const *, PRECEEDING...>;
  template<typename... PRECEEDING> class Dispatcher<char *, PRECEEDING...>;
  template<typename... PRECEEDING> class Dispatcher<c::const_stringz, PRECEEDING...>;
  template<typename... PRECEEDING> class Dispatcher<c::stringz, PRECEEDING...>;
  template<typename... PRECEEDING> class Dispatcher<c::const_stringn, PRECEEDING...>;
  template<typename... PRECEEDING> class Dispatcher<c::stringn, PRECEEDING...>;
  template<typename... PRECEEDING> class Dispatcher<std::string, PRECEEDING...>;
}
#endiv
#divert <hpp>
#import sys.posix.packaging.exec.Core
#import sys.posix.packaging.exec.function
namespace sys::posix::packaging::exec {
  template<typename... PRECEEDING> class Dispatcher<char const *, PRECEEDING...> : public Core<packaging::exec::function::execl, c::const_stringz, /*path*/ c::const_stringz, PRECEEDING...> {
    using Ancestor = Core<exec::function::execl, /*final*/ c::const_stringz, /*path*/ c::const_stringz, PRECEEDING...>;
  public:
    using used_type = typename Ancestor::call_type;
    using ignored_type = packaging::exec::function::execle *;
    // The difference between
    //   1. Dispatcher<char const *, PRECEEDING...>
    //   2. Dispatcher<char const *const *, PRECEEDING...>
    // is this constructor (which argument is ignored, the 1st or the 2nd)
    inline Dispatcher(used_type used, ignored_type) : Ancestor{used} { }
  };
  template<typename... PRECEEDING> struct Dispatcher<char *, PRECEEDING...> : public Dispatcher<char const *, PRECEEDING...> {
    using Ancestor = Dispatcher<char const *, PRECEEDING...>;
    using Ancestor::Dispatcher;
  };
  template<typename... PRECEEDING> struct Dispatcher<c::const_stringz, PRECEEDING...> : public Dispatcher<char const *, PRECEEDING...> {
    using Ancestor = Dispatcher<char const *, PRECEEDING...>;
    using Ancestor::Dispatcher;
  };
  template<typename... PRECEEDING> struct Dispatcher<c::stringz, PRECEEDING...> : public Dispatcher<char const *, PRECEEDING...> {
    using Ancestor = Dispatcher<char const *, PRECEEDING...>;
    using Ancestor::Dispatcher;
  };
  template<typename... PRECEEDING> struct Dispatcher<c::const_stringn, PRECEEDING...> : public Dispatcher<char const *, PRECEEDING...> {
    using Ancestor = Dispatcher<char const *, PRECEEDING...>;
    using Ancestor::Dispatcher;
  };
  template<typename... PRECEEDING> struct Dispatcher<c::stringn, PRECEEDING...> : public Dispatcher<char const *, PRECEEDING...> {
    using Ancestor = Dispatcher<char const *, PRECEEDING...>;
    using Ancestor::Dispatcher;
  };
  template<typename... PRECEEDING> struct Dispatcher<std::string, PRECEEDING...> : public Dispatcher<char const *, PRECEEDING...> {
    using Ancestor = Dispatcher<char const *, PRECEEDING...>;
    using Ancestor::Dispatcher;
  };
}
#endiv

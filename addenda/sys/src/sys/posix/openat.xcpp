// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.posix.packaging.at.interface // in lieu of packaging::open::interface
namespace sys::posix {
  namespace packaging::openat {
    using namespace packaging::at::interface;
    namespace function {
      using Result = result::Single<id::File>;
      using Position = argument::Position<File>;
      inline auto openat(Position, Pathname, Opening) -> Result;
      inline auto openat(Position, Pathname, Opening, Permissions) -> Result;
    }
    namespace native {
      using Result = result::Single<int>;
      using Position = argument::Position<int>;
      inline auto openat(Position, Pathname, Opening) -> Result;
      inline auto openat(Position, Pathname, Opening, Permissions) -> Result;
    }
  }
  using packaging::openat::function::openat;
  namespace native { using packaging::openat::native::openat; }
}
using sys::posix::openat; // avoid ambiguity with the POSIX C API
#endiv
#divert <ipp>
#import sys.posix.syscall
namespace sys::posix::packaging::openat {
  auto function::openat(Position dirfd, Pathname pathname, Opening flags) -> Result                    { return idiomatic::syscall<id::File>(Syscall::OPENAT, (int)(File)dirfd, (char const *)pathname, (int)flags); }
  auto function::openat(Position dirfd, Pathname pathname, Opening flags, Permissions perms) -> Result { return idiomatic::syscall<id::File>(Syscall::OPENAT, (int)(File)dirfd, (char const *)pathname, (int)flags, (mode_t) perms); }
  auto native::openat(Position dirfd, Pathname pathname, Opening flags) -> Result                      { return idiomatic::syscall<int>(Syscall::OPENAT, (int)dirfd, (char const *)pathname, (int)flags); }
  auto native::openat(Position dirfd, Pathname pathname, Opening flags, Permissions perms) -> Result   { return idiomatic::syscall<int>(Syscall::OPENAT, (int)dirfd, (char const *)pathname, (int)flags, (mode_t) perms); }
}
#endiv

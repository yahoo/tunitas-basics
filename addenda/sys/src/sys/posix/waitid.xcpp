// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sys.posix.packaging.wait.interface
namespace sys::posix {
  namespace packaging::waitid {
    using namespace packaging::wait::interface;
    namespace function { using namespace bundle::waitid::function; }
    namespace native { using namespace bundle::waitid::native; }
  }
}
#endiv
#divert <hpp>
namespace sys::posix::packaging::waitid {
  //
  // waitid(...) - available since Linux 2.6.9 (glibc 2.12)
  //
  namespace function {
    inline auto waitid(identifier::Type, identifier::Untyped, [[in]] Options = Options{}) -> siginfo::Returned;
    inline auto waitid(identifier::Type, identifier::Untyped, [[in]] Options, [[out]] siginfo::Filled &) -> identifier::Returned;
    inline auto waitid(identifier::Type, identifier::Untyped, [[out]] siginfo::Filled &, [[in]] Options) -> identifier::Returned;
    inline auto waitid(identifier::Type, identifier::Untyped, [[in]] Options, siginfo::Unfilled) -> identifier::Returned;
    inline auto waitid(identifier::Type, identifier::Untyped, siginfo::Unfilled, [[in]] Options) -> identifier::Returned;
    //
    template<identifier::Matched MATCHED> inline auto waitid(MATCHED, [[in]] Options = Options{}) -> siginfo::Returned;
    template<identifier::Matched MATCHED> inline auto waitid(MATCHED, [[in]] Options, [[out]] siginfo::Filled &) -> identifier::Returned;
    template<identifier::Matched MATCHED> [[signature("original ordering")]] inline auto waitid(MATCHED, [[out]] siginfo::Filled &, [[in]] Options) -> identifier::Returned;
    template<identifier::Matched MATCHED> inline auto waitid(MATCHED, [[in]] Options, siginfo::Unfilled) -> identifier::Returned;
    template<identifier::Matched MATCHED> [[signature("original ordering")]] inline auto waitid(MATCHED, siginfo::Unfilled, [[in]] Options) -> identifier::Returned;
    //
    template<> inline auto waitid<id::Either>(id::Either, [[in]] Options) -> siginfo::Returned;
    template<> inline auto waitid<id::Either>(id::Either, [[in]] Options, [[out]] siginfo::Filled &) -> identifier::Returned;
    template<> [[signature("original ordering")]] inline auto waitid<id::Either>(id::Either, [[out]] siginfo::Filled &, [[in]] Options) -> identifier::Returned;
    template<> inline auto waitid<id::Either>(id::Either, [[in]] Options, siginfo::Unfilled) -> identifier::Returned;
    template<> [[signature("original ordering")]] inline auto waitid<id::Either>(id::Either, siginfo::Unfilled, [[in]] Options) -> identifier::Returned;
    //
    template<> auto waitid<identifier::Typed>(identifier::Typed, [[in]] Options) -> siginfo::Returned;
    template<> auto waitid<identifier::Typed>(identifier::Typed, [[in]] Options, [[out]] siginfo::Filled &) -> identifier::Returned;
    template<> auto waitid<identifier::Typed>(identifier::Typed, siginfo::Filled &, [[in]] Options options) -> identifier::Returned;
    template<> auto waitid<identifier::Typed>(identifier::Typed, [[in]] Options, siginfo::Unfilled) -> identifier::Returned;
    template<> auto waitid<identifier::Typed>(identifier::Typed, siginfo::Unfilled, [[in]] Options) -> identifier::Returned;
  }
  namespace native {
    // n.b. once the (process) Type {PROCESS, GROUP} has been signalled there is no need/possibility to type-encode "either"
    inline auto waitid(identifier::Type, identifier::Untyped, [[in]] Options = Options{}) -> siginfo::Returned;
    inline auto waitid(identifier::Type, identifier::Untyped, [[in]] Options, [[out]] siginfo::Filled &) -> identifier::Returned;
    inline auto waitid(identifier::Type, identifier::Untyped, [[out]] siginfo::Filled &, [[in]] Options) -> identifier::Returned;
    inline auto waitid(identifier::Type, identifier::Untyped, [[in]] Options, siginfo::Unfilled) -> identifier::Returned;
    inline auto waitid(identifier::Type, identifier::Untyped, siginfo::Unfilled, [[in]] Options) -> identifier::Returned;
    //
    inline auto waitid(identifier::Typed, [[in]] Options = Options{}) -> siginfo::Returned;
    inline auto waitid(identifier::Typed, [[in]] Options, [[out]] siginfo::Filled &) -> identifier::Returned;
    inline auto waitid(identifier::Typed, [[out]] siginfo::Filled &, [[in]] Options) -> identifier::Returned;
    inline auto waitid(identifier::Typed, [[in]] Options, siginfo::Unfilled) -> identifier::Returned;
    inline auto waitid(identifier::Typed, siginfo::Unfilled, [[in]] Options) -> identifier::Returned;
  }
}
namespace sys::posix {
  using packaging::waitid::function::waitid;
  namespace native { using packaging::waitid::native::waitid; }
}
#endiv
#divert <ipp>
#import nonstd.Visitor
#import std.visit // [[FIXTHIS]] move to nonstd::visit when convenient
#import sys.posix.packaging.waitid.returned
namespace sys::posix::packaging::waitid {
  auto function::waitid(identifier::Type type, identifier::Untyped untyped, Options options) -> siginfo::Returned                               { return returned::waitid<id::Process>(type, (id_t)untyped, options); }
  auto function::waitid(identifier::Type type, identifier::Untyped untyped, Options options, siginfo::Filled &ofingis) -> identifier::Returned  { return returned::waitid<id::Process>(type, (id_t)untyped, options, ofingis); }
  auto function::waitid(identifier::Type type, identifier::Untyped untyped, siginfo::Filled &ofingis, Options options) -> identifier::Returned  { return returned::waitid<id::Process>(type, (id_t)untyped, options, ofingis); }
  auto function::waitid(identifier::Type type, identifier::Untyped untyped, Options options, siginfo::Unfilled ofingis) -> identifier::Returned { return returned::waitid<id::Process>(type, (id_t)untyped, options, ofingis); }
  auto function::waitid(identifier::Type type, identifier::Untyped untyped, siginfo::Unfilled ofingis, Options options) -> identifier::Returned { return returned::waitid<id::Process>(type, (id_t)untyped, options, ofingis); }
  //
  template<function::identifier::Matched MATCHED> auto function::waitid(MATCHED matched) -> siginfo::Returned                                                { return waitid(typify(matched), Options{}); }
  template<function::identifier::Matched MATCHED> auto function::waitid(MATCHED matched, Options options) -> siginfo::Returned                               { return waitid(typify(matched), options); }
  template<function::identifier::Matched MATCHED> auto function::waitid(MATCHED matched, Options options, siginfo::Filled &ofnigis) -> identifier::Returned  { return waitid(typify(matched), options, ofnigis); }
  template<function::identifier::Matched MATCHED> auto function::waitid(MATCHED matched, siginfo::Filled &ofnigis, Options options) -> identifier::Returned  { return waitid(typify(matched), ofnigis, options); }
  template<function::identifier::Matched MATCHED> auto function::waitid(MATCHED matched, Options options, siginfo::Unfilled ofnigis) -> identifier::Returned { return waitid(typify(matched), options, ofnigis); }
  template<function::identifier::Matched MATCHED> auto function::waitid(MATCHED matched, siginfo::Unfilled ofnigis, Options options) -> identifier::Returned { return waitid(typify(matched), ofnigis, options); }
  namespace function {
    namespace { using std::get; }
    template<> auto waitid<identifier::Typed>(identifier::Typed matched, Options options) -> siginfo::Returned                               { return returned::waitid<id::Process>(get<0>(matched), get<1>(matched), options); }
    template<> auto waitid<identifier::Typed>(identifier::Typed matched, Options options, siginfo::Filled &ofnigis) -> identifier::Returned  { return returned::waitid<id::Process>(get<0>(matched), get<1>(matched), options, ofnigis); }
    template<> auto waitid<identifier::Typed>(identifier::Typed matched, siginfo::Filled &ofnigis, Options options) -> identifier::Returned  { return returned::waitid<id::Process>(get<0>(matched), get<1>(matched), options, ofnigis); }
    template<> auto waitid<identifier::Typed>(identifier::Typed matched, Options options, siginfo::Unfilled ofnigis) -> identifier::Returned { return returned::waitid<id::Process>(get<0>(matched), get<1>(matched), options, ofnigis); }
    template<> auto waitid<identifier::Typed>(identifier::Typed matched, siginfo::Unfilled ofnigis, Options options) -> identifier::Returned { return returned::waitid<id::Process>(get<0>(matched), get<1>(matched), options, ofnigis); }
  }
  namespace function {
    namespace {
      using nonstd::Visitor;
      using std::visit;
    }
    template<> auto waitid<id::Either>(id::Either matched, Options options) -> siginfo::Returned {
      auto vv = Visitor{[options](id::Process matched) { return waitid(matched, options); },
                        [options](id::Group matched)   { return waitid(matched, options); }};
      return visit(vv, matched);
    }
    template<> auto waitid<id::Either>(id::Either matched, Options options, siginfo::Filled &ofnigis) -> identifier::Returned {
      auto vv = Visitor{[options, &ofnigis](id::Process matched) { return waitid(matched, options, ofnigis); },
                        [options, &ofnigis](id::Group matched)   { return waitid(matched, options, ofnigis); }};
      return visit(vv, matched);
    }
    template<> auto waitid<id::Either>(id::Either matched, siginfo::Filled &ofnigis, Options options) -> identifier::Returned {
      auto vv = Visitor{[options, &ofnigis](id::Process matched) { return waitid(matched, options, ofnigis); },
                        [options, &ofnigis](id::Group matched)   { return waitid(matched, options, ofnigis); }};
      return visit(vv, matched);
    }
    template<> auto waitid<id::Either>(id::Either matched, Options options, siginfo::Unfilled ofnigis) -> identifier::Returned {
      auto vv = Visitor{[options, ofnigis](id::Process matched) { return waitid(matched, options, ofnigis); },
                        [options, ofnigis](id::Group matched)   { return waitid(matched, options, ofnigis); }};
      return visit(vv, matched);
    }
    template<> auto waitid<id::Either>(id::Either matched, siginfo::Unfilled ofnigis, Options options) -> identifier::Returned {
      auto vv = Visitor{[options, ofnigis](id::Process matched) { return waitid(matched, options, ofnigis); },
                        [options, ofnigis](id::Group matched)   { return waitid(matched, options, ofnigis); }};
      return visit(vv, matched);
    }
  }
  //
  auto native::waitid(identifier::Type type, identifier::Untyped untyped, Options options) -> siginfo::Returned {
    auto ofnigis = Siginfo{};
    auto called = idiomatic::syscall<pid_t>(Syscall::WAITID, (int)type, (int)untyped, &ofnigis, (int)options);
    return {good(called), error_num(called), value(called), ofnigis};
  }
  auto native::waitid(identifier::Type type, identifier::Untyped untyped, Options options, siginfo::Filled &ofingis) -> identifier::Returned { return returned::waitid<pid_t>(type, untyped, options, ofingis); }
  auto native::waitid(identifier::Type type, identifier::Untyped untyped, siginfo::Filled &ofingis, Options options) -> identifier::Returned { return returned::waitid<pid_t>(type, untyped, options, ofingis); }
  auto native::waitid(identifier::Type type, identifier::Untyped untyped, Options options, siginfo::Unfilled ofingis) -> identifier::Returned          { return returned::waitid<pid_t>(type, untyped, options, ofingis); }
  auto native::waitid(identifier::Type type, identifier::Untyped untyped, siginfo::Unfilled ofingis, Options options) -> identifier::Returned          { return returned::waitid<pid_t>(type, untyped, options, ofingis); }
  //
  auto native::waitid(identifier::Typed typed, Options options) -> siginfo::Returned                              { return waitid(get<0>(typed), get<1>(typed), options); }
  auto native::waitid(identifier::Typed typed, Options options, siginfo::Filled &ofingis) -> identifier::Returned { return waitid(get<0>(typed), get<1>(typed), options, ofingis); }
  auto native::waitid(identifier::Typed typed, siginfo::Filled &ofingis, Options options) -> identifier::Returned { return waitid(get<0>(typed), get<1>(typed), ofingis, options); }
  auto native::waitid(identifier::Typed typed, Options options, siginfo::Unfilled ofingis) -> identifier::Returned          { return waitid(get<0>(typed), get<1>(typed), options, ofingis); }
  auto native::waitid(identifier::Typed typed, siginfo::Unfilled ofingis, Options options) -> identifier::Returned          { return waitid(get<0>(typed), get<1>(typed), ofingis, options); }
}
#endiv
#divert <cpp>
#import tests.usage.posix_waitid.Usage
static_assert(tests::usage::posix_waitid::Usage<>);
#endiv

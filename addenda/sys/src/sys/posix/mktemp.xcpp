// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import std.filesystem.path
#import std.string
#import std.vector
#import sys.call.result.Value
namespace sys::posix {
  /*
    To Wit:
    Never use mktemp().
    Some implementations follow 4.3BSD and replace XXXXXX by the current
    process ID and a single letter, so that at most 26 different names can
    be returned. Since on the one hand the names are easy to guess, and on
    the other hand there is a race between testing whether the name exists
    and opening the file, every use of mktemp() is a security risk. The race
    is avoided by mkstemp(3) and mkdtemp(3).
  */
  namespace packaging::mktemp {
    namespace function {
      // The TEMPLATE must be a (narrow-)character string specifying a
      // template pattern in which the last six characters are "XXXXXX"
      // See mktemp(3).  Perhaps prefer mkstemp(3).   Also see mkdtemp(3)
      inline auto mktemp(std::string TEMPLATE) -> call::result::Value<std::filesystem::path>;
      // 
      inline auto mktemp(std::vector<char> &TEMPLATE_modified_in_place) -> call::result::Value<bool>;
    }
  }
  using packaging::mktemp::function::mktemp;
}
#endiv
#divert <ipp>
#import sys.posix.packaging.mktemp.perform
namespace sys::posix::packaging::mktemp {
  auto function::mktemp(std::string TEMPLATE) -> call::result::Value<std::filesystem::path> { return perform(TEMPLATE, &::mktemp); }
  auto function::mktemp(std::vector<char> &TEMPLATE_modified) -> call::result::Value<bool>  { return perform(TEMPLATE_modified, &::mktemp); }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sys::ip {
  inline namespace constants { }
}
#endiv
#divert <hpp>
#import sys.ip.Version
#import sys.ip.addr.Family
#import sys.ip.proto.constants
namespace sys::ip::constants {
#if 202003L <= __cplusplus
  // C++20? http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1099r5.html
  using enum class Version;
#else
  inline constexpr auto IPv4 = Version::IPv4;
  inline constexpr auto IPv6 = Version::IPv6;
#endif
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  [[deprecated("instead prefer the full name IPv4")]] inline constexpr auto IP4 = Version::IPv4;
  [[deprecated("instead prefer the full name IPv6")]] inline constexpr auto IP6 = Version::IPv6;
  //
  [[deprecated("instead prefer the full name IPv4")]] inline constexpr auto INET4 = addr::Family<IPv4>;
  [[deprecated("instead prefer the full name IPv6")]] inline constexpr auto INET6 = addr::Family<IPv6>;
  [[deprecated("instead prefer the full name IPv4")]] inline constexpr auto INET = addr::Family<IPv4>;
#pragma GCC diagnostic pop
  //
  using namespace proto::constants; // acquire IP, TCP, UDP and the rest of the IP protocol names (numbers)
}
#endiv
#divert <cpp>
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
namespace {
  namespace tests {
    using namespace sys::ip::constants;
    static_assert(sizeof (INET4));
    static_assert(sizeof (INET6));
    static_assert(sizeof (IP));
    static_assert(sizeof (TCP));
    static_assert(sizeof (UDP));
  }
}
#pragma GCC diagnostic pop
#endiv

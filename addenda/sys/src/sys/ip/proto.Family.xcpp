// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sys.ip.Version
#import sys.ip.required.Version
#import sys.ip.version.Traits
#import sys.pf.Family
namespace sys::ip::proto {
  //
  // The (abandoned) protocol family which mirrors the address family.
  // This is no longer used.  Do not use it in new work.
  //
  // Usage:
  //
  //   auto const p4 = ip::proto::Family<ip::IP4>;
  //   auto const p6 = ip::proto::Family<ip::IP6>;
  //
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  template<Version VERSION>
  requires required::Version<VERSION>
  inline constexpr [[deprecated("avoid in new work; instead prefer addr::Family<VERSION> or proto::Protocol")]] auto Family = pf::Family<version::Traits<VERSION>::PROTOCOL>;
#pragma GCC diagnostic pop
}
#endiv
#divert <cpp>
#import sys.ip.constants
#import sys.pf.constants
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
namespace {
  namespace tests {
    using namespace sys::ip;
    using sys::ip::proto::Family;
    static_assert((int)Family<IPv4> == (int)sys::pf::UNSPEC);
    static_assert((int)Family<IPv6> == (int)sys::pf::UNSPEC);
    static_assert((int)Family<IPv4> == PF_UNSPEC);
    static_assert((int)Family<IPv6> == PF_UNSPEC);
  }
}
#pragma GCC diagnostic pop
#endiv

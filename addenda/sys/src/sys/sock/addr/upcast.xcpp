// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import sockaddr
#import sys.sock.addr.required.Sockaddr
namespace sys::sock::addr::upcast {
  //
  // Reminder: to make Sockaddr<SA> be true, you need the enablements
  //
  //   #import sys.posix.sockaddr_in  (a.k.a. hopefully sys::posix::sockaddr_in4)
  //   #import sys.posix.sockaddr_in6 
  //
  // enablement via sockaddr_traits and required::Sockaddr is with the descendants
  template<required::Sockaddr SOCKADDR> inline constexpr auto to_reference(SOCKADDR &) -> sockaddr &;
  template<required::Sockaddr SOCKADDR> inline constexpr auto to_reference(SOCKADDR const &) -> sockaddr &;
  template<required::Sockaddr SOCKADDR> inline constexpr auto to_address(SOCKADDR &) -> sockaddr *;
  template<required::Sockaddr SOCKADDR> inline constexpr auto to_address(SOCKADDR const &) -> sockaddr const *;
}
#endiv
#divert <ipp>
namespace sys::sock::addr {
  template<required::Sockaddr SOCKADDR> inline constexpr auto upcast::to_reference(SOCKADDR &addr) -> sockaddr & { return *address(addr); }
  template<required::Sockaddr SOCKADDR> inline constexpr auto upcast::to_reference(SOCKADDR const &addr) -> sockaddr const & { return *address(addr); }
  template<required::Sockaddr SOCKADDR> inline constexpr auto upcast::to_address(SOCKADDR &addr) -> sockaddr * { return reinterpret_cast<sockaddr *>(&addr); }
  template<required::Sockaddr SOCKADDR> inline constexpr auto upcast::to_address(SOCKADDR const &addr) -> sockaddr const * { return reinterpret_cast<sockaddr const *>(&addr); }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.is_same
#import sys.sock.Option
#import sys.sock.Options
#import sys.sock.required.Type
#import sys.sock.specification.Specification
namespace sys::sock::required {
  //
  // Any one of the three option containers, but not Type (tself).
  // Normally you'd use overloading to express this.
  // But when overloading on the return type, a template must be used.
  //
  // The main use of this is to provide some type safety for sock::as<RESULT>(...)
  //
  // Usage:
  //
  //   template<required::Options<sys::sock::Type> RESULT> inline auto function(...somehow...) -> RESULT;
  //
  template<typename OPTIONS, typename TYPE> concept bool Options = requires(OPTIONS, TYPE) {
    requires Type<TYPE>;
    requires std::is_same_v<OPTIONS, sock::specification::Specification<TYPE>> || std::is_same_v<OPTIONS, sock::Options> || std::is_same_v<OPTIONS, sock::Option>;
  };
}
#endiv

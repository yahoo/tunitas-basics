// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace want {
      class Fixture;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::want::Fixture : public cppunit::test::Fixture {
public:
  auto test_int128_t() -> void;
  auto test_uint128_t() -> void;
  auto test_minimum() -> void;
  auto test_maximum() -> void;
  auto test_required_Among() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import want.int128  // prove it works
#import want.int128_t // redundant
#import want.uint128_t // redundant

auto tests::unit::want::Fixture::test_int128_t() -> void {
  ::want::int128_t v0 = 0;
  CPPUNIT_ASSERT(0 == v0);
  ::want::int128_t v1 = 1;
  CPPUNIT_ASSERT(1 == v1);
  ::want::int128_t vm1 = -1;
  CPPUNIT_ASSERT(-1 == vm1);
}

auto tests::unit::want::Fixture::test_uint128_t() -> void {
  ::want::uint128_t v0 = 0;
  CPPUNIT_ASSERT(0 == v0);
  ::want::uint128_t v1 = 1;
  CPPUNIT_ASSERT(1 == v1);
}

#import want.minimum
auto tests::unit::want::Fixture::test_minimum() -> void {
  using ::want::minimum;
  {
    auto actual = minimum(1, 1);
    auto expected = 1;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    auto actual = minimum(1, 2);
    auto expected = 1;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    auto actual = minimum(2, 1);
    auto expected = 1;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    auto actual = minimum(1, 2, 3);
    auto expected = 1;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    auto actual = minimum(3, 2, 1);
    auto expected = 1;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    auto actual = minimum(12015, 26402, 7864, 32510, 31991, 28544, 19445, 30779, 6123, 28649, 12133, 12702, 6217, 2932, 1, 28086, 2267, 30945, 4223, 4397, 13569, 32515, 21052, 26118, 20110, 20006, 24232, 31084, 22391);
    auto expected = 1;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
}

#import want.maximum
auto tests::unit::want::Fixture::test_maximum() -> void {
  using ::want::maximum;
  {
    auto actual = maximum(-1, -1);
    auto expected = -1;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    auto actual = maximum(-1, -2);
    auto expected = -1;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    auto actual = maximum(-2, -1);
    auto expected = -1;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    auto actual = maximum(-1, -2, -3);
    auto expected = -1;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    auto actual = maximum(-3, -2, -1);
    auto expected = -1;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    auto actual = maximum(-12015, -26402, -7864, -32510, -31991, -28544, -19445, -30779, -6123, -28649, -12133, -12702, -6217, -2932, -1, -28086, -2267, -30945, -4223, -4397, -13569, -32515, -21052, -26118, -20110, -20006, -24232, -31084, -22391);
    auto expected = -1;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
}

#import want.nonstd.required.Among
auto tests::unit::want::Fixture::test_required_Among() -> void {
  using ::want::nonstd::required::Among;
  using Something = int;
  static_assert(Among<Something, short, int, long>);
  static_assert(!Among<Something, float, double, long double>);
  using Something_Else = char;
  static_assert(!Among<Something_Else, short, int, long>);
  static_assert(!Among<Something_Else, float, double, long double>);
}

#import tests.unit.want.cppunit.Fixture
#import tests.unit.want.int128.Fixture
#import rigging.suite.io
auto tests::unit::want::Fixture::suite() -> ::cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("want");
  series << call("int128_t", &Fixture::test_int128_t)
         << call("uint128_t", &Fixture::test_uint128_t)
         << call("minimum", &Fixture::test_minimum)
         << call("maximum", &Fixture::test_maximum)
         << add<cppunit::Fixture>()
         << add<int128::Fixture>()
    ;
  {
    Stream req("required");
    req << call("Among", &Fixture::test_required_Among)
      ;
    series << move(req);
  }
  return finalize(series);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import ip.in4
#import ip.in6
#import std.uint8_t
#import std.uint16_t
#import std.uint32_t
#import std.uint64_t
namespace tests::unit::make {
  //
  // Convenience functions to make some IPv4 and IPv6 addresses, from literal integers.
  //
  // Digits in "big endian" order, convert to (x86_64, cpu order, little endian)
  //
  inline auto in4_addr_t(std::uint8_t v3, std::uint8_t v2, std::uint8_t v1, std::uint8_t v0) -> ::ip::in4::addr_t;
  inline auto in4_addr_t(std::uint16_t v32, std::uint16_t v10) -> ::ip::in4::addr_t;
  inline auto in4_addr_t(std::uint32_t v3210) -> ::ip::in4::addr_t;

  inline auto in6_addr_t(std::uint8_t vf, std::uint8_t ve, std::uint8_t vd, std::uint8_t vc, std::uint8_t vb, std::uint8_t va, std::uint8_t v9, std::uint8_t v8, std::uint8_t v7, std::uint8_t v6, std::uint8_t v5, std::uint8_t v4, std::uint8_t v3, std::uint8_t v2, std::uint8_t v1, std::uint8_t v0) -> ::ip::in6::addr_t;
  inline auto in6_addr_t(std::uint16_t vfe, std::uint16_t vdc, std::uint16_t vba, std::uint16_t v98, std::uint16_t v76, std::uint16_t v54, std::uint16_t v32, std::uint16_t v10) -> ::ip::in6::addr_t;
  inline auto in6_addr_t(std::uint32_t vfedc, std::uint32_t vba98, std::uint32_t v7654, std::uint32_t v3210) -> ::ip::in6::addr_t;
  inline auto in6_addr_t(std::uint64_t vfedcba98, std::uint64_t v76543210) -> ::ip::in6::addr_t;
}
#endiv
#divert <ipp>
#import want.cppunit.int128
using ::want::cppunit::operator<<;

#import ip.endian.network_order

#import std.hex
#import std.cerr
namespace {
  template<typename RESULT, typename WORD, std::size_t N> auto generate(WORD const (&words)[N]) -> RESULT {
    auto integer = RESULT{};
    for (auto word : words) {
      std::cerr << "piece " << std::hex << (unsigned) word << ' ' << integer << '\n';
      if constexpr (1 != N) {
          integer <<= 8 * sizeof (word);
        }
      integer |= word;
    }
    std::cerr << "integer " << std::hex << integer << '\n';
    return integer;
  }
}

auto tests::unit::make::in4_addr_t(std::uint8_t v3, std::uint8_t v2, std::uint8_t v1, std::uint8_t v0) -> ::ip::in4::addr_t {
  using ::ip::endian::network_order;
  std::uint8_t layout[]{ v3, v2, v1, v0 };
  { std::uint32_t integer{0};
    for (auto no  : {v3, v2, v1, v0}) {
        integer <<= 8 * sizeof (char);
        integer |= (unsigned) no;
    }
    std::cerr << "DEBUG 4arg integer " << std::hex << integer << '\n'; }
  return generate<::ip::in4::addr_t>(layout);
}

auto tests::unit::make::in4_addr_t(std::uint16_t v32, std::uint16_t v10) -> ::ip::in4::addr_t {
  using ::ip::endian::network_order;
  std::uint16_t const layout[]{ v32, v10 };
  { std::uint32_t integer{0};
    for (auto no  : {v32, v10}) {
        integer <<= 8 * sizeof (char);
        integer |= (unsigned) no;
    }
    std::cerr << "DEBUG 4arg integer " << std::hex << integer << '\n'; }
  return generate<::ip::in4::addr_t>(layout);
}

auto tests::unit::make::in4_addr_t(std::uint32_t v3210) -> ::ip::in4::addr_t {
  std::uint32_t const layout[]{ v3210 };
  return generate<::ip::in4::addr_t>(layout);
}

auto tests::unit::make::in6_addr_t(std::uint8_t vf, std::uint8_t ve, std::uint8_t vd, std::uint8_t vc,
                                       std::uint8_t vb, std::uint8_t va, std::uint8_t v9, std::uint8_t v8,
                                       std::uint8_t v7, std::uint8_t v6, std::uint8_t v5, std::uint8_t v4,
                                       std::uint8_t v3, std::uint8_t v2, std::uint8_t v1, std::uint8_t v0) -> ::ip::in6::addr_t {
  using ::ip::endian::network_order;
  std::uint8_t const layout[] { vf, ve, vd, vc, vb, va, v9, v8, v7, v6, v5, v4, v3, v2, v1, v0 };
  return generate<::ip::in6::addr_t>(layout);
}

auto tests::unit::make::in6_addr_t(std::uint16_t vfe, std::uint16_t vdc, std::uint16_t vba, std::uint16_t v98,
                                       std::uint16_t v76, std::uint16_t v54, std::uint16_t v32, std::uint16_t v10) -> ::ip::in6::addr_t {
  using ::ip::endian::network_order;
  std::uint16_t const layout[] { vfe, vdc, vba, v98, v76, v54, v32, v10 };
  return generate<::ip::in6::addr_t>(layout);
}

auto tests::unit::make::in6_addr_t(std::uint32_t vfedc, std::uint32_t vba98, std::uint32_t v7654, std::uint32_t v3210) -> ::ip::in6::addr_t {
  using ::ip::endian::network_order;
  std::uint32_t const layout[]{ vfedc, vba98, v7654, v3210 };
  return generate<::ip::in6::addr_t>(layout);
}

auto tests::unit::make::in6_addr_t(std::uint64_t vfedcba98, std::uint64_t v76543210) -> ::ip::in6::addr_t {
  using ::ip::endian::network_order;
  std::uint64_t const layout[]{ vfedcba98, v76543210 };
  return generate<::ip::in6::addr_t>(layout);
}
#endiv

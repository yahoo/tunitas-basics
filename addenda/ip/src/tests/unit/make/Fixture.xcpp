// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::make { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::make::Fixture : public cppunit::test::Fixture {
public:
  auto test_make_in4_4arg() -> void;
  auto test_make_in4_2arg() -> void;
  auto test_make_in4_1arg() -> void;
  auto test_make_in6_16arg() -> void;
  auto test_make_in6_8arg() -> void;
  auto test_make_in6_4arg() -> void;
  auto test_make_in6_2arg() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.cerr
#import std.hex

#import nonstd.uint128_t
#import want.cppunit.int128
using ::want::cppunit::operator<<;

#import tests.unit.make.constructors
auto tests::unit::make::Fixture::test_make_in4_4arg() -> void {
  { std::uint32_t integer{0};
    for (unsigned char word  : {127,0,0,1}) {
        integer <<= 8 * sizeof (char);
      integer |= word;
    }
    std::cerr << "DEBUG integer " << std::hex << integer << '\n'; }

  auto made = in4_addr_t(127, 0, 0, 1);
  auto const actual = made;
  auto const expected = ::ip::in4::addr_t{(127<<24) | 1};
  std::cerr << __FUNCTION__ << '\n'
            << " expected: " << std::hex << expected << '\n'
            << " actual:   " << std::hex << actual << '\n';
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::make::Fixture::test_make_in4_2arg() -> void {
  auto made = in4_addr_t(127<<8, 1);
  auto const actual = made;
  auto const expected = ::ip::in4::addr_t{((127<<8)<<16) | 1};
  std::cerr << __FUNCTION__ << '\n'
            << " expected: " << std::hex << expected << '\n'
            << " actual:   " << std::hex << actual << '\n';
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::make::Fixture::test_make_in4_1arg() -> void {
  auto made = in4_addr_t(0x0'12'34'56'78u);
  auto const actual = made;
  auto const expected = ::ip::in4::addr_t{0x0'12'34'56'78u};
  std::cerr << __FUNCTION__ << '\n'
            << " expected: " << std::hex << expected << '\n'
            << " actual:   " << std::hex << actual << '\n';
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::make::Fixture::test_make_in6_16arg() -> void {
  //                       1      2    3     4     5     6     7     8     9    10    11    12    13    14    15    16
  auto made = in6_addr_t(0x1u, 0x2u, 0x3u, 0x4u, 0x5u, 0x6u, 0x7u, 0x8u, 0x8u, 0x7u, 0x6u, 0x5u, 0x4u, 0x3u, 0x2u, 0x1u);
  auto const actual = made;
  auto const expected = nonstd::uint128_t(0x0'0102'0304'0506'0708lu) << 64 | 0x0'0807'0605'0403'0201;
  std::cerr << __FUNCTION__ << '\n'
            << " expected: " << std::hex << expected << '\n'
            << " actual:   " << std::hex << actual << '\n';
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::make::Fixture::test_make_in6_8arg() -> void {
  auto made = in6_addr_t(0x12u, 0x34u, 0x56u, 0x78u, 0x87u, 0x65u, 0x43u, 0x21u);
  auto const actual = made;
  auto const expected = nonstd::uint128_t(0x0'0012'0034'0056'0078lu) << 64 | 0x0'0087'0065'0043'0021;
  std::cerr << __FUNCTION__ << '\n'
            << " expected: " << std::hex << expected << '\n'
            << " actual:   " << std::hex << actual << '\n';
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::make::Fixture::test_make_in6_4arg() -> void {
  auto made = in6_addr_t(0x0'12'34lu, 0x0'56'78lu, 0x0'87'65, 0x0'43'21lu);
  auto const actual = made;
  auto const expected = nonstd::uint128_t(0x0'0000'1234'0000'5678lu) << 64 | 0x0'0000'8765'0000'4321;
  std::cerr << __FUNCTION__ << '\n'
            << " expected: " << std::hex << expected << '\n'
            << " actual:   " << std::hex << actual << '\n';
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::make::Fixture::test_make_in6_2arg() -> void {
  auto made = in6_addr_t(0x0'1234'5678lu << 32, 0x0'8765'4321lu);
  auto const actual = made;
  auto const expected = (nonstd::uint128_t(0x0'1234'5678lu) << 32) << 64 | 0x0'8765'4321lu;
  std::cerr << __FUNCTION__ << '\n'
            << " expected: " << std::hex << expected << '\n'
            << " actual:   " << std::hex << actual << '\n';
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
#import rigging.suite.io
auto tests::unit::make::Fixture::suite() -> ::cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("make");
  {
    Stream in4("in4");
    in4 << call("4arg", &Fixture::test_make_in4_4arg)
       << call("2arg", &Fixture::test_make_in4_2arg)
       << call("1arg", &Fixture::test_make_in4_1arg)
      ;
    series << move(in4);
  } {
    Stream in6("in6");
    in6 << call("16arg", &Fixture::test_make_in6_16arg)
        << call("8arg", &Fixture::test_make_in6_8arg)
        << call("4arg", &Fixture::test_make_in6_4arg)
        << call("2arg", &Fixture::test_make_in6_2arg)
      ;
    series << move(in6);
  }
  return finalize(series);
}
#endiv

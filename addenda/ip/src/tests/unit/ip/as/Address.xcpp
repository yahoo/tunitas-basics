// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::ip::as {
  class Address;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::ip::as::Address : public cppunit::test::Fixture {
public:
  // Naming Convention
  // Given
  //     auto as<...>(Address const &) -> RETURNING
  // Then
  //     auto test_RETURNING() -> void
  //
  // as<...>(...) but also constructors
  //
  auto test_as_returning_Address_given_Address_case_default() -> void;
  auto test_as_returning_Address_given_Address_case_address_IPv4() -> void;
  auto test_as_returning_Address_given_Address_case_address_IPv6() -> void;
  auto test_as_returning_Address_given_Address_case_string_IPv4() -> void;
  auto test_as_returning_Address_given_Address_case_string_IPv6() -> void;

  auto test_as_returning_in4_addr_given_Address() -> void;
  auto test_as_returning_in6_addr_given_Address() -> void;
  auto test_as_returning_in4_addr_t_given_Address() -> void;
  auto test_as_returning_in6_addr_t_given_Address() -> void;
  auto test_as_returning_in4_string_given_Address() -> void;
  auto test_as_returning_in6_string_given_Address() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import tests.unit.make.constructors
#import ip.in4
#import ip.in6
#import ip.as
#import ip.Address

auto tests::unit::ip::as::Address::test_as_returning_Address_given_Address_case_default() -> void {
  ::ip::Address a0;
  ::ip::Address a1;
  CPPUNIT_ASSERT_EQUAL(a0, a1);
  auto actual = ::ip::as<::ip::Address>(a0); // <------------------------------- test this
  auto expected = a1;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::ip::as::Address::test_as_returning_Address_given_Address_case_address_IPv4() -> void {
  // respect ... RFC 3849
  ::ip::Address a0(make::in4_addr_t(192, 0, 2, 3));
  ::ip::Address a1 = a0;
  CPPUNIT_ASSERT_EQUAL(a0, a1);
  CPPUNIT_ASSERT(a0.isIPv4());
  auto actual = ::ip::as<::ip::Address>(a0); // <------------------------------- test this
  auto expected = a1;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::ip::as::Address::test_as_returning_Address_given_Address_case_address_IPv6() -> void {
  // respect ... RFC 5737
  ::ip::Address a0(make::in6_addr_t(0x20, 0x01, 0x0d, 0xb8,
                                    0x7e, 0xd1, 0x4b, 0x2f,
                                    0x37, 0xdb, 0x49, 0xd6,
                                    0x80, 0x6d, 0x58, 0xce));
  ::ip::Address a1 = a0;
  CPPUNIT_ASSERT_EQUAL(a0, a1);
  CPPUNIT_ASSERT(a0.isIPv6());
  auto actual = ::ip::as<::ip::Address>(a0); // <------------------------------- test this
  auto expected = a1;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::ip::as::Address::test_as_returning_Address_given_Address_case_string_IPv4() -> void {
  auto const literal = "192.0.2.1";
  ::ip::Address a0(literal);
  ::ip::Address a1 = a0;
  CPPUNIT_ASSERT_EQUAL(a0, a1);
  CPPUNIT_ASSERT(a0.isIPv4());
  auto actual = ::ip::as<::ip::Address>(a0); // <------------------------------- test this
  auto expected = a1;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::ip::as::Address::test_as_returning_Address_given_Address_case_string_IPv6() -> void {
  auto const literal = "2001:db08:d8a5:48e2:9b1b:ceae::0bcc:be18";
  ::ip::Address a0(literal);
  ::ip::Address a1 = a0;
  CPPUNIT_ASSERT_EQUAL(a0, a1);
  CPPUNIT_ASSERT(a0.isIPv6());
  auto actual = ::ip::as<::ip::Address>(a0); // <------------------------------- test this
  auto expected = a1;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::ip::as::Address::test_as_returning_in4_addr_given_Address() -> void {
  // respect ... RFC 3849
  ::ip::Address specimen(make::in4_addr_t(192, 0, 2, 77));
  auto subject = ::ip::as<::ip::in4::addr>(specimen); // <------------------ test this
  ::ip::Address actual(subject);
  ::ip::Address expected = specimen;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::ip::as::Address::test_as_returning_in6_addr_given_Address() -> void {
  // respect ... RFC 5737
  ::ip::Address specimen(make::in6_addr_t(0x20, 0x01, 0x0d, 0xb8,
                                          0xb6, 0x26, 0xf7, 0x8a,
                                          0x53, 0x61, 0x44, 0x7e,
                                          0xb6, 0x77, 0x36, 0x0b));
  ::ip::in6::addr subject = ::ip::as<::ip::in6::addr>(specimen); // <---------------- test this
  ::ip::Address roundtrip(subject);
  CPPUNIT_ASSERT_EQUAL(specimen, roundtrip);
  ::ip::Address actual(subject);
  ::ip::Address expected = specimen;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::ip::as::Address::test_as_returning_in4_addr_t_given_Address() -> void {
  // respect ... RFC 3849
  ::ip::Address specimen(make::in4_addr_t(192, 0, 2, 66));
  auto subject = ::ip::as<::ip::in4::addr_t>(specimen); // <---------------- test this
  ::ip::Address roundtrip(subject);
  CPPUNIT_ASSERT_EQUAL(specimen, roundtrip);
  ::ip::Address actual(subject);
  ::ip::Address expected = specimen;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::ip::as::Address::test_as_returning_in6_addr_t_given_Address() -> void {
  // respect ... RFC 5737
  ::ip::Address specimen(make::in6_addr_t(0x20, 0x01, 0x0d, 0xb8,
                                          0xac, 0x44, 0x48, 0xa2,
                                          0xde, 0x48, 0x4e, 0xe7,
                                          0xad, 0x2d, 0xf5, 0x50));
  auto subject = ::ip::as<::ip::in6::addr_t>(specimen); // <---------------- test this
  ::ip::Address roundtrip(subject);
  CPPUNIT_ASSERT_EQUAL(specimen, roundtrip);
  ::ip::Address actual(subject);
  ::ip::Address expected = specimen;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::ip::as::Address::test_as_returning_in4_string_given_Address() -> void {
  // respect ... RFC 3849
  ::ip::in4::addr_t specimen = make::in4_addr_t(192, 0, 2, 55);
  auto actual = ::ip::as<std::string>(specimen); // <---------------- test this
  std::string expected = "192.0.2.55";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::ip::as::Address::test_as_returning_in6_string_given_Address() -> void {
  // respect ... RFC 5737
  ::ip::in6::addr_t specimen = make::in6_addr_t(0x20, 0x01, 0x0d, 0xb8,
                                                0x45, 0x6d, 0x01, 0xae,
                                                0x9a, 0xcc, 0x42, 0x53,
                                                0xa2, 0xff, 0x03, 0x42);
  auto actual = ::ip::as<std::string>(specimen); // <---------------- test this
  std::string expected = "2001:db8:456d:1ae:9acc:4253:a2ff:342";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

#import rigging.suite.io
auto tests::unit::ip::as::Address::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("as<RETURNING>(Address const &)");
  {
    Stream address("Address");
    address << call("default", &Address::test_as_returning_Address_given_Address_case_default)
      ;
    {
      Stream ad("addr");
      ad << call("IPv4", &Address::test_as_returning_Address_given_Address_case_address_IPv4)
         << call("IPv6", &Address::test_as_returning_Address_given_Address_case_address_IPv6)
        ;
      address << move(ad);
    } {
      Stream st("string");
      st << call("IPv4", &Address::test_as_returning_Address_given_Address_case_string_IPv4)
         << call("IPv6", &Address::test_as_returning_Address_given_Address_case_string_IPv6)
        ;
      address << move(st);
    }
    series << move(address);
  } {
    Stream in4("in4");
    in4 << call("addr", &Address::test_as_returning_in4_addr_given_Address)
        << call("addr_t", &Address::test_as_returning_in4_addr_t_given_Address)
        << call("string", &Address::test_as_returning_in4_string_given_Address)
      ;
    series << move(in4);
  } {
    Stream in6("in6");
    in6 << call("addr", &Address::test_as_returning_in6_addr_given_Address)
        << call("addr_t", &Address::test_as_returning_in6_addr_t_given_Address)
        << call("string", &Address::test_as_returning_in6_string_given_Address)
      ;
    series << move(in6);
  }
  return finalize(series);
}
#endiv

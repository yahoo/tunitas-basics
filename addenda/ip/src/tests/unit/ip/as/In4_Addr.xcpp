// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::ip::as {
  class In4_Addr;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Address
class tests::unit::ip::as::In4_Addr : public cppunit::test::Address {
public:
  // Naming Convention
  // Given
  //     auto as<...>(in4::addr const &) -> RETURNING
  // Then
  //     auto test_RETURNING() -> void
  //
  auto test_Address() -> void;
  auto test_in4_addr() -> void;
  auto test_in6_addr() -> void;
  auto test_in4_addr_t() -> void;
  auto test_in6_addr_t() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import tests.unit.make
#import ip.as
#import ip.in4
#import ip.in6
#import ip.Address

auto tests::unit::ip::as::In4_Addr::test_Address() -> void {
  {
    // respect ... RFC 3849
    auto a0 = make::in4_addr(192.0.2.3);
    auto a1 = a0;
    CPPUNIT_ASSERT_EQUAL(a0, a1);
    auto actual = ::ip::as<::ip::Address>(a0); // <------------------------------- test this
    auto expected = a1;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    // respect ... RFC 5737
    auto a0 = make::in6_addr(0x20, 0x01, 0x0d, 0xb8,
                             0x7e, 0xd1, 0x4b, 0x2f,
                             0x37, 0xdb, 0x49, 0xd6,
                             0x80, 0x6d, 0x58, 0xce);
    auto a1 = a0;
    CPPUNIT_ASSERT_EQUAL(a0, a1);
    auto actual = ::ip::as<::ip::Address>(a0); // <------------------------------- test this
    auto expected = a1;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
}

auto tests::unit::ip::as::In4_Addr::test_in4_addr() -> void {
  // respect ... RFC 3849
  auto specimen = make::in4_addr(192, 0, 2, 77);
  auto subject = ::ip::in4::as<::ip::in4::addr>(specimen); // <------------------ test this
  auto actual = subject;
  auto expected = specimen;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::ip::as::In4_Addr::test_in6_addr() -> void {
  // respect ... RFC 5737
  auto specimen = make::in6_addr(0x20, 0x01, 0x0d, 0xb8,
                                 0xb6, 0x26, 0xf7, 0x8a,
                                 0x53, 0x61, 0x44, 0x7e,
                                 0xb6, 0x77, 0x36, 0x0b);
  auto subject = ::ip::in6::as<::ip::in6::addr>(specimen); // <---------------- test this
  auto roundtrip = subject;
  CPPUNIT_ASSERT_EQUAL(specimen, roundtrip);
  auto actual = subject;
  auto expected = specimen;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::ip::as::In4_Addr::test_in4_addr_t() -> void {
  // respect ... RFC 3849
  auto specimen = make::in4_addr(192, 0, 2, 66);
  auto subject = ::ip::in4::as<::ip::in4::addr_t>(specimen); // <---------------- test this
  auto actual = subject;
  auto expected = make::in4_addr_t(192, 0, 2, 66);
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::ip::as::In4_Addr::test_in6_addr_t() -> void {
  // respect ... RFC 5737
  auto specimen = make::in6_addr(0x20, 0x01, 0x0d, 0xb8,
                                 0xac, 0x44, 0x48, 0xa2,
                                 0xde, 0x48, 0x4e, 0xe7,
                                 0xad, 0x2d, 0xf5, 0x50);
  auto subject = ::ip::in6::as<::ip::in6::addr_t>(specimen); // <---------------- test this
  auto actual = subject;
  auto expected = make::in6_addr_t(0x20, 0x01, 0x0d, 0xb8,
                                   0xac, 0x44, 0x48, 0xa2,
                                   0xde, 0x48, 0x4e, 0xe7,
                                   0xad, 0x2d, 0xf5, 0x50);
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

#import rigging.suite.io
auto tests::unit::ip::as::In4_Addr::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("as<TYPE>(in4::addr const &)");
  {
    Stream in4("in4");
    in4
      << call("addr", &Address::test_in4_addr)
      << call("addr_t", &Address::test_in4_addr_t)
      ;
    Stream in6("in6");
    in6
      << call("addr", &Address::test_in6_addr)
      << call("addr_t", &Address::test_in6_addr_t)
      ;
  }
  series
    << call("Address", &In4_Addr::test_Address)
    << move(in4)
    << move(in6);
  ;
  return finalize(series);
}
#endiv

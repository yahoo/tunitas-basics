// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::ip::inet { class Protocol; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import ip.inet.Protocol
class tests::unit::ip::inet::Protocol : public cppunit::test::Fixture {
public:
  using Subject = ::ip::inet::Protocol;
  auto test_type() -> void;
  auto test_constants() -> void;
  auto test_concept() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import ip.inet.required.Protocol
#import ip.inet.Protocol
#import ip.inet.af.Type
#import sys.posix.af.Type
#import std.is_same
#import std.is_enum
#import std.string
namespace tests::unit::ip::inet {
  auto Protocol::test_type() -> void {
    auto subject = Subject{};
    static_assert(std::is_same_v<Subject, ::ip::inet::Protocol>);
    static_assert(std::is_same_v<Subject, ::ip::inet::ipproto::Type>);
    static_assert(std::is_same_v<Subject, ::sys::ip::proto::Protocol>);
    static_assert(std::is_enum_v<Subject>);
    CPPUNIT_ASSERT(sizeof (subject));
  }
  auto Protocol::test_constants() -> void {
    CPPUNIT_ASSERT(sizeof (Subject::NONE));
    CPPUNIT_ASSERT(sizeof (Subject::IP));
    CPPUNIT_ASSERT(sizeof (Subject::TCP));
    CPPUNIT_ASSERT(sizeof (Subject::UDP));
  }
  auto Protocol::test_concept() -> void {
    static_assert(::ip::inet::required::Protocol<Subject>);
    static_assert(!::ip::inet::required::Protocol<int>);
    static_assert(!::ip::inet::required::Protocol<char const *>);
    static_assert(!::ip::inet::required::Protocol<std::string>);
  }
}
#import rigging.suite.io
auto tests::unit::ip::inet::Protocol::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("Protocol");
  series << call("type", &Protocol::test_type)
         << call("constants", &Protocol::test_constants)
    ;
  return finalize(series);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::ip::inet::sockaddr { class Address; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::ip::inet::sockaddr::Address : public cppunit::test::Fixture {
public:
  auto test_Rhs_in4() -> void;
  auto test_Rhs_in6() -> void;
  auto test_Lhs_in4() -> void;
  auto test_Lhs_in6() -> void;
  //
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.cerr
#import std.setw
#import std.hex
#import std.setfill
#import std.string_view

#import ip.as
#import tests.unit.make.constructors

#import want.cppunit.int128
using ::want::cppunit::operator<<;

#import ip.inet.address // ------------ test this
#import ip.inet.sockaddr.Lhs.ADDRESS.in4
auto tests::unit::ip::inet::sockaddr::Address::test_Rhs_in4() -> void {
  using ::ip::inet::address;
  auto specimen_family = ::ip::inet::AF::INET4;
  auto specimen_port = ::ip::endian::network_order<::ip::in::port_t>(12345);
  auto specimen_addr = make::in4_addr_t(127, 0, 0, 1);
  ::ip::in4::sockaddr sa;
  sa.sin_family = (int)(specimen_family);
  sa.sin_port = specimen_port;
  sa.sin_addr = ::ip::as<::ip::in4::addr>(specimen_addr);
  {
    ::ip::in4::addr_t at = address(sa); // <-------------------------- test this
    auto actual = at;
    auto expected = specimen_addr;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
}

#import std.cerr
#import std.hex
#import nonstd.uint128_t
auto tests::unit::ip::inet::sockaddr::Address::test_Rhs_in6() -> void {
  using ::ip::inet::address;
  auto specimen_family = ::ip::inet::AF::INET6;
  auto specimen_port = ::ip::endian::network_order<::ip::in::port_t>(12345);
  auto specimen_addr = make::in6_addr_t(0x0lu, 0x99lu);
  std::cerr << +__FUNCTION__ << '\n';
  { auto const ac = specimen_addr;
    auto const ex = nonstd::uint128_t{0x99u};
    std::cerr << "debug Address ac=" << std::hex << ac << '\n';
    std::cerr << "debug Address ex=" << std::hex << ex << '\n';
    CPPUNIT_ASSERT_EQUAL(ex, ac); }
  ::ip::in6::sockaddr sa;
  sa.sin6_family = (int)(specimen_family);
  sa.sin6_port = specimen_port;
  sa.sin6_addr = ::ip::as<::ip::in6::addr>(specimen_addr);
  { std::ostream &outbound{std::cerr};
    auto view = std::string_view{(char const *) &sa.sin6_addr, sizeof (sa.sin6_addr)};
    outbound << "debug view #1: ";
    for (unsigned char ch : view) {
      outbound << std::hex << std::setw(2) << std::setfill('0') << (unsigned) ch;
    }
    outbound << '\n'; }
  {
    ::ip::in6::addr ad = address(sa);
  { std::ostream &outbound{std::cerr};
    auto view = std::string_view{(char const *) &ad, sizeof (ad)};
    outbound << "debug view #2: ";
    for (unsigned char ch : view) {
      outbound << std::hex << std::setw(2) << std::setfill('0') << (unsigned) ch;
    }
    outbound << '\n'; }

  }
  {
    ::ip::in6::addr_t at = address(sa); // <-------------------------- test this
    auto actual = at;
    auto expected = specimen_addr;
    { auto const ac = actual;
      auto const ex = expected;
      std::cerr << "debug recovered ac=" << std::hex << ac << '\n';
      std::cerr << "debug recovered ex=" << std::hex << ex << '\n';
      CPPUNIT_ASSERT_EQUAL(ex, ac); }
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
}

#import std.uint32_t
auto tests::unit::ip::inet::sockaddr::Address::test_Lhs_in4() -> void {
  using ::ip::inet::address;
  auto specimen_family = ::ip::inet::AF::INET4;
  auto specimen_port = ::ip::endian::network_order<::ip::in::port_t>(12345);
  auto specimen_addr = make::in4_addr_t(127, 0, 0, 1);
  auto other_address = std::uint32_t{0x2}; // host order "almost home"
  ::ip::in4::sockaddr sa;
  sa.sin_family = (int)(specimen_family);
  sa.sin_port = specimen_port;
  sa.sin_addr = ::ip::as<::ip::in4::addr>(specimen_addr);
  address(sa) = other_address; // <------------------------------------ test this
  {
    ::ip::in4::addr_t at = address(sa); // <--------------------------  test this
    auto actual = at;
    auto expected = other_address;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
}

auto tests::unit::ip::inet::sockaddr::Address::test_Lhs_in6() -> void {
  using ::ip::inet::address;
  auto specimen_family = ::ip::inet::AF::INET6;
  auto specimen_port = ::ip::endian::network_order<::ip::in::port_t>(12345);
  auto specimen_addr = make::in6_addr_t(0lu, 1ul); // there's no place like ::1
  CPPUNIT_ASSERT(0 != specimen_addr);
  auto other_address = nonstd::uint128_t{2ul}; // host order "almost home"
  ::ip::in6::sockaddr sa;
  sa.sin6_family = (int)(specimen_family);
  sa.sin6_port = specimen_port;
  sa.sin6_addr = ::ip::as<::ip::in6::addr>(specimen_addr);
  { std::ostream &outbound{std::cerr};
    auto view = std::string_view{(char const *) &sa.sin6_addr, sizeof (sa.sin6_addr)};
    outbound << "view #1: ";
    for (unsigned char ch : view) {
      outbound << std::hex << std::setw(2) << std::setfill('0') << (unsigned) ch;
    }
    outbound << '\n'; }
  address(sa) = other_address; // <------------------------------------ test this
  { std::ostream &outbound{std::cerr};
    auto view = std::string_view{(char const *) &sa.sin6_addr, sizeof (sa.sin6_addr)};
    outbound << "view #2: ";
    for (unsigned char ch : view) {
      outbound << std::hex << std::setw(2) << std::setfill('0') << (unsigned) ch;
    }
    outbound << '\n'; }
  {
    ::ip::in6::addr_t at = address(sa); // <--------------------------- test this
    std::cerr << "debug at(1) " << std::hex << at << '\n';
    at = ::ip::as<typename ::ip::in6::addr_t>(sa.sin6_addr);
    std::cerr << "debug at(2) " << std::hex << at << '\n';
    ::ip::in6::addr ad = address(sa);
  { std::ostream &outbound{std::cerr};
    auto view = std::string_view{(char const *) &ad, sizeof (ad)};
    outbound << "debug ad : ";
    for (unsigned char ch : view) {
      outbound << std::hex << std::setw(2) << std::setfill('0') << (unsigned) ch;
    }
    outbound << '\n'; }
    auto actual = at;
    auto expected = other_address;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
}

#import rigging.suite.io
auto tests::unit::ip::inet::sockaddr::Address::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("address");
  {
    Stream rhs("rhs");
    rhs << call("in4", &Address::test_Rhs_in4)
        << call("in6", &Address::test_Rhs_in6)
      ;
    series << move(rhs);
  } {
    Stream lhs("lhs");
    lhs << call("in4", &Address::test_Lhs_in4)
        << call("in6", &Address::test_Lhs_in6)
      ;
    series << move(lhs);
  }
  return finalize(series);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::ip::inet::sockaddr { class Family; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::ip::inet::sockaddr::Family : public cppunit::test::Fixture {
public:
  auto test_Rhs_in4() -> void;
  auto test_Rhs_in6() -> void;
  auto test_Lhs_in4() -> void;
  auto test_Lhs_in6() -> void;
  //
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import ip.as
#import tests.unit.make.constructors

#import want.cppunit.int128
using ::want::cppunit::operator<<;

#import ip.inet.family // ------------ test this
auto tests::unit::ip::inet::sockaddr::Family::test_Rhs_in4() -> void {
  using ::ip::inet::family;
  auto specimen_family = ::ip::inet::AF::INET4;
  auto specimen_port = ::ip::endian::network_order<::ip::in::port_t>(12345);
  auto specimen_addr = make::in4_addr_t(127, 0, 0, 1);
  ::ip::in4::sockaddr sa;
  sa.sin_family = (int)(specimen_family);
  sa.sin_port = specimen_port;
  sa.sin_addr = ::ip::as<::ip::in4::addr>(specimen_addr);
  {
    auto fa = family(sa); // <-------------------------- test this
    ::ip::inet::AF::Family actual = fa;
    auto expected = specimen_family;
    CPPUNIT_ASSERT_EQUAL((int)expected, (int)actual);
  }
}

auto tests::unit::ip::inet::sockaddr::Family::test_Rhs_in6() -> void {
  using ::ip::inet::family;
  auto specimen_family = ::ip::inet::AF::INET6;
  auto specimen_port = ::ip::endian::network_order<::ip::in::port_t>(12345);
  auto specimen_addr = make::in6_addr_t(127, 0, 0, 1);
  ::ip::in6::sockaddr sa;
  sa.sin6_family = (int)(specimen_family);
  sa.sin6_port = specimen_port;
  sa.sin6_addr = ::ip::as<::ip::in6::addr>(specimen_addr);
  {
    auto fa = family(sa); // <-------------------------- test this
    ::ip::inet::AF::Family actual = fa;
    auto expected = specimen_family;
    CPPUNIT_ASSERT_EQUAL((int)expected, (int)actual);
  }
}

auto tests::unit::ip::inet::sockaddr::Family::test_Lhs_in4() -> void {
  using ::ip::inet::family;
  auto specimen_family = ::ip::inet::AF::INET4;
  auto specimen_port = ::ip::endian::network_order<::ip::in::port_t>(12345);
  auto specimen_addr = make::in4_addr_t(127, 0, 0, 1);
  auto other_family = ::ip::inet::AF::INET6;
  ::ip::in4::sockaddr sa;
  sa.sin_family = (int)(specimen_family);
  sa.sin_port = specimen_port;
  sa.sin_addr = ::ip::as<::ip::in4::addr>(specimen_addr);
  family(sa) = other_family; // <------------------------------------ test this
  {
    ::ip::inet::AF::Family fa = family(sa);
    auto actual = fa;
    auto expected = other_family;
    CPPUNIT_ASSERT_EQUAL((int)expected, (int)actual);
  }
}

auto tests::unit::ip::inet::sockaddr::Family::test_Lhs_in6() -> void {
  using ::ip::inet::family;
  auto specimen_family = ::ip::inet::AF::INET6;
  auto specimen_port = ::ip::endian::network_order<::ip::in::port_t>(12345);
  auto specimen_addr = make::in6_addr_t(0lu, 1ul); // there's no place like ::1
  auto other_family = ::ip::inet::AF::INET4;
  ::ip::in6::sockaddr sa;
  sa.sin6_family = (int)(specimen_family);
  sa.sin6_port = specimen_port;
  sa.sin6_addr = ::ip::as<::ip::in6::addr>(specimen_addr);
  family(sa) = other_family; // <------------------------------------ test this
  {
    ::ip::inet::AF::Family fa = family(sa);
    auto actual = fa;
    auto expected = other_family;
    CPPUNIT_ASSERT_EQUAL((int)expected, (int)actual);
  }
}

#import rigging.suite.io
auto tests::unit::ip::inet::sockaddr::Family::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("family");
  {
    Stream rhs("rhs");
    rhs << call("in4", &Family::test_Rhs_in4)
        << call("in6", &Family::test_Rhs_in6)
      ;
    series << move(rhs);
  } {
    Stream lhs("lhs");
    lhs << call("in4", &Family::test_Lhs_in4)
        << call("in6", &Family::test_Lhs_in6)
      ;
    series << move(lhs);
  }
  return finalize(series);
}
#endiv

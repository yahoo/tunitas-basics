// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::ip::inet {
  class Fixture;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::ip::inet::Fixture : public cppunit::test::Fixture {
public:
  auto test_error_network_category() -> void;
  auto test_aton_in4_addr() -> void;
  auto test_aton_in6_addr() -> void;
  auto test_aton_in4_addr_t() -> void;
  auto test_aton_in6_addr_t() -> void;
  auto test_ntop_in4_addr() -> void;
  auto test_ntop_in6_addr() -> void;
  auto test_ntop_in4_addr_t() -> void;
  auto test_ntop_in6_addr_t() -> void;
  auto test_pton_in4_addr() -> void;
  auto test_pton_in6_addr() -> void;
  auto test_pton_in4_addr_t() -> void;
  auto test_pton_in6_addr_t() -> void;
  auto test_port_in4() -> void;
  auto test_port_in6() -> void;
  auto test_zero_all() -> void;
  auto test_lhs_family() -> void;
  auto test_lhs_port() -> void;
  auto test_lhs_in6_addr() -> void;
  auto test_lhs_in6_addr_t() -> void;
  auto test_lhs_in4_addr() -> void;
  auto test_lhs_in4_addr_t() -> void;
  auto test_rhs_family() -> void;
  auto test_rhs_port() -> void;
  auto test_rhs_in6_addr() -> void;
  auto test_rhs_in6_addr_t() -> void;
  auto test_rhs_in4_addr() -> void;
  auto test_rhs_in4_addr_t() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import ip.inet.error.network_category
#import ip.inet.error.Condition
#import ip.inet.error.Code
auto tests::unit::ip::inet::Fixture::test_error_network_category() -> void {
  auto const &c = ::ip::inet::error::network_category();
  CPPUNIT_ASSERT(nullptr != c.name());
  CPPUNIT_ASSERT(::ip::inet::error::Condition::SUCCESS == c.default_error_condition(::ip::inet::error::Code::SUCCESS));
  CPPUNIT_ASSERT(!c.message(0).empty());
}
#import ip.inet.aton
#import ip.inet.ntop
auto tests::unit::ip::inet::Fixture::test_aton_in4_addr() -> void {
  // basically the same as pton
  // respect ... RFC 5737
  {
    std::string specimen = "198.51.100.101";
    auto ton = ::ip::inet::aton<::ip::in4::addr>(specimen); // <----------- test this (addr)
    CPPUNIT_ASSERT(ok(ton));
    auto addr = value(ton);
    auto top = ::ip::inet::ntop(addr);
    CPPUNIT_ASSERT(ok(top));
    std::string const actual = value(top);
    std::string const expected = specimen;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string specimen = "19851.10099";
    auto ton = ::ip::inet::aton<::ip::in4::addr>(specimen); // <----------- test this (addr)
    CPPUNIT_ASSERT(!ok(ton));
  }
}

auto tests::unit::ip::inet::Fixture::test_aton_in6_addr() -> void {
  // basically the same as aton
  // respect ... RFC 3849
  {
    std::string specimen = "2001:db8:6aba:4921:b0d1:448:3068:e1ee";
    auto ton = ::ip::inet::aton<::ip::in6::addr>(specimen); // <------------- test this (addr)
    CPPUNIT_ASSERT(ok(ton));
    auto addr = value(ton);
    auto top = ::ip::inet::ntop(addr);
    CPPUNIT_ASSERT(ok(top));
    std::string const actual = value(top);
    std::string const expected = specimen;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string specimen = "2001:db8:::::";
    auto ton = ::ip::inet::aton<::ip::in6::addr>(specimen); // <------------ test this (addr)
    CPPUNIT_ASSERT(!ok(ton));
  }
}

auto tests::unit::ip::inet::Fixture::test_aton_in4_addr_t() -> void {
  // basically the same as pton
  // respect ... RFC 5737
  {
    std::string specimen = "198.51.100.100";
    auto ton = ::ip::inet::aton<::ip::in4::addr_t>(specimen); // <----------- test this (addr_t)
    CPPUNIT_ASSERT(ok(ton));
    auto addr = value(ton);
    auto top = ::ip::inet::ntop(addr);
    CPPUNIT_ASSERT(ok(top));
    std::string const actual = value(top);
    std::string const expected = specimen;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string specimen = "19851.10099";
    auto ton = ::ip::inet::aton<::ip::in4::addr_t>(specimen); // <----------- test this (addr_t)
    CPPUNIT_ASSERT(!ok(ton));
  }
}

auto tests::unit::ip::inet::Fixture::test_aton_in6_addr_t() -> void {
  // basically the same as aton
  // respect ... RFC 3849
  {
    std::string specimen = "2001:db8:6bcf:f26f:5095:4ed8:ac24:5ac";
    auto ton = ::ip::inet::aton<::ip::in6::addr_t>(specimen); // <------------- test this (addr_t)
    CPPUNIT_ASSERT(ok(ton));
    auto addr = value(ton);
    auto top = ::ip::inet::ntop(addr);
    CPPUNIT_ASSERT(ok(top));
    std::string const actual = value(top);
    std::string const expected = specimen;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string specimen = "2001:db8:::::";
    auto ton = ::ip::inet::aton<::ip::in6::addr_t>(specimen); // <------------ test this (addr_t)
    CPPUNIT_ASSERT(!ok(ton));
  }
}

#import ip.inet.ntop
auto tests::unit::ip::inet::Fixture::test_ntop_in4_addr() -> void {
  // respect ... RFC 5737
  std::string specimen = "198.51.100.134";
  auto ton = ::ip::inet::pton<::ip::in4::addr>(specimen);
  CPPUNIT_ASSERT(ok(ton));
  auto addr = value(ton);
  auto top = ::ip::inet::ntop(addr); // <----------- test this
  CPPUNIT_ASSERT(ok(top));
  std::string const actual = value(top);
  std::string const expected = specimen;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::ip::inet::Fixture::test_ntop_in6_addr() -> void {
  std::string specimen = "2001:db8:de56:a2:4bae:4b4b:83e8:d8ec";
  auto ton = ::ip::inet::pton<::ip::in6::addr>(specimen); 
  CPPUNIT_ASSERT(ok(ton));
  auto addr = value(ton);
  auto top = ::ip::inet::ntop(addr); // <------------- test this
  CPPUNIT_ASSERT(ok(top));
  std::string const actual = value(top);
  std::string const expected = specimen;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::ip::inet::Fixture::test_ntop_in4_addr_t() -> void {
  // respect ... RFC 5737
  std::string specimen = "198.51.100.133";
  auto ton = ::ip::inet::pton<::ip::in4::addr_t>(specimen); // <----- addr_t
  CPPUNIT_ASSERT(ok(ton));
  auto t = value(ton);
  auto top = ::ip::inet::ntop(t); // <------------------------------- test this (addr_t)
  CPPUNIT_ASSERT(ok(top));
  std::string const actual = value(top);
  std::string const expected = specimen;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::ip::inet::Fixture::test_ntop_in6_addr_t() -> void {
  std::string specimen = "2001:db8:361c:613:7ec:49a6:8e4f:99ea";
  auto ton = ::ip::inet::pton<::ip::in6::addr_t>(specimen);   // <----- addr_t
  CPPUNIT_ASSERT(ok(ton));
  auto t = value(ton);
  auto top = ::ip::inet::ntop(t); // <--------------------------------- test this (addr_t)
  CPPUNIT_ASSERT(ok(top));
  std::string const actual = value(top);
  std::string const expected = specimen;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

#import ip.inet.pton
auto tests::unit::ip::inet::Fixture::test_pton_in4_addr() -> void {
  // respect ... RFC 5737
  {
    std::string specimen = "198.51.100.99";
    auto ton = ::ip::inet::pton<::ip::in4::addr>(specimen); // <----------- test this (addr)
    CPPUNIT_ASSERT(ok(ton));
    auto addr = value(ton);
    auto top = ::ip::inet::ntop(addr);
    CPPUNIT_ASSERT(ok(top));
    std::string const actual = value(top);
    std::string const expected = specimen;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string specimen = "19851.10099";
    auto ton = ::ip::inet::pton<::ip::in4::addr>(specimen); // <----------- test this (addr)
    CPPUNIT_ASSERT(!ok(ton));
  }
}

auto tests::unit::ip::inet::Fixture::test_pton_in4_addr_t() -> void {
  // respect ... RFC 5737
  {
    std::string specimen = "198.51.100.97";
    auto ton = ::ip::inet::pton<::ip::in4::addr_t>(specimen); // <----------- test this (addr_t)
    CPPUNIT_ASSERT(ok(ton));
    auto addr = value(ton);
    auto top = ::ip::inet::ntop(addr);
    CPPUNIT_ASSERT(ok(top));
    std::string const actual = value(top);
    std::string const expected = specimen;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string specimen = "19851.10097";
    auto ton = ::ip::inet::pton<::ip::in4::addr_t>(specimen); // <----------- test this (addr_t)
    CPPUNIT_ASSERT(!ok(ton));
  }
}

auto tests::unit::ip::inet::Fixture::test_pton_in6_addr() -> void {
  // respect ... RFC 3849
  {
    std::string specimen = "2001:db8:6aba:4921:b0d1:448:3068:e1ee";
    auto ton = ::ip::inet::pton<::ip::in6::addr>(specimen); // <------------- test this (addr)
    CPPUNIT_ASSERT(ok(ton));
    auto addr = value(ton);
    auto top = ::ip::inet::ntop(addr);
    CPPUNIT_ASSERT(ok(top));
    std::string const actual = value(top);
    std::string const expected = specimen;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string specimen = "2001:db8:::::";
    auto ton = ::ip::inet::pton<::ip::in6::addr>(specimen); // <------------ test this (addr)
    CPPUNIT_ASSERT(!ok(ton));
  }
}

auto tests::unit::ip::inet::Fixture::test_pton_in6_addr_t() -> void {
  // respect ... RFC 3849
  {
    std::string specimen = "2001:db8:cd22:c05c:aa0:43d0:9d65:7093";
    auto ton = ::ip::inet::pton<::ip::in6::addr_t>(specimen); // <------------- test this (addr_t)
    CPPUNIT_ASSERT(ok(ton));
    auto addr = value(ton);
    auto top = ::ip::inet::ntop(addr);
    CPPUNIT_ASSERT(ok(top));
    std::string const actual = value(top);
    std::string const expected = specimen;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string specimen = "2001:db8:::::";
    auto ton = ::ip::inet::pton<::ip::in6::addr_t>(specimen); // <------------ test this (addr_t)
    CPPUNIT_ASSERT(!ok(ton));
  }
}

#import ip.inet.port
auto tests::unit::ip::inet::Fixture::test_port_in4() -> void {
  using ::ip::inet::port;
  {
    ::ip::in4::sockaddr s;
    port(s) = 99;
    CPPUNIT_ASSERT_EQUAL(htons(99), s.sin_port);
    ::ip::in::port_t p = port(s);
    ::ip::in::port_t const actual = p;
    ::ip::in::port_t const expected = 99;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    ::ip::in4::sockaddr s;
    port(s) = 54453;
    ::ip::in::port_t p = port(s);
    ::ip::in::port_t const actual = p;
    ::ip::in::port_t const expected = 54453;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
}

auto tests::unit::ip::inet::Fixture::test_port_in6() -> void {
  using ::ip::inet::port;
  {
    ::ip::in6::sockaddr s;
    port(s) = 99;
    CPPUNIT_ASSERT_EQUAL(htons(99), s.sin6_port);
    ::ip::in::port_t p = port(s);
    ::ip::in::port_t const actual = p;
    ::ip::in::port_t const expected = 99;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    ::ip::in6::sockaddr s;
    port(s) = 54453;
    ::ip::in::port_t p = port(s);
    ::ip::in::port_t const actual = p;
    ::ip::in::port_t const expected = 54453;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
}

#import ip.inet.AF
#import ip.inet.PF
#import ip.inet.SOCK
#import ip.inet.zero
auto tests::unit::ip::inet::Fixture::test_zero_all() -> void {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  using ::ip::inet::zero;
  { ::ip::inet::AF::Family specimen;
    zero(specimen); }
  { ::ip::inet::PF::Protocol specimen;
    zero(specimen); }
  { ::ip::inet::SOCK::Type specimen;
    zero(specimen); }
  { ::ip::in::port_t specimen;
    zero(specimen); }
  { ::ip::in4::addr_t specimen;
    zero(specimen); }
  { ::ip::in4::addr specimen;
    zero(specimen); }
  { ::ip::in6::addr_t specimen;
    zero(specimen); }
  { ::ip::in6::addr specimen;
    zero(specimen); }
#pragma GCC diagnostic pop
}

#import tests.unit.make.constructors
#import ip.inet.lhs
auto tests::unit::ip::inet::Fixture::test_lhs_family() -> void {
  using AF = ::ip::inet::AF;
  using ::ip::inet::lhs;
  { ::ip::in4::sockaddr sa4;
    lhs<AF::Family>(sa4.sin_family) = AF::INET4;
    CPPUNIT_ASSERT_EQUAL((unsigned short)AF::INET4, sa4.sin_family); }
  { ::ip::in6::sockaddr sa6;
    lhs<AF::Family>(sa6.sin6_family) = AF::INET6;
    CPPUNIT_ASSERT_EQUAL((unsigned short)AF::INET6, sa6.sin6_family); }
}
auto tests::unit::ip::inet::Fixture::test_lhs_port() -> void {
  namespace in = ::ip::in;
  using ::ip::inet::lhs;
  { ::ip::in4::sockaddr sa4;
    lhs<in::port_t>(sa4.sin_port) = 12345;
    // NOT YET ---> CPPUNIT_ASSERT_EQUAL(12345u, (int unsigned) lhs<in::port_t>(sa4.sin_port));
    CPPUNIT_ASSERT_EQUAL((short unsigned)htons(12345), sa4.sin_port); }
  { ::ip::in6::sockaddr sa6;
    lhs<in::port_t>(sa6.sin6_port) = 23456;
    // NOT YET ---> CPPUNIT_ASSERT_EQUAL(23456u, (int unsigned) lhs<in::port_t>(sa6.sin6_port));
    CPPUNIT_ASSERT_EQUAL((short unsigned)htons(23456), sa6.sin6_port); }
}
auto tests::unit::ip::inet::Fixture::test_lhs_in6_addr() -> void {
  using ::ip::inet::lhs;
  ::ip::in6::sockaddr sa6;
  auto const specimen = ::ip::as<::ip::in6::addr>(make::in6_addr_t(0x0lu, 0x1lu));
  lhs(sa6.sin6_addr) = specimen;
  // assert slater with rhs
}
auto tests::unit::ip::inet::Fixture::test_lhs_in6_addr_t() -> void {
  using ::ip::inet::lhs;
  ::ip::in6::sockaddr sa6;
  auto const specimen = make::in6_addr_t(0x0lu, 0x1lu);
  lhs(sa6.sin6_addr) = specimen;
  // assert slater with rhs
}
auto tests::unit::ip::inet::Fixture::test_lhs_in4_addr() -> void {
  using ::ip::inet::lhs;
  ::ip::in4::sockaddr sa4;
  auto const specimen = ::ip::as<::ip::in4::addr>(make::in4_addr_t(127, 0, 0, 1));
  lhs(sa4.sin_addr) = specimen;
  // assert slater with rhs
}
auto tests::unit::ip::inet::Fixture::test_lhs_in4_addr_t() -> void {
  using ::ip::inet::lhs;
  ::ip::in4::sockaddr sa4;
  auto const specimen = make::in4_addr_t(127, 0, 0, 1);
  lhs(sa4.sin_addr) = specimen;
  // assert slater with rhs
}

#import ip.inet.rhs
auto tests::unit::ip::inet::Fixture::test_rhs_family() -> void {
  using AF = ::ip::inet::AF;
  using ::ip::inet::rhs;
  using ::ip::inet::lhs;
  { ::ip::in4::sockaddr sa4;
    lhs<AF::Family>(sa4.sin_family) = AF::INET4;
    CPPUNIT_ASSERT_EQUAL((unsigned short)AF::INET4, (unsigned short)(AF::Family)rhs<AF::Family>(sa4.sin_family)); }
  { ::ip::in6::sockaddr sa6;
    lhs<AF::Family>(sa6.sin6_family) = AF::INET6;
    CPPUNIT_ASSERT_EQUAL((unsigned short)AF::INET6, (unsigned short)(AF::Family)rhs<AF::Family>(sa6.sin6_family)); }

}
auto tests::unit::ip::inet::Fixture::test_rhs_port() -> void {
  namespace in = ::ip::in;
  using ::ip::inet::lhs;
  using ::ip::inet::rhs;
  { ::ip::in4::sockaddr sa4;
    lhs<in::port_t>(sa4.sin_port) = 12345;
    CPPUNIT_ASSERT_EQUAL(12345u, (int unsigned) rhs<in::port_t>(sa4.sin_port)); }
  { ::ip::in6::sockaddr sa6;
    lhs<in::port_t>(sa6.sin6_port) = 23456;
    CPPUNIT_ASSERT_EQUAL(23456u, (int unsigned) rhs<in::port_t>(sa6.sin6_port)); }
}
auto tests::unit::ip::inet::Fixture::test_rhs_in6_addr() -> void {
  using ::ip::inet::lhs;
  using ::ip::inet::rhs;
  ::ip::in6::sockaddr sa6;
  auto const specimen = ::ip::as<::ip::in6::addr>(make::in6_addr_t(0x0lu, 0x1lu));
  lhs(sa6.sin6_addr) = specimen;
  CPPUNIT_ASSERT(::ip::as<::ip::in6::addr_t>(specimen) == (::ip::in6::addr_t) rhs(sa6.sin6_addr));
}
auto tests::unit::ip::inet::Fixture::test_rhs_in6_addr_t() -> void {
  using ::ip::inet::lhs;
  using ::ip::inet::rhs;
  ::ip::in6::sockaddr sa6;
  auto const specimen = make::in6_addr_t(0x0lu, 0x1lu);
  lhs(sa6.sin6_addr) = specimen;
  CPPUNIT_ASSERT(specimen == (::ip::in6::addr_t) rhs(sa6.sin6_addr));
}
auto tests::unit::ip::inet::Fixture::test_rhs_in4_addr() -> void {
  using ::ip::inet::lhs;
  using ::ip::inet::rhs;
  ::ip::in4::sockaddr sa4;
  auto const specimen = ::ip::as<::ip::in4::addr>(make::in4_addr_t(127, 0, 0, 1));
  lhs(sa4.sin_addr) = specimen;
  CPPUNIT_ASSERT(::ip::as<::ip::in4::addr_t>(specimen) == (::ip::in4::addr_t) rhs(sa4.sin_addr));
}
auto tests::unit::ip::inet::Fixture::test_rhs_in4_addr_t() -> void {
  using ::ip::inet::lhs;
  using ::ip::inet::rhs;
  ::ip::in4::sockaddr sa4;
  auto const specimen = make::in4_addr_t(127, 0, 0, 1);
  lhs(sa4.sin_addr) = specimen;
  CPPUNIT_ASSERT(specimen == (::ip::in4::addr_t) rhs(sa4.sin_addr));
}

#import c.const_stringz
#import std.string
#import tests.unit.ip.inet.addrinfo.Fixture
#import tests.unit.ip.inet.Family
#import tests.unit.ip.inet.nameinfo.Fixture
#import tests.unit.ip.inet.Protocol
#import tests.unit.ip.inet.Restring
#import tests.unit.ip.inet.sockaddr.Fixture
#import rigging.suite.io
auto tests::unit::ip::inet::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream aton("aton");
  {
    Stream in4("in4");
    in4
      << call("addr", &Fixture::test_aton_in4_addr)
      << call("addr_t", &Fixture::test_aton_in4_addr_t)
      ;
    Stream in6("in6");
    in6
      << call("addr", &Fixture::test_aton_in6_addr)
      << call("addr_t", &Fixture::test_aton_in6_addr_t)
      ;
    aton << move(in4)
         << move(in6)
      ;
  }
  Stream ntop("ntop");
  {
    Stream in4("in4");
    in4
      << call("addr", &Fixture::test_ntop_in4_addr)
      << call("addr_t", &Fixture::test_ntop_in4_addr_t)
      ;
    Stream in6("in6");
    in6
      << call("addr", &Fixture::test_ntop_in6_addr)
      << call("addr_t", &Fixture::test_ntop_in6_addr_t)
      ;
    ntop << move(in4)
         << move(in6)
      ;
  }
  Stream pton("pton");
  {
    Stream in4("in4");
    in4
      << call("addr", &Fixture::test_pton_in4_addr)
      << call("addr_t", &Fixture::test_pton_in4_addr_t)
      ;
    Stream in6("in6");
    in6
      << call("addr", &Fixture::test_pton_in6_addr)
      << call("addr_t", &Fixture::test_pton_in6_addr_t)
      ;
    pton
      << move(in4)
      << move(in6);
    ;
  }
  Stream port("port");
  port << call("in4", &Fixture::test_port_in4)
       << call("in6", &Fixture::test_port_in6)
    ;
  Stream lhs("lhs");
  {
    Stream in4("in4");
    in4
      << call("addr", &Fixture::test_lhs_in4_addr)
      << call("addr_t", &Fixture::test_lhs_in4_addr_t)
      ;
    Stream in6("in6");
    in6
      << call("addr", &Fixture::test_lhs_in6_addr)
      << call("addr_t", &Fixture::test_lhs_in6_addr_t)
      ;
    lhs
      << call("family", &Fixture::test_lhs_family)
      << call("port", &Fixture::test_lhs_port)
      << move(in4)
      << move(in6)
      ;
  }
  Stream rhs("rhs");
  {
    Stream in4("in4");
    in4
      << call("addr", &Fixture::test_rhs_in4_addr)
      << call("addr_t", &Fixture::test_rhs_in4_addr_t)
      ;
    Stream in6("in6");
    in6
      << call("addr", &Fixture::test_rhs_in6_addr)
      << call("addr_t", &Fixture::test_rhs_in6_addr_t)
      ;
    rhs
      << call("family", &Fixture::test_rhs_family)
      << call("port", &Fixture::test_rhs_port)
      << move(in4)
      << move(in6);
    ;
  }
  Stream series("inet");
  series << call("error::network_category", &Fixture::test_error_network_category)
         << add<Family>()
         << add<Protocol>()
         << call("zero_all", &Fixture::test_zero_all)
         << move(aton)
         << move(ntop)
         << move(pton)
         << move(port)
         << move(lhs)
         << move(rhs)
         << add<Restring<std::string>>()
         << add<Restring<c::const_stringz>>()
         << add<addrinfo::Fixture>()
         << add<nameinfo::Fixture>()
         << add<sockaddr::Fixture>()
    ;
  return finalize(series);
}
#endiv

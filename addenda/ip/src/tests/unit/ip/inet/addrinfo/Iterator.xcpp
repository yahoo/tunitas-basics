// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::ip::inet::addrinfo {
  class Iterator;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::ip::inet::addrinfo::Iterator : public cppunit::test::Fixture {
public:
  auto test_operator_eq() -> void;
  auto test_operator_ne() -> void;
  auto test_constructor_default() -> void;
  auto test_constructor_conversion() -> void;
  auto test_operator_inc() -> void;
  auto test_operator_indirect() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>

auto tests::unit::ip::inet::addrinfo::Iterator::test_operator_eq() -> void {
#warning WRITEME auto tests::unit::ip::inet::addrinfo::Iterator::test_operator_eq() -> void
}

auto tests::unit::ip::inet::addrinfo::Iterator::test_operator_ne() -> void {
#warning WRITEME auto tests::unit::ip::inet::addrinfo::Iterator::test_operator_ne() -> void
}

auto tests::unit::ip::inet::addrinfo::Iterator::test_constructor_default() -> void {
#warning WRITEME auto tests::unit::ip::inet::addrinfo::Iterator::test_constructor_default() -> void
}

auto tests::unit::ip::inet::addrinfo::Iterator::test_constructor_conversion() -> void {
#warning WRITEME auto tests::unit::ip::inet::addrinfo::Iterator::test_constructor_conversion() -> void
}

auto tests::unit::ip::inet::addrinfo::Iterator::test_operator_inc() -> void {
#warning WRITEME auto tests::unit::ip::inet::addrinfo::Iterator::test_operator_inc() -> void
}

auto tests::unit::ip::inet::addrinfo::Iterator::test_operator_indirect() -> void {
#warning WRITEME auto tests::unit::ip::inet::addrinfo::Iterator::test_operator_indirect() -> void
}

#import rigging.suite.io
auto tests::unit::ip::inet::addrinfo::Iterator::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("Iterator");
  series << call("operator==", &Iterator::test_operator_eq)
         << call("operator!=", &Iterator::test_operator_ne)
         << call("constructor_default", &Iterator::test_constructor_default)
         << call("constructor_conversion", &Iterator::test_constructor_conversion)
         << call("operator++", &Iterator::test_operator_inc)
         << call("operator*", &Iterator::test_operator_indirect)
    ;
  return finalize(series);
}
#endiv

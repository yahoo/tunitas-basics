// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import tests.unit.ip.endian.Palette
#endiv
#divert <hpp>
#import std.uint8_t
#import std.uint16_t
#import std.uint32_t
#import std.uint64_t
#import want.uint128_t
namespace tests::unit::ip::endian {
  template<> struct Palette::Operator_Insert<std::uint8_t>;
  template<> struct Palette::Operator_Insert<std::uint16_t>;
  template<> struct Palette::Operator_Insert<std::uint32_t>;
  template<> struct Palette::Operator_Insert<std::uint64_t>;
  template<> struct Palette::Operator_Insert<want::uint128_t>;
}
#import ip.endian.Integer
#import ip.endian.Order
#import std.string
template<> struct tests::unit::ip::endian::Palette::Operator_Insert<std::uint8_t> {
  using native_integer_type = std::uint8_t;
  using value_type = ::ip::endian::Integer<::ip::endian::Order::HOST, native_integer_type>;
  // an arbitrary number
  inline static auto specimen() -> value_type { return value_type(139u); }
  inline static auto expected() -> std::string { return "139"; }
};

template<> struct tests::unit::ip::endian::Palette::Operator_Insert<std::uint16_t> {
  using native_integer_type = std::uint16_t;
  using value_type = ::ip::endian::Integer<::ip::endian::Order::HOST, native_integer_type>;
  // an arbitrary number
  inline static auto specimen() -> value_type { return value_type(7100u); }
  inline static auto expected() -> std::string { return "7100"; }
};

template<> struct tests::unit::ip::endian::Palette::Operator_Insert<std::uint32_t> {
  using native_integer_type = std::uint32_t;
  using value_type = ::ip::endian::Integer<::ip::endian::Order::HOST, native_integer_type>;
  // an arbitrary number
  inline static auto specimen() -> value_type { return value_type(216762602u); }
  inline static auto expected() -> std::string { return "216762602"; }
};

template<> struct tests::unit::ip::endian::Palette::Operator_Insert<std::uint64_t> {
  using native_integer_type = std::uint64_t;
  using value_type = ::ip::endian::Integer<::ip::endian::Order::HOST, native_integer_type>;
  // an arbitrary number
  inline static auto specimen() -> value_type { return value_type(372531390448537125lu); }
  inline static auto expected() -> std::string { return "372531390448537125"; }
};

template<> struct tests::unit::ip::endian::Palette::Operator_Insert<want::uint128_t> {
  using native_integer_type = want::uint128_t;
  using value_type = ::ip::endian::Integer<::ip::endian::Order::HOST, native_integer_type>;
  // an arbitrary number
  inline static auto specimen() -> value_type { return value_type(::want::uint128_t(24970684060673) << 64 | ::want::uint128_t(10564103027535845632lu)); }
  inline static auto expected() -> std::string { return "460627818212703788472032505043200"; }
};
#endiv

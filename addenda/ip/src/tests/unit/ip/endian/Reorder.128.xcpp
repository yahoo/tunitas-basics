// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#forward tests.unit.ip.endian.Reorder
namespace tests::unit::ip::endian {
  template<> class Reorder<128>;
}
#endiv
#divert <hpp>
#import c.const_stringz
#import ip // ::ip::uint{16,32,64,128}_t
#import cppunit.Test
#import cppunit.test.Fixture
#import std.ostream
#import tests.unit.ip.endian.Palette
template<> class tests::unit::ip::endian::Reorder<128> : public cppunit::test::Fixture, Palette {
public:
  static constexpr auto const WIDTH = 128;

private:
  auto test_formula_value(::ip::uint128_t) -> void;
public:
  auto test_formula_all0() -> void;
  auto test_formula_allF() -> void;
  auto test_formula_lowF() -> void;
  auto test_formula_highF() -> void;

  auto test_reorder_all0() -> void;
  auto test_reorder_allF() -> void;
  auto test_reorder_lowF() -> void;
  auto test_reorder_highF() -> void;

  auto test_reorder_series() -> void;

  auto test_roundtrip() -> void;

  auto test_addressish_01() -> void;
  auto test_addressish_02() -> void;

  static auto suite() -> cppunit::Test *;
private:
  auto dump_bits_little_endian(std::ostream &, ::ip::uint128_t subject, c::const_stringz function, c::const_stringz qualification = c::const_stringz()) -> void;
};
#endiv
#divert <cpp>
#import ip.endian.reorder
using ::ip::endian::reorder;
#import want.cppunit.int128
using want::cppunit::operator<<;

auto tests::unit::ip::endian::Reorder<128>::test_formula_all0() -> void {
  auto value = ::ip::uint128_t(0);
  test_formula_value(value);
}

auto tests::unit::ip::endian::Reorder<128>::test_formula_allF() -> void {
  auto allF = 0xffffffffffffffffull;
  auto value = ::ip::uint128_t(allF) << 64 | allF;
  test_formula_value(value);
}

auto tests::unit::ip::endian::Reorder<128>::test_formula_lowF() -> void {
  auto allF = 0xffffffffffffffffull;
  auto value = ::ip::uint128_t(allF);
  test_formula_value(value);
}

auto tests::unit::ip::endian::Reorder<128>::test_formula_highF() -> void {
  auto allF = 0xffffffffffffffffull;
  auto value = ::ip::uint128_t(allF) << 64;
  test_formula_value(value);
}

auto tests::unit::ip::endian::Reorder<128>::test_formula_value(::ip::uint128_t v) -> void {
  ::ip::uint128_t ff = 0xff;
  dump_bits_little_endian(std::cerr, ff, __FUNCTION__, " at 0xff");
  //    01234567
  auto t_123456789abcdef = (v & (ff << 0x78)) >> 0x78;
  dump_bits_little_endian(std::cerr, t_123456789abcdef, __FUNCTION__, " at t_123456789abcdef");
  auto t0_23456789abcdef = (v & (ff << 0x70)) >> 0x68;
  dump_bits_little_endian(std::cerr, t0_23456789abcdef, __FUNCTION__, " at t0_23456789abcdef");
  auto t01_3456789abcdef = (v & (ff << 0x68)) >> 0x58;
  dump_bits_little_endian(std::cerr, t01_3456789abcdef, __FUNCTION__, " at t01_3456789abcdef");
  auto t012_456789abcdef = (v & (ff << 0x60)) >> 0x48;
  dump_bits_little_endian(std::cerr, t012_456789abcdef, __FUNCTION__, " at t012_456789abcdef");
  auto t0123_56789abcdef = (v & (ff << 0x58)) >> 0x38;
  dump_bits_little_endian(std::cerr, t0123_56789abcdef, __FUNCTION__, " at t0123_56789abcdef");
  auto t01234_6789abcdef = (v & (ff << 0x50)) >> 0x28;
  dump_bits_little_endian(std::cerr, t01234_6789abcdef, __FUNCTION__, " at t01234_6789abcdef");
  auto t012345_789abcdef = (v & (ff << 0x48)) >> 0x18;
  dump_bits_little_endian(std::cerr, t012345_789abcdef, __FUNCTION__, " at t012345_789abcdef");
  {
    auto t0123456_89abcdef_e1 = (ff << 0x40);
    auto t0123456_89abcdef_e2 = (v & (ff << 0x40));
    auto t0123456_89abcdef_e3 = (v & (ff << 0x40)) >> 0x08; 
  dump_bits_little_endian(std::cerr, t0123456_89abcdef_e1, __FUNCTION__, " at t0123456_89abcdef e1");
  dump_bits_little_endian(std::cerr, t0123456_89abcdef_e2, __FUNCTION__, " at t0123456_89abcdef e2");
  dump_bits_little_endian(std::cerr, t0123456_89abcdef_e3, __FUNCTION__, " at t0123456_89abcdef e3");
  }
  auto t0123456_89abcdef = (v & (ff << 0x40)) >> 0x08; 
  dump_bits_little_endian(std::cerr, t0123456_89abcdef, __FUNCTION__, " at t0123456_89abcdef");
  //            01234567
  {
    // broken?
    auto t01234567_9abcdef_e1 = (ff << 0x38);
    auto t01234567_9abcdef_e2 = (v & (ff << 0x38));
    auto t01234567_9abcdef_e3 = (v & (ff << 0x38)) << 0x08; 
    dump_bits_little_endian(std::cerr, t01234567_9abcdef_e1, __FUNCTION__, " at t01234567_9abcdef e1");
    dump_bits_little_endian(std::cerr, t01234567_9abcdef_e2, __FUNCTION__, " at t01234567_9abcdef e2");
    dump_bits_little_endian(std::cerr, t01234567_9abcdef_e3, __FUNCTION__, " at t01234567_9abcdef e3");
  }
  auto t01234567_9abcdef = (v & (ff << 0x38)) << 0x08; 
  dump_bits_little_endian(std::cerr, t01234567_9abcdef, __FUNCTION__, " at t01234567_9abcdef");
  auto t012345678_abcdef = (v & (ff << 0x30)) << 0x18; 
  dump_bits_little_endian(std::cerr, t012345678_abcdef, __FUNCTION__, " at t012345678_abcdef");
  auto t0123456789_bcdef = (v & (ff << 0x28)) << 0x28;
  dump_bits_little_endian(std::cerr, t0123456789_bcdef, __FUNCTION__, " at t0123456789_bcdef");
  auto t0123456789a_cdef = (v & (ff << 0x20)) << 0x38;
  dump_bits_little_endian(std::cerr, t0123456789a_cdef, __FUNCTION__, " at t0123456789a_cdef");
  auto t0123456789ab_def = (v & (ff << 0x18)) << 0x48;
  dump_bits_little_endian(std::cerr, t0123456789ab_def, __FUNCTION__, " at t0123456789ab_def");
  auto t0123456789abc_ef = (v & (ff << 0x10)) << 0x58;
  dump_bits_little_endian(std::cerr, t0123456789abc_ef, __FUNCTION__, " at t0123456789abc_ef");
  auto t0123456789abcd_f = (v & (ff << 0x08)) << 0x68;
  dump_bits_little_endian(std::cerr, t0123456789abcd_f, __FUNCTION__, " at t0123456789abcd_f");
  auto t0123456789abcde_ = (v & (ff << 0x00)) << 0x78;
  dump_bits_little_endian(std::cerr, t0123456789abcde_, __FUNCTION__, " at t0123456789abcde_");
  auto r = ::ip::uint128_t();
  dump_bits_little_endian(std::cerr, r, __FUNCTION__, " assembling r = 0");
  r |= t_123456789abcdef;
  dump_bits_little_endian(std::cerr, r, __FUNCTION__, " assembling r |= t_123456789abcdef");
  r |= t0_23456789abcdef;
  dump_bits_little_endian(std::cerr, r, __FUNCTION__, " assembling r |= t0_23456789abcdef");
  r |= t01_3456789abcdef;
  dump_bits_little_endian(std::cerr, r, __FUNCTION__, " assembling r |= t01_3456789abcdef");
  r |= t012_456789abcdef;
  dump_bits_little_endian(std::cerr, r, __FUNCTION__, " assembling r |= t012_456789abcdef");
  r |= t0123_56789abcdef;
  dump_bits_little_endian(std::cerr, r, __FUNCTION__, " assembling r |= t0123_56789abcdef");
  r |= t01234_6789abcdef;
  dump_bits_little_endian(std::cerr, r, __FUNCTION__, " assembling r |= t01234_6789abcdef");
  r |= t012345_789abcdef;
  dump_bits_little_endian(std::cerr, r, __FUNCTION__, " assembling r |= t012345_789abcdef");
  r |= t0123456_89abcdef;
  dump_bits_little_endian(std::cerr, r, __FUNCTION__, " assembling r |= t0123456_89abcdef");
  r |= t01234567_9abcdef;
  dump_bits_little_endian(std::cerr, r, __FUNCTION__, " assembling r |= t01234567_9abcdef");
  r |= t012345678_abcdef;
  dump_bits_little_endian(std::cerr, r, __FUNCTION__, " assembling r |= t012345678_abcdef");
  r |= t0123456789_bcdef;
  dump_bits_little_endian(std::cerr, r, __FUNCTION__, " assembling r |= t0123456789_bcdef");
  r |= t0123456789a_cdef;
  dump_bits_little_endian(std::cerr, r, __FUNCTION__, " assembling r |= t0123456789a_cdef");
  r |= t0123456789ab_def;
  dump_bits_little_endian(std::cerr, r, __FUNCTION__, " assembling r |= t0123456789ab_def");
  r |= t0123456789abc_ef;
  dump_bits_little_endian(std::cerr, r, __FUNCTION__, " assembling r |= t0123456789abc_ef");
  r |= t0123456789abcd_f;
  dump_bits_little_endian(std::cerr, r, __FUNCTION__, " assembling r |= t0123456789abcd_f");
  r |= t0123456789abcde_;
  dump_bits_little_endian(std::cerr, r, __FUNCTION__, " assembling r |= t0123456789abcde_");
  dump_bits_little_endian(std::cerr, r, __FUNCTION__, " the final assembly");
  auto redo = (t_123456789abcdef|
               t0_23456789abcdef|
               t01_3456789abcdef|
               t012_456789abcdef|
               t0123_56789abcdef|
               t01234_6789abcdef|
               t012345_789abcdef|
               t0123456_89abcdef|
               t01234567_9abcdef|
               t012345678_abcdef|
               t0123456789_bcdef|
               t0123456789a_cdef|
               t0123456789ab_def|
               t0123456789abc_ef|
               t0123456789abcd_f|
               t0123456789abcde_);
  dump_bits_little_endian(std::cerr, redo, __FUNCTION__, " redone as one expression");
}

auto tests::unit::ip::endian::Reorder<128>::test_reorder_all0() -> void {
  auto specimen = ::ip::uint128_t(0x0);
  dump_bits_little_endian(std::cerr, specimen, __FUNCTION__);
  auto actual = reorder<WIDTH>(specimen);
  dump_bits_little_endian(std::cerr, actual, __FUNCTION__);
  auto expected = specimen;
  dump_expected_actual(std::cerr, expected, actual);
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::ip::endian::Reorder<128>::test_reorder_allF() -> void {
  auto specimen = ::ip::uint128_t(0xfffffffffffffffflu) << 64 | 0xfffffffffffffffflu;
  dump_bits_little_endian(std::cerr, specimen, __FUNCTION__);
  auto actual = reorder<WIDTH>(specimen);
  dump_bits_little_endian(std::cerr, actual, __FUNCTION__);
  auto expected = specimen;
  dump_expected_actual(std::cerr, expected, actual);
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::ip::endian::Reorder<128>::test_reorder_lowF() -> void {
  auto specimen = ::ip::uint128_t(0xfffffffffffffffflu);
  dump_bits_little_endian(std::cerr, specimen, __FUNCTION__);
  auto actual = reorder<WIDTH>(specimen);
  dump_bits_little_endian(std::cerr, actual, __FUNCTION__);
  auto expected = ::ip::uint128_t(0xfffffffffffffffflu) << 64;
  dump_expected_actual(std::cerr, expected, actual);
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::ip::endian::Reorder<128>::test_reorder_highF() -> void {
  auto specimen = ::ip::uint128_t(0xfffffffffffffffflu) << 64;
  dump_bits_little_endian(std::cerr, specimen, __FUNCTION__);
  auto actual = reorder<WIDTH>(specimen);
  dump_bits_little_endian(std::cerr, actual, __FUNCTION__);
  auto expected = ::ip::uint128_t(0xfffffffffffffffflu);
  dump_expected_actual(std::cerr, expected, actual);
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::ip::endian::Reorder<128>::test_reorder_series() -> void {
  auto specimen = ::ip::uint128_t(0x0123456789abcdeflu) << 64 | 0x76543210fedcba98lu;
  dump_bits_little_endian(std::cerr, specimen, __FUNCTION__);
  auto actual = reorder<WIDTH>(specimen);
  dump_bits_little_endian(std::cerr, actual, __FUNCTION__);
  auto expected = ::ip::uint128_t(0x98badcfe10325476lu) << 64 | 0xefcdab8967452301lu;
  dump_expected_actual(std::cerr, expected, actual);
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::ip::endian::Reorder<128>::test_roundtrip() -> void {
  auto specimen = ::ip::uint128_t(0x0123456789abcdeflu) << 64 | 0x0123456789abcdeflu;
  dump_bits_little_endian(std::cerr, specimen, __FUNCTION__);
  auto actual = reorder<WIDTH>(reorder<WIDTH>(specimen));
  dump_bits_little_endian(std::cerr, actual, __FUNCTION__);
  auto expected = specimen;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::ip::endian::Reorder<128>::test_addressish_01() -> void {
  auto specimen = ::ip::uint128_t(0x20010db8e0a38792lu) << 64 | 0x35514737865a519dlu;
  dump_bits_little_endian(std::cerr, specimen, __FUNCTION__, "specimen");
  auto actual1 = reorder<WIDTH>(specimen);
  dump_bits_little_endian(std::cerr, actual1, __FUNCTION__, "actual1");
  auto expected1 = ::ip::uint128_t(0x9d515a8637475135) << 64 | 0x9287a3e0b80d0120;
  CPPUNIT_ASSERT_EQUAL(expected1, actual1);
  auto actual2 = reorder<WIDTH>(reorder<WIDTH>(specimen));
  dump_bits_little_endian(std::cerr, actual2, __FUNCTION__, "actual2");
  auto expected2 = specimen;
  CPPUNIT_ASSERT_EQUAL(expected2, actual2);
}

auto tests::unit::ip::endian::Reorder<128>::test_addressish_02() -> void {
  auto specimen = ::ip::uint128_t(0x20010db8e0a38792lu) << 64 | 0x35514737865a519dlu;
  dump_bits_little_endian(std::cerr, specimen, __FUNCTION__);
  auto actual = reorder<WIDTH>(reorder<WIDTH>(specimen));
  dump_bits_little_endian(std::cerr, actual, __FUNCTION__);
  auto expected = specimen;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

#import std.setw
#import std.right
#import std.dec
#import std.oct
#import std.hex
#import std.showbase
auto tests::unit::ip::endian::Reorder<128>::dump_bits_little_endian(std::ostream &outbound, ::ip::uint128_t subject, c::const_stringz function, c::const_stringz qualification) -> void {
  outbound << function;
  if (!qualification.empty()) {
    outbound << ' ' << qualification;
  }
  outbound << std::showbase
           << "\nsubject:    "
           << std::setw(2) << std::right // because 0 is "0" but 1 is "01", etc.
           << std::oct << subject
           << "\nsubject:   " << std::hex << subject
           << "\nsubject: (10)" << std::dec << subject
           << "\nbits (little endian):  ";
  for (unsigned i(0), e(128); e != i; ++i, subject >>= 1) {
    auto bit = 0 != (subject & 01);
    outbound << bit;
  }
  outbound << '\n';
}

#import std.to_string
#import tests.unit.ip.endian.Reorder
#import rigging.suite.io
auto tests::unit::ip::endian::Reorder<128>::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("Reorder<" + std::to_string(WIDTH) + ">");
  series << call("formula_all0", &Reorder::test_formula_all0)
         << call("formula_allF", &Reorder::test_formula_allF)
         << call("formula_lowF", &Reorder::test_formula_lowF)
         << call("formula_highF", &Reorder::test_formula_highF)
         << call("reorder_all0", &Reorder::test_reorder_all0)
         << call("reorder_allF", &Reorder::test_reorder_allF)
         << call("reorder_lowF", &Reorder::test_reorder_lowF)
         << call("reorder_highF", &Reorder::test_reorder_highF)
         << call("reorder_series", &Reorder::test_reorder_series)
         << call("roundtrip", &Reorder::test_roundtrip)
         << call("addressish_01", &Reorder::test_addressish_01)
         << call("addressish_02", &Reorder::test_addressish_02)
    ;
  return finalize(series);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.size_t
namespace tests::unit::ip::endian {
  template<std::size_t N> class Reorder;
}
#import tests.unit.ip.endian.Reorder.128
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import tests.unit.ip.endian.Palette
template<std::size_t N> class tests::unit::ip::endian::Reorder : public cppunit::test::Fixture, Palette {
public:
  static constexpr auto const WIDTH = N;

  auto test_reorder() -> void;
  auto test_roundtrip() -> void;
  auto test_addressish() -> void;

  static auto suite() -> cppunit::Test *;
};
// All specializations implementations <cpp> will need these
#import std.cerr
#import tests.unit.ip.endian.Reorder.16
#import tests.unit.ip.endian.Reorder.32
#import tests.unit.ip.endian.Reorder.64
#endiv
#divert <tpp>
#import std.to_string
#import tests.unit.ip.endian.Reorder
#import rigging.suite.io
template<std::size_t N> auto tests::unit::ip::endian::Reorder<N>::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("Reorder<" + std::to_string(WIDTH) + ">");
  series << call("reorder", &Reorder::test_reorder)
         << call("roundtrip", &Reorder::test_roundtrip)
         << call("addressish", &Reorder::test_addressish)
    ;
  return finalize(series);
}
#endiv

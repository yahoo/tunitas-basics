// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import ip.in4 // for in4::addr
#import ip.in6 // for in6::addr
#import ip.Address
#import std.string
namespace ip {
  template<typename RESULT> inline auto as(std::string const &) -> RESULT;
  template<> inline auto as<in4::addr_t>(std::string const &) -> in4::addr_t;
  template<> inline auto as<in4::addr>(std::string const &) -> in4::addr;
  template<> inline auto as<in6::addr_t>(std::string const &) -> in6::addr_t;
  template<> inline auto as<in6::addr>(std::string const &) -> in6::addr;
  template<> inline auto as<Address>(std::string const &) -> Address;
}
#endiv
#divert <ipp>
template<typename RESULT> auto ip::as(std::string const &) -> RESULT {
  static_assert(0 == sizeof (RESULT) && 0 != sizeof (RESULT), "specializations only");
  return RESULT();
}

#import std.system_error
#import std.system_category

#import ip.as.RESULT.in6
#import ip.inet.pton.in4
template<> auto ip::as<ip::in4::addr_t>(std::string const &syntax) -> in4::addr_t {
  auto r = inet::pton<in4::addr>(syntax);
  if (!ok(r)) {
    throw std::system_error(error_num(r), std::system_category());
  }
  return as<in4::addr_t>(value(r));
}

template<> auto ip::as<ip::in4::addr>(std::string const &syntax) -> in4::addr {
  auto r = inet::pton<in4::addr>(syntax);
  if (!ok(r)) {
    throw std::system_error(error_num(r), std::system_category());
  }
  return value(r);
}

#import ip.as.RESULT.in6
#import ip.inet.pton.in6
template<> auto ip::as<ip::in6::addr_t>(std::string const &syntax) -> in6::addr_t {
  auto r = inet::pton<in6::addr>(syntax);
  if (!ok(r)) {
    throw std::system_error(error_num(r), std::system_category());
  }
  return as<in6::addr_t>(value(r));
}

template<> auto ip::as<ip::in6::addr>(std::string const &syntax) -> in6::addr {
  auto r = inet::pton<in6::addr>(syntax);
  if (!ok(r)) {
    throw std::system_error(error_num(r), std::system_category());
  }
  return value(r);
}

#import std.move
template<> auto ip::as<ip::Address>(std::string const &syntax) -> Address {
  return Address{syntax};
}
#endiv

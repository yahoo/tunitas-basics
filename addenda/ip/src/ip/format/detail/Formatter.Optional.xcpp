// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import ip.format.detail.Formatter
#import ip.format.required.in // Optional
#import std.basic_ostream
namespace ip::format::detail {
  //
  // A std::optional<ADDRESS> is insertable with operator<<
  // Throws std::invalid_argument if the std::optional contains nothing.
  //
  // Indirects into the std::optional to recover the address
  // Protect with format::inn if you believe you want to print "(null)" in lieu of the exception
  // 
  template<typename CHAR, typename TRAITS, required::in::Optional OPTIONAL> inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, Formatter<OPTIONAL> const &) -> std::basic_ostream<CHAR, TRAITS> &;
}
#endiv
#divert <ipp>
#import ip.as
#import std.invalid_argument
namespace ip::format {
  template<typename CHAR, typename TRAITS, required::in::Optional OPTIONAL> auto detail::operator<<(std::basic_ostream<CHAR, TRAITS> &o, Formatter<OPTIONAL> const &d) -> std::basic_ostream<CHAR, TRAITS> & {
    if (!d.value) {
      throw std::invalid_argument("empty optional");
    }
    // We don't need to distinguish which address{4,6} because as<std::string>(...) works on either kind of address.
    return o << ip::as<std::string>(*d.value);
  }
}
#endiv

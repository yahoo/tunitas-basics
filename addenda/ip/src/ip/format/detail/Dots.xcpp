// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import ip.format // the namespace, and the types therein
#import ip.format.required.in4
namespace ip::format::detail {
  //
  // An IPv4 address is insertable with operator<<
  // All the structure does is provide type safety around the Address4
  //
  // Usage #1 (with the addr_t or addr)
  //
  //     auto a4 = .. in4::addr_t or in4::addr
  //     std::cout << dots(a4)
  //
  // Usage #2 (with std::optional)
  //
  //     std::optional<in4::addr_t> opt
  //     std::cout << format::inn(dots(opt)); <---- emits "(null)"
  //     std::cout << dots(opt); <----------------- throws on empty
  //
  template<required::in4::Either EITHER> class Dots;
}

#import format.detail.ifnot.traits.Sizer
namespace format::detail::ifnot::traits {
  template<ip::format::required::in4::Either EITHER> struct Sizer<ip::format::detail::Dots<EITHER>>;
}
#endiv
#divert <hpp>
#import ip.format.detail.Formatter
template<ip::format::required::in4::Either EITHER> class ip::format::detail::Dots : public Formatter<EITHER> {
  using Ancestor = Formatter<EITHER>;
public:
  using Ancestor::Formatter;
};

namespace format::detail::ifnot::traits {
  // So that the Sizer system knows the inheritance properties among the class templates
  template<ip::format::required::in4::Either EITHER> struct Sizer<ip::format::detail::Dots<EITHER>>
    : public Sizer<ip::format::detail::Formatter<EITHER>>
  { }; 
}
#endiv
#divert <cpp>
#import format.detail.ifnot.expected.Operations
#import format.detail.ifnot.traits.Operations
namespace format::detail::ifnot {
  // test code 
  using namespace format::detail::ifnot;
  namespace in4 = ip::in4;
  using ip::format::detail::Dots;
  static_assert(expected::Operations<traits::Operations<Dots<in4::addr>>>, "fail");
  static_assert(expected::Operations<traits::Operations<Dots<in4::addr_t>>>, "fail");
}
#endiv

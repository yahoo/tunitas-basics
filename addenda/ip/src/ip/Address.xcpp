// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace ip {
  //
  // A generic variant record container; i.e. holds a tagged IPv6, IPv4
  // or maybe it holds a string, or maybe as some bits.
  // but is suitable for sorting & printing
  //
  class Address;
}
#endiv
#divert <hpp>
#import std.ostream
namespace ip {
  // equality true if both addresses are valid and the ip Address strings match
  inline auto operator==(Address const &, Address const &) -> bool;
  inline auto operator!=(Address const &, Address const &) -> bool;
    
  inline auto operator<<(std::ostream &, Address const &) -> std::ostream &;
  inline auto swap(ip::Address &, ip::Address &) -> void;
}
#import std.swap
namespace std {
  using ip::swap;
}

#import ip.as.RESULT.Address
#import std.min
#import std.max
#import std.string
#import want.maximum
class ip::Address {
public:
  inline Address();
  inline explicit Address(in4::addr_t);            // WATCHOUT absent 'char const *' then string literals go here
  inline auto operator=(in4::addr_t) -> Address &; // Ibidem.
  inline explicit Address(in4::addr const &);
  inline auto operator=(in4::addr const &) -> Address &;
  inline explicit Address(in6::addr_t);
  inline auto operator=(in6::addr_t) -> Address &;
  inline explicit Address(in6::addr const &);
  inline auto operator=(in6::addr const &) -> Address &;
  inline explicit Address(char const *);            // see the WATCHOUT above
  inline auto operator=(char const *) -> Address &; // Ibidem.
  inline explicit Address(std::string const &);
  inline auto operator=(std::string const &) -> Address &;
  Address(Address const &) = default;
  Address(Address &&) = default;
  auto operator=(Address const &) -> Address & = default;
  auto operator=(Address &&) -> Address & = default;
  
  // The three-valued-logic { INVALID, IPv4, IPv6 }
  // ... these can be expensive as they parse the address representation
  inline auto isIPv4() const -> bool;
  inline auto isIPv6() const -> bool;
  inline auto isValid() const -> bool;

  // same as !isValid() ... is NOT a test for the zero address (0::0 or 0.0.0.0)
  inline auto isNull() const -> bool;

  inline auto clear() -> void;

  // to convert to a string, or operator<< use the idiom
  // nearby ... as<std::string>(Address) -> std::string
protected:
  enum class Tag { NONE, IPv6, IPv4, COLONS, DOTS };
  static constexpr std::size_t const CONTAINER_SIZE = want::maximum(sizeof (in4::addr), sizeof (in6::addr), in4::ADDRSTRLEN, in6::ADDRSTRLEN);
  Tag tag;
  union {
    in6::addr in6;
    in4::addr in4;
    char str6[in6::ADDRSTRLEN];
    char str4[in4::ADDRSTRLEN];
    char space[CONTAINER_SIZE];
  };
  // The rhs is the syntax of an IPv4 or IPv6 address; e.g. 198.51.100.99 or 2001:0db8:a740:4492:a094:0b34:cd45:5c26
  inline static auto assign(Address &lhs, char const *rhs) -> void;
  friend auto ip::swap(Address &, Address &) -> void;
  template<typename RESULT> friend auto ip::as(Address const &) -> RESULT;
  friend auto ip::operator==(Address const &, Address const &) -> bool;
public:
  class Test;
  friend class Test;
};
#endiv
#divert <ipp>
#import std.runtime_error
#import std.strncmp

#import ip.address.cmp
auto ip::operator==(Address const &a, Address const &b) -> bool {
  using ip::address::cmp;
  if (a.tag != b.tag) {
    return false;
  }
  switch (a.tag) {
  case Address::Tag::NONE:
    // unlike SQL where NULL <> NULL, we need null == NULL for sort-stability.
    return true;
  case Address::Tag::IPv6:
    return cmp(a.in6) == cmp(b.in6);
  case Address::Tag::IPv4:
    return cmp(a.in4) == cmp(b.in4);
    break;
  case Address::Tag::COLONS:
    return cmp(a.str6) == cmp(b.str6);
    break;
  case Address::Tag::DOTS:
    return cmp(a.str4) == cmp(b.str4);
  default:
    throw std::runtime_error("invalid tag");
  }
}

auto ip::operator!=(Address const &a, Address const &b) -> bool {
  return !operator==(a, b);
}

#import ip.as.RESULT.Address
auto ip::operator<<(std::ostream &o, Address const &a) -> std::ostream & {
  return o << as<std::string>(a);
}

auto ip::swap(ip::Address &a, ip::Address &b) -> void {
  std::swap(a.tag, b.tag);
  std::swap(a.space, b.space);
}

ip::Address::Address() {
  clear();
}

ip::Address::Address(in4::addr_t addr) {
  clear();
  operator=(addr);
}

ip::Address::Address(in4::addr const &addr) {
  clear();
  operator=(addr);
}

ip::Address::Address(in6::addr_t addr) {
  clear();
  operator=(addr);
}

ip::Address::Address(in6::addr const &addr) {
  clear();
  operator=(addr);
}

ip::Address::Address(std::string const &syntax) {
  clear();
  operator=(syntax);
}

ip::Address::Address(char const *syntax) {
  clear();
  operator=(syntax);
}

#import ip.inet.lhs
auto ip::Address::operator=(in4::addr_t addr) -> Address & {
  tag = Tag::IPv4;
  inet::lhs(in4) = addr;
  return *this;
}

auto ip::Address::operator=(in4::addr const &addr) -> Address & {
  tag = Tag::IPv4;
  inet::lhs(in4) = addr;
  return *this;
}

auto ip::Address::operator=(in6::addr_t addr) -> Address & {
  tag = Tag::IPv6;
  inet::lhs(in6) = addr;
  return *this;
}

auto ip::Address::operator=(in6::addr const &addr) -> Address & {
  tag = Tag::IPv6;
  inet::lhs(in6) = addr;
  return *this;
}

auto ip::Address::operator=(std::string const &syntax) -> Address & {
  return operator=(syntax.data());
}

#import std.invalid_argument
auto ip::Address::operator=(char const *syntax) -> Address & {
  // Strong guarantee ... if an exception occurs then the Address is not modified.
  Address tmp;
  assign(tmp, syntax);
  std::swap(tmp, *this);
  return *this;
}

#import std.char_traits
#include <cassert>
auto ip::Address::assign(Address &lhs, char const *rhs) -> void {
  if (nullptr == rhs) {
    throw std::invalid_argument("null pointer");
  }
  bool dots = false;
  bool colons = false;
  char *li(&lhs.space[0]);
  char const *const le(&lhs.space[sizeof (lhs.space)-1]);
  char const *ri(rhs);
  for ( ; li != le && '\0' != *ri; ++li, ++ri) {
    *li = *ri;
    dots |= '.' == *li;
    colons |= ':' == *li;
  }
  *li = '\0';
  assert(li <= &lhs.space[sizeof (lhs.space)]);
  if (colons) {
    lhs.tag = Tag::COLONS;
  } else if (dots) {
    lhs.tag = Tag::DOTS;
  } else {
    // either IPv4 or IPv6 ... but ip::Address does not support DNS names.
    throw std::invalid_argument("improper IPv4 & IPv6 address syntax");
  }
}

#import std.uninitialized_fill_n
auto ip::Address::clear() -> void {
  // Must be safe to call from the constructor on uninitialized memory
  tag = Tag::NONE;
  std::uninitialized_fill_n(&space[0], sizeof (space), '\0');
}
 
auto ip::Address::isIPv4() const -> bool {
  return isValid() && (Tag::IPv4 == tag || Tag::DOTS == tag);
}

auto ip::Address::isIPv6() const -> bool {
  return isValid() && (Tag::IPv6 == tag || Tag::COLONS == tag);
}

auto ip::Address::isValid() const -> bool {
  return Tag::NONE != tag;
}

auto ip::Address::isNull() const -> bool {
  return !isValid();
}
#endiv

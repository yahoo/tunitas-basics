// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import ip.endian.required.Integer
#import ip.endian.required.Order
#import ip.endian.Integer
namespace ip::endian {
  //
  // Convert from ORDER to REORDER
  //
  // Usage:
  //
  //     Integer<SOME_ORDER, SOME_INTEGER> wrapped = ...some_value;
  //     auto rewrapped_hosty = convert<Order::HOST>(wrapped);
  //     auto rewrapped_netish = convert<Order::HOST>(wrapped);
  //
  template<required::Order REORDER, required::Order ORDER, required::Integer INTEGER> inline auto convert(Integer<ORDER, INTEGER>) -> Integer<REORDER, INTEGER>;
}
#endiv
#divert <ipp>
#import ip.endian.Converter
#import ip.endian.Order
namespace ip {
  template<endian::required::Order REORDER, endian::required::Order ORDER, endian::required::Integer INTEGER> auto endian::convert(endian::Integer<ORDER, INTEGER> v) -> endian::Integer<REORDER, INTEGER> {
    //
    // WATCHOUT - the converting constructor calls here to convert
    // DO NOT call that converting constructor from here.
    // to wit: Integer<ORDER, INTEGER>::Integer(Integer<REORDER, INTEGER> const &)
    //
    Converter<REORDER, ORDER> converter;
    endian::Integer<REORDER, INTEGER> ret(converter((INTEGER) v));
    return ret;
  }
}
#endiv

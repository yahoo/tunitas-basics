// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import ip // ip::uint{16,32,64,128}_t
// require __BYTE_ORDER
// require __LITTLE_ENDIAN
// require __BIG_ENDIAN
#include <endian.h>
#if __BYTE_ORDER == __BIG_ENDIAN
#elif __BYTE_ORDER == __LITTLE_ENDIAN
#else
#error this machine / compiler system is neither big endian nor little endian
#endif
#import ip.endian.required.Integer
namespace ip::endian {
  // Endian support ... reordering (or not)
  template<unsigned BITS, required::Integer INTEGER> inline constexpr auto reorder(INTEGER) -> INTEGER;
#if __BYTE_ORDER == __LITTLE_ENDIAN
  template<> inline constexpr auto reorder<8, std::uint8_t>(std::uint8_t) -> std::uint8_t;
  template<> inline constexpr auto reorder<16, std::uint16_t>(std::uint16_t) -> std::uint16_t;
  template<> inline constexpr auto reorder<32, std::uint32_t>(std::uint32_t) -> std::uint32_t;
  template<> inline constexpr auto reorder<64, std::uint64_t>(std::uint64_t) -> std::uint64_t;
  template<> inline constexpr auto reorder<128, ip::uint128_t>(ip::uint128_t) -> ip::uint128_t;
#endif
}
#endiv
#divert <ipp>
#if __BYTE_ORDER == __BIG_ENDIAN
template<unsigned BITS, ip::endian::required::Integer INTEGER> inline constexpr auto ip::endian::reorder(INTEGER integer) -> INTEGER {
  return integer;
}
#elif __BYTE_ORDER == __LITTLE_ENDIAN
template<unsigned BITS, ip::endian::required::Integer INTEGER> inline constexpr auto ip::endian::reorder(INTEGER integer) -> INTEGER {
  static_assert(0 == sizeof (INTEGER) && 0 != sizeof (INTEGER), "only specializations");
  return INTEGER();
}

#if 4 == __GNUC__ && 8 >= __GNUC_MAJOR__
//
// gcc-4.8 is not strong enough yet.
// To Wit:
// src/ip/endian/reorder.xcpp:73:1: error: body of constexpr function 'constexpr INTEGER ip::endian::reorder(INTEGER) [with unsigned int BITS = 32u; INTEGER = unsigned int]' not a return-statement
//
#define __GCC_FAILS_BODY_OF_CONSTEXPR_FUNCTION_IS_NOT_A_RETURN_STATEMENT__
#endif

// See /usr/include/bits/byteswap.h

template<> constexpr auto ip::endian::reorder<8, std::uint8_t>(std::uint8_t v) -> std::uint8_t {
  // A single byte, no swap needed.
  return v;
}

template<> constexpr auto ip::endian::reorder<16, std::uint16_t>(std::uint16_t v) -> std::uint16_t {
#ifdef __GCC_FAILS_BODY_OF_CONSTEXPR_FUNCTION_IS_NOT_A_RETURN_STATEMENT__
  // gcc 4-(series?) can only evaluate constexpr if it is a single return statement
   return
    ((/*b_*/ (v & ((std::uint16_t)(0xff) << 0x08)) >> 0x8)
    |(/*_b*/ (v & ((std::uint16_t)(0xff) << 0x00)) << 0x8));
#else
  std::uint16_t ff = 0xff;
  auto b_ = (v & (ff << 0x08)) >> 0x8; 
  auto _b = (v & (ff << 0x00)) << 0x8;
  auto r = b_ | _b;
  return r;
#endif
}

template<> constexpr auto ip::endian::reorder<32, std::uint32_t>(std::uint32_t v) -> std::uint32_t {
#ifdef __GCC_FAILS_BODY_OF_CONSTEXPR_FUNCTION_IS_NOT_A_RETURN_STATEMENT__
  // gcc 4-(series?) can only evaluate constexpr if it is a single return statement
  return
    ((/*t_123*/ (v & ((std::uint32_t)(0xff) << 0x18)) >> 0x18)
    |(/*t0_23*/ (v & ((std::uint32_t)(0xff) << 0x10)) >> 0x08)
    |(/*t01_3*/ (v & ((std::uint32_t)(0xff) << 0x08)) << 0x08)
    |(/*t012_*/ (v & ((std::uint32_t)(0xff) << 0x00)) << 0x18));
#else
  std::uint32_t ff = 0xff;
  auto t_123 = (v & (ff << 0x18)) >> 0x18; 
  auto t0_23 = (v & (ff << 0x10)) >> 0x08; 
  auto t01_3 = (v & (ff << 0x08)) << 0x08;
  auto t012_ = (v & (ff << 0x00)) << 0x18;
  auto r = t_123 | t0_23| t01_3| t012_;
  return r;
#endif
}

template<> constexpr auto ip::endian::reorder<64, std::uint64_t>(std::uint64_t v) -> std::uint64_t {
#ifdef __GCC_FAILS_BODY_OF_CONSTEXPR_FUNCTION_IS_NOT_A_RETURN_STATEMENT__
  // gcc 4-(series?) can only evaluate constexpr if it is a single return statement
  return
    ((/*t_1234567*/ (v & ((std::uint64_t)(0xff) << 0x38)) >> 0x38)
    |(/*t0_234567*/ (v & ((std::uint64_t)(0xff) << 0x30)) >> 0x28)
    |(/*t01_34567*/ (v & ((std::uint64_t)(0xff) << 0x28)) >> 0x18)
    |(/*t012_4567*/ (v & ((std::uint64_t)(0xff) << 0x20)) >> 0x08)
    |(/*t0123_567*/ (v & ((std::uint64_t)(0xff) << 0x18)) << 0x08)
    |(/*t01234_67*/ (v & ((std::uint64_t)(0xff) << 0x10)) << 0x18)
    |(/*t012345_7*/ (v & ((std::uint64_t)(0xff) << 0x08)) << 0x28)
    |(/*t0123456_*/ (v & ((std::uint64_t)(0xff) << 0x00)) << 0x38));
#else
  std::uint64_t ff = 0xff;
  auto t_1234567 = (v & (ff << 0x38)) >> 0x38;
  auto t0_234567 = (v & (ff << 0x30)) >> 0x28;
  auto t01_34567 = (v & (ff << 0x28)) >> 0x18;
  auto t012_4567 = (v & (ff << 0x20)) >> 0x08; 
  auto t0123_567 = (v & (ff << 0x18)) << 0x08; 
  auto t01234_67 = (v & (ff << 0x10)) << 0x18; 
  auto t012345_7 = (v & (ff << 0x08)) << 0x28;
  auto t0123456_ = (v & (ff << 0x00)) << 0x38;
  auto r = (t_1234567|
            t0_234567|
            t01_34567|
            t012_4567|
            t0123_567|
            t01234_67|
            t012345_7|
            t0123456_);
  return r;
#endif
}

template<> constexpr auto ip::endian::reorder<128, ip::uint128_t>(ip::uint128_t v) -> ip::uint128_t {
#ifdef __GCC_FAILS_BODY_OF_CONSTEXPR_FUNCTION_IS_NOT_A_RETURN_STATEMENT__
  // gcc 4-(series?) can only evaluate constexpr if it is a single return statement
  return
    ((/*t_123456789abcdef*/ (v & ((ip::uint128_t)(0xff) << 0x78)) >> 0x78)
    |(/*t0_23456789abcdef*/ (v & ((ip::uint128_t)(0xff) << 0x70)) >> 0x68)
    |(/*t01_3456789abcdef*/ (v & ((ip::uint128_t)(0xff) << 0x68)) >> 0x58)
    |(/*t012_456789abcdef*/ (v & ((ip::uint128_t)(0xff) << 0x60)) >> 0x48)
    |(/*t0123_56789abcdef*/ (v & ((ip::uint128_t)(0xff) << 0x58)) >> 0x38)
    |(/*t01234_6789abcdef*/ (v & ((ip::uint128_t)(0xff) << 0x50)) >> 0x28)
    |(/*t012345_789abcdef*/ (v & ((ip::uint128_t)(0xff) << 0x48)) >> 0x10)
    |(/*t0123456_89abcdef*/ (v & ((ip::uint128_t)(0xff) << 0x40)) >> 0x08) 
    |(/*t01234567_9abcdef*/ (v & ((ip::uint128_t)(0xff) << 0x38)) << 0x08)
    |(/*t012345678_abcdef*/ (v & ((ip::uint128_t)(0xff) << 0x30)) << 0x18)
    |(/*t0123456789_bcdef*/ (v & ((ip::uint128_t)(0xff) << 0x28)) << 0x28)
    |(/*t0123456789a_cdef*/ (v & ((ip::uint128_t)(0xff) << 0x20)) << 0x38)
    |(/*t0123456789ab_def*/ (v & ((ip::uint128_t)(0xff) << 0x18)) << 0x48)
    |(/*t0123456789abc_ef*/ (v & ((ip::uint128_t)(0xff) << 0x10)) << 0x58)
    |(/*t0123456789abcd_f*/ (v & ((ip::uint128_t)(0xff) << 0x08)) << 0x68)
    |(/*t0123456789abcde_*/ (v & ((ip::uint128_t)(0xff) << 0x00)) << 0x78));
#else
  ip::uint128_t ff = 0xff;
  //    01234567
  auto t_123456789abcdef = (v & (ff << 0x78)) >> 0x78;
  auto t0_23456789abcdef = (v & (ff << 0x70)) >> 0x68;
  auto t01_3456789abcdef = (v & (ff << 0x68)) >> 0x58;
  auto t012_456789abcdef = (v & (ff << 0x60)) >> 0x48;
  auto t0123_56789abcdef = (v & (ff << 0x58)) >> 0x38;
  auto t01234_6789abcdef = (v & (ff << 0x50)) >> 0x28;
  auto t012345_789abcdef = (v & (ff << 0x48)) >> 0x18;
  auto t0123456_89abcdef = (v & (ff << 0x40)) >> 0x08; 
  //            01234567
  auto t01234567_9abcdef = (v & (ff << 0x38)) << 0x08; 
  auto t012345678_abcdef = (v & (ff << 0x30)) << 0x18; 
  auto t0123456789_bcdef = (v & (ff << 0x28)) << 0x28;
  auto t0123456789a_cdef = (v & (ff << 0x20)) << 0x38;
  auto t0123456789ab_def = (v & (ff << 0x18)) << 0x48;
  auto t0123456789abc_ef = (v & (ff << 0x10)) << 0x58;
  auto t0123456789abcd_f = (v & (ff << 0x08)) << 0x68;
  auto t0123456789abcde_ = (v & (ff << 0x00)) << 0x78;
  auto r = (t_123456789abcdef|
            t0_23456789abcdef|
            t01_3456789abcdef|
            t012_456789abcdef|
            t0123_56789abcdef|
            t01234_6789abcdef|
            t012345_789abcdef|
            t0123456_89abcdef|
            t01234567_9abcdef|
            t012345678_abcdef|
            t0123456789_bcdef|
            t0123456789a_cdef|
            t0123456789ab_def|
            t0123456789abc_ef|
            t0123456789abcd_f|
            t0123456789abcde_);
  return r;
#endif
}
#endif
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import ip.endian.required.Order
namespace ip::endian {
  //
  // Is reordering needed or not?
  //
  // Usage:
  //    Converter<Order::HOST, Order::HOST> converter;
  //    native_integer_type some_value = ...
  //    native_integer_type maybe_reordered = converter(some_value);
  //
  //    Converter<Order::NETWORK, Order::HOST> converter;
  //    native_integer_type some_value = ...
  //    native_integer_type maybe_reordered = converter(some_value);
  //
  //    Converter<Order::HOST, Order::NETWORK> converter;
  //    native_integer_type some_value = ...
  //    native_integer_type maybe_reordered = converter(some_value);
  //
  //    Converter<Order::NETWORK, Order::NETWORK> converter;
  //    native_integer_type some_value = ...
  //    native_integer_type maybe_reordered = converter(some_value);
  //
  // ... you get the idea
  //
  template<required::Order ORDER1, required::Order ORDER2> struct Converter;
}
#endiv
#divert <hpp>
#import ip.endian.Order
#import ip.endian.converter.Same
#import ip.endian.converter.Swap
namespace ip {
  template<endian::required::Order ORDER1, endian::required::Order ORDER2> struct endian::Converter : public std::conditional<ORDER1 == ORDER2, converter::Same, converter::Swap>::type { };
}
#endiv

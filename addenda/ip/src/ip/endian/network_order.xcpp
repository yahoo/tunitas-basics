// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import ip.endian.Integer
#import ip.endian.required.Integer
namespace ip::endian {
  template<required::Integer INTEGER> inline auto network_order(Integer<Order::NETWORK, INTEGER>) -> Integer<Order::NETWORK, INTEGER>;
  template<required::Integer INTEGER> inline auto network_order(Integer<Order::HOST, INTEGER>) -> Integer<Order::NETWORK, INTEGER>;

  // n.b. an INTEGER is already in HOST order; it is returned in Order::NETWORK (swapping as necessary)
  template<required::Integer INTEGER> inline auto network_order(INTEGER) -> Integer<Order::NETWORK, INTEGER>;
  template<> inline auto network_order<std::uint8_t>(std::uint8_t) -> Integer<Order::NETWORK, std::uint8_t>;
}
#endiv
#divert <ipp>
template<ip::endian::required::Integer INTEGER> auto ip::endian::network_order(Integer<Order::NETWORK, INTEGER> v) -> Integer<Order::NETWORK, INTEGER> {
  return v;
}

template<ip::endian::required::Integer INTEGER> auto ip::endian::network_order(Integer<Order::HOST, INTEGER> v) -> Integer<Order::NETWORK, INTEGER> {
  return network_order((INTEGER) v); // extract the host-order integer, do the rework.
}

template<> auto ip::endian::network_order<std::uint8_t>(std::uint8_t v) -> Integer<Order::NETWORK, std::uint8_t> {
  return Integer<Order::NETWORK, std::uint8_t>(v); // no reordering within a byte
}

#import ip.endian.reorder
template<ip::endian::required::Integer INTEGER> auto ip::endian::network_order(INTEGER v) -> Integer<Order::NETWORK, INTEGER> {
#if __BYTE_ORDER == __BIG_ENDIAN
  auto fixed = v;
#elif __BYTE_ORDER == __LITTLE_ENDIAN
  auto fixed = reorder<8*sizeof (INTEGER)>(v);
#else
#error neither big nor little endian - this should have been caught elsewhere
#endif
  return Integer<Order::NETWORK, INTEGER>(fixed);
}
#endiv

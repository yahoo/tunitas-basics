// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#forward ip.inet.sockaddr.Xhs.declaration
namespace ip::inet::sockaddr {
  template<required::constable::Sockaddr SOCKADDR> requires required::constable::Sockaddr4<SOCKADDR> class Xhs<SOCKADDR, IN4>;
}
#endiv
#divert <hpp>
#import ip.inet.sockaddr.Generic
namespace ip::inet::sockaddr {
  template<required::constable::Sockaddr SOCKADDR> requires required::constable::Sockaddr4<SOCKADDR> class Xhs<SOCKADDR, IN4> : public Generic<SOCKADDR> {
    using Ancestor = Generic<SOCKADDR>;
  protected:
    ~Xhs() = default;
  public:
    using sockaddr_type = SOCKADDR; // may or may not be be consty
    inline explicit Xhs(sockaddr_type &);
    // These are prefixed with 'get_' to distinguish them from the nearby old_school typenames; e.g. addr_type() is the zero address
    inline auto get_family() const -> typename Ancestor::Family;
    inline auto get_port() const -> typename Ancestor::port::Integer; // .................... returned in host order
    inline auto get_addr() const -> typename Ancestor::address::Structure const &; // ....... always in network order
    inline auto get_addr_t() const -> typename Ancestor::address::Integer; // ............... returned in host order
  };
}
#endiv
#divert <ipp>
#import ip.endian.Integer
#import ip.endian.host_order
#import ip.as.RESULT.in4.addr
#import ip.endian.host_order
namespace ip::inet::sockaddr {
  template<required::constable::Sockaddr SOCKADDR> requires required::constable::Sockaddr4<SOCKADDR> 
  Xhs<SOCKADDR, IN4>::Xhs(sockaddr_type &subject)
    : Ancestor(subject)
  { }
  template<required::constable::Sockaddr SOCKADDR> requires required::constable::Sockaddr4<SOCKADDR> 
  auto Xhs<SOCKADDR, IN4>::get_family() const -> typename Ancestor::Family {
    return typename Ancestor::Family{Ancestor::subject.sin_family};
  }
  template<required::constable::Sockaddr SOCKADDR> requires required::constable::Sockaddr4<SOCKADDR> 
  auto Xhs<SOCKADDR, IN4>::get_port() const -> typename Ancestor::port::Integer {
    typename Ancestor::port::Network po(Ancestor::subject.sin_port);
    return endian::host_order(po);
  }
  template<required::constable::Sockaddr SOCKADDR> requires required::constable::Sockaddr4<SOCKADDR> 
  auto Xhs<SOCKADDR, IN4>::get_addr() const -> typename Ancestor::address::Structure const & {
    return Ancestor::subject.sin_addr;
  }
  template<required::constable::Sockaddr SOCKADDR> requires required::constable::Sockaddr4<SOCKADDR> 
  auto Xhs<SOCKADDR, IN4>::get_addr_t() const -> typename Ancestor::address::Integer {
    return as<typename Ancestor::address::Integer>(Ancestor::subject.sin_addr);
  }
}
#endiv

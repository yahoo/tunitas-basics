// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace ip {
  namespace inet {
    namespace error {
      //
      // See the commentariat in namespace.xcpp
      //
      union Code;
    }
  }
}
#endiv
#divert <hpp>
#import ip.inet.error.Condition
#import sys.e.Code
namespace ip {
  namespace inet {
    namespace error {
      inline auto eai(Code) -> inet::error::Condition;
      inline auto sys(Code) -> sys::e::Code;
    }
  }
}

#import std.int16_t
#import std.uint16_t
#import std.uint32_t
union ip::inet::error::Code {
  static Code const SUCCESS;
  struct Integers {
    std::int16_t eai; // the EAI code (negative)
    std::int16_t sys; // errno (positive)
  } packed_as_integers;
  struct Enumed {
    Condition    eai; // the EAI code (same thing)
    std::int16_t sys; // errno (positive)
  } packed_as_enumerations;
  std::uint32_t blended;
  inline Code();
  inline explicit Code(std::uint32_t blended); 
  inline Code(std::int16_t eai, std::int16_t sys); 
  inline operator int() const;
  // same as the constructor [why do we need these?]
  inline static auto make(std::uint32_t blended) -> Code;
  inline static auto make(std::int16_t eai, std::int16_t sys) -> Code;
};
inline ip::inet::error::Code const ip::inet::error::Code::SUCCESS{0};

static_assert(sizeof (int) == sizeof (ip::inet::error::Code), "bad layout");
static_assert(sizeof (ip::inet::error::Code::blended) <= sizeof (int), "unexpected size");
#endiv
#divert <ipp>

auto ip::inet::error::eai(Code c) -> inet::error::Condition { return inet::error::Condition{c.packed_as_integers.eai}; }
auto ip::inet::error::sys(Code c) -> sys::e::Code { return sys::e::Code{c.packed_as_integers.sys}; }

ip::inet::error::Code::Code() {
  blended = 0;
}

ip::inet::error::Code::Code(std::uint32_t arg_blended) {
  blended = arg_blended;
}

ip::inet::error::Code::Code(std::int16_t arg_eai, std::int16_t arg_sys) {
  packed_as_integers.eai = arg_eai;
  packed_as_integers.sys = arg_sys;
}

ip::inet::error::Code::operator int() const {
  return blended;
}

auto ip::inet::error::Code::make(std::uint32_t arg_blended) -> Code {
  return Code(arg_blended);
}

auto ip::inet::error::Code::make(std::int16_t arg_eai, std::int16_t arg_sys) -> Code {
  return Code(arg_eai, arg_sys);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import ip.in4 // ip::in4::addr
#import ip.in6 // ip::in6::addr
namespace ip {
  namespace inet {
    namespace traits {
      //
      // The pantheon, indexed by ADDR
      // 
      template<typename ADDR> struct Addr;
      template<> struct Addr<in4::addr>;
      template<> struct Addr<in6::addr>;
    }
  }
}
#endiv
#divert <hpp>
#import ip.inet.Family
#import ip.inet.Protocol
#import std.size_t
template<typename ADDR> struct ip::inet::traits::Addr {
  static_assert(0 == sizeof (ADDR) && 0 != sizeof (ADDR), "specializations only");
};

template<> class ip::inet::traits::Addr<ip::in4::addr> {
  inline static constexpr auto NETWORK = sys::net::Network::INET6;
public:
  using port_type = in::port_t;
  using addr_type = in4::addr;
  using sockaddr_type = in4::sockaddr;
  using type = addr_type;
  inline constexpr static auto family() -> Family { return sys::af::Family<NETWORK>; }
  [[deprecated("avoid this in new work; the protocol is not a feature of the sockaddr address/protocol family")]] inline constexpr static auto protocol() -> Protocol { return Protocol::NONE; }
  inline constexpr static auto size() -> std::size_t { return addr_size(); }
  inline constexpr static auto addr_size() -> std::size_t { return sizeof (in4::addr); }
  inline constexpr static auto sockaddr_size() -> std::size_t { return sizeof (in4::sockaddr); }
};
  
template<> class ip::inet::traits::Addr<ip::in6::addr> {
  inline static constexpr auto NETWORK = sys::net::Network::INET6;
public:
  using port_type = in::port_t;
  using addr_type = in6::addr;
  using sockaddr_type = in6::sockaddr;
  using type = addr_type;
  inline constexpr static auto family() -> Family { return sys::af::Family<NETWORK>; }
  [[deprecated("avoid this in new work; the protocol is not a feature of the sockaddr address/protocol family")]] inline constexpr static auto protocol() -> Protocol { return Protocol::NONE; }
  inline constexpr static auto size() -> std::size_t { return addr_size(); }
  inline constexpr static auto addr_size() -> std::size_t { return sizeof (in6::addr); }
  inline constexpr static auto sockaddr_size() -> std::size_t { return sizeof (in6::sockaddr); }
};
#endiv

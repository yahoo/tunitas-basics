// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import re.string
#import ip.in6 // ip::in6::addr
#import ip.inet.pton
namespace ip {
  namespace inet {
    template<> inline auto pton<in6::addr>(re::string<c::const_stringz> hostname) -> result::Value<in6::addr>;
    template<> inline auto pton<in6::addr_t>(re::string<c::const_stringz> hostname) -> result::Value<in6::addr_t>;
  }
}
#endiv
#divert <ipp>
#import ip.inet.AF.Family
#import inet_pton
#import std.move
template<> auto ip::inet::pton<ip::in6::addr>(re::string<c::const_stringz> hostname) -> result::Value<in6::addr> {
  using Result = result::Value<in6::addr>;
  in6::addr val;
  auto code = ::inet_pton((int)(AF::INET6), hostname.data(), &val);
  int errnum = errno; // capture this immediately.
  // From inet_pton(3)
  // returns 1 on success (the network address was successfully converted).
  // returns 0 if src does not contain a character string representing a valid network address in the specified address family.
  // returns -1 if af does not contain a valid address family; and errno is set to EAFNOSUPPORT.
  bool ok = 1 == code;
  return Result{ok, errnum, val};
}

#import ip.as
template<> auto ip::inet::pton<ip::in6::addr_t>(re::string<c::const_stringz> hostname) -> result::Value<in6::addr_t> {
  using result_type = result::Value<in6::addr_t>;
  auto to = pton<in6::addr>(hostname);
  return result_type(ok(to), error_num(to), ip::as<in6::addr_t>(value(to)));
}
#endiv

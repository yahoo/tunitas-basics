// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import ip.inet.Family
#forward ip.inet.xhs.family.Lhs.declaration
namespace ip::inet::xhs::family {
  //
  // Given the family value in host order,
  // store and recover the family value in host order.
  //
  template<> class Lhs<Family>;
}
#endiv
#divert <hpp>
template<> class ip::inet::xhs::family::Lhs<ip::inet::Family> {
public:
  // Witness - /usr/include/linux/socket.h:12:typedef unsigned short __kernel_sa_family_t;
  using subject_type = unsigned short;
  inline explicit Lhs(subject_type &);
  Lhs(Lhs const &) = default;
  auto operator=(Lhs const &) -> Lhs & = default;
  Lhs(Lhs &&) = default;
  auto operator=(Lhs &&) -> Lhs & = default;
  inline auto operator=(Family) -> Lhs &;
protected:
  subject_type &subject;
};
#endiv
#divert <ipp>
ip::inet::xhs::family::Lhs<ip::inet::Family>::Lhs(subject_type &arg_subject)
  : subject(arg_subject) {
  ;
}
auto ip::inet::xhs::family::Lhs<ip::inet::Family>::operator=(Family rhs) -> Lhs & {
  subject = (int) rhs; // always host order
  return *this;
}
#endiv

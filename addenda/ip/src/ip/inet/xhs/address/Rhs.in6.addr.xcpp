// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import ip.in6 // ip::in6::addr
#forward ip.inet.xhs.address.Rhs.declaration
namespace ip::inet::xhs::address {
  template<> class Rhs<in6::addr>;
}
#endiv
#divert <hpp>
template<> class ip::inet::xhs::address::Rhs<ip::in6::addr> {
public:
  using subject_type = in6::addr;
  inline explicit Rhs(subject_type const &); // ... assumed to be lying in a sockaddr and is in network order
  inline operator in6::addr_t() const; // ......... returned in host order
  inline operator in6::addr const &() const; // ... returned in network order (by reference)
protected:
    subject_type const &subject;
};
#endiv
#divert <ipp>
#import std.remove_reference
#import std.remove_const
#import std.is_same
#import ip.endian.Integer
#import ip.endian.host_order
namespace ip::inet::xhs::address {
  Rhs<ip::in6::addr>::Rhs(subject_type const &subject)
  : subject(subject)
  { }
  Rhs<ip::in6::addr>::operator in6::addr_t() const {
    // WATCHOUT 's6_addr' is but a #define overlying a really ugly subfield reference inside the union inside in6_addr
    // to wit:   s6_addr ::= __in6_u.__u6_addr8[0]);
    //
    // recall: network order is "big endian" so that the lexicographic prefix property of addresses holds
    //
    // n.b. to follow the pattern, there should be a 128-bit integer field named in6_addr::s6_addr
    // ick. instead there are some goofy #defines which mask over to the character array of 16 characters.
    // want to see: subject.s6_addr as uint128_t
    auto const &subject_s6_addr = *reinterpret_cast<ip::uint128_t const *>(&subject.s6_addr);
    static_assert(std::is_same<ip::uint128_t, std::remove_const<std::remove_reference<decltype(subject_s6_addr)>::type>::type>::value, "not a 128-bit unsigned integer");
    endian::Integer<endian::Order::NETWORK, in6::addr_t> norder{subject_s6_addr};
    return endian::host_order(norder);
  }
  Rhs<ip::in6::addr>::operator in6::addr const &() const {
    return subject; // already in network order
  }
}
#endiv

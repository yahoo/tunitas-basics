// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import ip.in6 // ip::in6::addr_t
#forward ip.inet.xhs.address.Rhs.declaration
namespace ip::inet::xhs::address {
  template<> class Rhs<in6::addr_t>;
}
#endiv
#divert <hpp>
template<> class ip::inet::xhs::address::Rhs<ip::in6::addr_t> {
public:
  using subject_type = in6::addr_t;
  inline explicit Rhs(subject_type const &); // ... assumed to be lying in a sockaddr, and is in network order
  inline operator in6::addr_t() const; // ......... returned in host order
  inline operator in6::addr() const; // ........... returned in network order; must return by value ... 
protected:
  subject_type const &subject;
};
#endiv
#divert <ipp>
#import std.remove_const
#import std.remove_reference
#import std.is_same
#import ip.endian.Integer
#import ip.endian.host_order
namespace ip::inet::xhs::address {
  Rhs<ip::in6::addr_t>::Rhs(subject_type const &subject)
    : subject(subject)
  { }
  Rhs<ip::in6::addr_t>::operator in6::addr_t() const {
    endian::Integer<endian::Order::NETWORK, in6::addr_t> norder{subject};
    return endian::host_order(norder);
  }
  Rhs<ip::in6::addr_t>::operator in6::addr() const {
    // recall: network order is "big endian" so that the lexicographic prefix property of addresses holds
    // n.b. to follow the pattern, there should be a 128-bit integer field named in6_addr::s6_addr
    // ick. instead there are some goofy #defines which mask over to the character array of 16 characters.
    // want to see: address.s6_addr as uint128_t
    in6::addr norder;
    auto &norder_s6_addr = *reinterpret_cast<ip::uint128_t *>(&norder.s6_addr);
    norder_s6_addr = subject; // subject is assumed to be in network order
    return norder;
  }
}
#endiv


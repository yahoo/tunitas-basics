// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import ip.in4 // ip::in4::addr
#forward ip.inet.xhs.address.Rhs.declaration
namespace ip::inet::xhs::address {
  template<> class Rhs<in4::addr>;
}
#endiv
#divert <hpp>
template<> class ip::inet::xhs::address::Rhs<ip::in4::addr> {
public:
  using subject_type = in4::addr;
  inline explicit Rhs(subject_type const &); // ... assumed to be lying in a sockaddr and in network order
  inline operator in4::addr_t() const; // ......... returned in host order
  inline operator in4::addr const &() const; // ... returned in network order (by reference)
protected:
  subject_type const &subject;
};
#endiv
#divert <ipp>
#import ip.endian.Integer
#import ip.endian.host_order
namespace ip::inet::xhs::address {
  Rhs<ip::in4::addr>::Rhs(subject_type const &subject)
    : subject(subject)
  {}
  Rhs<ip::in4::addr>::operator in4::addr_t() const {
    endian::Integer<endian::Order::NETWORK, in4::addr_t> norder{subject.s_addr};
    return endian::host_order(norder);
  }
  Rhs<ip::in4::addr>::operator in4::addr const &() const {
    return subject; // already in network order
  }
}
#endiv

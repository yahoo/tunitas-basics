// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import ip.in4 // ip::in4::addr_t
#forward ip.inet.xhs.address.Rhs.declaration
namespace ip::inet::xhs::address {
  template<> class Rhs<in4::addr_t>;
}
#endiv
#divert <hpp>
template<> class ip::inet::xhs::address::Rhs<ip::in4::addr_t> {
public:
  using subject_type = in4::addr_t;
  inline explicit Rhs(subject_type const &); // ... assumed to be lying in a sockaddr and in network order
  inline operator in4::addr_t() const; // ......... returned in host order
  inline operator in4::addr() const; // ........... returned in hetwork order; and must be returned by value
protected:
  subject_type const &subject;
};
#endiv
#divert <ipp>
#import ip.endian.Integer
#import ip.endian.host_order
namespace ip::inet::xhs::address {
  Rhs<ip::in4::addr_t>::Rhs(subject_type const &subject)
    : subject(subject)
  { }
  Rhs<ip::in4::addr_t>::operator in4::addr_t() const {
    endian::Integer<endian::Order::NETWORK, in4::addr_t> norder{subject};
    return endian::host_order(norder);
  }
  Rhs<ip::in4::addr_t>::operator in4::addr() const {
    in4::addr norder;
    auto &norder_s_addr = *reinterpret_cast<ip::uint32_t *>(&norder.s_addr);
    norder_s_addr = subject; // subject is assumed to be in network order
    return norder;
  }
}
#endiv


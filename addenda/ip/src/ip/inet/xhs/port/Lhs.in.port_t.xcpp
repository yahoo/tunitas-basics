// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import ip.in // ip::in::port_t
#forward ip.inet.xhs.port.Lhs.declaration
namespace ip::inet::xhs::port {
  //
  // Given the port value in host order (little endian)
  // Stores the port value in network order (big endian)
  //
  template<> class Lhs<in::port_t>;
}
#endiv
#divert <hpp>
template<> class ip::inet::xhs::port::Lhs<ip::in::port_t> {
public:
  using subject_type = in::port_t;
  inline explicit Lhs(subject_type &); // ... assumed to be lying in a sockaddr; in network order
  Lhs(Lhs const &) = default;
  auto operator=(Lhs const &) -> Lhs & = default;
  Lhs(Lhs &&) = default;
  auto operator=(Lhs &&) -> Lhs & = default;
  inline auto operator=(in::port_t) -> Lhs &;
protected:
  subject_type &subject;
};
#endiv
#divert <ipp>
#import ip.endian.Integer
#import ip.endian.network_order
namespace ip::inet::xhs::port {
  Lhs<ip::in::port_t>::Lhs(subject_type &subject)
    : subject(subject)
  { }
  auto Lhs<ip::in::port_t>::operator=(in::port_t rhs) -> Lhs & {
    endian::Integer<endian::Order::HOST, in::port_t> horder{rhs};
    subject = endian::network_order(horder);
    return *this;
  }
}
#endiv

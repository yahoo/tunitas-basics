// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import re.string
#import ip.inet.result.Getaddrinfo
#import ip.inet.addrinfo.Specification
#import ip.inet.addrinfo.List
#import std.string
namespace ip {
  namespace inet {
    inline auto getaddrinfo(re::string<c::const_stringz> host, re::string<c::const_stringz> service, addrinfo::Specification = addrinfo::Specification()) -> result::Getaddrinfo;

    template<typename SELECTOR> inline auto getaddrinfo(re::string<c::const_stringz> name, addrinfo::Specification = addrinfo::Specification()) -> result::Getaddrinfo;
    template<> inline auto getaddrinfo<addrinfo::HOST>(re::string<c::const_stringz> host_name, addrinfo::Specification) -> result::Getaddrinfo;
    template<> inline auto getaddrinfo<addrinfo::SERVICE>(re::string<c::const_stringz> service_name, addrinfo::Specification) -> result::Getaddrinfo;
  }
}
#endiv
#divert <ipp>
#import ip.inet.addrinfo.filladdrinfo
#import std.move
auto ip::inet::getaddrinfo(re::string<c::const_stringz> host, re::string<c::const_stringz> service, addrinfo::Specification spec) -> result::Getaddrinfo {
  result::Getaddrinfo ret;
  addrinfo::filladdrinfo(ret, host.data(), service.data(), spec);
  return ret;
}

template<typename SELECTOR> auto ip::inet::getaddrinfo(re::string<c::const_stringz> , addrinfo::Specification) -> result::Getaddrinfo {
  static_assert(0 == sizeof (SELECTOR) && 0 != sizeof (SELECTOR), "specializations only");
  return result::Getaddrinfo();
}

template<> auto ip::inet::getaddrinfo<ip::inet::addrinfo::HOST>(re::string<c::const_stringz> host, addrinfo::Specification specification) -> result::Getaddrinfo {
  result::Getaddrinfo ret;
  char const *const null_service_data = nullptr;
  addrinfo::filladdrinfo(ret, host.data(), null_service_data, specification);
  return ret;
}

template<> auto ip::inet::getaddrinfo<ip::inet::addrinfo::SERVICE>(re::string<c::const_stringz> service, addrinfo::Specification specification) -> result::Getaddrinfo {
  result::Getaddrinfo ret;
  char const *const null_host_data = nullptr;
  addrinfo::filladdrinfo(ret, null_host_data, service.data(), specification);
  return ret;
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import ip.inet.xhs.family.Rhs
#import ip.inet.xhs.address.Rhs
#import ip.inet.xhs.port.Rhs
#import ip.required.Address
#import ip.required.Port
#import ip.inet.required.Family
namespace ip::inet {
  //
  // Modulate the reading from ip{4,6}::addr{,_t}
  // managing the network-order (big endian) and host order (little endian)
  //
  //   some_variable = rhs(item)
  //
  // for: in4::addr_t, in4::addr, in6::addr_t, in6::addr
  //
  template<required::Address SUBJECT> inline auto rhs(SUBJECT const &) -> xhs::address::Rhs<SUBJECT>;
  //
  // WATCHOUT - the family (sin_family, sin6_family) is *also* an unsigned short.
  // Witness - /usr/include/linux/socket.h:12:typedef unsigned short __kernel_sa_family_t;
  //
  template<required::Port PORT> inline auto rhs(in::port_t const &) -> xhs::port::Rhs<PORT>;
  template<required::Family FAMILY> inline auto rhs(unsigned short const &) -> xhs::family::Rhs<FAMILY>;
  inline auto rhs(in::port_t const &) -> xhs::port::Rhs<in::port_t>;
}
#endiv
#divert <ipp>
namespace ip {
  template<inet::required::Address ADDRESS> auto inet::rhs(ADDRESS const &subject) -> xhs::address::Rhs<ADDRESS> {
    return xhs::address::Rhs<ADDRESS>(subject); 
  }
  auto ip::inet::rhs(in::port_t const &subject) -> xhs::port::Rhs<in::port_t> {
    return xhs::port::Rhs<in::port_t>(subject);
  }
  template<inet::required::Port PORT> auto inet::rhs(in::port_t const &subject) -> xhs::port::Rhs<PORT> {
    return xhs::port::Rhs<in::port_t>(subject);
  }
  template<inet::required::Family FAMILY> auto inet::rhs(unsigned short const &subject) -> xhs::family::Rhs<FAMILY> {
    return xhs::family::Rhs<FAMILY>(subject);
  }
}
#endiv

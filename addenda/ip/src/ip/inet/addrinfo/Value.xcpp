// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace ip::inet::addrinfo {
  //
  // Shaped like ::addrinfo, but with typeful fields, not 'int' and 'char*'
  //
  class Value;
}
#endiv
#divert <hpp>
namespace ip::inet::addrinfo {
  inline auto swap(Value &, Value &) -> void;
}

#import std.swap
namespace std {
  using ip::inet::addrinfo::swap;
}

#import addrinfo
#import ip.in // ip::in::socklen_t
#forward ip.inet.addrinfo.Iterator
#import ip.inet.Family
#import ip.inet.AI.Features
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#import ip.inet.PF
#pragma GCC diagnostic pop
#import ip.inet.Protocol
#import ip.inet.SOCK.Type
#import std.string
#import ip.inet.required.Protocol
#import ip.inet.traits.Sockaddr
class ip::inet::addrinfo::Value {
public:
  Value() = delete;
  Value(Value const &) = delete;
  auto operator=(Value const &) -> Value & = delete;
  inline Value(Value &&);
  inline auto operator=(Value &&) -> Value &;
  inline auto flags() const -> AI::Features;
  inline auto family() const -> Family;
  inline auto socktype() const -> SOCK::Type;
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  [[deprecated("this does not do what you think it does; prefer protocol<IPPROTO>() -> IPPROTO")]] inline auto protocol() const -> PF::Protocol;
#pragma GCC diagnostic pop
  template<required::Protocol PROTOCOL> inline auto protocol() const -> PROTOCOL = delete;
  //
  // Reminder: the names are off-by-one here
  // This is because of the misnaming of addrinfo::ai_addr (which is a sockaddr, not an addr)
  //
  //    Accessor           Fields in ::addrinfo       Description
  //    -------------------------------------------------------------------------
  //    sockaddrlen()      addrinfo::ai_addrlen       the length of ai_sockaddr
  //    sockaddr()         addrinfo::ai_addr          in::sockaddr &
  //
  // Using family() or protocol() or addrlen(),
  // then the type of the sockaddr can be cast as SOCKADDR
  //
  //    sockaddr<SOCKADDR>()   (SOCKADDR) addrinfo::ai_addr
  //
  // And the address field within the (generic) sockaddr can be recovered
  //
  //    port<SOCKADDR>()       sin?_port   (SOCKADDR) addrinfo::ai_addr).sin?_port
  //    addrlen<SOCKADDR>()    sin?_addr   sizeof ((SOCKADDR) addrinfo::ai_addr).sin?_addr
  //    addr<SOCKADDR>()       sin?_addr   (SOCKADDR) addrinfo::ai_addr).sin?_addr
  //
  inline auto sockaddrlen() const -> in::socklen_t;
  inline auto sockaddr() const -> in::sockaddr const &;
  template<typename SOCKADDR> inline auto sockaddr() const -> SOCKADDR const &;
  template<typename SOCKADDR> inline auto addrlen() const -> in::socklen_t;
  template<typename SOCKADDR> inline auto addr() const -> typename traits::Sockaddr<SOCKADDR>::addr_type const &;
  template<typename SOCKADDR> inline auto port() const -> in::port_t;
  inline auto port() const -> in::port_t;
  inline auto canonname() const -> std::string;
protected:
  friend class addrinfo::Iterator;
  friend auto addrinfo::swap(Value &, Value &) -> void;
  inline explicit Value(::addrinfo const *);
  ::addrinfo const *subject;
};
namespace ip::inet::addrinfo {
  template<> inline auto Value::protocol<Protocol>() const -> Protocol;
}
#entail ip.inet.addrinfo.Value.in4
#entail ip.inet.addrinfo.Value.in6
#endiv
#divert <ipp>
auto ip::inet::addrinfo::swap(Value &a, Value &b) -> void {
  std::swap(a.subject, b.subject);
}

#import std.invalid_argument
ip::inet::addrinfo::Value::Value(::addrinfo const *arg_subject)
  : subject(arg_subject) {
  if (nullptr == subject) {
    throw std::invalid_argument("null value");
  }
}

ip::inet::addrinfo::Value::Value(Value &&other)
  : subject(nullptr) {
  swap(*this, other);
}

#import std.forward
auto ip::inet::addrinfo::Value::operator=(Value &&other) -> Value & {
  Value tmp(std::forward<Value>(other));
  swap(*this, tmp);
  return *this;
}

auto ip::inet::addrinfo::Value::flags() const -> AI::Features {
  return AI::Features(subject->ai_flags);
}

auto ip::inet::addrinfo::Value::family() const -> Family {
  return Family(subject->ai_family);
}

auto ip::inet::addrinfo::Value::socktype() const -> SOCK::Type {
  return SOCK::Type(subject->ai_socktype);
}

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
auto ip::inet::addrinfo::Value::protocol() const -> PF::Protocol {
  // THIS IS KNOWN-WRONG ... see the deprecation warning in the declaration
  return PF::Protocol(subject->ai_protocol);
}
#pragma GCC diagnostic pop

template<> auto ip::inet::addrinfo::Value::protocol<ip::inet::Protocol>() const -> Protocol {
  return Protocol{subject->ai_protocol};
}

auto ip::inet::addrinfo::Value::sockaddrlen() const -> in::socklen_t {
  return subject->ai_addrlen;
}

#import std.runtime_error
auto ip::inet::addrinfo::Value::sockaddr() const -> in::sockaddr const & {
  if (0 == subject->ai_addrlen || nullptr == subject->ai_addr) {
    // This as to be the fault of ::getaddrinfo(...) within libc.
    throw std::runtime_error("null sockaddr");
  }
  return *subject->ai_addr;
}

auto ip::inet::addrinfo::Value::canonname() const -> std::string {
  if (nullptr == subject->ai_canonname) {
    // This as to be the fault of ::getaddrinfo(...) within libc.
    throw std::runtime_error("null name");
  }
  return std::string(subject->ai_canonname);
}

template<typename SOCKADDR> auto ip::inet::addrinfo::Value::sockaddr() const -> SOCKADDR const & {
  static_assert(0 == sizeof (SOCKADDR) && 0 != sizeof (SOCKADDR), "specializations only");
  SOCKADDR fail;
  return fail;
} 

template<typename SOCKADDR> auto ip::inet::addrinfo::Value::addrlen() const -> in::socklen_t {
  static_assert(0 == sizeof (SOCKADDR) && 0 != sizeof (SOCKADDR), "specializations only");
  return socklen_t();
} 

template<typename SOCKADDR> auto ip::inet::addrinfo::Value::addr() const -> typename traits::Sockaddr<SOCKADDR>::addr_type const & {
  static_assert(0 == sizeof (SOCKADDR) && 0 != sizeof (SOCKADDR), "specializations only");
  typename traits::Sockaddr<SOCKADDR>::addr_type fail;
  return fail;
} 

template<typename SOCKADDR> auto ip::inet::addrinfo::Value::port() const -> in::port_t {
  static_assert(0 == sizeof (SOCKADDR) && 0 != sizeof (SOCKADDR), "specializations only");
  return in::port_t(0);
} 
#endiv

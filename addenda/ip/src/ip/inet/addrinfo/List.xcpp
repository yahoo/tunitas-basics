// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace ip::inet::addrinfo {
  class List;    
}
#endiv
#divert <hpp>
namespace ip::inet::addrinfo {
  inline auto swap(List &, List &) -> void;
}

#import std.swap
namespace std {
  using ip::inet::addrinfo::swap;
}

#import addrinfo
#import ip.inet.addrinfo.Iterator
#import ip.inet.addrinfo.Value
#import ip.inet.addrinfo.filladdrinfo
class ip::inet::addrinfo::List {
public:
  inline List();
  inline ~List();
  // Only move semantics, no copy semantics becaues we don't know how to copy the thing
  List(List const &) = delete;
  auto operator=(List const &) -> List & = delete;
  inline List(List &&);
  inline auto operator=(List &&) -> List &;
  using const_iterator = Iterator;
  using iterator = const_iterator;
  inline auto empty() const -> bool;       // constant time, checks for a "first" element
  inline auto size() const -> std::size_t; // linear time, counts down the list
  inline auto begin() const -> const_iterator;
  inline auto end() const -> const_iterator;
  // throws if the list is empty
  inline auto front() const -> Value;
protected:
  friend auto addrinfo::filladdrinfo(result::Getaddrinfo &, char const *host, char const *service, Specification const &) -> void;
  friend auto addrinfo::swap(List &, List &) -> void;
  inline explicit List(::addrinfo *);
  // Must only be freed with ::freeaddrinfo(...)
  ::addrinfo *subject;
public:
  struct Accessor;
};
#endiv
#divert <ipp>
#import std.swap

auto ip::inet::addrinfo::swap(List &a, List &b) -> void {
  std::swap(a.subject, b.subject);
}

ip::inet::addrinfo::List::List()
  : subject(nullptr) {
  ;
}

ip::inet::addrinfo::List::List(::addrinfo *arg_subject)
  : subject(arg_subject) {
  ;
}

ip::inet::addrinfo::List::List(List &&other)
  : subject(nullptr) {
  std::swap(*this, other);
}

#import std.forward
auto ip::inet::addrinfo::List::operator=(List &&other) -> List & {
  List tmp(std::forward<List>(other));
  std::swap(tmp, *this);
  return *this;
}

#import freeaddrinfo
#import std.swap
ip::inet::addrinfo::List::~List() {
  ::addrinfo *doomed(nullptr);
  std::swap(doomed, subject);
  if (nullptr != doomed) {
    ::freeaddrinfo(doomed);
  }
}

auto ip::inet::addrinfo::List::empty() const -> bool {
  return nullptr == subject;
}

auto ip::inet::addrinfo::List::size() const -> std::size_t {
  std::size_t count = 0;
  for (::addrinfo const *s(subject); nullptr != s; s=s->ai_next) {
    count++;
  }
  return count;
}

auto ip::inet::addrinfo::List::begin() const -> const_iterator {
  return const_iterator(subject);
}

auto ip::inet::addrinfo::List::end() const -> const_iterator {
  return const_iterator();
}

auto ip::inet::addrinfo::List::front() const -> Value {
  auto b = begin();
  return *b; // throws if not valid
}
#endiv

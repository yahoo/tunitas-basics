// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import ip // various constants
#import std.int16_t
#include <module-ip/netdb.h> // for the "EAI_"- series of constants
namespace ip {
  namespace inet {
    namespace EAI {
      // n.b. the 'int16_t' sizing is used in inet::error::Code
      //      to pack the EAI code and the system error (errno) together in 32-bits of an 'int'
      enum class Code : std::int16_t
        { SUCCESS = 0,
          BADFLAGS = EAI_BADFLAGS, 	 // Invalid value for `ai_flags' field. 
          NONAME = EAI_NONAME, 	         // NAME or SERVICE is unknown. 
          AGAIN = EAI_AGAIN, 	         // Temporary failure in name resolution. 
          FAIL = EAI_FAIL, 	         // Non-recoverable failure in name res. 
          FAMILY = EAI_FAMILY, 	         // `ai_family' not supported. 
          SOCKTYPE = EAI_SOCKTYPE, 	 // `ai_socktype' not supported. 
          SERVICE = EAI_SERVICE, 	 // SERVICE not supported for `ai_socktype'. 
          MEMORY = EAI_MEMORY, 	         // Memory allocation failure. 
          SYSTEM = EAI_SYSTEM, 	         // WATCHOUT - System error returned in `errno'. 
#undef OVERFLOW
          OVERFLOW = EAI_OVERFLOW, 	 // Argument buffer overflow. 
          // ifdef __USE_GNU
          NODATA = EAI_NODATA, 	         // No address associated with NAME. 
          ADDRFAMILY = EAI_ADDRFAMILY, 	 // Address family for NAME not supported. 
          INPROGRESS = EAI_INPROGRESS, 	 // Processing request in progress. 
          CANCELED = EAI_CANCELED, 	 // Request canceled. 
          NOTCANCELED = EAI_NOTCANCELED, // Request not canceled. 
          ALLDONE = EAI_ALLDONE, 	 // All requests done. 
          INTR = EAI_INTR,               // Interrupted by a signal. 
          IDN_ENCODE = EAI_IDN_ENCODE }; // IDN encoding failed. 
    }
  }
}
#endiv
#divert <hpp>
namespace ip {
  namespace inet {
    namespace EAI {
      // And for convenience these are all presented as constants
      constexpr auto const SUCCESS = Code::SUCCESS;
      constexpr auto const BADFLAGS = Code::BADFLAGS;
      constexpr auto const NONAME = Code::NONAME;
      constexpr auto const AGAIN = Code::AGAIN;
      constexpr auto const FAIL = Code::FAIL;
      constexpr auto const FAMILY = Code::FAMILY;
      constexpr auto const SOCKTYPE = Code::SOCKTYPE;
      constexpr auto const SERVICE = Code::SERVICE;
      constexpr auto const MEMORY = Code::MEMORY;
      constexpr auto const SYSTEM = Code::SYSTEM; // ahem ... see errno
      constexpr auto const OVERFLOW = Code::OVERFLOW;
      constexpr auto const NODATA = Code::NODATA;
      constexpr auto const ADDRFAMILY = Code::ADDRFAMILY;
      constexpr auto const INPROGRESS = Code::INPROGRESS;
      constexpr auto const CANCELED = Code::CANCELED;
      constexpr auto const NOTCANCELED = Code::NOTCANCELED;
      constexpr auto const ALLDONE = Code::ALLDONE;
      constexpr auto const INTR = Code::INTR;
      constexpr auto const IDN = Code::IDN_ENCODE;
    }
  }
}
#endiv

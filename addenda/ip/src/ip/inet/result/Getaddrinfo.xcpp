// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace ip {
  namespace inet {
    namespace result {
      class Getaddrinfo;
    }
  }
}
#endiv
#divert <hpp>
#import ip.inet.error.Code
#import std.error_code
#import std.int16_t
namespace ip {
  namespace inet {
    namespace result {
      //
      // Also by ADL from the Ancestor
      //     error_num(..)           errno
      //     std_error_code(...)     a std::error_code on errno in std::system_category
      //     sys_error_code(...)     a sys::error::Code on errno 
      //
      inline auto error_code(Getaddrinfo const &) -> std::error_code;
      inline auto eai_error_code(Getaddrinfo const &) -> EAI::Code;
      inline auto eai_error_num(Getaddrinfo const &) -> std::int16_t;

      // Also from the Ancestor (the moral equivalent of)
      //     value(Getaddrinfo const &) -> List const &
      //     value(Getaddrinfo &&) -> List &&
    }
  }
}

#import ip.inet.addrinfo.List
#import ip.inet.result.Value
class ip::inet::result::Getaddrinfo : public Value<addrinfo::List, /*getaddrinfo return value*/ int> {
  using Ancestor = Value<addrinfo::List, /*getaddrinfo return value*/ int>;
public:
  Getaddrinfo() = default;
  inline Getaddrinfo(bool ok, int errnum, addrinfo::List &&, int getaddrinfo_return_value);
  // Only move semantics, no copy semantics becaues we don't know how to copy the thing
  Getaddrinfo(Getaddrinfo const &) = delete;
  auto operator=(Getaddrinfo const &) -> Getaddrinfo & = delete;
  Getaddrinfo(Getaddrinfo &&) = default;
  auto operator=(Getaddrinfo &&) -> Getaddrinfo & = default;
};
#endiv
#divert <ipp>
#import ip.inet.network_category
#import ip.inet.error.Code
auto ip::inet::result::error_code(Getaddrinfo const &r) -> std::error_code {
  inet::error::Code recode(eai_error_num(r), sys::call::result::error_num(r));
  std::error_code ec(recode, inet::network_category());
  return ec;
}

auto ip::inet::result::eai_error_num(Getaddrinfo const &r) -> std::int16_t {
  return std::get<3>(r);
}

auto ip::inet::result::eai_error_code(Getaddrinfo const &r) -> EAI::Code {
  return EAI::Code(eai_error_num(r));
}

#import std.forward
#import std.move
ip::inet::result::Getaddrinfo::Getaddrinfo(bool arg_ok, int arg_errnum, addrinfo::List &&arg_getaddrinfo_result, int arg_getaddrinfo_return_value)
  : Ancestor(std::move(arg_ok), std::move(arg_errnum), std::forward<addrinfo::List>(arg_getaddrinfo_result), std::move(arg_getaddrinfo_return_value)) {
  ;
}
#endiv

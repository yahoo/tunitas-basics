// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import ip.in // the various constants
namespace ip {
  namespace inet {
    namespace SOCK {
      enum class Type
        { NONE = 0,
          UNSPEC = NONE,               // following the style of AF::UNSPEC
          STREAM = SOCK_STREAM,        // Sequenced, reliable, connection-based byte streams. 
          DGRAM = SOCK_DGRAM,          // Connectionless, unreliable datagrams of fixed maximum length. 
          RAW = SOCK_RAW,              // Raw protocol interface. 
          RDM = SOCK_RDM,              // Reliably-delivered messages. 
          SEQPACKET = SOCK_SEQPACKET,  // Sequenced, reliable, connection-based, datagrams of fixed maximum length. 
          DCCP = SOCK_DCCP,            // Datagram Congestion Control Protocol. 
          PACKET = SOCK_PACKET };      // Linux specific way of getting packets at the dev level.
#if 0
      // .. wow.
      /* Flags to be ORed into the type parameter of socket and socketpair and
         used for the flags parameter of paccept.  */

      SOCK_CLOEXEC = 02000000,	/* Atomically set close-on-exec flag for the new descriptor(s).  */
#define SOCK_CLOEXEC SOCK_CLOEXEC
        SOCK_NONBLOCK = 00004000	/* Atomically mark descriptor(s) as non-blocking.  */
#define SOCK_NONBLOCK SOCK_NONBLOCK
#endif
    }
  }
}
#endiv
#divert <hpp>
namespace ip {
  namespace inet {
    namespace SOCK {
      // and presented as constants for convenience
      constexpr auto const NONE = Type::NONE;
      constexpr auto const UNSPEC = Type::UNSPEC;
      constexpr auto const STREAM = Type::STREAM;
      constexpr auto const DGRAM = Type::DGRAM;
      constexpr auto const RAW = Type::RAW;
      constexpr auto const RDM = Type::RDM;
      constexpr auto const SEQPACKET = Type::SEQPACKET;
      constexpr auto const DCCP = Type::DCCP;
      constexpr auto const PACKET = Type::PACKET;
    }
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import ip.in  // ip::in::port_t
#import ip.in4 // ip::in4::addr
#import ip.in6 // ip::in6::addr
#import ip.inet.Family
#import ip.inet.IPPROTO
#import ip.inet.SOCK
namespace ip {
  namespace inet {
    template<typename SUBJECT> inline auto zero(SUBJECT &) -> void;
    //
    template<> inline auto zero<Family>(Family &) -> void;
    template<> inline auto zero<IPPROTO::Protocol>(IPPROTO::Protocol &) -> void;
    template<> inline auto zero<SOCK::Type>(SOCK::Type &) -> void;
    //
    template<> inline auto zero<in::port_t>(in::port_t &) -> void;
    template<> inline auto zero<in4::addr_t>(in4::addr_t &) -> void;
    template<> inline auto zero<in4::addr>(in4::addr &) -> void;
    template<> inline auto zero<in6::addr_t>(in6::addr_t &) -> void;
    template<> inline auto zero<in6::addr>(in6::addr &) -> void;
  }
}
#endiv
#divert <ipp>
#import std.fill_n
template<typename SUBJECT> auto ip::inet::zero(SUBJECT &subject) -> void {
  std::fill_n(reinterpret_cast<char *>(&subject), sizeof (subject), '\0');
}
template<> auto ip::inet::zero<ip::inet::Family>(Family &subject) -> void {
  subject = Family{};
}
#import ip.inet.IPPROTO.constants
template<> auto ip::inet::zero<ip::inet::IPPROTO::Protocol>(IPPROTO::Protocol &subject) -> void {
  subject = IPPROTO::Protocol{};
  static_assert(IPPROTO::Protocol{} == IPPROTO::IP);
  static_assert(IPPROTO::Protocol{} != IPPROTO::NONE);
}
template<> auto ip::inet::zero<ip::inet::SOCK::Type>(SOCK::Type &subject) -> void {
  subject = SOCK::Type{};
}
#import ip.inet.lhs
template<> auto ip::inet::zero<ip::in::port_t>(in::port_t &subject) -> void {
  lhs(subject) = (in::port_t)(0);
}
template<> auto ip::inet::zero<ip::in4::addr_t>(in4::addr_t &subject) -> void {
  lhs(subject) = (in4::addr_t)(0);
}
template<> auto ip::inet::zero<ip::in4::addr>(in4::addr &subject) -> void {
  lhs(subject) = (in4::addr_t)(0);
}
template<> auto ip::inet::zero<ip::in6::addr_t>(in6::addr_t &subject) -> void {
  lhs(subject) = (in6::addr_t)(0);
}
template<> auto ip::inet::zero<ip::in6::addr>(in6::addr &subject) -> void {
  lhs(subject) = (in6::addr_t)(0);
}
#endiv
#divert <cpp>
#import ip.inet.AF.constants
namespace {
  namespace tests {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    static_assert(ip::inet::Family{} == ip::inet::AF::UNSPEC);
#pragma GCC diagnostic pop
  }
}
#endiv

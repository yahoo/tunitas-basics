// -*- c++ -*- in the stylings of SCOLD 
#divert <hpp>
namespace want {
  //
  // Whereas gcc 4.8 is not yet C++11 enough to support constexpr on std::max
  // we "want" and it ourselves.  Supplying a multi-argument version as well.
  // The key word here is 'constexpr' which is not available in std::max<...>(...) in gcc 4.8
  //
  template<typename TYPE, typename ...TYPES> inline constexpr auto maximum(TYPE, TYPES...) -> TYPE;

  // n.b. There is no way to do type promotion here , so everything has to be the same type
  //      If you have problems, then fix your call sites to ensure that all types are "the same"
  template<typename TYPE> inline constexpr auto maximum(TYPE, TYPE) -> TYPE;
}

template<typename TYPE, typename ...TYPES> constexpr auto want::maximum(TYPE a, TYPES ...rest) -> TYPE {
    return maximum(a, maximum(rest...));
}

// recall: can't name this "max" because of the 3-arg variant of std::max
// recall: the 3-arg form of std::max(TYPE, TYPE, Compare) 
template<typename TYPE> constexpr auto want::maximum(TYPE a, TYPE b) -> TYPE {
    // NOT using std::less; we want 'constexpr' and std::less is not constexpr (yet?)
    return a > b ? a : b;
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.numeric_limits
#import want.bigint
namespace want::nonstd {
  //
  // Whereas others are beginning to standardize around the module names
  //   'nonstd::numeric_limits'
  // and module path shadowing needs to occur here for the "want" areas
  // See also want.nonstd.is_unsigned, want.nonstd.is_signed, nearby.
  //
  // And
  // Whereas std::numeric_limits<INTEGRAL> works for "any type" but returns banal defaults.
  // ... explicit support must be added for the 128-bit integers.
  //
  template<typename INTEGRAL> struct numeric_limits;
  template<> struct numeric_limits<bigint::int128_t>;
  template<> struct numeric_limits<bigint::uint128_t>;
}
#endiv
#divert <hpp>
namespace want {
  template<typename INTEGRAL> struct nonstd::numeric_limits : public std::numeric_limits<INTEGRAL> { };
  template<> class nonstd::numeric_limits<bigint::int128_t> {
    // because int128_t, uint128_t are not yet denizens of want::nonstd
    using int128_t = bigint::int128_t;
    using uint128_t = bigint::uint128_t;
  public:
    inline static constexpr auto is_specialized = true;
    inline static constexpr auto is_integer = true;
    inline static constexpr auto is_signed = true;
    inline static constexpr auto is_unsigned = false;
    inline static constexpr auto min() -> int128_t { return uint128_t(0x0'8000'0000'0000'0000lu) << 64 | uint128_t(0x0'0000'0000'0000'0000lu); }
    inline static constexpr auto max() -> int128_t { return uint128_t(0x0'7fff'ffff'ffff'fffflu) << 64 | uint128_t(0x0'ffff'ffff'ffff'fffflu); }
    inline static constexpr auto lowest() -> int128_t { return min(); }
  };
  template<> class nonstd::numeric_limits<bigint::uint128_t> {
    // ibidem.
    using int128_t = bigint::int128_t;
    using uint128_t = bigint::uint128_t;
  public:
    inline static constexpr auto is_specialized = true;
    inline static constexpr auto is_integer = true;
    inline static constexpr auto is_signed = false;
    inline static constexpr auto is_unsigned = true;
    inline static constexpr auto min() -> uint128_t { return 0; }
    inline static constexpr auto max() -> uint128_t { return uint128_t(0x0'ffff'ffff'ffff'fffflu) << 64 | uint128_t(0x0'ffff'ffff'ffff'fffflu); }
    inline static constexpr auto lowest() -> uint128_t { return 0; }
  };
}
#endiv

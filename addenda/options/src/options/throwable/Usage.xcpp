// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace options::throwable {
  //
  // An Ancestor of the application's Usage exception.
  // This exception is a signal back to main(...) to emit a usage message
  //
  // Usage:
  //  1. inherit from Usage, preserving the constructor default arguments (if you wish)
  //  2(a) inherit the constructors from the Ancestor throwable::Usage
  //       using Ancestor::Usage
  //  2(b) declare & define the member that produces the actual usage message string
  //       auto DESCENDANT::unformatted() -> std::string;
  //
  // Example:
  //
  //     class my::Usage : public options::throwable:Usage {
  //         using Ancestor = options::throwable:Usage;
  //     public:
  //         using Ancestor::Usage; // e.g. Usage(Program);
  //         auto unformatted() const -> std::string override final {
  //             return "usage: NAME --version --help\n";
  //         }
  //     };
  //
  class Usage;
}
#divert </fpp>
#divert <hpp>
#import options.throwable.detail.Exception
#import options.Program
#import std.ostream
#import std.string
#import sys.exits
#import sys.exits.Code
#import sys.exits.constants
class options::throwable::Usage : public detail::Exception {
  using Ancestor = detail::Exception;
public:
  // recall: the argv0 is copied
  inline explicit Usage(stringz_type const &argv0, sys::exits::Code = sys::exits::OK);
  inline explicit Usage(Program const &, sys::exits::Code = sys::exits::OK);
protected:
  // You (still) have to inherit
  ~Usage() = default;
public:
  inline auto stream() const -> std::ostream &;
  inline auto code() const -> sys::exits::Code;
  // MISSING (descendants must implement)
  //    auto unformatted() const -> std::string override final;
protected:
  sys::exits::Code exit;
public:
  struct tests { struct Suite; };
  friend struct tests::Suite;
};
#divert </hpp>
#divert <ipp>
#import std.cout
#import std.clog

options::throwable::Usage::Usage(stringz_type const &the_argv0, sys::exits::Code the_exit)
  : Ancestor(the_argv0)
  , exit(the_exit) {
  ;
}

options::throwable::Usage::Usage(Program const &the_program, sys::exits::Code the_exit)
  : Ancestor(the_program)
  , exit(the_exit) {
  ;
}

auto options::throwable::Usage::stream() const -> std::ostream & {
  return ok(exit) ? std::cout : std::clog;
}

auto options::throwable::Usage::code() const -> sys::exits::Code {
  return exit;
}
#divert </ipp>

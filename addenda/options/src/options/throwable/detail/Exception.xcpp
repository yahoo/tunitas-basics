// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace options {
  namespace throwable {
    namespace detail {
      class Exception;
    }
  }
}
#divert </fpp>
#divert <hpp>
#import c.const_stringz
#import options.Program
#import std.exception
#import std.ostream
#import std.string

namespace options {
  namespace throwable {
    namespace detail {
      inline auto operator<<(std::ostream &, Exception const &) -> std::ostream &;
    }
  }  
}

// Not a descendant of std::runtime_error because its std::string buffer is not private (not protected)
class options::throwable::detail::Exception : public std::exception {
  using Ancestor = std::exception;
protected:
  using stringz_type = c::const_stringz;
public:
  Exception() = default;
  // The argv0 is copied
  inline explicit Exception(stringz_type const &argv0);
  inline explicit Exception(Program const &);
protected:
  // You must inherit
  ~Exception() = default;
public:
  inline auto program() const -> Program const &;
  inline auto formatted() const -> std::string;
  virtual auto what() const throw() -> char const * override;
  virtual auto unformatted() const -> std::string = 0;
protected:
  Program program_;
  mutable std::string formatted_message_buffer;
  // Format the message, substituting at least
  //     s/\${NAME}/${program}/g;
  //     s/\${____}/$_ = ${program}; s,., ,g; $_/e;
  virtual auto format(std::string const &unformatted_message) const -> std::string;
  static auto replace(std::string &lhs, std::string const &pattern, std::string const &replacement) -> void;
public:
  struct tests { struct Suite; };
  friend struct tests::Suite;;
};
#divert </hpp>
#divert <ipp>
#import c.str

auto options::throwable::detail::operator<<(std::ostream &o, Exception const &e) -> std::ostream & {
  return o << e.formatted();
}

options::throwable::detail::Exception::Exception(stringz_type const &the_argv0)
  : program_(the_argv0)
  , formatted_message_buffer() {
  ;
}

options::throwable::detail::Exception::Exception(Program const &the_program)
  : program_(the_program)
  , formatted_message_buffer() {
  ;
}

auto options::throwable::detail::Exception::program() const -> Program const & {
  return program_;
}

auto options::throwable::detail::Exception::formatted() const -> std::string {
  if (formatted_message_buffer.empty()) {
    formatted_message_buffer = format(unformatted());
  }
  return formatted_message_buffer;
}
#divert </ipp>
#divert <cpp>
auto options::throwable::detail::Exception::what() const throw() -> char const * {
  if (formatted_message_buffer.empty()) {
    formatted_message_buffer = format(unformatted());
  }
  // The string buffer stays, anchoring the pointer
  return formatted_message_buffer.c_str();
}

auto options::throwable::detail::Exception::format(std::string const &unformatted_message) const -> std::string {
  std::string result(unformatted_message);
  replace(result, "${NAME}", program_);
  std::string spaces(program_.size(), ' ');
  replace(result, "${____}", spaces);
  return result;
}

auto options::throwable::detail::Exception::replace(std::string &lhs, std::string const &pattern, std::string const &replacement) -> void {
  std::string::size_type start = 0;
  std::string::size_type pos;
  do {
    pos = lhs.find(pattern, start);
    if (std::string::npos != pos) {
      lhs.replace(pos, pattern.size(), replacement);
      start = pos + replacement.size();
    }
  } while (std::string::npos != pos);
}
#divert </cpp>

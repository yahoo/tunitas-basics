// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace options::throwable {
  //
  // An Ancestor of the package's Version exception.
  // This exception is a signal back to main(...) to emit a version message.
  //
  // Usage:
  //    1. inherit from throwable::Version
  //    2. declare & define the member that produces the actual version number
  //       auto DESCENDANT::version() const -> options::Version
  //
  // Example:
  //
  //     class my::Version : public options::throwable::Version {
  //         using Ancestor = options::throwable::Version;
  //     public:
  //         using Ancestor::Version; // e.g. Version(Program)
  //         auto version() const -> options::version::String override final {
  //             return options::version::String{1, 2, 3};
  //         }
  //     };
  //
  class Version;
}
#endiv
#divert <hpp>
#import options.throwable.detail.Exception
#import options.Program
#import options.version.String
#import std.string
class options::throwable::Version : public detail::Exception {
  using Ancestor = detail::Exception;
public:
  // recall: the argv0 is copied 
  using Ancestor::Exception;
protected:
  // You (still) have to inherit
  ~Version() = default;
public:
  virtual auto version() const -> options::version::String = 0;
  // A default version line (but that is not final)
  auto unformatted() const -> std::string override;
protected:
  // Extend the Ancestor's to give ${VERSION} in addition to ${NAME} ${____}
  auto format(std::string const &unformatted_message) const -> std::string override;
public:
  struct tests { struct Suite; };
  friend struct tests::Suite;
};
#endiv
#divert <ipp>
// There are no inline function definitions (yet)
#endiv
#divert <cpp>
#import std.ostringstream

auto options::throwable::Version::unformatted() const -> std::string {
  return "${NAME}: version ${VERSION}";
}

auto options::throwable::Version::format(std::string const &unformatted_message) const -> std::string {
  std::string result = Ancestor::format(unformatted_message);
  std::ostringstream pretty_version;
  pretty_version << version();
  replace(result, "${VERSION}", pretty_version.str());
  return result;
}
#endiv

// -*- c++ -*- in the SCOLD styling that is so popular these days
#divert <hpp>
#import options.config.Generic
#import std.ostream
namespace options::config {
  //
  // The convenient text UI "logging"
  // For convenience, though ADL will pick them up from options::config 
  //
  // Usage:
  //
  //  class my::Configuration : public ::options::config::Generic {
  //    ...etc...
  //  };
  //
  //  my::Configuration cfg{program};
  //  error(cfg) << "that hurt";               ee(cfg) << "that hurt";
  //  warning(cfg) << "don't do that";         ww(cfg) << "don't do that";
  //  notice(cfg) << "how are you";            nn(cfg) << "how are you";
  //  verbose(cfg) << "howdy";                 vv(cfg) << "howdy";
  //  debug(cfg) << "why?";                    dd(cfg) << "why?";
  //
  // By convention the 2-letter function repeated function names, e.g. ee(...) are available for ADL to find
  // when the main nmemonoic name, e.g. error(...) is otherwise occluded in the namespace, e.g. by namespace error {...}
  //
  inline auto error(Generic const &) -> std::ostream &;
  inline auto ee(Generic const &g) -> std::ostream & { return error(g); }
  inline auto warning(Generic const &) -> std::ostream &;
  inline auto ww(Generic const &g) -> std::ostream & { return warning(g); }
  inline auto notice(Generic const &) -> std::ostream &;
  inline auto nn(Generic const &g) -> std::ostream & { return notice(g); }
  inline auto verbose(Generic const &) -> std::ostream &;
  inline auto vv(Generic const &g) -> std::ostream & { return verbose(g); }
  inline auto debug(Generic const &) -> std::ostream &;
  inline auto dd(Generic const &g) -> std::ostream & { return dd(g); }
}
#endiv
#divert <ipp>
#import options.detail.stream.header
auto options::config::error(Generic const &cfg) -> std::ostream & {
  return detail::stream::header(detail::stream::err, cfg.NAME, "error");
}

auto options::config::warning(Generic const &cfg) -> std::ostream & {
  using namespace options::detail::stream;
  if (cfg.quiet_mode) {
    return devnull;
  } else {
    return header(err, cfg.NAME, "warning");
  }
}

auto options::config::notice(Generic const &cfg) -> std::ostream & {
  using namespace options::detail::stream;
  if (cfg.quiet_mode) {
    return devnull;
  } else {
    return header(err, cfg.NAME, "notice");
  }
}

auto options::config::verbose(Generic const &cfg) -> std::ostream & {
  using namespace options::detail::stream;
  if (cfg.verbose_mode) {
    return header(err, cfg.NAME, "verbose");
  } else {
    return devnull;
  }
}

auto options::config::debug(Generic const &cfg) -> std::ostream & {
  using namespace options::detail::stream;
  if (cfg.debug_mode) {
    return header(err, cfg.NAME, "debug");
  } else {
    return devnull;
  }
}
#endiv

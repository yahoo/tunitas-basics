// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace options::config {
  //
  // Ancestor of the application-level configuration
  //
  // Usage:
  //
  //     class my::Configuration : public options::config::Generic {
  //         using Ancestor = options::config::Generic;
  //     public:
  //         using Ancestor::Generic; ... or implement your own...
  //         explicit Configuration(options::Program);
  //         ...more fields...
  //     };
  //
  //     my::Configuration cfg("NAME");
  //
  //     #import options.logging        or #import options.config.logging
  //     error(cfg) << "this is bad\n";
  //     warning(cfg) << "warn\n";
  //     notice(cfg) << "notification\n";
  //     verbose(cfg) << "verbosity\n";
  //     debug(cfg) << "buggy\n";
  //
  class Generic;
}
#divert </fpp>
#divert <hpp>
#import options.Boolean
#import options.Program
class options::config::Generic {
protected:
  // Descendants only
  ~Generic() = default;   
public:
  inline explicit Generic(options::Program const &);
  options::Program NAME;
  options::Boolean debug_mode;
  options::Boolean dry_run_mode;
  options::Boolean quiet_mode;
  options::Boolean verbose_mode;
  options::Boolean warning_mode;
  // not committing to 'usage_subcommand, version_subcommand' herein.
  // because the descendant may want to implement those directly as recognized
  // rather than recording their recognition first and exectuing them in a 2nd step.
};
#endiv
#divert <ipp>
options::config::Generic::Generic(options::Program const &arg_program)
  : NAME(arg_program) {
  ;
}
#endiv

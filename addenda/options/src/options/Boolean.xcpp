// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace options {
  class Boolean;
}
#endiv
#divert <hpp>
#import std.swap
namespace std {
  inline auto swap(options::Boolean &, options::Boolean &) -> void;
}

namespace options {
  inline auto operator==(Boolean const &, Boolean const &) -> bool;
  inline auto operator!=(Boolean const &, Boolean const &) -> bool;
}

class options::Boolean {
  // like 'bool' but default-initializes to 'false'
public:
  inline Boolean();
  inline explicit Boolean(bool value);
  Boolean(Boolean const &) = default;
  inline auto operator=(bool value) -> Boolean &;
  inline auto operator=(Boolean const &) -> Boolean & = default;
  inline operator bool() const;
  inline auto operator!() const -> bool;
protected:
  bool value;
  friend auto options::operator==(Boolean const &, Boolean const &) -> bool;
  friend auto std::swap(Boolean &, Boolean &) -> void;
};
#endiv
#divert <ipp>
auto std::swap(options::Boolean &a, options::Boolean &b) -> void {
  std::swap(a.value, b.value);
}

auto options::operator==(Boolean const &b, Boolean const &a) -> bool {
  return a.value == b.value;
}

auto options::operator!=(Boolean const &a, Boolean const &b) -> bool {
  return !operator==(a, b);
}

options::Boolean::Boolean()
  : value(false) {
  ;
}

options::Boolean::Boolean(bool arg_value)
  : value(arg_value) {
  ;
}
 
auto options::Boolean::operator=(bool arg_value) -> Boolean & {
  Boolean arg(arg_value);
  std::swap(arg, *this);
  return *this;
}

options::Boolean::operator bool() const {
  return value;
}

auto options::Boolean::operator!() const -> bool {
  return !value;
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace options {
  //
  // The program's name
  //
  // Many other classes accept an options::Program at construction.
  // The Program derives the program name from argv[0], trimming ${0##*/}.
  // An empty program name is not tolerated, it becomes "a.out".
  //
  // The one-argument constructors are explicit, you do not get an an automatic conversion
  // from a string, a string literal, a c::const_stringz or a c::argv into a Program.
  // You have to explicitly want conversion.
  //
  // Usage:
  //
  //     Program program(argv[0]);
  //     throw Usage(program);
  //
  class Program;
}
#divert </fpp>
#divert <hpp>
#import c.const_stringz
#import c.const_argv
#import std.string

class options::Program : public std::string {
  // The class merely provides descendancy-wrapping for the purpose of overload resolution
  // It defaults to a non-empty name; safe from nullptr peril.
  using Ancestor = std::string;
public:
  inline explicit Program(c::const_stringz const &argv0);
  inline Program(int argc, char const *const argv[]);
  inline explicit Program(c::const_argv const &);
protected:
  inline static auto name_default(c::const_stringz const &argv0) -> std::string;
  inline static auto basename_trimming(std::string &path_trimmed) -> void;
public:
  struct tests { struct Suite; };
  friend struct tests::Suite;
};
#divert </hpp>
#divert <ipp>
#import c.const_stringz
#import c.as

options::Program::Program(c::const_stringz const &argv0)
  : Ancestor(name_default(c::as<c::const_stringz>(argv0))) {
  ;
}

options::Program::Program(int argc, char const *const argv[])
  : Ancestor(name_default(c::as<c::const_stringz>(argv[0]))) {
  ;
}

options::Program::Program(c::const_argv const &argv)
  : Ancestor(name_default(c::as<c::const_stringz>(argv[0]))) {
  ;
}

auto options::Program::name_default(c::const_stringz const &argv0) -> std::string {
  std::string ret(argv0.begin(), argv0.end());
  if (ret.empty()) {
    ret = "a.out";
  }
  basename_trimming(ret);
  return ret;
}

auto options::Program::basename_trimming(std::string &path) -> void {
  std::string::size_type slash(path.rfind('/'));
  if (std::string::npos != slash) {
    path.erase(0, slash+1);
  }
}
#divert </ipp>

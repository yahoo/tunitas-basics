// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace options {
  namespace version {
    class String;
  }
}
#divert </fpp>
#divert <hpp>
#import std.vector
#import std.ostream
#import std.uint8_t

namespace options {
  namespace version {
    inline auto operator<<(std::ostream &, String const &) -> std::ostream &;

    inline auto operator==(String const &, String const &) -> bool;
    inline auto operator!=(String const &, String const &) -> bool;

    inline auto operator<(String const &, String const &) -> bool;
    inline auto operator<=(String const &, String const &) -> bool;
    inline auto operator>(String const &, String const &) -> bool;
    inline auto operator>=(String const &, String const &) -> bool;
  }
}

class options::version::String : public std::vector<std::uint8_t> {
  using Ancestor = std::vector<std::uint8_t>;
public:
  String() = default;
  using Ancestor::vector;
public:
  struct tests { struct Suite; };
  friend struct tests::Suite;
};
#divert </hpp>
#divert <ipp>
#import std.equal
#import std.lexicographical_compare

auto options::version::operator<<(std::ostream &o, String const &v) -> std::ostream & {
  char sep = 'v';
 if (v.empty()) {
   o << sep << '0';
  } else {
    for (auto i : v) {
      o << sep << (int)i;
      sep = '.';
    }
  }
  return o;
}

auto options::version::operator==(String const &a, String const &b) -> bool {
  return std::equal(a.begin(), a.end(), b.begin(), b.end());
}

auto options::version::operator!=(String const &a, String const &b) -> bool {
  return ! operator==(a, b);
}

auto options::version::operator<(String const &a, String const &b) -> bool {
  return std::lexicographical_compare(a.begin(), a.end(), b.begin(), b.end());
}

#import std.distance
auto options::version::operator<=(String const &a, String const &b) -> bool {
  // avoid making two passes over the strings
  bool is_equal = true;
  auto lt_eq = [&is_equal](String::value_type a, String::value_type b) {
    is_equal &= (a == b);
    return a < b; // <--- never use operator<= here
  };
  return std::lexicographical_compare(a.begin(), a.end(), b.begin(), b.end(), lt_eq) ||
    (is_equal && std::distance(a.begin(), a.end()) == std::distance(b.begin(), b.end()));
}

auto options::version::operator>(String const &a, String const &b) -> bool {
  return operator<(b, a);
}

auto options::version::operator>=(String const &a, String const &b) -> bool {
  // 5 >= 3
  // 3 <= 5
  return operator<=(b, a);
}
#divert </ipp>

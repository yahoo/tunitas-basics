// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace options {
  namespace detail {
    namespace getopt {
      class State;
    }
  }
}
#divert </fpp>
#divert <hpp>
class options::detail::getopt::State {
public:
  enum Mode { SILENT_MODE, DEBUG_MODE }; 
  inline explicit State(Mode = SILENT_MODE);
  inline auto reset() -> void;
  inline auto put_down() -> void;
  inline auto pick_up() -> void;
public:
  //
  // The global variables used in the POSIX getopt API
  //
  // optind - Reset to 1 to indicate the restarting of argument parsing
  //     WATCHOUT - resetting to 1 with a 1-word argv AND using the same storage
  //     location is ambiguous to the library and it will not detect this.a
  //
  int optind;
  //
  // opterr - if 1 then diagnostics are set to stderr
  //     to wit: <quote>If getopt() does not recognize an option character, it
  //     prints an error message to stderr, stores the character in optopt, and returns '?'.
  //     The calling program may prevent the error message by setting opterr to 0.</quote>
  //
  //     WATCHOUT - there are significant & non-trivial diagnostics that go to stderr.
  //     especially when the (intricate) getopt code finds itself in an ambiguous situation.
  //
  int opterr;
  //
  // optopt - the failing option on error
  //     to wit: <quote>If getopt() does not recognize an option character, it prints
  //     an error message to stderr, stores the character in optopt, and returns '?'.</quote>
  //
  int optopt;
  //
  // optarg - the place where the value is stored for REQUIRED or OPTIONAL arguments
  //     to wit: <quote>the option requires an argument, so getopt() places a pointer
  //     to the following text in the same argv-element, or the text of the following
  //     argv-element, in optarg. Two colons mean an option takes an optional arg; if
  //     there is text in the current argv-element (i.e., in the same word as the
  //     option name itself, for example, "-oarg"), then it is returned in optarg,
  //     otherwise optarg is set to zero. This is a GNU extension.</quote>
  //
  char *optarg;
public:
  struct tests { struct Suite; };
  friend struct tests::Suite;
protected:
  // Controls the value established in opterr.
  // Normally we run in SILENT MODE
  Mode mode;
};
#divert </hpp>
#divert <ipp>
#import getopt      // POSIX getopt (short)
#import getopt_long // GNU getopt_long

options::detail::getopt::State::State(Mode arg_mode)
  : mode(arg_mode) {
  reset();
}

auto options::detail::getopt::State::reset() -> void {
  //
  // The man page getopt(3) declares that signalling "reset" is done by setting optind=1.
  // Yet, that does not work in the cases when the value pointed at by argv[1] changes.
  //
  // Instead signal reset with optind=0, and the library code will actually re-initialize
  // for the new argv.  See getopt.c __getopt_internal_r
  //
  // From getopt(3)
  //   1. <quote>The variable optind is the index of the next element to be processed in argv.
  //      The system initializes this value to 1. The caller can reset it to 1 to restart
  //      scanning of the same argv, or when scanning a new argument vector.
  //   2. <quote>NOTES A program that scans multiple argument vectors, or rescans the same
  //      vector more than once, and wants to make use of GNU extensions such as '+' and '-'
  //      at the start of optstring, or changes the value of POSIXLY_CORRECT between scans,
  //      must reinitialize getopt() by resetting optind to 0, rather than the traditional
  //      value of 1. (Resetting to 0 forces the invocation of an internal initialization
  //      routine that rechecks POSIXLY_CORRECT and checks for GNU extensions in optstring.)</quote>
  //
  // reset: start back at argv[0] (which will be skipped)
  constexpr auto const RESET_BY_ESTABLISHING_ZERO = 0;
  this->optind = RESET_BY_ESTABLISHING_ZERO;
  this->opterr = SILENT_MODE == mode ? 0 : 1;
  this->optopt = 0; // (a char) where unrecognized (short) options are stored
  this->optarg = nullptr;
}

#import std.cerr
auto options::detail::getopt::State::put_down() -> void {
  ::optind = this->optind;
  ::opterr = this->opterr;
  ::optopt = this->optopt;
  ::optarg = this->optarg;
}

auto options::detail::getopt::State::pick_up() -> void {
  this->optind = ::optind;
  this->opterr = ::opterr;
  this->optopt = ::optopt;
  this->optarg = ::optarg;
}
#divert </ipp>

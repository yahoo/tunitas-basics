// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace options {
  namespace longish {
    class Getter;
  }
}
#divert </fpp>
#divert <hpp>
#import options.longish.Specification
#import options.shortish.Getter
#import options.shortish.Specification
#import options.longish.Step
//
// See the usage instructions in options::shortish::Getter
//
// Usage
//   Getter get(specification, c::as<c::argv>(argc, argv));
//
// More details with options::shortish::Getter
// Reminder: Getter (GNU getopt) reorders the argv so 'const_argv' isn't appropriate
//
class options::longish::Getter : public shortish::Getter {
  using Ancestor = shortish::Getter;
public:
  // recall that "arguments_container" is substantially a c::argv, which will be modified (see above)
  inline Getter(longish::Specification const &, arguments_container /*NOT-const*/ modified);
  inline Getter(shortish::Specification const &, longish::Specification const &, arguments_container /*NOT-const*/ modified);
  // Reminder: the argv[i] are are reordered
  auto operator()() -> Step;
public:
  longish::Specification const &long_specification;
  shortish::Specification const no_short_options;
public:
  struct tests { struct Suite; };
  friend struct tests::Suite;
};
#divert </hpp>
#divert <ipp>
options::longish::Getter::Getter(Specification const &the_longspec, arguments_container /*NOT-const*/ the_arguments)
  : Ancestor(/*WATCHOUT - these are not yet constructed*/ no_short_options, the_arguments)
  , long_specification(the_longspec)
  , no_short_options() {
  ;
}

options::longish::Getter::Getter(shortish::Specification const &the_shortspec, longish::Specification const &the_longspec, arguments_container /*NOT-const*/ the_arguments)
  : Ancestor(the_shortspec, the_arguments)
  , long_specification(the_longspec)
  , no_short_options() {
  ;
}

#divert </ipp>
#divert <cpp>
#import c.stringz
#import options.Code
#import options.detail.getopt.Caller
#import std.max
auto options::longish::Getter::operator()() -> Step {
  options::detail::getopt::Caller calling(state);
  //
  // WATCHOUT - WATCHOUT - WATCHOUT
  // See the commentariat in options::detail::getopt::State::reset() wherein the reset act is required to reseet optind to 0, not 1.
  // Yet, if optind is reset to 0, AND the first long option fails to be an option, then optind is not updated.  Thus here we
  // counter-correct for the workaround. The arguments_container necessarily has *at*least* two elements as { argv[0], nullptr }
  // But here were concerned with an arguments container shaped as { argv[0], "--bogus-long-option", ..., nullptr }
  //
  int original_index = std::max(1, state.optind); // <-- at least 1, never 0 as that will report argv[0] (see the MARK, below)
  int specification_index(0);
  int r = calling.getopt_long(arguments.size(), arguments.data(), short_specification.data(), long_specification.data(), &specification_index);
  if (-1 == r) {
    return Step(Code::END);
  } else {
    Code code = Code(r);
    if (erroneous(code)) {
      // if state.optopt isn't set then it must have been a long option that was unexpected
      // instead substitute '?' for optopt and remind the caller to look at Step::word_in_error
      char reopt = 0 == state.optopt ? '?' : (char)state.optopt;
      return Step(code, reopt, arguments[original_index]); // <-------------------- see the MARK
    } else {
      return Step(code, state.optarg, long_specification[specification_index]);
    }
  }
}
#divert </cpp>

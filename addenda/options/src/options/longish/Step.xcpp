// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace options {
  namespace longish {
    //
    // Usage: see shortish::Step, shortish::Getter
    // but generally
    //
    //  auto main(int argc, char *argv[]) -> int {
    //    Getter get(specification, c::as<c::argv>(argc, argv));
    //    Step step;
    //    while ( ! end(step = get()) ) {
    //      ...
    //    }
    //
    class Step;
  }
}
#divert </fpp>
#divert <hpp>
#import c.const_stringz
#import options.Code
#import options.shortish.Step
#import options.longish.detail.Option

namespace options {
  namespace longish {
    //
    // For siblings, see shortish::Step
    //
    // The option word, when Code was not ERR or END
    inline auto word(Step const &) -> c::const_stringz;
    // When erroneous(...), this was the (long) option word that caused the problem.
    inline auto word_in_error(Step const &) -> c::const_stringz;
  }
}

class options::longish::Step : public shortish::Step {
  using Ancestor = shortish::Step;
public:
  Step() = default;
  // success, or END, no option value
  inline explicit Step(Code);
  // success, with the option value
  inline Step(Code, c::const_stringz, detail::Option const &);
  // error, Code should be Code::UNKNOWN or Code::MISSING 
  inline explicit Step(Code, char flag_in_error, c::const_stringz word_in_error);
  detail::Option const *option_line;
  // similar to the flag_in_error of the Ancestor
  c::const_stringz word_in_error;
public:
  struct tests { struct Suite; };
  friend struct tests::Suite;
};
#divert </hpp>
#divert <ipp>
options::longish::Step::Step(Code the_code)
  : Ancestor(the_code)
  , option_line(nullptr)
  , word_in_error() {
  ;
}

options::longish::Step::Step(Code the_code, char the_flag_in_error, c::const_stringz the_word_in_error)
  : Ancestor(the_code, the_flag_in_error)
  , option_line(nullptr)
  , word_in_error(the_word_in_error) {
  ;
}

options::longish::Step::Step(Code the_code, c::const_stringz the_value, detail::Option const &the_option)
  : Ancestor(the_code, the_value)
  , option_line(&the_option)
  , word_in_error() {
  ;
}

auto options::longish::word(Step const &step) -> c::const_stringz {
  c::const_stringz word;
  if (nullptr != step.option_line) {
    word = step.option_line->name;
  }
  return word;
}

auto options::longish::word_in_error(Step const &step) -> c::const_stringz {
  return step.word_in_error;
}
#divert </ipp>

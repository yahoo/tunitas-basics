// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace options {
  namespace longish {
    class Specification;
  }
}
#endiv
#divert <hpp>
#import std.size_t
#import std.vector
#import options.Code
#import options.argument.Code
#import options.longish.Getter
#import options.longish.detail.Option
class options::longish::Specification {
public:
  using value_type = detail::Option;
  inline Specification();
  inline explicit Specification(std::initializer_list<value_type>);
  struct modern_code_initializer_type {
    // Use the same field names as detail::Options
    char const *name;
    argument::Code has_arg;
    options::Code val;
  };
  inline explicit Specification(std::initializer_list<modern_code_initializer_type>);
  struct recent_history_char_initializer_type {
    // Use the same field names as detail::Options
    char const *name;
    int has_arg;
    int val;
  };
  inline explicit Specification(std::initializer_list<recent_history_char_initializer_type>);
  inline auto data() const -> value_type const *;
  // does not include the null sentinel at the end
  inline auto size() const -> std::size_t;
  inline auto empty() const -> bool;
  // does includes the null sentinel at the end
  inline auto capacity() const -> std::size_t;
  // throws std::out_of_range upon indexing an invalid element; the null element is invalid.
  inline auto operator[](std::size_t) const -> value_type const &;
protected:
  std::vector<value_type> value;
private:
  // Called from the constructor to allow variants of detail::Option to be used to initialize
  template<typename VARIANT> inline auto redo_and_push_back(VARIANT const &item) -> void;
  inline auto NASTY_push_sentinel() -> void;
public:
  struct tests { struct Suite; };
  friend struct tests::Suite;
};
#endiv
#divert <ipp>
#import std.cerr
#include <iomanip>
options::longish::Specification::Specification()
  : value() {
  // NASTY! getopt_long expects a sentinel of an empty value_type record at the end of the array
  // Push one down there
  NASTY_push_sentinel();
}

options::longish::Specification::Specification(std::initializer_list<value_type> il)
  : value(il) {
  // Ibidem.
  NASTY_push_sentinel();
}

options::longish::Specification::Specification(std::initializer_list<modern_code_initializer_type> il)
  : value() {
  for (auto const &item : il) {
    redo_and_push_back(item);
  }
  NASTY_push_sentinel();
}

options::longish::Specification::Specification(std::initializer_list<recent_history_char_initializer_type> il)
  : value() {
  for (auto const &item : il) {
    redo_and_push_back(item);
  }
  NASTY_push_sentinel();
}

auto options::longish::Specification::NASTY_push_sentinel() -> void {
  detail::Option sentinel;
  clear(sentinel);
  this->value.push_back(sentinel);
}

template<typename VARIANT> auto options::longish::Specification::redo_and_push_back(VARIANT const &item) -> void {
  //
  // What we're ensuring here is that detail::Option "is assignable from" VARIANT
  // but with some extra policy that the detail::Option::flag field is always set to nullptr.
  //
  detail::Option redo;
  redo.name = item.name;
  redo.has_arg = (decltype(redo.has_arg)) item.has_arg;
  redo.flag = nullptr;
  redo.val = (decltype(redo.val)) item.val;
  this->value.push_back(redo);
}

auto options::longish::Specification::data() const -> value_type const * {
  return value.data();
}

auto options::longish::Specification::empty() const -> bool {
  return 0 == size();
}

#include <cassert>
auto options::longish::Specification::size() const -> std::size_t {
  // The constructor should be taking care of the invariant by adding a null element sentinel
  assert(0 != value.size());
  return value.size()-1;
}

auto options::longish::Specification::capacity() const -> std::size_t {
  return value.size();
}

#import std.out_of_range
auto options::longish::Specification::operator[](std::size_t index) const -> value_type const & {
  if (index >= size()) {
    throw std::out_of_range("index");
  }
  return value[index];
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace options::indicator {
  //
  // The Code needs to be shaped like a 'char'
  // so that it can fit into the getopt(3) short and long options.
  //
  // These are underlying as 'char' so that they naturally fit with the commnand
  // line which uses chars to indicate single (character) flag options; e.g. -f.
  //
  enum class Code : char {
    // a reasonable default
    NUL = '\0',
    // [POSIX getopt] end of option processing
    END = char(-1),
    // [POSIX getopt] normal "unknown option" or error condition
    UNKNOWN = '?',
    // [GNU getopt] missing option value
    MISSING = ':',
    // [GNU getopt] positional non-option semantic
    POSITION = '\x1', 

    //
    // Common subcommands in command-line user interfaces
    //
    // [our convention] for signalling "usage" or "help" in long options specifications
    USAGE_SUBCOMMAND = '\x2', 
      /*[[deprecated]]*/ HELP = '\2', // use USAGE_SUBCOMMAND instead
    VERSION_SUBCOMMAND = '\x3', 

    //
    // Common modes in command-line user interfaces
    //
    VERBOSE_MODE = '\x4', 
    DRY_RUN_MODE = '\x5', //       prefer the separated words dry-run and DRY_RUN
    DRYRUN_MODE = DRY_RUN_MODE, // Well, which is it?  Prefer dru-run and DRY_RUN
    DEBUG_MODE = '\x6', 
    QUIET_MODE = '\x7', 
    WARNING_MODE = '\x8', //         prefer the singular
    WARNINGS_MODE = WARNING_MODE, // well, which is it?  This is just bad grammar.

    // The expectation is that option indicator flags come from options::indicator::Code
    // and are selected, for reasonableness and UX reasons, from the isalnum characters.
    //
    // warning: case value ‘101’ not in enumerated type ‘options::indicator::Code’ [-Wswitch]
    // for c in {a..z} {A..Z} {0..9} ; do echo "CHR_$c = '$c',"; done
    CHR_a = 'a',
    CHR_b = 'b',
    CHR_c = 'c',
    CHR_d = 'd',
    CHR_e = 'e',
    CHR_f = 'f',
    CHR_g = 'g',
    CHR_h = 'h',
    CHR_i = 'i',
    CHR_j = 'j',
    CHR_k = 'k',
    CHR_l = 'l',
    CHR_m = 'm',
    CHR_n = 'n',
    CHR_o = 'o',
    CHR_p = 'p',
    CHR_q = 'q',
    CHR_r = 'r',
    CHR_s = 's',
    CHR_t = 't',
    CHR_u = 'u',
    CHR_v = 'v',
    CHR_w = 'w',
    CHR_x = 'x',
    CHR_y = 'y',
    CHR_z = 'z',
    CHR_A = 'A',
    CHR_B = 'B',
    CHR_C = 'C',
    CHR_D = 'D',
    CHR_E = 'E',
    CHR_F = 'F',
    CHR_G = 'G',
    CHR_H = 'H',
    CHR_I = 'I',
    CHR_J = 'J',
    CHR_K = 'K',
    CHR_L = 'L',
    CHR_M = 'M',
    CHR_N = 'N',
    CHR_O = 'O',
    CHR_P = 'P',
    CHR_Q = 'Q',
    CHR_R = 'R',
    CHR_S = 'S',
    CHR_T = 'T',
    CHR_U = 'U',
    CHR_V = 'V',
    CHR_W = 'W',
    CHR_X = 'X',
    CHR_Y = 'Y',
    CHR_Z = 'Z',
    CHR_0 = '0',
    CHR_1 = '1',
    CHR_2 = '2',
    CHR_3 = '3',
    CHR_4 = '4',
    CHR_5 = '5',
    CHR_6 = '6',
    CHR_7 = '7',
    CHR_8 = '8',
    CHR_9 = '9',
    // and the (duplicate) enumerations to "allow" the rest
    // of the character space to be legal in the enum class
    CODE_0 = 0,
    CODE_1 = 1,
    CODE_2 = 2,
    CODE_3 = 3,
    CODE_4 = 4,
    CODE_5 = 5,
    CODE_6 = 6,
    CODE_7 = 7,
    CODE_8 = 8,
    CODE_9 = 9,
    CODE_10 = 10,
    CODE_11 = 11,
    CODE_12 = 12,
    CODE_13 = 13,
    CODE_14 = 14,
    CODE_15 = 15,
    CODE_16 = 16,
    CODE_17 = 17,
    CODE_18 = 18,
    CODE_19 = 19,
    CODE_20 = 20,
    CODE_21 = 21,
    CODE_22 = 22,
    CODE_23 = 23,
    CODE_24 = 24,
    CODE_25 = 25,
    CODE_26 = 26,
    CODE_27 = 27,
    CODE_28 = 28,
    CODE_29 = 29,
    CODE_30 = 30,
    CODE_31 = 31,
    CODE_32 = 32,
    CODE_33 = 33,
    CODE_34 = 34,
    CODE_35 = 35,
    CODE_36 = 36,
    CODE_37 = 37,
    CODE_38 = 38,
    CODE_39 = 39,
    CODE_40 = 40,
    CODE_41 = 41,
    CODE_42 = 42,
    CODE_43 = 43,
    CODE_44 = 44,
    CODE_45 = 45,
    CODE_46 = 46,
    CODE_47 = 47,
    CODE_48 = 48,
    CODE_49 = 49,
    CODE_50 = 50,
    CODE_51 = 51,
    CODE_52 = 52,
    CODE_53 = 53,
    CODE_54 = 54,
    CODE_55 = 55,
    CODE_56 = 56,
    CODE_57 = 57,
    CODE_58 = 58,
    CODE_59 = 59,
    CODE_60 = 60,
    CODE_61 = 61,
    CODE_62 = 62,
    CODE_63 = 63,
    CODE_64 = 64,
    CODE_65 = 65,
    CODE_66 = 66,
    CODE_67 = 67,
    CODE_68 = 68,
    CODE_69 = 69,
    CODE_70 = 70,
    CODE_71 = 71,
    CODE_72 = 72,
    CODE_73 = 73,
    CODE_74 = 74,
    CODE_75 = 75,
    CODE_76 = 76,
    CODE_77 = 77,
    CODE_78 = 78,
    CODE_79 = 79,
    CODE_80 = 80,
    CODE_81 = 81,
    CODE_82 = 82,
    CODE_83 = 83,
    CODE_84 = 84,
    CODE_85 = 85,
    CODE_86 = 86,
    CODE_87 = 87,
    CODE_88 = 88,
    CODE_89 = 89,
    CODE_90 = 90,
    CODE_91 = 91,
    CODE_92 = 92,
    CODE_93 = 93,
    CODE_94 = 94,
    CODE_95 = 95,
    CODE_96 = 96,
    CODE_97 = 97,
    CODE_98 = 98,
    CODE_99 = 99,
    CODE_100 = 100,
    CODE_101 = 101,
    CODE_102 = 102,
    CODE_103 = 103,
    CODE_104 = 104,
    CODE_105 = 105,
    CODE_106 = 106,
    CODE_107 = 107,
    CODE_108 = 108,
    CODE_109 = 109,
    CODE_110 = 110,
    CODE_111 = 111,
    CODE_112 = 112,
    CODE_113 = 113,
    CODE_114 = 114,
    CODE_115 = 115,
    CODE_116 = 116,
    CODE_117 = 117,
    CODE_118 = 118,
    CODE_119 = 119,
    CODE_120 = 120,
    CODE_121 = 121,
    CODE_122 = 122,
    CODE_123 = 123,
    CODE_124 = 124,
    CODE_125 = 125,
    CODE_126 = 126,
    CODE_127 = 127,
    CODE_128 = (char)128,
    CODE_129 = (char)129,
    CODE_130 = (char)130,
    CODE_131 = (char)131,
    CODE_132 = (char)132,
    CODE_133 = (char)133,
    CODE_134 = (char)134,
    CODE_135 = (char)135,
    CODE_136 = (char)136,
    CODE_137 = (char)137,
    CODE_138 = (char)138,
    CODE_139 = (char)139,
    CODE_140 = (char)140,
    CODE_141 = (char)141,
    CODE_142 = (char)142,
    CODE_143 = (char)143,
    CODE_144 = (char)144,
    CODE_145 = (char)145,
    CODE_146 = (char)146,
    CODE_147 = (char)147,
    CODE_148 = (char)148,
    CODE_149 = (char)149,
    CODE_150 = (char)150,
    CODE_151 = (char)151,
    CODE_152 = (char)152,
    CODE_153 = (char)153,
    CODE_154 = (char)154,
    CODE_155 = (char)155,
    CODE_156 = (char)156,
    CODE_157 = (char)157,
    CODE_158 = (char)158,
    CODE_159 = (char)159,
    CODE_160 = (char)160,
    CODE_161 = (char)161,
    CODE_162 = (char)162,
    CODE_163 = (char)163,
    CODE_164 = (char)164,
    CODE_165 = (char)165,
    CODE_166 = (char)166,
    CODE_167 = (char)167,
    CODE_168 = (char)168,
    CODE_169 = (char)169,
    CODE_170 = (char)170,
    CODE_171 = (char)171,
    CODE_172 = (char)172,
    CODE_173 = (char)173,
    CODE_174 = (char)174,
    CODE_175 = (char)175,
    CODE_176 = (char)176,
    CODE_177 = (char)177,
    CODE_178 = (char)178,
    CODE_179 = (char)179,
    CODE_180 = (char)180,
    CODE_181 = (char)181,
    CODE_182 = (char)182,
    CODE_183 = (char)183,
    CODE_184 = (char)184,
    CODE_185 = (char)185,
    CODE_186 = (char)186,
    CODE_187 = (char)187,
    CODE_188 = (char)188,
    CODE_189 = (char)189,
    CODE_190 = (char)190,
    CODE_191 = (char)191,
    CODE_192 = (char)192,
    CODE_193 = (char)193,
    CODE_194 = (char)194,
    CODE_195 = (char)195,
    CODE_196 = (char)196,
    CODE_197 = (char)197,
    CODE_198 = (char)198,
    CODE_199 = (char)199,
    CODE_200 = (char)200,
    CODE_201 = (char)201,
    CODE_202 = (char)202,
    CODE_203 = (char)203,
    CODE_204 = (char)204,
    CODE_205 = (char)205,
    CODE_206 = (char)206,
    CODE_207 = (char)207,
    CODE_208 = (char)208,
    CODE_209 = (char)209,
    CODE_210 = (char)210,
    CODE_211 = (char)211,
    CODE_212 = (char)212,
    CODE_213 = (char)213,
    CODE_214 = (char)214,
    CODE_215 = (char)215,
    CODE_216 = (char)216,
    CODE_217 = (char)217,
    CODE_218 = (char)218,
    CODE_219 = (char)219,
    CODE_220 = (char)220,
    CODE_221 = (char)221,
    CODE_222 = (char)222,
    CODE_223 = (char)223,
    CODE_224 = (char)224,
    CODE_225 = (char)225,
    CODE_226 = (char)226,
    CODE_227 = (char)227,
    CODE_228 = (char)228,
    CODE_229 = (char)229,
    CODE_230 = (char)230,
    CODE_231 = (char)231,
    CODE_232 = (char)232,
    CODE_233 = (char)233,
    CODE_234 = (char)234,
    CODE_235 = (char)235,
    CODE_236 = (char)236,
    CODE_237 = (char)237,
    CODE_238 = (char)238,
    CODE_239 = (char)239,
    CODE_240 = (char)240,
    CODE_241 = (char)241,
    CODE_242 = (char)242,
    CODE_243 = (char)243,
    CODE_244 = (char)244,
    CODE_245 = (char)245,
    CODE_246 = (char)246,
    CODE_247 = (char)247,
    CODE_248 = (char)248,
    CODE_249 = (char)249,
    CODE_250 = (char)250,
    CODE_251 = (char)251,
    CODE_252 = (char)252,
    CODE_253 = (char)253,
    CODE_254 = (char)254,
    CODE_255 = (char)255,
  };
  // These roll under (over); ahem, it is a programmer's error to depend upon that behavior.
  inline constexpr auto pred(Code c) -> Code { return Code(-1 + (int) c); }
  inline constexpr auto succ(Code c) -> Code { return Code(+1 + (int) c); }
}
#endiv
#divert <hpp>
namespace options::indicator {
  // The code for which this is true signals that the end of the options has been reached.
  inline auto end(Code) -> bool;
  inline auto more(Code) -> bool;
  // The code(s) for which this is true signals that there was some problem.
  inline auto erroneous(Code) -> bool;
}
#endiv
#divert <ipp>
auto options::indicator::end(Code c) -> bool {
  return Code::END == c;
}

auto options::indicator::more(Code c) -> bool {
  return !end(c);
}

auto options::indicator::erroneous(Code c) -> bool {
  return Code::UNKNOWN == c || Code::MISSING == c;
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#include <getopt.h>
namespace options {
  namespace argument {
    namespace literal {
      enum class Code {
        // pull in #defines from the cpp
	NO = no_argument,
        REQUIRED = required_argument,
        OPTIONAL = optional_argument,
      };
    }
    class Code;
  }
}
#endiv
#divert <hpp>
namespace options {
  namespace argument {
    inline constexpr auto operator==(Code const &, Code const &) -> bool;
    inline constexpr auto operator!=(Code const &, Code const &) -> bool;
  }
}

class options::argument::Code {
public:
  inline constexpr Code();
  inline constexpr [[implicit]] Code(literal::Code);
  inline constexpr operator int() const;
protected:
  friend constexpr auto operator==(Code const &, Code const &) -> bool;
  literal::Code value;
public:
  struct tests { struct Suite; };
  friend struct tests::Suite;
};

// Must be manifest because the default default constructor does not initialize the POD
constexpr options::argument::Code::Code()
  : value(literal::Code::NO) {
  ;
}

constexpr options::argument::Code::Code(literal::Code the_value)
  : value(the_value) {
  ;
}

constexpr options::argument::Code::operator int() const {
  return (int)(value);
}

constexpr auto options::argument::operator==(Code const &a, Code const &b) -> bool {
  return a.value == b.value;
}

constexpr auto options::argument::operator!=(Code const &a, Code const &b) -> bool {
  return !operator==(a, b);
}
#endiv

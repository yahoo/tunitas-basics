// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace options::shortish {
  //
  // Syntax:
  //   zero (0) following colon means "is a flag"         -> options::argument::NO
  //   one (1) following colon means "requires a value"   -> options::argument::REQUIRED
  //   two (2) following colons means "an optional value" -> options::argument::OPTIONAL
  //
  // From getopt(3)
  //   If such a character is followed by a colon, the option requires an  argument.
  //   Two colons mean an option takes an optional arg;
  //       if there is text in the current argv-element
  //           i.e., in the same word as the option name itself,  for  example,  "-oarg",
  //       then it is returned, else not.
  //   Whereas POSIX.2 reserves the -W option for implementation extensions.
  //       If optstring contains 'W' followed by a semicolon, e.g. "W;"
  //       then '-W foo' is treated as the long option --foo.
  //       This behavior is a GNU extension, not available with libraries before glibc 2.
  //
  // Usage:
  //     Specification shortspec("abc:d:e::f::");
  //     ...etc...
  //
  class Specification;
}
#endiv
#divert <hpp>
#import std.string
#import re.construct.String
#import options.shortish.Getter
class options::shortish::Specification : private std::string {
  using Ancestor = std::string;
public:
  Specification() = default;
  inline explicit Specification(re::construct::String<std::string>);
  using Ancestor::c_str;
  using Ancestor::data;
  using Ancestor::size;
  using Ancestor::empty;
  using Ancestor::begin;
  using Ancestor::end;
  // WHY? friend class shortish::Getter;
public:
  struct tests { struct Suite; };
  friend struct tests::Suite;
};
#endiv
#divert <ipp>
#import std.move
options::shortish::Specification::Specification(re::construct::String<std::string> literal)
  : Ancestor(std::move<std::string &>(literal)) {
  ;
}
#endiv

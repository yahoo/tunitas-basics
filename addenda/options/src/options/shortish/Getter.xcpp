// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace options {
  namespace shortish {
    class Getter;
  }
}
#divert </fpp>
#divert <hpp>
#import c.argv
#import options.shortish.Step
#import options.shortish.Specification
#import options.detail.getopt.State
#import std.size_t
//
// Usage:
//   auto main(int argc, char *argv[]) -> int {
//     Getter get(specification, c::as<c::argv>(argc, argv));
//     Step step;
//     while ( ! end(step = get()) ) {
//       switch (code(step)) {
//       ...etc...
//       }
//     }
//     std::vector<std::string> args(get.begin(), get.end());
//     ...etc...
//  }
//
// Reminder: Getter (GNU getopt) reorders the argv so 'const_argv' isn't appropriate
//
class options::shortish::Getter {
public:
  // reminder: this has to be nonconst becuase GNU getopt reorders the argv[]
  using arguments_container = c::argv;
  explicit Getter(Specification const &, arguments_container /*NOT-const*/ modified);
  // Reminder: the argv[i] are are reordered
  auto operator()() -> Step;
  // Once exhausted ...
  // returns the index of the first non-option
  inline auto index() const -> int;
  // Once exhausted ...
  // return aspects of the remaining non-options
  inline auto empty() const -> bool;
  inline auto size() const -> std::size_t;
  using const_data_type = arguments_container::const_data_type;
  inline auto data() const -> const_data_type;
  using data_type = arguments_container::data_type;
  inline auto data() -> data_type;
  // returns iterators to the after-the-options
  using const_iterator = arguments_container::const_iterator;
  inline auto begin() const -> const_iterator;
  inline auto end() const -> const_iterator;
  using iterator = arguments_container::iterator;
  inline auto begin() -> iterator;
  inline auto end() -> iterator;
  // shift off the first option; like bash or perl
  inline auto shift() -> arguments_container::value_type;
public:
  Specification const &short_specification;
  // reminder ... getopt reorders the argv elements to suit its semantic.
  arguments_container arguments;
  options::detail::getopt::State state;
public:
  struct tests { struct Suite; };
  friend struct tests::Suite;
};

namespace options {
  namespace shortish {
    inline auto shift(Getter &) -> Getter::arguments_container::value_type;
  }
}
#divert </hpp>
#divert <ipp>
auto options::shortish::shift(Getter &g) -> Getter::arguments_container::value_type {
  return g.shift();
}

auto options::shortish::Getter::index() const -> int {
  return state.optind;
}

auto options::shortish::Getter::empty() const -> bool {
  return 0 == size();
}

auto options::shortish::Getter::size() const -> std::size_t {
  return arguments.size() - index();
}

auto options::shortish::Getter::data() const -> const_data_type {
  return arguments.data() + index();
}

auto options::shortish::Getter::data() -> data_type {
  return arguments.data() + index();
}

auto options::shortish::Getter::begin() const -> const_iterator {
  return arguments.begin() + index();
}

auto options::shortish::Getter::end() const -> const_iterator {
  return arguments.end();
}

auto options::shortish::Getter::begin() -> iterator {
  return arguments.begin() + index();
}

auto options::shortish::Getter::end() -> iterator {
  return arguments.end();
}

#import std.out_of_range
auto options::shortish::Getter::shift() -> arguments_container::value_type {
  if (begin() == end()) {
    throw std::out_of_range("empty shift");
  }
  auto position = arguments.data() + state.optind++;
  return *position;
}

#divert </ipp>
#divert <cpp>
#import c.stringz
#import options.Code
#import options.shortish.Specification
#import options.detail.getopt.Caller

options::shortish::Getter::Getter(Specification const &the_specification, c::argv /*NOT-const*/ the_arguments)
  : short_specification(the_specification)
  , arguments(the_arguments)
    // WATCHOUT - there are significant diagnostics emitted to stderr when State::DEBUG_MODE is enabled.
    //            the core getopt library handles ambiguity, to a point.
    //            Enable DEBUG_MODE to diagnose improbably incomprehensible 'missing' or 'unknown' return values.
  , state(options::detail::getopt::State::SILENT_MODE) {
  ;
}

#import std.cerr
auto options::shortish::Getter::operator()() -> Step {
  options::detail::getopt::Caller calling(state);
  int r = calling.getopt(arguments.size(), arguments.data(), short_specification.c_str());
  if (-1 == r) {
    return Step(Code::END);
  } else {
    Code code = Code(r);
    if (erroneous(code)) {
      return Step(code, (char)state.optopt);
    } else {
      // GNU getopt also passes through here
      //   \1    becoming Code::POSITION
      // This is not an error, but a "natural" mode of the API
      return Step(code, state.optarg);
    }
  }
}
#divert </cpp>

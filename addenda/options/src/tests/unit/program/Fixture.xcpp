// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace program {
      class Fixture;
    }
  }
}
#endiv
#divert <hpp>
#import c.argv
#import c.const_argv
#import cppunit.Test
#import cppunit.test.Fixture
#import tests.unit.Argv
class tests::unit::program::Fixture : public cppunit::test::Fixture {
  using Ancestor = cppunit::test::Fixture;
public:
  auto setUp() -> void;
  auto tearDown() -> void;

  Argv invocation;     // something interesting
  c::argv av;          // just points into invocation
  c::const_argv cav;   // just points into invocation

  auto test_stringz_constructor() -> void;
  auto test_argv_constructor() -> void;
  auto test_const_argv_constructor() -> void;
  auto test_name_default() -> void;
  auto test_basename_trimming() -> void;

  static auto suite() -> cppunit::Test *;
};

#import options.Program
class options::Program::tests::Suite {
public:
  // Just reach in and call what we want called.
  inline static auto name_default(options::Program &, c::const_stringz const &argv0) -> std::string;
  inline static auto basename_trimming(options::Program &, std::string &path_trimmed) -> void;
};
#endiv
#divert <cpp>
#import options.Program

#import tests.unit.back_duplicator
#import std.copy
auto tests::unit::program::Fixture::setUp() -> void {
  this->invocation = Argv{ "a.out", "--apple", "-b" }; // will add the final nullptr sentinel for us
  this->av = c::argv(invocation.size()-1, invocation.data()); // subtract the final nullptr sentinel
  this->cav = this->av;
}

auto tests::unit::program::Fixture::tearDown() -> void {
  invocation.clear();
}

#import c.const_stringz
auto tests::unit::program::Fixture::test_stringz_constructor() -> void {
  c::const_stringz csz(invocation.front());
  options::Program prog(csz);
  CPPUNIT_ASSERT( ! prog.empty() );
  CPPUNIT_ASSERT(prog == (std::string)(csz.data()));
}

auto tests::unit::program::Fixture::test_argv_constructor() -> void {
  options::Program prog(this->av.size(), this->av.data());
  CPPUNIT_ASSERT( ! prog.empty() );
  CPPUNIT_ASSERT(prog == this->av[0]);
}

auto tests::unit::program::Fixture::test_const_argv_constructor() -> void {
  options::Program prog(this->cav);
  CPPUNIT_ASSERT( ! prog.empty() );
  CPPUNIT_ASSERT(prog == this->cav[0]);
}

auto options::Program::tests::Suite::name_default(options::Program &p, c::const_stringz const &argv0) -> std::string {
  return p.name_default(argv0);
}

auto tests::unit::program::Fixture::test_name_default() -> void {
  using accessor = options::Program::tests::Suite;
  options::Program prog(this->cav);
  CPPUNIT_ASSERT("a.out" == accessor::name_default(prog, ""));
  CPPUNIT_ASSERT("virus.exe" == accessor::name_default(prog, "./virus.exe"));
  CPPUNIT_ASSERT("b.out" == accessor::name_default(prog, "b.out"));
}

auto options::Program::tests::Suite::basename_trimming(options::Program &p, std::string &path_trimmed) -> void {
  p.basename_trimming(path_trimmed);
}

auto tests::unit::program::Fixture::test_basename_trimming() -> void {
  using accessor = options::Program::tests::Suite;
  options::Program prog(this->cav);
  {
    std::string s = "///////////////////////////lawn";
    accessor::basename_trimming(prog, s);
    CPPUNIT_ASSERT("lawn" == s);
  } {
    std::string s = "/";
    accessor::basename_trimming(prog, s);
    CPPUNIT_ASSERT("" == s);
  }
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::program::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("program");
  s << call("stringz", &Fixture::test_stringz_constructor)
    << call("argv", &Fixture::test_argv_constructor)
    << call("const_argv", &Fixture::test_const_argv_constructor)
    ;
  return finalize(s);
}
#endiv

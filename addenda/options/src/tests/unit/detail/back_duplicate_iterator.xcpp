// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace detail {
      template<typename CONTAINER> class back_duplicate_iterator;
    }
  }
}
#endiv
#divert <hpp>
#import c.stringz
#import c.const_stringz
#import std.iterator
#import std.nullptr_t
#import std.output_iterator_tag
#import std.string
#import std.size_t
template<typename CONTAINER> class tests::unit::detail::back_duplicate_iterator : public std::iterator<std::output_iterator_tag, char *> {
  // like std::back_insert_iterator, but applies strdup to the arguments
public:
  using container_type = CONTAINER;
  using value_type = typename container_type::value_type;
  inline explicit back_duplicate_iterator(container_type &subject);
  inline auto operator=(std::nullptr_t) -> back_duplicate_iterator & = delete; // disallowed, but pushing a 0-pointer results in ""
  inline auto operator=(char const *) -> back_duplicate_iterator &;
  template<typename std::size_t N> inline auto operator=(char const (&)[N]) -> back_duplicate_iterator &;
  inline auto operator=(c::stringz const &) -> back_duplicate_iterator &;
  inline auto operator=(c::const_stringz const &) -> back_duplicate_iterator &;
  inline auto operator=(std::string const &) -> back_duplicate_iterator &;
  inline auto operator++() -> back_duplicate_iterator &;
  inline auto operator++(int) -> back_duplicate_iterator;
  inline auto operator*() -> back_duplicate_iterator &;
protected:
  container_type &subject;
};
#endiv
#divert <ipp>
template<typename CONTAINER> tests::unit::detail::back_duplicate_iterator<CONTAINER>::back_duplicate_iterator(container_type &arg)
  : subject(arg) {
  ;
}

template<typename CONTAINER> auto tests::unit::detail::back_duplicate_iterator<CONTAINER>::operator=(char const *old) -> back_duplicate_iterator & {
  c::const_stringz spec(old);
  return operator=(spec);
}

template<typename CONTAINER> template<typename std::size_t N> auto tests::unit::detail::back_duplicate_iterator<CONTAINER>:: operator=(char const (&old)[N]) -> back_duplicate_iterator & {
  c::const_stringz spec(old);
  return operator=(spec);
}

template<typename CONTAINER> auto tests::unit::detail::back_duplicate_iterator<CONTAINER>::operator=(c::stringz const &old) -> back_duplicate_iterator & {
  c::const_stringz spec(old);
  return operator=(spec);
}

template<typename CONTAINER> auto tests::unit::detail::back_duplicate_iterator<CONTAINER>::operator=(c::const_stringz const &old) -> back_duplicate_iterator & {
  subject.insert(subject.end(), duplicate(old).data());
  return *this;
}

template<typename CONTAINER> auto tests::unit::detail::back_duplicate_iterator<CONTAINER>::operator=(std::string const &old) -> back_duplicate_iterator & {
  c::const_stringz spec(old);
  return operator=(spec);
}

template<typename CONTAINER> auto tests::unit::detail::back_duplicate_iterator<CONTAINER>::operator++() -> back_duplicate_iterator & {
  return *this;
}

template<typename CONTAINER> auto tests::unit::detail::back_duplicate_iterator<CONTAINER>::operator++(int) -> back_duplicate_iterator {
  return *this;
}

template<typename CONTAINER> auto tests::unit::detail::back_duplicate_iterator<CONTAINER>::operator*() -> back_duplicate_iterator & {
  return *this;
}

#endiv

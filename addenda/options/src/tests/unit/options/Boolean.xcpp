// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace options {
      class Boolean;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::options::Boolean : public cppunit::test::Fixture {
  using Ancestor = cppunit::test::Fixture;
public:
  auto test_constructor_default() -> void;
  auto test_constructor_conversion() -> void;
  auto test_assign_bool() -> void;
  auto test_assign_Boolean() -> void;
  auto test_operator_cast() -> void;
  auto test_operator_not() -> void;
  auto test_operator_eq() -> void;
  auto test_operator_ne() -> void;
  auto test_swap() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import options.Boolean

auto tests::unit::options::Boolean::test_constructor_default() -> void {
  ::options::Boolean b;
  CPPUNIT_ASSERT(!b); // default is false
}

auto tests::unit::options::Boolean::test_constructor_conversion() -> void {
  {
    ::options::Boolean b(false);
    CPPUNIT_ASSERT(!b);
  } {
    ::options::Boolean b(true);
    CPPUNIT_ASSERT(b);
  }
}

auto tests::unit::options::Boolean::test_assign_bool() -> void {
  ::options::Boolean lhs(false);
  bool rhs(true);
  CPPUNIT_ASSERT(!lhs);
  lhs = rhs;
  CPPUNIT_ASSERT(lhs);
}

auto tests::unit::options::Boolean::test_assign_Boolean() -> void {
  ::options::Boolean lhs(false);
  ::options::Boolean rhs(true);
  CPPUNIT_ASSERT(!lhs);
  lhs = rhs;
  CPPUNIT_ASSERT(lhs);
}

auto tests::unit::options::Boolean::test_operator_cast() -> void {
  ::options::Boolean t(true), f(false);
  bool tt = (bool) t;
  bool ff = (bool) f;
  CPPUNIT_ASSERT(tt);
  CPPUNIT_ASSERT(!ff);
}

auto tests::unit::options::Boolean::test_operator_not() -> void {
  ::options::Boolean t(true), f(false);
  CPPUNIT_ASSERT(true == !f); // <-----test this
}

auto tests::unit::options::Boolean::test_operator_eq() -> void {
  {
    ::options::Boolean t(true);
    CPPUNIT_ASSERT(true == t);
    CPPUNIT_ASSERT(t == t);
    CPPUNIT_ASSERT(t == true);
  } {
    ::options::Boolean f(false);
    CPPUNIT_ASSERT(false == f);
    CPPUNIT_ASSERT(f == f);
    CPPUNIT_ASSERT(f == false);
  }
}

auto tests::unit::options::Boolean::test_operator_ne() -> void {
  ::options::Boolean t(true);
  ::options::Boolean f(false);
  CPPUNIT_ASSERT(false != t);
  CPPUNIT_ASSERT(f != t);
  CPPUNIT_ASSERT(t != false);
}

auto tests::unit::options::Boolean::test_swap() -> void {
  ::options::Boolean t(true), f(false);
  CPPUNIT_ASSERT(t && !f);
  std::swap(t, f);
  CPPUNIT_ASSERT(!t && f);
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::options::Boolean::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("Boolean");
  s << call("constructor_default", &Boolean::test_constructor_default)
    << call("constructor_conversion", &Boolean::test_constructor_conversion)
    << call("assign_bool", &Boolean::test_assign_bool)
    << call("assign_Boolean", &Boolean::test_assign_Boolean)
    << call("operator_cast", &Boolean::test_operator_cast)
    << call("operator_not", &Boolean::test_operator_not)
    << call("operator_eq", &Boolean::test_operator_eq)
    << call("operator_ne", &Boolean::test_operator_ne)
    << call("swap", &Boolean::test_swap)
    ;
  return finalize(s);
}
#endiv

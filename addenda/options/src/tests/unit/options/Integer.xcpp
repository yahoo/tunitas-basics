// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace options {
      class Integer;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::options::Integer : public cppunit::test::Fixture {
  using Ancestor = cppunit::test::Fixture;
public:
  auto test_constructor_default() -> void;
  auto test_constructor_conversion() -> void;
  auto test_assign_int() -> void;
  auto test_assign_Integer() -> void;
  auto test_operator_cast() -> void;
  auto test_operator_eq() -> void;
  auto test_operator_ne() -> void;
  auto test_swap() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import options.Integer

auto tests::unit::options::Integer::test_constructor_default() -> void {
  ::options::Integer b;
  CPPUNIT_ASSERT(!b); // default is false
}

auto tests::unit::options::Integer::test_constructor_conversion() -> void {
  {
    ::options::Integer b(false);
    CPPUNIT_ASSERT(!b);
  } {
    ::options::Integer b(true);
    CPPUNIT_ASSERT(b);
  }
}

auto tests::unit::options::Integer::test_assign_int() -> void {
  ::options::Integer lhs(88);
  std::int64_t rhs(99);
  CPPUNIT_ASSERT_EQUAL((decltype(lhs))88, lhs);
  lhs = rhs;
  CPPUNIT_ASSERT_EQUAL((decltype(lhs))99, lhs);
}

auto tests::unit::options::Integer::test_assign_Integer() -> void {
  ::options::Integer lhs(-77);
  ::options::Integer rhs(-66);
  CPPUNIT_ASSERT_EQUAL((decltype(lhs))-77, lhs);
  lhs = rhs;
  CPPUNIT_ASSERT_EQUAL((decltype(lhs))-66, lhs);
}

auto tests::unit::options::Integer::test_operator_cast() -> void {
  ::options::Integer t(10), f(-15);
  std::int64_t att = (std::int64_t) t;
  std::int64_t aff = (std::int64_t) f;
  std::int64_t ett = 10;
  std::int64_t eff = -15;
  CPPUNIT_ASSERT_EQUAL(ett, att);
  CPPUNIT_ASSERT_EQUAL(eff, aff);
}

auto tests::unit::options::Integer::test_operator_eq() -> void {
  {
    ::options::Integer t(true);
    CPPUNIT_ASSERT(true == t);
    CPPUNIT_ASSERT(t == t);
    CPPUNIT_ASSERT(t == true);
  } {
    ::options::Integer f(false);
    CPPUNIT_ASSERT(false == f);
    CPPUNIT_ASSERT(f == f);
    CPPUNIT_ASSERT(f == false);
  }
}

auto tests::unit::options::Integer::test_operator_ne() -> void {
  ::options::Integer t(true);
  ::options::Integer f(false);
  CPPUNIT_ASSERT(false != t);
  CPPUNIT_ASSERT(f != t);
  CPPUNIT_ASSERT(t != false);
}

auto tests::unit::options::Integer::test_swap() -> void {
  ::options::Integer t(true), f(false);
  CPPUNIT_ASSERT(t && !f);
  std::swap(t, f);
  CPPUNIT_ASSERT(!t && f);
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::options::Integer::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("Integer");
  s << call("constructor_default", &Integer::test_constructor_default)
    << call("constructor_conversion", &Integer::test_constructor_conversion)
    << call("assign_bool", &Integer::test_assign_int)
    << call("assign_Integer", &Integer::test_assign_Integer)
    << call("operator_cast", &Integer::test_operator_cast) 
    << call("operator_eq", &Integer::test_operator_eq)
    << call("operator_ne", &Integer::test_operator_ne)
    << call("swap", &Integer::test_swap)
    ;
  return finalize(s);
}
#endiv

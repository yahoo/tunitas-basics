// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace options {
      class Fixture;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::options::Fixture : public cppunit::test::Fixture {
  using Ancestor = cppunit::test::Fixture;
public:
  auto test_shortish() -> void;
  auto test_longish() -> void;
  auto test_both() -> void;
  template<std::size_t N> auto test_repeat_shortish() -> void;
  template<std::size_t N> auto test_repeat_longish() -> void;
  template<std::size_t N> auto test_repeat_both() -> void;
  auto test_alternated() -> void;
  auto test_repeated() -> void;
  auto test_shift() -> void;
  auto test_shift_throwing() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <tpp>
template<std::size_t N> auto tests::unit::options::Fixture::test_repeat_shortish() -> void {
  for (std::size_t i(0), e(N); e != i; ++i) {
    test_shortish();
  }
}

template<std::size_t N> auto tests::unit::options::Fixture::test_repeat_longish() -> void {
  for (std::size_t i(0), e(N); e != i; ++i) {
    test_longish();
  }
}

template<std::size_t N> auto tests::unit::options::Fixture::test_repeat_both() -> void {
  for (std::size_t i(0), e(N); e != i; ++i) {
    test_both();
  }
}
#endiv
#divert <cpp>
#import std.ostream
#import std.cout
#import std.cerr

#import c.argv
#import options.Code
#import options.shortish.Specification
#import options.shortish.Getter
#import options.shortish.Step
#import tests.unit.Argv
auto tests::unit::options::Fixture::test_shortish() -> void {
  bool tested_something = false;
  ::options::shortish::Specification spec("hva:b::");
  Argv xargv{"argv0", "-h", "-hv", "-a", "apple", "-b", "-bbeagle", nullptr};
  char buf0[] = "argv0";
  char buf1[] = "-h";
  char buf2[] = "-hv";
  char buf3[] = "-a";
  char buf4[] = "apple";
  char buf5[] = "-b";
  char buf6[] = "-bbeagle";
  char *argv[] = { buf0, buf1, buf2, buf3, buf4, buf5, buf6, nullptr };
  ::options::shortish::Getter get(spec, argv);
  std::ostream &out(std::cout);
  ::options::shortish::Step step;
  while (!end(step = get())) {
    switch (code(step)) {
    case ::options::Code::CHR_a:
      out << "-a is required with qq|" << required(step) << "|\n";
      tested_something = true;
      break;
    case ::options::Code::CHR_b:
      out << "-b is optional with qq|" << optional(step) << "|\n";
      tested_something = true;
      break;
    case ::options::Code::CHR_h:
      out << "-h is help\n";
      tested_something = true;
      break;
    case ::options::Code::CHR_v:
      out << "-v is verbose\n";
      tested_something = true;
      break;
    case ::options::Code::MISSING:
      out << __FILE__ << ':' << __LINE__ << '\n';
      out << "test_shortish: FAILING at option -" << flag_in_error(step) << " is missing a value (this an error)\n";
      CPPUNIT_ASSERT(false);
      break;
    case ::options::Code::UNKNOWN:
      out << __FILE__ << ':' << __LINE__ << '\n';
      out << "test_shortish: FAILING at option -" << flag_in_error(step) << " is unknown (an error)\n";
      CPPUNIT_ASSERT(false);
      break;
    default:
      CPPUNIT_ASSERT(false);
      break;
    }
  }
  CPPUNIT_ASSERT(tested_something);
}

#import c.argv
#import options.Code
#import options.argument.constants
#import options.longish.Specification
#import options.longish.Getter
#import options.longish.Step
auto tests::unit::options::Fixture::test_longish() -> void {
  bool tested_something = false;
  namespace ac = ::options::argument;
  using oc = ::options::Code;
  ::options::longish::Specification spec
  {{"usage", ac::NO, oc::USAGE_SUBCOMMAND},
      {"help", ac::NO, oc::USAGE_SUBCOMMAND},
        {"version", ac::NO, oc::VERSION_SUBCOMMAND},
          {"verbose", ac::NO, oc::VERBOSE_MODE},
            {"dry-run", ac::NO, oc::DRY_RUN_MODE},
              {"debug", ac::NO, oc::DEBUG_MODE},
                {"apple", ac::REQUIRED, oc::CHR_a},
                  {"beagle", ac::OPTIONAL, oc::CHR_b}};
  Argv argv
  {"argv0",
      "--help",
      "--usage",
      "--version",
      "--verbose",
      "--version",
      "--apple=APPLE1",
      "--apple", "APPLE2",
      "--beagle",
      "--beagle=BEAGLE",
      nullptr};
  ::options::longish::Getter get(spec, argv);
  std::ostream &out(std::cout);
  out << "Testing --usage\n";
  ::options::longish::Step step;
  while (!end(step = get())) {
    switch (code(step)) {
    case ::options::Code::USAGE_SUBCOMMAND:
      out << "saw --usage\n";
      break;
    case ::options::Code::VERSION_SUBCOMMAND:
      out << "saw --version\n";
      break;
    case ::options::Code::VERBOSE_MODE:
      out << "entering verbose mode\n";
      break;
    case ::options::Code::DEBUG_MODE:
      out << "entering verbose mode\n";
      break;
    case ::options::Code::DRY_RUN_MODE:
      out << "entering dry-run mode\n";
      break;
    case ::options::Code::CHR_a:
      out << "--apple is required with qq|" << required(step) << "|\n";
      tested_something = true;
      break;
    case ::options::Code::CHR_b:
      out << "--beagle is optional with qq|" << optional(step) << "|\n";
      tested_something = true;
      break;
    case ::options::Code::CHR_c:
      out << "--cherry flag\n";
      tested_something = true;
      break;
    case ::options::Code::MISSING:
      out << "option is missing (an error)\n";
      CPPUNIT_ASSERT(false);
      break;
    case ::options::Code::UNKNOWN:
      out << __FILE__ << ':' << __LINE__ << '\n';
      out << "test_longish: FAILING at option with 'unknown' (an error) at"
          << " qq|" << flag_in_error(step) << "|"
          << " qq|" << word_in_error(step) << "|"
          << "\n";
      CPPUNIT_ASSERT(false);
      break;
    default:
      out << __FILE__ << ':' << __LINE__ << '\n';
      out << "test_longish: FAILING at option with ak wholly unexpected (error at the default-clause) at"
          << " code=" << (int)(code(step)) << "|"
          << " qq|" << flag_in_error(step) << "|"
          << " qq|" << word_in_error(step) << "|"
          << "\n";
      CPPUNIT_ASSERT(false);
      break;
    }
  }
  CPPUNIT_ASSERT(tested_something);
}

#import c.argv
#import options.Code
#import options.argument.constants
#import options.longish.Specification
#import options.longish.Getter
#import options.longish.Step
auto tests::unit::options::Fixture::test_both() -> void {
  bool tested_something = false;
  ::options::shortish::Specification sspec("hva:b::");
  namespace ac = ::options::argument;
  using oc = ::options::Code;
  ::options::longish::Specification lspec
  {{"usage", ac::NO, oc::USAGE_SUBCOMMAND},
      {"help", ac::NO, oc::USAGE_SUBCOMMAND},
        {"version", ac::NO, oc::VERSION_SUBCOMMAND},
          {"verbose", ac::NO, oc::VERBOSE_MODE},
            {"dry-run", ac::NO, oc::DRY_RUN_MODE},
              {"debug", ac::NO, oc::DEBUG_MODE},
                {"apple", ac::REQUIRED, oc::CHR_a},
                  {"beagle", ac::OPTIONAL, oc::CHR_b}};
  Argv argv
  {"argv0",
      "--help",
      "-hv",
      "--verbose",
      "--version",
      "--apple=APPLE",
      "-a",
      "apple",
      "-b",
      "-bbeagle",
      "--beagle=BEAGLE",
      nullptr};
  ::options::longish::Getter get(sspec, lspec, argv);
  std::ostream &out(std::cout);
  ::options::longish::Step step;
  while (!end(step = get())) {
    switch (code(step)) {
    case ::options::Code::CHR_h:
    case ::options::Code::USAGE_SUBCOMMAND:
      out << "saw --usage\n";
      break;
    case ::options::Code::VERSION_SUBCOMMAND:
    case ::options::Code::CHR_V:
      out << "saw --version\n";
      break;
    case ::options::Code::CHR_v:
    case ::options::Code::VERBOSE_MODE:
      out << "entering verbose mode\n";
      break;
    case ::options::Code::DEBUG_MODE:
      out << "entering verbose mode\n";
      break;
    case ::options::Code::DRY_RUN_MODE:
      out << "entering dry-run mode\n";
      break;
    case ::options::Code::CHR_a:
      out << "-a is required with qq|" << required(step) << "|\n";
      tested_something = true;
      break;
    case ::options::Code::CHR_b:
      out << "-b is optional with qq|" << optional(step) << "|\n";
      tested_something = true;
      break;
    case ::options::Code::MISSING:
      out << __FILE__ << ':' << __LINE__ << '\n';
      out << "FAILING - option is missing (an error)\n";
      CPPUNIT_ASSERT(false);
      break;
    case ::options::Code::UNKNOWN:
      out << __FILE__ << ':' << __LINE__ << '\n';
      out << "FAILING - option is unknown (an error) at"
          << " qq|" << flag_in_error(step) << "|"
          << " qq|" << word_in_error(step) << "|"
          << "\n";
      CPPUNIT_ASSERT(false);
      break;
    default:
      out << __FILE__ << ':' << __LINE__ << '\n';
      out << "FAILING - option is wholly unexpected (error at the default-clause) at"
          << " code (int)=" << (int)(code(step))
          << ", code(char)=" << (char)(code(step))
          << " qq|" << flag_in_error(step) << "|"
          << " qq|" << word_in_error(step) << "|"
          << "\n";
      CPPUNIT_ASSERT(false);
      break;
    }
  }
  CPPUNIT_ASSERT(tested_something);
}

auto tests::unit::options::Fixture::test_shift() -> void {
  ::options::shortish::Specification spec("hv");
  Argv argv{"argv0", "-h", "-hv", "a", "apple", "b", "beagle"};
  ::options::shortish::Getter get(spec, argv);
  std::ostream &out(std::cout);
  ::options::shortish::Step step;
  out << __FILE__ << ':' << __LINE__ << " about to step " << argv << '\n';
  while (!end(step = get())) {
    out << __FILE__ << ':' << __LINE__ << " stepped " << argv << '\n';
    switch (code(step)) {
    case ::options::Code::CHR_h:
      out << "saw CHR_h as --usage\n";
      break;
    case ::options::Code::CHR_v:
      out << "entering verbose mode\n";
      break;
    default:
      out << __FILE__ << ':' << __LINE__ << '\n';
      std::cerr << "test_shift: unexpected error at -" << flag_in_error(step) << '\n';
      // this was not expected
      CPPUNIT_ASSERT(false);
      break;
    }
  }
  CPPUNIT_ASSERT(0 != get.size());
  auto a = shift(get); // <------------------------------------------- test this
  CPPUNIT_ASSERT(std::string("a") == a);
  auto apple = shift(get); // <--------------------------------------- test this
  CPPUNIT_ASSERT(std::string("apple") == apple);
  auto b = shift(get); // <------------------------------------------- test this
  CPPUNIT_ASSERT(std::string("b") == b);
  auto beagle = shift(get); // <-------------------------------------- test this
  CPPUNIT_ASSERT(std::string("beagle") == beagle);
  CPPUNIT_ASSERT(0 == get.size());
}

auto tests::unit::options::Fixture::test_alternated() -> void {
  // true?  maybe not, but there is some memory corruption going on
  // glibc-2.23.1-10.fc24.x86_64
  // cannot tolerate alternations of short & long getopt.
  test_shortish();
  test_longish();
  test_shortish();
  test_both();
  test_shortish();
}

auto tests::unit::options::Fixture::test_repeated() -> void {
  test_shortish();
  test_shortish();
}

auto tests::unit::options::Fixture::test_shift_throwing() -> void {
  try {
    ::options::shortish::Specification spec("hv");
    Argv argv{"argv0", "-h", "-hv", "a", "apple", "b", "beagle"};
    std::cerr << __FILE__ << ':' << __LINE__ << " argv " << argv << '\n';
    ::options::shortish::Getter get(spec, argv);
    std::ostream &out(std::cout);
    ::options::shortish::Step step;
    while (!end(step = get())) {
      switch (code(step)) {
      case ::options::Code::CHR_h:
        out << "saw --usage\n";
        break;
      case ::options::Code::CHR_v:
        out << "entering verbose mode\n";
        break;
      default:
        std::cerr << __FILE__ << ':' << __LINE__ << " argv " << argv << '\n';
        out << __FILE__ << ':' << __LINE__ << '\n';
        std::cerr << "test_shift_throwing: unexpected error at -" << flag_in_error(step) << '\n';
        // this was not expected
        CPPUNIT_ASSERT(false);
        break;
      }
    }
    std::cerr << __FILE__ << ':' << __LINE__ << " argv " << argv << '\n';
    CPPUNIT_ASSERT(0 != get.size());
    auto a = shift(get);
    CPPUNIT_ASSERT(std::string("a") == a);
    auto apple = shift(get);
    CPPUNIT_ASSERT(std::string("apple") == apple);
    auto b = shift(get);
    CPPUNIT_ASSERT(std::string("b") == b);
    auto beagle = shift(get);
    CPPUNIT_ASSERT(std::string("beagle") == beagle);
    CPPUNIT_ASSERT(0 == get.size());
    auto error = shift(get); // <------- test this
    CPPUNIT_ASSERT(false);
    // never reached
    CPPUNIT_ASSERT(nullptr == error);
  } catch (std::out_of_range const &e) {
    CPPUNIT_ASSERT(true);
  }
}

#import tests.unit.options.Boolean
#import tests.unit.options.Filename
#import tests.unit.options.Integer
#import tests.unit.options.Standard
#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::options::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("options");
  s << call("shortish", &Fixture::test_shortish)
    << call("longish", &Fixture::test_longish)
    << call("both", &Fixture::test_both)
    << call("shortish-10", &Fixture::test_repeat_shortish<10>)
    << call("longish-10", &Fixture::test_repeat_longish<10>)
    << call("both-10", &Fixture::test_repeat_both<10>)
    << call("alternated", &Fixture::test_alternated)
    << call("repeated", &Fixture::test_repeated)
    << call("shift", &Fixture::test_shift)
    << call("shift-throwing", &Fixture::test_shift_throwing)
    << add<Boolean>()
    << add<Filename>()
    << add<Integer>()
    << add<Standard>()
    ;
  return finalize(s);
}
#endiv

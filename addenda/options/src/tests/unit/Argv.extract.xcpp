// -*- c++ -*- in the SCOLD styling
#divert <hpp>
#import c.argv
#import c.const_argv
#import tests.unit.Argv
namespace tests {
  namespace unit {
    // No general facility here, just the specializations
    template<typename SHELL> inline auto extract(Argv &) -> SHELL;
    template<> inline auto extract<c::argv>(Argv &) -> c::argv;
    template<typename SHELL> inline auto extract(Argv const &) -> SHELL;
    template<> inline auto extract<c::const_argv>(Argv const &) -> c::const_argv;
  }
}

#endiv
#divert <ipp>
template<typename SHELL> inline auto tests::unit::extract(Argv &) -> SHELL {
  static_assert(0 == sizeof (SHELL) && 0 != sizeof (SHELL), "only specializations");
}

template<> inline auto tests::unit::extract<c::argv>(Argv &subject) -> c::argv {
  // The Argv must be "full"
  // The Argv must already have the terminating nullptr sentinel.
  // The operator cast removes returns a c::argv with a size that elides the nullptr sentinel
  return subject;
}

template<typename SHELL> inline auto tests::unit::extract(Argv const &) -> SHELL {
  static_assert(0 == sizeof (SHELL) && 0 != sizeof (SHELL), "only specializations");
}

template<> inline auto tests::unit::extract<c::const_argv>(Argv const &subject) -> c::const_argv {
  return c::const_argv(subject.size()-1, subject.data());
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace string {
      class Fixture;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import options.version.String

#import std.string
class tests::unit::string::Fixture : public cppunit::test::Fixture {
public:
  auto test_constructor() -> void;
  auto test_operator_insert() -> void;

  static auto suite() -> cppunit::Test *;
private:
  auto render(::options::version::String const &) -> std::string;
};
#endiv
#divert <cpp>
#import std.ostringstream
auto tests::unit::string::Fixture::render(::options::version::String const &specimen) -> std::string {
  std::ostringstream buf;
  buf << specimen;
  return buf.str();
}

auto tests::unit::string::Fixture::test_constructor() -> void {
  {
    ::options::version::String vs;
    CPPUNIT_ASSERT(vs.empty());
  } {
    ::options::version::String vs{1};
    CPPUNIT_ASSERT(1 == vs.size());
  } {
    ::options::version::String vs{1, 0};
    CPPUNIT_ASSERT(2 == vs.size());
  }
}

auto tests::unit::string::Fixture::test_operator_insert() -> void {
  ::options::version::String vs0;
  ::options::version::String vs1{1};
  ::options::version::String vs2{1, 0};
  ::options::version::String vs3{1, 0, 2};
  ::options::version::String vs4{1, 0, 2, 9};
  std::cout << "length-0: " << vs0
            << "\nlength-1: " << vs1
            << "\nlength-2: " << vs2
            << "\nlength-3: " << vs3
            << "\nlength-4: " << vs4
            << "\n";
  
  CPPUNIT_ASSERT("v0" == render(vs0)); // <------v0 there is always something
  CPPUNIT_ASSERT("v1" == render(vs1));
  CPPUNIT_ASSERT("v1.0" == render(vs2));
  CPPUNIT_ASSERT("v1.0.2" == render(vs3));
  CPPUNIT_ASSERT("v1.0.2.9" == render(vs4));
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
auto tests::unit::string::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("string");
  s << call("constructor", &Fixture::test_constructor)
    << call("operator_insert", &Fixture::test_operator_insert);
  return finalize(s);
}
#endiv

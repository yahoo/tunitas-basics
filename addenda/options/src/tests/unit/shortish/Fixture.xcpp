// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace shortish {
      class Fixture;
    }
  }
}
#endiv
#divert <hpp>
#import c.buffer
#import cppunit.Test
#import cppunit.test.Fixture
#import tests.unit.detail.Palette

#import std.string
class tests::unit::shortish::Fixture : public cppunit::test::Fixture, tests::unit::detail::Palette {
  using Ancestor = cppunit::test::Fixture;
public:
  auto setUp() -> void;
  auto tearDown() -> void;

  auto test_usage_basic() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.begin
#import std.end
auto tests::unit::shortish::Fixture::setUp() -> void {
  // NO LONG OPTIONS (they will cause errors as the Getter will only be using long options)
  char const *const ARGUMENTS_SOURCE[] = {
    "/bin/b.out",
    // WATCHOUT - these options must match the option string in test_usage_basic()
    "-H",
    "-t",
    "-T",
    "-r",
    "-e",
    "-E",
    "-l", "3",
    "-h", "5",
    "-P", "Bowden Park",
    "-Osec=krb5p",
    "-C",
    "-Csecret",
    "-W",
    "-Wno",
    // more added after this
  };
  char const *const CHARACTERS_SOURCE[] = {
    "Chaadayev",
    "Coleridge",
    "Feuerbach",
    "Fichte",
    "Goethe",
    "Hegel",
    "Khomyakov",
    "MÃ¼ller",
    "Ritschl",
    "Rousseau",
    "Schiller",
    "Schlegel",
    "Schopenhauer",
    "Schleiermacher",
    "Tieck",
    "Wackenroder",
  };

  Palette::bringup(std::begin(ARGUMENTS_SOURCE), std::end(ARGUMENTS_SOURCE),
                   std::begin(CHARACTERS_SOURCE), std::end(CHARACTERS_SOURCE));
}

auto tests::unit::shortish::Fixture::tearDown() -> void {
  Palette::bringdown();
}

#import options.Code
#import options.argument.constants
#import options.shortish.Specification
#import options.shortish.Getter
#import options.shortish.Step
#import c.argv
#import std.equal
#import std.begin
#import std.end
#import std.logic_error
auto tests::unit::shortish::Fixture::test_usage_basic() -> void {
  options::shortish::Specification const spec{"HtTreEl:h:P:O::C::W::"};
  // reminder: argv_workspace is reordered and reworked in place.
  options::shortish::Getter get(spec, this->argv);
  options::shortish::Step step;
  while ( ! end(step = get()) ) {
    CPPUNIT_ASSERT(end(step) == !more(step));
    switch (code(step)) {
      // cut & paste & sort from the spec above
    case options::Code::HELP:
    case options::Code::CHR_C:
    case options::Code::CHR_E:
    case options::Code::CHR_H:
    case options::Code::CHR_O:
    case options::Code::CHR_P:
    case options::Code::CHR_T:
    case options::Code::CHR_W:
    case options::Code::CHR_e:
    case options::Code::CHR_h:
    case options::Code::CHR_l:
    case options::Code::CHR_r:
    case options::Code::CHR_t:
      // This was expected but we don't do anything special with it (it's a tester!)
      CPPUNIT_ASSERT(true);
      break;
    case options::Code::MISSING:
      // This was not expected
      std::clog << "unexpected missing option value " << flag_in_error(step) << '\n';
      CPPUNIT_ASSERT(false);
      break;
    case options::Code::UNKNOWN:
      // This was not expected
      std::clog << "unexpected flag " << flag_in_error(step) << '\n';
      CPPUNIT_ASSERT(false);
      break;
    default:
      // Getter returned a valid code (not UNKNOWN)
      // We did not code for it.
      throw std::logic_error("our fault");
    }
  }
  // get the non-option words that remain
  c::argv av(get.size(), get.data());
  for (auto item : av) {
    std::clog << "av = \"" << item << "\"\n";
  }
  for (auto item : this->characters) {
    std::clog << "characters = \"" << item << "\"\n";
  }
  CPPUNIT_ASSERT(std::equal(std::begin(av), std::end(av), std::begin(this->characters), std::end(this->characters)));
}

#import tests.unit.shortish.Specification
#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::shortish::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("shortish");
  s << call("basic usage", &Fixture::test_usage_basic)
    << add<Specification>()
    ;
  return finalize(s);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::shortish {
  class Specification;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import options.shortish.Specification
class tests::unit::shortish::Specification : public cppunit::test::Fixture {
  using Ancestor = cppunit::test::Fixture;
public:
  using Subject = ::options::shortish::Specification;

  auto test_constructor_default() -> void;
  auto test_constructor_literal() -> void;
  auto test_constructor_char_pointer() -> void;
  auto test_constructor_const_stringz() -> void;
  auto test_constructor_const_stringn() -> void;
  auto test_constructor_string() -> void;
  auto test_constructor_string_view() -> void = delete; // there is no terminating '\0' 

  static auto suite() -> cppunit::Test *;
private:
  template<typename ORIGINAL> auto show_construction(ORIGINAL) -> void;
};
#endiv
#divert <tpp>
#import std.string_literals
template<typename ORIGINAL> auto tests::unit::shortish::Specification::show_construction(ORIGINAL specimen) -> void {
  using namespace std::string_literals;
  Subject subject(specimen);
  auto const expected = "constructed"s;
  auto const actual = std::string(subject.data());
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
#endiv
#divert <cpp>

auto tests::unit::shortish::Specification::test_constructor_default() -> void {
  Subject subject;
  // Whee! it constructed
  CPPUNIT_ASSERT(subject.empty());
}

auto tests::unit::shortish::Specification::test_constructor_literal() -> void {
  show_construction("constructed");
}

auto tests::unit::shortish::Specification::test_constructor_char_pointer() -> void {
  char buf[] = "constructed";
  char *muting = &buf[0];
  show_construction(muting);
  char const *const consty = muting;
  show_construction(consty);
}

#import c.stringz
#import c.const_stringz
auto tests::unit::shortish::Specification::test_constructor_const_stringz() -> void {
  char buf[] = "constructed";
  c::stringz muting = &buf[0];
  show_construction(muting);
  c::const_stringz const consty = muting;
  show_construction(consty);
}

#import c.stringn
#import c.const_stringn
auto tests::unit::shortish::Specification::test_constructor_const_stringn() -> void {
  char buf[] = "constructed";
  c::stringn muting(buf);
  show_construction(muting);
  c::const_stringn const consty(muting);
  show_construction(consty);
}

#import std.string
auto tests::unit::shortish::Specification::test_constructor_string() -> void {
  std::string const specimen = "constructed";
  show_construction(specimen);
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
#import unit.rigging.suite.add
auto tests::unit::shortish::Specification::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("Specification");
  {
    Stream con("constructor");
    con << call("default", &Specification::test_constructor_default)
        << call("char_pointer", &Specification::test_constructor_char_pointer)
        << call("const_stringz", &Specification::test_constructor_const_stringz)
        << call("const_stringn", &Specification::test_constructor_const_stringn)
        << call("string", &Specification::test_constructor_string)
      ;
    s << add(std::move(con));
  }
  return finalize(s);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::indicator {
  class Code;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import options.indicator.Code
class tests::unit::indicator::Code : public cppunit::test::Fixture {
  using Ancestor = cppunit::test::Fixture;
public:
  using Subject = ::options::indicator::Code;

  auto test_pred() -> void;
  auto test_succ() -> void;
  auto test_end() -> void;
  auto test_erroneous() -> void;
  auto test_switch_part1() -> void;
  auto test_switch_part2_without_default() -> void;
  auto test_switch_part2_with_default() -> void;
  auto test_char_conversion() -> void;
  auto test_integer_conversion() -> void;
  auto test_char_conversion_literal() -> void;
  auto test_integer_conversion_literal() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.numeric_limits
auto tests::unit::indicator::Code::test_pred() -> void {
  for (int i(std::numeric_limits<char>::min()), e(std::numeric_limits<char>::max()+1); e != i; ++i) {
    int i0{i}, i1{-1+i};
    auto const here = Subject(i0);
    Subject const actual{pred(here)}; // <------------ test this
    Subject const expected{[](int was, int candidate) {
        constexpr auto MINIMUM = std::numeric_limits<char>::min();
        constexpr auto MAXIMUM = std::numeric_limits<char>::max();
        if (MINIMUM == was) {
          // it rolled under
          return Subject{MAXIMUM};
        } else {
          // what you'd expect
          return Subject(candidate);
        }
      }(i0, i1)};
    CPPUNIT_ASSERT_EQUAL(expected, actual);
    CPPUNIT_ASSERT(expected == actual);
  }
}
auto tests::unit::indicator::Code::test_succ() -> void {
  for (int i(std::numeric_limits<char>::min()), e(std::numeric_limits<char>::max()+1); e != i; ++i) {
    int i0{i}, i1{+1+i};
    auto const here = Subject(i0);
    Subject const actual{succ(here)}; // <------------ test this
    Subject const expected{[](int was, int candidate) {
        constexpr auto MINIMUM = std::numeric_limits<char>::min();
        constexpr auto MAXIMUM = std::numeric_limits<char>::max();
        if (MAXIMUM == was) {
          // it rolled over
          return Subject{MINIMUM};
        } else {
          // what you'd expect
          return Subject(candidate);
        }
      }(i0, i1)};
    std::cerr << "i0=" << i0 << " i1=" << i1 << " expected=" << (int) expected << " actual=" << (int) actual << '\n';
    CPPUNIT_ASSERT_EQUAL(expected, actual);
    CPPUNIT_ASSERT(expected == actual);
  }
}
auto tests::unit::indicator::Code::test_end() -> void {
  CPPUNIT_ASSERT(end(Subject::END));
  for (int i(std::numeric_limits<char>::min()), e(std::numeric_limits<char>::max()+1); e != i; ++i) {
    Subject code = Subject(i);
    // with -1 being mentioned in getopt(3)
    bool estimate_end = (-1 == i);
    CPPUNIT_ASSERT(estimate_end == end(code));
  }
}

auto tests::unit::indicator::Code::test_erroneous() -> void {
  CPPUNIT_ASSERT(erroneous(Subject::UNKNOWN));
  CPPUNIT_ASSERT(erroneous(Subject::MISSING));
  for (int i(std::numeric_limits<char>::min()), e(std::numeric_limits<char>::max()+1); e != i; ++i) {
    Subject code = Subject(i);
    // with '?' and ':' being mentioned in getopt(3)
    bool estimate_is_unknown = ((int)(Subject::UNKNOWN) == i);
    bool estimate_is_missing = ((int)(Subject::MISSING) == i);
    bool estimate_is_error = estimate_is_unknown || estimate_is_missing;
    CPPUNIT_ASSERT(estimate_is_error == erroneous(code));
  }
}

auto tests::unit::indicator::Code::test_switch_part1() -> void {
  using ::options::indicator::Code;
  for (int i(std::numeric_limits<char>::min()), e(std::numeric_limits<char>::max()+1); e != i; ++i) {
    Code code = Code(i);
    switch (code) {
    case Subject::NUL:
    case Subject::END:
    case Subject::UNKNOWN:
    case Subject::MISSING:
    case Subject::POSITION:
    case Subject::HELP:
    case Subject::CHR_a:
    case Subject::CHR_b:
    case Subject::CHR_c:
    case Subject::CHR_d:
    case Subject::CHR_e:
    case Subject::CHR_f:
    case Subject::CHR_g:
    case Subject::CHR_h:
    case Subject::CHR_i:
    case Subject::CHR_j:
    case Subject::CHR_k:
    case Subject::CHR_l:
    case Subject::CHR_m:
    case Subject::CHR_n:
    case Subject::CHR_o:
    case Subject::CHR_p:
    case Subject::CHR_q:
    case Subject::CHR_r:
    case Subject::CHR_s:
    case Subject::CHR_t:
    case Subject::CHR_u:
    case Subject::CHR_v:
    case Subject::CHR_w:
    case Subject::CHR_x:
    case Subject::CHR_y:
    case Subject::CHR_z:
    case Subject::CHR_A:
    case Subject::CHR_B:
    case Subject::CHR_C:
    case Subject::CHR_D:
    case Subject::CHR_E:
    case Subject::CHR_F:
    case Subject::CHR_G:
    case Subject::CHR_H:
    case Subject::CHR_I:
    case Subject::CHR_J:
    case Subject::CHR_K:
    case Subject::CHR_L:
    case Subject::CHR_M:
    case Subject::CHR_N:
    case Subject::CHR_O:
    case Subject::CHR_P:
    case Subject::CHR_Q:
    case Subject::CHR_R:
    case Subject::CHR_S:
    case Subject::CHR_T:
    case Subject::CHR_U:
    case Subject::CHR_V:
    case Subject::CHR_W:
    case Subject::CHR_X:
    case Subject::CHR_Y:
    case Subject::CHR_Z:
    case Subject::CHR_0:
    case Subject::CHR_1:
    case Subject::CHR_2:
    case Subject::CHR_3:
    case Subject::CHR_4:
    case Subject::CHR_5:
    case Subject::CHR_6:
    case Subject::CHR_7:
    case Subject::CHR_8:
    case Subject::CHR_9:
      // yup it works.
      CPPUNIT_ASSERT(true);
      break;
    default:
      // Sure ... these are okay too
      // We are, after all, iterating through the character space low-to-high
      CPPUNIT_ASSERT(true);
      break;
    }
  }
}

auto tests::unit::indicator::Code::test_switch_part2_without_default() -> void {
  for (int i(std::numeric_limits<char>::min()), e(std::numeric_limits<char>::max()+1); e != i; ++i) {
    Subject code = Subject(i);
    switch (code) {
    case Subject::CODE_0:
    case Subject::CODE_1:
    case Subject::CODE_2:
    case Subject::CODE_3:
    case Subject::CODE_4:
    case Subject::CODE_5:
    case Subject::CODE_6:
    case Subject::CODE_7:
    case Subject::CODE_8:
    case Subject::CODE_9:
    case Subject::CODE_10:
    case Subject::CODE_11:
    case Subject::CODE_12:
    case Subject::CODE_13:
    case Subject::CODE_14:
    case Subject::CODE_15:
    case Subject::CODE_16:
    case Subject::CODE_17:
    case Subject::CODE_18:
    case Subject::CODE_19:
    case Subject::CODE_20:
    case Subject::CODE_21:
    case Subject::CODE_22:
    case Subject::CODE_23:
    case Subject::CODE_24:
    case Subject::CODE_25:
    case Subject::CODE_26:
    case Subject::CODE_27:
    case Subject::CODE_28:
    case Subject::CODE_29:
    case Subject::CODE_30:
    case Subject::CODE_31:
    case Subject::CODE_32:
    case Subject::CODE_33:
    case Subject::CODE_34:
    case Subject::CODE_35:
    case Subject::CODE_36:
    case Subject::CODE_37:
    case Subject::CODE_38:
    case Subject::CODE_39:
    case Subject::CODE_40:
    case Subject::CODE_41:
    case Subject::CODE_42:
    case Subject::CODE_43:
    case Subject::CODE_44:
    case Subject::CODE_45:
    case Subject::CODE_46:
    case Subject::CODE_47:
    case Subject::CODE_48:
    case Subject::CODE_49:
    case Subject::CODE_50:
    case Subject::CODE_51:
    case Subject::CODE_52:
    case Subject::CODE_53:
    case Subject::CODE_54:
    case Subject::CODE_55:
    case Subject::CODE_56:
    case Subject::CODE_57:
    case Subject::CODE_58:
    case Subject::CODE_59:
    case Subject::CODE_60:
    case Subject::CODE_61:
    case Subject::CODE_62:
    case Subject::CODE_63:
    case Subject::CODE_64:
    case Subject::CODE_65:
    case Subject::CODE_66:
    case Subject::CODE_67:
    case Subject::CODE_68:
    case Subject::CODE_69:
    case Subject::CODE_70:
    case Subject::CODE_71:
    case Subject::CODE_72:
    case Subject::CODE_73:
    case Subject::CODE_74:
    case Subject::CODE_75:
    case Subject::CODE_76:
    case Subject::CODE_77:
    case Subject::CODE_78:
    case Subject::CODE_79:
    case Subject::CODE_80:
    case Subject::CODE_81:
    case Subject::CODE_82:
    case Subject::CODE_83:
    case Subject::CODE_84:
    case Subject::CODE_85:
    case Subject::CODE_86:
    case Subject::CODE_87:
    case Subject::CODE_88:
    case Subject::CODE_89:
    case Subject::CODE_90:
    case Subject::CODE_91:
    case Subject::CODE_92:
    case Subject::CODE_93:
    case Subject::CODE_94:
    case Subject::CODE_95:
    case Subject::CODE_96:
    case Subject::CODE_97:
    case Subject::CODE_98:
    case Subject::CODE_99:
    case Subject::CODE_100:
    case Subject::CODE_101:
    case Subject::CODE_102:
    case Subject::CODE_103:
    case Subject::CODE_104:
    case Subject::CODE_105:
    case Subject::CODE_106:
    case Subject::CODE_107:
    case Subject::CODE_108:
    case Subject::CODE_109:
    case Subject::CODE_110:
    case Subject::CODE_111:
    case Subject::CODE_112:
    case Subject::CODE_113:
    case Subject::CODE_114:
    case Subject::CODE_115:
    case Subject::CODE_116:
    case Subject::CODE_117:
    case Subject::CODE_118:
    case Subject::CODE_119:
    case Subject::CODE_120:
    case Subject::CODE_121:
    case Subject::CODE_122:
    case Subject::CODE_123:
    case Subject::CODE_124:
    case Subject::CODE_125:
    case Subject::CODE_126:
    case Subject::CODE_127:
    case Subject::CODE_128:
    case Subject::CODE_129:
    case Subject::CODE_130:
    case Subject::CODE_131:
    case Subject::CODE_132:
    case Subject::CODE_133:
    case Subject::CODE_134:
    case Subject::CODE_135:
    case Subject::CODE_136:
    case Subject::CODE_137:
    case Subject::CODE_138:
    case Subject::CODE_139:
    case Subject::CODE_140:
    case Subject::CODE_141:
    case Subject::CODE_142:
    case Subject::CODE_143:
    case Subject::CODE_144:
    case Subject::CODE_145:
    case Subject::CODE_146:
    case Subject::CODE_147:
    case Subject::CODE_148:
    case Subject::CODE_149:
    case Subject::CODE_150:
    case Subject::CODE_151:
    case Subject::CODE_152:
    case Subject::CODE_153:
    case Subject::CODE_154:
    case Subject::CODE_155:
    case Subject::CODE_156:
    case Subject::CODE_157:
    case Subject::CODE_158:
    case Subject::CODE_159:
    case Subject::CODE_160:
    case Subject::CODE_161:
    case Subject::CODE_162:
    case Subject::CODE_163:
    case Subject::CODE_164:
    case Subject::CODE_165:
    case Subject::CODE_166:
    case Subject::CODE_167:
    case Subject::CODE_168:
    case Subject::CODE_169:
    case Subject::CODE_170:
    case Subject::CODE_171:
    case Subject::CODE_172:
    case Subject::CODE_173:
    case Subject::CODE_174:
    case Subject::CODE_175:
    case Subject::CODE_176:
    case Subject::CODE_177:
    case Subject::CODE_178:
    case Subject::CODE_179:
    case Subject::CODE_180:
    case Subject::CODE_181:
    case Subject::CODE_182:
    case Subject::CODE_183:
    case Subject::CODE_184:
    case Subject::CODE_185:
    case Subject::CODE_186:
    case Subject::CODE_187:
    case Subject::CODE_188:
    case Subject::CODE_189:
    case Subject::CODE_190:
    case Subject::CODE_191:
    case Subject::CODE_192:
    case Subject::CODE_193:
    case Subject::CODE_194:
    case Subject::CODE_195:
    case Subject::CODE_196:
    case Subject::CODE_197:
    case Subject::CODE_198:
    case Subject::CODE_199:
    case Subject::CODE_200:
    case Subject::CODE_201:
    case Subject::CODE_202:
    case Subject::CODE_203:
    case Subject::CODE_204:
    case Subject::CODE_205:
    case Subject::CODE_206:
    case Subject::CODE_207:
    case Subject::CODE_208:
    case Subject::CODE_209:
    case Subject::CODE_210:
    case Subject::CODE_211:
    case Subject::CODE_212:
    case Subject::CODE_213:
    case Subject::CODE_214:
    case Subject::CODE_215:
    case Subject::CODE_216:
    case Subject::CODE_217:
    case Subject::CODE_218:
    case Subject::CODE_219:
    case Subject::CODE_220:
    case Subject::CODE_221:
    case Subject::CODE_222:
    case Subject::CODE_223:
    case Subject::CODE_224:
    case Subject::CODE_225:
    case Subject::CODE_226:
    case Subject::CODE_227:
    case Subject::CODE_228:
    case Subject::CODE_229:
    case Subject::CODE_230:
    case Subject::CODE_231:
    case Subject::CODE_232:
    case Subject::CODE_233:
    case Subject::CODE_234:
    case Subject::CODE_235:
    case Subject::CODE_236:
    case Subject::CODE_237:
    case Subject::CODE_238:
    case Subject::CODE_239:
    case Subject::CODE_240:
    case Subject::CODE_241:
    case Subject::CODE_242:
    case Subject::CODE_243:
    case Subject::CODE_244:
    case Subject::CODE_245:
    case Subject::CODE_246:
    case Subject::CODE_247:
    case Subject::CODE_248:
    case Subject::CODE_249:
    case Subject::CODE_250:
    case Subject::CODE_251:
    case Subject::CODE_252:
    case Subject::CODE_253:
    case Subject::CODE_254:
    case Subject::CODE_255:
      CPPUNIT_ASSERT(true);
      break;
      // NO default: CLAUSE as the coverage is supposed to be complete
    }
  }
}

auto tests::unit::indicator::Code::test_switch_part2_with_default() -> void {
  for (int i(std::numeric_limits<char>::min()), e(std::numeric_limits<char>::max()+1); e != i; ++i) {
    Subject code = Subject(i);
    switch (code) {
    case Subject::CODE_0:
    case Subject::CODE_1:
    case Subject::CODE_2:
    case Subject::CODE_3:
    case Subject::CODE_4:
    case Subject::CODE_5:
    case Subject::CODE_6:
    case Subject::CODE_7:
    case Subject::CODE_8:
    case Subject::CODE_9:
    case Subject::CODE_10:
    case Subject::CODE_11:
    case Subject::CODE_12:
    case Subject::CODE_13:
    case Subject::CODE_14:
    case Subject::CODE_15:
    case Subject::CODE_16:
    case Subject::CODE_17:
    case Subject::CODE_18:
    case Subject::CODE_19:
    case Subject::CODE_20:
    case Subject::CODE_21:
    case Subject::CODE_22:
    case Subject::CODE_23:
    case Subject::CODE_24:
    case Subject::CODE_25:
    case Subject::CODE_26:
    case Subject::CODE_27:
    case Subject::CODE_28:
    case Subject::CODE_29:
    case Subject::CODE_30:
    case Subject::CODE_31:
    case Subject::CODE_32:
    case Subject::CODE_33:
    case Subject::CODE_34:
    case Subject::CODE_35:
    case Subject::CODE_36:
    case Subject::CODE_37:
    case Subject::CODE_38:
    case Subject::CODE_39:
    case Subject::CODE_40:
    case Subject::CODE_41:
    case Subject::CODE_42:
    case Subject::CODE_43:
    case Subject::CODE_44:
    case Subject::CODE_45:
    case Subject::CODE_46:
    case Subject::CODE_47:
    case Subject::CODE_48:
    case Subject::CODE_49:
    case Subject::CODE_50:
    case Subject::CODE_51:
    case Subject::CODE_52:
    case Subject::CODE_53:
    case Subject::CODE_54:
    case Subject::CODE_55:
    case Subject::CODE_56:
    case Subject::CODE_57:
    case Subject::CODE_58:
    case Subject::CODE_59:
    case Subject::CODE_60:
    case Subject::CODE_61:
    case Subject::CODE_62:
    case Subject::CODE_63:
    case Subject::CODE_64:
    case Subject::CODE_65:
    case Subject::CODE_66:
    case Subject::CODE_67:
    case Subject::CODE_68:
    case Subject::CODE_69:
    case Subject::CODE_70:
    case Subject::CODE_71:
    case Subject::CODE_72:
    case Subject::CODE_73:
    case Subject::CODE_74:
    case Subject::CODE_75:
    case Subject::CODE_76:
    case Subject::CODE_77:
    case Subject::CODE_78:
    case Subject::CODE_79:
    case Subject::CODE_80:
    case Subject::CODE_81:
    case Subject::CODE_82:
    case Subject::CODE_83:
    case Subject::CODE_84:
    case Subject::CODE_85:
    case Subject::CODE_86:
    case Subject::CODE_87:
    case Subject::CODE_88:
    case Subject::CODE_89:
    case Subject::CODE_90:
    case Subject::CODE_91:
    case Subject::CODE_92:
    case Subject::CODE_93:
    case Subject::CODE_94:
    case Subject::CODE_95:
    case Subject::CODE_96:
    case Subject::CODE_97:
    case Subject::CODE_98:
    case Subject::CODE_99:
    case Subject::CODE_100:
    case Subject::CODE_101:
    case Subject::CODE_102:
    case Subject::CODE_103:
    case Subject::CODE_104:
    case Subject::CODE_105:
    case Subject::CODE_106:
    case Subject::CODE_107:
    case Subject::CODE_108:
    case Subject::CODE_109:
    case Subject::CODE_110:
    case Subject::CODE_111:
    case Subject::CODE_112:
    case Subject::CODE_113:
    case Subject::CODE_114:
    case Subject::CODE_115:
    case Subject::CODE_116:
    case Subject::CODE_117:
    case Subject::CODE_118:
    case Subject::CODE_119:
    case Subject::CODE_120:
    case Subject::CODE_121:
    case Subject::CODE_122:
    case Subject::CODE_123:
    case Subject::CODE_124:
    case Subject::CODE_125:
    case Subject::CODE_126:
    case Subject::CODE_127:
    case Subject::CODE_128:
    case Subject::CODE_129:
    case Subject::CODE_130:
    case Subject::CODE_131:
    case Subject::CODE_132:
    case Subject::CODE_133:
    case Subject::CODE_134:
    case Subject::CODE_135:
    case Subject::CODE_136:
    case Subject::CODE_137:
    case Subject::CODE_138:
    case Subject::CODE_139:
    case Subject::CODE_140:
    case Subject::CODE_141:
    case Subject::CODE_142:
    case Subject::CODE_143:
    case Subject::CODE_144:
    case Subject::CODE_145:
    case Subject::CODE_146:
    case Subject::CODE_147:
    case Subject::CODE_148:
    case Subject::CODE_149:
    case Subject::CODE_150:
    case Subject::CODE_151:
    case Subject::CODE_152:
    case Subject::CODE_153:
    case Subject::CODE_154:
    case Subject::CODE_155:
    case Subject::CODE_156:
    case Subject::CODE_157:
    case Subject::CODE_158:
    case Subject::CODE_159:
    case Subject::CODE_160:
    case Subject::CODE_161:
    case Subject::CODE_162:
    case Subject::CODE_163:
    case Subject::CODE_164:
    case Subject::CODE_165:
    case Subject::CODE_166:
    case Subject::CODE_167:
    case Subject::CODE_168:
    case Subject::CODE_169:
    case Subject::CODE_170:
    case Subject::CODE_171:
    case Subject::CODE_172:
    case Subject::CODE_173:
    case Subject::CODE_174:
    case Subject::CODE_175:
    case Subject::CODE_176:
    case Subject::CODE_177:
    case Subject::CODE_178:
    case Subject::CODE_179:
    case Subject::CODE_180:
    case Subject::CODE_181:
    case Subject::CODE_182:
    case Subject::CODE_183:
    case Subject::CODE_184:
    case Subject::CODE_185:
    case Subject::CODE_186:
    case Subject::CODE_187:
    case Subject::CODE_188:
    case Subject::CODE_189:
    case Subject::CODE_190:
    case Subject::CODE_191:
    case Subject::CODE_192:
    case Subject::CODE_193:
    case Subject::CODE_194:
    case Subject::CODE_195:
    case Subject::CODE_196:
    case Subject::CODE_197:
    case Subject::CODE_198:
    case Subject::CODE_199:
    case Subject::CODE_200:
    case Subject::CODE_201:
    case Subject::CODE_202:
    case Subject::CODE_203:
    case Subject::CODE_204:
    case Subject::CODE_205:
    case Subject::CODE_206:
    case Subject::CODE_207:
    case Subject::CODE_208:
    case Subject::CODE_209:
    case Subject::CODE_210:
    case Subject::CODE_211:
    case Subject::CODE_212:
    case Subject::CODE_213:
    case Subject::CODE_214:
    case Subject::CODE_215:
    case Subject::CODE_216:
    case Subject::CODE_217:
    case Subject::CODE_218:
    case Subject::CODE_219:
    case Subject::CODE_220:
    case Subject::CODE_221:
    case Subject::CODE_222:
    case Subject::CODE_223:
    case Subject::CODE_224:
    case Subject::CODE_225:
    case Subject::CODE_226:
    case Subject::CODE_227:
    case Subject::CODE_228:
    case Subject::CODE_229:
    case Subject::CODE_230:
    case Subject::CODE_231:
    case Subject::CODE_232:
    case Subject::CODE_233:
    case Subject::CODE_234:
    case Subject::CODE_235:
    case Subject::CODE_236:
    case Subject::CODE_237:
    case Subject::CODE_238:
    case Subject::CODE_239:
    case Subject::CODE_240:
    case Subject::CODE_241:
    case Subject::CODE_242:
    case Subject::CODE_243:
    case Subject::CODE_244:
    case Subject::CODE_245:
    case Subject::CODE_246:
    case Subject::CODE_247:
    case Subject::CODE_248:
    case Subject::CODE_249:
    case Subject::CODE_250:
    case Subject::CODE_251:
    case Subject::CODE_252:
    case Subject::CODE_253:
    case Subject::CODE_254:
    case Subject::CODE_255:
      CPPUNIT_ASSERT(true);
      break;
    default:
      // YES default: CLAUSE to see what happens
      // This should never happen
      CPPUNIT_ASSERT(false);
    }
  }
}

auto tests::unit::indicator::Code::test_char_conversion() -> void {
  Subject code = (Subject)'\n';
  CPPUNIT_ASSERT(10 == (int)(code));
}

auto tests::unit::indicator::Code::test_integer_conversion() -> void {
  Subject code = (Subject)64;
  CPPUNIT_ASSERT(64 == (int)(code));
}

auto tests::unit::indicator::Code::test_char_conversion_literal() -> void {
  // Show that the compiler will not vomit, warn, or even meekly admonish) on any character literals.
  Subject c;
  c = Subject((char)(0));
  c = Subject((char)(1));
  c = Subject((char)(2));
  c = Subject((char)(3));
  c = Subject((char)(4));
  c = Subject((char)(5));
  c = Subject((char)(6));
  c = Subject((char)(7));
  c = Subject((char)(8));
  c = Subject((char)(9));
  c = Subject((char)(10));
  c = Subject((char)(11));
  c = Subject((char)(12));
  c = Subject((char)(13));
  c = Subject((char)(14));
  c = Subject((char)(15));
  c = Subject((char)(16));
  c = Subject((char)(17));
  c = Subject((char)(18));
  c = Subject((char)(19));
  c = Subject((char)(20));
  c = Subject((char)(21));
  c = Subject((char)(22));
  c = Subject((char)(23));
  c = Subject((char)(24));
  c = Subject((char)(25));
  c = Subject((char)(26));
  c = Subject((char)(27));
  c = Subject((char)(28));
  c = Subject((char)(29));
  c = Subject((char)(30));
  c = Subject((char)(31));
  c = Subject((char)(32));
  c = Subject((char)(33));
  c = Subject((char)(34));
  c = Subject((char)(35));
  c = Subject((char)(36));
  c = Subject((char)(37));
  c = Subject((char)(38));
  c = Subject((char)(39));
  c = Subject((char)(40));
  c = Subject((char)(41));
  c = Subject((char)(42));
  c = Subject((char)(43));
  c = Subject((char)(44));
  c = Subject((char)(45));
  c = Subject((char)(46));
  c = Subject((char)(47));
  c = Subject((char)(48));
  c = Subject((char)(49));
  c = Subject((char)(50));
  c = Subject((char)(51));
  c = Subject((char)(52));
  c = Subject((char)(53));
  c = Subject((char)(54));
  c = Subject((char)(55));
  c = Subject((char)(56));
  c = Subject((char)(57));
  c = Subject((char)(58));
  c = Subject((char)(59));
  c = Subject((char)(60));
  c = Subject((char)(61));
  c = Subject((char)(62));
  c = Subject((char)(63));
  c = Subject((char)(64));
  c = Subject((char)(65));
  c = Subject((char)(66));
  c = Subject((char)(67));
  c = Subject((char)(68));
  c = Subject((char)(69));
  c = Subject((char)(70));
  c = Subject((char)(71));
  c = Subject((char)(72));
  c = Subject((char)(73));
  c = Subject((char)(74));
  c = Subject((char)(75));
  c = Subject((char)(76));
  c = Subject((char)(77));
  c = Subject((char)(78));
  c = Subject((char)(79));
  c = Subject((char)(80));
  c = Subject((char)(81));
  c = Subject((char)(82));
  c = Subject((char)(83));
  c = Subject((char)(84));
  c = Subject((char)(85));
  c = Subject((char)(86));
  c = Subject((char)(87));
  c = Subject((char)(88));
  c = Subject((char)(89));
  c = Subject((char)(90));
  c = Subject((char)(91));
  c = Subject((char)(92));
  c = Subject((char)(93));
  c = Subject((char)(94));
  c = Subject((char)(95));
  c = Subject((char)(96));
  c = Subject((char)(97));
  c = Subject((char)(98));
  c = Subject((char)(99));
  c = Subject((char)(100));
  c = Subject((char)(101));
  c = Subject((char)(102));
  c = Subject((char)(103));
  c = Subject((char)(104));
  c = Subject((char)(105));
  c = Subject((char)(106));
  c = Subject((char)(107));
  c = Subject((char)(108));
  c = Subject((char)(109));
  c = Subject((char)(110));
  c = Subject((char)(111));
  c = Subject((char)(112));
  c = Subject((char)(113));
  c = Subject((char)(114));
  c = Subject((char)(115));
  c = Subject((char)(116));
  c = Subject((char)(117));
  c = Subject((char)(118));
  c = Subject((char)(119));
  c = Subject((char)(120));
  c = Subject((char)(121));
  c = Subject((char)(122));
  c = Subject((char)(123));
  c = Subject((char)(124));
  c = Subject((char)(125));
  c = Subject((char)(126));
  c = Subject((char)(127));
  c = Subject((char)(128));
  c = Subject((char)(129));
  c = Subject((char)(130));
  c = Subject((char)(131));
  c = Subject((char)(132));
  c = Subject((char)(133));
  c = Subject((char)(134));
  c = Subject((char)(135));
  c = Subject((char)(136));
  c = Subject((char)(137));
  c = Subject((char)(138));
  c = Subject((char)(139));
  c = Subject((char)(140));
  c = Subject((char)(141));
  c = Subject((char)(142));
  c = Subject((char)(143));
  c = Subject((char)(144));
  c = Subject((char)(145));
  c = Subject((char)(146));
  c = Subject((char)(147));
  c = Subject((char)(148));
  c = Subject((char)(149));
  c = Subject((char)(150));
  c = Subject((char)(151));
  c = Subject((char)(152));
  c = Subject((char)(153));
  c = Subject((char)(154));
  c = Subject((char)(155));
  c = Subject((char)(156));
  c = Subject((char)(157));
  c = Subject((char)(158));
  c = Subject((char)(159));
  c = Subject((char)(160));
  c = Subject((char)(161));
  c = Subject((char)(162));
  c = Subject((char)(163));
  c = Subject((char)(164));
  c = Subject((char)(165));
  c = Subject((char)(166));
  c = Subject((char)(167));
  c = Subject((char)(168));
  c = Subject((char)(169));
  c = Subject((char)(170));
  c = Subject((char)(171));
  c = Subject((char)(172));
  c = Subject((char)(173));
  c = Subject((char)(174));
  c = Subject((char)(175));
  c = Subject((char)(176));
  c = Subject((char)(177));
  c = Subject((char)(178));
  c = Subject((char)(179));
  c = Subject((char)(180));
  c = Subject((char)(181));
  c = Subject((char)(182));
  c = Subject((char)(183));
  c = Subject((char)(184));
  c = Subject((char)(185));
  c = Subject((char)(186));
  c = Subject((char)(187));
  c = Subject((char)(188));
  c = Subject((char)(189));
  c = Subject((char)(190));
  c = Subject((char)(191));
  c = Subject((char)(192));
  c = Subject((char)(193));
  c = Subject((char)(194));
  c = Subject((char)(195));
  c = Subject((char)(196));
  c = Subject((char)(197));
  c = Subject((char)(198));
  c = Subject((char)(199));
  c = Subject((char)(200));
  c = Subject((char)(201));
  c = Subject((char)(202));
  c = Subject((char)(203));
  c = Subject((char)(204));
  c = Subject((char)(205));
  c = Subject((char)(206));
  c = Subject((char)(207));
  c = Subject((char)(208));
  c = Subject((char)(209));
  c = Subject((char)(210));
  c = Subject((char)(211));
  c = Subject((char)(212));
  c = Subject((char)(213));
  c = Subject((char)(214));
  c = Subject((char)(215));
  c = Subject((char)(216));
  c = Subject((char)(217));
  c = Subject((char)(218));
  c = Subject((char)(219));
  c = Subject((char)(220));
  c = Subject((char)(221));
  c = Subject((char)(222));
  c = Subject((char)(223));
  c = Subject((char)(224));
  c = Subject((char)(225));
  c = Subject((char)(226));
  c = Subject((char)(227));
  c = Subject((char)(228));
  c = Subject((char)(229));
  c = Subject((char)(230));
  c = Subject((char)(231));
  c = Subject((char)(232));
  c = Subject((char)(233));
  c = Subject((char)(234));
  c = Subject((char)(235));
  c = Subject((char)(236));
  c = Subject((char)(237));
  c = Subject((char)(238));
  c = Subject((char)(239));
  c = Subject((char)(240));
  c = Subject((char)(241));
  c = Subject((char)(242));
  c = Subject((char)(243));
  c = Subject((char)(244));
  c = Subject((char)(245));
  c = Subject((char)(246));
  c = Subject((char)(247));
  c = Subject((char)(248));
  c = Subject((char)(249));
  c = Subject((char)(250));
  c = Subject((char)(251));
  c = Subject((char)(252));
  c = Subject((char)(253));
  c = Subject((char)(254));
  c = Subject((char)(255));
  Subject d = Subject(255);
  CPPUNIT_ASSERT(d == c);
}

auto tests::unit::indicator::Code::test_integer_conversion_literal() -> void {
  // Show that the compiler will not vomit, warn, or even meekly admonish) on any small integer literals.
  Subject c;
  c = Subject(0);
  c = Subject(1);
  c = Subject(2);
  c = Subject(3);
  c = Subject(4);
  c = Subject(5);
  c = Subject(6);
  c = Subject(7);
  c = Subject(8);
  c = Subject(9);
  c = Subject(10);
  c = Subject(11);
  c = Subject(12);
  c = Subject(13);
  c = Subject(14);
  c = Subject(15);
  c = Subject(16);
  c = Subject(17);
  c = Subject(18);
  c = Subject(19);
  c = Subject(20);
  c = Subject(21);
  c = Subject(22);
  c = Subject(23);
  c = Subject(24);
  c = Subject(25);
  c = Subject(26);
  c = Subject(27);
  c = Subject(28);
  c = Subject(29);
  c = Subject(30);
  c = Subject(31);
  c = Subject(32);
  c = Subject(33);
  c = Subject(34);
  c = Subject(35);
  c = Subject(36);
  c = Subject(37);
  c = Subject(38);
  c = Subject(39);
  c = Subject(40);
  c = Subject(41);
  c = Subject(42);
  c = Subject(43);
  c = Subject(44);
  c = Subject(45);
  c = Subject(46);
  c = Subject(47);
  c = Subject(48);
  c = Subject(49);
  c = Subject(50);
  c = Subject(51);
  c = Subject(52);
  c = Subject(53);
  c = Subject(54);
  c = Subject(55);
  c = Subject(56);
  c = Subject(57);
  c = Subject(58);
  c = Subject(59);
  c = Subject(60);
  c = Subject(61);
  c = Subject(62);
  c = Subject(63);
  c = Subject(64);
  c = Subject(65);
  c = Subject(66);
  c = Subject(67);
  c = Subject(68);
  c = Subject(69);
  c = Subject(70);
  c = Subject(71);
  c = Subject(72);
  c = Subject(73);
  c = Subject(74);
  c = Subject(75);
  c = Subject(76);
  c = Subject(77);
  c = Subject(78);
  c = Subject(79);
  c = Subject(80);
  c = Subject(81);
  c = Subject(82);
  c = Subject(83);
  c = Subject(84);
  c = Subject(85);
  c = Subject(86);
  c = Subject(87);
  c = Subject(88);
  c = Subject(89);
  c = Subject(90);
  c = Subject(91);
  c = Subject(92);
  c = Subject(93);
  c = Subject(94);
  c = Subject(95);
  c = Subject(96);
  c = Subject(97);
  c = Subject(98);
  c = Subject(99);
  c = Subject(100);
  c = Subject(101);
  c = Subject(102);
  c = Subject(103);
  c = Subject(104);
  c = Subject(105);
  c = Subject(106);
  c = Subject(107);
  c = Subject(108);
  c = Subject(109);
  c = Subject(110);
  c = Subject(111);
  c = Subject(112);
  c = Subject(113);
  c = Subject(114);
  c = Subject(115);
  c = Subject(116);
  c = Subject(117);
  c = Subject(118);
  c = Subject(119);
  c = Subject(120);
  c = Subject(121);
  c = Subject(122);
  c = Subject(123);
  c = Subject(124);
  c = Subject(125);
  c = Subject(126);
  c = Subject(127);
  c = Subject(128);
  c = Subject(129);
  c = Subject(130);
  c = Subject(131);
  c = Subject(132);
  c = Subject(133);
  c = Subject(134);
  c = Subject(135);
  c = Subject(136);
  c = Subject(137);
  c = Subject(138);
  c = Subject(139);
  c = Subject(140);
  c = Subject(141);
  c = Subject(142);
  c = Subject(143);
  c = Subject(144);
  c = Subject(145);
  c = Subject(146);
  c = Subject(147);
  c = Subject(148);
  c = Subject(149);
  c = Subject(150);
  c = Subject(151);
  c = Subject(152);
  c = Subject(153);
  c = Subject(154);
  c = Subject(155);
  c = Subject(156);
  c = Subject(157);
  c = Subject(158);
  c = Subject(159);
  c = Subject(160);
  c = Subject(161);
  c = Subject(162);
  c = Subject(163);
  c = Subject(164);
  c = Subject(165);
  c = Subject(166);
  c = Subject(167);
  c = Subject(168);
  c = Subject(169);
  c = Subject(170);
  c = Subject(171);
  c = Subject(172);
  c = Subject(173);
  c = Subject(174);
  c = Subject(175);
  c = Subject(176);
  c = Subject(177);
  c = Subject(178);
  c = Subject(179);
  c = Subject(180);
  c = Subject(181);
  c = Subject(182);
  c = Subject(183);
  c = Subject(184);
  c = Subject(185);
  c = Subject(186);
  c = Subject(187);
  c = Subject(188);
  c = Subject(189);
  c = Subject(190);
  c = Subject(191);
  c = Subject(192);
  c = Subject(193);
  c = Subject(194);
  c = Subject(195);
  c = Subject(196);
  c = Subject(197);
  c = Subject(198);
  c = Subject(199);
  c = Subject(200);
  c = Subject(201);
  c = Subject(202);
  c = Subject(203);
  c = Subject(204);
  c = Subject(205);
  c = Subject(206);
  c = Subject(207);
  c = Subject(208);
  c = Subject(209);
  c = Subject(210);
  c = Subject(211);
  c = Subject(212);
  c = Subject(213);
  c = Subject(214);
  c = Subject(215);
  c = Subject(216);
  c = Subject(217);
  c = Subject(218);
  c = Subject(219);
  c = Subject(220);
  c = Subject(221);
  c = Subject(222);
  c = Subject(223);
  c = Subject(224);
  c = Subject(225);
  c = Subject(226);
  c = Subject(227);
  c = Subject(228);
  c = Subject(229);
  c = Subject(230);
  c = Subject(231);
  c = Subject(232);
  c = Subject(233);
  c = Subject(234);
  c = Subject(235);
  c = Subject(236);
  c = Subject(237);
  c = Subject(238);
  c = Subject(239);
  c = Subject(240);
  c = Subject(241);
  c = Subject(242);
  c = Subject(243);
  c = Subject(244);
  c = Subject(245);
  c = Subject(246);
  c = Subject(247);
  c = Subject(248);
  c = Subject(249);
  c = Subject(250);
  c = Subject(251);
  c = Subject(252);
  c = Subject(253);
  c = Subject(254);
  c = Subject(255);
  Subject d = Subject((char)(255));
  CPPUNIT_ASSERT(d == c);
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::indicator::Code::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("Code");
  s << call("pred", &Code::test_pred)
    << call("succ", &Code::test_succ)
    << call("end", &Code::test_end)
    << call("erroneous", &Code::test_erroneous)
    << call("switch.1", &Code::test_switch_part1)
    << call("switch.2.with-default", &Code::test_switch_part2_with_default)
    << call("switch.2.without-default", &Code::test_switch_part2_without_default)
    << call("char_conversion", &Code::test_char_conversion)
    ;
  {
    Stream con("conversion");
    con << call("integer", &Code::test_integer_conversion);
    {
      Stream literal("literal");
      literal << call("char", &Code::test_char_conversion_literal)
              << call("integer", &Code::test_integer_conversion_literal);
      con << add(std::move(literal));
    }
    s << add(std::move(con));
  }
  return finalize(s);
}
#endiv

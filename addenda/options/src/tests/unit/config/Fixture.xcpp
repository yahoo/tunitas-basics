// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace config {
      class Fixture;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::config::Fixture : public cppunit::test::Fixture {
  using Ancestor = cppunit::test::Fixture;
public:
  auto test_constructor() -> void;
  auto test_NAME_field() -> void;
  auto test_standard_mode_fields() -> void;

  auto test_error() -> void;
  auto test_warning() -> void;
  auto test_notice() -> void;
  auto test_verbose() -> void;
  auto test_debug() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import tests.unit.config.Configuration
auto tests::unit::config::Fixture::test_constructor() -> void {
  options::Program prog("a.out");
  Configuration c(prog);
  // Why yes, it did construct.  Thank you.
  CPPUNIT_ASSERT(true);
}

auto tests::unit::config::Fixture::test_NAME_field() -> void {
  options::Program prog("b.out");
  Configuration c(prog);
  CPPUNIT_ASSERT_EQUAL(std::string("b.out"), (std::string const &)c.NAME);
}

auto tests::unit::config::Fixture::test_standard_mode_fields() -> void {
  options::Program prog("c.out");
  Configuration c(prog);
  // Show the POD got initialized to something reasonable; i.e. false.
  CPPUNIT_ASSERT_EQUAL(false, (bool) c.debug_mode);
  CPPUNIT_ASSERT_EQUAL(false, (bool) c.quiet_mode);
  CPPUNIT_ASSERT_EQUAL(false, (bool) c.verbose_mode);
  CPPUNIT_ASSERT_EQUAL(false, (bool) c.dry_run_mode);
}

#import options.logging
auto tests::unit::config::Fixture::test_error() -> void {
  options::Program prog("a.out");
  Configuration const cfg(prog);
  error(cfg) << "ERROR\n";
}

auto tests::unit::config::Fixture::test_warning() -> void {
  options::Program prog("a.out");
  Configuration cfg(prog);
  warning(cfg) << "WARNING\n";
  cfg.quiet_mode = true;
  Configuration const &ccfg(cfg); // <------------ const is part of the test
  warning(ccfg) << "YOU SHOULD NOT SEE THIS\n";
}

auto tests::unit::config::Fixture::test_notice() -> void {
  options::Program prog("a.out");
  Configuration cfg(prog);
  notice(cfg) << "NOTICE\n";
  cfg.quiet_mode = true;
  Configuration const &ccfg(cfg); // <------------ const is part of the test
  notice(ccfg) << "YOU SHOULD NOT SEE THIS\n";
}

auto tests::unit::config::Fixture::test_verbose() -> void {
  options::Program prog("a.out");
  Configuration cfg(prog); // 
  verbose(cfg) << "YOU SHOULD NOT SEE THIS\n"; 
  cfg.verbose_mode = true;
  Configuration const &ccfg(cfg); // <------------ const is part of the test
  verbose(ccfg) << "VERBOSE\n";
}

auto tests::unit::config::Fixture::test_debug() -> void {
  options::Program prog("a.out");
  Configuration cfg(prog);
  debug(cfg) << "YOU SHOULD NOT SEE THIS\n"; 
  cfg.debug_mode = true;
  Configuration const &ccfg(cfg); // <------------ const is part of the test
  debug(ccfg) << "VERBOSE\n";
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::config::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("config");
  s << call("constructor", &Fixture::test_constructor)
    << call("NAME", &Fixture::test_NAME_field)
    << call("standard-modes", &Fixture::test_standard_mode_fields)
    << call("error", &Fixture::test_error)
    << call("warning", &Fixture::test_warning)
    << call("notice", &Fixture::test_notice)
    << call("verbose", &Fixture::test_verbose)
    << call("debug", &Fixture::test_debug)
    ;
  return finalize(s);
}
#endiv

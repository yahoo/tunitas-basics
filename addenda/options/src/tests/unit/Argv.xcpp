// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    //
    // A vector of charactger pointers, with the last one being nullptr
    //
    // Just powerful enough to support the unit test cases herein.
    // Capture a 'char const *const []' array into a char*[] which can be modified in place
    //
    // Reminder Argv::size() includes the nullptr, because this is a tester
    //          c::argv::size() does NOT include the final nullptr, because that is its invariant
    class Argv;
  }
}
#endiv
#divert <hpp>
#import std.ostream
namespace tests {
  namespace unit {
    auto operator<<(std::ostream &, Argv const &) -> std::ostream &;
  }
}

#import c.const_argv
#import c.argv
#import std.initializer_list
#import std.vector
// import early so that the class can declare friends with ...
#import tests.unit.Argv.swap
#import tests.unit.rigging.unit.assignment.Lhs.Argv // the specialization Lhs<tests::unit::Argv>
class tests::unit::Argv : private std::vector<char *> {
  using Ancestor = std::vector<char *>;
public:
  Argv() = default;
  // The initializer should not include a final nullptr, one will be added for you
  template<std::size_t N> inline explicit Argv(char const *const (&initializer)[N]);
  inline Argv(std::size_t argc, char const *const argv[]);
  // the initializer_list should NOT include a final nullptr, one will be added for you.
  inline explicit Argv(std::initializer_list<char const *>);
  inline ~Argv();
  Argv(Argv const &) = delete;
  auto operator=(Argv const &) -> Argv & = delete;
  inline Argv(Argv &&);
  inline auto operator=(Argv &&) -> Argv &;
  // But also see extract<c::argv>(...) which elides the terminating nullptr sentinel at the end
  inline operator c::argv();
  inline operator c::const_argv();
  // Other basics
  inline auto clear() -> void;
  using Ancestor::value_type;
  using Ancestor::data;
  using Ancestor::size; // includes the final nullptr
  using Ancestor::empty;
  using Ancestor::iterator;
  using Ancestor::const_iterator;
  using Ancestor::begin;
  using Ancestor::end;
  using Ancestor::front;
  using Ancestor::back;
  using Ancestor::insert;
  using Ancestor::push_back;
protected:
  friend auto unit::operator<<(std::ostream &, Argv const &) -> std::ostream &;
  friend auto std::swap(Argv &, Argv &) -> void;
  friend class ::rigging::unit::assignment::Lhs<Argv>;
  // avoid cut & paste code for operator-cast()
  template<typename ARGV, typename ANCESTOR> static auto cast_as(ANCESTOR &base) -> ARGV;
};

#entail tests.unit.Argv.extract
#endiv
#divert <ipp>
#import std.begin
#import std.end
#import std.copy
#import tests.unit.back_duplicator
#include <cassert>

template<std::size_t N> tests::unit::Argv::Argv(char const *const (&initializer)[N])
  : Ancestor() {
  static_assert(0 != N, "illegal empty array");
  assert(nullptr == initializer[N-1]);
  auto destination = back_duplicator(static_cast<Ancestor &>(*this));
  std::copy(std::begin(initializer), std::end(initializer), destination);
  Ancestor::push_back(nullptr); // NOT destination = nullptr, which pushes an empty string, e.g. ""
  assert(nullptr == Ancestor::back());
}

tests::unit::Argv::Argv(std::size_t argc, char const *const argv[])
  : Ancestor() {
  assert(nullptr == argv[argc]);
  auto begin = &argv[0];
  auto end = &argv[argc];
  auto destination = back_duplicator(static_cast<Ancestor &>(*this));
  std::copy(begin, end, destination);
  Ancestor::push_back(nullptr); // NOT destination = nullptr, which pushes an empty string, e.g. ""
  assert(nullptr == Ancestor::back());
}

tests::unit::Argv::Argv(std::initializer_list<char const *> initializer)
  : Ancestor() {
  assert(0 != initializer.size());
  auto destination = back_duplicator(static_cast<Ancestor &>(*this));
  std::copy(std::begin(initializer), std::end(initializer), destination);
  Ancestor::push_back(nullptr); // NOT destination = nullptr, which pushes an empty string, e.g. ""
  assert(nullptr == Ancestor::back());
}

tests::unit::Argv::~Argv() {
  for (auto item : *this) {
    delete[] item;
  }
}

#import std.move
tests::unit::Argv::Argv(Argv &&that)
  : Ancestor(std::move(static_cast<Ancestor &>(that))) {
}

auto tests::unit::Argv::operator=(Argv &&that) -> Argv & {
  Ancestor::operator=(std::move(static_cast<Ancestor &>(that)));
  return *this;
}

tests::unit::Argv::operator c::argv() {
  return cast_as<c::argv>(*this);
}

tests::unit::Argv::operator c::const_argv() {
  return cast_as<c::const_argv>(*this);
}

auto tests::unit::Argv::clear() -> void {
  Argv empty;
  std::swap(*this, empty);
}

#import std.move
#include <cassert>
template<typename ARGV, typename ANCESTOR> auto tests::unit::Argv::cast_as(ANCESTOR &base) -> ARGV {
  if (base.empty()) {
    return ARGV();
  } else {
    // WATCHOUT - there is expected to be a nullptr sentinel at the end
    //            we account for that by returning one fewer, as is the tradition of argc, argv[]
    assert(nullptr == base.at(base.size()-1));
    ARGV ret(base.size()-1, base.data());
    return ret;
  }
}
#endiv
#divert <cpp>
auto tests::unit::operator<<(std::ostream &o, Argv const &a) -> std::ostream & {
  if (a.empty()) {
    o << "{empty}";
  } else {
    char const *separator = "{ ";
    for (auto word : a) {
      o << separator << (nullptr == word ? "nullptr" : word);
      separator = ", ";
    }
    o << " }";
  }
  return o;
}
#endiv

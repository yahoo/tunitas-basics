// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import tests.unit.Argv
#import rigging.unit.assignment.Lhs
namespace rigging::unit::assignment {
  template<> class Lhs<tests::unit::Argv>;
}
#endiv
#divert <hpp>
template<> class rigging::unit::assignment::Lhs<tests::unit::Argv> {
public:
  using value_type = tests::unit::Argv;
  inline explicit Lhs(value_type &lhs);
  inline auto operator=(Clear) -> Lhs &;
  // copy semantic
  inline auto operator=(value_type const &) -> Lhs &;
  // move semantic (out of an unnamed object)
  inline auto operator=(value_type &&) -> Lhs &;
protected:
  value_type &lhs;
};
#endiv
#divert <ipp>
rigging::unit::assignment::Lhs<tests::unit::Argv>::Lhs(value_type &arg_lhs)
  : lhs(arg_lhs) {
  ;
}

auto rigging::unit::assignment::Lhs<tests::unit::Argv>::operator=(Clear) -> Lhs & {
  lhs.clear();
  return *this;
}

auto rigging::unit::assignment::Lhs<tests::unit::Argv>::operator=(value_type const &rhs) -> Lhs & {
  using Ancestor = tests::unit::Argv::Ancestor;
  Ancestor &a_lhs(lhs);
  Ancestor const &a_rhs(rhs);
  a_lhs = a_rhs;
  return *this;
}

#import std.forward
auto rigging::unit::assignment::Lhs<tests::unit::Argv>::operator=(value_type &&anon) -> Lhs & {
  using Ancestor = tests::unit::Argv::Ancestor;
  Ancestor &a_lhs(lhs);
  a_lhs = std::forward<Ancestor>(anon);
  return *this;
}
#endiv

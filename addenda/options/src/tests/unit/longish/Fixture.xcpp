// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace longish {
      class Fixture;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import tests.unit.detail.Palette
class tests::unit::longish::Fixture : public cppunit::test::Fixture, tests::unit::detail::Palette {
  using Ancestor = cppunit::test::Fixture;
public:
  auto setUp() -> void;
  auto tearDown() -> void;

  auto test_usage_basic() -> void;

  auto test_initializer_by_POSIX_type_option() -> void;
  auto test_initializer_by_modern_type_option() -> void;
  auto test_initializer_by_intermediate_type_option() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.begin
#import std.end
auto tests::unit::longish::Fixture::setUp() -> void {
  // The array itself can't be const because main's argv is not
  // WATCHOUT - the execution of this test modifies this array
  //
  // NO SHORT OPTIONS (they will cause errors as the Getter will only be using long options)
  char const *const ARGUMENTS_SOURCE[] = {
    "/bin/a.out",
    // WATCHOUT - these options must match the option string in test_usage_basic()
    "--usage",
    "--this",
    "--that",
    "--here",
    "--there",
    "--everywhere",
    "--low=3", "--low", "3",
    "--high=5", "--high", "5",
    "--place=Hoover Park", "--place", "Mitchell Park",
    "--options=sec=krb5p",
    "--credentials",
    "--credentials=secret",
    "--with",
    "--with=yes",
    // more added after this
  };
  char const *const CHARACTERS_SOURCE[] = {
    "Mowgli",
    "Baloo",
    "Bagheera",
    "Akela",
    "Raksha",
    "Kaa",
    "Hathi",
    "Shere Khan",
    "Bandar-log",
    "King Louie"
  };

  Palette::bringup(std::begin(ARGUMENTS_SOURCE), std::end(ARGUMENTS_SOURCE),
                   std::begin(CHARACTERS_SOURCE), std::end(CHARACTERS_SOURCE));
}

auto tests::unit::longish::Fixture::tearDown() -> void {
  Palette::bringdown();
}

#import options.Code
#import options.argument.constants
#import options.longish.Specification
#import options.longish.Getter
#import options.longish.Step
#import c.argv
#import std.equal
#import std.begin
#import std.end
#import std.logic_error
auto tests::unit::longish::Fixture::test_usage_basic() -> void {
  options::longish::Specification const lspec{
    {"usage", options::argument::NO, nullptr, (char)options::Code::HELP},
      {"help", options::argument::NO, nullptr, (char)options::Code::HELP},
        {"this", options::argument::NO, nullptr, 't'},
          {"that", options::argument::NO, nullptr, 'T'},
            {"here", options::argument::NO, nullptr, 'r'},
              {"there", options::argument::NO, nullptr, 'e'},
                {"everywhere", options::argument::NO, nullptr, 'E'},
                  {"low", options::argument::REQUIRED, nullptr, 'l'},
                    {"high", options::argument::REQUIRED, nullptr, 'h'},
                      {"place", options::argument::REQUIRED, nullptr, 'P'},
                        {"options", options::argument::OPTIONAL, nullptr, 'O'},
                          {"credentials", options::argument::OPTIONAL, nullptr, 'C'},
                            {"with", options::argument::OPTIONAL, nullptr, 'W'}}; 
  // reminder: argv_workspace is reordered and reworked in place.
  options::longish::Getter get(lspec, this->argv);
  options::longish::Step step;
  while ( ! end(step = get()) ) {
    switch (code(step)) {
      // cut & paste & sort from the lspec above
    case options::Code::HELP:
    case options::Code::CHR_C:
    case options::Code::CHR_E:
    case options::Code::CHR_H:
    case options::Code::CHR_O:
    case options::Code::CHR_P:
    case options::Code::CHR_T:
    case options::Code::CHR_W:
    case options::Code::CHR_e:
    case options::Code::CHR_h:
    case options::Code::CHR_l:
    case options::Code::CHR_r:
    case options::Code::CHR_t:
      // This was expected but we don't do anything special with it (it's a tester!)
      CPPUNIT_ASSERT(true);
      break;
    case options::Code::MISSING:
      std::clog << "Error: unexpected missing option value " << flag_in_error(step) << '\n';
      CPPUNIT_ASSERT(false);
      break;
    case options::Code::UNKNOWN:
      // This was not expected
      std::clog << "Error: unexpected code " << flag_in_error(step) << '\n';
      CPPUNIT_ASSERT(false);
      break;
    default:
      // Getter returned a valid code (not UNKNOWN)
      // We did not code for it.
      throw std::logic_error("our fault");
    }
  }
  // What's left in it?
  c::argv av(get.size(), get.data());
  for (auto item : av) {
    std::clog << "av = \"" << item << "\"\n";
  }
  for (auto item : this->characters) {
    std::clog << "characters = \"" << item << "\"\n";
  }

  CPPUNIT_ASSERT(std::equal(std::begin(av), std::end(av), std::begin(this->characters), std::end(this->characters)));
}

auto tests::unit::longish::Fixture::test_initializer_by_POSIX_type_option() -> void {
  // typed with the legacy detail::Options (a.k.a. ::options)
  options::longish::Specification const lspec{{"usage", options::argument::NO, nullptr, (char)options::Code::HELP},
                                              {"help", options::argument::NO, nullptr, (char)options::Code::HELP},
                                              {"this", options::argument::NO, nullptr, 't'},
                                              {"that", options::argument::NO, nullptr, 'T'}};
  CPPUNIT_ASSERT(4 == lspec.size());
  CPPUNIT_ASSERT(5 == lspec.capacity());
}

auto tests::unit::longish::Fixture::test_initializer_by_modern_type_option() -> void {
  // the initializer with fully-typed members (and no unused field)
  options::longish::Specification const lspec{{"usage", options::argument::NO, options::Code::HELP},
                                              {"help", options::argument::NO, options::Code::HELP},
                                              {"this", options::argument::NO,  options::Code::CHR_t},
                                              {"that", options::argument::NO, options::Code::CHR_T}};
  CPPUNIT_ASSERT(4 == lspec.size());
  CPPUNIT_ASSERT(5 == lspec.capacity());
}

auto tests::unit::longish::Fixture::test_initializer_by_intermediate_type_option() -> void {
  // the initializer with every field crudely-typed as "int"
  int const NO = (int) options::argument::NO;
  constexpr int const HELP = (char) options::Code::HELP;
  constexpr int const CHR_t = (char) options::Code::CHR_t;
  constexpr int const CHR_T = (char) options::Code::CHR_T;
  options::longish::Specification const lspec{{"usage", NO, HELP},
                                              {"help", NO, HELP},
                                              {"this", NO,  CHR_t},
                                              {"that", NO, CHR_T}};
  CPPUNIT_ASSERT(4 == lspec.size());
  CPPUNIT_ASSERT(5 == lspec.capacity());
}

#import tests.unit.longish.Mixture
#import tests.unit.longish.Specification
#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::longish::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("longish");
  {
    Stream usage("usage");
    usage << call("basic", &Fixture::test_usage_basic);
    s << add(std::move(usage));
  } {
    Stream ini("initializer_list");
    ini << call("POSIX", &Fixture::test_initializer_by_POSIX_type_option)
        << call("modern", &Fixture::test_initializer_by_modern_type_option)
        << call("intermediate", &Fixture::test_initializer_by_intermediate_type_option)
      ;
    s << add(std::move(ini));
  }
  s << add<Mixture>()
    << add<Specification>()
    ;
  return finalize(s);
}
#endiv

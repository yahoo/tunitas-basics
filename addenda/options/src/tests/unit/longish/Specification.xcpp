// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::longish {
  class Specification;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import options.longish.Specification
class tests::unit::longish::Specification : public cppunit::test::Fixture {
public:
  using Subject = ::options::longish::Specification;

  auto test_initializer_by_POSIX_type_option() -> void;
  auto test_initializer_by_modern_type_option() -> void;
  auto test_initializer_by_intermediate_type_option() -> void;

  auto test_data() -> void;
  auto test_size() -> void;
  auto test_empty_yes() -> void;
  auto test_empty_no() -> void;
  auto test_capacity() -> void;
  auto test_operator_index_success() -> void;
  auto test_operator_index_failure() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import options.indicator.constants
#import options.argument.constants

auto tests::unit::longish::Specification::test_initializer_by_POSIX_type_option() -> void {
  // typed with the legacy detail::Options (a.k.a. ::options)
  Subject const lspec{{"usage", options::argument::NO, nullptr, (char)options::indicator::USAGE_SUBCOMMAND},
                      {"help", options::argument::NO, nullptr, (char)options::indicator::Code::HELP},
                      {"this", options::argument::NO, nullptr, 't'},
                      {"that", options::argument::NO, nullptr, 'T'}};
  CPPUNIT_ASSERT(4 == lspec.size());
  CPPUNIT_ASSERT(5 == lspec.capacity());
}

auto tests::unit::longish::Specification::test_initializer_by_modern_type_option() -> void {
  // the initializer with fully-typed members (and no unused field)
  Subject const lspec{{"usage", options::argument::NO, options::indicator::USAGE_SUBCOMMAND},
                      {"help", options::argument::NO, options::indicator::Code::HELP},
                      {"this", options::argument::NO,  options::indicator::CHR_t},
                      {"that", options::argument::NO, options::indicator::CHR_T}};
  CPPUNIT_ASSERT(4 == lspec.size());
  CPPUNIT_ASSERT(5 == lspec.capacity());
}

auto tests::unit::longish::Specification::test_initializer_by_intermediate_type_option() -> void {
  // the initializer with every field crudely-typed as "int"
  constexpr int const NO = (int) options::argument::NO;
  constexpr int const USAGE = (char) options::indicator::USAGE_SUBCOMMAND;
  constexpr int const CHR_t = (char) options::indicator::CHR_t;
  constexpr int const CHR_T = (char) options::indicator::CHR_T;
  Subject const lspec{{"usage", NO, USAGE},
                      {"help", NO, USAGE},
                      {"this", NO,  CHR_t},
                      {"that", NO, CHR_T}};
  CPPUNIT_ASSERT(4 == lspec.size());
  CPPUNIT_ASSERT(5 == lspec.capacity());
}

auto tests::unit::longish::Specification::test_data() -> void {
  // typed with the legacy detail::Options (a.k.a. ::options)
  Subject const lspec{{"usage", options::argument::NO, nullptr, (char)options::indicator::USAGE_SUBCOMMAND}};
  CPPUNIT_ASSERT(nullptr != lspec.data());
}

auto tests::unit::longish::Specification::test_empty_yes() -> void {
  Subject const lspec{};
  // recall: the Subject::size() does NOT cover the implicit null option sentinel at the end
  //         the Subject::capacity() does
  CPPUNIT_ASSERT(lspec.empty());
}

auto tests::unit::longish::Specification::test_empty_no() -> void {
  Subject const lspec{{"usage", options::argument::NO, nullptr, (char)options::indicator::USAGE_SUBCOMMAND}};
  // recall: the Subject::size() does NOT cover the implicit null option sentinel at the end
  //         the Subject::capacity() does
  CPPUNIT_ASSERT(!lspec.empty());
}

auto tests::unit::longish::Specification::test_size() -> void {
  Subject const lspec{{"usage", options::argument::NO, nullptr, (char)options::indicator::USAGE_SUBCOMMAND}};
  // recall: the Subject::size() does NOT cover the implicit null option sentinel at the end
  //         the Subject::capacity() does
  CPPUNIT_ASSERT(1 == lspec.size()); // <-------- test this
  CPPUNIT_ASSERT(2 == lspec.capacity());
}

auto tests::unit::longish::Specification::test_capacity() -> void {
  Subject const lspec{{"usage", options::argument::NO, nullptr, (char)options::indicator::USAGE_SUBCOMMAND}};
  // ibidem.
  CPPUNIT_ASSERT(1 == lspec.size());
  CPPUNIT_ASSERT(2 == lspec.capacity()); // <--- test this
}

#import std.string_literals
auto tests::unit::longish::Specification::test_operator_index_success() -> void {
  Subject const lspec{{"usage", options::argument::NO, nullptr, (char)options::indicator::USAGE_SUBCOMMAND}};
  // Fish around in the nullptr sentinel at the end of the array.  Prove it exists
  // recall: the Subject::size() covers the implicit null option sentinel at the end
  CPPUNIT_ASSERT(1 == lspec.size());
  CPPUNIT_ASSERT(2 == lspec.capacity());
  using namespace std::string_literals;
  CPPUNIT_ASSERT("usage"s == lspec[0].name);
  CPPUNIT_ASSERT(options::argument::NO == lspec[0].has_arg);
  CPPUNIT_ASSERT(nullptr == lspec[0].flag);
  CPPUNIT_ASSERT(options::indicator::USAGE_SUBCOMMAND == (::options::indicator::Code)lspec[0].val);
  auto const SENTINEL = lspec.size();
  auto direct = lspec.data(); // whereas accessing lspec[...] will throw an exception
  CPPUNIT_ASSERT(nullptr == direct[SENTINEL].name);
  CPPUNIT_ASSERT(0 == direct[SENTINEL].has_arg);
  CPPUNIT_ASSERT(0 == direct[SENTINEL].flag);
  CPPUNIT_ASSERT(0 == direct[SENTINEL].val);
  CPPUNIT_ASSERT(::options::indicator::NUL == (::options::indicator::Code)direct[SENTINEL].val);
}

#import std.cerr
#import std.out_of_range
auto tests::unit::longish::Specification::test_operator_index_failure() -> void {
  try {
    Subject const lspec{{"usage", options::argument::NO, nullptr, (char)options::indicator::USAGE_SUBCOMMAND},
                        {"help", options::argument::NO, nullptr, (char)options::indicator::USAGE_SUBCOMMAND},
                        {"manpage", options::argument::NO, nullptr, (char)options::indicator::USAGE_SUBCOMMAND}};
    auto const SENTINEL = lspec.size();
    lspec[SENTINEL]; // <----------------------- test this (throws)
    CPPUNIT_ASSERT(false);
  } catch (std::out_of_range const &e) {
    // Don't use format::q(...) here because that produces a dependency, which we don't want..
    std::cerr << "caught an expected exception saying " << e.what() << '\n';
    CPPUNIT_ASSERT(true);
  }
}

#import tests.unit.longish.Mixture
#import tests.unit.longish.Specification
#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::longish::Specification::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("longish");
  {
    Stream ini("initializer_list");
    ini << call("POSIX", &Specification::test_initializer_by_POSIX_type_option)
        << call("modern", &Specification::test_initializer_by_modern_type_option)
        << call("intermediate", &Specification::test_initializer_by_intermediate_type_option)
      ;
    s << add(std::move(ini));
  }
  s << call("data", &Specification::test_data)
    << call("capacity", &Specification::test_capacity)
    << call("size", &Specification::test_size)
    ;
  {
    Stream emp("empty");
    emp << call("yes", &Specification::test_empty_yes)
        << call("no", &Specification::test_empty_no)
      ;
    s << add(std::move(emp));
  }
  {
    Stream ind("operator[]");
    ind << call("success", &Specification::test_operator_index_success)
        << call("failure", &Specification::test_operator_index_failure)
      ;
    s << add(std::move(ind));
  }
  return finalize(s);
}
#endiv

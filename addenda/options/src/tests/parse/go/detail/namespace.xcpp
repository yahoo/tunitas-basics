// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace parse {
    namespace go {
      namespace detail {
        enum class ComplainAboutRedundancies { IGNORE, COMPLAIN };
      }
    }
  }
}
#endiv
#divert <hpp>
#import c.argv
#import options.shortish.Step
#import sys.exits.Code
#import tests.parse.Mode
namespace tests {
  namespace parse {
    namespace go {
      namespace detail {
        // recall: we only need the shortish::Step to access the code(...) and the value(...)
        auto treat(Mode, options::shortish::Step const &step, ComplainAboutRedundancies complain) -> void;
        template<typename GETTER, typename STEP> auto body(Mode mode, GETTER &, ComplainAboutRedundancies) -> sys::exits::Code;
        auto process() -> sys::exits::Code;
        auto execute(std::string const &query) -> sys::exits::Code;
      }
    }
  }
}
#endiv
#divert <tpp>
#import std.cout
#import std.move
#import std.string
#import std.vector
#import sys.exits.constants
#import tests.parse.Configuration
template<typename GETTER, typename STEP> auto tests::parse::go::detail::body(Mode mode, GETTER &get, ComplainAboutRedundancies complain) -> sys::exits::Code {
  STEP step;
  while ( ! end(step = get()) ) {
    treat(mode, step, complain);
  }
  std::vector<std::string> args(get.begin(), get.end());
  Configuration::SINGLETON.args = std::move(args);
  return process();
}
#endiv
#divert <cpp>
#import options.Code
#import std.cerr
#import std.cout
#import sys.exits.constants
#import tests.parse
#import tests.parse.Usage

using namespace tests::parse;

auto tests::parse::go::detail::treat(Mode mode, options::shortish::Step const &step, ComplainAboutRedundancies complain) -> void {
  using options::Code; // a fancy form of "character code"
  Configuration &C = Configuration::SINGLETON;
  switch (code(step)) {
  case Code('E'):
    if (Mode::UNSTATED != mode && Mode::EITHER != mode) {
      char const *some_mode = "?";
      if (Mode::LONG == mode) {
        some_mode = "long-only mode";
      } else if (Mode::SHORT == mode) {
        some_mode = "short-only mode";
      } else {
        some_mode = "some unknown mode";
      }
      std::cerr << C.NAME << ": warning, saw the indicator for \"either short or long options\" in " << some_mode << "\n";
    }
    break;
  case Code('L'):
    if (Mode::SHORT == mode) {
      std::cerr << C.NAME << ": warning, saw the indicator for \"long options only\" in short-only mode\n";
    }
    break;
  case Code('S'):
    if (Mode::LONG == mode) {
      std::cerr << C.NAME << ": warning, saw the indicator for \"short options only\" in long-only mode\n";
    }
    break;
  case Code('a'):
    C.apple = true;
    break;
  case Code('b'):
    C.banana = true;
    break;
  case Code('c'):
    C.cherry = true;
    break;
  case Code('d'):
    C.dog = required(step);
    break;
  case Code('e'):
    C.eagle = required(step);
    break;
  case Code('f'):
    if (present(step)) {
      C.frog = optional(step);
    }
    break;
  case Code('g'):
    if (present(step)) {
      C.goat = optional(step);
    }
    break;
  case Code('q'):
    C.query = required(step);
    break;
  case options::Code::HELP:
    // exits zero
    throw tests::parse::Usage(C.NAME, sys::exits::OK);
  case options::Code::MISSING:
    std::cerr << C.NAME << ": error, option missing its value " << flag_in_error(step) << '\n';
    throw tests::parse::Usage(C.NAME, sys::exits::USAGE);
  case options::Code::UNKNOWN:
  default:
    std::cerr << C.NAME << ": error, unknown option " << flag_in_error(step) << '\n';
    throw tests::parse::Usage(C.NAME, sys::exits::USAGE);
  }
}

#import std.boolalpha
auto tests::parse::go::detail::process() -> sys::exits::Code {
  Configuration &C = Configuration::SINGLETON;
  if (C.args.empty()) {
    std::cout << Configuration::SINGLETON << '\n';
    return sys::exits::OK;
  } else if (!C.query.empty()) {
    return execute(C.query);
  } else {
    sys::exits::Code exit;
    std::cout << std::boolalpha;
    for (auto const &query : C.args) {
      exit &= execute(query);
    }
    return exit;
  }
}
    
auto tests::parse::go::detail::execute(std::string const &query) -> sys::exits::Code {
  Configuration &C = Configuration::SINGLETON;
  if ("all" == query) {
    std::cout << C << '\n';
  } else if ("apple" == query) {
    std::cout << C.apple << '\n';
  } else if ("banana" == query) {
    std::cout << C.banana << '\n';
  } else if ("cherry" == query) {
    std::cout << C.cherry << '\n';
  } else if ("dog" == query) {
    std::cout << C.dog << '\n';
  } else if ("eagle" == query) {
    std::cout << C.eagle << '\n';
  } else if ("frog" == query) {
    std::cout << C.frog << '\n';
  } else if ("goat" == query) {
    std::cout << C.goat << '\n';
  } else if ("args.size" == query) {
    std::cout << C.args.size() << '\n';
  } else if ("args.data" == query) {
    for (auto const &arg : C.args) {
      std::cout << arg << '\n';
    }
  } else {
    std::cerr << C.NAME << ": error, unknown query keyword '" << query << "'\n";
    return sys::exits::FAIL;
  }
  return sys::exits::OK;
}
#endiv

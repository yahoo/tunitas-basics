// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import ares.required.array.Entry
namespace ares::managed {
  //
  // An array of entries (sub-entries).
  // These arrays are provided to an interface which requires guessing up front how much storage to commit.
  // As such they "behave sorta like" std::vector<ENTRY>.a
  //
  // NO copy semantics, because the raw data structures have unmanaged pointers in POD.
  // Yes move semantics
  // Destruction is on its own term; this is "our" storage, not that of the C Runtime of (c-)ares.
  //
  // See managed::Record<A>, managed::Record<AAAA>
  //
  // Usage:
  //
  //   You know, like std::vector<ENTRY>
  //
  template<required::array::Entry ENTRY> class Array;
}
#endiv
#divert <hpp>
#import std.vector
#import std.size_t
#import ares.managed.array.Iterator
#import ares.managed.array.Entry
namespace ares {
  template<required::array::Entry ENTRY> class managed::Array : protected std::vector<typename ENTRY::Unmanaged> {
    using ancestor = std::vector<typename ENTRY::Unmanaged>;
  public:
    using Value = ENTRY; // ........ New School
    using value_type = Value; // ... old_school
    using Index = std::size_t;
    Array() = default;
    ~Array() = default;
    Array(Array const &) = delete;
    auto operator=(Array const &) -> Array & = delete;
    Array(Array &&) = default;
    auto operator=(Array &&) -> Array & = default;
    using ancestor::resize;
    using ancestor::capacity;
    using ancestor::size;
    using ancestor::data;
    using const_iterator = array::Iterator<Value>;
    using iterator = const_iterator;
    inline auto begin() const -> const_iterator;
    inline auto end() const -> const_iterator;
    // These return only the managed items, and always by value
    inline auto at(Index) const -> Value; // ........... throws out_of_range on invalid index
    inline auto operator[](Index) const -> Value; // ... unchecked
    inline auto front() const -> Value; // ............. unchecked
    inline auto back() const -> Value; // .............. unchecked
    // WATCHOUT - this accepts an unmanaged item.
    using ancestor::push_back;
  };
}
#endiv
#divert <ipp>
#import ares.exception.Range
namespace ares::managed {
  template<required::array::Entry _> auto Array<_>::begin() const -> const_iterator {
    return const_iterator{ancestor::begin()};
  }
  template<required::array::Entry _> auto Array<_>::end() const -> const_iterator {
    return const_iterator{ancestor::end()};
  }
  template<required::array::Entry _> auto Array<_>::at(Index i) const -> Value try {
    return Value{ancestor::at(i)};
  } catch (std::out_of_range const &e) {
    // promote it back to "our" sort of thing
    throw exception::Range{e.what()};
  }
  template<required::array::Entry _> auto Array<_>::operator[](Index i) const -> Value {
    return Value{ancestor::at(i)};
  }
  template<required::array::Entry _> auto Array<_>::front() const -> Value {
    return Value{ancestor::front()};
  }
  template<required::array::Entry _> auto Array<_>::back() const -> Value {
    return Value{ancestor::back()};
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import ares.managed.list.Entry.declaration
namespace ares::managed::list {
  //
  // A single URI RR (Universal Resource Indicator)
  //
  // Usage: see reply::Record<URI> and managed::List<Entry<URI>>
  //
  template<> struct Entry<URI>;
}
#endiv
#divert <hpp>
#import ares.unmanaged.Structure
#import ares.managed.list.entry.Basis
#import ares.required.Spanlike
#import std.string
namespace ares::managed::list {
  template<> struct Entry<URI> : public entry::Basis<unmanaged::Structure<URI>::List_Item> {
    using ancestor = entry::Basis<unmanaged::Structure<URI>::List_Item>; // declaring ancestor::Unmanaged
  public:
    inline explicit Entry(Unmanaged const *);
    inline auto priority() const -> Priority; 
    inline auto weight() const -> Weight;
    inline auto uri() const -> std::string;
    template<required::Spanlike SPANLIKE> auto uri() const -> SPANLIKE;
  private:
    // [[FIXTHIS]] here for the convenience but move it out to namespace scope
    inline static auto ucstrlen(unsigned char *) -> Size;
  };
}
#endiv
#divert <ipp>
#import strlen
#import nonstd.span
namespace ares::managed::list {
  Entry<URI>::Entry(Unmanaged const *un) : ancestor{un} { }
  auto Entry<URI>::priority() const -> Priority { return Priority{unmanaged->priority}; }
  auto Entry<URI>::weight() const -> Weight { return Weight{unmanaged->weight}; }
  auto Entry<URI>::ucstrlen(unsigned char *uc) -> Size { return strlen(reinterpret_cast<char const *>(uc)); }
  auto Entry<URI>::uri() const -> std::string {
    auto spun = uri<nonstd::span<char const>>();
    return std::string{spun.data(), spun.size()};
  }
  template<required::Spanlike SPANLIKE> auto Entry<URI>::uri() const -> SPANLIKE {
    return SPANLIKE{reinterpret_cast<typename SPANLIKE::value_type const *>(unmanaged->uri), ucstrlen(unmanaged->uri)};
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import ares
#import std.uint16_t
#import std.uint32_t
#import std.size_t
#import ares.key
namespace ares::managed {
  using Index = std::size_t; // index-vs-size is in the eye of the beholder
  using Size = std::size_t;
  //
  enum class Order : std::uint16_t; // ........ NAPTR
  enum class Preference : std::uint16_t; // ... NAPTR
  enum class Priority : std::uint16_t; // ..... MX, SRV, URI
  enum class Serial : std::uint32_t; // ....... SOA
  enum class Weight : std::uint16_t; // ....... SRV, URI
  namespace tests {
    struct Access;
  };
}
#endiv
#divert <hpp>
#import std.basic_ostream
#import ares.required.character.Type
#import ares.required.character.Traits
namespace ares::managed {
  template<required::character::Type CHAR, required::character::Traits<CHAR> TRAITS> inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, Order) -> std::basic_ostream<CHAR, TRAITS> &;
  template<required::character::Type CHAR, required::character::Traits<CHAR> TRAITS> inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, Preference) -> std::basic_ostream<CHAR, TRAITS> &;
  template<required::character::Type CHAR, required::character::Traits<CHAR> TRAITS> inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, Priority) -> std::basic_ostream<CHAR, TRAITS> &;
  template<required::character::Type CHAR, required::character::Traits<CHAR> TRAITS> inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, Serial) -> std::basic_ostream<CHAR, TRAITS> &;
  template<required::character::Type CHAR, required::character::Traits<CHAR> TRAITS> inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, Weight) -> std::basic_ostream<CHAR, TRAITS> &;
  namespace detail {
    template<required::character::Type CHAR, required::character::Traits<CHAR> TRAITS, typename ENUMERATION> inline auto insert(std::basic_ostream<CHAR, TRAITS> &, ENUMERATION) -> std::basic_ostream<CHAR, TRAITS> & requires std::is_enum<ENUMERATION>::value;
  }
}
#endiv
#divert <ipp>
#import std.underlying_type
namespace ares {
  template<required::character::Type CHAR, required::character::Traits<CHAR> TRAITS, typename ENUMERATION>
  auto managed::detail::insert(std::basic_ostream<CHAR, TRAITS> &os, ENUMERATION en) -> std::basic_ostream<CHAR, TRAITS> &
    requires std::is_enum<ENUMERATION>::value {
    using Underlying = typename std::underlying_type<ENUMERATION>::type;
    return os << (Underlying) en;
  }
  template<required::character::Type CHAR, required::character::Traits<CHAR> TRAITS> auto managed::operator<<(std::basic_ostream<CHAR, TRAITS> &os, Order od) -> std::basic_ostream<CHAR, TRAITS> & { return detail::insert(os, od); }
  template<required::character::Type CHAR, required::character::Traits<CHAR> TRAITS> auto managed::operator<<(std::basic_ostream<CHAR, TRAITS> &os, Preference pr) -> std::basic_ostream<CHAR, TRAITS> & { return detail::insert(os, pr); }
  template<required::character::Type CHAR, required::character::Traits<CHAR> TRAITS> auto managed::operator<<(std::basic_ostream<CHAR, TRAITS> &os, Priority pr) -> std::basic_ostream<CHAR, TRAITS> & { return detail::insert(os, pr); }
  template<required::character::Type CHAR, required::character::Traits<CHAR> TRAITS> auto managed::operator<<(std::basic_ostream<CHAR, TRAITS> &os, Serial se) -> std::basic_ostream<CHAR, TRAITS> & { return detail::insert(os, se); }
  template<required::character::Type CHAR, required::character::Traits<CHAR> TRAITS> auto managed::operator<<(std::basic_ostream<CHAR, TRAITS> &os, Weight we) -> std::basic_ostream<CHAR, TRAITS> & { return detail::insert(os, we); }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import ares.required.list.Entry
namespace ares::managed::list {
  //
  // The iterator on a List<ENTRY>
  //
  // Usage: the usual
  //
  template<required::list::Entry ENTRY> class Iterator;
}
#import ares.managed.list.Iterator.iterator_traits
#endiv
#divert <hpp>
namespace ares::managed::list {
  template<required::list::Entry ENTRY> inline auto swap(Iterator<ENTRY> &, Iterator<ENTRY> &) noexcept -> void;
  template<required::list::Entry ENTRY> inline auto operator==(Iterator<ENTRY> const &, Iterator<ENTRY> const &) -> bool;
  template<required::list::Entry ENTRY> inline auto operator!=(Iterator<ENTRY> const &, Iterator<ENTRY> const &) -> bool;
}
#forward ares.managed.List
namespace ares::managed {
  template<required::list::Entry ENTRY> struct list::Iterator {
    inline Iterator();
    using Value = ENTRY;
    using value_type = Value;
    inline auto operator*() const -> Value;
    inline auto operator++() -> Iterator &;
    inline auto operator++(int) -> Iterator;
  protected:
    friend class managed::List<ENTRY>;
    friend auto list::swap<>(Iterator &, Iterator &) noexcept -> void;
    friend auto list::operator==<>(Iterator const &, Iterator const &) -> bool;
    using Unmanaged = typename ENTRY::Unmanaged;
    inline explicit Iterator(Unmanaged const *);
    Unmanaged const *position;
  };
}
#endiv
#divert <ipp>
#import std.swap
namespace ares::managed {
  template<required::list::Entry ENTRY> auto list::swap(Iterator<ENTRY> &a, Iterator<ENTRY> &b) noexcept -> void {
    return std::swap(a.position, b.position);
  }
  template<required::list::Entry ENTRY> auto list::operator==(Iterator<ENTRY> const &a, Iterator<ENTRY> const &b) -> bool {
    return a.position == b.position;
  }
  template<required::list::Entry ENTRY> auto list::operator!=(Iterator<ENTRY> const &a, Iterator<ENTRY>  const &b) -> bool {
    return !operator==(a, b);
  }
}
#import ares.exception.Invariant
#import ares.managed.list.Entry
namespace ares::managed::list {
  template<required::list::Entry _> Iterator<_>::Iterator() : position(nullptr) { } 
  template<required::list::Entry _> Iterator<_>::Iterator(Unmanaged const *position) : position{position} { }
  template<required::list::Entry _> auto Iterator<_>::operator*() const -> Value {
    if (nullptr == position) {
      throw exception::Invariant{"exhausted"};
    }
    return Value{position};
  }
  template<required::list::Entry _> auto Iterator<_>::operator++() -> Iterator & {
    if (nullptr == position) {
      throw exception::Invariant{"exhausted"};
    }
    position = position->next; // required::list::Entry enforces that there is a position->next field
    return *this;
  }
  template<required::list::Entry _> auto Iterator<_>::operator++(int) -> Iterator {
    Iterator old(*this);
    operator++();
    return old;
  }
}
#import ares.managed.List // follow up from the #forward, which appears above
#endiv

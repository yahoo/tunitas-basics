// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import ares.required.array.Entry
namespace ares::managed::array {
  //
  // The iterator on an Array<ENTRY>
  //
  template<required::array::Entry ENTRY> class Iterator;
}
#import ares.managed.array.Iterator.iterator_traits
#endiv
#divert <hpp>
namespace ares::managed::array {
  template<required::array::Entry ENTRY> inline auto swap(Iterator<ENTRY> &, Iterator<ENTRY> &) noexcept -> void;
  template<required::array::Entry ENTRY> inline auto operator==(Iterator<ENTRY> const &, Iterator<ENTRY> const &) -> bool;
  template<required::array::Entry ENTRY> inline auto operator!=(Iterator<ENTRY> const &, Iterator<ENTRY> const &) -> bool;
}
#forward ares.managed.Array
#import std.vector // because Array is made out of std::vector<...>
namespace ares::managed {
  template<required::array::Entry ENTRY> struct array::Iterator {
    Iterator() = default;
    using Value = ENTRY; // ........ New School
    using value_type = Value; // ... old_school
    inline auto operator*() const -> Value;
    inline auto operator++() -> Iterator &;
    inline auto operator++(int) -> Iterator;
    inline auto operator--() -> Iterator &;
    inline auto operator--(int) -> Iterator;
  protected:
    friend class managed::Array<ENTRY>;
    friend auto swap<>(Iterator &, Iterator &) noexcept -> void;
    friend auto operator==<>(Iterator const &, Iterator const &) -> bool;
    using Position = typename std::vector<typename ENTRY::Unmanaged>::const_iterator;
    inline explicit Iterator(Position);
    Position position;
  };
}
#endiv
#divert <ipp>
#import std.swap
namespace ares::managed {
  template<required::array::Entry ENTRY> auto array::swap(Iterator<ENTRY> &a, Iterator<ENTRY> &b) noexcept -> void {
    std::swap(a.position, b.position);
  }
  template<required::array::Entry ENTRY> auto array::operator==(Iterator<ENTRY> const &a, Iterator<ENTRY> const &b) -> bool {
    return a.position == b.position;
  }
  template<required::array::Entry ENTRY> auto array::operator!=(Iterator<ENTRY> const &a, Iterator<ENTRY>  const &b) -> bool {
    return !operator==(a, b);
  }
}
namespace ares::managed::array {
  template<required::array::Entry _> Iterator<_>::Iterator(Position position) : position{position} { }
  template<required::array::Entry _> auto Iterator<_>::operator*() const -> Value {
    return Value{&*position};
  }
  template<required::array::Entry _> auto Iterator<_>::operator++() -> Iterator & {
    ++position;
    return *this;
  }
  template<required::array::Entry _> auto Iterator<_>::operator++(int) -> Iterator {
    Iterator old(*this);
    operator++();
    return old;
  }
  template<required::array::Entry _> auto Iterator<_>::operator--(int) -> Iterator {
    Iterator old(*this);
    operator--();
    return old;
  }
}
#endiv

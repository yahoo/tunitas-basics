// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import ares.managed.array.Entry.declaration
namespace ares::managed::array {
  template<> struct Entry<ADDR6>;
}
#endiv
#divert <hpp>
#import ares.managed.array.entry.Basis
#import ares.unmanaged.Structure
#import ip.in6 // in6::addr
namespace ares::managed::array {
  template<> struct Entry<ADDR6> : public entry::Basis<unmanaged::Structure<AAAA>::Array_Item> {
    using ancestor = entry::Basis<unmanaged::Structure<AAAA>::Array_Item>; // and thus appears as the type ancestor::Unmanaged
  public:
    inline explicit Entry(Unmanaged const *);
    using Address = ip::in6::addr;
    inline auto address() const -> Address const &;
    inline auto ttl() const -> time::Seconds override;
  };
}
#endiv
#divert <ipp>
namespace ares::managed::array {
  Entry<ADDR6>::Entry(Unmanaged const *un) : ancestor{un} { }
  auto Entry<ADDR6>::ttl() const -> time::Seconds { return time::Seconds{unmanaged->ttl}; }
  auto Entry<ADDR6>::address() const -> Address const & {
    //
    // WATCHOUT -  from the commentariat in <ares.h> is the hackery of new structs for IPv6.
    //
    //  <quote>
    //    NOTE: before c-ares 1.7.0 we would most often use the system in6_addr struct [below] when ares itself was built,
    //    but many apps would use this private version since the header checked a HAVE_* define for it. 
    //    Starting with 1.7.0 we always declare and use our own to stop relying on the* system's one.
    //  </quote>
    //
    // Of course this solves the problem for ares, but causes a cascade of more problems elsewhere.
    // And as such we can't use static_cast, we have to use reinterpret_cast.  Good luck to us.
    return *reinterpret_cast<Address const *>(&unmanaged->ip6addr);
  }
}
#endiv

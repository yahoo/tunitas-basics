// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace ares::managed::host {
  //
  // The basis of the managed host record.
  // This shell provides some of the interface to the unmanaged::Host structure.
  // Descendants only.
  // All host record descendants share these aspects: name, alias set
  //
  // Const semantics only; value-generating on access.
  // Shallow copy semantics; but it's const semantics so there is no point
  // Move semantics: default.
  // No destruction; the containing List manages that; being List<Entry<HOST4>>, List<Entry<HOST6>>.
  // 
  // Usage: see Host<HOST4>, Host<HOST6>.
  //
  class Basis;
}
#endiv
#divert <hpp>
#import ares.managed.host.Aliases
#import ares.required.Spanlike
#import ares.unmanaged.Host
#import std.string
class ares::managed::host::Basis {
public:
  using Unmanaged = unmanaged::Host; // accessed by required::list::Entry<ENTRY>
protected:
  ~Basis() = default;
  inline Basis();
  inline explicit Basis(Unmanaged const *);
public:
  inline auto name() const -> std::string;
  template<required::Spanlike SPANLIKE> auto name() const -> SPANLIKE;
  inline auto aliases() -> Aliases;
  // The address() accessors are in the descendant, specialized to IPv4 or IPv6.
protected:
  Unmanaged const *unmanaged;
};
#endiv
#divert <ipp>
#import strlen
namespace ares::managed::host {
  Basis::Basis() : unmanaged{nullptr} { }
  Basis::Basis(Unmanaged const *un) : unmanaged{un} { }
  auto Basis::name() const -> std::string { return unmanaged->h_name; }
  template<required::Spanlike SPANLIKE> auto Basis::name() const -> SPANLIKE {
    return SPANLIKE{reinterpret_cast<typename SPANLIKE::value_type>(unmanaged->h_name), strlen(unmanaged->h_name)};
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace ares::library {
  //
  // A (global) allocator for ares
  //
  // See ares_init_library(3)
  // See ares_init_library_mem(3).
  //
  // No further state is passed into the allocator.
  // However, the allocator is process-wide (i.e. not thread-local) so you may(as well)
  // use a global variable singleton within the allocator to recover allocator-specific
  // state once the call has occurred.
  //
  // The allocator needs to be thread-safe
  //
  // Usage:
  //
  //   try {
  //     Allocator allocator{ malloc, free, realloc }; .......................... here
  //     Library library{Features::NONE, allocator};
  //     ...use the library...
  //
  //   } catch (exception::Library const &e) {
  //     auto code = e.code();
  //     cout << e.what();
  //     ...upon failure, the library is totally unusable...
  //
  struct Allocator;
}
#endiv
#divert <hpp>
#import size_t
struct ares::library::Allocator {
  using Malloc = void *(*)(size_t);
  using Free = void (*)(void *);
  using Realloc = void *(*)(void *, size_t);
  inline Allocator() : Allocator{nullptr, nullptr, nullptr} { }
  inline Allocator(Malloc m, Free f, Realloc r) : malloc{m}, free{f}, realloc{r} { }
  Malloc malloc;
  Free free;
  Realloc realloc;
};
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace ares::continuation {
  //
  // A continuation endpoint of a query ... is separated pointers: (function, state)
  // both of which are to be passed through the C API as {pointer, pointer}.
  //
  // There is no real guarantee that these won't get "lost", so it is up to the caller to manage their lifetimes.
  //
  // The continuation::Query<STATE> con contains nothing but static (member) functions and types.
  // It is a way of declaring a pair of functions which are indexed by a type.
  //
  // Usage:
  //
  //   see ares::query(...)
  //
  template<typename STATE> struct Query;
}
#endiv
#divert <hpp>
#import ares.Buffer
#import ares.Count
#import ares.error.Code
#import std.byte
template<typename STATE> struct ares::continuation::Query {
  using State = STATE;
  // outlined because they are accessed by a (function) pointer
  static auto _receive(void *state, int status, int timeouts, unsigned char *buffer, int length) noexcept -> void;
  static auto receive(State &, error::Code, Count, Buffer<std::byte const>) -> void; // you have to specialize this for your case
};
#endiv
#divert <tpp>
#import ares.exception.Invariant
namespace ares::continuation {
  template<typename _> auto Query<_>::_receive(void *_state, int _status, int _timeouts, unsigned char *_buffer, int _length) noexcept -> void try {
    auto &state = *reinterpret_cast<State *>(_state);
    auto status = error::Code{_status};
    if (_timeouts < 0) { throw exception::Invariant{"negative count"}; }
    auto timeouts = Count(_timeouts);
    if (_length < 0) { throw exception::Invariant{"negative length"}; }
    auto buffer = Buffer<std::byte const>{reinterpret_cast<std::byte const *>(_buffer), std::size_t(_length)};
    receive(state, status, timeouts, buffer);
  } catch (...) {
    // What can we do?   Exceptions must not cross back into the C runtime
    // [[FIXTHIS]] either rebuild ares event pumping to be in the C++ runtime; or else use the "save the exception" separately trickery.
  }
}
#endiv

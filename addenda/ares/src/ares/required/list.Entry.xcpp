// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#forward ares.key
#forward ares.managed.list.Entry
#import ares.required.Unmanaged
namespace ares::required::list {
  //
  // Is this a valid managed::List<ENTRY>?
  // Used to define the concept.
  // And allows for specializations to extend the concept.
  //
  template<typename ENTRY> struct Is_Entry;
  template<Resource_Record RECORD> struct Is_Entry<managed::list::Entry<RECORD>>;
  //
  // Is this a valid managed::List<ENTRY>?
  //
  // Of the unmanaged structures, some of them are lists.
  // The unmanaged list structures must have a 'next' field.
  //
  template<typename ENTRY> concept bool Entry = requires(ENTRY entry) {
    typename ENTRY::Unmanaged;
    requires Is_Entry<ENTRY>::value;
    requires Unmanaged<typename ENTRY::Unmanaged>;
    requires requires(typename ENTRY::Unmanaged const *unmanaged) {
      { unmanaged->next } -> typename ENTRY::Unmanaged const *;
    };
  };
}
#endiv
#divert <hpp>
#import std.false_type
namespace ares::required {
  template<typename ENTRY> struct list::Is_Entry : public std::false_type { };
}
#import std.true_type
namespace ares::required::list {
  template<Resource_Record RECORD> struct Is_Entry<managed::list::Entry<RECORD>> : public std::true_type { };
}
#endiv
#divert <cpp>
// This is, of course, test code
#import ares.managed.list.Entry
namespace ares::required::list {
  static_assert(Entry<managed::list::Entry<MX>>);
  static_assert(Entry<managed::list::Entry<NAPTR>>);
  static_assert(Entry<managed::list::Entry<SRV>>);
  static_assert(Entry<managed::list::Entry<TXT>>);
  static_assert(Entry<managed::list::Entry<URI>>);
}
#endiv

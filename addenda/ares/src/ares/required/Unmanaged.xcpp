// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#include <hpp/ares.unmanaged.Structure>
namespace ares::required {
  //
  // Structure the data structures which are valid unmanaged replies
  // Supports the concept Unmanaged<UNMANAGED>
  //
  template<typename UNMANAGED> struct Is_Unmanaged;
  template<> struct Is_Unmanaged<unmanaged::Host>;
  template<> struct Is_Unmanaged<unmanaged::Structure<A>::Array_Item>;
  template<> struct Is_Unmanaged<unmanaged::Structure<AAAA>::Array_Item>;
  template<> struct Is_Unmanaged<unmanaged::Structure<MX>::List_Item>;
  template<> struct Is_Unmanaged<unmanaged::Structure<NAPTR>::List_Item>;
  template<> struct Is_Unmanaged<unmanaged::Structure<SOA>::Item>;
  template<> struct Is_Unmanaged<unmanaged::Structure<SRV>::List_Item>;
  template<> struct Is_Unmanaged<unmanaged::Structure<TXT>::List_Item>;
  template<> struct Is_Unmanaged<unmanaged::Structure<URI>::List_Item>;
  //
  // Is this a legal unmanaged reply structure?
  //
  template<typename UNMANAGED> concept bool Unmanaged = Is_Unmanaged<UNMANAGED>::value;
}
#endiv
#divert <hpp>
#import std.false_type
namespace ares {
  template<typename UNMANAGED> struct required::Is_Unmanaged : public std::false_type { };
}
#import std.true_type
namespace ares::required {
  template<> struct Is_Unmanaged<unmanaged::Host> : public std::true_type { };
  template<> struct Is_Unmanaged<unmanaged::Structure<A>::Array_Item> : public std::true_type { };
  template<> struct Is_Unmanaged<unmanaged::Structure<AAAA>::Array_Item> : public std::true_type { };
  template<> struct Is_Unmanaged<unmanaged::Structure<MX>::List_Item> : public std::true_type { };
  template<> struct Is_Unmanaged<unmanaged::Structure<NAPTR>::List_Item> : public std::true_type { };
  template<> struct Is_Unmanaged<unmanaged::Structure<SOA>::Item> : public std::true_type { };
  template<> struct Is_Unmanaged<unmanaged::Structure<SRV>::List_Item> : public std::true_type { };
  template<> struct Is_Unmanaged<unmanaged::Structure<TXT>::List_Item> : public std::true_type { };
  template<> struct Is_Unmanaged<unmanaged::Structure<URI>::List_Item> : public std::true_type { };
}
#endiv

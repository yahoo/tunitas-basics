// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import ares.fd.Set
#import ares.fd.Sets
#import ares.Channel
#import ares.Count
namespace ares::fd {
  //
  // Process the sockets that are known to be ready
  //
  // Usage: (Scenario #1, with separated single Set read, write)
  //
  //   auto channel = Channel{...somehow...};
  //   ...send off some queries...
  //   ...
  //   auto ccc = count(channel, read(rfds), write(wfds));
  //   if (!zero(count)) {
  //     auto limit = timeout(channel);
  //     Set reads, writes; ................................... single Set reads and writes are separate
  //     select(count, reads, writes, limit);
  //     process(channel, reads, writes);
  //   }
  //   ...repeat...
  //
  // Usage: (Scenario #1, with separated single Set read, write)
  //
  //   auto channel = Channel{...somehow...};
  //   ...send off some queries...
  //   ...
  //   auto ccc = count(channel, read(rfds), write(wfds));
  //   if (!zero(count)) {
  //     auto limit = timeout(channel);
  //     Sets rw; ........................................... plural Sets contains both
  //     select(count, rw, limit);
  //     process(channel, rw);
  //   }
  //   ...repeat...
  //
#if 0 // [[DELETETHIS]] ... there are ony twi fd sets, so there is no need of fancy chicanery about read(...) and write(((...)
  namespace packaging::process::function {
    using fd::set::Reference;
    using fd::set::Purpose;
    using fd::ANCHOR;
    using Reads = Reference<Purpose::READ>;
    using Writes = Reference<Purpose::WRITE>;
  }
  using packaging::process::function::process;
#endif
  inline auto process(Channel &, [[in]] Set const &reads, [[in]] Set const &writes) -> void;
  inline auto process(Channel &, [[in]] Sets const &rw) -> void;
}
#endiv
#divert <ipp>
#import ares.fd.set.Reference
#if 0
namespace ares::packaging::process {
  auto function::process(Channel &channel, Reads r, Writes w) -> void {
    ::ares_process(channel.get(), r.repointer(), w.repointer());
  }
  auto function::process(Channel &channel, fd::Sets &rw) -> void {
    process(channel, reads(ANCHOR, rw.reads), writes(ANCHOR, rw.writes));
  }
}
#endif
namespace ares {
  auto fd::process(Channel &channel, Set const &r, Set const &w) -> void {
    set::Reference<set::Purpose::READ> rr{const_cast<Set &>(r)}; // [[FIXTHIS]] remove the const_cast by using set::Const_Reference<READ>, set::Const_Reference<WRITE>
    set::Reference<set::Purpose::WRITE> ww{const_cast<Set &>(w)}; // [[FIXTHIS]] ibidem.
    ::ares_process(channel.get(), rr.repointer(), ww.repointer());
  }
  auto fd::process(Channel &channel, Sets const &rw) -> void {
    process(channel, rw.reads, rw.writes);
  }
}
#endiv

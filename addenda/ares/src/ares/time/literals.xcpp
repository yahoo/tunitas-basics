// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import ares.time.durations
#import std.chrono_literals
#import std.intmax_t
namespace ares::time::literals {
  //
  // Packaging them up for easy reference within the ares sphere of influence
  // Not much different than the usual idiom
  //
  //   #import std.chrono_literals
  //   using namespace std::chrono_literals;
  //   using namespace std::literals;
  //
  // Usage:
  //
  //   #import ares.time.literals
  //   using namespace ares::time.literals;
  //   ...utterances
  //     h, min, s, ms, us, ns
  //
  using namespace std::chrono_literals;
  namespace detail {
    template<char... DIGITS> constexpr auto parse() -> std::intmax_t {
      // any one will do ... we are avoiding peeking inside to see how they do it within the operator.
      return operator""ms<DIGITS...>().count();
    }
  }
  // Metric prefixs the first order of magnitude (times 1000) are lower case
  // https://en.wikipedia.org/wiki/Metric_prefix
  // kilo  k    milli m
  // hecto h    centi c
  // deca  da   deci  d
  //
  // The short scale (your network is not so fast that you don't need these)
  template<char... DIGITS> constexpr auto operator""_ks() -> Kiloseconds  { return Kiloseconds{detail::parse<DIGITS...>()}; }
  template<char... DIGITS> constexpr auto operator""_hs() -> Hectoseconds { return Hectoseconds{detail::parse<DIGITS...>()}; }
  template<char... DIGITS> constexpr auto operator""_das() -> Decaseconds  { return Decaseconds{detail::parse<DIGITS...>()}; }
  template<char... DIGITS> constexpr auto operator""_ds() -> Deciseconds  { return Deciseconds{detail::parse<DIGITS...>()}; }
  template<char... DIGITS> constexpr auto operator""_cs() -> Centiseconds { return Centiseconds{detail::parse<DIGITS...>()}; }
  // Well aggreed cultural aggregations
  template<char... DIGITS> constexpr auto operator""_hour() -> Hours      { return operator""h<DIGITS...>(); }
  template<char... DIGITS> constexpr auto operator""_hours() -> Hours     { return operator""h<DIGITS...>(); }
  template<char... DIGITS> constexpr auto operator""_minute() -> Minutes  { return operator""min<DIGITS...>(); }
  template<char... DIGITS> constexpr auto operator""_minutes() -> Minutes { return operator""min<DIGITS...>(); }
  template<char... DIGITS> constexpr auto operator""_second() -> Seconds  { return operator""s<DIGITS...>(); }
  template<char... DIGITS> constexpr auto operator""_seconds() -> Seconds { return operator""s<DIGITS...>(); }
  // Standard ones
  template<char... DIGITS> constexpr auto operator""_s() -> Seconds { return operator""s<DIGITS...>(); }
  template<char... DIGITS> constexpr auto operator""_ms() -> Milliseconds { return operator""ms<DIGITS...>(); }
  template<char... DIGITS> constexpr auto operator""_us() -> Microseconds { return operator""us<DIGITS...>(); }
  template<char... DIGITS> constexpr auto operator""_ns() -> Nanoseconds { return operator""ns<DIGITS...>(); }
}
#endiv

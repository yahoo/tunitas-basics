// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace ares::exception {
  //
  // The aspect of an OpenSSL Exception
  // Is a mixin which must be paired with a "real" exception nearby
  // Descendants only.
  // 
  // Usage:
  //
  //   class my::Problem : public Aspect, public std::runtime_error {
  //     struct Ancestors {
  //        using Aspect = ares::exception::Aspect;
  //        using Exception = std;:runtime_error;
  //     };
  //   public:
  //     inline explicit Problem(std::string const &reason);
  //     auto what() const noexcept -> char const * override;
  //   };
  //
  //   class my::Invalid : public Aspect, public std::invalid_argument {
  //     struct Ancestors {
  //        using Aspect = ares::exception::Aspect;
  //        using Exception = std;:invalid_Argument;
  //     };
  //   public:
  //     inline explicit Invalid(std::string const &reason);
  //     auto what() const noexcept -> char const * override;
  //   };
  //
  //   try {
  //     throw my::Problem{"...something bad happened..."};
  //     throw my::Invalid{"...something bad happened..."};
  //   } catch (exception::Aspect const &a) {
  //     cerr << a.what();
  //   }
  //
  //   try {
  //     throw my::Problem{"...something bad happened..."};
  //     throw my::Invalid{"...something bad happened..."};
  //   } catch (std::exception const &e) {
  //     cerr << e.what();
  //   }
  //
  class Aspect;
}
#endiv
#divert <hpp>
class ares::exception::Aspect {
protected:
  virtual ~Aspect() = default;
public:
  Aspect() = default;
  virtual auto what() const noexcept -> char const * = 0;
};
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace ares::exception {
  //
  // The argument to the function is disallowed somehow..
  // This is a normal usage of the invalid argument sense.
  //
  // As with std::runtime_error, the "reason" argument is always copied.
  // The constructor interface attempts to provide a way to avoid duplicate construction of a std::string at the call site.
  //
  // Usage:
  //
  //   try {
  //     throw Argument{};
  //     throw Argument{"function-name"};
  //   } catch (Aspect const &) {
  //     ...recover...
  //   }
  //
  class Argument;
}
#endiv
#divert <hpp>
#import ares.exception.Aspect
#import std.invalid_argument
#import re.string
#import c.const_stringz
class ares::exception::Argument : public Aspect, public std::invalid_argument {
  struct Ancestors {
    using Aspect = ares::exception::Aspect;
    using Exception = std::invalid_argument;
  };
public:
  inline Argument();
  inline explicit Argument(re::string<c::const_stringz> reason);
  auto what() const noexcept -> char const * override;
};
#endiv
#divert <ipp>
namespace ares::exception {
  Argument::Argument()
    : Ancestors::Exception{"invalid argument"}
  { }
  Argument::Argument(re::string<c::const_stringz> reason)
    : Ancestors::Exception{reason.c_str()}
  { }
}
#endiv
#divert <cpp>
auto ares::exception::Argument::what() const noexcept -> char const * {
  return Ancestors::Exception::what();
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace ares::exception {
  //
  // An library error has occurred
  // Like std::system_error, but is imbued with an (C++)ARES sense.
  // Also like its sibling exception::System about this exception pertains to the ARES library.
  //
  // As with std::runtime_error, the "reason" argument is always copied.
  // The constructor interface attempts to provide a way to avoid duplicate construction of a std::string at the call site.
  //
  // Usage:
  //
  //   try {
  //     throw Libraryx{ec, "reason"};
  //   } catch (Aspect const &) {
  //     ...recover...
  //   }
  //
  class Library;
}
#endiv
#divert <hpp>
#import ares.exception.Aspect
#import ares.error.Code
#import std.system_error
#import re.string
#import c.const_stringz
class ares::exception::Library : public Aspect, public std::system_error {
  struct Ancestors {
    using Aspect = ares::exception::Aspect;
    using Exception = std::system_error;
  };
public:
  Library() = default;
  // DO NOT ---> using Ancestor::system_error; <--- DO NOT (it does not initialize the vtable)
  inline explicit Library(std::error_code);
  inline Library(std::error_code, re::string<c::const_stringz> reason);
  explicit inline Library(error::Code);
  inline Library(error::Code, re::string<c::const_stringz> reason);
  auto what() const noexcept -> char const * override;
};
#endiv
#divert <ipp>
namespace ares::exception {
  Library::Library(std::error_code ec)
    : Ancestors::Exception{ec}
  { }
  Library::Library(std::error_code ec, re::string<c::const_stringz> reason)
    : Ancestors::Exception{ec, reason.c_str()}
  { }
  Library::Library(error::Code ec)
    : Ancestors::Exception{ec}
  { }
  Library::Library(error::Code ec, re::string<c::const_stringz> reason)
    : Ancestors::Exception{ec, reason.c_str()}
  { }
}
#divert <cpp>
auto ares::exception::Library::what() const noexcept -> char const * {
  return Ancestors::Exception::what();
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace ares::unmanaged {
  //
  // The delete functions for the various types
  //
  // Usage:
  //
  //    as the companion deleter of std::unique_ptr<TYPE>
  //
  namespace free {
    enum Name
      { DATA,
        HOST,
        STRING,
        URI };
    enum Destruction
      { DROPPING,
        FREEING };
  }
  template<free::Name FREE, typename TYPE> struct [[deprecated("we are not using this any more")]] Free;
}
#endiv
#divert <hpp>
namespace ares {
  template<unmanaged::free::Name FREE, typename TYPE> struct unmanaged::Free {
    using Value = TYPE;
    inline explicit Free(free::Destruction);
    inline auto operator()(Value *) const -> void;
  protected:
    free::Destruction destruction;
  };
}
#forward ares.unmanaged.Host
#forward ares.unmanaged.Uri
namespace ares::unmanaged {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations" // shutup our own
  template<> inline auto Free<free::HOST, unmanaged::Host>::operator()(Value *) const -> void;
  template<> inline auto Free<free::STRING, char>::operator()(Value *) const -> void;
  template<> inline auto Free<free::URI, unmanaged::Uri>::operator()(Value *) const -> void;
#pragma GCC diagnostic push
}
#endiv
#divert <ipp>
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations" // shutup our own
#import ares.unmanaged.Host
namespace ares::unmanaged {
  template<unmanaged::free::Name F, typename T> Free<F,T>::Free(free::Destruction destruction)
    : destruction{destruction}
  { }
  template<free::Name F, typename T> auto Free<F,T>::operator()(Value *pointer) const -> void {
    // [[FIXTHIS]] use some sort of constraint-assertion thingy to ensure that 'typename T' is within the realm of reason for ares_free_data
    if (free::FREEING == destruction) {
      if (nullptr != pointer) {
        ::ares_free_data(pointer);
      }
    }
  }
  template<> auto Free<free::HOST, unmanaged::Host>::operator()(Value *pointer) const -> void {
    if (free::FREEING == destruction) {
      if (nullptr != pointer) {
        ::ares_free_hostent(pointer);
      }
    }
  }
  template<> auto Free<free::STRING, char>::operator()(Value *pointer) const -> void {
    if (free::FREEING == destruction) {
      if (nullptr != pointer) {
        ::ares_free_string(pointer);
      }
    }
  }
}
#import ares.unmanaged.Uri
namespace ares::unmanaged {
  template<> auto Free<free::URI, unmanaged::Uri>::operator()(Value *pointer) const -> void {
    if (free::FREEING == destruction) {
      delete pointer; // the destructor will do the rest
    }
  }
}
#pragma GCC diagnostic push
#endiv

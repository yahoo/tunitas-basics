// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import ares.required.flags.Single
#import ares.required.flags.Plural
namespace ares::flags {
  //
  // The call-site coercion from singular to plural
  // This is a helper class intended to facilitate call-site convenience between singular and plural.
  //
  // Usage:
  //
  //   auto function(flags::Operator<Flag, Flags> -> void;
  //
  //   function(Flag::VALUE1);
  //   function(Flag::VALUE1 | Flag::VALUE2);
  //
  template<required::flags::Single SINGLE, required::flags::Plural<SINGLE> PLURAL> struct Argument;
}
#endiv
#divert <hpp>
namespace ares {
  template<required::flags::Single SINGLE, required::flags::Plural<SINGLE> PLURAL> class flags::Argument {
    using Single = SINGLE;
    using Plural = PLURAL;
    using Underlying = typename std::underlying_type<Plural>::type;
  public:
    inline Argument(Single);
    inline Argument(Plural);
    using Value = Plural;
    template<typename RESULT> inline auto get() const -> RESULT requires (std::is_same<RESULT, Plural>::value || std::is_same<RESULT, Underlying>::value);
  protected:
    Value value;
  };
}
#endiv
#divert <ipp>
namespace ares::flags {
  template<required::flags::Single S, required::flags::Plural<S> P> Argument<S,P>::Argument(Single single) : value{single | single} { }
  template<required::flags::Single S, required::flags::Plural<S> P> Argument<S,P>::Argument(Plural plural) : value{plural} { }
  template<required::flags::Single S, required::flags::Plural<S> P> template<typename RESULT> auto Argument<S,P>::get() const -> RESULT
    requires (std::is_same<RESULT, Plural>::value || std::is_same<RESULT, Underlying>::value) {
    return RESULT{value};
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import ares
namespace ares::channel {
  //
  // The channel (a layer above the socket)
  //
  // Usage: (Scenario #1)
  //
  //   auto channel = Channel{};             ... the defaults are frequently fine
  //      ...channel.set_<this-or-that>(...somehow...);
  //   quto qdn = ...somehow...
  //   quto dnsclass = ...somehow...
  //   quto dnstype = ...somehow...
  //   quto receive = ...somehow...
  //   query(channel, qdn, dnsclass, dnstype, receive);
  //
  // Usage: (Scenario #2)
  //
  //   auto channel = Channel{blob, set};     ... this is an about-to-be-deprecated interface
  //      ...channel.set_<this-or-that>(...somehow...);
  //   quto qdn = ...somehow...
  //   quto dnsclass = ...somehow...
  //   quto dnstype = ...somehow...
  //   quto receive = ...somehow...
  //   query(channel, qdn, dnsclass, dnstype, receive);
  struct Channel;
}
#endiv
#divert <hpp>
#import ares.channel.option.Blob
#import ares.channel.option.Saved
#import c.const_stringz
#import ip.in4
#import ip.in6
#import re.string
namespace ares::channel {
  inline auto swap(Channel &, Channel &) noexcept -> void;
}
class ares::channel::Channel {
public:
  inline Channel();
  inline Channel(option::Blob const &, option::Set);
  inline Channel(Channel const &) = delete;
  inline auto operator=(Channel const &) -> Channel & = delete;
  inline Channel(Channel &&) noexcept;
  inline auto operator=(Channel &&) noexcept -> Channel &;
  inline ~Channel();
  inline auto dup() -> Channel; // this is the [expensive] duplicator (copy), not the copy constructor, which is too easy to use
  [[deprecated]] inline auto save() const -> option::Saved;
  inline auto cancel() -> void;
  // the "integer hack interface" is not available; e.g. ip::in4::addr_t, ip::in6::addr_t
  inline auto set_source(ip::in4::addr) -> void;
  inline auto set_source(ip::in6::addr) -> void;
  inline auto set_source(re::string<c::const_stringz> device) -> void;
  //
  // Syntax:
  //
  //   <quote>
  //      A space separated list of IP-address-netmask pairs.  This is NOT the CIDR notation.
  //      The netmask is optional but follows the address after a slash if present.
  //      For example,
  //        "130.155.160.0/255.255.240.0 130.155.0.0".
  //   </quote>
  //
  // There is no stated memory management policy for thie string [you may assume it is copied into the channel].
  inline auto set_address_ordering_specification(re::string<c::const_stringz> specification) -> void;
  [[deprecated]] inline auto set_sortlist(re::string<c::const_stringz> specification) -> void;
protected:
  friend auto channel::swap(Channel &, Channel &) noexcept -> void;
  using Pointer = ::ares_channel;
  inline explicit Channel(Pointer);
  Pointer pointer; 
public:
  inline auto get() const noexcept -> Pointer;
  inline auto release() noexcept -> Pointer;
  inline auto reset(Pointer = Pointer{}) -> void;
};
#endiv
#divert <ipp>
#import std.swap
auto ares::channel::swap(Channel &a, Channel &b) noexcept -> void {
  std::swap(a.pointer, b.pointer);
}
#import ares.exception.Library
#import ares.exception.Null
#import ares.error.category
#import std.error_code
#import std.move
namespace ares::channel {
  Channel::Channel()
    : pointer{nullptr} { 
    auto created = ares_init(&pointer);
    if (ARES_SUCCESS != created || nullptr == pointer) {
      throw exception::Library{std::error_code{created, error::category()}, "init"};
    }
  }
  Channel::Channel(Pointer pointer)
    : pointer{pointer}
  { }
  Channel::Channel(option::Blob const &blob, option::Set set)
    : pointer{nullptr} {
    // [[FIXTHIS]] in c-ares/ares_init.c, this nonconst pointer is passed to init_by_options which reestablishes its constness.
    auto castaway_const_for_c_ares = const_cast<::ares_options *>(static_cast<::ares_options const *>(&blob));
    auto created = ares_init_options(&pointer, castaway_const_for_c_ares, (int)set);
    if (ARES_SUCCESS != created || nullptr == pointer) {
      throw exception::Library{std::error_code{created, error::category()}, "init"};
    }
  }
  Channel::Channel(Channel &&other) noexcept
    : pointer{nullptr} {
    swap(*this, other);
  }
  auto Channel::operator=(Channel &&other) noexcept -> Channel & {
    swap(*this, other);
    return *this;
  }
  Channel::~Channel() {
    if (nullptr != pointer) {
      // Because this is a call into the C runtime, we know this cannot throw
      ::ares_destroy(pointer);
    }
  }
  auto Channel::dup() -> Channel {
    if (nullptr == pointer) { throw exception::Null{}; }
    Pointer newbie{nullptr};
    auto duped = ares_dup(&newbie, pointer);
    if (ARES_SUCCESS != duped) {
      throw exception::Library{std::error_code{duped, error::category()}, "dup"};
    }
    return Channel{newbie};
  }
  auto Channel::save() const -> option::Saved {
    if (nullptr == pointer) { throw exception::Null{}; }
    option::Blob blob;
    option::Set set;
    static_assert(sizeof (std::underlying_type<option::Set>::type) == sizeof (int));
    auto saved = ares_save_options(pointer, &blob, reinterpret_cast<int *>(&set));
    if (ARES_SUCCESS != saved) {
      throw exception::Library{std::error_code{saved, error::category()}, "save_options"};
    }
    return {std::move(blob), std::move(set)};
  }
  auto Channel::cancel() -> void {
    if (nullptr == pointer) { throw exception::Null{}; }
    ::ares_cancel(pointer);
  }
}
#import ip.as
namespace ares::channel {
  auto Channel::set_source(ip::in4::addr a4) -> void {
    if (nullptr == pointer) { throw exception::Null{}; }
    ::ares_set_local_ip4(pointer, ip::as<ip::in4::addr_t>(a4));
  }
  auto Channel::set_source(ip::in6::addr a6) -> void {
    if (nullptr == pointer) { throw exception::Null{}; }
    ::ares_set_local_ip6(pointer, reinterpret_cast<unsigned char const *>(&a6));
  }
  auto Channel::set_source(re::string<c::const_stringz> device) -> void {
    if (nullptr == pointer) { throw exception::Null{}; }
    ::ares_set_local_dev(pointer, (char const *) device);
  }
  auto Channel::set_address_ordering_specification(re::string<c::const_stringz> specification) -> void {
    if (nullptr == pointer) { throw exception::Null{}; }
    auto set = ::ares_set_sortlist(pointer, (char const *) specification);
    if (ARES_SUCCESS != set) {
      throw exception::Library{std::error_code{set, error::category()}, "set_address_ordering_specification"};
    }
  }
  auto Channel::set_sortlist(re::string<c::const_stringz> specification) -> void {
    set_address_ordering_specification(specification);
  }
  auto Channel::get() const noexcept -> Pointer {
    return pointer;
  }
  auto Channel::release() noexcept -> Pointer {
    Pointer previous{nullptr};
    std::swap(pointer, previous);
    return previous;
  }
  auto Channel::reset(Pointer newbie) -> void {
    // Only because this is a call into the C runtime do we know this won't throw.
    Channel replacement{newbie};
    swap(*this, replacement);
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import ares.Buffer
#import ares.Channel
#import ares.Count
#import ares.error.Code
#import ares.dns.Class
#import ares.dns.Type
#import ares.required.query
#import c.const_stringz
#import re.string
#import std.function
#import std.is_copy_constructible
namespace ares::channel {
  //
  // Perform a query, with a continuation
  //
  //
  // Usage:
  //
  //   auto channel = Channel{...somehow...};
  //   auto dnsclass = dns::Class{...somehow...};
  //   auto dnstype = dns::Type{...somehow...};
  //   ... each variant is differently convenient...
  //   query(...arguments...)
  //   ...process-until-done-idiom...                 see process.xcpp
  //
  namespace packaging::qquueerry::function {
    using Name = re::string<c::const_stringz>;
    //
    // Variant #1, a nearby lambda which is converted into a stateless std::function<...>
    //
    //   auto something1 = ...somehow...
    //   auto something2 = ...somehow...
    //   auto dark_side = ...somehow...
    //   auto lambda = [&something, &something2, &dark_side](error::Code code, Count timeouts, Buffer<std::byte const> buffer) { ...somehow... });
    //   ares::query(channel, dnsclass, dnstype, lambda);
    //
    using Function = std::function<void (error::Code, Count, Buffer<std::byte const>)>;
#if 8 < __GNUC__
    //
    //    Feels like a compiler bug ...
    //    within the requires check the arguments to the std::function resolve as empty, therefore the concept check fails
    //    Witness:
    //
    //      'std::is_base_of<std::function<void()>, FUNCTION>::value' evaluated to false
    //
    //    gcc-c++-8.2.1-5.fc29.x86_64
    //
    //    src/ares/channel/query.xcpp:42:45: note: candidate: ‘void ares::channel::packaging::qquueerry::function::qq(ares::channel::Channel&, ares::channel::packaging::qquueerry::function::Name, ares::dns::Class, ares::dns::Type, FUNCTION*) requires  std::is_base_of<std::function<void()>, FUNCTION>::value [with FUNCTION = const tunitas::scarpet::answer::processor::Stanza<(tunitas::scarpet::answer::processor::Name)0>; ares::channel::packaging::qquueerry::function::Name = re::construct::String<c::detail::Stringz<const char> >; ares::dns::Class = __ns_class; ares::dns::Type = __ns_type]’
    //    src/ares/channel/query.xcpp:42:45: note:   constraints not satisfied
    //    src/ares/channel/query.xcpp:42:45: note: ‘std::is_base_of<std::function<void()>, FUNCTION>::value’ evaluated to false
    //
    template<typename FUNCTION> inline auto query(Channel &, Name, dns::Class, dns::Type, FUNCTION *) -> void requires std::is_base_of<Function, FUNCTION>::value;
    template<typename FUNCTION> inline auto qq(Channel &c, Name n, dns::Class l, dns::Type t, FUNCTION *f) -> void requires std::is_base_of<Function, FUNCTION>::value { query(c, n, l, t, f); }
#endif
    inline auto query(Channel &, Name, dns::Class, dns::Type, Function) -> void;
    inline auto qq(Channel &c, Name n, dns::Class l, dns::Type t, Function f) -> void { query(c, n, l, t, f); }
    namespace detail { auto _receive(void *, int, int, unsigned char *, int) noexcept -> void; }
    //
    // Variant #2, a function, indexed by a typename
    //
    //   auto state = my::State{...somehow...};
    //   auto continuation = ares::continuation::Query<my::State>{};
    //   ares::query(channel, dnsclass, dnstype, continuation, state);
    //
    template<typename STATE, required::query::Continuation<STATE> QUERY> inline auto query(Channel &, Name qdn, dns::Class, dns::Type, QUERY, STATE &) -> void;
    template<typename STATE, required::query::Continuation<STATE> QUERY> inline auto qq(Channel &c, Name n, dns::Class l, dns::Type y, QUERY q, STATE &s) -> void { query(c, n, l, y, q, s); }
    //
    // Variant #3, a function object endpoint
    //
    //   auto function = my::Function<my::State>{};    ............... inherits from ares::function::Query<STATE> and implements receive(...)
    //   ares::query(channel, dnsclass, dnstype, function);            see the commentariat in .../ares/function/Query.xcpp
    //
    template<required::query::Function QUERY> inline auto query(Channel &, Name qdn, dns::Class, dns::Type, QUERY &) -> void;
    template<required::query::Function QUERY> inline auto qq(Channel &c, Name n, dns::Class l, dns::Type y, QUERY &q) -> void { query(c, n, l, y, q); }
  }
  using packaging::qquueerry::function::query;
  using packaging::qquueerry::function::qq;
}
#endiv
#divert <ipp>
#import ares.exception.Invariant
#import ares.exception.Null
#import c.str
namespace ares::channel::packaging::qquueerry {
#if 8 < __GNUC__
  template<typename FUNCTION> auto function::query(Channel &ch, Name qdn, dns::Class cl, dns::Type ty, FUNCTION *function) -> void
    requires std::is_base_of<std::function<void (error::Code, Count, Buffer<std::byte const>)>, FUNCTION>::value {
    if (nullptr == function) { throw exception::Null{}; }
    ::ares_query(ch.get(), c::str(qdn), (int) cl, (int) ty, &detail::_receive, function);
  }
#endif
  auto function::query(Channel &ch, Name qdn, dns::Class cl, dns::Type ty, Function function) -> void {
    if (!function) { throw exception::Null{}; }
    ::ares_query(ch.get(), c::str(qdn), (int) cl, (int) ty, &detail::_receive, new Function{function}); // is destroyed in receive(...) and upon Channel::cancel()
  }
  template<typename STATE, required::query::Continuation<STATE> CONTINUATION> auto function::query(Channel &ch, Name qdn, dns::Class cl, dns::Type ty, CONTINUATION, STATE &st) -> void {
    ::ares_query(ch.get(), c::str(qdn), (int) cl, (int) ty, CONTINUATION::_receive, reinterpret_cast<void *>(&st));
  }
  template<required::query::Function FUNCTION> auto function::query(Channel &ch, Name qdn, dns::Class cl, dns::Type ty, FUNCTION &fu) -> void {
    ::ares_query(ch.get(), c::str(qdn), (int) cl, (int) ty, &FUNCTION::template _receive<FUNCTION>, reinterpret_cast<void *>(&fu));
  }
}
#endiv
#divert <cpp>
#import ares.exception.Invariant
#import std.unique_ptr
namespace ares::channel::packaging::qquueerry {
  auto function::detail::_receive(void *_function, int _status, int _timeouts, unsigned char *_buffer, int _length) noexcept -> void try {
    std::unique_ptr<Function> safety{reinterpret_cast<Function *>(_function)};
    Function &function{*safety};
    auto status = error::Code{_status};
    if (_timeouts < 0) { throw exception::Invariant{"negative count"}; }
    auto timeouts = Count(_timeouts);
    if (_length < 0) { throw exception::Invariant{"negative length"}; }
    auto buffer = Buffer<std::byte const>{reinterpret_cast<std::byte const *>(_buffer), std::size_t(_length)};
    function(status, timeouts, buffer);
  } catch (...) {
    // What can we do?  exceptions must not cross back into the C runtime.
    // [[FIXTHIS]] either rebuild ares event pumping to be in the C++ runtime; or else use the "save the exception" separately trickery.
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace ares::channel {
  //
  // Guard a channel.
  // Cancel the pending operations if the guard goes out of scope.
  // e.g. when an excetion is thrown, passing by the current stack frame
  //
  // Usage:
  //
  //   try {
  //     Channel channel{...somehow...};
  //     ...start some queies with stack-based state...
  //     ...
  //     ...variables...
  //     auto const receive [...variables...](error::Code, Count, Buffer<std::byte const> buffer) {
  //        ...handle...
  //     };
  //     ...
  //     channel::Guard guard{channel};
  //     query(channel, "example.com", dns::IN, dns::AAAA, receive);
  //     run(channel);
  //
  class Guard;
}
#endiv
#divert <hpp>
#import ares.channel.Channel
class ares::channel::Guard {
public:
  inline explicit Guard(Channel &);
  Guard(Guard const &) = delete;
  auto operator=(Guard const &) -> Guard & = delete;
  inline ~Guard() noexcept(false);
  inline auto disable() noexcept -> void;
protected:
  Channel *supervised;
};
#endiv
#divert <ipp>
namespace ares::channel {
  Guard::Guard(Channel &supervised) : supervised{&supervised} { }
  Guard::~Guard() noexcept(false) {
    if (nullptr != supervised) {
      supervised->cancel();
    }
  }
  auto Guard::disable() noexcept -> void {
    supervised = nullptr;
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace ares::channel::option {
  //
  // The option blob.
  // The fields are announced in a nearby option::Set.
  // This system is announced as effectively deprecated in c-ares-devel-1.13.0-5.fc29.x86_64.
  // Something about how ares_options is "locked" and will have no new fields added to it, since 1.6
  // The ::ares_options structure cannot (does not) support IPv6.
  //
  // We are not putting a lot of of effort into making this a cogent and elegant API because ... it is deprecated.
  //
  // Move semantics, not copy semantics.
  // There is no destructor; use option::Saved for a memory-managed version
  //
  // Usage:
  //
  //   see Channel::Channel(...constructors...)
  //
  [[deprecated]] struct Blob;
}
#endiv
#divert <hpp>
struct ares::channel::option::Blob : public ::ares_options {
  inline Blob();
  Blob(Blob const &) = delete;
  auto operator=(Blob const &) -> Blob & = delete;
  inline Blob(Blob &&) noexcept;
  inline auto operator=(Blob &&) noexcept -> Blob &;
};
#endiv
#divert <ipp>
#import nonstd.uninitialized.zero
#import nonstd.uninitialized.move
#import std.byte
namespace ares::channel::option {
  Blob::Blob() {
    nonstd::uninitialized::zero(*this);
  }
  Blob::Blob(Blob &&other) noexcept {
    auto const *source{&other};
    nonstd::uninitialized::move(reinterpret_cast<std::byte const *>(&source[0]),
                                reinterpret_cast<std::byte const *>(&source[1]),
                                reinterpret_cast<std::byte *>(this));
    nonstd::uninitialized::zero(other);
  }
  auto Blob::operator=(Blob &&other) noexcept -> Blob & {
    auto const *source{&other};
    nonstd::uninitialized::move(reinterpret_cast<std::byte const *>(&source[0]),
                                reinterpret_cast<std::byte const *>(&source[1]),
                                reinterpret_cast<std::byte *>(this));
    nonstd::uninitialized::zero(other);
    return *this;
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import ares.channel.Channel
#import ares.Count
#import ares.time.Duration
#import ares.required.time.Duration
namespace ares::channel {
  //
  // Run, clearing out the rest of the pending event queue.
  //
  // Usage:
  //
  //   auto channel = Channel{...somehow...};
  //   ...send off some queries...
  //   run(channel);
  //
  //   run(channel, 10_count, 300ms);   ... 3 seconds total
  //
  inline auto run(Channel &) -> void;
  inline auto run(Channel &, Count timeouts, time::Duration each) -> void;
  template<required::time::Duration DURATION> inline auto run(Channel &, Count timeouts, DURATION each) -> void;
}
#endiv
#divert <ipp>
#import ares.time.Duration
#import ares.time.duration_cast
template<ares::required::time::Duration DURATION> auto ares::channel::run(Channel &ch, Count ti, DURATION ea) -> void {
  run(ch, ti, time::duration_cast<time::Duration>(ea));
}
#import ares.fd.selectable
#import ares.fd.select
#import ares.fd.Sets
#import ares.fd.process
#import ares.channel.timeout
#import sys.error.E.constants
auto ares::channel::run(Channel &channel) -> void {
  do {
    fd::Sets rw;
    auto c = selectable(channel, rw);
    if (zero(c)) {
      break;
    }
    auto limit = timeout(channel);
    auto selected = select(c, rw, limit);
    if (!ok(selected) && sys::error::E::INTR != error_code(selected)) {
      break;
    }
    process(channel, rw);
  } while(true);
}
auto ares::channel::run(Channel &channel, Count timeout_count, time::Duration timeout_each) -> void {
  ++timeout_count;
  do {
    fd::Sets rw;
    auto c = selectable(channel, rw);
    if (zero(c)) {
      break;
    }
    auto limit = timeout(channel, timeout_each);
    auto selected = select(c, rw, limit);
    if (!ok(selected) && sys::error::E::INTR != error_code(selected)) {
      break;
    }
    process(channel, rw);
  } while (!zero(--timeout_count));
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import ares.channel.Channel
#import ares.time.durations
namespace ares::channel {
  //
  // Compute the new timeout against the queue in the channel and an optional maximum.
  // Compute the timeout in the metric time of std::chrono; e.g. 100ms, 100us, 10s, etc.
  //
  // Ambiguity resolved as timeout(...) vs time_bound(...)
  // You may be looking for time_bound(Channel, optional<Duration>)
  //
  // Usage:
  //
  //   auto channel = Channel{...somehow...};
  //   ...send off some queries...
  //   ...
  //   auto limit = timeout(channel);
  //   auto limit = timeout(channel, 100ms);
  //
  //   auto limit = timeout_maybe(channel);
  //   auto limit = timeout_maybe(channel, 100ms);
  //
  inline auto timeout(Channel &) -> time::Duration;
  inline auto timeout(Channel &, time::Duration) -> time::Duration;
}
#endiv
#divert <ipp>
#import ares.time.duration_cast
#import sys.time.as
#import sys.time.val
auto ares::channel::timeout(Channel &channel) -> time::Duration {
  auto desired = sys::time::val{};
  ::ares_timeout(channel.get(), nullptr, &desired);
  return time::duration_cast<time::Duration>(sys::time::as<sys::time::duration>(desired));
}
auto ares::channel::timeout(Channel &channel, time::Duration boundary) -> time::Duration {
  auto maximum = sys::time::as<sys::time::val>(time::duration_cast<sys::time::duration>(boundary));
  auto desired = maximum; // ares_timeout(3) says: it is valid for maximum and desired to have the same value
  ::ares_timeout(channel.get(), &maximum, &desired);
  return time::duration_cast<time::Duration>(sys::time::as<sys::time::duration>(desired));
}
#endiv

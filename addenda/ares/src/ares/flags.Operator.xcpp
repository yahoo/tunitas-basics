// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import ares.required.flags.Single
#import ares.required.flags.Plural
namespace ares::flags {
  //
  // An implementation detail.
  // A flag, its plural in a "mask" and the composition operators to create that
  //
  template<required::flags::Single SINGLE, required::flags::Plural<SINGLE> PLURAL> struct Operator;
}
#endiv
#divert <hpp>
namespace ares {
  template<required::flags::Single SINGLE, required::flags::Plural<SINGLE> PLURAL> class flags::Operator {
    struct ext {
      using Single = SINGLE;
      using Plural = PLURAL;
    };
    struct imp {
      using Single = typename std::underlying_type<typename ext::Single>::type;
      using Plural = typename std::underlying_type<typename ext::Plural>::type;
    };
  public:
    static constexpr auto compose(typename ext::Single a, typename ext::Single b) -> typename ext::Plural { return typename ext::Plural{typename imp::Single(a) | typename imp::Plural(b)}; }
    static constexpr auto compose(typename ext::Plural a, typename ext::Single b) -> typename ext::Plural { return typename ext::Plural{typename imp::Plural(a) | typename imp::Single(b)}; }
    static constexpr auto compose(typename ext::Single a, typename ext::Plural b) -> typename ext::Plural { return typename ext::Plural{typename imp::Single(a) | typename imp::Plural(b)}; }
    static constexpr auto compose(typename ext::Plural a, typename ext::Plural b) -> typename ext::Plural { return typename ext::Plural{typename imp::Plural(a) | typename imp::Plural(b)}; }
  };
}
#endiv

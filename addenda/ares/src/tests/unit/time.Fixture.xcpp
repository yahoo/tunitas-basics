// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::time { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
class tests::unit::time::Fixture : public cppunit::test::Fixture {
public:
  auto test_Duration() -> void;
  auto test_duration_cast() -> void;
  auto test_units() -> void;
  auto test_literals_ours() -> void;
  auto test_literals_chrono() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import ares.time.durations
#import std.chrono.duration
#import std.int64_t
auto tests::unit::time::Fixture::test_Duration() -> void {
  using Subject = ::ares::time::duration::Basic<std::ratio<1>>;
  auto subject = Subject{1};
  CPPUNIT_ASSERT(std::chrono::duration<std::int64_t>{1} == subject);
}
#import ares.time.duration_cast
auto tests::unit::time::Fixture::test_duration_cast() -> void {
  using namespace ::ares::time;
  auto ms = Milliseconds{100};
  auto ds = duration_cast<Deciseconds>(ms);
  auto const expected = Deciseconds{1};
  auto const actual = ds;
  CPPUNIT_ASSERT(expected == actual);
}
auto tests::unit::time::Fixture::test_units() -> void {
  using namespace ::ares::time;
  auto hours = Hours{1};
  auto kilos = Kiloseconds{1};
  auto hectos = Hectoseconds{1};
  auto minutes = Minutes{1};
  auto decas = Decaseconds{1};
  auto seconds = Seconds{1};
  auto decis = Deciseconds{1};
  auto centis = Centiseconds{1};
  auto millis = Milliseconds{1};
  auto micros = Microseconds{1};
  auto nanos = Nanoseconds{1};
  CPPUNIT_ASSERT(hours > kilos);
  CPPUNIT_ASSERT(kilos > hectos);
  CPPUNIT_ASSERT(hectos > minutes);
  CPPUNIT_ASSERT(minutes > decas);
  CPPUNIT_ASSERT(decas > seconds);
  CPPUNIT_ASSERT(seconds > decis);
  CPPUNIT_ASSERT(decis > centis);
  CPPUNIT_ASSERT(centis > millis);
  CPPUNIT_ASSERT(millis > micros);
  CPPUNIT_ASSERT(micros > nanos);
}
#import ares.time.literals
auto tests::unit::time::Fixture::test_literals_ours() -> void {
  using namespace ::ares::time::literals;
  auto hours = 1_hour;
  auto kilos = 1_ks;;
  auto hectos = 1_hs;
  auto minutes = 1_minute;
  auto decas = 1_das;
  auto seconds = 1_s;
  auto decis = 1_ds;
  auto centis = 1_cs;
  auto millis = 1_ms;;
  auto micros = 1_us;
  auto nanos = 1_ns;
  CPPUNIT_ASSERT(hours > kilos);
  CPPUNIT_ASSERT(kilos > hectos);
  CPPUNIT_ASSERT(hectos > minutes);
  CPPUNIT_ASSERT(minutes > decas);
  CPPUNIT_ASSERT(decas > seconds);
  CPPUNIT_ASSERT(seconds > decis);
  CPPUNIT_ASSERT(decis > centis);
  CPPUNIT_ASSERT(centis > millis);
  CPPUNIT_ASSERT(millis > micros);
  CPPUNIT_ASSERT(micros > nanos);
}
auto tests::unit::time::Fixture::test_literals_chrono() -> void {
  using namespace ::ares::time::literals;
  auto hours = 1h;
  auto minutes = 1min;
  auto seconds = 1s;
  auto millis = 1ms;;
  auto micros = 1us;
  auto nanos = 1ns;
  CPPUNIT_ASSERT(hours > minutes);
  CPPUNIT_ASSERT(minutes > seconds);
  CPPUNIT_ASSERT(seconds > millis);
  CPPUNIT_ASSERT(millis > micros);
  CPPUNIT_ASSERT(micros > nanos);
}
#import rigging.suite.io
auto tests::unit::time::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("time");
  series << call("Duration", &Fixture::test_Duration)
         << call("duration_cast", &Fixture::test_duration_cast)
         << call("units", &Fixture::test_units)
    ;
  {
    Stream lit("literals");
    lit << call("ours", &Fixture::test_literals_ours)
        << call("chrono", &Fixture::test_literals_chrono)
      ;
    series << move(lit);
  }
  return finalize(series);
}
#endiv

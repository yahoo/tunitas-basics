// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::channel { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
class tests::unit::channel::Fixture : public cppunit::test::Fixture {
public:
  auto test_usage_Channel() -> void;
  auto test_usage_Guard() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import ares.Library
#import ares.Channel
auto tests::unit::channel::Fixture::test_usage_Channel() -> void {
  ::ares::Library library;
  ::ares::Channel subject;
  CPPUNIT_ASSERT(nullptr != subject.get());
}
#import ares.channel.Guard
auto tests::unit::channel::Fixture::test_usage_Guard() -> void {
  ::ares::Library library;
  ::ares::Channel specimen;
  CPPUNIT_ASSERT(nullptr != specimen.get());
  {
    ::ares::channel::Guard subject{specimen};
    subject.disable();
  } {
    ::ares::channel::Guard subject{specimen};
  }
}
#import tests.unit.channel.Channel
#import tests.unit.channel.option.Fixture
#import rigging.suite.io
auto tests::unit::channel::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series{"channel"};
  {
    Stream use{"usage"};
    use << call("Channel", &Fixture::test_usage_Channel)
        << call("Guard", &Fixture::test_usage_Guard)
      ;
    series << move(use);
  }
  series << add<Channel>()
         << add<option::Fixture>()
    ;
  return finalize(series);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#include <hpp/tests.unit.query.Fixture>
namespace tests::unit::query {
  template<> struct Fixture::Function<void>;
}
#endiv
#divert <hpp>
#import std.string
#import ares.function.Query.void
#import ip.in6 // in6::addr
#import std.optional
namespace tests::unit::query {
  template<> class Fixture::Function<void> : public ::ares::function::Query<void> {
    using ancestor = ::ares::function::Query<void>;
  public:
    explicit Function(std::string query_fqdn);
    auto receive(::ares::error::Code, ::ares::Count, ::ares::Buffer<std::byte const>) -> void final;
    std::string query_fqdn;
    std::optional<ip::in6::addr> result;
  };
};
#endiv
#divert <cpp>
#import std.move
#import std.error_code
namespace tests::unit::query {
  Fixture::Function<void>::Function(std::string query_fqdn)
    : query_fqdn{std::move(query_fqdn)}
  { }
  auto Fixture::Function<void>::receive(::ares::error::Code code, ::ares::Count count, ::ares::Buffer<std::byte const> buffer) -> void {
    std::error_code ec{code};
    if (::ares::error::Code::SUCCESS == code) {
      this->result = ip::in6::addr{};
    } else {
      std::cerr << __FUNCTION__ << ' ' << __FILE__ << ':' << __LINE__ << ':'
                << " failed to find " << this->query_fqdn << " because " << ec.message()
                << '\n';
    }
  }
}
#endiv

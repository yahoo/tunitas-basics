// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::fd { class Set; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
#import ares.fd.Set
class tests::unit::fd::Set : public cppunit::test::Fixture {
public:
  using Subject = ares::fd::Set;
  auto test_constructor() -> void;
  auto test_repointer() -> void;
  auto test_read() -> void;
  auto test_write() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
auto tests::unit::fd::Set::test_constructor() -> void {
  Subject subject;
  CPPUNIT_ASSERT(sizeof (subject));
}
auto tests::unit::fd::Set::test_repointer() -> void {
  Subject subject;
  // No elements have been added to the set
  CPPUNIT_ASSERT(0 == subject.size());
}
#import sys.fd.set.Reference // read(...) and write(...)
auto tests::unit::fd::Set::test_read() -> void {
  Subject subject;
  auto rr = read(subject);
  CPPUNIT_ASSERT(nullptr != rr->repointer());
}
auto tests::unit::fd::Set::test_write() -> void {
  Subject subject;
  auto ww = write(subject);
  CPPUNIT_ASSERT(nullptr != ww->repointer());
}
#import rigging.suite.io
auto tests::unit::fd::Set::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series{"Set"};
  series << call("constructor", &Set::test_constructor)
         << call("repointer", &Set::test_repointer)
         << call("read", &Set::test_read)
         << call("write", &Set::test_write)
    ;
  return finalize(series);
}
#endiv

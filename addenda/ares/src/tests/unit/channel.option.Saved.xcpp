// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::channel::option { class Saved; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
#import ares.Channel
#import ares.channel.option.Saved
class tests::unit::channel::option::Saved : public cppunit::test::Fixture {
public:
  using Channel = ::ares::Channel;
  using Subject = ::ares::channel::option::Saved;
  auto test_constructor_default() -> void;
  auto test_constructor_blob() -> void;
  auto test_constructor_blob_set() -> void;
  auto test_constructor_move() -> void;
  auto test_assignment_move() -> void;
  auto test_destructor() -> void;
  static auto suite() -> cppunit::Test *;
protected:
  static auto generate() -> Channel;
};
#endiv
#divert <cpp>
#import ares.channel.option.Blob
#import ares.channel.option.Set
auto tests::unit::channel::option::Saved::generate() -> Channel {
  using namespace ::ares::channel::option;
  Blob blob{};
  Set set{};
  return Channel{blob, set};
}
auto tests::unit::channel::option::Saved::test_constructor_default() -> void {
  Subject subject;
  CPPUNIT_ASSERT(0 != sizeof (subject));
}
auto tests::unit::channel::option::Saved::test_constructor_blob() -> void {
  Channel channel = generate();
  auto subject = channel.save(); // [[FIXTHIS]] ... this does not test the Save(Blob) 1-arg constructor
  CPPUNIT_ASSERT(0 != sizeof (subject));
}
auto tests::unit::channel::option::Saved::test_constructor_blob_set() -> void {
  Channel channel = generate();
  auto subject = channel.save(); // <-------------------------------- test this
  CPPUNIT_ASSERT(0 != sizeof (subject));
}
auto tests::unit::channel::option::Saved::test_constructor_move() -> void {
  Channel channel = generate();
  auto specimen = channel.save();
  auto subject = std::move(specimen); // <---------------------------- test this
  CPPUNIT_ASSERT(0 != sizeof (subject));
}
auto tests::unit::channel::option::Saved::test_assignment_move() -> void {
  Channel channel = generate();
  auto specimen = channel.save();
  Subject subject;
  subject = std::move(specimen); // <-------------------------- test this
  CPPUNIT_ASSERT(0 != sizeof (subject));
}
auto tests::unit::channel::option::Saved::test_destructor() -> void {
  // Every other test case tests the destructor
  CPPUNIT_ASSERT(true);
}
#import rigging.suite.io
auto tests::unit::channel::option::Saved::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series{"Saved"};
  {
    Stream con{"constructor"};
    con << call("default", &Saved::test_constructor_default)
        << call("blob", &Saved::test_constructor_blob)
        << call("blob,set", &Saved::test_constructor_blob_set)
        << call("move", &Saved::test_constructor_move)
      ;
    series << move(con);
  } {
    Stream ass{"assignment"};
    ass << call("move", &Saved::test_constructor_move)
      ;
    series << move(ass);
  }
  series << call("destructor", &Saved::test_destructor)
    ;
  return finalize(series);
}
#endiv

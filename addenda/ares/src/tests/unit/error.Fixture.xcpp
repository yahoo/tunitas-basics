// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::error { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
class tests::unit::error::Fixture : public cppunit::test::Fixture {
public:
  auto test_Condition() -> void;
  auto test_Code() -> void;
  auto test_Category() -> void;
  auto test_category() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.error_condition
#import ares.error.Condition
auto tests::unit::error::Fixture::test_Condition() -> void {
  using ::ares::error::Condition;
  // This tests that type-enabled constructor via std::is_error_condition_enum
  CPPUNIT_ASSERT(Condition::SUCCESS == std::error_condition{Condition::SUCCESS});
  CPPUNIT_ASSERT(Condition::FAILURE == std::error_condition{Condition::FAILURE});
}
#import std.error_code
#import ares.error.Code
#import ares.error.Condition
auto tests::unit::error::Fixture::test_Code() -> void {
  using ::ares::error::Condition;
  using ::ares::error::Code;
  // This tests that type-enabled constructor via std::is_error_code_enum
  // Mention them all ... to prove they exist
  CPPUNIT_ASSERT(Condition::SUCCESS == std::error_code{Code::SUCCESS});
  CPPUNIT_ASSERT(Condition::FAILURE == std::error_code{Code::NODATA});
  CPPUNIT_ASSERT(Condition::FAILURE == std::error_code{Code::FORMERR});
  CPPUNIT_ASSERT(Condition::FAILURE == std::error_code{Code::SERVFAIL});
  CPPUNIT_ASSERT(Condition::FAILURE == std::error_code{Code::NOTFOUND});
  CPPUNIT_ASSERT(Condition::FAILURE == std::error_code{Code::REFUSED});
  CPPUNIT_ASSERT(Condition::FAILURE == std::error_code{Code::BADQUERY});
  CPPUNIT_ASSERT(Condition::FAILURE == std::error_code{Code::TIMEOUT});
  CPPUNIT_ASSERT(Condition::FAILURE == std::error_code{Code::OF});
  CPPUNIT_ASSERT(Condition::FAILURE == std::error_code{Code::END_OF_FILE});
  CPPUNIT_ASSERT(Condition::FAILURE == std::error_code{Code::FILE});
  CPPUNIT_ASSERT(Condition::FAILURE == std::error_code{Code::NOMEM});
  CPPUNIT_ASSERT(Condition::FAILURE == std::error_code{Code::DESTRUCTION});
  CPPUNIT_ASSERT(Condition::FAILURE == std::error_code{Code::BADSTR});
  CPPUNIT_ASSERT(Condition::FAILURE == std::error_code{Code::BADFLAGS});
  CPPUNIT_ASSERT(Condition::FAILURE == std::error_code{Code::NONAME});
  CPPUNIT_ASSERT(Condition::FAILURE == std::error_code{Code::BADHINTS});
  CPPUNIT_ASSERT(Condition::FAILURE == std::error_code{Code::NOTINITIALIZED});
  CPPUNIT_ASSERT(Condition::FAILURE == std::error_code{Code::LOADIPHLPAPI});
  CPPUNIT_ASSERT(Condition::FAILURE == std::error_code{Code::ADDRGETNETWORKPARAMS});
  CPPUNIT_ASSERT(Condition::FAILURE == std::error_code{Code::CANCELED});
}
#import ares.error.category
#import ares.error.Category
auto tests::unit::error::Fixture::test_Category() -> void {
  using namespace ::ares::error;
  auto const &c = category();
  {
    CPPUNIT_ASSERT(nullptr != c.name());
  } {
    CPPUNIT_ASSERT(Condition::SUCCESS == c.default_error_condition((int) Code::SUCCESS));
    CPPUNIT_ASSERT(Condition::FAILURE == c.default_error_condition((int) Code::NODATA));
    CPPUNIT_ASSERT(Condition::FAILURE == c.default_error_condition((int) Code::FORMERR));
    CPPUNIT_ASSERT(Condition::FAILURE == c.default_error_condition((int) Code::SERVFAIL));
    CPPUNIT_ASSERT(Condition::FAILURE == c.default_error_condition((int) Code::NOTFOUND));
    CPPUNIT_ASSERT(Condition::FAILURE == c.default_error_condition((int) Code::REFUSED));
    CPPUNIT_ASSERT(Condition::FAILURE == c.default_error_condition((int) Code::BADQUERY));
    CPPUNIT_ASSERT(Condition::FAILURE == c.default_error_condition((int) Code::BADNAME));
    CPPUNIT_ASSERT(Condition::FAILURE == c.default_error_condition((int) Code::BADFAMILY));
    CPPUNIT_ASSERT(Condition::FAILURE == c.default_error_condition((int) Code::BADRESP));
    CPPUNIT_ASSERT(Condition::FAILURE == c.default_error_condition((int) Code::CONNREFUSED));
    CPPUNIT_ASSERT(Condition::FAILURE == c.default_error_condition((int) Code::TIMEOUT));
    CPPUNIT_ASSERT(Condition::FAILURE == c.default_error_condition((int) Code::OF));
    CPPUNIT_ASSERT(Condition::FAILURE == c.default_error_condition((int) Code::END_OF_FILE));
    CPPUNIT_ASSERT(Condition::FAILURE == c.default_error_condition((int) Code::FILE));
    CPPUNIT_ASSERT(Condition::FAILURE == c.default_error_condition((int) Code::NOMEM));
    CPPUNIT_ASSERT(Condition::FAILURE == c.default_error_condition((int) Code::DESTRUCTION));
    CPPUNIT_ASSERT(Condition::FAILURE == c.default_error_condition((int) Code::BADSTR));
    CPPUNIT_ASSERT(Condition::FAILURE == c.default_error_condition((int) Code::BADFLAGS));
    CPPUNIT_ASSERT(Condition::FAILURE == c.default_error_condition((int) Code::NONAME));
    CPPUNIT_ASSERT(Condition::FAILURE == c.default_error_condition((int) Code::BADHINTS));
    CPPUNIT_ASSERT(Condition::FAILURE == c.default_error_condition((int) Code::NOTINITIALIZED));
    CPPUNIT_ASSERT(Condition::FAILURE == c.default_error_condition((int) Code::LOADIPHLPAPI));
    CPPUNIT_ASSERT(Condition::FAILURE == c.default_error_condition((int) Code::ADDRGETNETWORKPARAMS));
    CPPUNIT_ASSERT(Condition::FAILURE == c.default_error_condition((int) Code::CANCELED));
  }
  for (int i{-100}, e{100}; e != i; ++i) {
    auto m = c.message(i);
    CPPUNIT_ASSERT(!m.empty());
  }
}
auto tests::unit::error::Fixture::test_category() -> void {
  auto const &c = ::ares::error::category();
  CPPUNIT_ASSERT(nullptr != c.name());
}
#import rigging.suite.io
auto tests::unit::error::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series{"error"};
  series << call("Code", &Fixture::test_Code)
         << call("Condition", &Fixture::test_Condition)
         << call("Category", &Fixture::test_Category)
         << call("category", &Fixture::test_category)
    ;
  return finalize(series);
}
#endiv

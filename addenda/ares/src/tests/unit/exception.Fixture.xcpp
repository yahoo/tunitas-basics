// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::exception { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
class tests::unit::exception::Fixture : public cppunit::test::Fixture {
public:
  auto test_trivially_Argument() -> void;
  auto test_trivially_Invariant() -> void;
  auto test_trivially_Library() -> void;
  auto test_trivially_Null() -> void;
  auto test_trivially_Range() -> void;
  auto test_trivially_System() -> void;
  template<typename EXCEPTION> auto test_Aspect() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <tpp>
#import ares.exception.Aspect
template<typename EXCEPTION> auto tests::unit::exception::Fixture::test_Aspect() -> void {
  try {
    throw EXCEPTION{};
  } catch (::ares::exception::Aspect const &) {
    CPPUNIT_ASSERT(true);
  } catch (...) {
    CPPUNIT_ASSERT(false);
  }
}
#endiv
#divert <cpp>
#import ares.exception.Argument
auto tests::unit::exception::Fixture::test_trivially_Argument() -> void {
  namespace ex = ::ares::exception;
  ex::Argument subject;
  CPPUNIT_ASSERT(nullptr != subject.what());
}
#import ares.exception.Invariant
auto tests::unit::exception::Fixture::test_trivially_Invariant() -> void {
  namespace ex = ::ares::exception;
  ex::Invariant subject;
  CPPUNIT_ASSERT(nullptr != subject.what());
}
#import ares.exception.Library
auto tests::unit::exception::Fixture::test_trivially_Library() -> void {
  namespace ex = ::ares::exception;
  ex::Library subject;
  CPPUNIT_ASSERT(nullptr != subject.what());
}
#import ares.exception.Null
auto tests::unit::exception::Fixture::test_trivially_Null() -> void {
  namespace ex = ::ares::exception;
  ex::Null subject;
  CPPUNIT_ASSERT(nullptr != subject.what());
}
#import ares.exception.Range
auto tests::unit::exception::Fixture::test_trivially_Range() -> void {
  namespace ex = ::ares::exception;
  ex::Null subject;
  CPPUNIT_ASSERT(nullptr != subject.what());
}
#import ares.exception.System
auto tests::unit::exception::Fixture::test_trivially_System() -> void {
  namespace ex = ::ares::exception;
  ex::System subject;
  CPPUNIT_ASSERT(nullptr != subject.what());
}
#import tests.unit.exception.Invariant
#import tests.unit.exception.Null
#import tests.unit.exception.Library
#import tests.unit.exception.System
#import rigging.suite.io
auto tests::unit::exception::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series{"exception"};
  {
    Stream tri{"trivially"};
    tri << call("Argument", &Fixture::test_trivially_Argument)
        << call("Invariant", &Fixture::test_trivially_Invariant)
        << call("Library", &Fixture::test_trivially_Library)
        << call("Null", &Fixture::test_trivially_Null)
        << call("Range", &Fixture::test_trivially_Range)
        << call("System", &Fixture::test_trivially_System)
      ;
    series << move(tri);
  } {
    Stream asp{"Aspect"};
    namespace ex = ares::exception;
    asp << call("Argument", &Fixture::test_Aspect<ex::Argument>)
        << call("Invariant", &Fixture::test_Aspect<ex::Invariant>)
        << call("Library", &Fixture::test_Aspect<ex::Library>)
        << call("Null", &Fixture::test_Aspect<ex::Null>)
        << call("Range", &Fixture::test_Aspect<ex::Range>)
        << call("System", &Fixture::test_Aspect<ex::System>)
      ;
    series << move(asp);
  }
  series << add<Invariant>()
         << add<Library>()
         << add<Null>()
         << add<System>()
    ;
  return finalize(series);
}
#endiv

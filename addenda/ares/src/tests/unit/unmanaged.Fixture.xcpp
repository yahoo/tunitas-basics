// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::unmanaged { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
class tests::unit::unmanaged::Fixture : public cppunit::test::Fixture {
public:
  auto test_Free_DATA() -> void;
  auto test_Free_HOST() -> void;
  auto test_Free_STRING() -> void;
  auto test_Free_URI() -> void;
  auto test_usage_URI() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import ares.unmanaged.Free
auto tests::unit::unmanaged::Fixture::test_Free_DATA() -> void {
  using namespace ares::unmanaged;
  Free<free::DATA, void> fff{free::DROPPING};
  fff(nullptr); // [[FIXTHIS]] use a non nullptr to actually call the real free function
  CPPUNIT_ASSERT(true);
}
auto tests::unit::unmanaged::Fixture::test_Free_HOST() -> void {
  using namespace ares::unmanaged;
  Free<free::HOST, ::ares::unmanaged::Host> fff{free::DROPPING};
  fff(nullptr); // [[FIXTHIS]] use a non nullptr to actually call the real free function
  CPPUNIT_ASSERT(true);
}
#import strdup
auto tests::unit::unmanaged::Fixture::test_Free_STRING() -> void {
  using namespace ares::unmanaged;
  Free<free::STRING, char> fff{free::FREEING};
  fff(strdup("something"));
  CPPUNIT_ASSERT(true);
}
#import ares.unmanaged.Uri
auto tests::unit::unmanaged::Fixture::test_Free_URI() -> void {
  using namespace ares::unmanaged;
  Free<free::URI, Uri> fff{free::FREEING};
  fff(new Uri{});
  CPPUNIT_ASSERT(true);
}
#import ares.unmanaged.Uri
auto tests::unit::unmanaged::Fixture::test_usage_URI() -> void {
  using namespace ares::unmanaged;
  auto subject = Uri{};
  CPPUNIT_ASSERT(nullptr == subject.uri);
  CPPUNIT_ASSERT(0u == subject.priority);
  CPPUNIT_ASSERT(0u == subject.weight);
}
#import tests.unit.unmanaged.Uri
#import rigging.suite.io
auto tests::unit::unmanaged::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("unmanaged");
  {
    Stream fre("Free");
    fre << call("DATA", &Fixture::test_Free_DATA)
        << call("HOST", &Fixture::test_Free_HOST)
        << call("STRING", &Fixture::test_Free_STRING)
        << call("URI", &Fixture::test_Free_URI)
      ;
    series << move(fre);
  } {
    Stream use("usage");
    use << call("Uri", &Fixture::test_usage_URI)
      ;
    series << move(use);
  }
  series << add<Uri>()
    ;
  return finalize(series);
}
#endiv

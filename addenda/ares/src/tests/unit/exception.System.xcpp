// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::exception { class System; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
#import ares.exception.System
class tests::unit::exception::System : public cppunit::test::Fixture {
public:
  using Subject = ::ares::exception::System;
  auto test_constructor_error_code() -> void;
  auto test_constructor_error_code_reason() -> void;
  auto test_constructor_errnum_category() -> void;
  auto test_constructor_errnum_category_reason() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.error_code
#import std.string
#import std.system_category
auto tests::unit::exception::System::test_constructor_error_code() -> void {
  Subject subject{std::error_code{13, std::system_category()}};
  CPPUNIT_ASSERT(nullptr != subject.what());
}
auto tests::unit::exception::System::test_constructor_error_code_reason() -> void {
  Subject subject1{std::error_code{13, std::system_category()}, "bad"};
  CPPUNIT_ASSERT(nullptr != subject1.what());
  Subject subject2{std::error_code{13, std::system_category()}, std::string{"bad"}};
  CPPUNIT_ASSERT(nullptr != subject2.what());
}
auto tests::unit::exception::System::test_constructor_errnum_category() -> void {
  Subject subject{13, std::system_category()};
  CPPUNIT_ASSERT(nullptr != subject.what());
}
auto tests::unit::exception::System::test_constructor_errnum_category_reason() -> void {
  Subject subject1{13, std::system_category(), "bad"};
  CPPUNIT_ASSERT(nullptr != subject1.what());
  Subject subject2{13, std::system_category(), std::string{"bad"}};
  CPPUNIT_ASSERT(nullptr != subject2.what());
}
#import rigging.suite.io
auto tests::unit::exception::System::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series{"System"};
  {
    Stream con{"constructor"};
    con << call("error_code", &System::test_constructor_error_code)
        << call("error_code,reason", &System::test_constructor_error_code_reason)
        << call("errno,category", &System::test_constructor_errnum_category)
        << call("errno,category,reason", &System::test_constructor_errnum_category_reason)
      ;
    series << move(con);
  }
  return finalize(series);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::count { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
#import ares.Count
class tests::unit::count::Fixture : public cppunit::test::Fixture {
public:
  using Subject = ::ares::Count;
  auto test_zero() -> void;
  auto test_underlying() -> void;
  auto test_operator_increment_pre() -> void;
  auto test_operator_increment_post() -> void;
  auto test_operator_increment_fail() -> void;
  auto test_operator_decrement_pre() -> void;
  auto test_operator_decrement_post() -> void;
  auto test_operator_decrement_fail() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
auto tests::unit::count::Fixture::test_zero() -> void {
  auto subject = Subject{};
  CPPUNIT_ASSERT(0 == underlying(subject));
}
auto tests::unit::count::Fixture::test_underlying() -> void {
  auto subject = Subject{3};
  CPPUNIT_ASSERT(3u == underlying(subject));
}
auto tests::unit::count::Fixture::test_operator_increment_pre() -> void {
  auto subject = Subject{3};
  auto actual = ++subject;
  auto const expected = Subject{4};
  CPPUNIT_ASSERT(expected == actual);
  CPPUNIT_ASSERT(expected == subject);
}
auto tests::unit::count::Fixture::test_operator_increment_post() -> void {
  auto subject = Subject{3};
  auto actual = subject++;
  auto const expected = Subject{3};
  auto const again = Subject{4};
  CPPUNIT_ASSERT(expected == actual);
  CPPUNIT_ASSERT(again == subject);
}
#import std.domain_error
auto tests::unit::count::Fixture::test_operator_increment_fail() -> void {
  try {
    auto subject = Subject{::ares::count::Limits::max()};
    ++subject;
    CPPUNIT_ASSERT(false);
  } catch (std::domain_error const &) {
    CPPUNIT_ASSERT(true);
  }
}
auto tests::unit::count::Fixture::test_operator_decrement_pre() -> void {
  auto subject = Subject{3};
  auto actual = --subject;
  auto const expected = Subject{2};
  CPPUNIT_ASSERT(expected == actual);
  CPPUNIT_ASSERT(expected == subject);
}
auto tests::unit::count::Fixture::test_operator_decrement_post() -> void {
  auto subject = Subject{3};
  auto actual = subject--;
  auto const expected = Subject{3};
  auto const again = Subject{2};
  CPPUNIT_ASSERT(expected == actual);
  CPPUNIT_ASSERT(again == subject);
}
#import std.domain_error
auto tests::unit::count::Fixture::test_operator_decrement_fail() -> void {
  try {
    auto subject = Subject{::ares::count::Limits::min()};
    static_assert(Subject{} == Subject{::ares::count::Limits::min()});
    static_assert(0 == ::ares::count::Limits::min());
    --subject;
    CPPUNIT_ASSERT(false);
  } catch (std::domain_error const &) {
    CPPUNIT_ASSERT(true);
  }
}
#import rigging.suite.io
auto tests::unit::count::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series{"count"}; // <-------------- name it lowercase because .../tests/unit/count.test expects that
  series << call("zero", &Fixture::test_zero)
         << call("underlying", &Fixture::test_underlying)
    ;
  {
    Stream inc{"operator++"};
    inc << call("pre", &Fixture::test_operator_increment_pre)
        << call("post", &Fixture::test_operator_increment_post)
        << call("fail", &Fixture::test_operator_increment_fail)
      ;
    series << move(inc);
  }
  {
    Stream inc{"operator--"};
    inc << call("pre", &Fixture::test_operator_decrement_pre)
        << call("post", &Fixture::test_operator_decrement_post)
        << call("fail", &Fixture::test_operator_decrement_fail)
      ;
    series << move(inc);
  }
  return finalize(series);
}
#endiv

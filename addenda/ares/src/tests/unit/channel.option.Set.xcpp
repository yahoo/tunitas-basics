// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::channel::option { class Set; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
#import ares.channel.option.Single
#import ares.channel.option.Set
class tests::unit::channel::option::Set : public cppunit::test::Fixture {
public:
  using Single = ::ares::channel::option::Single;
  using Subject = ::ares::channel::option::Set;
  auto test_constructor() -> void;
  auto test_compose_single_single() -> void;
  auto test_compose_single_plural() -> void;
  auto test_compose_plural_single() -> void;
  auto test_compose_plural_plural() -> void;
  auto test_constants() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
auto tests::unit::channel::option::Set::test_constructor() -> void {
  Subject subject;
  CPPUNIT_ASSERT(Subject{} == subject);
}
#import ares.channel.option.constants
auto tests::unit::channel::option::Set::test_constants() -> void {
  using namespace ::ares::channel::option::constants;
  Subject subject;
  subject = NONE;
  CPPUNIT_ASSERT(NONE == subject);
  subject = FLAGS;
  subject = TIMEOUT;
  subject = TRIES;
  subject = NDOTS;
  subject = UDP_PORT;
  subject = TCP_PORT;
  subject = SERVERS;
  subject = DOMAINS;
  subject = LOOKUPS;
  subject = SOCK_STATE_CB;
  subject = SORTLIST;
  subject = SOCK_SNDBUF;
  subject = SOCK_RCVBUF;
  subject = TIMEOUTMS;
  subject = ROTATE;
  subject = EDNSPSZ;
  subject = NOROTATE;
  subject = ALL;
  CPPUNIT_ASSERT(ALL == subject);
}
auto tests::unit::channel::option::Set::test_compose_single_single() -> void {
  using namespace ::ares::channel::option::constants;
  Subject subject = Single::FLAGS | Single::NDOTS;
  auto const expected = FLAGS | NDOTS;
  auto const actual = subject;
  CPPUNIT_ASSERT(expected == actual);
}
auto tests::unit::channel::option::Set::test_compose_single_plural() -> void {
  using namespace ::ares::channel::option::constants;
  Subject subject = Single::FLAGS | NDOTS;
  auto const expected = FLAGS | NDOTS;
  auto const actual = subject;
  CPPUNIT_ASSERT(expected == actual);
}
auto tests::unit::channel::option::Set::test_compose_plural_single() -> void {
  using namespace ::ares::channel::option::constants;
  Subject subject = FLAGS | Single::NDOTS;
  auto const expected = FLAGS | NDOTS;
  auto const actual = subject;
  CPPUNIT_ASSERT(expected == actual);
}
auto tests::unit::channel::option::Set::test_compose_plural_plural() -> void {
  using namespace ::ares::channel::option::constants;
  Subject subject = FLAGS | NDOTS;
  auto const expected = FLAGS | NDOTS;
  auto const actual = subject;
  CPPUNIT_ASSERT(expected == actual);
}
#import rigging.suite.io
auto tests::unit::channel::option::Set::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series{"Set"};
  series << call("constructor", &Set::test_constructor)
    ;
  {
    Stream com{"compose"};
    com << call("single,single", &Set::test_compose_single_single)
        << call("single,plural", &Set::test_compose_single_plural)
        << call("plural,single", &Set::test_compose_plural_single)
        << call("plural,plural", &Set::test_compose_plural_plural)
      ;
    series << move(com);
  }
  series << call("constants", &Set::test_constants)
    ;
  return finalize(series);
}
#endiv

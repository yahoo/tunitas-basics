// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::library { class Allocator; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
#import ares.library.Allocator.
class tests::unit::library::Allocator : public cppunit::test::Fixture {
public:
  using Subject = ::ares::library::Allocator;
  auto test_constructor_default() -> void;
  auto test_constructor_triple() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
auto tests::unit::library::Allocator::test_constructor_default() -> void {
  Subject subject;
  CPPUNIT_ASSERT(nullptr == subject.malloc);
}
auto tests::unit::library::Allocator::test_constructor_triple() -> void {
  Subject subject{malloc, free, realloc};
  CPPUNIT_ASSERT(::malloc == subject.malloc);
  CPPUNIT_ASSERT(::free == subject.free);
  CPPUNIT_ASSERT(::realloc == subject.realloc);
}
#import rigging.suite.io
auto tests::unit::library::Allocator::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series{"Allocator"};
  {
    Stream con{"constructor"};
    con << call("default", &Allocator::test_constructor_default)
        << call("triple", &Allocator::test_constructor_triple)
    ;
    series << move(con);
  }
  return finalize(series);
}
#endiv

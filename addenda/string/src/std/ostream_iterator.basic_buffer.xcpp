// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
#import std.ostream_iterator
#import c.buffer
#import c.const_buffer
namespace std {
  //
  // CHAR = 'char'            ostream_iterator<c::buffer>
  // CHAR = 'char const'      ostream_iterator<c::const_buffer>
  //  
  template<typename CHAR> class ostream_iterator<c::basic_buffer<CHAR>>;
}
#endiv
#divert <hpp>
#import std.iterator
#import std.output_iterator_tag
#import std.ostream
template<typename CHAR> class std::ostream_iterator<c::basic_buffer<CHAR>> : public std::iterator<std::output_iterator_tag, c::basic_buffer<CHAR>, void, void, void> {
  using ancestor = std::iterator<std::output_iterator_tag, c::basic_buffer<CHAR>, void, void, void>;
public:
  using value_type = c::basic_buffer<CHAR>;
  inline explicit ostream_iterator(std::ostream &);
  inline auto operator=(value_type const &) -> ostream_iterator &;
  inline auto operator*() -> ostream_iterator &;
  inline auto operator++() -> ostream_iterator &;
  inline auto operator++(int) -> ostream_iterator &;
protected:
  std::ostream &sink;
};
#endiv
#divert <ipp>
template<typename CHAR> std::ostream_iterator<c::basic_buffer<CHAR>>::ostream_iterator(std::ostream &arg_sink)
  : ancestor()
  , sink(arg_sink) {
}

template<typename CHAR> auto std::ostream_iterator<c::basic_buffer<CHAR>>::operator=(value_type const &rhs) -> ostream_iterator & {
  sink.write(rhs.data(), rhs.size());
  return *this;
}

template<typename CHAR> auto std::ostream_iterator<c::basic_buffer<CHAR>>::operator*() -> ostream_iterator & {
  return *this;
}

template<typename CHAR> auto std::ostream_iterator<c::basic_buffer<CHAR>>::operator++() -> ostream_iterator & {
  return *this;
}

template<typename CHAR> auto std::ostream_iterator<c::basic_buffer<CHAR>>::operator++(int) -> ostream_iterator & {
  return *this;
}
#endiv

// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
#import std.size_t
namespace re::required {
  //
  // Only these two types can be the implementation choices for the Core<OTHER>
  // Yup, just these and no more.
  //
  template<typename OTHER> concept Swizzle1able = requires(OTHER other, OTHER const cother) {
    typename OTHER::value_type;
    { other.c_str() } -> convertible_to<typename OTHER::value_type const *>;
    { other.data() } -> convertible_to<typename OTHER::value_type const *>;  // every accessor returns consty
    { cother.data() } -> convertible_to<typename OTHER::value_type const *>;
    { other.size() } -> convertible_to<std::size_t>;
    // ... and no other requirements.
  };
}
#endiv
#divert <hpp>
#import c.basic_stringn
#import c.basic_stringz
#import std.string
#import std.is_same
namespace re::required {
  // At least we know these will work.
  static_assert(Swizzle1able<c::basic_stringz<char>>, "fail");
  static_assert(Swizzle1able<c::basic_stringz<char const>>, "fail");
  static_assert(Swizzle1able<c::basic_stringn<char>>, "fail");
  static_assert(Swizzle1able<c::basic_stringn<char const>>, "fail");
  static_assert(Swizzle1able<std::string>, "fail");
}
#endiv

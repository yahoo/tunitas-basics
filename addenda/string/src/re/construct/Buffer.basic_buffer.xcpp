// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
#import c.basic_buffer
#forward re.construct.Buffer
#include <hpp/c.basic_buffer>  // Bufferlikelike<UNIFIER> needs to see the complete type
namespace re::construct {
  template<typename CHAR> class Buffer<c::basic_buffer<CHAR>>;
}
#endiv
#divert <hpp>
#import re.construct.Buffery
#import std.is_const
#import std.is_integral
#import std.enable_if
template<typename CHAR> class re::construct::Buffer<c::basic_buffer<CHAR>> : public Buffery<c::basic_buffer<CHAR>> {
  using ancestor = Buffery<c::basic_buffer<CHAR>>;
public:
  Buffer() = default;
  using ancestor::Buffery;
  // synthetic {move,copy}-{constructor,assignment}
  inline operator std::string() const;
  // reminder: this is an unchecked memory access (unlike Buffer<std::string> which checks as per std::string::operator[])
  inline auto operator[](std::size_t) const -> typename ancestor::value_type;
  template<typename INDEX> inline auto operator[](INDEX) -> typename std::enable_if<std::is_integral<INDEX>::value && std::is_const<CHAR>::value, typename ancestor::value_type &>::type;
};
#endiv
#divert <ipp>
template<typename CHAR> re::construct::Buffer<c::basic_buffer<CHAR>>::operator std::string() const {
  return std::string(ancestor::unifier.begin(), ancestor::unifier.end());
}

#import std.out_of_range
template<typename CHAR> auto re::construct::Buffer<c::basic_buffer<CHAR>>::operator[](std::size_t index) const -> typename ancestor::value_type {
  if (index >= ancestor::size()) {
    throw std::out_of_range("index too big");
  }
  return ancestor::data()[index];
}

template<typename CHAR> template<typename INDEX> auto re::construct::Buffer<c::basic_buffer<CHAR>>::operator[](INDEX preindex) -> typename std::enable_if<std::is_integral<INDEX>::value && std::is_const<CHAR>::value, typename ancestor::value_type &>::type {
  std::size_t index = preindex; // casting & coercion happens here, not at the function call boundary
  if (index >= ancestor::size()) {
    throw std::out_of_range("index too big");
  }
  return ancestor::data()[index];
}
#endiv

// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
#import c.basic_buffer
#import re.required.Swizzle2able
#include <hpp/c.basic_buffer> //  Swizzle2able<OTHER> needs to see the complete type
#include <hpp/c.basic_stringn> // ibidem.
#include <hpp/c.basic_stringz> // ibidem.
#import std.string //             ibidem.
#import std.string_view //        ibidem
#import std.vector //             ibidem.
namespace re::construct::enable {
  //
  // enable::Buffery<OTHER> is for OTHER in 
  //     Buffery<UNIFIER>::Buffery(OTHER const &)
  // e.g. ... std::vector<char>
  //
  // There are many more "enabled" types for OTHER than for UNIFIER.
  // Whereas UNIFIER must obey the Corelike<UNIFIER> and have other stability properties
  //     the OTHER types enabled herein need ony behave crudely as Bufferlike.
  // In this usage, the OTHER types can have mutable pointers, which will be
  // cast to const on intake into construct::buffery<UNIFIER>::Buffery(OTHER ???)
  //
  // Usage:
  //
  //     template<> struct re::construct::enable::Buffery<OTHER> : public std::true_type { };
  //
  // and as such
  //     c::str(OTHER) -> char const *
  // must work in support of
  //    UNIFIER::UNIFIER(char const *)
  //
  template<required::Swizzle2able> class Buffery;
  template<> class Buffery<c::basic_buffer<char>>;
  template<> class Buffery<c::basic_buffer<char const>>;
  template<> class Buffery<c::basic_stringn<char>>;
  template<> class Buffery<c::basic_stringn<char const>>;
  template<> class Buffery<c::basic_stringz<char>>;
  template<> class Buffery<c::basic_stringz<char const>>;
  template<> class Buffery<std::string>;
  template<> class Buffery<std::string_view>;
  template<> class Buffery<std::vector<char>>;
}
#endiv
#divert <hpp>
#import std.false_type   // you need this now.
#import std.true_type    // you'll need this later.
namespace re::construct {
  template<required::Swizzle2able> class enable::Buffery : public std::false_type { };
  template<> class enable::Buffery<c::basic_buffer<char>> : public std::true_type { };
  template<> class enable::Buffery<c::basic_buffer<char const>> : public std::true_type { };
  template<> class enable::Buffery<c::basic_stringn<char>> : public std::true_type { };
  template<> class enable::Buffery<c::basic_stringn<char const>> : public std::true_type { };
  template<> class enable::Buffery<c::basic_stringz<char>> : public std::true_type { };
  template<> class enable::Buffery<c::basic_stringz<char const>> : public std::true_type { };
  template<> class enable::Buffery<std::string> : public std::true_type { };
  template<> class enable::Buffery<std::string_view> : public std::true_type { };
  template<> class enable::Buffery<std::vector<char>> : public std::true_type { };
}
#endiv

// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
#import c.basic_stringn
#import c.basic_stringz
#import re.required.Swizzle1able
#include <hpp/c.basic_stringn> // Swizzle1able<OTHER> needs to see the complete type
#include <hpp/c.basic_stringz> // ibidem.
#import std.string             // ibidem.
namespace re::construct::enable {
  //
  // enable::Stringy<OTHER> is for OTHER in 
  //     Stringy<UNIFIER>::Stringy(OTHER const &)
  // e.g. c::stringz, std:string, mysqlpp::String
  //
  // Reminder: there are many more "enbled" types for OTHER than for UNIFIER.
  // See the larger commentariat in Buffery<OTHER>, nearby.
  // In this usage, the OTHER types can have mutable pointers, which will be
  // cast to const on intake into construct::Stringy<UNIFIER>::Stringy(OTHER ???)
  //
  // Usage:
  //
  //     template<> struct re::construct::enable::Stringy<OTHER> : public std::true_type { };
  //
  // and as such
  //     c::str(OTHER) -> char const *
  // must work in support of
  //    UNIFIER::UNIFIER(char const *)
  //
  template<required::Swizzle1able> class Stringy;
  template<> class Stringy<c::basic_stringz<char>>;
  template<> class Stringy<c::basic_stringz<char const>>;
  template<> class Stringy<std::string>;
}
#endiv
#divert <hpp>
#import std.false_type   // you need this now.
#import std.true_type    // you'll need this later.
namespace re::construct {
  template<required::Swizzle1able> class enable::Stringy : public std::false_type { };
  template<> class enable::Stringy<c::basic_stringz<char>> : public std::true_type { };
  template<> class enable::Stringy<c::basic_stringz<char const>> : public std::true_type { };
  template<> class enable::Stringy<std::string> : public std::true_type { };
}
#endiv

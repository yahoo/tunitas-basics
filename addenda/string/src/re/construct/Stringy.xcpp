// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
#import re.required.Stringlike
namespace re::construct {
  //
  // A (more string-like) Core
  // ... adds the common string-like operations
  //
  template<required::Stringlike UNIFIER> class Stringy;
}
#endiv
#divert <hpp>
#import c.basic_stringn
#import c.basic_stringz
#import re.construct.Core
#import re.construct.enable.Stringy
#import re.required.Swizzle1able
#import std.enable_if
#import std.string
#import std.string_view
#import re.construct.detail.Swizzle_Constructor_Arguments
namespace re {
  template<required::Stringlike UNIFIER> class construct::Stringy : public Core<UNIFIER> {
    using ancestor = Core<UNIFIER>;
  protected:
    ~Stringy() = default; // still descendants only
  public:
    //
    // All are implicit conversions.
    //
    // Either copy into the string or accept the managed pointer.
    Stringy() = default;
    inline Stringy(char const *);
    template<typename CHAR> inline Stringy(c::basic_stringn<CHAR>);
    template<typename CHAR> inline Stringy(c::basic_stringz<CHAR>);
    inline Stringy(std::string const &);
    template<required::Swizzle1able OTHER, typename = typename std::enable_if<enable::Stringy<OTHER>::value, void>::type> Stringy(OTHER &&);
    template<required::Swizzle1able OTHER, typename = typename std::enable_if<enable::Stringy<OTHER>::value, void>::type> Stringy(OTHER &);
    template<required::Swizzle1able OTHER, typename = typename std::enable_if<enable::Stringy<OTHER>::value, void>::type> Stringy(OTHER const &);
    inline explicit operator char const *() const;
    inline explicit operator c::const_stringz() const;
    inline explicit operator std::string_view() const;
    inline auto c_str() const -> typename ancestor::value_type const *;
    // Still to be implemented in the descendant
    operator std::string () const = delete;
    auto back() const -> typename ancestor::value_type = delete;
  private:
    //
    // Nasty: the argument consty of the constructors varies
    // though 'data' is expected to have a '\0' terminator sentinel.
    //
    //    UNIFIER c::stringz       -> c::stringz(char *data) <-------------------- mutatable datable bytes
    //    UNIFIER c::const_stringz -> c::const_stringz(char const *data)
    //    UNIFIER std::string      -> std::string(char const *data)
    //
    using swizzle = detail::Swizzle_Constructor_Arguments1<UNIFIER>;
    template<required::Swizzle1able OTHER> using swozzle = detail::Swizzle_Constructor_Arguments1<UNIFIER, OTHER>;
  };
}
#endiv
#divert <ipp>
namespace re::construct {
  template<required::Stringlike UNIFIER> Stringy<UNIFIER>::Stringy(char const *value)
    : ancestor(typename ancestor::unifier_type(value)) {
    ;
  }
}

#import c.str
namespace re::construct {
  template<required::Stringlike UNIFIER> template<typename CHAR> Stringy<UNIFIER>::Stringy(c::basic_stringz<CHAR> value)
    : ancestor(typename ancestor::unifier_type(c::str(value))) {
    ;
  }
  template<required::Stringlike UNIFIER> template<typename CHAR> Stringy<UNIFIER>::Stringy(c::basic_stringn<CHAR> value)
    : ancestor(typename ancestor::unifier_type(c::str(value))) {
    ;
  }
  template<required::Stringlike UNIFIER> Stringy<UNIFIER>::Stringy(std::string const &value)
    : ancestor(typename ancestor::unifier_type(c::str(value))) {
    ;
  }
}

#import std.forward
namespace re::construct {
  template<required::Stringlike UNIFIER> template<required::Swizzle1able OTHER, typename> Stringy<UNIFIER>::Stringy(OTHER &&other)
    : ancestor(typename ancestor::unifier_type(swozzle<OTHER>::str(/*DO NOT FORWARD*/other))) {
    ; // and as such str(OTHER) -> char const * must work against UNIFIER(char *)
  }
  template<required::Stringlike UNIFIER> template<required::Swizzle1able OTHER, typename> Stringy<UNIFIER>::Stringy(OTHER &other)
    : ancestor(typename ancestor::unifier_type(swozzle<OTHER>::str(other))) {
    ; // and as such str(OTHER) -> char const * must work against UNIFIER(char *)
  }
  template<required::Stringlike UNIFIER> template<required::Swizzle1able OTHER, typename> Stringy<UNIFIER>::Stringy(OTHER const &other)
    : ancestor(typename ancestor::unifier_type(swozzle<OTHER>::str(other))) {
    ; // and as such str(OTHER) -> char const * must work against UNIFIER(char const *)
  }
}

#import c.str
namespace re::construct {
  template<required::Stringlike UNIFIER> Stringy<UNIFIER>::operator char const *() const {
    return c::str(ancestor::unifier);
  }
  template<required::Stringlike UNIFIER> Stringy<UNIFIER>::operator c::const_stringz() const {
    // This works univerally because c::const_stringz is implicitly convertible from many types
    // to wit:
    //   const_stringz(std::string const &);
    //   const_stringz(const_stringz const &);
    return ancestor::unifier;
  }
  template<required::Stringlike UNIFIER> Stringy<UNIFIER>::operator std::string_view() const {
    return std::string_view(ancestor::unifier.data(), ancestor::unifier.size());
  }
  template<required::Stringlike UNIFIER> auto Stringy<UNIFIER>::c_str() const -> typename ancestor::value_type const * {
    return ancestor::unifier.c_str();
  }
}
#endiv

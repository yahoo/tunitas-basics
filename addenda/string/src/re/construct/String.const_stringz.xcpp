// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
#import c.const_stringz
#forward re.construct.String
#include <hpp/c.const_stringz>  // Stringlike<UNIFIER> needs to see the complete type
namespace re::construct {
  template<> class String<c::const_stringz>;
}
#endiv
#divert <hpp>
#import re.construct.Stringy
template<> class re::construct::String<c::const_stringz> : public Stringy<c::const_stringz> {
  using ancestor = Stringy<c::const_stringz>;
public:
  String() = default;
  using ancestor::Stringy;
  // synthetic {move,copy}-{constructor,assignment}
  inline operator std::string() const;
  // reminder: this is an unchecked memory access (unlike String<std::string> which checks as per std::string::operator[])
  inline auto operator[](std::size_t) const -> value_type;
};
#endiv
#divert <ipp>
re::construct::String<c::const_stringz>::operator std::string() const {
  return std::string(unifier.begin(), unifier.end());
}

#import std.out_of_range
auto re::construct::String<c::const_stringz>::operator[](std::size_t index) const -> value_type {
  // WATCHOUT - we cannot check index > this->size() because size() is linear in the size
  //            throw std::out_of_range(...)
  return ancestor::data()[index];
}
#endiv

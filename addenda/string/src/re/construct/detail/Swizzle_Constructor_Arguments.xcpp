// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
#import c.basic_buffer
#import c.basic_stringn
#import c.basic_stringz
#import std.string
#import std.vector
#import re.required.Swizzle2able
#import re.required.Swizzle1able
namespace re::construct::detail {
  //
  // Handle an ugly oddity of the type system used in & around re::buffer<UNIFIER>.
  //
  // Problem: the constructor arguments are "twisted" in the various types
  //
  //     c::buffer::buffer(std::size_t, char const *);
  //     c::buffer::buffer(char const (&)[N], std::size_t);
  //
  //     c::const_buffer::const_buffer(std::size_t, char const *);
  //     c::const_buffer::const_buffer(char const (&)[N], std::size_t);
  //
  //     std::string::string(char const *, std::size_t);
  //
  // Usage for 1-arg constructors (e.g. string)
  //
  //     See the 2-arg scenario; you'll get the hang of it.
  //
  // Usage for 2-arg constructors (e.g. buffer)
  //
  //     let SUBJECT be one of the required::Swizzle2able types
  //         c::basic_buffer<char>
  //         c::basic_buffer<char_const>
  //         c::basic_stringn<char>
  //         c::basic_stringn<char const>
  //         c::basic_stringz<char>
  //         c::basic_stringz<char const>
  //         std::string
  //         std::vector<char>
  //
  //     using swizzle = Swizzle_Constructor_Arguments<SUBJECT>;
  //     Subject subject(swizzle::first(data, size), swizzle::second(data, size));
  //
  // <editorial>
  // Nasty: the argument order of the constructors is inverted
  //    UNIFIER c::buffer         -> c::const_buffer(std:size_t size, char const *data);
  //    UNIFIER c::const_buffer   -> c::const_buffer(std:size_t size, char const *data);
  //    UNIFIER std::string       -> std::string(char const *data, std::size_t)
  //    UNIFIER std::vector<char> -> std::vector(char const *data, std::size_t)
  // </editorial>
  //
  template<typename TARGET, typename ARGUMENT = TARGET> struct Swizzle_Constructor_Arguments2;
  template<required::Swizzle2able TARGET, required::Swizzle2able ARGUMENT> struct Swizzle_Constructor_Arguments2<TARGET, ARGUMENT>;
  template<required::Swizzle2able ARGUMENT> struct Swizzle_Constructor_Arguments2<c::basic_buffer<char>, ARGUMENT>;
  template<required::Swizzle2able ARGUMENT> struct Swizzle_Constructor_Arguments2<c::basic_buffer<char const>, ARGUMENT>;
  template<required::Swizzle2able ARGUMENT> struct Swizzle_Constructor_Arguments2<c::basic_stringn<char>, ARGUMENT>;
  template<required::Swizzle2able ARGUMENT> struct Swizzle_Constructor_Arguments2<c::basic_stringn<char const>, ARGUMENT>;
  template<required::Swizzle2able ARGUMENT> struct Swizzle_Constructor_Arguments2<std::vector<char>, ARGUMENT>;
  template<required::Swizzle2able ARGUMENT> struct Swizzle_Constructor_Arguments2<std::string, ARGUMENT>;

  template<typename TARGET, typename ARGUMENT = TARGET> struct Swizzle_Constructor_Arguments1;
  template<required::Swizzle1able TARGET, required::Swizzle1able ARGUMENT> struct Swizzle_Constructor_Arguments1<TARGET, ARGUMENT>;
  template<required::Swizzle1able ARGUMENT> struct Swizzle_Constructor_Arguments1<c::basic_stringz<char>, ARGUMENT>;
  template<required::Swizzle1able ARGUMENT> struct Swizzle_Constructor_Arguments1<c::basic_stringz<char const>, ARGUMENT>;
  template<required::Swizzle1able ARGUMENT> struct Swizzle_Constructor_Arguments1<std::string, ARGUMENT>;
}
#endiv
#divert <hpp>
#import re.construct.detail.Construct_Begin_End
#import re.construct.detail.Construct_Data_Size
#import re.construct.detail.Construct_Size_Data
#import re.construct.detail.Construct_Str
template<re::required::Swizzle2able ARGUMENT> struct re::construct::detail::Swizzle_Constructor_Arguments2<c::basic_buffer<char>, ARGUMENT> : public Construct_Size_Data<ARGUMENT> { };
template<re::required::Swizzle2able ARGUMENT> struct re::construct::detail::Swizzle_Constructor_Arguments2<c::basic_buffer<char const>, ARGUMENT> : public Construct_Size_Data<ARGUMENT> { };
template<re::required::Swizzle2able ARGUMENT> struct re::construct::detail::Swizzle_Constructor_Arguments2<c::basic_stringn<char>, ARGUMENT> : public Construct_Data_Size<ARGUMENT> { };
template<re::required::Swizzle2able ARGUMENT> struct re::construct::detail::Swizzle_Constructor_Arguments2<c::basic_stringn<char const>, ARGUMENT> : public Construct_Data_Size<ARGUMENT> { };
template<re::required::Swizzle2able ARGUMENT> struct re::construct::detail::Swizzle_Constructor_Arguments2<std::vector<char>, ARGUMENT> : public Construct_Begin_End<ARGUMENT> { };
template<re::required::Swizzle2able ARGUMENT> struct re::construct::detail::Swizzle_Constructor_Arguments2<std::string, ARGUMENT> : public Construct_Data_Size<ARGUMENT> { };

template<re::required::Swizzle1able ARGUMENT> struct re::construct::detail::Swizzle_Constructor_Arguments1<c::basic_stringz<char>, ARGUMENT> : public Construct_Str<ARGUMENT> { };
template<re::required::Swizzle1able ARGUMENT> struct re::construct::detail::Swizzle_Constructor_Arguments1<c::basic_stringz<char const>, ARGUMENT> : public Construct_Str<ARGUMENT> { };
template<re::required::Swizzle1able ARGUMENT> struct re::construct::detail::Swizzle_Constructor_Arguments1<std::string, ARGUMENT> : public Construct_Str<ARGUMENT> { };
#endiv

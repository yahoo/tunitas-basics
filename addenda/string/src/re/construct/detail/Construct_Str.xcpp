// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
#import re.required.Swizzle1able
namespace re::construct::detail {
  //
  // See Swizzle_Constructor_Arguments
  //
  template<required::Swizzle1able ARGUMENT> struct Construct_Str;
}
#endiv
#divert <hpp>
#import std.declval
template<re::required::Swizzle1able ARGUMENT> struct re::construct::detail::Construct_Str {
  using unifier_type = ARGUMENT;
  using value_type = typename ARGUMENT::value_type;
  using data_type = decltype(std::declval<ARGUMENT>().data());
  using const_data_type = decltype(std::declval<ARGUMENT const>().data());
  // PASS unifier_type BY REFERENCE ONLY, DO NOT COPY
  // NO NEED
  //     auto str(unifier_type &&) -> const_data_type;
  //     auto str(unifier_type &) -> const_data_type;
  // c_str is const and returns the consty variant.
  inline static auto str(unifier_type const &un) -> const_data_type { return un.c_str(); }
};
#endiv

// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
#forward re.construct.Buffer
#import std.vector
namespace re::construct {
  template<> class Buffer<std::vector<char>>;
}
#endiv
#divert <hpp>
#import re.construct.Buffery
#import std.string
template<> class re::construct::Buffer<std::vector<char>> : public Buffery<std::vector<char>> {
  using ancestor = Buffery<std::vector<char>>;
public:
  Buffer() = default;
  using ancestor::Buffery;
  Buffer(Buffer const &) = default;
  auto operator=(Buffer const &) -> Buffer & = default;
  inline Buffer(std::vector<char> &&);
  inline auto operator=(std::vector<char> &&) -> Buffer &;
  inline operator std::vector<char> const &() const;
  inline operator std::vector<char> &();
  inline operator std::string() const;
  inline auto operator[](std::size_t) const -> value_type;
  inline auto operator[](std::size_t) -> value_type &;
  using ancestor::front;
  inline auto front() -> value_type &;
  inline auto back() const -> value_type;
  inline auto back() -> value_type &;
};
#endiv
#divert <ipp>
#import std.forward
re::construct::Buffer<std::vector<char>>::Buffer(std::vector<char> &&value)
  : ancestor(std::forward<std::vector<char>>(value)) {
  ;
}

auto re::construct::Buffer<std::vector<char>>::operator=(std::vector<char> &&value) -> Buffer & {
  Buffer tmp(std::forward<std::vector<char>>(value));
  std::swap(tmp, *this);
  return *this;
}

re::construct::Buffer<std::vector<char>>::operator std::vector<char> const &() const {
  return unifier;
}

re::construct::Buffer<std::vector<char>>::operator std::vector<char> &() {
  return unifier;
}

re::construct::Buffer<std::vector<char>>::operator std::string() const {
  return std::string(unifier.begin(), unifier.end());
}

auto re::construct::Buffer<std::vector<char>>::operator[](std::size_t index) const -> value_type { 
  if (index >= size()) {
    throw std::out_of_range("index too big");
  }
 return unifier[index];
}

#import std.is_same
auto re::construct::Buffer<std::vector<char>>::operator[](std::size_t index) -> value_type & {
  static_assert(std::is_same<decltype(unifier[index]), value_type &>::value, "fail");
  if (index >= size()) {
    throw std::out_of_range("index too big");
  }
  return unifier[index];
}

auto re::construct::Buffer<std::vector<char>>::front() -> value_type & {
  if (empty()) {
    throw std::out_of_range("empty");
  }
  return unifier.front();
}

auto re::construct::Buffer<std::vector<char>>::back() const -> value_type {
  if (empty()) {
    throw std::out_of_range("empty");
  }
  return unifier.back();
}

auto re::construct::Buffer<std::vector<char>>::back() -> value_type & {
  if (empty()) {
    throw std::out_of_range("empty");
  }
  return unifier.back();
}
#endiv

// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
#import re.required.Stringlike
namespace re::construct {
  //
  // One can never make a completely solid choice of which string type to use.
  // Therefore: the re::string<UNIFIER>
  //
  template<required::Stringlike UNIFIER> class String;
}
#entail re.construct.String.string
#entail re.construct.String.const_stringz
#endiv
#divert <hpp>
#import std.basic_ostream
namespace re::construct {
  // The UNIFIER was insertable before, and so it is again here.
  template<typename CHAR, typename TRAITS, required::Stringlike UNIFIER> inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, String<UNIFIER> const &) -> std::basic_ostream<CHAR, TRAITS> &;
  // The UNIFIER was str'able before, and so it is again here.
  // WATCHOUT - the argument must be passed by const reference argument so that a new copy does not get made when UNIFIER=std:string
  template<required::Stringlike UNIFIER> inline auto str(String<UNIFIER> const &) -> char const *;
}

#import c.str
namespace c {
  using re::construct::str;
}

template<re::required::Stringlike UNIFIER> class re::construct::String {
  // Maybe String<SOMETHING_UNKNOWN> was instantiated wherein Stringlike<SOMETHING_UNKNOWN>
  // e.g.  String<c::basic_stringz<char>> which is the mutable variant (you wanted the consty variant String<c::const_stringz>
  static_assert(0 == sizeof (UNIFIER) && 0 != sizeof (UNIFIER), "specializations only");
};
#endiv
#divert <ipp>
#import std.basic_string_view
template<typename CHAR, typename TRAITS, re::required::Stringlike UNIFIER> auto re::construct::operator<<(std::basic_ostream<CHAR, TRAITS> &o, String<UNIFIER> const &s) -> std::basic_ostream<CHAR, TRAITS> & {
  // and as such, this is only reasonable when CHAR = char; never when CHAR = wchar_t, char16_t, char32_t, etc.
  using char_type = typename UNIFIER::value_type;
  return o << (std::basic_string_view<char_type, std::char_traits<char_type>>) s;
}

template<re::required::Stringlike UNIFIER> inline auto re::construct::str(String<UNIFIER> const &item) -> char const * {
  // We are promised that there is a '\0' terminator sentinel out there somewhere.
  return item.c_str();
} 
#endiv

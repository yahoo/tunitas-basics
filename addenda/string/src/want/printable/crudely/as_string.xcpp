// -*- c++ -*-in the SCOLD stylings that are so popular these days
#divert <hpp>
#import std.ios
#import std.string
namespace want {
  namespace printable {
    namespace crudely {
      inline auto as_string(char, std::ios_base &(*manip)(std::ios_base &) = nullptr) -> std::string;
      inline auto as_string(std::string const &, std::ios_base &(*manip)(std::ios_base &) = nullptr) -> std::string;
    }
  }
}
#endiv
#divert <ipp>
#import std.transform
#import std.move
#import want.appender
using ::want::appender;
auto want::printable::crudely::as_string(std::string const &subject, std::ios_base &(*manip)(std::ios_base &)) -> std::string {
  auto as = [manip](char subject_i) -> std::string {
    return as_string(subject_i, manip);
  };
  std::string ret;
  using ::want::appender;
  auto app = want::appender(ret);
  std::transform(subject.begin(), subject.end(), app, as);
  return std::move(ret);
}

#import std.isprint
#import std.dec
#import std.hex
#import std.oct
#import std.ostringstream
#import std.setfill
#import std.setw
auto want::printable::crudely::as_string(char subject, std::ios_base &(*manip)(std::ios_base &)) -> std::string {
  if (std::isprint(subject)) {
    switch (subject) {
    case ' ':  return "\\SPC";
    case '\t': return "\\TAB";
    case '\n': return "\\LF";
    case '\r': return "\\CR";
    case '\f': return "\\FF";
    default:   return std::string(1, subject);
    }
  } else {
    std::ostringstream buf;
    if (nullptr != manip) {
      // The manipulators must be inserted last, after the syntax
      if (std::hex == manip) {
        buf << "\\x" << std::setw(2) << std::setfill('0') << std::hex;
      } else if (std::oct == manip) {
        buf << "\\" << std::setw(3) << std::setfill('0') << std::oct;
      } else if (std::dec == manip) {
        // no fill character, not even '0' which is octal
        buf << "\\d" << std::setw(3) << std::dec;
      } else {
        buf << *manip;
      }
    }
    // You only get to see two low nibbles, even if 'char' is signed.
    buf << (0xff & (int)subject);
    return buf.str();
  }
}
#endiv

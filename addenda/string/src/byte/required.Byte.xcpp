// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
#import byte.type_t // byte::type_t
#import std.is_same
#import std.remove_const
namespace byte::required {
  //
  // What is a byte again?
  //
  // Definition a byte is "eight bits"
  // And so therefore, by definition it is "unsigned"
  //
  // But also, a "byte" is not a "char" which is a "character, " a cultural artifact.
  // A character is an element of a character set, being: thin, wide, Unicode (UTF-8, 16, 32).
  //
  template<typename BYTE> concept Byte = std::is_same<type_t, typename std::remove_const<BYTE>::type>::value;
}
#endiv
#divert <cpp>
#import std.uint8_t
#import std.int8_t
namespace byte {
  // positives
  static_assert(required::Byte<byte::type_t>);
  static_assert(required::Byte<byte::type_t const>);
  // negatives
  static_assert(!required::Byte<std::int8_t>);
  static_assert(!required::Byte<std::int8_t const>);
  static_assert(!required::Byte<char>);
  static_assert(!required::Byte<char const>);
  static_assert(!required::Byte<int short signed>);
  static_assert(!required::Byte<int short unsigned>);
  static_assert(!required::Byte<int signed>);
  static_assert(!required::Byte<int unsigned>);
  static_assert(!required::Byte<int signed long>);
  static_assert(!required::Byte<int unsigned long>);
  static_assert(!required::Byte<int signed long>);
  static_assert(!required::Byte<int unsigned long>);
}
#endiv

// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace byte::detail {
  template<typename BYTE> class Buffer;
}
#entail byte.detail.Buffer.Byte
#endiv
#divert <hpp>
namespace byte::detail {
  // sure, why not
  template<typename BYTE> inline auto operator==(Buffer<BYTE> const &, Buffer<BYTE> const &) -> bool;
  template<typename BYTE> inline auto operator!=(Buffer<BYTE> const &, Buffer<BYTE> const &) -> bool;
  //
  template<typename BYTE> inline auto operator<(Buffer<BYTE> const &, Buffer<BYTE> const &) -> bool;
  template<typename BYTE> inline auto operator<=(Buffer<BYTE> const &, Buffer<BYTE> const &) -> bool;
  template<typename BYTE> inline auto operator>(Buffer<BYTE> const &, Buffer<BYTE> const &) -> bool;
  template<typename BYTE> inline auto operator>=(Buffer<BYTE> const &, Buffer<BYTE> const &) -> bool;
}
#endiv
#divert <ipp>
#import std.equal
template<typename BYTE> auto byte::detail::operator==(Buffer<BYTE> const &a, Buffer<BYTE> const &b) -> bool {
  return std::equal(a.begin(), a.end(), b.begin(), b.end());
}
#import std.mismatch
template<typename BYTE> auto byte::detail::operator!=(Buffer<BYTE> const &a, Buffer<BYTE> const &b) -> bool {
  auto const [aend, bend] = { a.end(), b.end() };
  auto mis = std::mismatch(a.begin(), aend, b.begin(), bend);
  return aend != mis.first || bend != mis.second;
}
#import std.lexicographical_compare
template<typename BYTE> auto byte::detail::operator<(Buffer<BYTE> const &a, Buffer<BYTE> const &b) -> bool {
  return std::lexicographical_compare(a.begin(), a.end(), b.begin(), b.end());
}
template<typename BYTE> auto byte::detail::operator<=(Buffer<BYTE> const &a, Buffer<BYTE> const &b) -> bool {
  auto cmp = [](typename Buffer<BYTE>::value_type a, typename Buffer<BYTE>::value_type b) {
    return a <= b;
  };
  return std::lexicographical_compare(a.begin(), a.end(), b.begin(), b.end(), cmp);
}
template<typename BYTE> auto byte::detail::operator>(Buffer<BYTE> const &a, Buffer<BYTE> const &b) -> bool {
  return operator<(b, a);
}
template<typename BYTE> auto byte::detail::operator>=(Buffer<BYTE> const &a, Buffer<BYTE> const &b) -> bool {
  return operator<=(b, a);
}
#endiv
 

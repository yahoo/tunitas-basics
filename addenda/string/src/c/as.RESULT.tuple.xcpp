// -*- c++ -*-  in the SCOLD styling that is so popular these days
#divert <hpp>
#import c.as
#import std.tuple
#import std.size_t
namespace c {
  // in the style of std::array<TYPE, SIZE>
  template<typename RESULT, typename CHAR> inline auto as(std::tuple<CHAR const, int> const &) -> RESULT;
  template<typename RESULT, typename CHAR> inline auto as(std::tuple<CHAR, int> const &) -> RESULT;
  template<typename RESULT, typename CHAR> inline auto as(std::tuple<CHAR, int> &) -> RESULT;

  template<typename RESULT, typename CHAR> inline auto as(std::tuple<CHAR const *, std::size_t> const &) -> RESULT;
  template<typename RESULT, typename CHAR> inline auto as(std::tuple<CHAR *, std::size_t> const &) -> RESULT;
  template<typename RESULT, typename CHAR> inline auto as(std::tuple<CHAR *, std::size_t> &) -> RESULT;

  // in the style of "main(int argc, char *argv[])"
  template<typename RESULT, typename CHAR> inline auto as(std::tuple<int, CHAR const, int> const &) -> RESULT;
  template<typename RESULT, typename CHAR> inline auto as(std::tuple<int, CHAR, int> const &) -> RESULT;
  template<typename RESULT, typename CHAR> inline auto as(std::tuple<int, CHAR, int> &) -> RESULT;

  template<typename RESULT, typename CHAR> inline auto as(std::tuple<std::size_t, CHAR const *> const &) -> RESULT;
  template<typename RESULT, typename CHAR> inline auto as(std::tuple<std::size_t, CHAR *> const &) -> RESULT;
  template<typename RESULT, typename CHAR> inline auto as(std::tuple<std::size_t, CHAR *> &) -> RESULT;
}
#divert </hpp>
#divert <ipp>
#import c.detail.Dispatcher
#import c.detail.normalize.tuple

template<typename RESULT, typename CHAR> auto c::as(std::tuple<CHAR const, int> const &subject) -> RESULT {
  using namespace detail;
  Dispatcher<RESULT> call;
  return call(normalize(subject));
}

template<typename RESULT, typename CHAR> inline auto c::as(std::tuple<CHAR, int> const &subject) -> RESULT {
  using namespace detail;
  Dispatcher<RESULT> call;
  return call(normalize(subject));
}

template<typename RESULT, typename CHAR> inline auto c::as(std::tuple<CHAR, int> &subject) -> RESULT {
  using namespace detail;
  Dispatcher<RESULT> call;
  return call(normalize(subject));
}

template<typename RESULT, typename CHAR> auto c::as(std::tuple<int, CHAR const> const &subject) -> RESULT {
  using namespace detail;
  Dispatcher<RESULT> call;
  return call(normalize(subject));
}

template<typename RESULT, typename CHAR> inline auto c::as(std::tuple<int, CHAR> const &subject) -> RESULT {
  using namespace detail;
  Dispatcher<RESULT> call;
  return call(normalize(subject));
}

template<typename RESULT, typename CHAR> inline auto c::as(std::tuple<int, CHAR> &subject) -> RESULT {
  using namespace detail;
  Dispatcher<RESULT> call;
  return call(normalize(subject));
}

template<typename RESULT, typename CHAR> auto c::as(std::tuple<CHAR const *, std::size_t> const &subject) -> RESULT {
  using namespace detail;
  Dispatcher<RESULT> call;
  return call(normalize(subject));
}

template<typename RESULT, typename CHAR> inline auto c::as(std::tuple<CHAR *, std::size_t> const &subject) -> RESULT {
  using namespace detail;
  Dispatcher<RESULT> call;
  return call(normalize(subject));
}

template<typename RESULT, typename CHAR> inline auto c::as(std::tuple<CHAR *, std::size_t> &subject) -> RESULT {
  using namespace detail;
  Dispatcher<RESULT> call;
  return call(normalize(subject));
}

template<typename RESULT, typename CHAR> auto c::as(std::tuple<std::size_t, CHAR const *> const &subject) -> RESULT {
  using namespace detail;
  Dispatcher<RESULT> call;
  return call(normalize(subject));
}

template<typename RESULT, typename CHAR> inline auto c::as(std::tuple<std::size_t, CHAR *> const &subject) -> RESULT {
  using namespace detail;
  Dispatcher<RESULT> call;
  return call(normalize(subject));
}

template<typename RESULT, typename CHAR> inline auto c::as(std::tuple<std::size_t, CHAR *> &subject) -> RESULT {
  using namespace detail;
  Dispatcher<RESULT> call;
  return call(normalize(subject));
}
#divert </ipp>

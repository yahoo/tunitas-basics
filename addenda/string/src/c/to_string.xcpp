// -*- c++ -*- in the SCOLD styling that is so popular these days
<hpp>
#import std.basic_string
#import std.size_t
namespace c {

  // Following std::to_string(...)
  //
  // Safely create a std::string from the C pointer representation
  // Safety is defined as: nullptr -> empty string

  template<typename CHAR, typename TRAITS, typename ALLOC> inline auto to_string(std::basic_string<CHAR, TRAITS, ALLOC> &&) -> std::basic_string<CHAR, TRAITS, ALLOC>;
  template<typename CHAR, typename TRAITS, typename ALLOC> inline auto to_string(std::basic_string<CHAR, TRAITS, ALLOC> const &) -> std::basic_string<CHAR, TRAITS, ALLOC> const &;

  template<typename CHAR, std::size_t N> inline auto to_string(CHAR (&)[N]) -> std::basic_string<CHAR>;
  template<typename CHAR, std::size_t N> inline auto to_string(CHAR const (&)[N]) -> std::basic_string<CHAR>;

  template<typename CHAR> inline auto to_string(CHAR *const &) -> std::basic_string<CHAR>;
  template<typename CHAR> inline auto to_string(CHAR const *const &) -> std::basic_string<CHAR>;

}
</hpp>
<ipp>
#import std.move

template<typename CHAR, typename TRAITS, typename ALLOC> auto c::to_string(std::basic_string<CHAR, TRAITS, ALLOC> &&anon) -> std::basic_string<CHAR, TRAITS, ALLOC> {
  return std::forward<std::basic_string<CHAR, TRAITS, ALLOC>>(anon);
}

template<typename CHAR, typename TRAITS, typename ALLOC> auto c::to_string(std::basic_string<CHAR, TRAITS, ALLOC> const &value) -> std::basic_string<CHAR, TRAITS, ALLOC> const & {
  return value;
}

template<typename CHAR, std::size_t N> auto c::to_string(CHAR (&value)[N]) -> std::basic_string<CHAR> {
  std::basic_string<CHAR> ret(&value[0], &value[N-1]); // skip the '\0' at the end
  return ret;
}

template<typename CHAR, std::size_t N> auto c::to_string(CHAR const (&value)[N]) -> std::basic_string<CHAR> {
  std::basic_string<CHAR> ret(&value[0], &value[N-1]); // skip the '\0' at the end
  return ret;
}

template<typename CHAR> auto c::to_string(CHAR *const &value) -> std::basic_string<CHAR> {
  std::basic_string<CHAR> ret;
  if (nullptr != value) {
    ret = value;
  }
  return ret;
}

template<typename CHAR> auto c::to_string(CHAR const *const &value) -> std::basic_string<CHAR> {
  std::basic_string<CHAR> ret;
  if (nullptr != value) {
    ret = value;
  }
  return ret;
}
</ipp>

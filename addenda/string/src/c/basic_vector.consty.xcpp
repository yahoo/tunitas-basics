// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
#forward c.basic_vector
namespace c {
  template<required::Character CHAR> class basic_vector<CHAR const>;
}
#endiv
#divert <hpp>
#import c.detail.BoundVector.Stringz
#import std.pair
#import std.size_t
#import std.tuple
#import std.vector

// reminder: provides NO storage management.
template<c::required::Character CHAR> class c::basic_vector<CHAR const> : public detail::BoundVector<detail::Stringz<CHAR const>> {
  using ancestor = detail::BoundVector<detail::Stringz<CHAR const>>;
public:
  basic_vector() = default;
  // preceding size is primary
  inline basic_vector(std::size_t size, typename ancestor::const_data_type data);
  // trailing size overrides inferred size
  template<std::size_t N> inline basic_vector(typename ancestor::value_type const (&data)[N], std::size_t size = N);
  // either order
  inline basic_vector(std::pair<std::size_t, CHAR **>);
  inline basic_vector(std::pair<CHAR **, std::size_t>);
  // either order
  inline basic_vector(std::pair<std::size_t, CHAR const *const *>);
  inline basic_vector(std::pair<CHAR const *const *, std::size_t>);
  // either order
  inline basic_vector(std::tuple<std::size_t, CHAR **>);
  inline basic_vector(std::tuple<CHAR **, std::size_t>);
  // either order
  inline basic_vector(std::tuple<std::size_t, CHAR const *const *>);
  inline basic_vector(std::tuple<CHAR const *const *, std::size_t>);
  // by reference
  template<typename ALLOC> inline basic_vector(std::vector<CHAR *, ALLOC> const &);
  template<typename ALLOC> inline basic_vector(std::vector<CHAR const *, ALLOC> const &);
  inline basic_vector(basic_vector<CHAR>);
public:
  struct tests { struct Suite; };
  friend struct tests::Suite;
};
#import std.is_same
static_assert(std::is_same<char const *, c::basic_vector<char const>::const_value_type>::value, "FAIL: c::basic_vector<char const>::const_value_type is a surprise");
static_assert(std::is_same<char const *const *, c::basic_vector<char const>::const_data_type>::value, "FAIL: c::basic_vector<char const>::const_data_type is a surprise");
static_assert(std::is_same<char const *, c::basic_vector<char const>::value_type>::value, "FAIL: c::basic_vector<char const>::value_type is a surprise");
static_assert(std::is_same<char const *const *, c::basic_vector<char const>::data_type>::value, "FAIL: c::basic_vector<char const>::data_type is a surprise");
#import std.is_constructible
// TO(FROM)
static_assert(std::is_constructible<c::basic_vector<char const>, char const *const (&)[2]>::value, "FAIL: basic_vector<char const> is not constructible from '(char const *const [2])'");
static_assert(std::is_constructible<c::basic_vector<char const>, int, char const *const [3]>::value, "FAIL: basic_vector<char const> is not constructible from the pair '(int, char const *const [3])'");
static_assert(std::is_constructible<c::basic_vector<char const>, int, char const *const *>::value, "FAIL: basic_vector<char const> is not constructible from the pair '(int, char const *const *)'");
static_assert(std::is_constructible<c::basic_vector<char const>, int, char *const *>::value, "FAIL: basic_vector<char const> is not constructible from the pair '(int, char *const *)'");
static_assert(std::is_constructible<c::basic_vector<char const>, int, char **>::value, "FAIL: basic_vector<char const> is not constructible from the pair '(int, char **)'");
#divert </hpp>
#divert <ipp>
#import std.get
#import std.length_error
#import std.min
template<c::required::Character CHAR> template<std::size_t N> c::basic_vector<CHAR const>::basic_vector(typename ancestor::value_type const (&arg_data)[N], std::size_t arg_size)
  : ancestor(arg_data, std::min(arg_size, N)) {
  // Even though N is manifest we are directed to not use it (we want another length value, presumably a shorter one)
  if (arg_size > N) {
    throw std::length_error("size > N");
  }
}

template<c::required::Character CHAR> c::basic_vector<CHAR const>::basic_vector(std::size_t arg_size, typename ancestor::const_data_type arg_data)
  : ancestor(arg_data, arg_size) {
  ;
}

template<c::required::Character CHAR> c::basic_vector<CHAR const>::basic_vector(std::pair<std::size_t, CHAR **> subject)
  : ancestor(subject.second, subject.first) {
  ;
}

template<c::required::Character CHAR> c::basic_vector<CHAR const>::basic_vector(std::pair<CHAR **, std::size_t> subject)
  : ancestor(subject.first, subject.second) {
  ;
}

template<c::required::Character CHAR> c::basic_vector<CHAR const>::basic_vector(std::pair<std::size_t, CHAR const *const *> subject)
  : ancestor(subject.second, subject.first) {
  ;
}

template<c::required::Character CHAR> c::basic_vector<CHAR const>::basic_vector(std::pair<CHAR const *const *, std::size_t> subject)
  : ancestor(subject.first, subject.second) {
  ;
}

template<c::required::Character CHAR> c::basic_vector<CHAR const>::basic_vector(std::tuple<std::size_t, CHAR **> subject)
  : ancestor(std::get<1>(subject), std::get<0>(subject)) {
  ;
}

template<c::required::Character CHAR> c::basic_vector<CHAR const>::basic_vector(std::tuple<CHAR **, std::size_t> subject)
  : ancestor(std::get<0>(subject), std::get<1>(subject)) {
  ;
}

template<c::required::Character CHAR> c::basic_vector<CHAR const>::basic_vector(std::tuple<std::size_t, CHAR const *const *> subject)
  : ancestor(std::get<1>(subject), std::get<0>(subject)) {
  ;
}

template<c::required::Character CHAR> c::basic_vector<CHAR const>::basic_vector(std::tuple<CHAR const *const *, std::size_t> subject)
  : ancestor(std::get<0>(subject), std::get<1>(subject)) {
  ;
}

template<c::required::Character CHAR> template<typename ALLOC> c::basic_vector<CHAR const>::basic_vector(std::vector<CHAR *, ALLOC> const &subject)
  : ancestor(subject.data(), subject.size()) {
  ;
}

template<c::required::Character CHAR> template<typename ALLOC> c::basic_vector<CHAR const>::basic_vector(std::vector<CHAR const *, ALLOC> const &subject)
  : ancestor(subject.data(), subject.size()) {
  ;
}

template<c::required::Character CHAR> c::basic_vector<CHAR const>::basic_vector(basic_vector<CHAR> subject)
  : ancestor(subject.data(), subject.size()) {
  ;
}
#endiv

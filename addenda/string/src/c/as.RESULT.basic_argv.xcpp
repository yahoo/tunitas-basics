// -*- c++ -*-  in the SCOLD styling that is so popular these days
#divert <hpp>
#import c.as
#import c.basic_argv
namespace c {
  // argv (an array of pointers-to-zstring, with a length); not nullptr-terminated
  template<typename RESULT, typename CHAR> inline auto as(basic_argv<CHAR const>) -> RESULT;
  template<typename RESULT, typename CHAR> inline auto as(basic_argv<CHAR>) -> RESULT;
}
#divert </hpp>
#divert <ipp>
#import std.is_same
template<typename RESULT, typename CHAR> auto c::as(basic_argv<CHAR const> subject) -> RESULT {
  static_assert(std::is_same<RESULT, basic_argv<CHAR const>>::value, "RESULT is not appropriate here");
  return subject;
}

template<typename RESULT, typename CHAR> auto c::as(basic_argv<CHAR> subject) -> RESULT {
  // Allow:
  //   as<basic_argv<char const>>(basic_argv<char>) ..... cast to const
  //   as<basic_argv<char>>(basic_argv<char>) ........... identity transform
  static_assert((std::is_same<RESULT, basic_argv<CHAR const>>::value
		 ||
		 std::is_same<RESULT, basic_argv<CHAR>>::value),
		"RESULT is not appropriate here");
  // Because it may be a cast, we need to recompose
  return RESULT(subject.size(), subject.data());
}
#divert </ipp>

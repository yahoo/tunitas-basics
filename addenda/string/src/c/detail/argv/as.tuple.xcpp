// -*- c++ -*-  in the SCOLD styling that is so popular these days
#divert <hpp>
#import c.basic_argv
#import std.tuple
#import std.size_t
namespace c {
  namespace detail {
    namespace argv {
      template<typename CHAR> inline auto as(std::tuple<CHAR const *const *, std::size_t> const &) -> basic_argv<CHAR const>;
      template<typename CHAR> inline auto as(std::tuple<CHAR **, std::size_t> const &) -> basic_argv<CHAR const>;
      template<typename CHAR> inline auto as(std::tuple<CHAR **, std::size_t> &) -> basic_argv<CHAR>;
    }
  }
}
#divert </hpp>
#divert <ipp>
#import std.get
template<typename CHAR> auto c::detail::argv::as(std::tuple<CHAR const *const *, std::size_t> const &tup) -> basic_argv<CHAR const> {
  basic_argv<CHAR const> ret(std::get<1>(tup), std::get<0>(tup));
  return ret;
}

template<typename CHAR> auto c::detail::argv::as(std::tuple<CHAR **, std::size_t> const &tup) -> basic_argv<CHAR const> {
  basic_argv<CHAR const> ret(std::get<1>(tup), std::get<0>(tup));
  return tup;
}

template<typename CHAR> auto c::detail::argv::as(std::tuple<CHAR **, std::size_t> const &tup) -> basic_argv<CHAR> {
  basic_argv<CHAR> ret(std::get<1>(tup), std::get<0>(tup));
  return tup;
}
#divert </ipp>

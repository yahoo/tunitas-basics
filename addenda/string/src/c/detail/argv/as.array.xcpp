
// -*- c++ -*-  in the SCOLD styling that is so popular these days
#divert <hpp>
#import c.basic_argv
#import std.array
namespace c {
  namespace detail {
    namespace argv {
      // WATCHOUT - for the "argv" data type, the arr[arr.size()-1()] must be nullptr so the "declared size" is size-1
      // Can't say this enough times.
      template<typename CHAR, std::size_t N> inline auto as(std::array<CHAR const *, N> const &) -> basic_argv<CHAR const>;
      template<typename CHAR, std::size_t N> inline auto as(std::array<CHAR *, N> const &) -> basic_argv<CHAR const>;
      template<typename CHAR, std::size_t N> inline auto as(std::array<CHAR *, N> &) -> basic_argv<CHAR>;
    }
  }
}
#divert </hpp>
#divert <ipp>
template<typename CHAR, std::size_t N> auto c::detail::argv::as(std::array<CHAR const *, N> const &arr) -> basic_argv<CHAR const> {
  // WATCHOUT - for the "argv" data type, the arr[arr.size()-1()] must be nullptr so the "declared size" is size-1
  basic_argv<CHAR const> ret(arr.size()-1, arr.data());
  return ret;
}

template<typename CHAR, std::size_t N> auto c::detail::argv::as(std::array<CHAR *, N> const &arr) -> basic_argv<CHAR const> {
  // WATCHOUT - for the "argv" data type, the arr[arr.size()-1()] must be nullptr so the "declared size" is size-1
  basic_argv<CHAR const> ret(arr.size()-1, arr.data());
  return ret;
}

template<typename CHAR, std::size_t N> auto c::detail::argv::as(std::array<CHAR *, N> &arr) -> basic_argv<CHAR> {
  // WATCHOUT - for the "argv" data type, the arr[arr.size()-1()] must be nullptr so the "declared size" is size-1
  basic_argv<CHAR> ret(arr.size()-1, arr.data());
  return ret;
}
#divert </ipp>

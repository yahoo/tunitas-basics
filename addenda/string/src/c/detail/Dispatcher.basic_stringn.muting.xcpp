// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
#import c.basic_stringn
#forward c.detail.Dispatcher
namespace c {
  namespace detail {
    template<typename CHAR> struct Dispatcher<basic_stringn<CHAR>>;
  }
}
#divert </fpp>
#divert <hpp>
#import std.array
#import std.pair
#import std.remove_const
#import std.tuple
#import std.vector
// not std::basic_string (not possible)
#forward c.basic_stringn
#forward c.basic_stringz
template<typename CHAR> struct c::detail::Dispatcher<c::basic_stringn<CHAR>> {
  using result_type = basic_stringn<CHAR>;
  using char_type = typename std::remove_const<CHAR>::type;

  // Whereas as<...>(...) is a conversion operation,
  // the new data invariant of stringn must be respected.
  // therefore, these throw std::invalid_argument if the element at or before [N] is not nullptr

  // basic_stringn (identity)
  auto operator()(basic_stringn<CHAR const> &) -> result_type = delete;
  inline auto operator()(basic_stringn<CHAR> &) -> result_type;

  // basic_stringz (sibling)
  auto operator()(basic_stringz<CHAR const> &) -> result_type = delete;
  inline auto operator()(basic_stringz<CHAR> &) -> result_type;

  // array
  template<std::size_t N> auto operator()(std::array<char_type, N> const &) -> result_type = delete;
  template<std::size_t N> inline auto operator()(std::array<char_type, N> &) -> result_type;

  // char (unchecked)
  auto operator()(CHAR const *) -> result_type = delete;
  inline auto operator()(CHAR *) -> result_type;
  // char (checked)
  template<std::size_t N> auto operator()(CHAR const (&)[N]) -> result_type = delete;
  template<std::size_t N> inline auto operator()(CHAR (&)[N]) -> result_type;

  // pair
  auto operator()(std::pair<int, CHAR const *> const &) -> result_type = delete;
  inline auto operator()(std::pair<int, CHAR *> const &) -> result_type;

  auto operator()(std::pair<std::size_t, CHAR const *> const &) -> result_type = delete;
  inline auto operator()(std::pair<std::size_t, CHAR *> const &) -> result_type;

  // tuple
  auto operator()(std::tuple<int, CHAR const *> const &) -> result_type = delete;
  inline auto operator()(std::tuple<int, CHAR *> const &) -> result_type;

  auto operator()(std::tuple<std::size_t, CHAR const *> const &) -> result_type = delete;
  inline auto operator()(std::tuple<std::size_t, CHAR *> const &) -> result_type;

  // vector
  auto operator()(std::vector<char_type> const &) -> result_type = delete;
  inline auto operator()(std::vector<char_type> &) -> result_type;

  // basic_string
  auto operator()(std::basic_string<char_type> const &) -> result_type = delete;
  auto operator()(std::basic_string<char_type> &) -> result_type = delete;
public:
  struct tests { struct Suite; };
  friend struct tests::Suite;
};
#divert </hpp>
#divert <ipp>
#import c.basic_stringn
#import c.basic_stringz

template<typename CHAR> auto c::detail::Dispatcher<c::basic_stringn<CHAR>>::operator()(basic_stringn<CHAR> &subject) -> result_type {
  return subject;
}

template<typename CHAR> auto c::detail::Dispatcher<c::basic_stringn<CHAR>>::operator()(basic_stringz<CHAR> &subject) -> result_type {
  return result_type(subject.data(), subject.size());
}

#import c.detail.stringn.as.array
template<typename CHAR> template<std::size_t N> auto c::detail::Dispatcher<c::basic_stringn<CHAR>>::operator()(std::array<char_type, N> &subject) -> result_type {
  return stringn::as(subject);
}

#import c.detail.stringn.as.char
template<typename CHAR> auto c::detail::Dispatcher<c::basic_stringn<CHAR>>::operator()(CHAR *subject) -> result_type {
  return stringn::as(subject);
}

template<typename CHAR> template<std::size_t N> inline auto c::detail::Dispatcher<c::basic_stringn<CHAR>>::operator()(CHAR (&subject)[N]) -> result_type {
  return stringn::as(subject);
}

#import c.detail.stringn.as.pair
template<typename CHAR> auto c::detail::Dispatcher<c::basic_stringn<CHAR>>::operator()(std::pair<int, CHAR *> const &subject) -> result_type {
  return stringn::as(subject);
}

template<typename CHAR> auto c::detail::Dispatcher<c::basic_stringn<CHAR>>::operator()(std::pair<std::size_t, CHAR *> const &subject) -> result_type {
  return stringn::as(subject);
}

#import c.detail.stringn.as.tuple
template<typename CHAR> auto c::detail::Dispatcher<c::basic_stringn<CHAR>>::operator()(std::tuple<int, CHAR *> const &subject) -> result_type {
  return stringn::as(subject);
}

template<typename CHAR> auto c::detail::Dispatcher<c::basic_stringn<CHAR>>::operator()(std::tuple<std::size_t, CHAR *> const &subject) -> result_type {
  return stringn::as(subject);
}

#import c.detail.stringn.as.vector
template<typename CHAR> auto c::detail::Dispatcher<c::basic_stringn<CHAR>>::operator()(std::vector<char_type> &subject) -> result_type {
  return stringn::as(subject);
}
#divert </ipp>

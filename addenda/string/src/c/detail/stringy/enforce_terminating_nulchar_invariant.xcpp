// -*- c++ -*-  in the SCOLD styling that is so popular these days
#divert <hpp>
#import std.array
#import std.size_t
namespace c {
  namespace detail {
    namespace stringy {
      //
      //                 0   1   2   3   5
      // buffer cat = { 'c' 'a' 't' '\0' }
      //
      // buffer
      //     begin = &cat[0]
      //     end   = &cat[4] ... one after the end of the buffer)
      //     size  = 4
      //
      // string
      //     begin = &cat[0]
      //     end   = &cat[3] ... pointing at the '\0'
      //     size  = 3
      //
      // WATCHOUT - for the containers, the final element must be '\0', so the "available size" is size-1.
      // Can't say this enough times.  std::array is hard to work with.
      //
      template<typename CONTAINER> inline auto enforce_terminating_nulchar_invariant(CONTAINER const &) -> void; 
      template<typename ITERATOR> inline auto enforce_terminating_nulchar_invariant(ITERATOR start, ITERATOR finish) -> void;
    }
  }
}
#divert </hpp>
#divert <ipp>
#import c.detail.enforce_termination_invariant
#import std.char_traits
#import std.iterator_traits

template<typename CONTAINER> auto c::detail::stringy::enforce_terminating_nulchar_invariant(CONTAINER const &container) -> void {
  using char_type = typename CONTAINER::value_type;
  constexpr char_type const nulchar = std::char_traits<char_type>::to_char_type(0);
  enforce_termination_invariant(detail::FINAL(), container.begin(), container.end(), nulchar, "nulchar");
}

template<typename ITERATOR> auto c::detail::stringy::enforce_terminating_nulchar_invariant(ITERATOR start, ITERATOR finish) -> void {
  using char_type = typename std::iterator_traits<ITERATOR>::value_type;
  constexpr char_type const nulchar = std::char_traits<char_type>::to_char_type(0);
  enforce_termination_invariant(detail::FINAL(), start, finish, nulchar, "nulchar");
}
#divert </ipp>

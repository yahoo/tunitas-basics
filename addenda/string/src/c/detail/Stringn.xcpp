// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace c {
  namespace detail {
    //
    // Similar to std::basic_string_view of C++17, except they bind the 'const' within the type
    // Similar-to meaning "rhymes with" but is not "the same as"
    //
    // Reminder: the pointed-to buffer is not managed; it is not deleted upon destruction
    // These are best used ONLY for aiding the comparison operators
    // These are NOT suitable for storing the pointer values persistently.
    template<typename CHAR> class Stringn;
  }
}
#entail c.detail.Stringn.consty
#entail c.detail.Stringn.muting
#divert </fpp>
#divert <hpp>
#import std.basic_ostream
namespace c {
  namespace detail {
    template<typename CHAR, typename TRAITS> inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, Stringn<CHAR> const &) -> std::basic_ostream<CHAR, TRAITS> &;
    template<typename CHAR, typename TRAITS> inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, Stringn<CHAR const> const &) -> std::basic_ostream<CHAR, TRAITS> &;
  }
}
#endiv
#divert <ipp>
template<typename CHAR, typename TRAITS> inline auto c::detail::operator<<(std::basic_ostream<CHAR, TRAITS> &o, Stringn<CHAR> const &s) -> std::basic_ostream<CHAR, TRAITS> & {
  for (auto c : s) {
    o << c;
  }
  return o;
}

template<typename CHAR, typename TRAITS> inline auto c::detail::operator<<(std::basic_ostream<CHAR, TRAITS> &o, Stringn<CHAR const> const &s) -> std::basic_ostream<CHAR, TRAITS> & {
  for (auto c : s) {
    o << c;
  }
  return o;
}
#endiv

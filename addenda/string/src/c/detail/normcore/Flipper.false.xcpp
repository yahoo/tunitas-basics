// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
#import c.detail.normcore.Flipper
namespace c {
  namespace detail {
    namespace normcore {
      template<template<typename FIRST, typename SECOND> class PAIRLIKE, typename PAYLOAD, typename INTEGER> struct Flipper<PAIRLIKE, PAYLOAD, INTEGER, false>;
    }
  }
}
#divert </fpp>
#divert <hpp>
#import std.is_integral
#import std.is_pointer
template<template<typename FIRST, typename SECOND> class PAIRLIKE, typename PAYLOAD, typename INTEGER> struct c::detail::normcore::Flipper<PAIRLIKE, PAYLOAD, INTEGER, false> {
  static_assert(std::is_integral<INTEGER>::value, "INTEGER is not an integer (representing a size)");
  static_assert(std::is_pointer<PAYLOAD>::value, "PAYLOAD is not a pointer (to a character string or vector of character strings)");
  using first_type = PAYLOAD;
  using second_type = INTEGER;
  static constexpr bool const FLIP = false;
  using pairlike_type = PAIRLIKE<first_type, second_type>;
  using result_type = PAIRLIKE<first_type, second_type>;
  using payload_type = first_type;
  using size_type = second_type;
  inline auto payload(pairlike_type const &) -> payload_type;
  inline auto size(pairlike_type const &) -> size_type;
};
#divert </hpp>
#divert <ipp>
#import c.detail.normcore.Accessor
template<template<typename FIRST, typename SECOND> class PAIRLIKE, typename PAYLOAD, typename INTEGER> auto c::detail::normcore::Flipper<PAIRLIKE, PAYLOAD, INTEGER, false>::payload(pairlike_type const &subject) -> payload_type {
  using accessor = Accessor<pairlike_type>;
  return accessor::first(subject);
}

template<template<typename FIRST, typename SECOND> class PAIRLIKE, typename PAYLOAD, typename INTEGER> auto c::detail::normcore::Flipper<PAIRLIKE, PAYLOAD, INTEGER, false>::size(pairlike_type const &subject) -> size_type {
  using accessor = Accessor<pairlike_type>;
  return accessor::second(subject);
}
#divert </ipp>

// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace c {
  namespace detail {
    namespace normcore {
      // Concept:
      //   Dispatcher<decltype(variable)> call;
      //   return call(subject);
      template<typename DECLTYPE> struct Dispatcher;
    }
  }
}
#divert </fpp>
#divert <hpp>
#import c.detail.normcore.Flipper
#import c.detail.normcore.Palette
#import std.is_integral
template<typename DECLTYPE> struct c::detail::normcore::Dispatcher : public Flipper<Palette<DECLTYPE>::template pairlike_template, typename Palette<DECLTYPE>::first_type, typename Palette<DECLTYPE>::second_type, std::is_integral<typename Palette<DECLTYPE>::first_type>::value> {
private:
  using ancestor = Flipper<Palette<DECLTYPE>::template pairlike_template, typename Palette<DECLTYPE>::first_type, typename Palette<DECLTYPE>::second_type, std::is_integral<typename Palette<DECLTYPE>::first_type>::value>;
public:
  inline auto operator()(typename ancestor::pairlike_type const &) -> typename ancestor::result_type;
};
#divert </hpp>
#divert <ipp>
template<typename DECLTYPE> auto c::detail::normcore::Dispatcher<DECLTYPE>::operator()(typename ancestor::pairlike_type const &subject) -> typename ancestor::result_type {
  typename ancestor::result_type ret(payload(subject), size(subject));
  return ret;
};
#divert </ipp>

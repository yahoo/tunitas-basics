// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
#import c.detail.normcore.Accessor
#import std.tuple
namespace c {
  namespace detail {
    namespace normcore {
      template<typename FIRST, typename SECOND> class Accessor<std::tuple<FIRST, SECOND>>;
    }
  }
}
#divert </fpp>
#divert <hpp>
template<typename FIRST, typename SECOND> struct c::detail::normcore::Accessor<std::tuple<FIRST, SECOND>> {
  using subject_type = std::tuple<FIRST, SECOND>;
  inline static auto first(subject_type const &) -> FIRST;
  inline static auto second(subject_type const &) -> SECOND;
};
#divert </hpp>
#divert <ipp>
#import std.get
template<typename FIRST, typename SECOND> auto c::detail::normcore::Accessor<std::tuple<FIRST, SECOND>>::first(subject_type const &subject) -> FIRST {
  return std::get<0>(subject);
}

template<typename FIRST, typename SECOND> auto c::detail::normcore::Accessor<std::tuple<FIRST, SECOND>>::second(subject_type const &subject) -> SECOND {
  return std::get<1>(subject);
}
#divert </ipp>

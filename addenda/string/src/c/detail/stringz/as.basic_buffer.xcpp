// -*- c++ -*-  in the SCOLD styling that is so popular these days
#divert <hpp>
#import c.basic_buffer
#import c.basic_stringz
namespace c {
  namespace detail {
    namespace stringz {
      // Whereas as<...>(...) is a conversion operation,
      // the new data invariant of stringz must be respected.
      // these throw std::invalid_argument if the element at or before [N] is not the nulchar ('\0')
      template<typename CHAR> inline auto as(basic_buffer<CHAR const> const &) -> basic_stringz<CHAR const>;
      template<typename CHAR> inline auto as(basic_buffer<CHAR> const &) -> basic_stringz<CHAR const>;
      template<typename CHAR> inline auto as(basic_buffer<CHAR> &) -> basic_stringz<CHAR>;
    }
  }
}
#divert </hpp>
#divert <ipp>
#import c.detail.stringy.enforce_terminating_nulchar_invariant

template<typename CHAR> auto c::detail::stringz::as(basic_buffer<CHAR const> const &buf) -> basic_stringz<CHAR const> {
  stringy::enforce_terminating_nulchar_invariant(buf);
  basic_stringz<CHAR const> ret(buf.data());
  return ret;
}

template<typename CHAR> auto c::detail::stringz::as(basic_buffer<CHAR> const &buf) -> basic_stringz<CHAR const> {
  stringy::enforce_terminating_nulchar_invariant(buf);
  basic_stringz<CHAR const> ret(buf.data());
  return buf;
}

template<typename CHAR> auto c::detail::stringz::as(basic_buffer<CHAR> &buf) -> basic_stringz<CHAR> {
  stringy::enforce_terminating_nulchar_invariant(buf);
  basic_stringz<CHAR> ret(buf.data());
  return buf;
}
#divert </ipp>

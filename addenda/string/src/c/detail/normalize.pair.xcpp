// -*- c++ -*- in the SCOLD styling that is so popular these days
#divert <hpp>
#import std.pair
#import std.size_t
namespace c {
  namespace detail {

    template<typename PAYLOAD> inline auto normalize(std::pair<int, PAYLOAD> const &) -> std::pair<PAYLOAD, int>;
    template<typename PAYLOAD> inline auto normalize(std::pair<PAYLOAD, int> const &) -> std::pair<PAYLOAD, int>;
    template<typename PAYLOAD> inline auto normalize(std::pair<std::size_t, PAYLOAD> const &) -> std::pair<PAYLOAD, std::size_t>;
    template<typename PAYLOAD> inline auto normalize(std::pair<PAYLOAD, std::size_t> const &) -> std::pair<PAYLOAD, std::size_t>;

  }
}
#divert </hpp>
#divert <ipp>
#import c.detail.normcore.Dispatcher
template<typename PAYLOAD> auto c::detail::normalize(std::pair<int, PAYLOAD> const &subject) -> std::pair<PAYLOAD, int> {
  normcore::Dispatcher<decltype(subject)> call;
  return call(subject);
}

template<typename PAYLOAD> auto c::detail::normalize(std::pair<PAYLOAD, int> const &subject) -> std::pair<PAYLOAD, int> {
  normcore::Dispatcher<decltype(subject)> call;
  return call(subject);
}

template<typename PAYLOAD> auto c::detail::normalize(std::pair<std::size_t, PAYLOAD> const &subject) -> std::pair<PAYLOAD, std::size_t> {
  normcore::Dispatcher<decltype(subject)> call;
  return call(subject);
}

template<typename PAYLOAD> auto c::detail::normalize(std::pair<PAYLOAD, std::size_t> const &subject) -> std::pair<PAYLOAD, std::size_t> {
  normcore::Dispatcher<decltype(subject)> call;
  return call(subject);
}
#divert </ipp>

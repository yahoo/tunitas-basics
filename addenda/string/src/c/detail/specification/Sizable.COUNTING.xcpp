// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
#forward c.detail.specification.Sizable
namespace c {
  namespace detail {
    namespace specification {
      template<> class Sizable<COUNTING>;
    }
  }
}
#divert </fpp>
#divert <hpp>
#import std.size_t
namespace c {
  namespace detail {
    namespace specification {
      template<> class Sizable<COUNTING> {
      public:
	Sizable() = default;
      protected:
	~Sizable() = default; // must inherit
      protected:
        // primitive for auto size() const -> size_type
	template<typename ITERATOR, typename VALUE> inline auto howmany(ITERATOR begin, VALUE sentinel) const -> std::size_t; // <------------------ non-constant time; O(N) time
        // primitive for auto end() const -> const_iterator
	template<typename CONST_ITERATOR, typename VALUE> inline auto endify(CONST_ITERATOR begin, VALUE sentinel) const -> CONST_ITERATOR;
        // primitive for auto end() -> iterator
	template<typename ITERATOR, typename VALUE> inline auto endify(ITERATOR begin, VALUE sentinel) -> ITERATOR;
        //
        // The descendant must implement auto size() const -> std::size_t which calls these primitives
        //
      public:
	struct tests { struct Suite; };
	friend struct tests::Suite;
      };
    }
  }
}
#divert </hpp>
#divert <ipp>
namespace c {
  namespace detail {
    namespace specification {
      template<typename ITERATOR, typename VALUE> auto Sizable<COUNTING>::howmany(ITERATOR begin, VALUE sentinel) const -> std::size_t {
	if (nullptr == begin) {
	  return 0u;
	} else {
	  std::size_t count(0);
	  for (ITERATOR i(begin); sentinel != *i; ++i) {
	    count++;
	  }
	  // The "size" is the number of valid elements
	  // The storage is 1+ that because of the sentinel (which is a nullptr or a nul character)
	  return count;
	}
      }

      template<typename CONST_ITERATOR, typename VALUE> auto Sizable<COUNTING>::endify(CONST_ITERATOR begin, VALUE sentinel) -> CONST_ITERATOR {
	return begin + howmany(begin, sentinel);
      }

      template<typename ITERATOR, typename VALUE> auto Sizable<COUNTING>::endify(ITERATOR begin, VALUE sentinel) const -> ITERATOR {
	return begin + howmany(begin, sentinel);
      }
    }
  }
}
#divert </ipp>

// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace c {
  namespace detail {
    namespace specification {
      // Provides NO storage management.
      // Suitable for Buffer, Stringz, Environv, basic_argv, etc.
      // Herein, the size() is not defined; a descendant must define it
      // Whether there is a terminating nullptr sentinel is ambiguous (not specified here).
      template<typename INDIRECTION> class Prototype;
    }
  }
}
#entail c.detail.specification.Core
#entail c.detail.specification.Indirection
#entail c.detail.specification.Mutability
namespace c {
  namespace detail {
    namespace specification {
      //
      // Prototype Indirection, Mutability, 
      // After 'Indirection'
      //
      //  Usage
      //   PIMNC<char, char>  <--------------- tricky, 'char' stays the same
      //   PIMNC<char, char const *>
      //   PIMNC<char, char const *const *>
      //
      //   PIMYC<char, char> <--------------- ibidem.
      //   PIMYC<char, char *>
      //   PIMYC<char, char **>
      //
      // MY = "mutability yes"; i.e. muting
      // MN = "mutabilit no"; i.e. const
      //
      template<Mutability MUTABILITY, typename CHAR, typename VALUE> using PIMC = Prototype<Indirection<MUTABILITY, Core<CHAR>, VALUE>>;
      template<typename CHAR, typename VALUE> using PIMNC = PIMC<Mutability::NO, CHAR, VALUE>;
      template<typename CHAR, typename VALUE> using PIMYC = PIMC<Mutability::YES, CHAR, VALUE>;
    }
  }
}
#entail c.detail.specification.Prototype.consty
#entail c.detail.specification.Prototype.muting
#divert </fpp>

// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
#import c.detail.specification.Indirection
#import c.detail.specification.Mutability
#forward c.detail.specification.Unbound
namespace c {
  namespace detail {
    namespace specification {
      template<typename CORE, typename VALUE> struct Unbound<Indirection<Mutability::YES, CORE, VALUE>>;
    }
  }
}
#divert </fpp>
#divert <hpp>
#import c.detail.specification.Sizable.COUNTING
#import c.detail.specification.Prototype
#import std.size_t
namespace c {
  namespace detail {
    namespace specification {
      template<typename CORE, typename VALUE> class Unbound<Indirection<Mutability::YES, CORE, VALUE>> : public Prototype<Indirection<Mutability::YES, CORE, VALUE>>, public Sizable<COUNTING> {
	using ancestor = Prototype<Indirection<Mutability::YES, CORE, VALUE>>;
        using sizable = Sizable<COUNTING>;
      public:
	Unbound() = default;
	using ancestor::Prototype;
      protected:
	// You have to inherit to operationalize this
	~Unbound() = default; // definitely not virtual
      public:
        inline auto empty() const -> bool;
        inline auto size() const -> std::size_t;
        inline auto end() -> typename ancestor::iterator;
        inline auto end() const -> typename ancestor::const_iterator;
        // recall: operator[], front() are implemented in the ancestor and bounds-unchecked; there is no back()
      public:
	struct tests { struct Suite; };
	friend struct tests::Suite;
      };
    }
  }
}
#divert </hpp>
#divert <ipp>
namespace c {
  namespace detail {
    namespace specification {
      template<typename CORE, typename VALUE> auto Unbound<Indirection<Mutability::YES, CORE, VALUE>>::empty() const -> bool {
        return 0 == size();
      }

      template<typename CORE, typename VALUE> auto Unbound<Indirection<Mutability::YES, CORE, VALUE>>::size() const -> std::size_t {
        return sizable::howmany(ancestor::begin(), VALUE());
      }

      template<typename CORE, typename VALUE> auto Unbound<Indirection<Mutability::YES, CORE, VALUE>>::end() -> typename ancestor::iterator {
        return sizable::endify(ancestor::begin(), VALUE());
      }

      template<typename CORE, typename VALUE> auto Unbound<Indirection<Mutability::YES, CORE, VALUE>>::end() const -> typename ancestor::const_iterator {
        return sizable::endify(ancestor::begin(), VALUE());
      }
    }
  }
}
#divert </ipp>

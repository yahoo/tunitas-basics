// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
#import c.detail.specification.Mutability
namespace c {
  namespace detail {
    namespace specification {
      //
      // Usage:
      //   Indirection<Mutability::NO,  Core<char>, char>  <--------------- tricky, 'char' stays the same
      //   Indirection<Mutability::NO,  Core<char>, char const *>
      //   Indirection<Mutability::NO,  Core<char>, char const *const *>
      //
      //   Indirection<Mutability::YES, Core<char>, char>
      //   Indirection<Mutability::YES, Core<char>, char *>
      //   Indirection<Mutability::YES, Core<char>, char **>
      //
      template<Mutability, typename CORE, typename VALUE> struct Indirection;
      template<typename CORE, typename VALUE> struct Indirection<Mutability::YES, CORE, VALUE>;
      template<typename CORE, typename VALUE> struct Indirection<Mutability::NO,  CORE, VALUE>;
    }
  }
}
#divert </fpp>
#divert <hpp>
#import std.conditional
#import std.add_pointer
#import std.add_pointer
#import std.remove_pointer
#import std.is_pointer
namespace c {
  namespace detail {
    namespace specification {
      namespace elemental {
	template<typename TYPE> struct constify_referent {
	  // 'char *' -> 'char const *'
	  // 'char **' -> 'char *const *'
	  using type = typename std::add_pointer<typename std::add_const<typename std::remove_pointer<TYPE>::type>::type>::type;
	};
	template<typename TYPE> struct constify {
	  // 'char'   -> 'char'
	  // 'char *' -> 'char const *'
	  // 'char **' -> 'char *const *'
	  using type = typename std::conditional<std::is_pointer<TYPE>::value, typename constify_referent<TYPE>::type, TYPE>::type;
	};
      }

      template<typename CORE, typename VALUE> struct Indirection<Mutability::YES, CORE, VALUE> : public CORE {
	using value_type = VALUE;
	using data_type = value_type *;
	using iterator = data_type;
	using const_value_type = typename elemental::constify<VALUE>::type;
	using const_data_type = const_value_type const *;
	using const_iterator = const_data_type;
      protected:
        static value_type EMPTY[1];
      };

      template<typename CORE, typename VALUE> struct Indirection<Mutability::NO, CORE, VALUE> : public CORE {
	using value_type = VALUE;
	using data_type = value_type const *;
	using iterator = data_type;
	using const_value_type = value_type;
	using const_data_type = data_type;
	using const_iterator = iterator;
      protected:
        static value_type const EMPTY[1];
      };
    }
  }
}
#endiv
#divert <tpp>
namespace c::detail::specification {
  template<typename CORE, typename VALUE> typename Indirection<Mutability::YES, CORE, VALUE>::value_type Indirection<Mutability::YES, CORE, VALUE>::EMPTY[1]{0};
  template<typename CORE, typename VALUE> typename Indirection<Mutability::NO, CORE, VALUE>::value_type const Indirection<Mutability::NO, CORE, VALUE>::EMPTY[1]{0};
}
#endiv

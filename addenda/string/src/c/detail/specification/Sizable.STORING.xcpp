// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
#forward c.detail.specification.Sizable
namespace c {
  namespace detail {
    namespace specification {
      template<> class Sizable<STORING>;
    }
  }
}
#divert </fpp>
#divert <hpp>
#import std.size_t
#import c.detail.specification.Sizable
namespace c {
  namespace detail {
    namespace specification {
      template<> class Sizable<STORING> {
      public:
	// DO NOT ----> Sizable() = default; <----
        // as that will not initialize the POD which is the length
	inline Sizable();
	inline explicit Sizable(std::size_t);
      protected:
	~Sizable() = default; // must inherit
      public:
	inline auto empty() const -> bool;
	inline auto size() const -> std::size_t;
      protected:
	template<typename CONST_ITERATOR> inline auto endify(CONST_ITERATOR begin) const -> CONST_ITERATOR;
	template<typename ITERATOR> inline auto endify(ITERATOR begin) -> ITERATOR;
	template<typename VALUE> inline static auto forward_indexify(VALUE *base, std::size_t length, std::size_t index) -> VALUE &;
	template<typename VALUE> inline static auto reverse_indexify(VALUE *base, std::size_t length, std::size_t index) -> VALUE &;
      protected:
	std::size_t length;
      public:
	struct tests { struct Suite; };
	friend struct tests::Suite;
      };
    }
  }
}
#divert </hpp>
#divert <ipp>
#import std.length_error
namespace c {
  namespace detail {
    namespace specification {
      Sizable<STORING>::Sizable()
	: length(0) { //<-------------- ahem, because otherwise the POD doesn't get initialized
	;
      }

      Sizable<STORING>::Sizable(std::size_t the_length)
	: length(the_length) {
	;
      }

      auto Sizable<STORING>::empty() const -> bool {
	return 0 == length;
      }

      auto Sizable<STORING>::size() const -> std::size_t {
	return length;
      }

      template<typename CONST_ITERATOR> auto Sizable<STORING>::endify(CONST_ITERATOR begin) const -> CONST_ITERATOR {
	// Valid even if held is nullptr (because length will be 0)
	return begin + length;
      }

      template<typename ITERATOR> auto Sizable<STORING>::endify(ITERATOR begin) -> ITERATOR {
	// Valid even if held is nullptr (because length will be 0)
	return begin + length;
      }

      template<typename VALUE> auto Sizable<STORING>::forward_indexify(VALUE *base, std::size_t length, std::size_t forward_index) -> VALUE & {
	if (forward_index >= length) {
	  throw std::length_error("index too big");
	}
        auto index = forward_index;
	return base[index];
      }

      template<typename VALUE> auto Sizable<STORING>::reverse_indexify(VALUE *base, std::size_t length, std::size_t reverse_index) -> VALUE & {
	if (reverse_index >= length) {
	  throw std::length_error("index too big");
	}
        auto index = (length-1) - reverse_index;
	return base[index];
      }
    }
  }
}
#divert </ipp>

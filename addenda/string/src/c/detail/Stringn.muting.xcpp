// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
#forward c.detail.Stringn
namespace c::detail {
  //
  // A string of constant CHAR where the length is supplied and maintained.
  // A "stringn" is expected to be '\0'-terminated, however the length is maintained separately
  //
  // For unterminated arrays of charactesr, use a c::buffer.
  // Also C++17 provides std::string_view which is a length-specified unterminated sequence of characters.
  //
  // The '\0' terminator is inspected upon construction from unsupervised pointers; and maintained faithfully thereafter.
  //
  template<typename CHAR> class Stringn;
}
#divert </fpp>
#divert <hpp>
#import std.is_const
#import std.size_t
#import c.detail.BoundVector
#import c.detail.Character
#forward c.basic_buffer
#forward c.detail.Stringz
#import std.basic_string
#import std.basic_string_view
#import std.vector

// These are suitable ONLY for aiding the comparison operators
// These are NOT suitable for storing the pointer values persistently.
template<typename CHAR> class c::detail::Stringn : public BoundVector<Character<CHAR>> {
  using ancestor = BoundVector<Character<CHAR>>;
  static_assert(!std::is_const<CHAR>::value, "CHAR cannot be const, use Stringn<CHAR const> which is a different specialization, nearby");
public:
  Stringn() = default;
  // Yes, all the constructors are implicit.
  // Throws an exception if value[N] is not '\0'; this designed for use with character literals only
  template<std::size_t N> inline [[implicit]] Stringn(typename ancestor::value_type (&)[N]);
  // Throws an exception if there is not a '\0' sentinel at value[n]
  inline Stringn(typename ancestor::data_type, std::size_t n);
  template<typename ALLOC> inline [[implicit]] Stringn(std::vector<CHAR, ALLOC> &);
  template<typename TRAITS, typename ALLOC> Stringn(std::basic_string<CHAR, TRAITS, ALLOC> const &) = delete; // as it does not support non-const access to its internal buffers
  template<typename TRAITS> Stringn(std::basic_string_view<CHAR, TRAITS> const &) = delete; // as it does not support non-const access to its internal buffersAND it does not guarantee a '\0'-terminator at size()+1
  // These are not user-defined conversions because they require a non-const reference
  inline explicit Stringn(basic_buffer<CHAR> &);
  inline explicit Stringn(Stringz<CHAR> &);
  // size is computed by counting
  // data() and c_str() are the same
  inline auto c_str() const -> CHAR const *;
public:
  struct tests { struct Suite; };
  friend struct tests::Suite;
};
#divert </hpp>
#divert <ipp>
#import c.basic_buffer
#import c.detail.Stringz
#import c.detail.stringy.enforce_terminating_nulchar_invariant

template<typename CHAR> template<std::size_t N> c::detail::Stringn<CHAR>::Stringn(typename ancestor::value_type (&subject)[N])
  : ancestor(subject, N-1) {
  // Was the thing that we just accepted terminated appropriately?
  stringy::enforce_terminating_nulchar_invariant(&this->held[0], &this->held[N]);
}

template<typename CHAR> c::detail::Stringn<CHAR>::Stringn(typename ancestor::data_type subject, std::size_t n)
  : ancestor(subject, nullptr == subject ? 0 : n) {
  // Was the thing that we just accepted terminated appropriately?
  stringy::enforce_terminating_nulchar_invariant(&this->held[0], &this->held[n+1]);
}

template<typename CHAR> template<typename ALLOC> c::detail::Stringn<CHAR>::Stringn(std::vector<CHAR, ALLOC> &subject)
  : ancestor(subject.empty() ? nullptr : subject.data(), 0 == subject.size() ? 0u : subject.size()-1) {
  // The subject itself must contain the '\0' terminator.
  // vector cat = { 'c' 'a' 't' '\0' }
  auto vector_size = subject.size(); // not this->length+1 (as that allows a 0-length vector to "work")
  stringy::enforce_terminating_nulchar_invariant(&this->held[0], &this->held[vector_size]);
}

template<typename CHAR> c::detail::Stringn<CHAR>::Stringn(basic_buffer<CHAR> &subject)
  : ancestor(subject.empty() ? nullptr : subject.data(), subject.empty() ? 0 : subject.size()-1) {
  // The subject itself must contain the '\0' terminator.
  // buffer cat(4, ...) = { 'c' 'a' 't' '\0' }
  auto buffer_size = subject.size(); // not this->length+1 (as that allows a 0-length buffer to "work")
  stringy::enforce_terminating_nulchar_invariant(&this->held[0], &this->held[buffer_size]);
}

template<typename CHAR> c::detail::Stringn<CHAR>::Stringn(Stringz<CHAR> &subject)
  : ancestor(subject.data(), subject.size()) {
  // This is overkill ...   They is us.  So the invariant should already exist.
  stringy::enforce_terminating_nulchar_invariant(&this->held[0], &this->held[this->length+1]);
}

template<typename CHAR> auto c::detail::Stringn<CHAR>::c_str() const -> CHAR const * {
  // Yet we <strike>know</strike> strongly believe there is a '\0' terminator sentinel out there.
  return ancestor::data();
}
#divert </ipp>

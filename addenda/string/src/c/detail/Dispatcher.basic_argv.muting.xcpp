// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
#import c.basic_argv
#forward c.detail.Dispatcher
namespace c {
  namespace detail {
    template<typename CHAR> struct Dispatcher<basic_argv<CHAR>>;
  }
}
#divert </fpp>
#divert <hpp>
#import std.array
#import std.pair
#import std.remove_const
#import std.tuple
#import std.vector
template<typename CHAR> struct c::detail::Dispatcher<c::basic_argv<CHAR>> {
  using result_type = basic_argv<CHAR>;
  using char_type = typename std::remove_const<CHAR>::type;

  // array
  template<std::size_t N> inline auto operator()(std::array<char_type const *, N> const &) -> result_type = delete;
  template<std::size_t N> inline auto operator()(std::array<char_type *, N> const &) -> result_type = delete;
  template<std::size_t N> inline auto operator()(std::array<char_type *, N> &) -> result_type;

  // pair
  auto operator()(std::pair<int, CHAR const *const *> const &) -> result_type = delete;
  inline auto operator()(std::pair<CHAR **, int> const &) -> result_type;

  auto operator()(std::pair<std::size_t, CHAR const *const *> const &) -> result_type = delete;
  inline auto operator()(std::pair<CHAR **, std::size_t> const &) -> result_type;

  // tuple
  auto operator()(std::tuple<int, CHAR const *const *> const &) -> result_type = delete;
  inline auto operator()(std::tuple<CHAR **, int> const &) -> result_type;

  auto operator()(std::tuple<std::size_t, CHAR const *const *> const &) -> result_type = delete;
  inline auto operator()(std::tuple<CHAR **, std::size_t> const &) -> result_type;

  // vector
  auto operator()(std::vector<char_type const *> const &) -> result_type = delete;
  auto operator()(std::vector<char_type *> const &) -> result_type = delete;
  inline auto operator()(std::vector<char_type *> &) -> result_type;
public:
  struct tests { struct Suite; };
  friend struct tests::Suite;
};
#divert </hpp>
#divert <ipp>
#import c.detail.argv.as.array
template<typename CHAR> template<std::size_t N> auto c::detail::Dispatcher<c::basic_argv<CHAR>>::operator()(std::array<char_type *, N> &subject) -> result_type {
  return argv::as(subject);
}

#import c.detail.argv.as.pair
template<typename CHAR> auto c::detail::Dispatcher<c::basic_argv<CHAR>>::operator()(std::pair<CHAR **, int> const &subject) -> result_type {
  return argv::as(subject);
}

template<typename CHAR> auto c::detail::Dispatcher<c::basic_argv<CHAR>>::operator()(std::pair<CHAR **, std::size_t> const &subject) -> result_type {
  return argv::as(subject);
}

#import c.detail.argv.as.tuple
template<typename CHAR> auto c::detail::Dispatcher<c::basic_argv<CHAR>>::operator()(std::tuple<CHAR **, int> const &subject) -> result_type {
  return argv::as(subject);
}

template<typename CHAR> auto c::detail::Dispatcher<c::basic_argv<CHAR>>::operator()(std::tuple<CHAR **, std::size_t> const &subject) -> result_type {
  return argv::as(subject);
}

#import c.detail.argv.as.vector
template<typename CHAR> auto c::detail::Dispatcher<c::basic_argv<CHAR>>::operator()(std::vector<char_type *> &subject) -> result_type {
  return argv::as(subject);
}

#divert </ipp>

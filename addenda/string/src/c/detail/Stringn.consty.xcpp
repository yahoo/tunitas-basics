// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
#forward c.detail.Stringn
namespace c::detail {
  // See the commentariat for Stringn.muting, which pertains to this specialization as well.
  template<typename CHAR> class Stringn<CHAR const>;
}
#divert </fpp>
#divert <hpp>
#import std.size_t
#import c.detail.BoundVector
#import c.detail.Character
#forward c.basic_buffer
#forward c.detail.Stringz
#import std.basic_string
#import std.basic_string_view
#import std.vector

// These are suitable ONLY for aiding the comparison operators
// These are NOT suitable for storing the pointer values persistently.
template<typename CHAR> class c::detail::Stringn<CHAR const> : public BoundVector<Character<CHAR const>> {
  using ancestor = BoundVector<Character<CHAR const>>;
public:
  Stringn() = default;
  // Yes, all constructors are implicit.
  // Throws an exception if value[N] is not '\0'; this designed for use with character literals only
  template<std::size_t N> inline Stringn(typename ancestor::value_type const (&)[N]);
  // Throws an exception if there is not a '\0' sentinel at position value[n]
  inline Stringn(typename ancestor::const_data_type, std::size_t n);
  // Indeed, we want the implicit user-defined conversion from std::basic_string
  template<typename TRAITS> inline [[implicit]] Stringn(std::basic_string<CHAR, TRAITS> const &);
  // Cannot construct a stringn from a string_view because there is no guarantee of a terminator
  template<typename TRAITS> inline [[implicit]] Stringn(std::basic_string_view<CHAR, TRAITS> const &) = delete; // as it does not guarantee a '\0' terminator one-beyond size()
  template<typename ALLOC> inline [[implicit]] Stringn(std::vector<CHAR, ALLOC> const &);
  // Indeed, we want the implicit user-defined conversion from non-const to const
  // BUT the length (size) of the stringz will not be from the Buffer, but rather from counting, by walking to the nulchar sentinel
  inline [[implicit]] Stringn(basic_buffer<CHAR const> const &);
  inline [[implicit]] Stringn(basic_buffer<CHAR> const &);
  // (synthetic copy constructor) Stringn(Stringn<CHAR const> const &);
  inline [[implicit]] Stringn(Stringn<CHAR> const &);
  inline [[implicit]] Stringn(Stringz<CHAR const> const &);
  inline [[implicit]] Stringn(Stringz<CHAR> const &);
  // size is computed by counting
  // data() and c_str() are the same
  inline auto c_str() const -> CHAR const *;
public:
  struct tests { struct Suite; };
  friend struct tests::Suite;
};
#divert </hpp>
#divert <ipp>
#import c.basic_buffer
#import c.detail.Stringz
#import c.detail.stringy.enforce_terminating_nulchar_invariant

template<typename CHAR> template<std::size_t N> c::detail::Stringn<CHAR const>::Stringn(typename ancestor::value_type const (&subject)[N])
  : ancestor(subject, N-1) {
  // Was the thing that we just accepted terminated appropriately?
  stringy::enforce_terminating_nulchar_invariant(&this->held[0], &this->held[N]);
}

template<typename CHAR> c::detail::Stringn<CHAR const>::Stringn(typename ancestor::const_data_type subject, std::size_t n)
  : ancestor(subject, nullptr == subject ? 0 : n) {
  // Was the thing that we just accepted terminated appropriately?
  stringy::enforce_terminating_nulchar_invariant(&this->held[0], &this->held[n+1]);
}

template<typename CHAR> template<typename TRAITS> c::detail::Stringn<CHAR const>::Stringn(std::basic_string<CHAR, TRAITS> const &subject)
  : ancestor(subject.data(), subject.size()) {
  // This is redundant overkill because std::basic_string already guarantees a '\0' terminator.
  stringy::enforce_terminating_nulchar_invariant(&this->held[0], &this->held[this->length+1]);
}

template<typename CHAR> template<typename ALLOC> c::detail::Stringn<CHAR const>::Stringn(std::vector<CHAR, ALLOC> const &subject)
  : ancestor(subject.empty() ? nullptr : subject.data(), subject.empty() ? 0 : subject.size()-1) {
  // Was the thing that we just accepted terminated appropriately?
  // Because this is a vector (bounded) being converted into a '\0'-terminated representation (stringz)
  // we have to ensure that the '\0' terminator is actually present.
  // vector cat = { 'c' 'a' 't' '\0' }
  auto vector_size = subject.size(); // not this->length+1 (as that allows a 0-length vector to "work")
  stringy::enforce_terminating_nulchar_invariant(&this->held[0], &this->held[vector_size]);
}

template<typename CHAR> c::detail::Stringn<CHAR const>::Stringn(basic_buffer<CHAR const> const &subject)
  : ancestor(subject.empty() ? nullptr : subject.data(), subject.empty() ? 0 : subject.size()-1) {
  // The subject itself must contain the '\0' terminator.  Show that.
  // buffer cat(4, ...) = { 'c' 'a' 't' '\0' }
  auto buffer_size = subject.size(); // not this->length+1 (as that allows a 0-length buffer to "work")
  stringy::enforce_terminating_nulchar_invariant(&this->held[0], &this->held[buffer_size]);
}

template<typename CHAR> c::detail::Stringn<CHAR const>::Stringn(basic_buffer<CHAR> const &subject)
  : ancestor(subject.empty() ? nullptr : subject.data(), subject.empty() ? 0 : subject.size()-1) {
  // The subject itself must contain the '\0' terminator as the final character.  Show that.
  // buffer cat(4, ...) = { 'c' 'a' 't' '\0' }
  auto buffer_size = subject.size(); // not this->length+1 (as that allows a 0-length buffer to "work")
  stringy::enforce_terminating_nulchar_invariant(&this->held[0], &this->held[buffer_size]);
}

template<typename CHAR> c::detail::Stringn<CHAR const>::Stringn(Stringn<CHAR> const &subject)
  : ancestor(subject.data(), subject.size()) {
  // This is overkill ...   They is us.  So the invariant should already exist.
  //
  // stringn has '\0' after the string as
  //
  //            |<----------------- stringn ---------------->|
  //            | char[0] <--- chars[1..n-2] ----> char[n-1] | '\0'
  //              ^                                             ^
  //              |                                             |
  //              \----------- begin               end----------/
  //
  // enforce wants to see the \0' as the character right before end, as with buffer
  //
  // enforce
  //            |<----------------- enforcement ----------------->|
  //            | char[0] <--- chars[1..n-2] ----> char[n-1] '\0' | <end>
  //              ^                                                 ^
  //              |                                                 |
  //              \----------- start               finish ----------/
  //
  stringy::enforce_terminating_nulchar_invariant(&this->held[0], &this->held[this->length+1]);
}

template<typename CHAR> c::detail::Stringn<CHAR const>::Stringn(Stringz<CHAR const> const &subject)
  : ancestor(subject.data(), subject.size()) {
  // This is overkill ...   They is us.  So the invariant should already exist.
  stringy::enforce_terminating_nulchar_invariant(&this->held[0], &this->held[this->length+1]);
}

template<typename CHAR> c::detail::Stringn<CHAR const>::Stringn(Stringz<CHAR> const &subject)
  : ancestor(subject.data(), subject.size()) {
  // This is overkill ...   They is us.  So the invariant should already exist.
  stringy::enforce_terminating_nulchar_invariant(&this->held[0], &this->held[this->length+1]);
}

template<typename CHAR> auto c::detail::Stringn<CHAR const>::c_str() const -> CHAR const * {
  // Yet we <strike>know</strike> strongly believe there is a '\0' terminator sentinel out there.
  return ancestor::data();
}
#divert </ipp>

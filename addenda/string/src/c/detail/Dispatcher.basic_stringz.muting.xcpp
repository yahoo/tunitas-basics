// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
#import c.basic_stringz
#forward c.detail.Dispatcher
namespace c {
  namespace detail {
    template<typename CHAR> struct Dispatcher<basic_stringz<CHAR>>;
  }
}
#divert </fpp>
#divert <hpp>
#import std.array
#import std.pair
#import std.remove_const
#import std.tuple
#import std.vector
template<typename CHAR> struct c::detail::Dispatcher<c::basic_stringz<CHAR>> {
  using result_type = basic_stringz<CHAR>;
  using char_type = typename std::remove_const<CHAR>::type;

  // Whereas as<...>(...) is a conversion operation,
  // the new data invariant of stringz must be respected.
  // therefore, these throw std::invalid_argument if the element at or before [N] is not nullptr

  // basic_stringn (sibling)
  auto operator()(basic_stringn<CHAR const>) -> result_type = delete;
  inline auto operator()(basic_stringn<CHAR>) -> result_type;

  // basic_stringz (identity)
  auto operator()(basic_stringz<CHAR const>) -> result_type = delete;
  inline auto operator()(basic_stringz<CHAR>) -> result_type;

  // array
  template<std::size_t N> auto operator()(std::array<char_type, N> const &) -> result_type = delete;
  template<std::size_t N> inline auto operator()(std::array<char_type, N> &) -> result_type;

  // char (unchecked)
  auto operator()(CHAR const *) -> result_type = delete;
  inline auto operator()(CHAR *) -> result_type;
  // char (checked)
  template<std::size_t N> auto operator()(CHAR const (&)[N]) -> result_type = delete;
  template<std::size_t N> inline auto operator()(CHAR (&)[N]) -> result_type;

  // pair
  auto operator()(std::pair<int, CHAR const *> const &) -> result_type = delete;
  inline auto operator()(std::pair<int, CHAR *> const &) -> result_type;

  auto operator()(std::pair<std::size_t, CHAR const *> const &) -> result_type = delete;
  inline auto operator()(std::pair<std::size_t, CHAR *> const &) -> result_type;

  // tuple
  auto operator()(std::tuple<int, CHAR const *> const &) -> result_type = delete;
  inline auto operator()(std::tuple<int, CHAR *> const &) -> result_type;

  auto operator()(std::tuple<std::size_t, CHAR const *> const &) -> result_type = delete;
  inline auto operator()(std::tuple<std::size_t, CHAR *> const &) -> result_type;

  // vector
  auto operator()(std::vector<char_type> const &) -> result_type = delete;
  inline auto operator()(std::vector<char_type> &) -> result_type;
public:
  struct tests { struct Suite; };
  friend struct tests::Suite;
};
#divert </hpp>
#divert <ipp>
template<typename CHAR> auto c::detail::Dispatcher<c::basic_stringz<CHAR>>::operator()(basic_stringn<CHAR> subject) -> result_type {
  // assume the nullchar invariant is present in subject.
  // ... in lieu of writing (calling) stringz::as(subject) to validate the nullchar invariant
  return result_type(subject.data());
}

template<typename CHAR> auto c::detail::Dispatcher<c::basic_stringz<CHAR>>::operator()(basic_stringz<CHAR> subject) -> result_type {
  return subject;
}

#import c.detail.stringz.as.array
template<typename CHAR> template<std::size_t N> auto c::detail::Dispatcher<c::basic_stringz<CHAR>>::operator()(std::array<char_type, N> &subject) -> result_type {
  return stringz::as(subject);
}

#import c.detail.stringz.as.char
template<typename CHAR> auto c::detail::Dispatcher<c::basic_stringz<CHAR>>::operator()(CHAR *subject) -> result_type {
  return stringz::as(subject);
}

template<typename CHAR> template<std::size_t N> inline auto c::detail::Dispatcher<c::basic_stringz<CHAR>>::operator()(CHAR (&subject)[N]) -> result_type {
  return stringz::as(subject);
}

#import c.detail.stringz.as.pair
template<typename CHAR> auto c::detail::Dispatcher<c::basic_stringz<CHAR>>::operator()(std::pair<int, CHAR *> const &subject) -> result_type {
  return stringz::as(subject);
}

template<typename CHAR> auto c::detail::Dispatcher<c::basic_stringz<CHAR>>::operator()(std::pair<std::size_t, CHAR *> const &subject) -> result_type {
  return stringz::as(subject);
}

#import c.detail.stringz.as.tuple
template<typename CHAR> auto c::detail::Dispatcher<c::basic_stringz<CHAR>>::operator()(std::tuple<int, CHAR *> const &subject) -> result_type {
  return stringz::as(subject);
}

template<typename CHAR> auto c::detail::Dispatcher<c::basic_stringz<CHAR>>::operator()(std::tuple<std::size_t, CHAR *> const &subject) -> result_type {
  return stringz::as(subject);
}

#import c.detail.stringz.as.vector
template<typename CHAR> auto c::detail::Dispatcher<c::basic_stringz<CHAR>>::operator()(std::vector<char_type> &subject) -> result_type {
  return stringz::as(subject);
}

#divert </ipp>

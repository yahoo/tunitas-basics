// -*- c++ -*-  in the SCOLD styling that is so popular these days
#divert <hpp>
#import c.basic_environv
namespace c {
  namespace detail {
    namespace environv {
      // Whereas as<...>(...) is a conversion operation,
      // the new data invariant of environv must be respected.
      // these throw std::invalid_argument if the element at or before [N] is not nullptr
      template<typename CHAR> inline auto as(CHAR const *const *) -> basic_environv<CHAR const>;
      template<typename CHAR> inline auto as(CHAR **) -> basic_environv<CHAR>;
      template<typename CHAR, std::size_t N> inline auto as(CHAR const *const (&)[N]) -> basic_environv<CHAR const>;
      template<typename CHAR, std::size_t N> inline auto as(CHAR *(&)[N]) -> basic_environv<CHAR>;
    }
  }
}
#divert </hpp>
#divert <ipp>
#import c.detail.environv
template<typename CHAR> auto c::detail::environv::as(CHAR const *const *subject) -> basic_environv<CHAR const> {
  basic_environv<CHAR const> ret(subject);
  // the nullptr termination invariant is unchecked because it cannot be done safely (or in constant-to-linear time)
  return ret;
}

template<typename CHAR> auto c::detail::environv::as(CHAR **subject) -> basic_environv<CHAR> {
  basic_environv<CHAR> ret(subject);
  // the nullptr termination invariant is unchecked because it cannot be done safely (or in constant-to-linear time)
  return ret;
}

template<typename CHAR, std::size_t N> auto c::detail::environv::as(CHAR const *const (&subject)[N]) -> basic_environv<CHAR const> {
  enforce_terminating_nullptr_invariant(&subject[0], &subject[N]);
  basic_environv<CHAR const> ret(subject);
  return ret;
}

template<typename CHAR, std::size_t N> auto c::detail::environv::as(CHAR *(&subject)[N]) -> basic_environv<CHAR> {
  enforce_terminating_nullptr_invariant(&subject[0], &subject[N]);
  basic_environv<CHAR> ret(subject);
  return ret;
}
#divert </ipp>

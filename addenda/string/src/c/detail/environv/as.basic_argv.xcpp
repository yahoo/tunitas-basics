// -*- c++ -*-  in the SCOLD styling that is so popular these days
#divert <hpp>
#import c.basic_argv
#import c.basic_environv
namespace c {
  namespace detail {
    namespace environv {
      // Whereas as<...>(...) is a conversion operation,
      // the new data invariant of environv must be respected.
      // These throw std::invalid_argument if the element at [N] is not nullptr
      template<typename CHAR> inline auto as(basic_argv<CHAR const *> const &) -> basic_environv<CHAR const>;
      template<typename CHAR> inline auto as(basic_argv<CHAR *> const &) -> basic_environv<CHAR const>;
      template<typename CHAR> inline auto as(basic_argv<CHAR *> &) -> basic_environv<CHAR>;
    }
  }
}
#divert </hpp>
#divert <ipp>
#import c.detail.environv
template<typename CHAR> auto c::detail::environv::as(basic_argv<CHAR const> const &arg) -> basic_environv<CHAR const> {
  enforce_terminating_nullptr_invariant(arg);
  basic_environv<CHAR const> ret(arg.data());
  return ret;
}

template<typename CHAR> auto c::detail::environv::as(basic_argv<CHAR> const &arg) -> basic_environv<CHAR const> {
  enforce_terminating_nullptr_invariant(arg);
  basic_environv<CHAR const> ret(arg.data());
  return arg;
}

template<typename CHAR> auto c::detail::environv::as(basic_argv<CHAR> &arg) -> basic_environv<CHAR> {
  enforce_terminating_nullptr_invariant(arg);
  basic_environv<CHAR> ret(arg.data());
  return arg;
}
#divert </ipp>

// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace c {
  namespace detail {
    template<typename ITEM> class BoundVector;
  }
}
#entail c.detail.BoundVector.Character
#entail c.detail.BoundVector.Stringz
#divert </fpp>
#divert <hpp>
namespace c {
  namespace detail {

    template<typename ITEM> inline auto operator==(BoundVector<ITEM> const &, BoundVector<ITEM> const &) -> bool;
    template<typename ITEM> inline auto operator!=(BoundVector<ITEM> const &, BoundVector<ITEM> const &) -> bool;

    template<typename ITEM> inline auto operator<(BoundVector<ITEM> const &, BoundVector<ITEM> const &) -> bool;
    template<typename ITEM> inline auto operator<=(BoundVector<ITEM> const &, BoundVector<ITEM> const &) -> bool;
    template<typename ITEM> inline auto operator>(BoundVector<ITEM> const &, BoundVector<ITEM> const &) -> bool;
    template<typename ITEM> inline auto operator>=(BoundVector<ITEM> const &, BoundVector<ITEM> const &) -> bool;

  }
}
#divert </hpp>
#divert <ipp>
#import std.equal
#import std.lexicographical_compare

template<typename ITEM> auto c::detail::operator==(BoundVector<ITEM> const &a, BoundVector<ITEM> const &b) -> bool {
  return std::equal(a.begin(), a.end(), b.begin(), b.end());
}

template<typename ITEM> auto c::detail::operator!=(BoundVector<ITEM> const &a, BoundVector<ITEM> const &b) -> bool {
  return !operator==(a, b);
}

template<typename ITEM> auto c::detail::operator<(BoundVector<ITEM> const &a, BoundVector<ITEM> const &b) -> bool {
  auto cmp = [](typename BoundVector<ITEM>::char_type a, typename BoundVector<ITEM>::char_type b) {
    return a < b;
  };
  return std::lexicographical_compare(a.begin(), a.end(), b.begin(), b.end(), cmp);
}

template<typename ITEM> auto c::detail::operator<=(BoundVector<ITEM> const &a, BoundVector<ITEM> const &b) -> bool {
  auto cmp = [](typename BoundVector<ITEM>::char_type a, typename BoundVector<ITEM>::char_type b) {
    return a <= b;
  };
  return std::lexicographical_compare(a.begin(), a.end(), b.begin(), b.end(), cmp);
}

template<typename ITEM> auto c::detail::operator>(BoundVector<ITEM> const &a, BoundVector<ITEM> const &b) -> bool {
  return operator<(b, a);
}

template<typename ITEM> auto c::detail::operator>=(BoundVector<ITEM> const &a, BoundVector<ITEM> const &b) -> bool {
  return operator<=(b, a);
}
#divert </ipp>

// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
#import std.is_same
#import std.size_t
namespace c::required {
  //
  // A managed range of space with ...
  //
  //    auto data() const -> CHAR const *
  //    auto size() const -> std::size_t
  //
  // The expectation is that the space is consty (readonly).
  // The size may be dynamically computed (e.g. with a '\0' terminator sentinel.
  //
  // If you need to guarantee SQL ITEM type data then use Binary<ITEM>
  //
  template<typename ITEM> concept bool Managed = requires(ITEM item) {
    typename ITEM::value_type;
    { item.data() } -> typename ITEM::value_type const *;
    { item.size() } -> std::size_t;
  };
}
#endiv
#divert <hpp>
//
// All qualify
//
#import c.buffer
static_assert(c::required::Managed<c::buffer>, "fail");
#import c.const_buffer
static_assert(c::required::Managed<c::const_buffer>, "fail");
#import c.stringn
static_assert(c::required::Managed<c::stringn>, "fail");
#import c.const_stringn
static_assert(c::required::Managed<c::const_stringn>, "fail");
#import c.stringz
static_assert(c::required::Managed<c::stringz>, "fail");
#import c.const_stringz
static_assert(c::required::Managed<c::const_stringz>, "fail");
#import std.string
static_assert(c::required::Managed<std::string>, "fail");
#import std.string_view
static_assert(c::required::Managed<std::string_view>, "fail");
#endiv

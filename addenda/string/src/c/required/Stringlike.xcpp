// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
#import c.required.Binary
namespace c::required {
  //
  // Prove that STRINGLIKE can return '\0'-terminated "C string" thing.
  //
  //    auto c_str() const -> CHAR const *
  //    and is Binary<STRINGLIKE>
  //
  // Having the 'c_str()' member is diagnostic
  // A STRINGLIKE manages and produces a 'char const *' with an implicit '\0' terminator.
  //
  template<typename STRINGLIKE> concept Stringlike = requires(STRINGLIKE stringlike) {
    typename STRINGLIKE::value_type;
    { stringlike.c_str() } -> convertible_to<typename STRINGLIKE::value_type const *>;
    { stringlike.data() } -> convertible_to<typename STRINGLIKE::value_type const *>;
    { stringlike.size() } -> convertible_to<std::size_t>;
    // DO NOT
    //    requires Binary<STRINGLIKE>;
    // as it explicitly denies c::basic_stringz<CHAR>
  };
}
#endiv
#divert <hpp>
#import c.buffer
static_assert(!c::required::Stringlike<c::buffer>, "fail");
#import c.const_buffer
static_assert(!c::required::Stringlike<c::const_buffer>, "fail");
#import c.stringn
static_assert(c::required::Stringlike<c::stringn>, "fail");
#import c.const_stringn
static_assert(c::required::Stringlike<c::const_stringn>, "fail");
#import c.stringz
static_assert(c::required::Stringlike<c::stringz>, "fail");
#import c.const_stringz
static_assert(c::required::Stringlike<c::const_stringz>, "fail");
#import std.string
static_assert(c::required::Stringlike<std::string>, "fail");
#import std.string_view
static_assert(!c::required::Stringlike<std::string_view>, "fail");
#endiv

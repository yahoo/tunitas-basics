// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
#import c.required.Character
namespace c {
  //
  // A nullptr-terminated, vector of '\0'-terminated character strings.
  // i.e. "like 'environ' of the C runtime"
  // e.g. extern char **environ
  //
  // Provides NO storage management.
  // Almost like an basic_argv ...  but different.
  // The environment vector carries no manifest size, it is nullptr-terminated
  // As such basic_environv<CHAR>::size() is O(N) cost
  //
  template<required::Character CHAR> class basic_environv;
}
#entail c.basic_environv.consty
#endiv
#divert <hpp>
#import c.detail.UnboundVector.Stringz
#import c.detail.Stringz
#import std.is_const
#import std.size_t
#import std.vector

template<c::required::Character CHAR> class c::basic_environv : public detail::UnboundVector<detail::Stringz<CHAR>> {
  using ancestor = detail::UnboundVector<detail::Stringz<CHAR>>;
  static_assert(!std::is_const<CHAR>::value, "CHAR must not be const, that is handled by a nearby specialization");
public:
  basic_environv() = default;
  // the vector must have a nullptr sentinel to indicate the termination, located between 0 ... N-1
  template<std::size_t N> inline basic_environv(typename ancestor::value_type (&)[N]);
  inline basic_environv(typename ancestor::data_type);
  // These will throw if there is no nullptr sentinel at the end of the container
  // reminder: the rval-reference here is required to get access to nonconst std::vector<CHAR *, ALLOC>::data()
  template<typename ALLOC> inline basic_environv(std::vector<CHAR *, ALLOC> &nonconst); 
  // The size is computed in O(N) against the nullptr sentinel
public:
  struct tests { struct Suite; };
  friend struct tests::Suite;
};
#import std.is_same
static_assert(std::is_same<char const *, c::basic_environv<char>::const_value_type>::value, "FAIL: c::basic_environv<char>::const_value_type is a surprise");
static_assert(std::is_same<char const *const *, c::basic_environv<char>::const_data_type>::value, "FAIL: c::basic_environv<char>::const_data_type is a surprise");
static_assert(std::is_same<char *, c::basic_environv<char>::value_type>::value, "FAIL: c::basic_environv<char>::value_type is a surprise");
static_assert(std::is_same<char **, c::basic_environv<char>::data_type>::value, "FAIL: c::basic_environv<char>::data_type is a surprise");
#import std.is_constructible
// TO(FROM)
static_assert(std::is_constructible<c::basic_environv<char>, char **>::value, "FAIL: basic_environv<char const> is not constructible from 'char **'");
#import std.is_convertible
// FROM -> TO
static_assert(std::is_convertible<char **, c::basic_environv<char>>::value, "FAIL: 'char **' is not convertible to basic_environv<char>");
#import std.is_constructible
#divert </hpp>
#divert <ipp>
#import c.detail.environv.enforce_terminating_nullptr_invariant
template<c::required::Character CHAR> template<std::size_t N> c::basic_environv<CHAR>::basic_environv(typename ancestor::value_type (&subject)[N])
  : ancestor(subject) {
  detail::environv::enforce_terminating_nullptr_invariant(subject, subject+N);
}

template<c::required::Character CHAR> c::basic_environv<CHAR>::basic_environv(typename ancestor::data_type subject)
  : ancestor(subject) {
  // Can't (safely) enforce the terminating nullptr invariant, so we just hope.  Hope is the method.
  ;
}

#import c.detail.environv.enforce_terminating_nullptr_invariant
template<c::required::Character CHAR> template<typename ALLOC> c::basic_environv<CHAR>::basic_environv(std::vector<CHAR *, ALLOC> &subject)
  : ancestor(subject.data()) {
  detail::environv::enforce_terminating_nullptr_invariant(subject.begin(), subject.end());
}  
#endiv

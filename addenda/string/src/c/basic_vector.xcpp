// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
#import c.required.Character
namespace c {
  //
  // An "argv"-like structure, but does not require a terminating nullptr sentinel af the end of the array
  // A "view" upon an argv.
  // A stated-size vector of '\0'-terminated strings.
  //
  // No nullptr terminator at vector[size]
  // Like std::string_view except for the stringz conceptual type ('char *')
  //
  template<required::Character CHAR> class basic_vector;
}
#entail c.basic_vector.consty
// for convenience .. and whereas it is "part of the interface"
#entail c.rest
#endiv
#divert <hpp>
#import c.detail.BoundVector.Stringz
#import std.is_const
#import std.pair
#import std.size_t
#import std.tuple
#import std.vector

// reminder: provides NO storage management.
template<c::required::Character CHAR> class c::basic_vector : public detail::BoundVector<detail::Stringz<CHAR>> {
  using ancestor = detail::BoundVector<detail::Stringz<CHAR>>;
  static_assert(!std::is_const<CHAR>::value, "CHAR must not be const, there is a specialization for const nearby");
public:
  basic_vector() = default;
  // preceding size is primary
  inline basic_vector(std::size_t size, typename ancestor::data_type data);
  // trailing size overrides inferred size
  template<std::size_t N> inline basic_vector(typename ancestor::value_type (&data)[N], std::size_t size = N);
  // either order
  inline basic_vector(std::pair<std::size_t, CHAR **>);
  inline basic_vector(std::pair<CHAR **, std::size_t>);
  // either order
  inline basic_vector(std::tuple<std::size_t, CHAR **>);
  inline basic_vector(std::tuple<CHAR **, std::size_t>);
  // by reference
  // irksome. the std::vector conversion isn't entirely workable because vector<...>::data()
  //   has muting and const variants which return muting & consty variants of the underlying buffer.
  // And only basic_vector(the std::vector<CHAR *, ALLOC> const &) is an implicit user-defined conversion.
  template<typename ALLOC> inline basic_vector(std::vector<CHAR *, ALLOC> const &) = delete;
  template<typename ALLOC> inline basic_vector(std::vector<CHAR *, ALLOC> &nonconst);
public:
  struct tests { struct Suite; };
  friend struct tests::Suite;
};
#import std.is_same
static_assert(std::is_same<char const *, c::basic_vector<char>::const_value_type>::value, "FAIL: c::basic_vector<char>::const_value_type is a surprise");
static_assert(std::is_same<char const *const *, c::basic_vector<char>::const_data_type>::value, "FAIL: c::basic_vector<char>::const_data_type is a surprise");
static_assert(std::is_same<char *, c::basic_vector<char>::value_type>::value, "FAIL: c::basic_vector<char>::value_type is a surprise");
static_assert(std::is_same<char **, c::basic_vector<char>::data_type>::value, "FAIL: c::basic_vector<char>::data_type is a surprise");
#import std.is_constructible
// TO(FROM)
static_assert(std::is_constructible<c::basic_vector<char>, int, char **>::value, "FAIL: basic_vector<char> is not constructible from the pair '(int, char **)'");
#endiv
#divert <ipp>
#import std.length_error
#import std.min
template<c::required::Character CHAR> template<std::size_t N> c::basic_vector<CHAR>::basic_vector(typename ancestor::value_type (&arg_data)[N], std::size_t arg_size)
  : ancestor(arg_data, std::min(arg_size, N)) {
  // Even though N is manifest we are directed to not use it (we want another length value, presumably a shorter one)
  if (arg_size > N) {
    throw std::length_error("index too big");
  }
}

template<c::required::Character CHAR> c::basic_vector<CHAR>::basic_vector(std::size_t arg_size, typename ancestor::data_type arg_data)
  : ancestor(arg_data, arg_size) {
  ;
}

template<c::required::Character CHAR> c::basic_vector<CHAR>::basic_vector(std::pair<std::size_t, CHAR **> subject)
  : ancestor(subject.second, subject.first) {
  ;
}

template<c::required::Character CHAR> c::basic_vector<CHAR>::basic_vector(std::pair<CHAR **, std::size_t> subject)
  : ancestor(subject.first, subject.second) {
  ;
}

#import std.get
template<c::required::Character CHAR> c::basic_vector<CHAR>::basic_vector(std::tuple<std::size_t, CHAR **> subject)
  : ancestor(std::get<1>(subject), std::get<0>(subject)) {
  ;
}

template<c::required::Character CHAR> c::basic_vector<CHAR>::basic_vector(std::tuple<CHAR **, std::size_t> subject)
  : ancestor(std::get<0>(subject), std::get<1>(subject)) {
  ;
}

template<c::required::Character CHAR> template<typename ALLOC> c::basic_vector<CHAR>::basic_vector(std::vector<CHAR *, ALLOC> &subject)
  : ancestor(subject.data(), subject.size()) {
  ;
}
#endiv

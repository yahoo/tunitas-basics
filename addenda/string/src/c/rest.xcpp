// -*- c++ -*- in the SCOLD styling that is so popular these days
#divert <hpp>
#import c.basic_argv
#import c.basic_vector
#import c.required.Character
namespace c {
  //
  // usage:
  //     auto main(int c, char *v[]) -> int {
  //       c::argv argv(c, v);
  //       for (auto w : rest(argv)) { <-------------- skip argv[0]
  //       ...etc...
  //       }
  //     } 
  //
  // Return a vector<CHAR> because we're no longer interested in the nullptr terminator of argv
  // This is like perl or bash's operator 'shift'
  //
  // reminder - because the arguments to main are not 'const' everything
  // that touches those data structures must worry about that lack of constness.
  // And ... const contagion requires variation.
  template<required::Character CHAR> inline auto rest(basic_argv<CHAR>) -> basic_vector<CHAR>;
  template<required::Character CHAR> inline auto rest(basic_argv<CHAR const>) -> basic_vector<CHAR const>;

  template<required::Character CHAR> inline auto rest(basic_vector<CHAR>) -> basic_vector<CHAR>;
  template<required::Character CHAR> inline auto rest(basic_vector<CHAR const>) -> basic_vector<CHAR const>;
}
#endiv
#divert <ipp>
#import c.detail.rest.rest_consty_fully_generic

template<c::required::Character CHAR> auto c::rest(basic_argv<CHAR> subject) -> basic_vector<CHAR> {
  return detail::rest::rest_consty_fully_generic<basic_vector<CHAR>>(subject);
}

template<c::required::Character CHAR> auto c::rest(basic_argv<CHAR const> subject) -> basic_vector<CHAR const> {
  return detail::rest::rest_consty_fully_generic<basic_vector<CHAR const>>(subject);
}

template<c::required::Character CHAR> auto c::rest(basic_vector<CHAR> subject) -> basic_vector<CHAR> {
  return detail::rest::rest_consty_fully_generic<basic_vector<CHAR>>(subject);
}

template<c::required::Character CHAR> auto c::rest(basic_vector<CHAR const> subject) -> basic_vector<CHAR const> {
  return detail::rest::rest_consty_fully_generic<basic_vector<CHAR const>>(subject);
}
#endiv

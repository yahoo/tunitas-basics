// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
#import c.required.Character
namespace c {
  //
  // A size-declared, nullptr-terminated, vector of '\0'-terminated character strings.
  // i.e. "like 'argv' of the C runtime"
  // e.g. auto main(int argc, char *argv[]) -> int
  //
  // Provides NO storage management.
  // Carries a manifest size.
  // AND the nullptr vector terminator is inspected & enforced.
  // If you don't need (want) the nullptr terminator, then use c::basic_vector<CHAR>
  //
  template<required::Character CHAR> class basic_argv;
}
#entail c.basic_argv.consty
#endiv
#divert <hpp>
#import c.check
#import c.detail.BoundVector.Stringz
#import c.detail.Stringz
#import std.is_const
#import std.pair
#import std.size_t
#import std.tuple
#import std.vector

// This provides NO storage management.
template<c::required::Character CHAR> class c::basic_argv : public detail::BoundVector<detail::Stringz<CHAR>> {
  using ancestor = detail::BoundVector<detail::Stringz<CHAR>>;
  static_assert(!std::is_const<CHAR>::value, "CHAR must not be const, there is a specialization for that nearby");
public:
  basic_argv() = default;
  // preceding size is primary
  inline basic_argv(std::size_t argc, typename ancestor::data_type argv);
  // trailing size overrides inferred size
  template<std::size_t N> inline basic_argv(typename ancestor::value_type (&argv)[N], std::size_t argc = N-1);
  template<std::size_t N> [[deprecated]] inline basic_argv(check::Bound, std::size_t argc, typename ancestor::value_type (&argv)[N]);
  template<std::size_t N> [[deprecated]] inline basic_argv(check::No, std::size_t argc, typename ancestor::value_type (&argv)[N]);
  inline basic_argv(std::pair<std::size_t, CHAR **>);
  inline basic_argv(std::tuple<std::size_t, CHAR **>);
  // irksome. the std::vector conversion isn't entirely workable because vector<...>::data()
  // has muting and const variants which return muting & consty variants of the underlying buffer.
  // And only basic_argv(the std::vector<CHAR *, ALLOC> const &) is an implicit user-defined conversion.
  template<typename ALLOC> inline basic_argv(std::vector<CHAR *, ALLOC> /*nonconst*/ &);
public:
  struct tests { struct Suite; };
  friend struct tests::Suite;
};
#import std.is_same
static_assert(std::is_same<char const *, c::basic_argv<char>::const_value_type>::value, "FAIL: c::basic_argv<char>::const_value_type is a surprise");
static_assert(std::is_same<char const *const *, c::basic_argv<char>::const_data_type>::value, "FAIL: c::basic_argv<char>::const_data_type is a surprise");
static_assert(std::is_same<char *, c::basic_argv<char>::value_type>::value, "FAIL: c::basic_argv<char>::value_type is a surprise");
static_assert(std::is_same<char **, c::basic_argv<char>::data_type>::value, "FAIL: c::basic_argv<char>::data_type is a surprise");
#import std.is_constructible
// TO(FROM)
static_assert(std::is_constructible<c::basic_argv<char>, int, char **>::value, "FAIL: basic_argv<char> is not constructible from the pair '(int, char **)'");
#endiv
#divert <ipp>
#import std.get
#import std.logic_error
#import std.min
#import c.detail.argv.enforce_terminating_nullptr_invariant
template<c::required::Character CHAR> template<std::size_t N> c::basic_argv<CHAR>::basic_argv(check::Bound, std::size_t arg_argc, typename ancestor::value_type (&arg_argv)[N])
  : basic_argv(check::No::CHECK, arg_argc, arg_argv) {
  // Check this first because if it is too big, the sentinel likely missing too (and examining that will cause a segfault)
  if (arg_argc > N-1) {
    throw std::length_error("size > N");
  }
  detail::argv::enforce_terminating_nullptr_invariant(ancestor::length, ancestor::held);
}

template<c::required::Character CHAR> template<std::size_t N> c::basic_argv<CHAR>::basic_argv(check::No, std::size_t arg_argc, typename ancestor::value_type (&arg_argv)[N])
  : ancestor(arg_argv, std::min(arg_argc, N-1)) {
  // Even though N is manifest we are directed to not compare it against ancestor::length.
  // no check for nullptr end sentinel either
}

template<c::required::Character CHAR> c::basic_argv<CHAR>::basic_argv(std::size_t arg_argc, typename ancestor::data_type arg_argv)
  : ancestor(arg_argv, arg_argc) {
  detail::argv::enforce_terminating_nullptr_invariant(ancestor::length, ancestor::held);
}

template<c::required::Character CHAR> template<std::size_t N> c::basic_argv<CHAR>::basic_argv(typename ancestor::value_type (&arg_argv)[N], std::size_t arg_argc)
  : ancestor(arg_argv, std::min(arg_argc, N-1)) {
  detail::argv::enforce_terminating_nullptr_invariant(ancestor::length, ancestor::held);
}

template<c::required::Character CHAR> c::basic_argv<CHAR>::basic_argv(std::pair<std::size_t, CHAR **> subject)
  : ancestor(subject.second, subject.first) {
  detail::argv::enforce_terminating_nullptr_invariant(ancestor::length, ancestor::held);
}

template<c::required::Character CHAR> c::basic_argv<CHAR>::basic_argv(std::tuple<std::size_t, CHAR **> subject)
  : ancestor(std::get<1>(subject), std::get<0>(subject)) {
  detail::argv::enforce_terminating_nullptr_invariant(ancestor::length, ancestor::held);
}

template<c::required::Character CHAR> template<typename ALLOC> c::basic_argv<CHAR>::basic_argv(std::vector<CHAR *, ALLOC> &subject)
  : ancestor(subject.data(), detail::argv::size_after_discounting_final_nullptr(subject)) {
  detail::argv::enforce_terminating_nullptr_invariant(ancestor::length, ancestor::held);
}
#endiv

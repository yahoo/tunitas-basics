// -*- c++ -*- in the SCOLD styling that is so popular these days
#divert <hpp>
#import c.basic_buffer
#import c.basic_stringz
#import c.basic_stringn
#import std.array
#import std.basic_string
#import std.size_t
#import std.vector
namespace c {

  // There is some sturm und drang about strdup, _strdup and std::strdup
  // So here it is within the "C" string management suite (with more variants)
  //
  // Standards quibbling
  //     https://linux.die.net/man/3/strdup
  //     http://pubs.opengroup.org/onlinepubs/9699919799/functions/strdup.html
  //
  // Same as with POSIX and C, you get raw pointer-to-stringz
  // free with std::free as std::free(strdup(THING))

  // CHAR has to be 'char' because that's the standard

  inline auto strdup(char const *) -> char *;

  inline auto strdup(c::basic_buffer<char> const &) -> char *;
  inline auto strdup(c::basic_buffer<char const> const &) -> char *;

  inline auto strdup(c::basic_stringz<char> const &) -> char *;
  inline auto strdup(c::basic_stringz<char const> const &) -> char *;

  inline auto strdup(c::basic_stringn<char> const &) -> char *;
  inline auto strdup(c::basic_stringn<char const> const &) -> char *;

  template<std::size_t N> inline auto strdup(std::array<char, N> const &) -> char *;
  template<typename TRAITS, typename ALLOC> inline auto strdup(std::basic_string<char, TRAITS, ALLOC> const &) -> char *;
  template<typename TRAITS> inline auto strdup(std::basic_string_view<char, TRAITS> const &) -> char *;
  template<typename ALLOC> inline auto strdup(std::vector<char, ALLOC> const &) -> char *;

  namespace detail {
    inline auto throw_if_nullptr(char *) -> char *;
    template<typename SOURCE> inline auto duplicate_from_container_data_size(SOURCE const &source) -> char *;
  }
}
#divert </hpp>
#divert <ipp>
#import std.bad_alloc
#import strdup
#import strndup

auto c::detail::throw_if_nullptr(char *value) -> char * {
  //  Here we're making a choice to throw std::bad_alloc in lieu
  // of a std::error_code or std::error_condition
  if (nullptr == value) {
    throw std::bad_alloc();
  }
  return value;
}

template<typename SOURCE> auto c::detail::duplicate_from_container_data_size(SOURCE const &source) -> char * {
  return detail::throw_if_nullptr(::strndup(source.data(), source.size()));
}

auto c::strdup(char const *source) -> char * {
  return detail::throw_if_nullptr(::strdup(source));
}

auto c::strdup(basic_buffer<char> const &source) -> char * {
  return detail::duplicate_from_container_data_size(source);
}

auto c::strdup(basic_buffer<char const> const &source) -> char * {
  return detail::duplicate_from_container_data_size(source);
}

auto c::strdup(basic_stringn<char> const &source) -> char * {
  return detail::duplicate_from_container_data_size(source);
}  

auto c::strdup(basic_stringn<char const> const &source) -> char * {
  return detail::duplicate_from_container_data_size(source);
}  

auto c::strdup(basic_stringz<char> const &source) -> char * {
  return detail::duplicate_from_container_data_size(source);
}  

auto c::strdup(basic_stringz<char const> const &source) -> char * {
  return detail::duplicate_from_container_data_size(source);
}  

template<std::size_t N> auto c::strdup(std::array<char, N> const &source) -> char * {
  return detail::duplicate_from_container_data_size(source);
}

template<typename TRAITS, typename ALLOC> auto c::strdup(std::basic_string<char, TRAITS, ALLOC> const &source) -> char * {
  return detail::duplicate_from_container_data_size(source);
}

template<typename TRAITS> auto c::strdup(std::basic_string_view<char, TRAITS> const &source) -> char * {
  return detail::duplicate_from_container_data_size(source);
}

template<typename ALLOC> auto c::strdup(std::vector<char, ALLOC> const &source) -> char * {
  return detail::duplicate_from_container_data_size(source);
}
#endiv

// -*- c++ -*- in the SCOLD styling that is so popular these days
#divert <hpp>
#import std.size_t
// Functionally, similar to std::basic_string::c_str()
//
// Primary declaration as in global so that (anyone) ADL will find it.

template<typename CHAR, std::size_t N> inline auto str(CHAR (&)[N]) -> CHAR const *;
template<typename CHAR, std::size_t N> inline auto str(CHAR const (&)[N]) -> CHAR const *;

template<typename CHAR> inline auto str(CHAR *const &) -> CHAR const *;
template<typename CHAR> inline auto str(CHAR const *const &) -> CHAR const *;

namespace c {
  // Secondary declaration as c::str for convenience
  using ::str;
}
#divert </hpp>
#divert <ipp>
template<typename CHAR, std::size_t N> auto str(CHAR (&value)[N]) -> CHAR const * {
  return value;
}

template<typename CHAR, std::size_t N> auto str(CHAR const (&value)[N]) -> CHAR const * {
  return value;
}

#import c.detail.Empty
template<typename CHAR> auto str(CHAR *const &value) -> CHAR const * {
  return nullptr == value ? &c::detail::Empty<CHAR>::STRING[0] : value;
}

template<typename CHAR> auto str(CHAR const *const &value) -> CHAR const * {
  return nullptr == value ? &c::detail::Empty<CHAR>::STRING[0] : value;
}
#divert </ipp>

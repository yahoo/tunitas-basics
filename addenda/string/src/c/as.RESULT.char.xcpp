// -*- c++ -*-  in the SCOLD styling that is so popular these days
#divert <hpp>
#import c.as
#import c.basic_buffer
#import std.size_t
namespace c {
  //
  // Reminder:
  //   CHAR = 'char'
  //   CHAR = 'char const'
  //

  template<typename RESULT, typename CHAR> inline auto as(CHAR *) -> RESULT;

  // subsumes the 'CHAR const' case too
  template<typename RESULT, typename CHAR> inline auto as(CHAR *const *) -> RESULT;
  template<typename RESULT, typename CHAR> inline auto as(CHAR **) -> RESULT;

  // in the style of std::array<TYPE, SIZE>
  template<typename RESULT, typename CHAR> inline auto as(CHAR *, std::size_t) -> RESULT;
  // in the style of "main(int argc, char *argv[])"
  template<typename RESULT, typename CHAR> inline auto as(std::size_t, CHAR **) -> RESULT;

  // in the style of std::array<TYPE, SIZE>
  template<typename RESULT, typename CHAR> inline auto as(CHAR *const *, std::size_t) -> RESULT;
  template<typename RESULT, typename CHAR> inline auto as(CHAR **, std::size_t) -> RESULT;
  // in the style of "main(int argc, char *argv[])"
  template<typename RESULT, typename CHAR> inline auto as(std::size_t, CHAR *const *) -> RESULT;
  template<typename RESULT, typename CHAR> inline auto as(std::size_t, CHAR **) -> RESULT;
}
#divert </hpp>
#divert <ipp>
#import c.detail.Dispatcher

template<typename RESULT, typename CHAR> auto c::as(CHAR *subject) -> RESULT {
  detail::Dispatcher<RESULT> call;
  return call(subject);
}

template<typename RESULT, typename CHAR> auto c::as(CHAR *const *subject) -> RESULT {
  detail::Dispatcher<RESULT> call;
  return call(subject);
}

template<typename RESULT, typename CHAR> auto c::as(CHAR **subject) -> RESULT {
  detail::Dispatcher<RESULT> call;
  return call(subject);
}

#import std.tuple
template<typename RESULT, typename CHAR> auto c::as(CHAR *subject, std::size_t count) -> RESULT {
  detail::Dispatcher<RESULT> call;
  return call(std::tuple<decltype(subject), decltype(count)>(subject, count));
}

template<typename RESULT, typename CHAR> auto c::as(std::size_t count, CHAR *subject) -> RESULT {
  detail::Dispatcher<RESULT> call;
  return call(std::tuple<decltype(subject), decltype(count)>(subject, count));
}

template<typename RESULT, typename CHAR> auto c::as(CHAR *const *subject, std::size_t count) -> RESULT {
  detail::Dispatcher<RESULT> call;
  return call(std::tuple<decltype(subject), decltype(count)>(subject, count));
}

template<typename RESULT, typename CHAR> auto c::as(CHAR **subject, std::size_t count) -> RESULT {
  detail::Dispatcher<RESULT> call;
  return call(std::tuple<decltype(subject), decltype(count)>(subject, count));
}

template<typename RESULT, typename CHAR> auto c::as(std::size_t count, CHAR *const *subject) -> RESULT {
  detail::Dispatcher<RESULT> call;
  return call(std::tuple<decltype(subject), decltype(count)>(subject, count));
}

template<typename RESULT, typename CHAR> auto c::as(std::size_t count, CHAR **subject) -> RESULT {
  detail::Dispatcher<RESULT> call;
  return call(std::tuple<decltype(subject), decltype(count)>(subject, count));
}
#divert </ipp>

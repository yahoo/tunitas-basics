http://cppunit.sourceforge.net/doc/lastest/cppunit_cookbook.html

  bool success = false;
  {
    test::argv::Case casey("standalone Case The First");
    casey.runTest();
  } {
    CppUnit::TestCaller<test::argv::Fixture> test("testTheFirst", &test::argv::Fixture::testTheFirst);
    CppUnit::TestResult result;
    test.run(&result);
  } {
    CppUnit::TestSuite suite;
    suite.addTest(new CppUnit::TestCaller<test::argv::Fixture>("testTheFirst", &test::argv::Fixture::testTheFirst));
    suite.addTest(new CppUnit::TestCaller<test::argv::Fixture>("testTheSecond", &test::argv::Fixture::testTheSecond));
    CppUnit::TestResult result;
    suite.run(&result);
    std::clog << "FIXME ... unclear how to get the results out of the TestResult\n";
  } {
    CppUnit::TextUi::TestRunner runner;
    runner.addTest( test::argv::Fixture::suite() );
    runner.addTest( test::environv::Fixture::suite() );
    success &= runner.run();
  }
  return success ? 0 : 1;


#if 0

  CppUnit::TextUi::TestRunner runner;
  runner.addTest(generator());
 
  runner.setOutputter(new CppUnit::CompilerOutputter(&runner.result(), std::clog));
 
  // Run the test and don't wait a key if post build check.
   bool wasSuccessful = runner.run( "", !selfTest );
 
   // Return error code 1 if the one of test failed.
   return wasSuccessful ? 0 : 1;
 }

  CppUnit::TestSuite suite;
  suite.addTest(generator());

  CppUnit::TestResult result;
  suite.run(&result);
  bool success = 
  return success ? 0 : 1;
}
#endif

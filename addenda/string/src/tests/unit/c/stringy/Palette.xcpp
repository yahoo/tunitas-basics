// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace tests::unit::c::stringy {
  class Palette;
}
#divert </fpp>
#divert <hpp>
#import std.size_t
#import std.unique_ptr

class tests::unit::c::stringy::Palette { 
protected: 
  Palette();
  virtual ~Palette() = default;
  Palette(Palette const &) = delete;
  auto operator=(Palette const &) -> Palette & = delete;
  // To ease the unification of the MI in the descendant
  virtual auto setUp() -> void;
  virtual auto tearDown() -> void;
public:

  static constexpr ::std::size_t const LENGTH = 17;

  // These will be '\0'-terminated.
  char aNc[LENGTH];         // array-of-length-N of character
  char const aNcc[LENGTH];  // array-of-length-N of const_character
  char *pc;                 // pointer-to-character
  char const *pcc;          // pointer-to-const_character

  // Used in Consty & Muting
  template<typename STRINGZ> inline static auto generic_testification(STRINGZ) -> void;
protected:
  ::std::unique_ptr<char []> c_buf;
};
#divert </hpp>
#divert <tpp>
#import c.stringn
#import c.const_stringn
#import c.stringz
#import c.const_stringz
#import std.distance
#import std.is_same
#import std.cout
#import std.cerr
#import std.boolalpha

template<typename STRINGY> auto tests::unit::c::stringy::Palette::generic_testification(STRINGY str) -> void {
  static_assert((::std::is_same<::c::stringn, STRINGY>::value
                 ||
                 ::std::is_same<::c::const_stringn, STRINGY>::value
                 ||
                 ::std::is_same<::c::stringz, STRINGY>::value
                 ||
                 ::std::is_same<::c::const_stringz, STRINGY>::value),
                "the STRINGY is not actually instantiated as c::{const_,}string{n,z} at all"); 
  CPPUNIT_ASSERT(!str.empty());
  CPPUNIT_ASSERT(0 != str.size());
  CPPUNIT_ASSERT(str.begin() != str.end());
  CPPUNIT_ASSERT(0 != ::std::distance(str.begin(), str.end()));
  ::std::cerr << "generic testification on string=\"" << str << "\"\n";
  enum class Mode { NULLY, ALPHA };
  Mode mode = Mode::ALPHA;
  for (auto c : str) {
    ::std::cerr << "character " << c << " isalpha=" << ::std::boolalpha << ::std::isalpha(c);
    if ('\0' == c) {
      ::std::cerr << " - NUL (there is a nul character in the string)";
    }
    ::std::cerr << '\n';
    // want to see:  ALPHA* NULLY*
    if (Mode::ALPHA == mode && '\0' == c) {
      mode = Mode::NULLY;
    }
    CPPUNIT_ASSERT(Mode::ALPHA != mode || ::std::isalpha(c));
    CPPUNIT_ASSERT(Mode::NULLY != mode || '\0' == c);
  }
  // And there is a terminating '\0' out there "beyond the end"
  CPPUNIT_ASSERT('\0' == *(str.data() + str.size()));
}
#endiv
#divert <cpp>
#import rigging.unit.clear
#import rigging.unit.lhs

tests::unit::c::stringy::Palette::Palette()
  : aNc{}
  , aNcc{} // <---- trivial initialzation of const member
  , pc()
  , pcc() {
  ;
}

namespace {
  template<::std::size_t N> inline auto cast_away_constness_oh_the_humanity(char const (&subject)[N]) -> char (&)[N] {
    return const_cast<char (&)[N]>(subject);
  }
}

auto tests::unit::c::stringy::Palette::setUp() -> void {
  using ::rigging::unit::lhs;
  lhs(aNc) = "pore";
  lhs(cast_away_constness_oh_the_humanity(aNcc)) = "adorn";
  lhs(c_buf) = "parsimony";
  lhs(pc) = c_buf;
  lhs(pcc) = "silt";
}

auto tests::unit::c::stringy::Palette::tearDown() -> void {
  using ::rigging::unit::lhs;
  using ::rigging::unit::clear;
  lhs(aNc) = clear;
  lhs(cast_away_constness_oh_the_humanity(aNcc)) = clear;
  lhs(c_buf) = clear;
  lhs(pc) = clear;
  lhs(pcc) = clear;
}
#divert </cpp>

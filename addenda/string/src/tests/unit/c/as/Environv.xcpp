// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace tests::unit::c::as {
  class Environv;
}
#divert </fpp>
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import tests.unit.c.as.Palette
class tests::unit::c::as::Environv : public cppunit::test::Fixture, Palette<WORDS> { 
public: 
  Environv() = default;

  auto setUp() -> void override final;
  auto tearDown() -> void override final;

  auto test_environv() -> void;

  static auto suite() -> cppunit::Test *;
};
#divert </hpp>
#divert <cpp>
#import c.as
#import c.environv
#import c.const_environv

auto tests::unit::c::as::Environv::setUp() -> void {
  Palette::setUp();
}

auto tests::unit::c::as::Environv::tearDown() -> void {
  Palette::tearDown();
}

// Why the c::environv exists at all ... to delicately handle one of these.
extern char **environ;

auto tests::unit::c::as::Environv::test_environv() -> void {
  // Basically an environv is an argv, but without the count.
  // It has a nullptr terminator sentinel, a terminator that matters as there is no count.
  //
  // Thus, the tests for basic_argv are sufficient.
  //
  ::c::environv ev(::environ);
  CPPUNIT_ASSERT(!ev.empty());
}

#import rigging.unit.suite.Stream
#import rigging.unit.suite.call
auto tests::unit::c::as::Environv::suite() -> cppunit::Test * {
  using namespace ::rigging::unit::suite;
  Stream series("environv");
  series << call("environv", &Environv::test_environv)
    ;
  return series.release();
}
#divert </cpp>

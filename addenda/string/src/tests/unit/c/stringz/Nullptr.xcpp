// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace tests::unit::c::stringz {
  template<typename STRINGZ> class Nullptr;
}
#divert </fpp>
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import c.basic_stringz
template<typename STRINGZ> class tests::unit::c::stringz::Nullptr : public cppunit::test::Fixture { 
public: 
  Nullptr() = default;

  using Subject = STRINGZ;
  static_assert((std::is_same<Subject, ::c::basic_stringz<char>>::value ||
                 std::is_same<Subject, ::c::basic_stringz<char const>>::value), "fail");

  auto test_constructor_default() -> void;
  auto test_constructor_pointer_conversion() -> void;
  auto test_constructor_manifest_array_reference() -> void;
  auto test_constructor_nonconst_buffer() -> void;
  auto test_constructor_const_buffer() -> void;
  auto test_constructor_nonconst_stringz() -> void;
  auto test_constructor_const_stringz() -> void;
  auto test_constructor_nonconst_stringn() -> void;
  auto test_constructor_const_stringn() -> void;
  auto test_iteration() -> void;

  static auto suite() -> cppunit::Test *;
};

#import c.stringz
namespace tests::unit::c::stringz {
  template<> auto Nullptr<::c::stringz>::test_constructor_const_buffer() -> void;
  template<> auto Nullptr<::c::stringz>::test_constructor_const_stringz() -> void;
  template<> auto Nullptr<::c::stringz>::test_constructor_const_stringn() -> void;
}
#divert </hpp>
#divert <tpp>
#import std.cerr
#import std.invalid_argument

template<typename STRINGZ> auto tests::unit::c::stringz::Nullptr<STRINGZ>::test_constructor_default() -> void {
  // basic_stringz() = default;
  Subject t;
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data()); // <-------------- never was a nullptr
  CPPUNIT_ASSERT(t.begin() == t.end());
}

template<typename STRINGZ> auto tests::unit::c::stringz::Nullptr<STRINGZ>::test_constructor_pointer_conversion() -> void {
  Subject t(nullptr);
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data()); // <--------- the nullptr was made "safe"
  CPPUNIT_ASSERT(t.begin() == t.end());
}

template<typename STRINGZ> auto tests::unit::c::stringz::Nullptr<STRINGZ>::test_constructor_manifest_array_reference() -> void {
  // template<std::size_t N>  /*implicit*/ Stringz(typename ancestor::value_type (&)[N]);
  Subject t(nullptr); // <--- FIXME this does not test the template constructor
}

#import c.buffer
template<typename STRINGZ> auto tests::unit::c::stringz::Nullptr<STRINGZ>::test_constructor_nonconst_buffer() -> void {
  try {
    ::c::buffer b(0, nullptr);
    Subject t(b); // <------- fails because there is no '\0' in the size-0 buffer.
    CPPUNIT_ASSERT(false);
  } catch (std::invalid_argument const &e) {
    std::cerr << "expected an exception, it says " << e.what() << '\n';
    CPPUNIT_ASSERT(true);
  }
}

#import c.const_buffer
template<typename STRINGZ> auto tests::unit::c::stringz::Nullptr<STRINGZ>::test_constructor_const_buffer() -> void {
  try {
    ::c::const_buffer b(0, nullptr);
    Subject t(b); // <------- fails because there is no '\0' in the size-0 buffer.
    CPPUNIT_ASSERT(false);
  } catch (std::invalid_argument const &e) {
    std::cerr << "expected an exception, it says " << e.what() << '\n';
    CPPUNIT_ASSERT(true);
  }
}

#import c.stringz
template<typename STRINGZ> auto tests::unit::c::stringz::Nullptr<STRINGZ>::test_constructor_nonconst_stringz() -> void {
  try {
    ::c::stringz b(nullptr);
    Subject t(b);
    CPPUNIT_ASSERT(t.empty());
    CPPUNIT_ASSERT(0 == t.size());
    CPPUNIT_ASSERT(nullptr != t.data()); // <--------- the nullptr was made "safe"
    CPPUNIT_ASSERT(t.begin() == t.end());
  } catch (std::invalid_argument const &e) {
    CPPUNIT_ASSERT(false);
  }
}

#import c.const_stringz
template<typename STRINGZ> auto tests::unit::c::stringz::Nullptr<STRINGZ>::test_constructor_const_stringz() -> void {
  try {
    ::c::const_stringz b(nullptr);
    Subject t(b);
    CPPUNIT_ASSERT(t.empty());
    CPPUNIT_ASSERT(0 == t.size());
    CPPUNIT_ASSERT(nullptr != t.data()); // <--------- the nullptr was made "safe"
    CPPUNIT_ASSERT(t.begin() == t.end());
  } catch (std::invalid_argument const &e) {
    CPPUNIT_ASSERT(false);
  }
}

#import c.stringn
template<typename STRINGZ> auto tests::unit::c::stringz::Nullptr<STRINGZ>::test_constructor_nonconst_stringn() -> void {
  try {
    ::c::stringn b(nullptr, 0);
    Subject t(b);
    CPPUNIT_ASSERT(t.empty());
    CPPUNIT_ASSERT(0 == t.size());
    CPPUNIT_ASSERT(nullptr != t.data()); // <--------- the nullptr was made "safe"
    CPPUNIT_ASSERT(t.begin() == t.end());
  } catch (std::invalid_argument const &e) {
    CPPUNIT_ASSERT(false);
  }
}

#import c.const_stringn
template<typename STRINGZ> auto tests::unit::c::stringz::Nullptr<STRINGZ>::test_constructor_const_stringn() -> void {
  try {
    ::c::const_stringn b(nullptr, 0);
    Subject t(b);
    CPPUNIT_ASSERT(t.empty());
    CPPUNIT_ASSERT(0 == t.size());
    CPPUNIT_ASSERT(nullptr != t.data()); // <--------- the nullptr was made "safe"
    CPPUNIT_ASSERT(t.begin() == t.end());
  } catch (std::invalid_argument const &e) {
    CPPUNIT_ASSERT(false);
  }
}

template<typename STRINGZ> auto tests::unit::c::stringz::Nullptr<STRINGZ>::test_iteration() -> void {
  Subject t;
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data()); // <--------- the nullptr was made "safe"
  CPPUNIT_ASSERT(t.begin() == t.end());
  using iterator = decltype(t.begin()); // could be 'Subject::iterator' or 'Subject::const_iterator'
  unsigned count = 0;
  for (iterator i=t.begin(), e=t.end(); e != i; i++) {
    ++count;
  }
  CPPUNIT_ASSERT(0 == count);
}

#import std.type_info
#import std.string_literals
#import rigging.unit.suite.Stream
#import rigging.unit.suite.add
#import rigging.unit.suite.call
template<typename STRINGZ> auto tests::unit::c::stringz::Nullptr<STRINGZ>::suite() -> cppunit::Test * {
  using namespace std::string_literals;
  using namespace ::rigging::unit::suite;
  Stream series("Nullptr<"s + typeid(STRINGZ).name() + ">"s);
  series << call("constructor-default", &Nullptr::test_constructor_default)
         << call("constructor-pointer_conversion", &Nullptr::test_constructor_pointer_conversion)
         << call("constructor-manifest_array_reference", &Nullptr::test_constructor_manifest_array_reference)
         << call("constructor-const_buffer", &Nullptr::test_constructor_const_buffer)
         << call("constructor-nonconst_stringz", &Nullptr::test_constructor_nonconst_stringz)
         << call("constructor-const_stringz", &Nullptr::test_constructor_const_stringz)
         << call("constructor-nonconst_stringn", &Nullptr::test_constructor_nonconst_stringn)
         << call("constructor-const_stringn", &Nullptr::test_constructor_const_stringn)
         << call("iteration", &Nullptr::test_iteration)
    ;
  return series.release();
}
#endiv
#divert <cpp>
template<> auto tests::unit::c::stringz::Nullptr<c::stringz>::test_constructor_const_buffer() -> void {
  // You can't initialize a c::stringz from a c::const_buffer
  // So this test is trivially passed.
  // Contradictory
  //     c::const_buffer b(0, nullptr);
  //     Subject t(b);
  CPPUNIT_ASSERT(true);
}

template<> auto tests::unit::c::stringz::Nullptr<c::stringz>::test_constructor_const_stringz() -> void {
  // You can't initialize a c::stringz from a c::const_stringz
  // So this test is trivially passed.
  // Contradictory
  //     c::const_stringz b(nullptr);
  //     Subject t(b);
  CPPUNIT_ASSERT(true);
}

template<> auto tests::unit::c::stringz::Nullptr<c::stringz>::test_constructor_const_stringn() -> void {
  // You can't initialize a c::stringz from a c::const_stringz
  // So this test is trivially passed.
  // Contradictory
  //     ::c::const_stringn b(nullptr, 0);
  //     Subject t(b);
  CPPUNIT_ASSERT(true);
}
#endiv

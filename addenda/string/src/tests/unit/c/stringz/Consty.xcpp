// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace tests::unit::c::stringz {
  class Consty;
}
#divert </fpp>
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import tests.unit.c.stringy.Palette
#import c.basic_stringz
class tests::unit::c::stringz::Consty : public cppunit::test::Fixture, stringy::Palette {
public: 
  Consty() = default;

  // Unify the MI
  auto setUp() -> void override final;
  auto tearDown() -> void override final;
  
  using Subject = ::c::basic_stringz<char const>;

  auto test_constructor_default() -> void;
  auto test_constructor_pointer_conversion() -> void;
  auto test_constructor_manifest_array_reference() -> void;
  auto test_constructor_basic_string() -> void;
  auto test_constructor_vector() -> void;
  auto test_constructor_nonconst_buffer() -> void;
  auto test_constructor_const_buffer() -> void;
  auto test_constructor_nonconst_stringz() -> void;
  auto test_constructor_const_stringz() -> void;
  auto test_constructor_nonconst_stringn() -> void;
  auto test_constructor_const_stringn() -> void;
  auto test_iteration() -> void;

  static auto suite() -> cppunit::Test *;
};
#divert </hpp>
#divert <cpp>
#import rigging.unit.lhs
using ::rigging::unit::lhs;

auto tests::unit::c::stringz::Consty::setUp() -> void {
  Palette::setUp();
}

auto tests::unit::c::stringz::Consty::tearDown() -> void {
  Palette::tearDown();
}

auto tests::unit::c::stringz::Consty::test_constructor_default() -> void {
  // basic_stringz() = default;
  Subject t;
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

auto tests::unit::c::stringz::Consty::test_constructor_pointer_conversion() -> void {
  // basic_stringz(typename ancestor::const_data_type stringz);
  Subject t(this->pcc);

  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(this->pcc == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
}

auto tests::unit::c::stringz::Consty::test_constructor_manifest_array_reference() -> void {
  // template<::std::size_t N> basic_stringz(typename ancestor::value_type const (&)[N]);
  Subject t(this->aNcc);
    
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(::std::strlen(this->aNcc) == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(this->aNcc == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  using diff_type = decltype(::std::distance(t.begin(), t.end()));
  CPPUNIT_ASSERT((diff_type)::std::strlen(this->aNcc) == ::std::distance(t.begin(), t.end()));
}

auto tests::unit::c::stringz::Consty::test_constructor_basic_string() -> void {
  // template<typename TRAITS> [[implicit]] Stringz(::std::basic_string<CHAR, TRAITS> const &);
  ::std::string specimen("captious");
  Subject t(specimen);
    
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT_EQUAL(specimen.size(), t.size()); // the string does not count the terminating '\0'
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT_EQUAL(specimen.c_str(), t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  using diff_type = decltype(::std::distance(t.begin(), t.end()));
  CPPUNIT_ASSERT((diff_type)specimen.size() == ::std::distance(t.begin(), t.end()));
}

#import std.vector
auto tests::unit::c::stringz::Consty::test_constructor_vector() -> void {
  // template<typename ALLOC> [[implicit]] Stringz(::std::vector<CHAR, ALLOC> const &);
  ::std::vector<char> specimen;
  lhs(specimen) = "arcade";
  CPPUNIT_ASSERT(!specimen.empty());
  Subject t(specimen);
    
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT_EQUAL(specimen.size(), 1+t.size()); // the vector has a terminating '\0'
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(specimen.data() == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  // argh ... signed vs unsigned
  using diff_type = decltype(::std::distance(t.begin(), t.end()));
  CPPUNIT_ASSERT_EQUAL((diff_type)specimen.size(), 1+::std::distance(t.begin(), t.end())); // Ibidem.
}

#import c.buffer
auto tests::unit::c::stringz::Consty::test_constructor_nonconst_buffer() -> void {
  char buf[] = "lawnmower";
  ::c::buffer specimen(buf, sizeof (buf));
  CPPUNIT_ASSERT(!specimen.empty());
  Subject t(specimen); // <------------- construct with ::c::buffer

  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT_EQUAL(specimen.size(), 1+t.size()); // the vector has a terminating '\0'
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(specimen.data() == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  // argh ... signed vs unsigned
  using diff_type = decltype(::std::distance(t.begin(), t.end()));
  CPPUNIT_ASSERT_EQUAL((diff_type)specimen.size(), 1+::std::distance(t.begin(), t.end())); // ibidem.
}

#import c.const_buffer
auto tests::unit::c::stringz::Consty::test_constructor_const_buffer() -> void {
  // buffer(Stringz<CHAR> const &);
  char buf[] = "bushwhacker";
  ::c::const_buffer specimen(buf, sizeof (buf));
  CPPUNIT_ASSERT(!specimen.empty());
  Subject t(specimen); // <------------- construct with ::c::const_buffer

  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT_EQUAL(specimen.size(), 1+t.size()); // the buffer has a terminating '\0'
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT_EQUAL(specimen.data(), t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  // argh ... signed vs unsigned
  using diff_type = decltype(::std::distance(t.begin(), t.end()));
  CPPUNIT_ASSERT((diff_type)specimen.size() == 1+::std::distance(t.begin(), t.end())); // ibidem.
}

#import c.stringz
auto tests::unit::c::stringz::Consty::test_constructor_nonconst_stringz() -> void {
  char buf[] = "meatloaf";
  ::c::stringz specimen(buf);
  CPPUNIT_ASSERT(!specimen.empty());
  Subject t(specimen); // <------------- construct with ::c::stringz
}

#import c.const_stringz
auto tests::unit::c::stringz::Consty::test_constructor_const_stringz() -> void {
  char const buf[] = "mashed_potatoes";
  ::c::const_stringz specimen(buf);
  CPPUNIT_ASSERT(!specimen.empty());
  Subject t(specimen); // <------------- construct with ::c::const_stringz
}

#import c.stringn
auto tests::unit::c::stringz::Consty::test_constructor_nonconst_stringn() -> void {
  char buf[] = "n-meatloaf";
  ::c::stringn specimen(buf, sizeof (buf)-1);
  CPPUNIT_ASSERT(!specimen.empty());
  Subject t(specimen); // <------------- construct with ::c::stringn
}

#import c.const_stringn
auto tests::unit::c::stringz::Consty::test_constructor_const_stringn() -> void {
  char const buf[] = "n-mashed_potatoes";
  ::c::const_stringn specimen(buf, sizeof (buf)-1);
  CPPUNIT_ASSERT(!specimen.empty());
  Subject t(specimen); // <------------- construct with ::c::const_stringn
}

#import std.max
#import std.min
auto tests::unit::c::stringz::Consty::test_iteration() -> void {
  ::c::basic_stringz<char const> m(this->aNc);
  ::c::basic_stringz<char const> c(this->aNc); // <--------- yes they are the same
  CPPUNIT_ASSERT_EQUAL(m.size(), c.size());
  CPPUNIT_ASSERT(!m.empty());
  CPPUNIT_ASSERT(0 != m.size());
  using iterator = ::c::basic_stringz<char const>::iterator;
  ::std::size_t count = 0;
  for (iterator mi(m.begin()), me(m.end()), ci(c.begin()), ce(c.end()); me != mi && ce != ci; mi++, ci++, count++) {
    char mvalue(*mi);
    char cvalue(*ci);
    char low = ::std::min(mvalue, cvalue);
    char high = ::std::max(mvalue, cvalue);
    CPPUNIT_ASSERT_EQUAL(low, high); // ... think about it
  }
  CPPUNIT_ASSERT_EQUAL(count, m.size());
  CPPUNIT_ASSERT_EQUAL(count, c.size());
}

#import rigging.unit.suite.Stream
#import rigging.unit.suite.add
#import rigging.unit.suite.call
auto tests::unit::c::stringz::Consty::suite() -> cppunit::Test * {
  using namespace ::rigging::unit::suite;
  Stream series("consty");
  series << call("constructor-default", &Consty::test_constructor_default)
         << call("constructor-pointer_conversion", &Consty::test_constructor_pointer_conversion)
         << call("constructor-manifest_array_reference", &Consty::test_constructor_manifest_array_reference)
         << call("constructor-basic_string", &Consty::test_constructor_basic_string)
         << call("constructor-vector", &Consty::test_constructor_vector)
         << call("constructor-nonconst_buffer", &Consty::test_constructor_nonconst_buffer)
         << call("constructor-const_buffer", &Consty::test_constructor_const_buffer)
         << call("constructor-nonconst_stringz", &Consty::test_constructor_nonconst_stringz)
         << call("constructor-const_stringz", &Consty::test_constructor_const_stringz)
         << call("constructor-nonconst_stringn", &Consty::test_constructor_nonconst_stringn)
         << call("constructor-const_stringn", &Consty::test_constructor_const_stringn)
         << call("iteration", &Consty::test_iteration)
    ;
  return series.release();
}
#divert </cpp>

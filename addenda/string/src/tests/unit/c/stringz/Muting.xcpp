// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace tests::unit::c::stringz {
  class Muting;
}
#divert </fpp>
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import tests.unit.c.stringy.Palette
#import c.basic_stringz
class tests::unit::c::stringz::Muting : public cppunit::test::Fixture, stringy::Palette { 
public: 
  Muting() = default;

  // Unify the MI
  auto setUp() -> void override final;
  auto tearDown() -> void override final;
  
  using Subject = ::c::basic_stringz<char>;

  auto test_constructor_default() -> void;
  auto test_constructor_pointer_conversion() -> void;
  auto test_constructor_manifest_array_reference() -> void;
  auto test_constructor_vector() -> void;
  auto test_constructor_nonconst_buffer() -> void;
  auto test_constructor_nonconst_stringz() -> void;
  auto test_constructor_nonconst_stringn() -> void;
  auto test_iteration() -> void;

  static auto suite() -> cppunit::Test *;
};
#divert </hpp>
#divert <cpp>
#import rigging.unit.lhs
using ::rigging::unit::lhs;

auto tests::unit::c::stringz::Muting::setUp() -> void {
  Palette::setUp();
}

auto tests::unit::c::stringz::Muting::tearDown() -> void {
  Palette::tearDown();
}

auto tests::unit::c::stringz::Muting::test_constructor_default() -> void {
  // basic_stringz() = default;
  Subject t;
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
  // DO NOT NOT Fixture::generic_testification(t); as it requires non-emptiness
}

auto tests::unit::c::stringz::Muting::test_constructor_pointer_conversion() -> void {
  // Stringz(typename ancestor::data_type);
  Subject t(this->pc);
  generic_testification(t);
}

auto tests::unit::c::stringz::Muting::test_constructor_manifest_array_reference() -> void {
  // template<std::size_t N>  [[implicit]] Stringz(typename ancestor::value_type (&)[N]);
  Subject t(this->aNc);
}

auto tests::unit::c::stringz::Muting::test_constructor_vector() -> void {
  // template<typename ALLOC> [[implicit]] Stringz(std::vector<CHAR, ALLOC> &);
  std::vector<char> v;
  lhs(v) = this->pc;
  Subject t(v);
  generic_testification(t);
}

#import c.buffer
auto tests::unit::c::stringz::Muting::test_constructor_nonconst_buffer() -> void {
  ::c::buffer b(this->aNc, sizeof (this->aNc));
  Subject t(b);
  generic_testification(t);
}

#import c.stringz
auto tests::unit::c::stringz::Muting::test_constructor_nonconst_stringz() -> void {
  ::c::stringz b(this->aNc);
  Subject t(b);
  generic_testification(t);
}

#import c.stringn
auto tests::unit::c::stringz::Muting::test_constructor_nonconst_stringn() -> void {
  ::c::stringn b(this->aNc); // sized from the manifest array
  Subject t(b);
  generic_testification(t);
}

#import std.isalpha
auto tests::unit::c::stringz::Muting::test_iteration() -> void {
  ::c::basic_stringz<char> m(this->aNc);
  ::c::basic_stringz<char const> c(this->aNc); // <-------- same specimen (aNc)
  CPPUNIT_ASSERT_EQUAL(m.size(), c.size());
  CPPUNIT_ASSERT(!m.empty());
  CPPUNIT_ASSERT(0 != m.size());
  using miterator = ::c::basic_stringz<char>::const_iterator;
  using citerator = ::c::basic_stringz<char const>::const_iterator;
  miterator mi, me;
  citerator ci, ce;
  for (mi=m.begin(), me=m.end(), ci=c.begin(), ce=c.end(); me != mi && ce != ci; mi++, ci++) {
    char mvalue(*mi);
    char cvalue(*ci);
    // they are going to be different
    CPPUNIT_ASSERT(::std::isalpha(mvalue));
    CPPUNIT_ASSERT(::std::isalpha(cvalue));
  }
}

#import rigging.unit.suite.Stream
#import rigging.unit.suite.add
#import rigging.unit.suite.call
auto tests::unit::c::stringz::Muting::suite() -> cppunit::Test * {
  using namespace ::rigging::unit::suite;
  Stream series("muting");
  series << call("constructor-default", &Muting::test_constructor_default)
         << call("constructor-pointer_conversion", &Muting::test_constructor_pointer_conversion)
         << call("constructor-manifest_array_reference", &Muting::test_constructor_manifest_array_reference)
         << call("constructor-vector", &Muting::test_constructor_vector)
         << call("constructor-nonconst_buffer", &Muting::test_constructor_nonconst_buffer)
         << call("constructor-nonconst_stringz", &Muting::test_constructor_nonconst_stringz)
         << call("constructor-nonconst_stringn", &Muting::test_constructor_nonconst_stringn)
         << call("iteration", &Muting::test_iteration)
    ;
  return series.release();
}
#divert </cpp>

// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace tests::unit::c::str {
  class Fixture;
}
#divert </fpp>
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import std.unique_ptr
#import std.size_t
#import std.string
#import std.vector

class tests::unit::c::str::Fixture : public cppunit::test::Fixture { 
  using ancestor = cppunit::test::Fixture;
public: 
  Fixture();
  Fixture(Fixture const &) = delete;
  auto operator=(Fixture const &) -> Fixture & = delete;

  static ::std::size_t const LENGTH = 12;
  char const aNcc[LENGTH];   // array_of_length-N of const_character
  char aNc[LENGTH];          // array-of-length-N of character
  char const *pcc;           // pointer-to-const_character
  char *pc;                  // pointer-to-character
  ::std::string s;
  ::std::vector<char> v;
  ::std::string const *pcs;    // pointer to constant (std::)string ... how else to make a "const string"?

  auto setUp() -> void;
  auto tearDown() -> void;
protected:
  inline static auto dup(char const *) -> ::std::unique_ptr<char []>;
  ::std::unique_ptr<char []> pc_buf;
  ::std::unique_ptr<::std::string> s_buf;
public:
  auto test_char_array() -> void;
  auto test_char_star() -> void;
  auto test_c_basic_stringz() -> void;
  auto test_std_basic_string() -> void;
  auto test_std_basic_string_view_TOMBSTONE() -> void;

  static auto suite() -> cppunit::Test *;
};
#divert </hpp>
#divert <cpp>
#import c.str

tests::unit::c::str::Fixture::Fixture()
  : ancestor()
  , aNcc()
  , aNc()
  , pcc()
  , pc()
  , s()
  , v()
  , pcs() {
  ;
}

#import std.unique_ptr
#import rigging.unit.lhs
auto tests::unit::c::str::Fixture::setUp() -> void {
  using ::rigging::unit::lhs;
  lhs(pcc) = "residue";
  lhs(pc_buf) = "jaunty";
  lhs(pc) = pc_buf;
  lhs(s) = "spendthrift";
  lhs(s) = "ductile";
  lhs(s_buf) = "primp";
  // stringz requires & enforces the nulchar sentinel -------------------------\ (here)
  //                                                                           |
  //                                                                           v
  lhs(v) = decltype(v){'p', 'a', 'r', 't', 'i', 'c', 'i', 'p', 'a', 't', 'e', '\0'};
  lhs(pcs) = s_buf;
}

#import rigging.unit.clear
auto tests::unit::c::str::Fixture::tearDown() -> void {
  using ::rigging::unit::clear;
  using ::rigging::unit::lhs;
  lhs(pcc) = clear;
  lhs(pc) = clear;
  lhs(pc_buf) = clear;
  lhs(s) = clear;
  lhs(s_buf) = clear;
  lhs(v) = clear;
  lhs(pcs) = clear;
}

namespace {
  // Elsewhere it is shown that manifest arrays with a size are handled.
  // Here we show that manifest arrays with unspecified size are handled.
  extern char muting_unspecified_manifest_array[];
  extern char const consty_unspecified_manifest_array[];
}

auto tests::unit::c::str::Fixture::test_char_array() -> void {
  {
    auto r = ::c::str(aNc);
    CPPUNIT_ASSERT(nullptr != r);
    CPPUNIT_ASSERT((::std::string)(r) == (::std::string)(aNc));
  } {
    auto r = ::c::str(aNcc);
    CPPUNIT_ASSERT(nullptr != r);
    CPPUNIT_ASSERT((::std::string)(r) == (::std::string)(aNcc));
  } {
    auto r = ::c::str(&muting_unspecified_manifest_array[0]); //<---- the only way to deal with these
    CPPUNIT_ASSERT(nullptr != r);
    CPPUNIT_ASSERT((::std::string)(r) == (::std::string)(muting_unspecified_manifest_array));
    CPPUNIT_ASSERT((::std::string)(r) != (::std::string)(consty_unspecified_manifest_array));
  } {
    auto r = ::c::str(&consty_unspecified_manifest_array[0]); //<---- the only way to deal with these
    CPPUNIT_ASSERT(nullptr != r);
    CPPUNIT_ASSERT((::std::string)(r) == (::std::string)(consty_unspecified_manifest_array));
    CPPUNIT_ASSERT((::std::string)(r) != (::std::string)(muting_unspecified_manifest_array));
  }
}


namespace {
  char muting_unspecified_manifest_array[] = "apple";
  char const consty_unspecified_manifest_array[] = "banana";
}

auto tests::unit::c::str::Fixture::test_char_star() -> void {
  {
    auto r = ::c::str(pc);
    CPPUNIT_ASSERT(nullptr != r);
    CPPUNIT_ASSERT((::std::string)(r) == (::std::string)(pc));
  } {
    auto r = ::c::str(pcc);
    CPPUNIT_ASSERT(nullptr != r);
    CPPUNIT_ASSERT((::std::string)(r) == (::std::string)(pcc));
  }
}

#import std.string_view
auto tests::unit::c::str::Fixture::test_std_basic_string_view_TOMBSTONE() -> void {
  //
  // Reminder: c::str(std::string_view) is ill-posed.  It is declared "= delete"
  // Because the std::string_view is not *guaranteed* to have a '\0' terminator.
  // As such, it is undefined, unimplementable & untestable
  //
  CPPUNIT_ASSERT(true);
}

#import std.string
auto tests::unit::c::str::Fixture::test_std_basic_string() -> void {
  {
    auto r = ::c::str(s);
    CPPUNIT_ASSERT(nullptr != r);
    CPPUNIT_ASSERT((::std::string)(r) == (::std::string)(s));
  } {
    auto r = ::c::str(*pcs);
    CPPUNIT_ASSERT(nullptr != r);
    CPPUNIT_ASSERT((::std::string)(r) == (::std::string)(*pcs));
  }
}

#import c.basic_stringz
auto tests::unit::c::str::Fixture::test_c_basic_stringz() -> void {
  {
    ::c::basic_stringz<char> sz(this->v); // <--- have to use vector because basic_stringz<char> wants non-const access to the buffer
    auto r = ::c::str(sz);
    CPPUNIT_ASSERT(nullptr != r);
    CPPUNIT_ASSERT((::std::string)(r) == (::std::string)(this->v.data()));
  } {
    ::c::basic_stringz<char const> csz(this->s);
    auto r = ::c::str(csz);
    CPPUNIT_ASSERT(nullptr != r);
    CPPUNIT_ASSERT((::std::string)(r) == (::std::string)(this->s));
  }
}

#import cppunit.test.Caller
#import cppunit.test.Suite
#import std.unique_ptr
auto tests::unit::c::str::Fixture::suite() -> cppunit::Test * {
  using namespace cppunit::test;
  ::std::unique_ptr<Suite> s(new Suite("str"));
  s->addTest(new Caller<Fixture>("char_array", &Fixture::test_char_array));
  s->addTest(new Caller<Fixture>("char_star", &Fixture::test_char_star));
  s->addTest(new Caller<Fixture>("c::basic_stringz", &Fixture::test_c_basic_stringz));
  s->addTest(new Caller<Fixture>("std::basic_string", &Fixture::test_std_basic_string));
  s->addTest(new Caller<Fixture>("std::basic_string_view_TOMBSTONE", &Fixture::test_std_basic_string_view_TOMBSTONE));
  return s.release();
}
#endiv

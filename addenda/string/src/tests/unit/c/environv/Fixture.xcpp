// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace tests::unit::c::environv {
  class Fixture;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::c::environv::Fixture : public cppunit::test::Fixture { 
public: 
  Fixture() = default;

  auto test_consty() -> void;
  auto test_muting() -> void;

  static auto suite() -> cppunit::Test *;
protected:
  template<typename ENVIRON> auto generic_testification(ENVIRON) -> void;
};
#divert </hpp>
#divert <tpp>
#import std.is_same
#import c.environv
#import c.const_environv
template<typename ENVIRON> auto tests::unit::c::environv::Fixture::generic_testification(ENVIRON ev) -> void {
  static_assert((::std::is_same<::c::environv, ENVIRON>::value
                 ||
                 ::std::is_same<::c::const_environv, ENVIRON>::value),
                "the ENVIRON is not actually instantiated as c::environ at all"); 
  CPPUNIT_ASSERT(!ev.empty());
  CPPUNIT_ASSERT(0 != ev.size());
  CPPUNIT_ASSERT(ev.begin() != ev.end());
  CPPUNIT_ASSERT(0 != ::std::distance(ev.begin(), ev.end()));
  for (auto neqv : ev) {
    // Environment strings are shaped as "NAME=VALUE"
    CPPUNIT_ASSERT(::std::string::npos != ([&neqv]() {
          // copy the specimen into a string & probe it
          ::std::string s(neqv);
          return s.find('=');
        }()));
  }
}
#endiv
#divert <cpp>
#import c.basic_environv

extern char **environ;

#import c.const_environv
auto tests::unit::c::environv::Fixture::test_consty() -> void {
  ::c::const_environv ev(::environ);
  generic_testification(ev);
}

#import c.environv
auto tests::unit::c::environv::Fixture::test_muting() -> void {
  ::c::environv ev(::environ); // <------------ test construction
  generic_testification(ev); // <------------------------ and exercise it
}

#import c.environv
#import c.const_environv
#import tests.unit.c.environv.Consty
#import tests.unit.c.environv.Muting
#import tests.unit.c.environv.Nullptr
#import rigging.unit.suite.Stream
#import rigging.unit.suite.call
#import rigging.unit.suite.add
auto tests::unit::c::environv::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::unit::suite;
  Stream series("environv");
  series << call("consty", &Fixture::test_consty)
         << call("muting", &Fixture::test_muting)
         << add<Consty>()
         << add<Muting>()
         << add<Nullptr<::c::environv>>()
         << add<Nullptr<::c::const_environv>>()
    ;
  return series.release();
}
#endiv

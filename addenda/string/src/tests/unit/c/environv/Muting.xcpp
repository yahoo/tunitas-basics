// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace tests::unit::c::environv {
  class Muting;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture

class tests::unit::c::environv::Muting : public cppunit::test::Fixture { 
public: 
  Muting() = default;

  auto test_constructor_default() -> void;
  auto test_constructor_manifest_array() -> void;
  auto test_constructor_pointer() -> void;
  auto test_constructor_vector() -> void;

  static auto suite() -> cppunit::Test *;
protected:
  template<typename ENVIRON> auto generic_testification(ENVIRON) -> void;
};
#endiv
#divert <cpp>
#import c.basic_environv

auto tests::unit::c::environv::Muting::test_constructor_default() -> void {
  ::c::basic_environv<char> that;
  CPPUNIT_ASSERT(that.empty());
}

auto tests::unit::c::environv::Muting::test_constructor_manifest_array() -> void {
  char buf0[] = "NAME=VALUE";
  char buf1[] = "TERM=dumb";
  char buf2[] = "DEBUG=1";
  char *vec[] = { buf0, buf1, buf2, nullptr };
  ::c::basic_environv<char> that(vec);
  CPPUNIT_ASSERT_EQUAL(3lu, that.size());
}

auto tests::unit::c::environv::Muting::test_constructor_pointer() -> void {
  char buf0[] = "NAME=VALUE";
  char buf1[] = "TERM=dumb";
  char buf2[] = "DEBUG=1";
  char *raw[] = { buf0, buf1, buf2, nullptr };
  char **vec = &raw[0];
  ::c::basic_environv<char> that(vec);
  CPPUNIT_ASSERT_EQUAL(3lu, that.size());
}

#import std.vector
auto tests::unit::c::environv::Muting::test_constructor_vector() -> void {
  char buf0[] = "NAME=VALUE";
  char buf1[] = "TERM=dumb";
  char buf2[] = "DEBUG=1";
  std::vector<char *> vec{buf0, buf1, buf2, nullptr};
  ::c::basic_environv<char> that(vec);
  CPPUNIT_ASSERT_EQUAL(3lu, that.size());
}

#import rigging.unit.suite.Stream
#import rigging.unit.suite.call
#import rigging.unit.suite.add
auto tests::unit::c::environv::Muting::suite() -> cppunit::Test * {
  using namespace ::rigging::unit::suite;
  Stream series("Muting");
  series << call("constructor-default", &Muting::test_constructor_default)
         << call("constructor_manifest_array", &Muting::test_constructor_manifest_array)
         << call("constructor_pointer", &Muting::test_constructor_pointer)
         << call("constructor_vector", &Muting::test_constructor_vector)
    ;
  return series.release();
}
#endiv

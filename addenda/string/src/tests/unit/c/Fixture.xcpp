// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace tests::unit::c {
  class Fixture;
}
#divert </fpp>
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture

class tests::unit::c::Fixture : public cppunit::test::Fixture { 
public:
  auto test_something() -> void;

  static auto suite() -> cppunit::Test *;
};
#divert </hpp>
#divert <cpp>
auto tests::unit::c::Fixture::test_something() -> void {
  // What is there to test at the whole-module level?
  CPPUNIT_ASSERT(true);
}

#import tests.unit.c.argv.Fixture
#import tests.unit.c.as.Fixture
#import tests.unit.c.buffer.Fixture
#import tests.unit.c.environv.Fixture
#import tests.unit.c.str.Fixture
#import tests.unit.c.strdup.Fixture
#import tests.unit.c.stringn.Fixture
#import tests.unit.c.stringz.Fixture
#import tests.unit.c.to_string.Fixture
#import tests.unit.c.vector.Fixture
#import rigging.unit.suite.Stream
#import rigging.unit.suite.add
#import rigging.unit.suite.call
auto tests::unit::c::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::unit::suite;
  Stream series("c");
  series << call("something", &Fixture::test_something)
         << add<argv::Fixture>()
         << add<as::Fixture>()
         << add<buffer::Fixture>()
         << add<environv::Fixture>()
         << add<str::Fixture>()
         << add<strdup::Fixture>()
         << add<stringn::Fixture>()
         << add<stringz::Fixture>()
         << add<to_string::Fixture>()
         << add<vector::Fixture>()
    ;
  return series.release();
}
#divert </cpp>

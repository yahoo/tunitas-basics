// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace tests::unit::c::strdup {
  class Fixture;
}
#divert </fpp>
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import c.strdup

class tests::unit::c::strdup::Fixture : public cppunit::test::Fixture { 
public: 
  Fixture() = default;
  Fixture(Fixture const &) = delete;
  auto operator=(Fixture const &) -> Fixture & = delete;

  auto setUp() -> void;
  auto tearDown() -> void;
public:
  auto test_char_star() -> void;
  auto test_c_basic_buffer() -> void;
  auto test_c_basic_stringz() -> void;
  auto test_std_array() -> void;
  auto test_std_basic_string() -> void;
  auto test_std_vector() -> void;
public:
  static auto suite() -> cppunit::Test *;
public:
  // for the convenience of the testing
  class Finally;
};
#divert </hpp>
#divert <cpp>
#import tests.unit.c.strdup.Fixture.Finally

auto tests::unit::c::strdup::Fixture::setUp() -> void {
  // soon we do something here
}

auto tests::unit::c::strdup::Fixture::tearDown() -> void {
  // soon we do something here
}

auto tests::unit::c::strdup::Fixture::test_char_star() -> void {
  auto thing = ::c::strdup("vulnerary");
  Finally f(thing);
  CPPUNIT_ASSERT((::std::string) "vulnerary" == (::std::string) thing);
}

#import c.basic_buffer
auto tests::unit::c::strdup::Fixture::test_c_basic_buffer() -> void {
  {
    char raw[] = { "cabal" };
    ::c::basic_buffer<char> buf(raw);
    auto thing = ::c::strdup(buf);
    Finally f(thing);
    CPPUNIT_ASSERT((::std::string) "cabal" == (::std::string) thing);
  } {
    char raw[] = { "interpolate" };
    ::c::basic_buffer<char const> buf(raw); // <--------- 'char const'
    auto thing = ::c::strdup(buf);
    Finally f(thing);
    CPPUNIT_ASSERT((::std::string) "interpolate" == (::std::string) thing);
  }
}

#import c.basic_stringz
auto tests::unit::c::strdup::Fixture::test_c_basic_stringz() -> void {
  {
    char raw[] = { "alias" };
    ::c::basic_stringz<char> buf(raw);
    auto thing = ::c::strdup(buf);
    Finally f(thing);
    CPPUNIT_ASSERT((::std::string) "alias" == (::std::string) thing);
  } {
    char raw[] = { "astringent" };
    ::c::basic_stringz<char const> buf(raw); // <--------- 'char const'
    auto thing = ::c::strdup(buf);
    Finally f(thing);
    CPPUNIT_ASSERT((::std::string) "astringent" == (::std::string) thing);
  }
}

#import std.array
auto tests::unit::c::strdup::Fixture::test_std_array() -> void {
  ::std::array<char, sizeof ("incorporeal")> buf{"incorporeal"};
  auto thing = ::c::strdup(buf);
  Finally f(thing);
  CPPUNIT_ASSERT((::std::string) "incorporeal" == (::std::string) thing);
}

auto tests::unit::c::strdup::Fixture::test_std_basic_string() -> void {
  ::std::basic_string<char> buf{"trident"};
  auto thing = ::c::strdup(buf);
  Finally f(thing);
  CPPUNIT_ASSERT((::std::string) "trident" == (::std::string) thing);
}

auto tests::unit::c::strdup::Fixture::test_std_vector() -> void {
  ::std::vector<char> buf{'r', 'u', 'b', 'b', 'l', 'e'};
  auto thing = ::c::strdup(buf);
  Finally f(thing);
  CPPUNIT_ASSERT((::std::string) "rubble" == (::std::string) thing);
}

#import cppunit.test.Caller
#import cppunit.test.Suite
#import std.unique_ptr
auto tests::unit::c::strdup::Fixture::suite() -> cppunit::Test * {
  using namespace cppunit::test;
  ::std::unique_ptr<Suite> s(new Suite("strdup"));
  s->addTest(new Caller<Fixture>("char*", &Fixture::test_char_star));
  s->addTest(new Caller<Fixture>("c::basic_buffer", &Fixture::test_c_basic_buffer));
  s->addTest(new Caller<Fixture>("c::basic_stringz", &Fixture::test_c_basic_stringz));
  s->addTest(new Caller<Fixture>("std::array", &Fixture::test_std_array));
  s->addTest(new Caller<Fixture>("std::basic_string", &Fixture::test_std_basic_string));
  s->addTest(new Caller<Fixture>("std::vector", &Fixture::test_std_vector));
  return s.release();
}
#divert </cpp>

// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace tests::unit::c::argv {
  class Consty;
}
#divert </fpp>
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import tests.unit.c.argv.Palette
#import c.basic_argv

class tests::unit::c::argv::Consty : public cppunit::test::Fixture, Palette { 
public: 
  // unify the MI obligation of Fixture into Palette
  auto setUp() -> void;
  auto tearDown() -> void;

  auto test_default_constructor() -> void;
  auto test_copy_constructor_from_default() -> void;
  auto test_copy_constructor_from_full() -> void;
  auto test_constructor_from_const_manifest_array() -> void;
  auto test_constructor_from_nonconst_manifest_array() -> void;
  template<typename CHECK> auto test_constructor_from_const_manifest_array_with_size_smaller() -> void;
  template<typename CHECK> auto test_constructor_from_const_manifest_array_with_size_exact() -> void;
  template<typename CHECK> auto test_constructor_from_const_manifest_array_with_size_bigger() -> void; 
  auto testthrash_manifest_array1() -> void;
  auto testthrash_manifest_array2_yes() -> void;
  auto testthrash_manifest_array2_no() -> void;
  auto test_EVERY_OTHER_constructor() -> void;
  auto test_nonconst_to_const_conversion_constructor() -> void;
  auto test_const_to_const_conversion_constructor() -> void;

  auto test_iteration() -> void;

  static auto suite() -> cppunit::Test *;

  using Subject = ::c::basic_argv<char const>;
  using Char = char const; // <â€” we're in the "consty" tester
};

#divert </hpp>
#divert <tpp>
#import std.begin
#import std.end
#import std.copy
template<typename CHECK> auto tests::unit::c::argv::Consty::test_constructor_from_const_manifest_array_with_size_smaller() -> void {
  // template<::std::size_t N> basic_argv(::std::size_t argc, typename ancestor::value_type const (&argv)[N]);
  char const *ensmallen[sizeof (aNcpcc)/sizeof (aNcpcc[0])];
  ::std::copy(::std::begin(aNcpcc), ::std::end(aNcpcc), &ensmallen[0]);
  ensmallen[1] = nullptr;
  Subject t(CHECK(), 1, ensmallen);
  // Can't use generic_testification(...) because it assumes SIZE == t.size()
  CPPUNIT_ASSERT(1 == t.size());
  CPPUNIT_ASSERT(ensmallen == t.data());
}

template<typename CHECK> auto tests::unit::c::argv::Consty::test_constructor_from_const_manifest_array_with_size_exact() -> void {
  // template<::std::size_t N> basic_argv(::std::size_t argc, typename ancestor::value_type const (&argv)[N]);
  Subject t(CHECK(), SIZE, aNcpcc);
  generic_testification(t);
  CPPUNIT_ASSERT(aNcpcc == t.data());
}

#import std.length_error
#import std.invalid_argument
#import std.is_same
template<typename CHECK> auto tests::unit::c::argv::Consty::test_constructor_from_const_manifest_array_with_size_bigger() -> void {
  // template<::std::size_t N> basic_argv(::std::size_t argc, typename ancestor::value_type const (&argv)[N]);
  bool const there_is_no_checking_in_place = ::std::is_same<::c::check::No, CHECK>::value;
  try {
    Subject t(CHECK(), WAY_TOO_BIG, aNcpcc);
    // There must be no checking in place because the constructor did not throw
    if (!there_is_no_checking_in_place) {
      // And if not ... what happened?
      for (auto item : t) {
        ::std::ostream &out(::std::clog);
        ::std::clog << "item: ";
        if (nullptr == item) {
          out <<  "(null)";
        } else {
          out << '"' << item << '"';
        }
        out << '\n';
      }
    }
    CPPUNIT_ASSERT(there_is_no_checking_in_place);
  } catch (::std::length_error const &e) {
    // The argc-specified size does not match the compiler-identified size N
    CPPUNIT_ASSERT( !there_is_no_checking_in_place );
  } catch (::std::invalid_argument const &e) {
    // The sentinel was missing
    CPPUNIT_ASSERT( !there_is_no_checking_in_place );
  }
}
#endiv
#divert <cpp>
auto tests::unit::c::argv::Consty::setUp() -> void {
  Palette::setUp();
}

auto tests::unit::c::argv::Consty::tearDown() -> void {
  Palette::tearDown();
}

auto tests::unit::c::argv::Consty::test_default_constructor() -> void {
  Subject t;
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

auto tests::unit::c::argv::Consty::test_copy_constructor_from_default() -> void {
  Subject original;
  Subject t(original);
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

auto tests::unit::c::argv::Consty::test_copy_constructor_from_full() -> void {
  Subject original(aNcpcc);
  generic_testification(original);

  Subject t(original);
  generic_testification(t);
}

auto tests::unit::c::argv::Consty::test_constructor_from_const_manifest_array() -> void {
  // template<::std::size_t N> basic_argv(typename ancestor::value_type const (&argv)[N]);
  ::std::size_t const storage = sizeof (aNcpcc)/sizeof (aNcpcc[0]);
  CPPUNIT_ASSERT(STORAGE == storage);
  Subject t(aNcpcc);
  generic_testification(t);
  CPPUNIT_ASSERT(SIZE == t.size());
  generic_testification(t);
  CPPUNIT_ASSERT(aNcpcc == t.data());
}

auto tests::unit::c::argv::Consty::test_constructor_from_nonconst_manifest_array() -> void {
  // template<::std::size_t N> basic_argv(typename ancestor::value_type const (&argv)[N]);
  //
  // but we're going to give it a nonconst array to cast into constness
  ::std::size_t const storage = sizeof (aNpc)/sizeof (aNpc[0]);
  CPPUNIT_ASSERT(STORAGE == storage);
  Subject t(aNpc);
  generic_testification(t);
  CPPUNIT_ASSERT(SIZE == t.size());
  generic_testification(t);
  CPPUNIT_ASSERT(aNpc == t.data());
}

#import std.length_error
auto tests::unit::c::argv::Consty::testthrash_manifest_array1() -> void {
  try {
    // DANGEROUS - This probes beyond the end of the array, looking at aNcpcc[15] when the array max is aNcpcc[11]
    ::std::clog << "probing (uncheckable and dangerous) t.size " << WAY_TOO_BIG << " at " << __LINE__ << " in " << __FUNCTION__ << '\n';
    Subject t(WAY_TOO_BIG, aNcpcc);
    CPPUNIT_ASSERT(true); // <--- CAN get here because the nullptr sentinel check might or might not throw
    // The point is that by looking at aNcpcc[WAY_TOO_BIG] or thereabouts we're probing
    // unguarded memory which may contain arbitrary and random stuff.  Or we may segfault.
  } catch (::std::length_error const &e) {
    ::std::clog << "FAILING (unexpected) length_error " << e.what() << "\n";
    CPPUNIT_ASSERT(false);
  } catch (::std::invalid_argument const &e) {
    ::std::clog << "FAILING (expected) terminating nullptr sentinel missing " << e.what() << "\n";
    CPPUNIT_ASSERT(true);
  }
}

auto tests::unit::c::argv::Consty::testthrash_manifest_array2_yes() -> void {
  try {
    Subject t(::c::check::Bound::CHECK, WAY_TOO_BIG, aNcpcc);
    CPPUNIT_ASSERT(false);
  } catch (::std::length_error const &e) {
    ::std::clog << "OK (checked bound) length_error " << e.what() << "\n";
    CPPUNIT_ASSERT(true);
  }
}

auto tests::unit::c::argv::Consty::testthrash_manifest_array2_no() -> void {
  try {
    Subject t(::c::check::No::CHECK, WAY_TOO_BIG, aNcpcc);
    ::std::clog << "OK (unchecked and dangerous) t.size " << t.size() << " at " << __LINE__ << " in " << __FUNCTION__ << '\n';
    CPPUNIT_ASSERT(true);
  } catch (::std::length_error const &e) {
    ::std::clog << "FAILING (unexpected) length_error " << e.what() << "\n";
    CPPUNIT_ASSERT(false);
  }
}

auto tests::unit::c::argv::Consty::test_EVERY_OTHER_constructor() -> void {
  {
    // basic_argv(::std::size_t count, typename ancestor::const_data_type argv);
    Subject t(SIZE, pcpcc);

    CPPUNIT_ASSERT(!t.empty());
    CPPUNIT_ASSERT(0 != t.size());
    CPPUNIT_ASSERT(SIZE == t.size());
    CPPUNIT_ASSERT(nullptr != t.data());
    CPPUNIT_ASSERT(pcpcc == t.data());
    CPPUNIT_ASSERT(t.begin() != t.end());
    CPPUNIT_ASSERT(SIZE == ::std::distance(t.begin(), t.end()));
  } {
    // [[implicit]] basic_argv(::std::pair<::std::size_t, CHAR **> const &);
    ::std::pair<::std::size_t, char const *const *> p(SIZE, pcpcc);
    Subject t(p);

    CPPUNIT_ASSERT(!t.empty());
    CPPUNIT_ASSERT(0 != t.size());
    CPPUNIT_ASSERT(SIZE == t.size());
    CPPUNIT_ASSERT(nullptr != t.data());
    CPPUNIT_ASSERT(pcpcc == t.data());
    CPPUNIT_ASSERT(t.begin() != t.end());
    CPPUNIT_ASSERT(SIZE == ::std::distance(t.begin(), t.end()));
  } {
    // [[implicit]] basic_argv(::std::pair<::std::size_t, CHAR const *const *> const &);
    ::std::pair<::std::size_t, char const *const *> p(SIZE, pcpcc);
    Subject t(p);

    CPPUNIT_ASSERT(!t.empty());
    CPPUNIT_ASSERT(0 != t.size());
    CPPUNIT_ASSERT(SIZE == t.size());
    CPPUNIT_ASSERT(nullptr != t.data());
    CPPUNIT_ASSERT(pcpcc == t.data());
    CPPUNIT_ASSERT(t.begin() != t.end());
    CPPUNIT_ASSERT(SIZE == ::std::distance(t.begin(), t.end()));
  } {
    // [[implicit]] basic_argv(::std::tuple<::std::size_t, CHAR **> const &);
    ::std::tuple<::std::size_t, char const *const *> u(SIZE, pcpcc);
    Subject t(u);

    CPPUNIT_ASSERT(!t.empty());
    CPPUNIT_ASSERT(0 != t.size());
    CPPUNIT_ASSERT(SIZE == t.size());
    CPPUNIT_ASSERT(nullptr != t.data());
    CPPUNIT_ASSERT(pcpcc == t.data());
    CPPUNIT_ASSERT(t.begin() != t.end());
    CPPUNIT_ASSERT(SIZE == ::std::distance(t.begin(), t.end()));
  } {
    // [[implicit]] basic_argv(::std::tuple<::std::size_t, CHAR const *const *> const &);
    ::std::tuple<::std::size_t, char const *const *> u(SIZE, pcpcc);
    Subject t(u);

    CPPUNIT_ASSERT(!t.empty());
    CPPUNIT_ASSERT(0 != t.size());
    CPPUNIT_ASSERT(SIZE == t.size());
    CPPUNIT_ASSERT(nullptr != t.data());
    CPPUNIT_ASSERT(pcpcc == t.data());
    CPPUNIT_ASSERT(t.begin() != t.end());
    CPPUNIT_ASSERT(SIZE == ::std::distance(t.begin(), t.end()));
  } {
    // template<typename ALLOC> [[implicit]] basic_argv(::std::vector<CHAR *, ALLOC> const &);
    ::std::vector<Char *> v;
    // prepare for & copy in the nullptr at the end of pcpcc
    v.resize(STORAGE);
    ::std::copy(pcpcc, pcpcc+STORAGE, v.begin());
    Subject t(v);

    CPPUNIT_ASSERT(!t.empty());
    CPPUNIT_ASSERT(0 != t.size());
    CPPUNIT_ASSERT(SIZE == t.size());
    CPPUNIT_ASSERT(nullptr != t.data());
    for (unsigned i(0), e(t.size()); e != i; ++i) {
      CPPUNIT_ASSERT(t[i] == v[i]);
    }
    CPPUNIT_ASSERT(t.begin() != t.end());
    CPPUNIT_ASSERT(SIZE == ::std::distance(t.begin(), t.end()));
  } {
    // template<typename ALLOC> [[implicit]] basic_argv(::std::vector<CHAR const *, ALLOC> const &);
    ::std::vector<Char *> v;
    // prepare for & copy in the nullptr at the end of pcpcc
    v.resize(STORAGE);
    ::std::copy(pcpcc, pcpcc+STORAGE, v.begin());
    Subject t(v);

    CPPUNIT_ASSERT(!t.empty());
    CPPUNIT_ASSERT(0 != t.size());
    CPPUNIT_ASSERT(SIZE == t.size());
    CPPUNIT_ASSERT(nullptr != t.data());
    for (unsigned i(0), e(t.size()); e != i; ++i) {
      CPPUNIT_ASSERT(t[i] == v[i]);
    }
    CPPUNIT_ASSERT(t.begin() != t.end());
    CPPUNIT_ASSERT(SIZE == ::std::distance(t.begin(), t.end()));
  }
}

auto tests::unit::c::argv::Consty::test_const_to_const_conversion_constructor() -> void {
  // [[implicit]] basic_argv(basic_argv<CHAR> const &);
  ::c::basic_argv<char const> a(aNcpcc);
  generic_testification(a);

  Subject t(a);
  generic_testification(t);

  for (unsigned i(0), e(t.size()); e != i; ++i) {
    CPPUNIT_ASSERT(t[i] == a[i]);
  }
}

auto tests::unit::c::argv::Consty::test_nonconst_to_const_conversion_constructor() -> void {
  // [[implicit]] basic_argv(basic_argv<CHAR> const &);
  ::c::basic_argv<char> a(aNpc);
  generic_testification(a);

  Subject t(a);
  generic_testification(t);

  for (unsigned i(0), e(t.size()); e != i; ++i) {
    CPPUNIT_ASSERT(t[i] == a[i]);
  }
}

auto tests::unit::c::argv::Consty::test_iteration() -> void {
  ::c::basic_argv<char>       m(aNpc); // <------ aNpc not aNcpcc
  ::c::basic_argv<char const> c(aNpc); // <------ same data source, but in the "consty" form so we can say *mi == *ci
  CPPUNIT_ASSERT(m.size() == c.size());
  CPPUNIT_ASSERT(!m.empty());
  CPPUNIT_ASSERT(0 != m.size());
  using iterator = ::c::basic_argv<char const>::iterator;
  for (iterator mi(m.begin()), me(m.end()), ci(c.begin()), ce(c.end()); me != mi && ce != ci; mi++, ci++) {
    CPPUNIT_ASSERT(*mi == *ci);
    ::std::string mvalue(*mi);
    ::std::string cvalue(*ci);
    CPPUNIT_ASSERT(mvalue == cvalue);
    CPPUNIT_ASSERT(!mvalue.empty());
    CPPUNIT_ASSERT(0 != mvalue.size());
    ::std::clog << "mvalue=" << mvalue << " cvalue=" << cvalue << '\n';
  }
}

#import c.check
#import cppunit.test.Caller
#import cppunit.test.Suite
#import rigging.unit.suite.Stream
#import rigging.unit.suite.call
auto tests::unit::c::argv::Consty::suite() -> cppunit::Test * {
  using namespace ::rigging::unit::suite;
  Stream series("basic_argv<char const>");
  series << call<Consty>("default", &Consty::test_default_constructor)
         << call<Consty>("copy-from-default", &Consty::test_copy_constructor_from_default)
         << call<Consty>("copy-from-full", &Consty::test_copy_constructor_from_full)
         << call<Consty>("const-manifest-array", &Consty::test_constructor_from_const_manifest_array)
         << call<Consty>("nonconst-manifest-array", &Consty::test_constructor_from_nonconst_manifest_array)
         << call<Consty>("const-manifest-array, with smaller size, bounds-checked", &Consty::test_constructor_from_const_manifest_array_with_size_smaller<::c::check::Bound>)
         << call<Consty>("const-manifest-array, with smaller size, bounds-free", &Consty::test_constructor_from_const_manifest_array_with_size_smaller<::c::check::No>)
         << call<Consty>("const-manifest-array, with exact size, bounds-checked", &Consty::test_constructor_from_const_manifest_array_with_size_exact<::c::check::Bound>)
         << call<Consty>("const-manifest-array, with exact size, bounds-free", &Consty::test_constructor_from_const_manifest_array_with_size_exact<::c::check::No>)
         << call<Consty>("const-manifest-array, with size bigger, bounds-checked", &Consty::test_constructor_from_const_manifest_array_with_size_bigger<::c::check::Bound>)
         << call<Consty>("const-manifest-array, with size bigger, bounds-free", &Consty::test_constructor_from_const_manifest_array_with_size_bigger<::c::check::No>)
         << call<Consty>("manifest-array #1", &Consty::testthrash_manifest_array1)
         << call<Consty>("manifest-array #2, yes (bounds-checking)", &Consty::testthrash_manifest_array2_yes)
         << call<Consty>("manifest-array #2, no (bounds-checking)", &Consty::testthrash_manifest_array2_no)
         << call<Consty>("EVERY_OTHER", &Consty::test_EVERY_OTHER_constructor)
         << call<Consty>("nonconst-to-const-conversion", &Consty::test_nonconst_to_const_conversion_constructor)
         << call<Consty>("const-to-const-conversion", &Consty::test_const_to_const_conversion_constructor)
         << call<Consty>("iteration", &Consty::test_iteration)
    ;
  return series.release();
}
#divert </cpp>

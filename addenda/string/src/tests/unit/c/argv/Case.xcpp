// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace tests::unit::c::argv {
  class Case;
}
#divert </fpp>
#divert <hpp>
#import cppunit.test.Case

class tests::unit::c::argv::Case : public cppunit::test::Case {
  using ancestor = cppunit::test::Case;
public: 
  inline Case();
  auto runTest() -> void override;
private:
  static char BUF[3][50];
  static char *VEC[sizeof(BUF)/sizeof (BUF[0])+1];
};
#divert </hpp>
#divert <ipp>
// we want to give meaningful names so that test cases can be named & found in the tree of tests
tests::unit::c::argv::Case::Case()
  : ancestor::TestCase(__FUNCTION__) {
  ;
}
#divert </ipp>
#divert <cpp>
#import c.argv
#import std.clog
#import std.size_t

char tests::unit::c::argv::Case::BUF[3][50] = {
  { "apple" },
  { "banana" },
  { "cherry" },
};
char *tests::unit::c::argv::Case::VEC[] = { BUF[0], BUF[1], BUF[2], nullptr };

auto tests::unit::c::argv::Case::runTest() -> void {
  char **begin = &VEC[0];
  char **end = &VEC[sizeof (BUF)/sizeof (BUF[0])];
  ::std::size_t size = end - begin;
  ::c::argv av(size, VEC); // <---------------- this tests something, the constructor
  CPPUNIT_ASSERT((std::string)"apple" == av[0]);
  CPPUNIT_ASSERT((std::string)"banana" == av[1]);
  CPPUNIT_ASSERT((std::string)"cherry" == av[2]);
}
#divert </cpp>

// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace tests::unit::c::argv {
  class Fixture;
}
#endiv
#divert <hpp>
#import c.argv
#import cppunit.Test
#import cppunit.test.Fixture
#import tests.unit.c.argv.Palette
class tests::unit::c::argv::Fixture : public cppunit::test::Fixture, Palette { 
public: 
  Fixture() = default;
  Fixture(Fixture const &) = delete;
  auto operator=(Fixture const &) -> Fixture & = delete;
  auto setUp() -> void;
  auto tearDown() -> void;
public:
  auto test_consty() -> void;
  auto test_muting() -> void;

  auto test_rest() -> void;

  auto test_zero_length_argv() -> void;
  auto test_argv_shift() -> void;

  static auto suite() -> cppunit::Test *;
protected:
  static auto shift_down(::c::argv, unsigned shift = 1) -> ::c::argv;
};
#endiv
#divert <cpp>
auto tests::unit::c::argv::Fixture::shift_down(::c::argv av, unsigned shift) -> ::c::argv {
  if (shift > av.size()) {
    return ::c::argv();
  } else {
    return ::c::argv(av.size() - shift, av.data() + shift);
  }
}

auto tests::unit::c::argv::Fixture::setUp() -> void {
  Palette::setUp();
}

auto tests::unit::c::argv::Fixture::tearDown() -> void {
  Palette::tearDown();
}

#import c.const_argv
auto tests::unit::c::argv::Fixture::test_consty() -> void {
  char const *raw[] = {
    "/bin/echo",
    "hello",
    "world",
    nullptr,
  };
  ::c::const_argv that(raw);
  CPPUNIT_ASSERT_EQUAL(3lu, that.size());
}

#import c.argv
auto tests::unit::c::argv::Fixture::test_muting() -> void {
  char buf0[] = "/bin/echo";
  char buf1[] = "hello";
  char buf2[] = "world"; 
  char *raw[] = { buf0, buf1, buf2, nullptr };
  ::c::argv that(raw);
  CPPUNIT_ASSERT_EQUAL(3lu, that.size());
}

#import c.argv
#import c.rest
#import std.string
auto tests::unit::c::argv::Fixture::test_rest() -> void {
  char buf0[] = "/bin/cat";
  char buf1[] = "-e";
  char buf2[] = "/dev/null";
  char *arg_v[] = { &buf0[0], &buf1[0], &buf2[0], nullptr };
  int arg_c = sizeof (arg_v)/sizeof (arg_v[0]) - 1;
  ::c::argv specimen(arg_c, arg_v);
  CPPUNIT_ASSERT(3 == specimen.size());
  CPPUNIT_ASSERT((std::string)("/dev/null")  == specimen.data()[2]);
  auto fixup = rest(specimen); // <--------------------------------------- test this
  CPPUNIT_ASSERT(2 == fixup.size());
  CPPUNIT_ASSERT((::std::string)("-e")  == fixup.data()[0]);
  CPPUNIT_ASSERT((::std::string)("/dev/null")  == fixup.data()[1]);
}

auto tests::unit::c::argv::Fixture::test_zero_length_argv() -> void {
  char *arg_v[] = { nullptr };
  int arg_c = sizeof (arg_v)/sizeof (arg_v[0]) - 1;
  ::c::const_argv zero(arg_c, arg_v);
  CPPUNIT_ASSERT(0 == zero.size());
}

auto tests::unit::c::argv::Fixture::test_argv_shift() -> void {
  char buf0[] = "/bin/cat";
  char buf1[] = "-e";
  char buf2[] = "/dev/null";
  char *arg_v[] = { &buf0[0], &buf1[0], &buf2[0], nullptr };
  int arg_c = sizeof (arg_v)/sizeof (arg_v[0]) - 1;
  auto subject0 = ::c::argv(arg_c, arg_v);
  CPPUNIT_ASSERT(3 == subject0.size());
  auto subject1 = shift_down(subject0);
  CPPUNIT_ASSERT(2 == subject1.size());
  auto subject2 = shift_down(subject1);
  CPPUNIT_ASSERT(1 == subject2.size());
  auto subject3 = shift_down(subject2);
  CPPUNIT_ASSERT(0 == subject3.size());
}

#import c.argv
#import c.const_argv
#import tests.unit.c.argv.Case
#import tests.unit.c.argv.Consty
#import tests.unit.c.argv.Muting
#import tests.unit.c.argv.Nullptr
#import rigging.unit.suite.Stream
#import rigging.unit.suite.call
#import rigging.unit.suite.add
auto tests::unit::c::argv::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::unit::suite;
  Stream series("argv");
  series << call("consty", &Fixture::test_consty)
         << call("muting", &Fixture::test_muting)
         << call("rest", &Fixture::test_rest)
         << call("zero-length", &Fixture::test_zero_length_argv)
         << call("shift", &Fixture::test_argv_shift)
         << add<Consty>()
         << add<Muting>()
#if 1
#warning WATCHOUT - not testing add(Nullptr<::c::const_argv>::suite())
#warning WATCHOUT - not testing add(Nullptr<::c::argv>::suite())
#else
         << add<Nullptr<::c::const_argv>>()
         << add<Nullptr<::c::argv>>()
#endif
    ;
  return series.release();
}
#endiv
>

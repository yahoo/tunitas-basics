// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace tests::unit::c::buffer {
  class Fixture;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import std.size_t
#import tests.unit.c.buffer.Palette
class tests::unit::c::buffer::Fixture : public cppunit::test::Fixture, Palette {
  using ancestor = cppunit::test::Fixture;
public: 
  auto setUp() -> void override final;
  auto tearDown() -> void override final;

  auto test_consty() -> void;
  auto test_muting() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
auto tests::unit::c::buffer::Fixture::setUp() -> void {
  Palette::setUp(); // unify the MI
}

auto tests::unit::c::buffer::Fixture::tearDown() -> void {
  Palette::tearDown(); // unify the MI
}

#import c.const_buffer
auto tests::unit::c::buffer::Fixture::test_consty() -> void {
  ::c::const_buffer cb;
  CPPUNIT_ASSERT(cb.empty());
}

#import c.buffer
auto tests::unit::c::buffer::Fixture::test_muting() -> void {
  ::c::buffer b;
  CPPUNIT_ASSERT(b.empty());
}

#import tests.unit.c.buffer.Consty
#import tests.unit.c.buffer.Muting
#import tests.unit.c.buffer.Nullptr
#import rigging.unit.suite.Stream
#import rigging.unit.suite.call
#import rigging.unit.suite.add
auto tests::unit::c::buffer::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::unit::suite;
  Stream series("buffer");
  series << call("consty", &Fixture::test_consty)
         << call("muting", &Fixture::test_muting)
         << add<Consty>()
         << add<Muting>()
         << add<Nullptr<::c::buffer>>()
         << add<Nullptr<::c::const_buffer>>()
    ;
  return series.release();
}
#endiv

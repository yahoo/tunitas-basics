// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace tests::unit::c::buffer {
  class Muting;
}
#endiv
#divert <hpp>
#import c.basic_buffer
#import cppunit.Test
#import cppunit.test.Fixture
#import tests.unit.c.buffer.Palette
class tests::unit::c::buffer::Muting : public cppunit::test::Fixture, Palette {
public: 
  using Subject = ::c::basic_buffer<char>;

  virtual auto setUp() -> void override final;
  virtual auto tearDown() -> void override final;

  auto test_constructor_default() -> void;
  auto test_constructor_manifest_array() -> void;
  auto test_constructor_manifest_array_smaller() -> void;
  auto test_constructor_manifest_array_too_big() -> void;
  auto test_constructor_pointer() -> void;
  auto test_constructor_stringz() -> void;
  auto test_constructor_stringn() -> void;
  auto test_constructor_pair_size_first() -> void;
  auto test_constructor_pair_size_second() -> void;
  auto test_constructor_tuple_size_first() -> void;
  auto test_constructor_tuple_size_second() -> void;
  auto test_constructor_array() -> void;
  auto test_constructor_vector() -> void;
  auto test_iteration() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import c.basic_buffer

auto tests::unit::c::buffer::Muting::setUp() -> void {
  Palette::setUp();
}

auto tests::unit::c::buffer::Muting::tearDown() -> void {
  Palette::tearDown();
}

auto tests::unit::c::buffer::Muting::test_constructor_default() -> void {
  Subject t; // <------------- test this
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

#import std.distance
auto tests::unit::c::buffer::Muting::test_constructor_manifest_array() -> void {
  Subject t(aNc); // <------------- test this 
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(LENGTH == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(aNc == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(LENGTH == ::std::distance(t.begin(), t.end()));
}

auto tests::unit::c::buffer::Muting::test_constructor_manifest_array_smaller() -> void {
  auto const smaller_size = LENGTH - 5;
  Subject t(aNc, smaller_size); // <------------- test this 
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(smaller_size == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(aNc == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(smaller_size == ::std::distance(t.begin(), t.end()));
}

#import std.length_error
auto tests::unit::c::buffer::Muting::test_constructor_manifest_array_too_big() -> void {
  try {
    Subject t(aNc, LENGTH+1); // <------------- test this
    CPPUNIT_ASSERT(false);
  } catch (std::length_error const &) {
    CPPUNIT_ASSERT(true);
  }
}

auto tests::unit::c::buffer::Muting::test_constructor_pointer() -> void {
  Subject t(LENGTH, pc); // <------------- test this
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(LENGTH == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(pc == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(LENGTH == ::std::distance(t.begin(), t.end()));
}

#import c.stringz
auto tests::unit::c::buffer::Muting::test_constructor_stringz() -> void {
  char buf[] = "something";
  auto const buf_LENGTH = sizeof (buf)-1;
  ::c::stringz sz(buf);
  Subject t(sz); // <------------- test this
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(buf_LENGTH == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  for (unsigned i(0), e(t.size()); e != i; ++i) {
    CPPUNIT_ASSERT(t[i] == buf[i]);
  }
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(buf_LENGTH == ::std::distance(t.begin(), t.end()));
}

#import c.stringn
auto tests::unit::c::buffer::Muting::test_constructor_stringn() -> void {
  char buf[] = "something";
  auto const buf_LENGTH = sizeof (buf)-1;
  ::c::stringn sn(buf);
  Subject t(sn); // <------------- test this
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(buf_LENGTH == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  for (unsigned i(0), e(t.size()); e != i; ++i) {
    CPPUNIT_ASSERT(t[i] == buf[i]);
  }
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(buf_LENGTH == ::std::distance(t.begin(), t.end()));
}

#import std.pair
auto tests::unit::c::buffer::Muting::test_constructor_pair_size_first() -> void {
  ::std::pair<::std::size_t, char *> p(LENGTH, pc); // <------------------ char *
  Subject t(p); // <------------- test this
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(LENGTH == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(pc == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(LENGTH == ::std::distance(t.begin(), t.end()));
}

auto tests::unit::c::buffer::Muting::test_constructor_pair_size_second() -> void {
  ::std::pair<char *, ::std::size_t> p(pc, LENGTH); // <------------------ char *
  Subject t(p); // <------------- test this
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(LENGTH == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(pc == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(LENGTH == ::std::distance(t.begin(), t.end()));
}

#import std.tuple
auto tests::unit::c::buffer::Muting::test_constructor_tuple_size_first() -> void {
  ::std::tuple<::std::size_t, char *> u(LENGTH, pc); // <--------------- char *
  Subject t(u); // <------------- test this
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(LENGTH == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(pc == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(LENGTH == ::std::distance(t.begin(), t.end()));
}

auto tests::unit::c::buffer::Muting::test_constructor_tuple_size_second() -> void {
  ::std::tuple<char *, ::std::size_t> u(pc, LENGTH); // <--------------- char *
  Subject t(u); // <------------- test this
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(LENGTH == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(pc == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(LENGTH == ::std::distance(t.begin(), t.end()));
}

#import std.array
#import std.copy
auto tests::unit::c::buffer::Muting::test_constructor_array() -> void {
  ::std::array<char, LENGTH> a;
  // prepare for & copy in the nullptr at the end of pc
  ::std::copy(pc, pc+LENGTH+1, a.begin());
  Subject t(a); // <------------- test this
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(LENGTH == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  for (unsigned i(0), e(t.size()); e != i; ++i) {
    CPPUNIT_ASSERT(t[i] == a[i]);
  }
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(LENGTH == ::std::distance(t.begin(), t.end()));
}

#import std.copy
#import std.vector
auto tests::unit::c::buffer::Muting::test_constructor_vector() -> void {
  // template<typename ALLOC> [[implicit]] basic_buffer(::std::vector<CHAR, ALLOC> const &);
  ::std::vector<char> v;
  v.resize(LENGTH);
  ::std::copy(pc, pc+LENGTH, v.begin());
  Subject t(v); // <------------- test this
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(LENGTH == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  for (unsigned i(0), e(t.size()); e != i; ++i) {
    CPPUNIT_ASSERT(t[i] == v[i]);
  }
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(LENGTH == ::std::distance(t.begin(), t.end()));
}

#import std.max
#import std.min
auto tests::unit::c::buffer::Muting::test_iteration() -> void {
  ::c::basic_buffer<char> m(aNc);
  ::c::basic_buffer<char> c(aNc);
  CPPUNIT_ASSERT(m.size() == c.size());
  CPPUNIT_ASSERT(!m.empty());
  CPPUNIT_ASSERT(0 != m.size());
  using iterator = ::c::basic_buffer<char>::iterator; // <------------- test this
  for (iterator mi(m.begin()), me(m.end()), ci(c.begin()), ce(c.end()); me != mi && ce != ci; mi++, ci++) {
    char mvalue(*mi);
    char cvalue(*ci);
    CPPUNIT_ASSERT(mvalue == cvalue);
  }
}

#import rigging.unit.suite.Stream
#import rigging.unit.suite.call
#import rigging.unit.suite.add
auto tests::unit::c::buffer::Muting::suite() -> cppunit::Test * {
  using namespace ::rigging::unit::suite;
  Stream series("muting");
  series << call("constructor_default", &Muting::test_constructor_default)
         << call("constructor_manifest_array", &Muting::test_constructor_manifest_array)
         << call("constructor_manifest_array_smaller", &Muting::test_constructor_manifest_array_smaller)
         << call("constructor_manifest_array_too_big", &Muting::test_constructor_manifest_array_too_big)
         << call("constructor_pointer", &Muting::test_constructor_pointer)
         << call("constructor_stringz", &Muting::test_constructor_stringz)
         << call("constructor_stringn", &Muting::test_constructor_stringn)
         << call("constructor_pair_size_first", &Muting::test_constructor_pair_size_first)
         << call("constructor_pair_size_second", &Muting::test_constructor_pair_size_second)
         << call("constructor_tuple_size_first", &Muting::test_constructor_tuple_size_first)
         << call("constructor_tuple_size_second", &Muting::test_constructor_tuple_size_second)
         << call("constructor_array", &Muting::test_constructor_array)
         << call("constructor_vector", &Muting::test_constructor_vector)
         << call("iteration", &Muting::test_iteration)
    ;
  return series.release();
}
#endiv

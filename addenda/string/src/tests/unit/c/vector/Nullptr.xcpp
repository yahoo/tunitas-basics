// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace tests::unit::c::vector {
  template<typename VECTOR> class Nullptr;
}
#divert </fpp>
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import c.basic_vector
template<typename VECTOR> class tests::unit::c::vector::Nullptr : public cppunit::test::Fixture {
public: 
  auto test_default_constructor() -> void;
  auto test_copy_constructor_from_default() -> void;
  auto test_construction_from_size_and_pointer() -> void;
  auto test_copy_constructor_from_full() -> void;
  auto test_constructor_from_const_manifest_array() -> void;
  auto test_constructor_from_nonconst_manifest_array() -> void;
  auto test_conversion_from_pair_muting_size_first() -> void;
  auto test_conversion_from_pair_muting_size_second() -> void;
  auto test_conversion_from_pair_consty_size_first() -> void;
  auto test_conversion_from_pair_consty_size_second() -> void;
  auto test_conversion_from_tuple_muting_size_first() -> void;
  auto test_conversion_from_tuple_muting_size_second() -> void;
  auto test_conversion_from_tuple_consty_size_first() -> void;
  auto test_conversion_from_tuple_consty_size_second() -> void;
  auto test_conversion_from_vector_muting() -> void;
  auto test_conversion_from_vector_consty() -> void;
  auto test_const_to_const_conversion_constructor() -> void;
  auto test_nonconst_to_const_conversion_constructor() -> void;

  static auto suite() -> cppunit::Test *;

  using Subject = ::c::basic_vector<char const>;
  using Char = char const; // <â€” we're in the "consty" tester
private:
  static constexpr auto const nullptr_dammit = (typename Subject::const_data_type)(nullptr);
};
#endiv
#divert <tpp>
#import std.cerr
#import std.invalid_argument

template<typename VECTOR> auto tests::unit::c::vector::Nullptr<VECTOR>::test_default_constructor() -> void {
  Subject t;
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

template<typename VECTOR> auto tests::unit::c::vector::Nullptr<VECTOR>::test_copy_constructor_from_default() -> void {
  Subject original;
  Subject t(original);
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

template<typename VECTOR> auto tests::unit::c::vector::Nullptr<VECTOR>::test_construction_from_size_and_pointer() -> void {
  Subject t(0, nullptr); // <--------------------- test this
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

template<typename VECTOR> auto tests::unit::c::vector::Nullptr<VECTOR>::test_copy_constructor_from_full() -> void {
  Subject original(0, nullptr); // FIXME - this does not test this constructor
  Subject t(original);
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

template<typename VECTOR> auto tests::unit::c::vector::Nullptr<VECTOR>::test_constructor_from_const_manifest_array() -> void {
  Subject t(0, nullptr_dammit); // FIXME - this does not test that constructor
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

template<typename VECTOR> auto tests::unit::c::vector::Nullptr<VECTOR>::test_constructor_from_nonconst_manifest_array() -> void {
  // template<::std::size_t N> basic_vector(typename ancestor::value_type const (&)[N], ::std::size_t = N);
  Subject t(0, nullptr_dammit); // FIXME - this does not test that constructor
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

template<typename VECTOR> auto tests::unit::c::vector::Nullptr<VECTOR>::test_conversion_from_pair_muting_size_first() -> void {
  ::std::pair<::std::size_t, char const *const *> p(0, nullptr);
  Subject t(p); // <--------------------- test this
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

template<typename VECTOR> auto tests::unit::c::vector::Nullptr<VECTOR>::test_conversion_from_pair_muting_size_second() -> void {
  ::std::pair<char const *const *, ::std::size_t> p(nullptr, 0);
  Subject t(p); // <--------------------- test this
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

template<typename VECTOR> auto tests::unit::c::vector::Nullptr<VECTOR>::test_conversion_from_pair_consty_size_first() -> void {
  ::std::pair<::std::size_t, char const *const *> p(0, nullptr);
  Subject t(p); // <--------------------- test this
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

template<typename VECTOR> auto tests::unit::c::vector::Nullptr<VECTOR>::test_conversion_from_pair_consty_size_second() -> void {
  ::std::pair<char const *const *, ::std::size_t> p(nullptr, 0);
  Subject t(p); // <--------------------- test this
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

template<typename VECTOR> auto tests::unit::c::vector::Nullptr<VECTOR>::test_conversion_from_tuple_muting_size_first() -> void {
  ::std::tuple<::std::size_t, char const *const *> u(0, nullptr);
  Subject t(u); // <--------------------- test this
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

template<typename VECTOR> auto tests::unit::c::vector::Nullptr<VECTOR>::test_conversion_from_tuple_muting_size_second() -> void {
  ::std::tuple<char const *const *, ::std::size_t> u(nullptr, 0);
  Subject t(u); // <--------------------- test this
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

template<typename VECTOR> auto tests::unit::c::vector::Nullptr<VECTOR>::test_conversion_from_tuple_consty_size_first() -> void {
  ::std::tuple<::std::size_t, char const *const *> u(0, nullptr);
  Subject t(u); // <--------------------- test this
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

template<typename VECTOR> auto tests::unit::c::vector::Nullptr<VECTOR>::test_conversion_from_tuple_consty_size_second() -> void {
  ::std::tuple<char const *const *, ::std::size_t> u(nullptr, 0);
  Subject t(u); // <--------------------- test this
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

template<typename VECTOR> auto tests::unit::c::vector::Nullptr<VECTOR>::test_conversion_from_vector_muting() -> void {
  ::std::vector<Char *> v;
  Subject t(v); // <--------------------- test this
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

template<typename VECTOR> auto tests::unit::c::vector::Nullptr<VECTOR>::test_conversion_from_vector_consty() -> void {
  // template<typename ALLOC> /*implicit*/ basic_vector(::std::vector<CHAR const *, ALLOC> const &);
  ::std::vector<Char *> v;
  Subject t(v);
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

template<typename VECTOR> auto tests::unit::c::vector::Nullptr<VECTOR>::test_const_to_const_conversion_constructor() -> void {
  // /*implicit*/ basic_vector(basic_vector<CHAR> const &);
  ::c::basic_vector<char const> a(0, nullptr);
  Subject t(a); // <--------------------- test this
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

template<typename VECTOR> auto tests::unit::c::vector::Nullptr<VECTOR>::test_nonconst_to_const_conversion_constructor() -> void {
  // /*implicit*/ basic_vector(basic_vector<CHAR> const &);
  ::c::basic_vector<char> a(0, nullptr);
  Subject t(a);
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

#import cppunit.test.Caller
#import cppunit.test.Suite
#import rigging.unit.suite.Stream
#import rigging.unit.suite.call
template<typename VECTOR> auto tests::unit::c::vector::Nullptr<VECTOR>::suite() -> cppunit::Test * {
  using namespace ::rigging::unit::suite;
  Stream series("basic_vector<char const>");
  series << call("default_constructor", &Nullptr::test_default_constructor)
         << call("copy_constructor_from_default", &Nullptr::test_copy_constructor_from_default)
         << call("construction_from_size_and_pointer", &Nullptr::test_construction_from_size_and_pointer)
         << call("copy_constructor_from_full", &Nullptr::test_copy_constructor_from_full)
         << call("constructor_from_const_manifest_array", &Nullptr::test_constructor_from_const_manifest_array)
         << call("constructor_from_nonconst_manifest_array", &Nullptr::test_constructor_from_nonconst_manifest_array)
         << call("conversion_from_pair_muting_size_first", &Nullptr::test_conversion_from_pair_muting_size_first)
         << call("conversion_from_pair_muting_size_second", &Nullptr::test_conversion_from_pair_muting_size_second)
         << call("conversion_from_pair_consty_size_first", &Nullptr::test_conversion_from_pair_consty_size_first)
         << call("conversion_from_pair_consty_size_second", &Nullptr::test_conversion_from_pair_consty_size_second)
         << call("conversion_from_tuple_muting_size_first", &Nullptr::test_conversion_from_tuple_muting_size_first)
         << call("conversion_from_tuple_muting_size_second", &Nullptr::test_conversion_from_tuple_muting_size_second)
         << call("conversion_from_tuple_consty_size_first", &Nullptr::test_conversion_from_tuple_consty_size_first)
         << call("conversion_from_tuple_consty_size_second", &Nullptr::test_conversion_from_tuple_consty_size_second)
         << call("conversion_from_vector_muting", &Nullptr::test_conversion_from_vector_muting)
         << call("conversion_from_vector_consty", &Nullptr::test_conversion_from_vector_consty)
         << call("const_to_const_conversion_constructor", &Nullptr::test_const_to_const_conversion_constructor)
         << call("nonconst_to_const_conversion_constructor", &Nullptr::test_nonconst_to_const_conversion_constructor)
    ;
  return series.release();
}
#endiv

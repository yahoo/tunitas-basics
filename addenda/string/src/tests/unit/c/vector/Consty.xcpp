// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace tests::unit::c::vector {
  class Consty;
}
#divert </fpp>
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import tests.unit.c.vector.Palette
#import c.basic_vector

class tests::unit::c::vector::Consty : public cppunit::test::Fixture, Palette { 
public: 
  // unify the MI obligation of Fixture into Palette
  auto setUp() -> void;
  auto tearDown() -> void;

  auto test_default_constructor() -> void;
  auto test_copy_constructor_from_default() -> void;
  auto test_construction_from_size_and_pointer() -> void;
  auto test_copy_constructor_from_full() -> void;
  auto test_constructor_from_const_manifest_array() -> void;
  auto test_constructor_from_nonconst_manifest_array() -> void;
  auto test_constructor_from_const_manifest_array_with_size_smaller() -> void;
  auto test_constructor_from_const_manifest_array_with_size_exact() -> void;
  auto test_constructor_from_const_manifest_array_with_size_bigger() -> void;
  auto test_conversion_from_pair_muting_size_first() -> void;
  auto test_conversion_from_pair_muting_size_second() -> void;
  auto test_conversion_from_pair_consty_size_first() -> void;
  auto test_conversion_from_pair_consty_size_second() -> void;
  auto test_conversion_from_tuple_muting_size_first() -> void;
  auto test_conversion_from_tuple_muting_size_second() -> void;
  auto test_conversion_from_tuple_consty_size_first() -> void;
  auto test_conversion_from_tuple_consty_size_second() -> void;
  auto test_conversion_from_vector_muting() -> void;
  auto test_conversion_from_vector_consty() -> void;
  auto test_const_to_const_conversion_constructor() -> void;
  auto test_nonconst_to_const_conversion_constructor() -> void;
  auto test_iteration() -> void;

  static auto suite() -> cppunit::Test *;

  using Subject = ::c::basic_vector<char const>;
  using Char = char const; // <â€” we're in the "consty" tester
};
#endiv
#divert <cpp>
auto tests::unit::c::vector::Consty::setUp() -> void {
  Palette::setUp();
}

auto tests::unit::c::vector::Consty::tearDown() -> void {
  Palette::tearDown();
}

auto tests::unit::c::vector::Consty::test_default_constructor() -> void {
  Subject t;
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

auto tests::unit::c::vector::Consty::test_copy_constructor_from_default() -> void {
  Subject original;
  Subject t(original);
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

auto tests::unit::c::vector::Consty::test_construction_from_size_and_pointer() -> void {
  Subject t(SIZE, pcpcc); // <--------------------- test this
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(SIZE == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(pcpcc == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(SIZE == ::std::distance(t.begin(), t.end()));
}

auto tests::unit::c::vector::Consty::test_copy_constructor_from_full() -> void {
  Subject original(aNcpcc);
  generic_testification(original);

  Subject t(original);
  generic_testification(t);
}

auto tests::unit::c::vector::Consty::test_constructor_from_const_manifest_array() -> void {
  // template<::std::size_t N> basic_vector(typename ancestor::value_type const (&vector)[N], ::std::size_T = N);
  ::std::size_t const storage = sizeof (aNcpcc)/sizeof (aNcpcc[0]);
  CPPUNIT_ASSERT(STORAGE == storage);
  Subject t(aNcpcc);
  generic_testification(t);
  CPPUNIT_ASSERT(SIZE == t.size());
  generic_testification(t);
  CPPUNIT_ASSERT(aNcpcc == t.data());
}

auto tests::unit::c::vector::Consty::test_constructor_from_nonconst_manifest_array() -> void {
  // template<::std::size_t N> basic_vector(typename ancestor::value_type const (&)[N], ::std::size_t = N);
  //
  // but we're going to give it a nonconst array to cast into constness
  ::std::size_t const storage = sizeof (aNpc)/sizeof (aNpc[0]);
  CPPUNIT_ASSERT(STORAGE == storage);
  Subject t(aNpc);
  generic_testification(t);
  CPPUNIT_ASSERT(SIZE == t.size());
  generic_testification(t);
  CPPUNIT_ASSERT(aNpc == t.data());
}


#import std.begin
#import std.end
#import std.copy
auto tests::unit::c::vector::Consty::test_constructor_from_const_manifest_array_with_size_smaller() -> void {
  char const *ensmallen[sizeof (aNcpcc)/sizeof (aNcpcc[0])];
  ::std::copy(::std::begin(aNcpcc), ::std::end(aNcpcc), &ensmallen[0]);
  ::std::size_t ensmallen_size = 1;
  ensmallen[ensmallen_size] = nullptr;
  Subject t(ensmallen, ensmallen_size); // <--------------------- test this
  // Can't use generic_testification(...) because it assumes SIZE == t.size()
  CPPUNIT_ASSERT(ensmallen_size == t.size());
  CPPUNIT_ASSERT(ensmallen == t.data());
}

auto tests::unit::c::vector::Consty::test_constructor_from_const_manifest_array_with_size_exact() -> void {
  {
    Subject t(aNcpcc); // <--------------------- test this
    generic_testification(t);
    CPPUNIT_ASSERT(aNcpcc == t.data());
  } {
    Subject t(aNcpcc, SIZE); // <--------------------- test this
    generic_testification(t);
    CPPUNIT_ASSERT(aNcpcc == t.data());
  }
}

#import std.length_error
#import std.invalid_argument
#import std.is_same
auto tests::unit::c::vector::Consty::test_constructor_from_const_manifest_array_with_size_bigger() -> void {
  try {
    Subject t(aNcpcc, WAY_TOO_BIG); // <--------------------- test this
    CPPUNIT_ASSERT(false);
  } catch (::std::length_error const &e) {
    // The argc-specified size does not match the compiler-identified size N
    CPPUNIT_ASSERT(true);
  } catch (::std::invalid_argument const &e) {
    // The sentinel was missing (this is unexpected)
    CPPUNIT_ASSERT(false);
  }
}

auto tests::unit::c::vector::Consty::test_conversion_from_pair_muting_size_first() -> void {
  ::std::pair<::std::size_t, char const *const *> p(SIZE, pcpcc);
  Subject t(p); // <--------------------- test this
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(SIZE == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(pcpcc == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(SIZE == ::std::distance(t.begin(), t.end()));
}

auto tests::unit::c::vector::Consty::test_conversion_from_pair_muting_size_second() -> void {
  ::std::pair<char const *const *, ::std::size_t> p(pcpcc, SIZE);
  Subject t(p); // <--------------------- test this
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(SIZE == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(pcpcc == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(SIZE == ::std::distance(t.begin(), t.end()));
}

auto tests::unit::c::vector::Consty::test_conversion_from_pair_consty_size_first() -> void {
  ::std::pair<::std::size_t, char const *const *> p(SIZE, pcpcc);
  Subject t(p); // <--------------------- test this
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(SIZE == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(pcpcc == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(SIZE == ::std::distance(t.begin(), t.end()));
}

auto tests::unit::c::vector::Consty::test_conversion_from_pair_consty_size_second() -> void {
  ::std::pair<char const *const *, ::std::size_t> p(pcpcc, SIZE);
  Subject t(p); // <--------------------- test this
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(SIZE == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(pcpcc == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(SIZE == ::std::distance(t.begin(), t.end()));
}

auto tests::unit::c::vector::Consty::test_conversion_from_tuple_muting_size_first() -> void {
  ::std::tuple<::std::size_t, char const *const *> u(SIZE, pcpcc);
  Subject t(u); // <--------------------- test this
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(SIZE == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(pcpcc == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(SIZE == ::std::distance(t.begin(), t.end()));
}

auto tests::unit::c::vector::Consty::test_conversion_from_tuple_muting_size_second() -> void {
  ::std::tuple<char const *const *, ::std::size_t> u(pcpcc, SIZE);
  Subject t(u); // <--------------------- test this
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(SIZE == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(pcpcc == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(SIZE == ::std::distance(t.begin(), t.end()));
}

auto tests::unit::c::vector::Consty::test_conversion_from_tuple_consty_size_first() -> void {
  ::std::tuple<::std::size_t, char const *const *> u(SIZE, pcpcc);
  Subject t(u); // <--------------------- test this
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(SIZE == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(pcpcc == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(SIZE == ::std::distance(t.begin(), t.end()));
}

auto tests::unit::c::vector::Consty::test_conversion_from_tuple_consty_size_second() -> void {
  ::std::tuple<char const *const *, ::std::size_t> u(pcpcc, SIZE);
  Subject t(u); // <--------------------- test this
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(SIZE == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(pcpcc == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(SIZE == ::std::distance(t.begin(), t.end()));
}

auto tests::unit::c::vector::Consty::test_conversion_from_vector_muting() -> void {
  ::std::vector<Char *> v;
  // prepare for & copy in the nullptr at the end of pcpcc
  v.resize(STORAGE);
  ::std::copy(pcpcc, pcpcc+STORAGE, v.begin());
  Subject t(v); // <--------------------- test this
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(SIZE == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  for (unsigned i(0), e(t.size()); e != i; ++i) {
    CPPUNIT_ASSERT(t[i] == v[i]);
  }
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(SIZE == ::std::distance(t.begin(), t.end()));
}

auto tests::unit::c::vector::Consty::test_conversion_from_vector_consty() -> void {
  // template<typename ALLOC> [[implicit]] basic_vector(::std::vector<CHAR const *, ALLOC> const &);
  ::std::vector<Char *> v;
  // prepare for & copy in the nullptr at the end of pcpcc
  v.resize(STORAGE);
  ::std::copy(pcpcc, pcpcc+STORAGE, v.begin());
  Subject t(v);

  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(SIZE == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  for (unsigned i(0), e(t.size()); e != i; ++i) {
    CPPUNIT_ASSERT(t[i] == v[i]);
  }
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(SIZE == ::std::distance(t.begin(), t.end()));
}

auto tests::unit::c::vector::Consty::test_const_to_const_conversion_constructor() -> void {
  // [[implicit]] basic_vector(basic_vector<CHAR> const &);
  ::c::basic_vector<char const> a(aNcpcc);
  generic_testification(a);
  Subject t(a); // <--------------------- test this
  generic_testification(t);
  for (unsigned i(0), e(t.size()); e != i; ++i) {
    CPPUNIT_ASSERT(t[i] == a[i]);
  }
}

auto tests::unit::c::vector::Consty::test_nonconst_to_const_conversion_constructor() -> void {
  // [[implicit]] basic_vector(basic_vector<CHAR> const &);
  ::c::basic_vector<char> a(aNpc);
  generic_testification(a);

  Subject t(a);
  generic_testification(t);

  for (unsigned i(0), e(t.size()); e != i; ++i) {
    CPPUNIT_ASSERT(t[i] == a[i]);
  }
}

auto tests::unit::c::vector::Consty::test_iteration() -> void {
  ::c::basic_vector<char>       m(aNpc); // <------ aNpc not aNcpcc
  ::c::basic_vector<char const> c(aNpc); // <------ same data source, but in the "consty" form so we can say *mi == *ci
  CPPUNIT_ASSERT(m.size() == c.size());
  CPPUNIT_ASSERT(!m.empty());
  CPPUNIT_ASSERT(0 != m.size());
  using iterator = ::c::basic_vector<char const>::iterator;
  for (iterator mi(m.begin()), me(m.end()), ci(c.begin()), ce(c.end()); me != mi && ce != ci; mi++, ci++) {
    CPPUNIT_ASSERT(*mi == *ci);
    ::std::string mvalue(*mi);
    ::std::string cvalue(*ci);
    CPPUNIT_ASSERT(mvalue == cvalue);
    CPPUNIT_ASSERT(!mvalue.empty());
    CPPUNIT_ASSERT(0 != mvalue.size());
    ::std::clog << "mvalue=" << mvalue << " cvalue=" << cvalue << '\n';
  }
}

#import c.check
#import cppunit.test.Caller
#import cppunit.test.Suite
#import rigging.unit.suite.Stream
#import rigging.unit.suite.call
auto tests::unit::c::vector::Consty::suite() -> cppunit::Test * {
  using namespace ::rigging::unit::suite;
  Stream series("basic_vector<char const>");
  series << call("default_constructor", &Consty::test_default_constructor)
         << call("copy_constructor_from_default", &Consty::test_copy_constructor_from_default)
         << call("construction_from_size_and_pointer", &Consty::test_construction_from_size_and_pointer)
         << call("copy_constructor_from_full", &Consty::test_copy_constructor_from_full)
         << call("constructor_from_const_manifest_array", &Consty::test_constructor_from_const_manifest_array)
         << call("constructor_from_nonconst_manifest_array", &Consty::test_constructor_from_nonconst_manifest_array)
         << call("constructor_from_const_manifest_array_with_size_smaller", &Consty::test_constructor_from_const_manifest_array_with_size_smaller)
         << call("constructor_from_const_manifest_array_with_size_exact", &Consty::test_constructor_from_const_manifest_array_with_size_exact)
         << call("constructor_from_const_manifest_array_with_size_bigger", &Consty::test_constructor_from_const_manifest_array_with_size_bigger)
         << call("conversion_from_pair_muting_size_first", &Consty::test_conversion_from_pair_muting_size_first)
         << call("conversion_from_pair_muting_size_second", &Consty::test_conversion_from_pair_muting_size_second)
         << call("conversion_from_pair_consty_size_first", &Consty::test_conversion_from_pair_consty_size_first)
         << call("conversion_from_pair_consty_size_second", &Consty::test_conversion_from_pair_consty_size_second)
         << call("conversion_from_tuple_muting_size_first", &Consty::test_conversion_from_tuple_muting_size_first)
         << call("conversion_from_tuple_muting_size_second", &Consty::test_conversion_from_tuple_muting_size_second)
         << call("conversion_from_tuple_consty_size_first", &Consty::test_conversion_from_tuple_consty_size_first)
         << call("conversion_from_tuple_consty_size_second", &Consty::test_conversion_from_tuple_consty_size_second)
         << call("conversion_from_vector_muting", &Consty::test_conversion_from_vector_muting)
         << call("conversion_from_vector_consty", &Consty::test_conversion_from_vector_consty)
         << call("const_to_const_conversion_constructor", &Consty::test_const_to_const_conversion_constructor)
         << call("nonconst_to_const_conversion_constructor", &Consty::test_nonconst_to_const_conversion_constructor)
         << call("iteration", &Consty::test_iteration)
    ;
  return series.release();
}
#divert </cpp>

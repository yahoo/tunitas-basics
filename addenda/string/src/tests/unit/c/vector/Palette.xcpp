// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace tests::unit::c::vector {
  //
  // A palette of data types for vector testing.
  //
  // FIXME cut & paste: "exactly" like tests::unit::c::argv::Palette except that STORAGE == SIZE herein.
  //
  class Palette;
}
#endiv
#divert <hpp>
#import std.size_t
class tests::unit::c::vector::Palette { 
protected: 
  Palette();
  virtual ~Palette() = default;
  Palette(Palette const &) = delete;
  auto operator=(Palette const &) -> Palette & = delete;
public:
  // the MI unified in the descendant
  virtual auto setUp() -> void;
  virtual auto tearDown() -> void;

  // An "vector" is a character pointer vector WITHOUT a trailing nullptr sentinel
  // size() returns SIZE
  static constexpr ::std::size_t const SIZE = 10;

  // But storage must be allocated just for the SIZE, and no more
  static constexpr ::std::size_t const STORAGE = SIZE;

  // with a runtime-defined size
  char **ppc;                       // pointer to pointer to char
  char const *const *pcpcc;         // pointer to const_pointer to const_char
  // with a compiler-visible size
  char *aNpc[STORAGE];               // array-of-size-N of pointer to char
  char const *const aNcpcc[STORAGE]; // array-of-size-N of const-pointer to const_char

  // For abuse & breakage
  static constexpr ::std::size_t const WAY_TOO_BIG = 5+SIZE;
private:
  template<typename POINTER_POINTER> auto setUp(POINTER_POINTER &lhs) -> void;
  template<::std::size_t N, typename POINTER> auto setUp(POINTER (&lhs)[N]) -> void; 
  template<::std::size_t N, typename CHAR> auto setUp(CHAR const *const (&const_crust_to_be_cracked_away_oh_the_humanity)[N]) -> void;
  auto setUpStorage(::std::size_t N, char **) -> void;
  template<typename POINTER_POINTER> auto tearDown(POINTER_POINTER &lhs) -> void;
  template<::std::size_t N, typename POINTER> auto tearDown(POINTER (&lhs)[N]) -> void;
  auto gensym(unsigned i) -> char *;
public:
  template<typename ARGV> static auto generic_testification(ARGV &subject) -> void;
};
#endiv
#divert <tpp>
template<typename POINTER_POINTER> auto tests::unit::c::vector::Palette::tearDown(POINTER_POINTER &lhs) -> void {
  // no explicit mention of the type POINTER_POINTER in the body
  for (unsigned i(0), e(SIZE); e != i; ++i) {
    delete lhs[i];
    // pesky (sloppy?): we don't zero out lhs[i] because CHAR may be consty enough to prevent the use of operator delete
  }
  delete[] lhs;
  lhs = nullptr;
}

template<::std::size_t N, typename POINTER> auto tests::unit::c::vector::Palette::tearDown(POINTER (&lhs)[N]) -> void {
  for (unsigned i(0), e(SIZE); e != i; ++i) {
    delete lhs[i];
    // pesky: we don't zero out lhs[i]. Ibidem.
  }
}

#import std.distance
#import cppunit.test.Assert // all the assert macros
template<typename ARGV> auto tests::unit::c::vector::Palette::generic_testification(ARGV &specimen) -> void {
  CPPUNIT_ASSERT(!specimen.empty());
  CPPUNIT_ASSERT(0 != specimen.size());
  CPPUNIT_ASSERT(SIZE == specimen.size());
  CPPUNIT_ASSERT(nullptr != specimen.data());
  {
    unsigned count = 0;
    for (unsigned i(0), e(specimen.size()); e != i; ++i) {
      CPPUNIT_ASSERT(nullptr != specimen[i]);
      count++;
    }
    CPPUNIT_ASSERT(SIZE == count);
  }
  CPPUNIT_ASSERT(specimen.begin() != specimen.end());
  CPPUNIT_ASSERT(SIZE == ::std::distance(specimen.begin(), specimen.end()));
  {
    unsigned count = 0;
    for (typename ARGV::const_iterator i(specimen.begin()), e(specimen.end()); e != i; ++i) {
      CPPUNIT_ASSERT(nullptr != *i);
      count++;
    }
    CPPUNIT_ASSERT(SIZE == count);
  } {
    unsigned count = 0;
    for (typename ARGV::iterator i(specimen.begin()), e(specimen.end()); e != i; ++i) {
      CPPUNIT_ASSERT(nullptr != *i);
      count++;
    }
    CPPUNIT_ASSERT(SIZE == count);
  } {
    unsigned count = 0;
    for (auto item : specimen) {
      CPPUNIT_ASSERT(nullptr != item);
      count++;
    }
    CPPUNIT_ASSERT(SIZE == count);
  }
}
#endiv
#divert <cpp>
constexpr ::std::size_t const tests::unit::c::vector::Palette::SIZE;

#import cppunit.test.Assert // all the assert macros
#import std.ostringstream
#import std.string
#import std.generate_n
#import std.copy

tests::unit::c::vector::Palette::Palette()
  : ppc()
  , pcpcc()
  , aNpc()
  , aNcpcc{} {
  // allow setUp to do all initialization (even the const stuff)
}

auto tests::unit::c::vector::Palette::setUp() -> void {
  setUp(ppc);
  setUp(pcpcc);
  setUp(aNpc);
  setUp(aNcpcc);
}

#import std.unique_ptr
#import std.generate_n
template<typename POINTER_POINTER> auto tests::unit::c::vector::Palette::setUp(POINTER_POINTER &lhs) -> void {
  // no explicit mention of the type POINTER_POINTER here in the body
  ::std::unique_ptr<char *[]> rhs(new char*[STORAGE]);
  setUpStorage(STORAGE, rhs.get());
  // the implicit cast in the assignment from 'char **' to POINTER_POINTER must work
  lhs = rhs.release();
}

template<::std::size_t N, typename POINTER> auto tests::unit::c::vector::Palette::setUp(POINTER (&lhs)[N]) -> void {
  setUpStorage(N, lhs);
}

template<::std::size_t N, typename CHAR> auto tests::unit::c::vector::Palette::setUp(CHAR const *const (&const_crust_to_be_cracked_away_oh_the_humanity)[N]) -> void {
  char **lhs = (char **)(&const_crust_to_be_cracked_away_oh_the_humanity[0]);
  setUpStorage(N, lhs);
}

auto tests::unit::c::vector::Palette::setUpStorage(::std::size_t N, char **lhs) -> void {
  ::std::generate_n(lhs, N, [](){ return nullptr; });
  // Reminder: there is no nullptr sentinel at the "end" for basic_vector
  for (unsigned i(0), e(N); e != i; ++i) {
    lhs[i] = gensym(i);
  }
}

#import std.ostringstream
#import std.unique_ptr
#import std.copy
auto tests::unit::c::vector::Palette::gensym(unsigned i) -> char * {
    ::std::ostringstream buf;
    buf << "string #" << i;
    ::std::string s = buf.str();
    ::std::unique_ptr<char[]> c(new char[s.size()+1]);
    ::std::copy(s.begin(), s.end(), c.get());
    c[s.size()] = '\0';
    return c.release();
}

auto tests::unit::c::vector::Palette::tearDown() -> void {
  tearDown(aNcpcc);
  tearDown(aNpc);
  tearDown(pcpcc);
  tearDown(ppc);
}
#endiv


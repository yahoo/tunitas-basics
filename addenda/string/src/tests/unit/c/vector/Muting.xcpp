// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace tests::unit::c::vector {
  class Muting;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import tests.unit.c.vector.Palette
#import c.basic_vector

class tests::unit::c::vector::Muting : public cppunit::test::Fixture, Palette {
public:
  // unify the MI obligation of Fixture into Palette
  auto setUp() -> void;
  auto tearDown() -> void;

  auto test_default_constructor() -> void;
  auto test_constructor_by_size_and_pointer() -> void;
  auto test_constructor_from_manifest_array() -> void;
  auto test_constructor_by_implicit_array_from_manifest_array() -> void;
  auto test_constructor_by_implicit_array_from_implicit_array() -> void;
  auto test_constructor_from_const_manifest_array_with_size_smaller() -> void;
  auto test_constructor_from_const_manifest_array_with_size_exact() -> void;
  auto test_constructor_from_const_manifest_array_with_size_bigger() -> void; 
  auto test_conversion_from_pair_size_first() -> void;
  auto test_conversion_from_pair_size_second() -> void;
  auto test_conversion_from_tuple_size_first() -> void;
  auto test_conversion_from_tuple_size_second() -> void;
  auto test_conversion_from_vector() -> void;
  auto test_copy_constructor() -> void;
  auto test_iteration() -> void;
  auto test_for_loop() -> void;
  auto test_for_each() -> void;

  static auto suite() -> cppunit::Test *;

  using Subject = ::c::basic_vector<char>;
  using Char = char; // <â€” we're in the "muting" tester
};
#endiv
#divert <cpp>
#import std.back_inserter
auto tests::unit::c::vector::Muting::setUp() -> void {
  Palette::setUp();
}

auto tests::unit::c::vector::Muting::tearDown() -> void {
  Palette::tearDown();
}

auto tests::unit::c::vector::Muting::test_default_constructor() -> void {
  Subject t; // <--------------------- test this
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

auto tests::unit::c::vector::Muting::test_constructor_by_size_and_pointer() -> void {
  Subject t(SIZE, ppc); // <--------------------- test this (size precedes)
  generic_testification(t);
  CPPUNIT_ASSERT(ppc == t.data());
}

auto tests::unit::c::vector::Muting::test_constructor_from_manifest_array() -> void {
  {
    Subject t(aNpc);
    generic_testification(t);
    CPPUNIT_ASSERT(aNpc == t.data());
  } {
    Subject t(aNpc, SIZE);
    generic_testification(t);
    CPPUNIT_ASSERT(aNpc == t.data());
  }
}

#import std.begin
#import std.end
#import std.copy
auto tests::unit::c::vector::Muting::test_constructor_from_const_manifest_array_with_size_smaller() -> void {
  char *ensmallen[sizeof (aNpc)/sizeof (aNpc[0])];
  ::std::copy(::std::begin(aNpc), ::std::end(aNpc), &ensmallen[0]);
  ::std::size_t ensmallen_subsize = 1;
  ensmallen[ensmallen_subsize] = nullptr;
  Subject t(ensmallen, ensmallen_subsize); // <--------------------- test this
  // Can't use generic_testification(...) because it assumes SIZE == t.size()
  CPPUNIT_ASSERT(ensmallen_subsize == t.size());
  CPPUNIT_ASSERT(ensmallen == t.data());
}

auto tests::unit::c::vector::Muting::test_constructor_from_const_manifest_array_with_size_exact() -> void {
  Subject t(aNpc); // <--------------------- test this
  generic_testification(t);
  CPPUNIT_ASSERT(aNpc == t.data());
}

#import std.length_error
#import std.invalid_argument
#import std.is_same
auto tests::unit::c::vector::Muting::test_constructor_from_const_manifest_array_with_size_bigger() -> void {
  try {
    Subject t(aNpc, WAY_TOO_BIG); // <--------------------- test this
    CPPUNIT_ASSERT(false);
  } catch (::std::length_error const &e) {
    // The argc-specified size does not match the compiler-identified size N
    // If there is no checking in place, then how did a range exception get thrown?
    CPPUNIT_ASSERT(true);
  } catch (::std::invalid_argument const &e) {
    // The sentinel was missing (this is a surprise)
    CPPUNIT_ASSERT(false);
  }
}

auto tests::unit::c::vector::Muting::test_conversion_from_pair_size_first() -> void {
  // inline [[implicit]] basic_vector(::std::pair<::std::size_t, CHAR **> const &);
  ::std::pair<::std::size_t, char **> p(SIZE, ppc);
  Subject t(p); // <--------------------- test this
  generic_testification(t);
  CPPUNIT_ASSERT(ppc == t.data());
}

auto tests::unit::c::vector::Muting::test_conversion_from_pair_size_second() -> void {
  ::std::pair<char **, ::std::size_t> p(ppc, SIZE);
  Subject t(p); // <--------------------- test this
  generic_testification(t);
  CPPUNIT_ASSERT(ppc == t.data());
}

auto tests::unit::c::vector::Muting::test_conversion_from_tuple_size_first() -> void {
  // inline [[implicit]] basic_vector(::std::tuple<::std::size_t, CHAR **> const &);
  ::std::tuple<::std::size_t, char **> u(SIZE, ppc);
  Subject t(u); // <--------------------- test this
  generic_testification(t);
  CPPUNIT_ASSERT(ppc == t.data());
}

auto tests::unit::c::vector::Muting::test_conversion_from_tuple_size_second() -> void {
  ::std::tuple<char **, ::std::size_t> u(ppc, SIZE);
  Subject t(u); // <--------------------- test this
  generic_testification(t);
  CPPUNIT_ASSERT(ppc == t.data());
}

#import std.copy
#import std.vector
#import std.back_inserter
auto tests::unit::c::vector::Muting::test_conversion_from_vector() -> void {
  // template<typename ALLOC> inline [[implicit]] basic_vector(::std::vector<CHAR *, ALLOC> const &);
  ::std::vector<Char *> v;
  // prepare for & copy in the nullptr at the end of ppc
  v.reserve(STORAGE);
  ::std::copy(ppc, ppc+STORAGE, ::std::back_inserter(v));
  Subject t(v);
  generic_testification(t);
  for (unsigned i(0), e(t.size()); e != i; ++i) {
    CPPUNIT_ASSERT(t[i] == v[i]);
  }
}

auto tests::unit::c::vector::Muting::test_copy_constructor() -> void {
  // inline [[implicit]] basic_vector(basic_vector<CHAR> const &);
  ::c::basic_vector<Char> a(aNpc);
  Subject t(a);

  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(SIZE == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  for (unsigned i(0), e(t.size()); e != i; ++i) {
    CPPUNIT_ASSERT(t[i] == a[i]);
  }
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(SIZE == ::std::distance(t.begin(), t.end()));
}

auto tests::unit::c::vector::Muting::test_iteration() -> void {
  ::c::basic_vector<char> m(aNpc); // <-------------- one muting
  ::c::basic_vector<char const> c(aNpc); // <-------- one becomes consty
  CPPUNIT_ASSERT(m.size() == c.size());
  CPPUNIT_ASSERT(!m.empty());
  CPPUNIT_ASSERT(0 != m.size());
  using iterator = ::c::basic_vector<char const>::iterator;
  for (iterator mi(m.begin()), me(m.end()), ci(c.begin()), ce(c.end()); me != mi && ce != ci; mi++, ci++) {
    CPPUNIT_ASSERT(*mi == *ci);
    ::std::string mvalue(*mi);
    ::std::string cvalue(*ci);
    CPPUNIT_ASSERT(mvalue == cvalue);
    CPPUNIT_ASSERT(!mvalue.empty());
    CPPUNIT_ASSERT(0 != mvalue.size());
  }
}

#import std.string
#import std.ostringstream
auto tests::unit::c::vector::Muting::test_for_loop() -> void {
  Subject t(aNpc);
  CPPUNIT_ASSERT(SIZE == t.size());
  ::std::ostringstream buf;
  unsigned count = 0;
  for (auto item : t) {
    buf << item; // <---- use item in some way
    count++;
  }
  CPPUNIT_ASSERT(SIZE == count);
  // It's unclear what's in concatenation at this point
  ::std::string concatenation(buf.str());
  CPPUNIT_ASSERT(!concatenation.empty());
}

#import std.string
#import std.ostringstream
#import std.for_each
auto tests::unit::c::vector::Muting::test_for_each() -> void {
  Subject t(aNpc);
  CPPUNIT_ASSERT(SIZE == t.size());
  ::std::ostringstream buf;
  unsigned count = 0;
  ::std::for_each(t.begin(), t.end(), [&buf, &count](Subject::value_type item) {
      buf << item; // <---- use item in some way
      count++;
    });
  CPPUNIT_ASSERT(SIZE == count);
  // It's unclear what's in concatenation at this point
  ::std::string concatenation(buf.str());
  CPPUNIT_ASSERT(!concatenation.empty());
}

#import c.check
#import rigging.unit.suite.Stream
#import rigging.unit.suite.call
auto tests::unit::c::vector::Muting::suite() -> cppunit::Test * {
  using namespace ::rigging::unit::suite;
  Stream series("basic_vector<char>");
  series << call("default constructor", &Muting::test_default_constructor)
         << call("constructor by_size_and_pointer", &Muting::test_constructor_by_size_and_pointer) 
         << call("constructor from manifest array", &Muting::test_constructor_from_manifest_array)
         << call("constructor from manifest array, with smaller size", &Muting::test_constructor_from_const_manifest_array_with_size_smaller)
         << call("constructor from manifest array, with exact size", &Muting::test_constructor_from_const_manifest_array_with_size_exact)
         << call("constructor from manifest array, with size bigger", &Muting::test_constructor_from_const_manifest_array_with_size_bigger)
         << call("conversion from std::pair<size_t, ...>", &Muting::test_conversion_from_pair_size_first)
         << call("conversion from std::pair<..., size_t>", &Muting::test_conversion_from_pair_size_second)
         << call("conversion from std::tuple<size_t, ...>", &Muting::test_conversion_from_tuple_size_first)
         << call("conversion from std::tuple<..., size_t>", &Muting::test_conversion_from_tuple_size_second)
         << call("conversion from std::vector<char *>", &Muting::test_conversion_from_vector)
         << call("copy constructor", &Muting::test_copy_constructor)
         << call("iteration", &Muting::test_iteration)
         << call("for_loop", &Muting::test_for_loop)
         << call("for_each", &Muting::test_for_each)
    ;
  return series.release();
}
#divert </cpp>

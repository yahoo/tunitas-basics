// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace tests::unit::std {
  class Fixture;
}
#divert </fpp>
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::std::Fixture : public cppunit::test::Fixture { 
public:
  auto test_ostream_iterator_buffer() -> void;
  auto test_ostream_iterator_const_buffer() -> void;

  static auto suite() -> cppunit::Test *;
};
#divert </hpp>
#divert <cpp>
#import c.buffer
#import c.const_buffer
#import c.basic_buffer
#import std.ostream_iterator
#import std.ostringstream
#import std.string
auto tests::unit::std::Fixture::test_ostream_iterator_buffer() -> void {
  char raw[] = "apple banana cherry";
  ::c::buffer rhs(raw, sizeof (raw)-1);
  ::std::ostringstream sink;
  ::std::ostream_iterator<::c::buffer> osi(sink);
  osi = rhs;
  osi++;
  ++osi;
  *osi;
  //                        01234567890123456789
  ::std::string expected = "apple banana cherry";
  ::std::string actual = sink.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::std::Fixture::test_ostream_iterator_const_buffer() -> void {
  char const raw[] = "apple banana cherry";   // <---------- 'const'
  ::c::const_buffer rhs(raw, sizeof (raw)-1); // <---------- 'const'
  ::std::ostringstream sink;
  ::std::ostream_iterator<::c::const_buffer> osi(sink); // <-- 'const'
  osi = rhs;
  osi++;
  ++osi;
  *osi;
  //                        01234567890123456789
  ::std::string expected = "apple banana cherry";
  ::std::string actual = sink.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

#import rigging.unit.suite.Stream
#import rigging.unit.suite.add
#import rigging.unit.suite.call
auto tests::unit::std::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::unit::suite;
  Stream series("std");
  series << call("ostream_iterator<c::buffer>", &Fixture::test_ostream_iterator_buffer)
         << call("ostream_iterator<c::const_buffer>", &Fixture::test_ostream_iterator_const_buffer)
    ;
  return series.release();
}
#divert </cpp>

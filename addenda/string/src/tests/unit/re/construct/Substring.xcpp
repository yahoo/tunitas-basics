// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace tests::unit::re::construct {
  //
  // A descendant of std::string, which is suitable for OTHER
  // in the flexible constructors
  //     re::buffer::buffer(OTHER const &)
  //     re::string::string(OTHER const &)
  //
  // It isn't exactly std::string, but acts just like such.
  //    it is Stringlike 
  //    it is Bufferlike
  //
  class Substring;
}
// CANNOT --- need full type of Substring to enable::Stringy<Substring>
// CANNOT ---> #import re.construct.enable.Stringy
// CANNOT ---> namespace re::construct::enable {
// CANNOT --->   template<> struct Stringy<tests::unit::re::construct::Substring>;
// CANNOT ---> }
#endiv
#divert <hpp>
#import std.string
class tests::unit::re::construct::Substring : public std::string {
  using ancestor = std::string;
public:
  using ancestor::basic_string;
};

#import re.construct.enable.Buffery
#import re.construct.enable.Stringy
namespace re::construct::enable {
  template<> struct Buffery<tests::unit::re::construct::Substring>;
  template<> struct Stringy<tests::unit::re::construct::Substring>;
}

template<> struct re::construct::enable::Stringy<tests::unit::re::construct::Substring> : public std::true_type { };
template<> struct re::construct::enable::Buffery<tests::unit::re::construct::Substring> : public std::true_type { };
#endiv

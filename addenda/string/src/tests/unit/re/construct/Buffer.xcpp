// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
#import re.required.Bufferlike
namespace tests::unit::re::construct {
  // Because the concept is convenient.
  using ::re::required::Bufferlike;
  template<Bufferlike UNIFIER> class Buffer;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import re.buffer
namespace tests::unit::re {
  template<re::construct::Bufferlike UNIFIER> class construct::Buffer : public cppunit::test::Fixture {
  public:
    using Subject = ::re::buffer<UNIFIER>;

    auto test_constructor_default() -> void;
    auto test_constructor_convert_from_buffer() -> void;
    auto test_constructor_convert_from_const_buffer() -> void;
    auto test_constructor_convert_from_stringn() -> void;
    auto test_constructor_convert_from_const_stringn() -> void;
    auto test_constructor_convert_from_stringz() -> void;
    auto test_constructor_convert_from_const_stringz() -> void;
    auto test_constructor_convert_from_string() -> void;
    auto test_constructor_convert_from_string_view() -> void;
    auto test_constructor_convert_from_enabled_OTHER() -> void;
    auto test_constructor_copy() -> void;
    auto test_assignment_copy() -> void;
    auto test_constructor_move() -> void;
    auto test_assignment_move() -> void;
    auto test_swap() -> void;
    auto test_operator_const_buffer() -> void;
    auto test_operator_const_stringn() -> void;
    auto test_operator_string() -> void;
    auto test_operator_string_view() -> void;
    auto test_empty() -> void;
    auto test_size() -> void;
    auto test_iterator() -> void;
    auto test_const_iterator() -> void;
    auto test_begin_end() -> void;
    auto test_for_loop() -> void;
    auto test_front() -> void;
    auto test_back() -> void;
    auto test_data() -> void;
    auto test_operator_index() -> void;

    static auto suite() -> cppunit::Test *;
  };
}

#import c.buffer
#import c.stringn
namespace tests::unit::re::construct {
  // These are const-from-muting scenarios
  template<> auto Buffer<::c::buffer>::test_constructor_convert_from_const_buffer() -> void;
  template<> auto Buffer<::c::buffer>::test_constructor_convert_from_const_stringn() -> void;
  template<> auto Buffer<::c::buffer>::test_constructor_convert_from_const_stringz() -> void;
  template<> auto Buffer<::c::buffer>::test_constructor_convert_from_string() -> void;
  template<> auto Buffer<::c::buffer>::test_constructor_convert_from_string_view() -> void;
  template<> auto Buffer<::c::buffer>::test_constructor_convert_from_enabled_OTHER() -> void;
}
#endiv
#divert <tpp>
#import c.buffer
#import c.const_buffer
#import c.stringn
#import c.const_stringn
#import c.stringz
#import c.const_stringz
#import re.string
#import std.move
#import std.ostringstream
#import std.string
#import std.string_literals
#import std.string_view
#import tests.unit.re.construct.Substring

namespace tests::unit::re::construct {
  using namespace std::string_literals;

  template<Bufferlike UNIFIER> auto Buffer<UNIFIER>::test_constructor_default() -> void {
    Subject subject;
    CPPUNIT_ASSERT(subject.empty());
  }

  template<Bufferlike UNIFIER> auto Buffer<UNIFIER>::test_constructor_convert_from_buffer() -> void {
    char buf[] = "specimen";
    ::c::buffer specimen(buf);
    CPPUNIT_ASSERT(!specimen.empty());
    Subject subject(specimen); 
    CPPUNIT_ASSERT_EQUAL(specimen.empty(), subject.empty());
  }

  template<Bufferlike UNIFIER> auto Buffer<UNIFIER>::test_constructor_convert_from_const_buffer() -> void {
    char const buf[] = "specimen";
    ::c::const_buffer specimen(buf);
    CPPUNIT_ASSERT(!specimen.empty());
    Subject subject(specimen);
    CPPUNIT_ASSERT_EQUAL(specimen.empty(), subject.empty());
  }

  template<Bufferlike UNIFIER> auto Buffer<UNIFIER>::test_constructor_convert_from_stringn() -> void {
    char buf[] = "specimen";
    ::c::stringn specimen(buf);
    CPPUNIT_ASSERT(!specimen.empty());
    Subject subject(specimen); 
    CPPUNIT_ASSERT_EQUAL(specimen.empty(), subject.empty());
  }

  template<Bufferlike UNIFIER> auto Buffer<UNIFIER>::test_constructor_convert_from_const_stringn() -> void {
    char const buf[] = "specimen";
    ::c::const_stringn specimen(buf);
    CPPUNIT_ASSERT(!specimen.empty());
    Subject subject(specimen);
    CPPUNIT_ASSERT_EQUAL(specimen.empty(), subject.empty());
  }

  template<Bufferlike UNIFIER> auto Buffer<UNIFIER>::test_constructor_convert_from_stringz() -> void {
    char buf[] = "specimen";
    ::c::stringz specimen(buf);
    CPPUNIT_ASSERT(!specimen.empty());
    Subject subject(specimen); 
    CPPUNIT_ASSERT_EQUAL(specimen.empty(), subject.empty());
  }

  template<Bufferlike UNIFIER> auto Buffer<UNIFIER>::test_constructor_convert_from_const_stringz() -> void {
    char const buf[] = "specimen";
    ::c::const_stringz specimen(buf);
    CPPUNIT_ASSERT(!specimen.empty());
    Subject subject(specimen);
    CPPUNIT_ASSERT_EQUAL(specimen.empty(), subject.empty());
  }

  template<Bufferlike UNIFIER> auto Buffer<UNIFIER>::test_constructor_convert_from_string() -> void {
    {
      std::string specimen; // <-------------- empty
      CPPUNIT_ASSERT(specimen.empty());
      Subject subject(specimen);
      CPPUNIT_ASSERT_EQUAL(specimen.empty(), subject.empty());
    } {
      std::string specimen = "specimen";
      CPPUNIT_ASSERT(!specimen.empty());
      Subject subject(specimen); // <--------------------------------- test this
      CPPUNIT_ASSERT_EQUAL(specimen.empty(), subject.empty());
    }
  }

  template<Bufferlike UNIFIER> auto Buffer<UNIFIER>::test_constructor_convert_from_string_view() -> void {
    {
      std::string_view specimen; // <-------------- empty
      CPPUNIT_ASSERT(specimen.empty());
      Subject subject(specimen);
      CPPUNIT_ASSERT_EQUAL(specimen.empty(), subject.empty());
    } {
      std::string_view specimen = "specimen";
      CPPUNIT_ASSERT(!specimen.empty());
      Subject subject(specimen); // <--------------------------------- test this
      CPPUNIT_ASSERT_EQUAL(specimen.empty(), subject.empty());
    }
  }

  template<Bufferlike UNIFIER> auto Buffer<UNIFIER>::test_constructor_convert_from_enabled_OTHER() -> void {
    {
      Substring specimen; // <-------------- empty
      CPPUNIT_ASSERT(specimen.empty());
      Subject subject(specimen);
      CPPUNIT_ASSERT_EQUAL(specimen.empty(), subject.empty());
    } {
      Substring specimen = "specimen";
      CPPUNIT_ASSERT(!specimen.empty());
      Subject subject(specimen); // <--------------------------------- test this
      CPPUNIT_ASSERT_EQUAL(specimen.empty(), subject.empty());
    }
  }

  template<Bufferlike UNIFIER> auto Buffer<UNIFIER>::test_constructor_copy() -> void {
    std::vector<char> specimen{'s', 'p', 'e', 'c', 'i', 'm', 'e', 'n'};
    CPPUNIT_ASSERT(!specimen.empty());
    Subject subject1(specimen);
    CPPUNIT_ASSERT_EQUAL(specimen.empty(), subject1.empty());
    Subject subject2(subject1); // <--------------------------------- test this
    CPPUNIT_ASSERT_EQUAL(specimen.empty(), subject2.empty());
  }

  template<Bufferlike UNIFIER> auto Buffer<UNIFIER>::test_assignment_copy() -> void {
    std::vector<char> specimen{'s', 'p', 'e', 'c', 'i', 'm', 'e', 'n'};
    CPPUNIT_ASSERT(!specimen.empty());
    Subject subject1(specimen);
    CPPUNIT_ASSERT_EQUAL(specimen.empty(), subject1.empty());
    Subject subject2;
    subject2 = subject1; // <--------------------------------- test this
    CPPUNIT_ASSERT_EQUAL(specimen.empty(), subject2.empty());
  }

  template<Bufferlike UNIFIER> auto Buffer<UNIFIER>::test_constructor_move() -> void {
    std::vector<char> specimen{'s', 'p', 'e', 'c', 'i', 'm', 'e', 'n'};
    CPPUNIT_ASSERT(!specimen.empty());
    Subject subject1(std::move(specimen));
    CPPUNIT_ASSERT(specimen.empty() || !specimen.empty()); // this is an optional optimization
    CPPUNIT_ASSERT(!subject1.empty());
    Subject subject2(std::move(subject1)); // <--------------------------------- test this
    CPPUNIT_ASSERT(subject1.empty() || !subject1.empty()); // again, optional
    CPPUNIT_ASSERT(!subject2.empty());
  }

  template<Bufferlike UNIFIER> auto Buffer<UNIFIER>::test_assignment_move() -> void {
    std::vector<char> specimen{'s', 'p', 'e', 'c', 'i', 'm', 'e', 'n'};
    CPPUNIT_ASSERT(!specimen.empty());
    Subject subject1(std::move(specimen));
    CPPUNIT_ASSERT(specimen.empty() || !specimen.empty()); // this is an optional optimization
    CPPUNIT_ASSERT(!subject1.empty());
    Subject subject2;
    subject2 = std::move(subject1); // <--------------------------------- test this
    CPPUNIT_ASSERT(subject1.empty() || !subject1.empty()); // again, optional
    CPPUNIT_ASSERT(!subject2.empty());
  }

  template<Bufferlike UNIFIER> auto Buffer<UNIFIER>::test_swap() -> void {
    std::vector<char> specimen1{'a', 'p', 'p', 'l', 'e', };
    Subject subject1(specimen1);
    std::vector<char> specimen2{'b', 'a', 'n', 'a', 'n', 'a'};
    Subject subject2(specimen2);
    CPPUNIT_ASSERT_EQUAL("apple"s, std::string(specimen1.begin(), specimen1.end()));
    CPPUNIT_ASSERT_EQUAL("banana"s, std::string(specimen2.begin(), specimen2.end()));
    CPPUNIT_ASSERT_EQUAL("apple"s, (std::string) subject1);
    CPPUNIT_ASSERT_EQUAL("banana"s, (std::string) subject2);
    swap(subject1, subject2); // <---------------------------------- test this
    CPPUNIT_ASSERT_EQUAL("apple"s, (std::string) subject2); // <--------- two
    CPPUNIT_ASSERT_EQUAL("banana"s, (std::string) subject1); // <-------- one (they are swapped)
  }

  template<Bufferlike UNIFIER> auto Buffer<UNIFIER>::test_operator_const_buffer() -> void {
    std::vector<char> specimen{'t', 'u', 'r', 'k', 'e', 'y'};
    Subject subject(specimen);
    ::c::const_buffer extracted((::c::const_buffer) subject);
    std::string const actual(extracted.begin(), extracted.end());
    std::string const expected(specimen.begin(), specimen.end());
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }

  template<Bufferlike UNIFIER> auto Buffer<UNIFIER>::test_operator_const_stringn() -> void {
#if 1
    CPPUNIT_ASSERT(true);
#else
    // DELETE THIS ... operator c::const_stringn() is never safe
    {
      std::vector<char> specimen{'m', 'a', 'r', 'm', 'o', 't'};
      Subject subject(specimen);
      ::c::const_stringn extracted((::c::const_stringn) subject); // <--------------------------------- test this
      std::string const actual(extracted.begin(), extracted.end());
      std::string const expected(specimen.begin(), specimen.end());
      CPPUNIT_ASSERT_EQUAL(expected, actual);
    } {
      std::vector<char> specimen{'t', 'o', 'm', 'r', 'a', 'm'};
      Subject subject(specimen);
      ::c::const_stringn extracted(subject.operator ::c::const_stringn()); // <------------------------- test this
      std::string const actual(extracted.begin(), extracted.end());
      std::string const expected(specimen.begin(), specimen.end());
      CPPUNIT_ASSERT_EQUAL(expected, actual);
    }
#endif
  }

  template<Bufferlike UNIFIER> auto Buffer<UNIFIER>::test_operator_string() -> void {
    std::vector<char> specimen{'n', 'a', 'r', 'w', 'a', 'l'};
    Subject subject(specimen);
    std::string extracted((std::string) subject);
    std::string const actual(extracted);
    std::string const expected(specimen.begin(), specimen.end());
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }

  template<Bufferlike UNIFIER> auto Buffer<UNIFIER>::test_operator_string_view() -> void {
    std::vector<char> specimen{'o', 'c', 'e', 'l', 'o', 't'};
    Subject subject(specimen);
    std::string_view extracted = (std::string_view) subject;
    std::string const actual(extracted.begin(), extracted.end());
    std::string const expected(specimen.begin(), specimen.end());
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }

  template<Bufferlike UNIFIER> auto Buffer<UNIFIER>::test_empty() -> void {
    {
      std::vector<char> specimen;
      Subject subject(specimen);
      CPPUNIT_ASSERT(subject.empty());
    } {
      std::vector<char> specimen{'r', 'a', 't'};
      Subject subject(specimen);
      CPPUNIT_ASSERT(!subject.empty());
    }
  }

  template<Bufferlike UNIFIER> auto Buffer<UNIFIER>::test_size() -> void {
    std::vector<char> specimen{'s', 'e', 'a', 'l'};
    Subject subject(specimen);
    CPPUNIT_ASSERT_EQUAL(4lu, subject.size());
  }

  template<Bufferlike UNIFIER> auto Buffer<UNIFIER>::test_iterator() -> void {
    char buf[] = "dog";
    ::c::stringn specimen(buf);
    Subject subject(specimen);
    typename Subject::iterator i = subject.begin();    
    CPPUNIT_ASSERT_EQUAL('d', *i);
    ++i;
    CPPUNIT_ASSERT_EQUAL('o', *i);
    ++i;
    CPPUNIT_ASSERT_EQUAL('g', *i);
    ++i;
    CPPUNIT_ASSERT(subject.end() == i);
  }

  template<Bufferlike UNIFIER> auto Buffer<UNIFIER>::test_const_iterator() -> void {
    char buf[] = "cat";
    ::c::stringn specimen(buf);
    Subject const subject(specimen);
    typename Subject::const_iterator i = subject.begin();    
    CPPUNIT_ASSERT_EQUAL('c', *i);
    ++i;
    CPPUNIT_ASSERT_EQUAL('a', *i);
    ++i;
    CPPUNIT_ASSERT_EQUAL('t', *i);
    ++i;
    CPPUNIT_ASSERT(subject.end() == i);
  }

  template<Bufferlike UNIFIER> auto Buffer<UNIFIER>::test_begin_end() -> void {
    char buf[] = "goat";
    ::c::stringn specimen(buf);
    Subject const subject(specimen);
    std::ostringstream rebuf;
    for (typename Subject::const_iterator i(subject.begin()), e(subject.end()); e != i; ++i) {
      rebuf << *i;
    }
    std::string const actual = rebuf.str();
    std::string const expected = buf;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }

  template<Bufferlike UNIFIER> auto Buffer<UNIFIER>::test_for_loop() -> void {
    char buf[] = "frog";
    ::c::stringn specimen(buf);
    Subject const subject(specimen);
    std::ostringstream rebuf;
    for (auto re : subject) {
      rebuf << re;
    }
    std::string const actual = rebuf.str();
    std::string const expected = buf;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }

  template<Bufferlike UNIFIER> auto Buffer<UNIFIER>::test_front() -> void {
    char buf[] = "harpie";
    ::c::stringn specimen(buf);
    Subject const subject(specimen);
    CPPUNIT_ASSERT_EQUAL('h', subject.front()); // <--- test this;
  }
}

#import tests.unit.re.construct.Fixture
namespace tests::unit::re::construct {
  template<Bufferlike UNIFIER> auto Buffer<UNIFIER>::test_back() -> void {
    //
    // Reminder: there is no general Buffer<UNIFIER>::back()
    // such is only available for some implementations, e.g. Buffer<std::string>
    // The test case for that is nearby (as proven by the function pointer)
    //
    auto function_pointer = &Fixture::test_buffer_string_back;
    CPPUNIT_ASSERT(nullptr != function_pointer);
  }
}

namespace tests::unit::re::construct {
  using namespace std::string_literals;
  template<Bufferlike UNIFIER> auto Buffer<UNIFIER>::test_data() -> void {
    char buf[] = "jackass";
    ::c::stringn specimen(buf);
    Subject const subject(specimen);
    CPPUNIT_ASSERT(nullptr != subject.data());
    std::string redo(subject.data());
    CPPUNIT_ASSERT_EQUAL("jackass"s, redo);
  }
}

namespace tests::unit::re::construct {
  using namespace std::string_literals;
  template<Bufferlike UNIFIER> auto Buffer<UNIFIER>::test_operator_index() -> void {
    char buf[] = "kangaroo";
    ::c::stringn specimen(buf);
    Subject const subject(specimen);
    CPPUNIT_ASSERT_EQUAL('k', subject[0]);
    CPPUNIT_ASSERT_EQUAL('a', subject[1]);
    CPPUNIT_ASSERT_EQUAL('n', subject[2]);
    CPPUNIT_ASSERT_EQUAL('g', subject[3]);
    CPPUNIT_ASSERT_EQUAL('a', subject[4]);
    CPPUNIT_ASSERT_EQUAL('r', subject[5]);
    CPPUNIT_ASSERT_EQUAL('o', subject[6]);
    CPPUNIT_ASSERT_EQUAL('o', subject[7]);
    //
    // REMINDER this does not test non-const Buffer<std::string>::operator[] 
    //
  }
}

#import std.string_literals
#import std.type_info
#import rigging.unit.suite.Stream
#import rigging.unit.suite.add
#import rigging.unit.suite.call
namespace tests::unit::re::construct {
  template<Bufferlike UNIFIER> auto Buffer<UNIFIER>::suite() -> cppunit::Test * {
    using namespace std::string_literals;
    using namespace ::rigging::unit::suite;
    Stream series("buffer<"s + typeid(UNIFIER).name() + ">"s);
    {
      Stream co("constructor");
      co << call("default", &Buffer::test_constructor_default)
        ;
      {
        Stream cv("convert-from");
        cv << call("buffer", &Buffer::test_constructor_convert_from_buffer)
           << call("const_buffer", &Buffer::test_constructor_convert_from_const_buffer)
           << call("stringn", &Buffer::test_constructor_convert_from_stringn)
           << call("const_stringn", &Buffer::test_constructor_convert_from_const_stringn)
           << call("stringz", &Buffer::test_constructor_convert_from_stringz)
           << call("const_stringz", &Buffer::test_constructor_convert_from_const_stringz)
           << call("string", &Buffer::test_constructor_convert_from_string)
           << call("string_view", &Buffer::test_constructor_convert_from_string_view)
           << call("enabled_OTHER", &Buffer::test_constructor_convert_from_enabled_OTHER)
          ;
        co << add(cv.release());
      }
      series << add(co.release());
    }
    series << call("constructor_copy", &Buffer::test_constructor_copy)
           << call("assignment_copy", &Buffer::test_assignment_copy)
           << call("constructor_move", &Buffer::test_constructor_move)
           << call("assignment_move", &Buffer::test_assignment_move) 
           << call("operator const_buffer", &Buffer::test_operator_const_buffer)
           << call("operator const_stringn", &Buffer::test_operator_const_stringn)
           << call("operator string", &Buffer::test_operator_string)
           << call("operator string_view", &Buffer::test_operator_string_view)
           << call("swap", &Buffer::test_swap)
           << call("empty", &Buffer::test_empty)
           << call("size", &Buffer::test_size)
           << call("iterator", &Buffer::test_iterator)
           << call("const_iterator", &Buffer::test_const_iterator)
           << call("begin_end", &Buffer::test_begin_end)
           << call("for_loop", &Buffer::test_for_loop)
           << call("front", &Buffer::test_front)
           << call("back", &Buffer::test_back)
           << call("data", &Buffer::test_data)
           << call("operator[]", &Buffer::test_operator_index)
      ;
    return series.release();
  }
}
#endiv
#divert <cpp>
namespace tests::unit::re::construct {
  // These are const-from-muting scenarios
  template<> auto Buffer<::c::buffer>::test_constructor_convert_from_const_buffer() -> void { CPPUNIT_ASSERT(true); }
  template<> auto Buffer<::c::buffer>::test_constructor_convert_from_const_stringn() -> void { CPPUNIT_ASSERT(true); }
  template<> auto Buffer<::c::buffer>::test_constructor_convert_from_const_stringz() -> void { CPPUNIT_ASSERT(true); }
  template<> auto Buffer<::c::buffer>::test_constructor_convert_from_string() -> void { CPPUNIT_ASSERT(true); }
  template<> auto Buffer<::c::buffer>::test_constructor_convert_from_string_view() -> void { CPPUNIT_ASSERT(true); }
  template<> auto Buffer<::c::buffer>::test_constructor_convert_from_enabled_OTHER() -> void { CPPUNIT_ASSERT(true); }
}
#endiv

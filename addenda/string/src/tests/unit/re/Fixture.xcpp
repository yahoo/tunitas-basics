// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace tests::unit::re {
  class Fixture;
}
#divert </fpp>
#divert <hpp>
#import c.basic_buffer
#import c.basic_stringz
#import cppunit.Test
#import cppunit.test.Fixture
#import re.buffer
#import re.string
#import re.string_view
#import std.string
#import std.string_view
#import std.vector
class tests::unit::re::Fixture : public cppunit::test::Fixture { 
public:
  auto test_overloading_case_S1() -> void;
  auto test_overloading_case_S2() -> void;
  auto test_overloading_case_B1() -> void;
  auto test_overloading_case_B2() -> void;
  auto test_overloading_case_D1() -> void;
  auto test_overloading_case_D2() -> void;

  auto test_string() -> void;
  auto test_string_view() -> void;
  auto test_buffer() -> void;

  static auto suite() -> cppunit::Test *;
protected:
  auto overload_S1(::re::string<::c::basic_stringz<char const>>) -> void { CPPUNIT_ASSERT(true); }
  auto overload_S1(::re::string_view<std::string_view>) -> void { CPPUNIT_ASSERT(true); }

  auto overload_S2(::re::string<std::string>) -> void { CPPUNIT_ASSERT(true); }
  auto overload_S2(::re::string_view<std::string_view>) -> void { CPPUNIT_ASSERT(true); }
};
#divert </hpp>
#divert <cpp>
#import c.const_stringz
#import c.stringz
#import c.const_buffer
#import c.buffer

auto tests::unit::re::Fixture::test_overloading_case_S1() -> void {
  overload_S1("literal");
  overload_S1(std::string());
  overload_S1(::re::string<::c::const_stringz>());
  overload_S1(std::string_view());
  overload_S1(::re::string_view<std::string_view>());
}

auto tests::unit::re::Fixture::test_overloading_case_S2() -> void {
  overload_S2("literal");
  overload_S2(std::string());
  overload_S2(::re::string<std::string>());
  overload_S2(std::string_view());
  overload_S2(::re::string_view<std::string_view>());
}

auto tests::unit::re::Fixture::test_string() -> void {
  using csz = ::c::const_stringz;
  using s = std::string;
  {
    ::re::string<::c::const_stringz> t0;
    ::re::string<::c::const_stringz> t1("1");
    ::re::string<::c::const_stringz> t2(csz("1"));
    ::re::string<::c::const_stringz> t3(s("1"));
  } {
    ::re::string<std::string> t0;
    ::re::string<std::string> t1("1");
    ::re::string<std::string> t2(csz("1"));
    ::re::string<std::string> t3(s("1"));
  }
}

auto tests::unit::re::Fixture::test_string_view() -> void {
  using s = std::string;
  using sv = std::string_view;
  ::re::string_view<std::string_view> t0;
  ::re::string_view<std::string_view> t1(s("1"));
  ::re::string_view<std::string_view> t2(sv("1"));
}

auto tests::unit::re::Fixture::test_buffer() -> void {
  using cb = ::c::const_buffer;
  using b = ::c::buffer;
  using s = std::string;
  char one[] = "1";
  {
    ::re::buffer<::c::const_buffer> t0;
    ::re::buffer<::c::const_buffer> t1(cb("1", 1));
    ::re::buffer<::c::const_buffer> t2(b(one, 1));
    ::re::buffer<::c::const_buffer> t3(s("1"));
  } {  
    ::re::buffer<::c::buffer> t0;
    ::re::buffer<::c::buffer> t1(b(one, 1));
  } {
    ::re::buffer<std::string> t0;
    ::re::buffer<std::string> t1(cb("1", 1));
    ::re::buffer<std::string> t2(b(one, 1));
    ::re::buffer<std::string> t3(s("1"));
  }
}

#import tests.unit.re.construct.Fixture
#import rigging.unit.suite.Stream
#import rigging.unit.suite.add
#import rigging.unit.suite.call
auto tests::unit::re::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::unit::suite;
  Stream series("re");
  {
    Stream ov("overloading");
    ov << call("S1", &Fixture::test_overloading_case_S1)
       << call("S2", &Fixture::test_overloading_case_S2)
      ;
    series << add(ov.release());
  }
  series << call("string", &Fixture::test_string)
         << call("string_view", &Fixture::test_string_view)
         << call("buffer", &Fixture::test_buffer)
         << add(construct::Fixture::suite())
    ;
  return series.release();
}
#divert </cpp>

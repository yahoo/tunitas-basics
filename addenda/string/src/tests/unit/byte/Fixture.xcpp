// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace tests::unit::byte {
  class Fixture;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::byte::Fixture : public cppunit::test::Fixture { 
public:
  auto test_usage_buffer() -> void;
  auto test_usage_const_buffer() -> void;
  auto test_usage_basic_buffer() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.uint8_t
#import byte.buffer
auto tests::unit::byte::Fixture::test_usage_buffer() -> void {
  ::byte::buffer b;
  CPPUNIT_ASSERT(b.empty());
  CPPUNIT_ASSERT(0 == b.size());
  CPPUNIT_ASSERT(nullptr != b.data());
}
#import byte.const_buffer
auto tests::unit::byte::Fixture::test_usage_const_buffer() -> void {
  ::byte::const_buffer b;
  CPPUNIT_ASSERT(b.empty());
  CPPUNIT_ASSERT(0 == b.size());
  CPPUNIT_ASSERT(nullptr != b.data());
}
#import byte.type_t
#import byte.basic_buffer
auto tests::unit::byte::Fixture::test_usage_basic_buffer() -> void {
  {
    ::byte::basic_buffer<::byte::type_t> b;
    CPPUNIT_ASSERT(b.empty());
  } {
    ::byte::basic_buffer<::byte::type_t const> b;
    CPPUNIT_ASSERT(b.empty());
  }
}
#import tests.unit.byte.buffer.Fixture
#import rigging.unit.suite.Stream
#import rigging.unit.suite.add
#import rigging.unit.suite.call
auto tests::unit::byte::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::unit::suite;
  Stream series("byte");
  {
    Stream use("usage");
    use << call("buffer", &Fixture::test_usage_buffer)
        << call("const_buffer", &Fixture::test_usage_const_buffer)
        << call("basic_buffer", &Fixture::test_usage_basic_buffer)
      ;
    series<<< add>(us();
  }
      series<<< add>(buffer::Fixture()
    ;
  return series.release();
}
#endiv

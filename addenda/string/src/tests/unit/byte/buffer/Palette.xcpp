// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace tests::unit::byte::buffer {
  class Palette;
}
#endiv
#divert <hpp>
#import byte.type_t
#import std.size_t
class tests::unit::byte::buffer::Palette {
protected:
  Palette();
  ~Palette() = default;
  Palette(Palette const &) = delete;
  auto operator=(Palette const &) -> Palette & = delete;
public: 
  static constexpr ::std::size_t const LENGTH = 20;
  static_assert(LENGTH <= 26, "std::isalpha will fail");

  // These won't be 0-terminated, they will be full of "bytes" not (codepage) "chars"
  ::byte::type_t aNb[LENGTH];         // array-of-length-N of bytes
  ::byte::type_t const aNbb[LENGTH];  // array-of-length-N of const bytes
  ::byte::type_t *pb;                 // pointer-to-bytes
  ::byte::type_t const *pbb;          // pointer-to-const_bytes

  virtual auto setUp() -> void;
  virtual auto tearDown() -> void;

  // Used in Consty & Muting
  template<typename BUFFER> inline static auto generic_testification(BUFFER) -> void;
protected:
  // "establish" in lieu of 'generate' 'fill' 'initialize' all of which are in std
  // but have differfent senses.  So "establish" is used to setUp and tearDown.
  template<typename ITERATOR, typename FUNCTOR> inline auto establish(ITERATOR start, ITERATOR finish, FUNCTOR function) -> void;
  template<typename BASE, typename FUNCTOR> inline auto establish(BASE const *start, BASE const *finish, FUNCTOR function) -> void;
private:
  template<typename ITERATOR, typename FUNCTOR> auto do_establish(ITERATOR start, ITERATOR finish, FUNCTOR function) -> void;
};
#endiv
#divert <tpp>
#import std.generate
template<typename ITERATOR, typename FUNCTOR> auto tests::unit::byte::buffer::Palette::do_establish(ITERATOR start, ITERATOR finish, FUNCTOR function) -> void {
  ::std::generate(start, finish, function);
}
template<typename ITERATOR, typename FUNCTOR> auto tests::unit::byte::buffer::Palette::establish(ITERATOR start, ITERATOR finish, FUNCTOR function) -> void {
  do_establish(start, finish, function);
}
template<typename BASE, typename FUNCTOR> auto tests::unit::byte::buffer::Palette::establish(BASE const *start, BASE const *finish, FUNCTOR function) -> void {
  // ahem ... cast away the constness (oh the humanity)
  do_establish(const_cast<::byte::type_t *>(start), const_cast<::byte::type_t *>(finish), function);
}
#import cppunit.test.Assert
#import byte.buffer
#import byte.const_buffer
#import std.distance
#import std.is_same
#import std.isalpha
#import std.isspace
template<typename BUFFER> auto tests::unit::byte::buffer::Palette::generic_testification(BUFFER buf) -> void {
  static_assert((::std::is_same<::byte::buffer, BUFFER>::value
                 ||
                 ::std::is_same<::byte::const_buffer, BUFFER>::value),
                "the BUFFER is not actually instantiated as byte::buffer at all"); 
  CPPUNIT_ASSERT(!buf.empty());
  CPPUNIT_ASSERT(0 != buf.size());
  CPPUNIT_ASSERT(buf.begin() != buf.end());
  CPPUNIT_ASSERT(0 != ::std::distance(buf.begin(), buf.end()));
  for (auto byte : buf) {
    CPPUNIT_ASSERT(std::isspace(byte) || std::isalpha(byte));
  }
}
#endiv
#divert <cpp>
constexpr ::std::size_t const tests::unit::byte::buffer::Palette::LENGTH;
tests::unit::byte::buffer::Palette::Palette()
  : aNb()
  , aNbb()
  , pb()
  , pbb() {
  ; // aNb and aNbb remain unassigned
}

#import rigging.unit.lhs
auto tests::unit::byte::buffer::Palette::setUp() -> void {
  using ::rigging::unit::lhs;
  unsigned count;
  count=0;
  establish(aNb, aNb+LENGTH, [&count](){ return 'a' + count++; });
  count=0;
  establish(aNbb, aNbb+LENGTH, [&count](){ return 'A' + count++; });
  lhs(pb) = aNb;
  lhs(pbb) = aNbb;
}

#import rigging.unit.lhs
#import rigging.unit.clear
auto tests::unit::byte::buffer::Palette::tearDown() -> void {
  using ::rigging::unit::lhs;
  using ::rigging::unit::clear;
  establish(aNb, aNb+sizeof (aNb), [](){ return '\0';});
  establish(aNbb, aNbb+sizeof (aNbb), [](){ return '\0';});
  lhs(pb) = clear;
  lhs(pbb) = clear;
}
#endiv

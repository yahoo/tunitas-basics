// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace tests::unit::byte::buffer {
  class Consty;
}
#endiv
#divert <hpp>
#import byte.basic_buffer
#import cppunit.Test
#import cppunit.test.Fixture
#import tests.unit.byte.buffer.Palette
class tests::unit::byte::buffer::Consty : public cppunit::test::Fixture, Palette { 
public: 
  using Subject = ::byte::basic_buffer<::byte::type_t const>;

  virtual auto setUp() -> void override final;
  virtual auto tearDown() -> void override final;

  auto test_constructor_default() -> void;
  auto test_constructor_pointer_size() -> void;
  auto test_constructor_manifest_array() -> void;
  auto test_constructor_manifest_array_smaller() -> void;
  auto test_constructor_manifest_array_too_big() -> void;
  auto test_constructor_muting_buffer() -> void;
  auto test_constructor_muting_pair_size_first() -> void;
  auto test_constructor_muting_pair_size_second() -> void;
  auto test_constructor_consty_pair_size_first() -> void;
  auto test_constructor_consty_pair_size_second() -> void;
  auto test_constructor_muting_tuple_size_first() -> void;
  auto test_constructor_muting_tuple_size_second() -> void;
  auto test_constructor_consty_tuple_size_first() -> void;
  auto test_constructor_consty_tuple_size_second() -> void;
  auto test_constructor_array() -> void;
  auto test_constructor_vector() -> void;
  auto test_iteration() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import byte.basic_buffer
#import std.size_t

auto tests::unit::byte::buffer::Consty::setUp() -> void {
  Palette::setUp();
}

auto tests::unit::byte::buffer::Consty::tearDown() -> void {
  Palette::tearDown();
}

auto tests::unit::byte::buffer::Consty::test_constructor_default() -> void {
  Subject t; // <------------- test this
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

auto tests::unit::byte::buffer::Consty::test_constructor_pointer_size() -> void {
  Subject t(LENGTH, pbb); // <------------- test this
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(LENGTH == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(pbb == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(LENGTH == ::std::distance(t.begin(), t.end()));
}

#import std.distance
auto tests::unit::byte::buffer::Consty::test_constructor_manifest_array() -> void {
  Subject t(aNbb); // <------------- test this
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(LENGTH == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(aNbb == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(LENGTH == ::std::distance(t.begin(), t.end()));
}

auto tests::unit::byte::buffer::Consty::test_constructor_manifest_array_smaller() -> void {
  auto const smaller_size = LENGTH - 5;
  Subject t(aNb, smaller_size); // <------------- test this 
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(smaller_size == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(aNb == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(smaller_size == ::std::distance(t.begin(), t.end()));
}

#import std.length_error
auto tests::unit::byte::buffer::Consty::test_constructor_manifest_array_too_big() -> void {
  try {
    Subject t(aNb, LENGTH+1); // <------------- test this
    CPPUNIT_ASSERT(false);
  } catch (std::length_error const &) {
    CPPUNIT_ASSERT(true);
  }
}

auto tests::unit::byte::buffer::Consty::test_constructor_muting_buffer() -> void {
  using SUBTEST_BYTE_TYPE = ::byte::type_t; // <â€” we're in the "consty" tester
  ::byte::basic_buffer<SUBTEST_BYTE_TYPE> a(aNb);
  Subject t(a); // <------------- test this
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(LENGTH == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  for (unsigned i(0), e(t.size()); e != i; ++i) {
    CPPUNIT_ASSERT(t[i] == a[i]);
  }
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(LENGTH == ::std::distance(t.begin(), t.end()));
}

#import std.pair
auto tests::unit::byte::buffer::Consty::test_constructor_muting_pair_size_first() -> void {
  ::std::pair<::std::size_t, ::byte::type_t *> p(LENGTH, pb); // <------------------------ ::byte::type_t *
  Subject t(p); // <------------- test this
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(LENGTH == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(pb == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(LENGTH == ::std::distance(t.begin(), t.end()));
}

auto tests::unit::byte::buffer::Consty::test_constructor_muting_pair_size_second() -> void {
  ::std::pair<::byte::type_t *, ::std::size_t> p(pb, LENGTH); // <------------------------ ::byte::type_t *
  Subject t(p); // <------------- test this
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(LENGTH == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(pb == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(LENGTH == ::std::distance(t.begin(), t.end()));
}

auto tests::unit::byte::buffer::Consty::test_constructor_consty_pair_size_first() -> void {
  ::std::pair<::std::size_t, ::byte::type_t const *> p(LENGTH, pbb); // <------------------ ::byte::type_t const *
  Subject t(p); // <------------- test this
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(LENGTH == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(pbb == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(LENGTH == ::std::distance(t.begin(), t.end()));
}

auto tests::unit::byte::buffer::Consty::test_constructor_consty_pair_size_second() -> void {
  ::std::pair<::byte::type_t const *, ::std::size_t> p(pbb, LENGTH); // <------------------ ::byte::type_t const *
  Subject t(p); // <------------- test this
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(LENGTH == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(pbb == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(LENGTH == ::std::distance(t.begin(), t.end()));
}

#import std.tuple
auto tests::unit::byte::buffer::Consty::test_constructor_muting_tuple_size_first() -> void {
  ::std::tuple<::std::size_t, ::byte::type_t *> u(LENGTH, pb); // <-------------------------- ::byte::type_t *
  Subject t(u); // <------------- test this
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(LENGTH == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(pb == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(LENGTH == ::std::distance(t.begin(), t.end()));
}

auto tests::unit::byte::buffer::Consty::test_constructor_muting_tuple_size_second() -> void {
  ::std::tuple<::byte::type_t *, ::std::size_t> u(pb, LENGTH); // <-------------------------- ::byte::type_t *
  Subject t(u); // <------------- test this
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(LENGTH == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(pb == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(LENGTH == ::std::distance(t.begin(), t.end()));
}

auto tests::unit::byte::buffer::Consty::test_constructor_consty_tuple_size_first() -> void {
  ::std::tuple<::std::size_t, ::byte::type_t const *> u(LENGTH, pbb); // <------------------ ::byte::type_t const *
  Subject t(u); // <------------- test this
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(LENGTH == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(pbb == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(LENGTH == ::std::distance(t.begin(), t.end()));
}

auto tests::unit::byte::buffer::Consty::test_constructor_consty_tuple_size_second() -> void {
  ::std::tuple<::byte::type_t const *, ::std::size_t> u(pbb, LENGTH); // <------------------ ::byte::type_t const *
  Subject t(u); // <------------- test this
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(LENGTH == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(pbb == t.data());
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(LENGTH == ::std::distance(t.begin(), t.end()));
}

#import std.array
#import std.copy
#import std.distance
auto tests::unit::byte::buffer::Consty::test_constructor_array() -> void {
  ::std::array<::byte::type_t, LENGTH> a;
  // prepare for & copy in the nullptr at the end of pbb
  ::std::copy(pbb, pbb+LENGTH+1, a.begin());
  Subject t(a); // <------------- test this
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(LENGTH == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  for (unsigned i(0), e(t.size()); e != i; ++i) {
    CPPUNIT_ASSERT(t[i] == a[i]);
  }
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(LENGTH == ::std::distance(t.begin(), t.end()));
}

#import std.vector
auto tests::unit::byte::buffer::Consty::test_constructor_vector() -> void {
  ::std::vector<::byte::type_t> v;
  v.resize(LENGTH);
  ::std::copy(pbb, pbb+LENGTH, v.begin());
  Subject t(v); // <------------- test this
  generic_testification(t);
  CPPUNIT_ASSERT(!t.empty());
  CPPUNIT_ASSERT(0 != t.size());
  CPPUNIT_ASSERT(LENGTH == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  for (unsigned i(0), e(t.size()); e != i; ++i) {
    CPPUNIT_ASSERT(t[i] == v[i]);
  }
  CPPUNIT_ASSERT(t.begin() != t.end());
  CPPUNIT_ASSERT(LENGTH == ::std::distance(t.begin(), t.end()));
}

#import std.max
#import std.min
auto tests::unit::byte::buffer::Consty::test_iteration() -> void {
  ::byte::basic_buffer<::byte::type_t const> m(aNb);
  ::byte::basic_buffer<::byte::type_t const> byte(aNbb);
  CPPUNIT_ASSERT(m.size() == byte.size());
  CPPUNIT_ASSERT(!m.empty());
  CPPUNIT_ASSERT(0 != m.size());
  using iterator = ::byte::basic_buffer<::byte::type_t const>::iterator; // <------------- test this
  for (iterator mi(m.begin()), me(m.end()), ci(byte.begin()), ce(byte.end()); me != mi && ce != ci; mi++, ci++) {
    ::byte::type_t mvalue(*mi);
    ::byte::type_t cvalue(*ci);
    ::byte::type_t low = ::std::min(mvalue, cvalue);
    ::byte::type_t high = ::std::max(mvalue, cvalue);
    static_assert('A' < 'a', "upper case not smaller than lower case");
    auto lowercase = ::std::max(low, high);
    auto uppercase = ::std::min(low, high);
    CPPUNIT_ASSERT(lowercase - 'a' + 'A' == uppercase); // that is how they were constructed
  }
}

#import rigging.unit.suite.Stream
#import rigging.unit.suite.call
#import rigging.unit.suite.add
auto tests::unit::byte::buffer::Consty::suite() -> cppunit::Test * {
  using namespace ::rigging::unit::suite;
  Stream series("consty");
  series << call("constructor_default", &Consty::test_constructor_default)
         << call("constructor_pointer_size", &Consty::test_constructor_pointer_size)
         << call("constructor_manifest_array", &Consty::test_constructor_manifest_array)
         << call("constructor_manifest_array_smaller", &Consty::test_constructor_manifest_array_smaller)
         << call("constructor_manifest_array_too_big", &Consty::test_constructor_manifest_array_too_big)
         << call("constructor_muting_buffer", &Consty::test_constructor_muting_buffer)
         << call("constructor_muting_pair_size_first", &Consty::test_constructor_muting_pair_size_first)
         << call("constructor_consty_pair_size_second", &Consty::test_constructor_consty_pair_size_second)
         << call("constructor_muting_pair_size_first", &Consty::test_constructor_muting_pair_size_first)
         << call("constructor_consty_pair_size_second", &Consty::test_constructor_consty_pair_size_second)
         << call("constructor_muting_tuple_size_first", &Consty::test_constructor_muting_tuple_size_first)
         << call("constructor_consty_tuple_size_second", &Consty::test_constructor_consty_tuple_size_second)
         << call("constructor_muting_tuple_size_first", &Consty::test_constructor_muting_tuple_size_first)
         << call("constructor_consty_tuple_size_second", &Consty::test_constructor_consty_tuple_size_second)
         << call("constructor_array", &Consty::test_constructor_array)
         << call("constructor_vector", &Consty::test_constructor_vector)
         << call("iteration", &Consty::test_iteration)
    ;
  return series.release();
}
#endiv

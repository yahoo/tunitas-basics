// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace tests::unit::byte::buffer {
  template<typename BUFFER> class Nullptr;
}
#endiv
#divert <hpp>
#import byte.basic_buffer
#import cppunit.Test
#import cppunit.test.Fixture
#import tests.unit.byte.buffer.Palette
template<typename BUFFER> class tests::unit::byte::buffer::Nullptr : public cppunit::test::Fixture, Palette { 
public: 
  using Subject = BUFFER;

  virtual auto setUp() -> void override final;
  virtual auto tearDown() -> void override final;

  auto test_constructor_default() -> void;
  auto test_constructor_pointer_size() -> void;
  auto test_constructor_muting_pair_size_first() -> void;
  auto test_constructor_muting_pair_size_second() -> void;
  auto test_constructor_consty_pair_size_first() -> void;
  auto test_constructor_consty_pair_size_second() -> void;
  auto test_constructor_muting_tuple_size_first() -> void;
  auto test_constructor_muting_tuple_size_second() -> void;
  auto test_constructor_consty_tuple_size_first() -> void;
  auto test_constructor_consty_tuple_size_second() -> void;
  auto test_constructor_array() -> void;
  auto test_constructor_vector() -> void;

  static auto suite() -> cppunit::Test *;
private:
  static constexpr auto const nullptr_dammit = (::byte::type_t const *)(nullptr);
};
#import byte.buffer
namespace tests::unit::byte::buffer {
  // Cannot construct a muting buffer from a consty buffer; so these are stubbed out
  template<> auto Nullptr<::byte::buffer>::test_constructor_consty_pair_size_first() -> void;
  template<> auto Nullptr<::byte::buffer>::test_constructor_consty_pair_size_second() -> void;
  template<> auto Nullptr<::byte::buffer>::test_constructor_consty_tuple_size_first() -> void;
  template<> auto Nullptr<::byte::buffer>::test_constructor_consty_tuple_size_second() -> void;
}
#endiv
#divert <tpp>
#import byte.basic_buffer
#import std.size_t

template<typename _> auto tests::unit::byte::buffer::Nullptr<_>::setUp() -> void {
  Palette::setUp();
}

template<typename _> auto tests::unit::byte::buffer::Nullptr<_>::tearDown() -> void {
  Palette::tearDown();
}

template<typename _> auto tests::unit::byte::buffer::Nullptr<_>::test_constructor_default() -> void {
  Subject t; // <------------- test this
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

template<typename _> auto tests::unit::byte::buffer::Nullptr<_>::test_constructor_pointer_size() -> void {
  Subject t(0, nullptr); // <------------- test this
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

#import std.pair
template<typename _> auto tests::unit::byte::buffer::Nullptr<_>::test_constructor_muting_pair_size_first() -> void {
  ::std::pair<::std::size_t, ::byte::type_t *> p(0, nullptr); // <------------------------ ::byte::type_t *
  Subject t(p); // <------------- test this
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

template<typename _> auto tests::unit::byte::buffer::Nullptr<_>::test_constructor_muting_pair_size_second() -> void {
  ::std::pair<::byte::type_t *, ::std::size_t> p(nullptr, 0); // <------------------------ ::byte::type_t *
  Subject t(p); // <------------- test this
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

template<typename _> auto tests::unit::byte::buffer::Nullptr<_>::test_constructor_consty_pair_size_first() -> void {
  ::std::pair<::std::size_t, ::byte::type_t const *> p(0, nullptr); // <------------------ ::byte::type_t const *
  Subject t(p); // <------------- test this
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

template<typename _> auto tests::unit::byte::buffer::Nullptr<_>::test_constructor_consty_pair_size_second() -> void {
  ::std::pair<::byte::type_t const *, ::std::size_t> p(nullptr, 0); // <------------------ ::byte::type_t const *
  Subject t(p); // <------------- test this
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

#import std.tuple
template<typename _> auto tests::unit::byte::buffer::Nullptr<_>::test_constructor_muting_tuple_size_first() -> void {
  ::std::tuple<::std::size_t, ::byte::type_t *> u(0, nullptr); // <-------------------------- ::byte::type_t *
  Subject t(u); // <------------- test this
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

template<typename _> auto tests::unit::byte::buffer::Nullptr<_>::test_constructor_muting_tuple_size_second() -> void {
  ::std::tuple<::byte::type_t *, ::std::size_t> u(nullptr, 0); // <-------------------------- ::byte::type_t *
  Subject t(u); // <------------- test this
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

template<typename _> auto tests::unit::byte::buffer::Nullptr<_>::test_constructor_consty_tuple_size_first() -> void {
  ::std::tuple<::std::size_t, ::byte::type_t const *> u(0, nullptr); // <------------------ ::byte::type_t const *
  Subject t(u); // <------------- test this
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

template<typename _> auto tests::unit::byte::buffer::Nullptr<_>::test_constructor_consty_tuple_size_second() -> void {
  ::std::tuple<::byte::type_t const *, ::std::size_t> u(nullptr, 0); // <------------------ ::byte::type_t const *
  Subject t(u); // <------------- test this
  CPPUNIT_ASSERT(t.empty());
  CPPUNIT_ASSERT(0 == t.size());
  CPPUNIT_ASSERT(nullptr != t.data());
  CPPUNIT_ASSERT(t.begin() == t.end());
}

template<typename _> auto tests::unit::byte::buffer::Nullptr<_>::test_constructor_array() -> void {
  // A std::array<...> cannot be a nullptr.
  // There is nothing to test here.
  CPPUNIT_ASSERT(true);
}

template<typename _> auto tests::unit::byte::buffer::Nullptr<_>::test_constructor_vector() -> void {
  // A std::vector<...> cannot be a nullptr.
  // There is nothing to test here.
  CPPUNIT_ASSERT(true);
}

#import rigging.unit.suite.Stream
#import rigging.unit.suite.call
#import rigging.unit.suite.add
#import std.string_literals
#import std.type_info
template<typename _> auto tests::unit::byte::buffer::Nullptr<_>::suite() -> cppunit::Test * {
  using namespace std::string_literals;
  using namespace ::rigging::unit::suite;
  Stream series("Nullptr<"s + typeid(Subject).name() + ">s");
  series << call("constructor_default", &Nullptr::test_constructor_default)
         << call("constructor_pointer_size", &Nullptr::test_constructor_pointer_size)
         << call("constructor_muting_pair_size_first", &Nullptr::test_constructor_muting_pair_size_first)
         << call("constructor_consty_pair_size_second", &Nullptr::test_constructor_consty_pair_size_second)
         << call("constructor_muting_pair_size_first", &Nullptr::test_constructor_muting_pair_size_first)
         << call("constructor_consty_pair_size_second", &Nullptr::test_constructor_consty_pair_size_second)
         << call("constructor_muting_tuple_size_first", &Nullptr::test_constructor_muting_tuple_size_first)
         << call("constructor_consty_tuple_size_second", &Nullptr::test_constructor_consty_tuple_size_second)
         << call("constructor_muting_tuple_size_first", &Nullptr::test_constructor_muting_tuple_size_first)
         << call("constructor_consty_tuple_size_second", &Nullptr::test_constructor_consty_tuple_size_second)
         << call("constructor_array", &Nullptr::test_constructor_array)
         << call("constructor_vector", &Nullptr::test_constructor_vector)
    ;
  return series.release();
}
#endiv
#divert <cpp>
template<> auto tests::unit::byte::buffer::Nullptr<byte::buffer>::test_constructor_consty_pair_size_first() -> void { }
template<> auto tests::unit::byte::buffer::Nullptr<byte::buffer>::test_constructor_consty_pair_size_second() -> void { }
template<> auto tests::unit::byte::buffer::Nullptr<byte::buffer>::test_constructor_consty_tuple_size_first() -> void { }
template<> auto tests::unit::byte::buffer::Nullptr<byte::buffer>::test_constructor_consty_tuple_size_second() -> void { }
#endiv

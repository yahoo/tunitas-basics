// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace tests::unit::want {
  class Fixture;
}
#divert </fpp>
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture

class tests::unit::want::Fixture : public cppunit::test::Fixture { 
public:
  auto test_printable_crudely_as_string_char() -> void;
  auto test_printable_crudely_as_string_string() -> void;

  static auto suite() -> cppunit::Test *;
};
#divert </hpp>
#divert <cpp>
#import want.printable.crudely.as_string
#import std.cerr

#import std.numeric_limits
auto tests::unit::want::Fixture::test_printable_crudely_as_string_char() -> void {
  using ::want::printable::crudely::as_string;
  for (int i(std::numeric_limits<char>::min()), e(std::numeric_limits<char>::max()+1); e != i; ++i) {
    char character = (char) i;
    std::cerr << "character " << i << " printably=q!" << as_string(character) << "!\n";
  }
}

auto tests::unit::want::Fixture::test_printable_crudely_as_string_string() -> void {
  using ::want::printable::crudely::as_string;
  std::string buildup;
  for (int i(std::numeric_limits<char>::min()), e(std::numeric_limits<char>::max()+1); e != i; ++i) {
    char character = (char) i;
    buildup += character;
  }
  std::cerr << "specimen=q!" << as_string(buildup) << "!\n";
}

#import rigging.unit.suite.Stream
#import rigging.unit.suite.add
#import rigging.unit.suite.call
auto tests::unit::want::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::unit::suite;
  Stream series("want");
  {
    Stream p("printable");
    {
      Stream c("crudely");
      {
        Stream a("as_string");
        a << call("char", &Fixture::test_printable_crudely_as_string_char)
          << call("string", &Fixture::test_printable_crudely_as_string_string)
          ;
        c << add(a.release());
      }
      p << add(c.release());
    }
    series << add(p.release());
  }
  return series.release();
}
#divert </cpp>

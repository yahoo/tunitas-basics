// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sqlite {
  namespace connection {
    class Shell;
  }
}
#endiv
#divert <hpp>
#import c.const_stringz
#import std.numeric_limits
#import sqlite.status.Code
#import sqlite.open.Name
#import sqlite.open.Flags
#import sqlite.prepared.Result
#import sqlite.prepared.BasicResult
#import sqlite.detail.ShellSafelyGuarding
class sqlite::connection::Shell : public sqlite::detail::ShellSafelyGuarding<api::unguarded::Connection> {
  // The "shell" just give a place to hang member functions
  // One can copy these things ... it just copies the pointer
  //
  // The sqlite::connection::Shell does not Shell::close() on destruction
  // The sqlite::Connection does close() on destruction
  using Ancestor = sqlite::detail::ShellSafelyGuarding<api::unguarded::Connection>;
public:
  using connection_type = Ancestor::unguarded_type;
  using Ancestor::ShellSafelyGuarding;
  //
  // Reminder: there is only move semantics, not copy semantics
  // When you move to sqlite::Connection, then the connection will be closed on destruction
  // The connection::Shell does not close on destruction; on destruction, it does nothing.
  //
  inline auto is_open() const -> bool;
  using Name = sqlite::open::Name;
  using Flags = sqlite::open::Flags;
  inline auto open(c::const_stringz filename) -> status::Code;
  inline auto open(c::const_stringz filename, Flags) -> status::Code;
  inline auto open(c::const_stringz filename, Flags, c::const_stringz vfs) -> status::Code;

  // Not clear why you'd want this one... you can't give any flags, but you can give utf16
  template<typename CHAR, typename TRAITS, typename ALLOC> inline auto open(std::basic_string<CHAR, TRAITS, ALLOC> const &filename) -> status::Code;

  inline auto open(Name) -> status::Code;
  inline auto open(Name, Flags) -> status::Code;
  inline auto open(Name, Flags, c::const_stringz vfs) -> status::Code;

  inline auto close() -> status::Code;

  // once open ... one can do things with the connection
  inline auto last_insert_rowid() -> int64;

  inline auto extended_result_codes(bool onoff) -> status::Code;

  inline auto errcode() -> status::Code;
  inline auto extended_errcode() -> status::Code;
  inline auto errmsg() -> std::string;

  inline auto attach(c::const_stringz filename, c::const_stringz name) -> status::Code;
  inline auto detach(c::const_stringz name) -> status::Code;

  // exec, but without the callback machinery
  inline auto exec(c::const_stringz statement) -> status::Code;

  // prepare a statement
  // support the original scheme in the API to "walk down a very large '\0'-terminated buffer"
  template<typename STATEMENT> inline auto prepare(char const *sql_syntax, std::size_t limit = std::numeric_limits<std::size_t>::max()) -> typename prepared::Result<STATEMENT>;
  // support other "string-like" data types6
  template<typename STATEMENT> inline auto prepare(c::const_stringz sql_syntax, std::size_t limit = std::numeric_limits<std::size_t>::max()) -> typename prepared::Result<STATEMENT>;
  template<typename STATEMENT, typename CHAR, typename TRAITS, typename ALLOC> auto prepare(std::basic_string<CHAR, TRAITS, ALLOC> const &sql_syntax, std::size_t limit = std::numeric_limits<std::size_t>::max()) -> typename prepared::BasicResult<STATEMENT, CHAR const *>;

protected:
  // throws on nullptr
  inline auto ensure_not_already_open() const -> void;
};
#import want.is_movable_butnot_copyable
namespace sqlite {
  namespace connection {
    namespace tests {
      namespace Shell {
        using require = want::is_movable_butnot_copyable<sqlite::statement::Shell>::assertion;
        static_assert(!std::is_copy_constructible<sqlite::connection::Shell>::value, "has become copy constructible (but must not be so constructible)");
        static_assert(std::is_move_constructible<sqlite::connection::Shell>::value, "not move constructible (but must be so constructible)");
        static_assert(!std::is_copy_assignable<sqlite::connection::Shell>::value, "has become copy constructible (but must not be constructible as such)");
        static_assert(std::is_move_assignable<sqlite::connection::Shell>::value, "not move constructible (but must be constructible as such)");
      }
    }
  }
}
#endiv
#divert <ipp>
#import sqlite.api.session
#import sqlite.api.connection

auto sqlite::connection::Shell::is_open() const -> bool {
  return nullptr != unguarded_subject;
}

#import std.runtime_error
auto sqlite::connection::Shell::ensure_not_already_open() const -> void {
  if (is_open()) {
    throw std::runtime_error("already open");
  }
}

auto sqlite::connection::Shell::open(c::const_stringz filename) -> status::Code {
  ensure_not_already_open();
  return api::open(filename, *this);
}

auto sqlite::connection::Shell::open(c::const_stringz filename, Flags flags) -> status::Code {
  ensure_not_already_open();
  return api::open(filename, *this, flags);
}

auto sqlite::connection::Shell::open(c::const_stringz filename, Flags flags, c::const_stringz vfs) -> status::Code {
  ensure_not_already_open();
  return api::open(filename, *this, flags, vfs);
}

template<typename CHAR, typename TRAITS, typename ALLOC> auto sqlite::connection::Shell::open(std::basic_string<CHAR, TRAITS, ALLOC> const &filename) -> status::Code {
  ensure_not_already_open();
  return api::open(filename, *this);
}

auto sqlite::connection::Shell::open(Name location) -> status::Code {
  ensure_not_already_open();
  return api::open(location, *this);
}

auto sqlite::connection::Shell::open(Name location, Flags flags) -> status::Code {
  ensure_not_already_open();
  return api::open(location, *this, flags);
}

auto sqlite::connection::Shell::open(Name location, Flags flags, c::const_stringz vfs) -> status::Code {
  ensure_not_already_open();
  return api::open(location, *this, flags, vfs);
}

#import std.swap
auto sqlite::connection::Shell::close() -> status::Code {
  decltype(this->unguarded_subject) closing = nullptr;
  std::swap(closing, unguarded_subject);
  return api::unguarded::close(closing);
}

auto sqlite::connection::Shell::last_insert_rowid() -> int64 {
  return api::last_insert_rowid(*this);
}

auto sqlite::connection::Shell::extended_result_codes(bool onoff) -> status::Code {
  return api::extended_result_codes(*this, onoff);
}

auto sqlite::connection::Shell::errcode() -> status::Code {
  return api::errcode(*this);
}

auto sqlite::connection::Shell::extended_errcode() -> status::Code {
  return api::extended_errcode(*this);
}

auto sqlite::connection::Shell::errmsg() -> std::string {
  return api::errmsg(*this);
}

auto sqlite::connection::Shell::attach(c::const_stringz filename, c::const_stringz name) -> status::Code {
  return api::attach(*this, filename, name);
}

auto sqlite::connection::Shell::detach(c::const_stringz name) -> status::Code {
  return api::detach(*this, name);
}

auto sqlite::connection::Shell::exec(c::const_stringz statement) -> status::Code {
  return api::exec(*this, statement);
}

template<typename STATEMENT> auto sqlite::connection::Shell::prepare(char const *sql_syntax, std::size_t limit) -> typename prepared::Result<STATEMENT> {
  // reminder: 'char const *' supports the original scheme in the API to "walk down a very large '\0'-terminated buffer"
  return api::prepare<STATEMENT>(*this, sql_syntax, limit);
}

template<typename STATEMENT> auto sqlite::connection::Shell::prepare(c::const_stringz sql_syntax, std::size_t limit) -> typename prepared::Result<STATEMENT> {
  return api::prepare<STATEMENT>(*this, sql_syntax.data(), limit);
}

template<typename STATEMENT, typename CHAR, typename TRAITS, typename ALLOC> auto sqlite::connection::Shell::prepare(std::basic_string<CHAR, TRAITS, ALLOC> const &sql_syntax, std::size_t limit) -> typename prepared::BasicResult<STATEMENT, CHAR const *> {
  return api::prepare<STATEMENT>(*this, sql_syntax, limit);
}
#endiv

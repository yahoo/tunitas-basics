// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sqlite {
  namespace query {
    //
    // Usage:
    //     struct Insert : public sqlite::query::Insert {
    //         Insert(Connection &conn) : Ancestor(conn, format()) { }
    //         auto operator()(...rigid-type-arguments...) -> status_type {
    //             this->bind(...rigid-type-arguments...);
    //             return this->step();
    //         }
    //         static auto format() -> std::string;
    //     };
    //     sqlite::Connection conn ...is set up...
    //     Insert ins(conn);
    //     auto status = ins(...args...);              r is a sqlite::status::Code
    //     check(status);
    //     
    class Insert;
  }
}
#endiv
#divert <hpp>
#import sqlite.query.Prototype
#import std.string
class sqlite::query::Insert : public Prototype {
  using Ancestor = Prototype;
  //
  // Usage (see Prototype)
  //
  // A descendant of Insert implements the protocol
  //     The prepare(...) is called from the constructor
  //     Typically the descendant contains a static format(...) -> std::string function
  //     an query returns no ROWS, just DONE (or error).
  //
protected:
  inline Insert(connection_type &, std::string const &unprepared_sql_syntax);
  // saved so we can call conn.last_query_rowid() after the query occurs.
  connection_type &conn;
public:
  // An insert query returns DONE.
  // An insert query never is steppable; never "returns rows"
  //
  // Obligation: the descendant implements 'exec' or 'operator()'
  //   See above.
};

#endiv
#divert <ipp>
sqlite::query::Insert::Insert(connection_type &arg_conn, std::string const &unprepared_sql_syntax)
  : Ancestor(arg_conn, unprepared_sql_syntax)
  , conn(arg_conn) {
  ;
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sqlite {
  namespace query {
    class Prototype;
  }
}
#endiv
#divert <hpp>
#import sqlite.connection.Shell
#import sqlite.status.Code
#import sqlite.Statement
#import std.size_t
#import std.string
class sqlite::query::Prototype {
  //
  // Descendants:
  //     sqlite::query::Insert
  //     sqlite::query::Slect
  //     sqlite::query::Update
  //
  // A descendant of Prototype implements the protocol
  //     The prepare(...) is called from the constructor
  //     Typically the descendant contains a static format(...) -> std::string function
  //     (a) insert returns no ROWS, just DONE (or error).
  //     (b) select returns ROWS which must be generated & consumed.
  //     (c) update returns no ROWS, just DONE (or error).
  //
protected:
  // If you use the default constructor then you have to manually prepare after construction
  Prototype() = default;
  using connection_type = sqlite::connection::Shell;
  using status_type = sqlite::status::Code;
  inline Prototype(connection_type &, std::string const &unprepared_sql_syntax);
  // throws on failure to prepare the query
  inline auto prepare(connection_type &, std::string const &unprepared_sql_syntax) -> void;
  // Consciously NOT storing 'connection_type &conn' in the prototype object
  sqlite::Statement prepared;
public:
  // throws on failure to bind the arguments
  template<typename... ARGUMENTS> inline auto bind(ARGUMENTS...) -> void;
private:
  template<std::size_t N> inline auto bind_recurrence() -> void;
  template<std::size_t N, typename TYPE, typename... ARGUMENTS> inline auto bind_recurrence(TYPE const &, ARGUMENTS const &...) -> void;
};
#endiv
#divert <ipp>
sqlite::query::Prototype::Prototype(connection_type &conn, std::string const &unprepared_sql_syntax)
  : prepared() {
  prepare(conn, unprepared_sql_syntax);
}

#import std.move
#import std.is_same
auto sqlite::query::Prototype::prepare(connection_type &conn, std::string const &unprepared_sql_syntax) -> void {
  auto r = conn.prepare<sqlite::Statement>(unprepared_sql_syntax);
  check(r, "prepare failed for " + unprepared_sql_syntax);
  prepared = std::move(sqlite::prepared::value(r)); // must dodge scoped-visible namespace 'sqlite::value'
}

template<typename... ARGUMENTS> auto sqlite::query::Prototype::bind(ARGUMENTS ...arguments) -> void {
  assert(prepared.is_prepared());
  prepared.reset();
  prepared.clear_bindings();
  bind_recurrence<1>(arguments...);
  // recall: the descendant implements exec(...) a.k.a. operator()(...) because only the descendant
  // has full knowledge of the tuple-type system of the rows that will be coming back from the query.
}

template<std::size_t N> auto sqlite::query::Prototype::bind_recurrence() -> void {
  // nothing more to do
}

template<std::size_t N, typename TYPE, typename... ARGUMENTS> auto sqlite::query::Prototype::bind_recurrence(TYPE const &value, ARGUMENTS const &...rest) -> void {
  prepared.bind(N, value);
  bind_recurrence<N+1>(rest...);
}
#endiv

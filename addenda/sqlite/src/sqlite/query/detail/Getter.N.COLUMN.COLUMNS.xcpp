// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#forward sqlite.query.detail.Getter
namespace sqlite {
  namespace query {
    namespace detail {
      template<::sqlite::column_index N, typename COLUMN, typename... COLUMNS> struct Getter<N, COLUMN, COLUMNS...>;
    }
  }
}
#endiv
#divert <hpp>
#import sqlite.statement.Shell
#import std.tuple
template<::sqlite::column_index N, typename COLUMN, typename... COLUMNS> struct sqlite::query::detail::Getter<N, COLUMN, COLUMNS...> {
  inline auto operator()(::sqlite::statement::Shell &) -> std::tuple<COLUMN, COLUMNS...>;
};
#endiv
#divert <ipp>
#import sqlite.query.detail.Getter
#import std.tuple_cat
template<::sqlite::column_index N, typename COLUMN, typename... COLUMNS> auto sqlite::query::detail::Getter<N, COLUMN, COLUMNS...>::operator()(::sqlite::statement::Shell &statement) -> std::tuple<COLUMN, COLUMNS...> {
  Getter<N+1, COLUMNS...> reget;
  return std::tuple_cat(std::tuple<COLUMN>(statement.column<COLUMN>(N)), reget(statement));
}
#endiv

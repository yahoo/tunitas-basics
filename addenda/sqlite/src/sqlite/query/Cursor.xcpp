// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sqlite {
  namespace query {
    template<typename UNIQUENESS, typename... COLUMNS> class Cursor;
  }
}
#endiv
#divert <hpp>
namespace sqlite {
  namespace query {
    template<typename UNIQUENESS, typename... COLUMNS> inline auto operator==(Cursor<UNIQUENESS, COLUMNS...> const &, Cursor<UNIQUENESS, COLUMNS...> const &) -> bool;
    template<typename UNIQUENESS, typename... COLUMNS> inline auto operator!=(Cursor<UNIQUENESS, COLUMNS...> const &, Cursor<UNIQUENESS, COLUMNS...> const &) -> bool;
  }
}

#import std.input_iterator_tag
#import std.iterator
#forward sqlite.statement.Shell
#import sqlite.query.Row
#import sqlite.status.Code
template<typename UNIQUENESS, typename... COLUMNS> class sqlite::query::Cursor : public std::iterator<std::input_iterator_tag, std::tuple<UNIQUENESS, COLUMNS...>, void, void, void> {
  using Ancestor = std::iterator<std::input_iterator_tag, std::tuple<UNIQUENESS, COLUMNS...>, void, void, void>;
public:
  using statement_type = ::sqlite::statement::Shell;
  inline Cursor(statement_type &steppable, ::sqlite::status::Code);
  inline auto operator++() -> Cursor &;
  inline auto operator++(int) -> Cursor;
  inline auto operator*() -> Row<UNIQUENESS, COLUMNS...>;
protected:
  statement_type &steppable;
  ::sqlite::status::Code last;
  friend auto operator==<>(Cursor const &, Cursor const &) -> bool;
};
#endiv
#divert <ipp>
#import sqlite.statement.Shell
template<typename UNIQUENESS, typename... COLUMNS> auto sqlite::query::operator==(Cursor<UNIQUENESS, COLUMNS...> const &a, Cursor<UNIQUENESS, COLUMNS...> const &b) -> bool {
  return &a.steppable == &b.steppable && a.last == b.last;
}

template<typename UNIQUENESS, typename... COLUMNS> auto sqlite::query::operator!=(Cursor<UNIQUENESS, COLUMNS...> const &a, Cursor<UNIQUENESS, COLUMNS...> const &b) -> bool {
  return !operator==(a, b);
}

template<typename UNIQUENESS, typename... COLUMNS> sqlite::query::Cursor<UNIQUENESS, COLUMNS...>::Cursor(statement_type &arg_steppable, ::sqlite::status::Code arg_last)
  : steppable(arg_steppable)
  , last(arg_last) {
  ;
}

template<typename UNIQUENESS, typename... COLUMNS> auto sqlite::query::Cursor<UNIQUENESS, COLUMNS...>::operator++() -> Cursor & {
  last = steppable.step();
  return *this;
}

template<typename UNIQUENESS, typename... COLUMNS> auto sqlite::query::Cursor<UNIQUENESS, COLUMNS...>::operator++(int) -> Cursor {
  Cursor old(*this);
  operator++();
  return old;
}

#import sqlite.query.detail.Getter
#import std.tuple_cat
template<typename UNIQUENESS, typename... COLUMNS> auto sqlite::query::Cursor<UNIQUENESS, COLUMNS...>::operator*() -> Row<UNIQUENESS, COLUMNS...> {
  detail::Getter<0, COLUMNS...> get;
  return std::tuple_cat(std::tuple<UNIQUENESS>(), get(steppable));
}
#endiv

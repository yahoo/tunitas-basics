// -*- c++ -*- in the stylings of SCOLD 
#divert <hpp>
#import sqlite.Value
#import sqlite.value.detail.As
namespace sqlite {
  //
  // Scheme:
  //     as<RESULT>(Value<PROTECTED>) -> RESULT
  //     as<RESULT>(Value<UNPROTECTED>) -> RESULT
  //
  // Somewhat like a cast, similar to c::as<RESULT>(SUBJECT)
  // Be able to convert from a protected or unprotected value into ... something else.
  //
  // But of course only Value<PROTECTED> has API variants that support
  // In the unprotected mode, you, the caller, are supposed to know what you had in the first place.
  //
  template<typename PROTECTION, typename RESULT> inline auto as(Value<PROTECTION> &) -> typename value::detail::As<RESULT>::result_type;
}
// there is no #import sqlite.as.Value.UNPROTECTED (you'll use the template and you'll like it)
#entail sqlite.as.Value.PROTECTED
#endiv
#divert <ipp>
#import sqlite.detail
template<typename PROTECTION, typename RESULT> auto sqlite::as(Value<PROTECTION> &) -> typename value::detail::As<RESULT>::result_type {
  static_assert(sqlite::detail::never_allowed<Value<PROTECTION>>::value, "only specializations");
}
#endiv

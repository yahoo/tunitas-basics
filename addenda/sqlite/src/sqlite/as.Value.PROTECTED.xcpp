// -*- c++ -*- in the stylings of SCOLD 
#divert <hpp>
#import sqlite.Value.PROTECTED
#import sqlite.value.detail.As.Value.PROTECTED
namespace sqlite {
  // Yes, we have to pass a nonconst reference
  template<typename RESULT> inline auto as(Value<PROTECTED> &) -> typename value::detail::As<RESULT>::result_type;
}
#endiv
#divert <ipp>
template<typename RESULT> auto sqlite::as(Value<PROTECTED> &value) -> typename value::detail::As<RESULT>::result_type {
  value::detail::As<RESULT> dispatch;
  return dispatch(value.safe());
}
#endiv

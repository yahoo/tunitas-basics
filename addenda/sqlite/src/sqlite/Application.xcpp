// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sqlite {
  enum noinitialize_t { noinitialize };
  class Application;
}
#endiv
#divert <hpp>
#import sqlite.status.Code
#import std.nothrow_t
class sqlite::Application {
public:
  Application();
  Application(noinitialize_t);
  ~Application();
  Application(Application const &) = delete;
  auto operator=(Application const &) -> Application & = delete;
  inline auto initialize() -> void;
  inline auto initialize(std::nothrow_t) -> status::Code;
  inline auto shutdown() -> status::Code;
};
#endiv
#divert <ipp>
#import sqlite.api.session
#import sqlite.status.Code
#import std.runtime_error
auto sqlite::Application::initialize() -> void {
  if (failure(sqlite::api::initialize())) {
    throw std::runtime_error("sqlite initialize");
  }
}

#import sqlite.api
auto sqlite::Application::initialize(std::nothrow_t) -> status::Code {
  // The docs in <sqlite3.h> say we can call this repeatedly, as much as we want
  return sqlite::api::initialize();
}

#import sqlite.api
auto sqlite::Application::shutdown() -> status::Code {
  // The docs in <sqlite3.h> say we can call this repeatedly, as much as we want
  return sqlite::api::shutdown();
}
#endiv
#divert <cpp>
sqlite::Application::Application() {
  // This will throw if the initialization doesn't work out
  initialize();
}

sqlite::Application::Application(noinitialize_t) {
  // Exactly that, no initialization
}

sqlite::Application::~Application() {
  // Ignore the error ... if we throw here in the destructor
  // then the whole process will get continue to std::terminate(...)
  //
  // If you wanted to see the error then you should have
  // made an explicit call to Application::shutdown() earlier.
  shutdown();
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import c.const_stringz
#import sqlite.connection.Shell
#import sqlite.detail.read.Result
#import std.nothrow_t
#import std.string
namespace sqlite {
  // throws ...
  // ... a descendant of std::system_error on failure to read the file
  // ... a descendant of sqlite::exception::Generic on failure to exec the commands
  inline auto read(connection::Shell &, std::string const &filename) -> void;
  // returns the success or status directly
  inline auto read(std::nothrow_t, connection::Shell &, std::string const &filename) -> detail::read::Result;
}
#endiv
#divert <ipp>
#import sqlite.eval
#import slurp.file.read
#import std.is_same
auto sqlite::read(connection::Shell &shell, std::string const &filename) -> void {
  auto contents = slurp::file::read<std::string>(filename);
  static_assert(std::is_same<void, decltype(eval(shell, contents))>::value, "must return void");
  eval(shell, contents);
}

#import slurp.Failure
#import slurp.file.read
#import std.move
#import std.nothrow
#import std.string
auto sqlite::read(std::nothrow_t, connection::Shell &shell, std::string const &filename) -> detail::read::Result {
  try {
    auto contents = slurp::file::read<std::string>(filename);
    auto e = eval(std::nothrow, shell, contents);
    // Upon success or failure, return the same thing
    // Pesky[FIXME?] ... this always constructor-copies the (body) of the filename
    return detail::read::make(code(e), std::error_code(), filename, sql(e));
  } catch (exception::Statement const &f) {
    return detail::read::make(f.code(), std::error_code(), filename, f.sql());
  } catch (exception::Status const &f) {
    return detail::read::make(f.code(), std::error_code(), filename, "some SQL statement");
  } catch (exception::Generic const &f) {
    // Unclear what the sqlite error was...
    return detail::read::make(status::ERROR, std::error_code(), filename, "some SQL statement");
  } catch (slurp::Failure const &f) {
    return detail::read::make(status::ERROR, f.code(), filename, "some SQL statement");
  } 
}
#endiv

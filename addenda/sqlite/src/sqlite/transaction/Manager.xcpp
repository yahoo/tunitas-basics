// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sqlite::transaction {
  //
  // Usage
  //   transaction::Manager xact(conn);      ... is reusable with prepared statements
  //   transaction::Guard guard(xact);       ... is a one-shot transaction guard
  //   guard.begin()
  //   ... do stuff...
  //   if (good) {
  //       guard.end();
  //   } else {
  //       guard.rollback();
  //   }
  //
  class Manager;
}
#endiv
#divert <hpp>
#forward sqlite.transaction.Guard
#import sqlite.transaction.Statements
#import sqlite.connection.Shell
class sqlite::transaction::Manager {
  // as a standalone object,
  // with preparation upon construction
  // stores a separate reference to the connection
public:
  // default construction requires prepare(...) as a 2nd step
  Manager() = default;
  using connection_type = sqlite::connection::Shell;
  inline explicit Manager(connection_type &);
  Manager(Manager const &) = delete;
  auto operator=(Manager const &) -> Manager & = delete;
  // throws on any error; either prepare upon construction or default-construct and prepare in a 2nd step
  inline auto prepare(connection_type &) -> void;
protected:
  friend class transaction::Guard;
  Statements statements;
};
#endiv
#divert <ipp>
sqlite::transaction::Manager::Manager(connection_type &arg_conn)
  : statements(arg_conn) {
  ;
}

auto sqlite::transaction::Manager::prepare(connection_type &conn) -> void {
  statements.prepare(conn);
}
#endiv




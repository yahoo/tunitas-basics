// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sqlite::transaction {
  //
  // Usage
  //   class Database {
  //     Database(connection_type &arg_conn) : conn(arg_conn), xact(conn) { }
  //     connection_type &conn;                ... binds the existing connection
  //     transaction::Preparable xact;         ... prepared with the connection
  //   };
  //
  //   conn ... already... exists
  //   Database db(conn);
  //   transaction::Guard guard(db.xact);       ... is a one-shot transaction guard
  //   guard.begin()
  //   ... do stuff...
  //   if (good) {
  //       guard.end();
  //   } else {
  //       guard.rollback();
  //   }
  //
  class Statements;
}
#endiv
#divert <hpp>
#forward sqlite.transaction.Guard
#forward sqlite.transaction.Manager
#import sqlite.connection.Shell
#import sqlite.Statement
#import sqlite.status.Code
class sqlite::transaction::Statements {
  // For use as a component in a larger scheme; e.g. a "Database" object
public:
  using status_type = sqlite::status::Code;
  using connection_type = sqlite::connection::Shell;
  Statements(Statements const &) = delete;
  auto operator=(Statements const &) -> Statements & = delete;
private:
  friend class transaction::Manager;
  // Either prepare upon construction as RAII
  inline explicit Statements(connection_type &);
  // Or prepare as a second step after default construction
  Statements() = default;
  // throws on any error; either prepare upon construction or default-construct and prepare in a 2nd step
  inline auto prepare(connection_type &) -> void;
protected:
  // NOT storing the 'connection_type &conn' because the Statements is expectee to be part
  // of a larger object (e.g. a Database) that will have the connection)
  friend class transaction::Guard;
  inline static auto prepare_statement_from_literal(connection_type &, char const *literal_sql_statement) -> sqlite::Statement;
  sqlite::Statement begin_transaction;
  sqlite::Statement end_transaction;
  sqlite::Statement rollback_transaction;
};
#endiv
#divert <ipp>
sqlite::transaction::Statements::Statements(connection_type &conn)
  : begin_transaction()
  , end_transaction()
  , rollback_transaction() {
  prepare(conn);
}

auto sqlite::transaction::Statements::prepare(connection_type &conn) -> void {
  begin_transaction = prepare_statement_from_literal(conn, "begin transaction;");
  end_transaction = prepare_statement_from_literal(conn, "end transaction;");
  rollback_transaction = prepare_statement_from_literal(conn, "rollback transaction;");
}

#import std.move
auto sqlite::transaction::Statements::prepare_statement_from_literal(connection_type &conn, char const *literal_sql_statement) -> sqlite::Statement {
  auto r = conn.prepare<sqlite::Statement>(literal_sql_statement);
  check(r);
  return std::move(prepared::value(r)); // avoid namespace 'sqlite::value'
}
#endiv

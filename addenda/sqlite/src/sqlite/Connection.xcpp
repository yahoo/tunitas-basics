// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sqlite {
  class Connection;
}
#endiv
#divert <hpp>
#import sqlite.Application
#import sqlite.status.Code
#import sqlite.connection.Shell
class sqlite::Connection : public sqlite::connection::Shell {
  //
  // Usage;
  //     sqlite::Application a;    <--- initialize the SQLite system
  //     sqlite::Connection c(a);  <--- prove that an application exists
  //     ...use the connection...
  //     auto r = c.prepare<...>(...)
  //
  // Usage:
  //     sqlite::api::unguarded::Connection *pointer = ...unspecified...
  //     sqlite::Connection c(pointer);
  //     ...use the connection...
  //     auto r = c.prepare<...>(...)
  //
  // Reminder:
  // The sqlite::Connection closes the connection upon destruction.
  //
  using Ancestor = sqlite::connection::Shell;
public:
  // This gives us the constructors and assigns which take the unguarded pointer
  // But does not give us the synthetic constructors & assignments because of the existence of ~Statement()
  using Ancestor::Shell;
  using Ancestor::operator=;
  Connection() = default;
  // To create an application, you have to at least show that you have an Application
  inline explicit Connection(Application &);
  // Otherwise you have to supply an unguarded::Connection * (which also demonstrates
  // that you have an Application running.).
  inline explicit Connection(Ancestor::connection_type *);
  inline Connection(connection::Shell &&) throw ();
  inline auto operator=(connection::Shell &&) throw() -> Connection &;
  // n.b. because of the implicit destructor, and the other constructors, the compiler-synthetic
  // move constructor & assign are suppressed; we have to make our own
  inline Connection(Connection &&) throw ();
  inline auto operator=(Connection &&) throw() -> Connection &;
  ~Connection();
};
#import want.is_movable_butnot_copyable
namespace sqlite {
  namespace tests {
    namespace Connection {
      struct require { want::is_movable_butnot_copyable<sqlite::Connection>::assertion a; };
      static_assert(!std::is_copy_constructible<sqlite::Connection>::value, "has become copy constructible (but must not be so constructible)");
      static_assert(std::is_move_constructible<sqlite::Connection>::value, "not move constructible (but must be so constructible)");
      static_assert(!std::is_copy_assignable<sqlite::Connection>::value, "has become copy constructible (but must not be constructible as such)");
      static_assert(std::is_move_assignable<sqlite::Connection>::value, "not move constructible (but must be constructible as such)");
    }
  }
}
#endiv
#divert <ipp>
#import sqlite.api

#import std.forward
sqlite::Connection::Connection(Connection &&anon) throw ()
  : Ancestor(std::forward<Ancestor>(anon)) {
  ;
}

#import std.forward
sqlite::Connection::Connection(connection::Shell &&anon) throw ()
  : Ancestor(std::forward<Ancestor>(anon)) {
  ;
}

auto sqlite::Connection::operator=(Connection &&anon) throw() -> Connection & {
  Ancestor::operator=(std::forward<Ancestor>(anon));
  return *this;
}

auto sqlite::Connection::operator=(connection::Shell &&anon) throw() -> Connection & {
  Ancestor::operator=(std::forward<Ancestor>(anon));
  return *this;
}

sqlite::Connection::Connection(Application &)
  : Ancestor() {
}

sqlite::Connection::Connection(Ancestor::connection_type *arg)
  : Ancestor(arg) {
}
#endiv
#divert <cpp>
#import std.swap
#import sqlite.api.unguarded
sqlite::Connection::~Connection() {
  try {
    decltype(this->unguarded_subject) tmp = nullptr;
    std::swap(tmp, this->unguarded_subject);
    // assumes that api::close is nullptr-safe
    if (nullptr != tmp) {
      api::unguarded::close(tmp);
    }
  } catch (...) {
    // Have to suppress the exception or else we'll end in std::terminate
    // If you wanted to see the errors, then call Connection::close(...) explicitly
  }
}
#endiv

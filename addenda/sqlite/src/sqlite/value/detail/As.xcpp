// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sqlite {
  namespace value {
    namespace detail {
      template<typename RESULT> struct As;
    }
  }
}
// "unboxed" data types
#entail sqlite.value.detail.As.bool
#entail sqlite.value.detail.As.double
#entail sqlite.value.detail.As.int32
#entail sqlite.value.detail.As.int64

// "C" buffer management
#entail sqlite.value.detail.As.const_buffer
#entail sqlite.value.detail.As.const_stringz

// STL data types
#entail sqlite.value.detail.As.basic_string
#entail sqlite.value.detail.As.string
#entail sqlite.value.detail.As.wstring
#entail sqlite.value.detail.As.vector
#entail sqlite.value.detail.As.vector.char
// n.b. there is no vector<wchar_t> because blobs are by definition vector<char>
//      there is no such thing as a "utf16 blob"

// SQLite data types
#entail sqlite.value.detail.As.Null
#endiv
#divert <hpp>
#import sqlite.detail
#forward sqlite.api.unguarded
#import sqlite.value.detail.Result
template<typename RESULT> struct sqlite::value::detail::As: private Result<RESULT> { // private, so the unspecialized template is useless
  static_assert(sqlite::detail::never_allowed<RESULT>::value, "specialzations only");
private:
  using Ancestor = Result<RESULT>;
private:
  // In the specializations, this is called from sqlite::as<RESULT>(Value<PROTECTED> &)
  auto operator()(api::unguarded::Value *) -> typename Ancestor::result_type;
};
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#forward sqlite
#import std.wstring
#import sqlite.value.detail.As
#import sqlite.value.detail.Endian
namespace sqlite {
  namespace value {
    namespace detail {
      template<> class As<be<std::wstring>>;
    }
  }
}
#endiv
#divert <hpp>
#forward sqlite.api.unguarded
#import sqlite.value.detail.Result
template<> class sqlite::value::detail::As<sqlite::value::detail::be<std::wstring>> : public Result<std::wstring> {
  using Ancestor = Result<std::wstring>;
public:
  // Same as As<std::wstring> but it recovers the value via "text16be"
  inline auto operator()(api::unguarded::Value *) -> Ancestor::result_type;
};
#endiv
#divert <ipp>
#include <sqlite3.h>
#import sqlite.c89
#import sqlite.api.lob.Getter
auto sqlite::value::detail::As<sqlite::value::detail::be<std::wstring>>::operator()(api::unguarded::Value *value) -> Ancestor::result_type {
  using will = api::lob::Getter<api::unguarded::Value, wchar_t, c89::utf16>;
  //
  // different at "be"-----------------\ (be)
  //                                   |
  //                                   v
  will const get(::sqlite3_value_text16be, ::sqlite3_value_bytes16);
  auto got = get(value);
  // Copy the data out of SQLite space for return into application space
  std::wstring ret(data(got), size(got));
  return ret;
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sqlite.Value.PROTECTED
#import sqlite.value.detail.As
namespace sqlite {
  namespace value {
    namespace detail {
      // Reminder: there is no As<Value<UNPROTECTED>> at all
      //           that has illegal semantics, so it is unimplemented, and diallowed in the generic template
      template<> class As<Value<PROTECTED>>;
    }
  }
}
#endiv
#divert <hpp>
#import sqlite.value.detail.Result
template<> class sqlite::value::detail::As<sqlite::Value<sqlite::PROTECTED>> : public Result<Value<PROTECTED>> {
  using Ancestor = Result<Value<PROTECTED>>;
public:
  // This is the identity transform.
  // The caller is responsible for ensuring that the value passed has the "protected" nature to it
  inline auto operator()(api::unguarded::Value *) -> Ancestor::result_type;
};
#endiv
#divert <ipp>
auto sqlite::value::detail::As<sqlite::Value<sqlite::PROTECTED>>::operator()(api::unguarded::Value *value) -> Ancestor::result_type {
  Value<PROTECTED> ret(value);
  return ret;
}
#endiv

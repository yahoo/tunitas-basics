// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import c.const_stringz
#import sqlite.prepared.Result
#import sqlite.connection.Shell
#import sqlite.Statement
#import sqlite.statement.Shell
#import sqlite.detail.eval.Result
#import std.function
#import std.nothrow
namespace sqlite {
  // "eval" a SQL program - quit on the first error.
  // like "exec" but ... merely different ... a "native to C++" implementation of exec(...)

  // iterate through (and ignore) all results
  inline auto eval(connection::Shell &, c::const_stringz sql_statements) -> void;
  [[nodiscard]] inline auto eval(std::nothrow_t, connection::Shell &, c::const_stringz sql_statements) -> detail::eval::Result;
  // handle the whole
  inline auto eval(connection::Shell &, c::const_stringz sql_statements, std::function<detail::eval::Result (prepared::Result<statement::Shell> &)>) -> void;
  [[nodiscard]] inline auto eval(std::nothrow_t, connection::Shell &, c::const_stringz sql_statements, std::function<detail::eval::Result (prepared::Result<statement::Shell> &)>) -> detail::eval::Result;
  // once per row until "done"
  inline auto eval(connection::Shell &, c::const_stringz sql_statements, std::function<detail::eval::Result (statement::Shell &)>) -> void;
  [[nodiscard]] inline auto eval(std::nothrow_t, connection::Shell &, c::const_stringz sql_statements, std::function<detail::eval::Result (statement::Shell &)>) -> detail::eval::Result;
}
#endiv
#divert <ipp>
#import sqlite.detail.eval.process
#import sqlite.detail.eval.lessthrowing

auto sqlite::eval(connection::Shell &shell, c::const_stringz sql_statements) -> void {
  auto processed = detail::eval::process(shell, sql_statements);
  check(processed);
}

auto sqlite::eval(std::nothrow_t, connection::Shell &shell, c::const_stringz sql_statements) -> detail::eval::Result {
  auto activity = [&shell, &sql_statements]() -> detail::eval::Result {
    return detail::eval::process(shell, sql_statements);
  };
  return detail::eval::lessthrowing(activity);
}

auto sqlite::eval(connection::Shell &shell, c::const_stringz sql_statements, std::function<detail::eval::Result (prepared::Result<statement::Shell> &)> thunk) -> void {
  auto processed = detail::eval::process(shell, sql_statements, thunk);
  check(processed);
}

auto sqlite::eval(std::nothrow_t, connection::Shell &shell, c::const_stringz sql_statements, std::function<detail::eval::Result (statement::Shell &)> thunk) -> detail::eval::Result {
  auto activity = [&shell, sql_statements, &thunk]() -> detail::eval::Result {
    return detail::eval::process(shell, sql_statements, thunk);
  };
  return detail::eval::lessthrowing(activity);
}

auto sqlite::eval(connection::Shell &shell, c::const_stringz sql_statements, std::function<detail::eval::Result (statement::Shell &)> thunk) -> void {
  auto processed = detail::eval::process(shell, sql_statements, thunk);
  check(processed);
}

auto sqlite::eval(std::nothrow_t, connection::Shell &shell, c::const_stringz sql_statements, std::function<detail::eval::Result (prepared::Result<statement::Shell> &)> thunk) -> detail::eval::Result {
  auto activity = [&shell, sql_statements, &thunk]() -> detail::eval::Result {
    return detail::eval::process(shell, sql_statements, thunk);
  };
  return detail::eval::lessthrowing(activity);
}
#endiv

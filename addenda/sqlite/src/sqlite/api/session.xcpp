// -*- c++ -*- in the stylings of SCOLD 
#divert <hpp>
#import c.const_stringz
#import sqlite.status.Code
#import sqlite.open.Flags
#import std.basic_string

#import sqlite.connection.Shell
namespace sqlite {
  namespace api {

    inline auto initialize(void) -> status::Code;
    inline auto shutdown(void) -> status::Code;

    inline auto open(c::const_stringz filename, connection::Shell &fill) -> status::Code;
    inline auto open(c::const_stringz filename, connection::Shell &fill, sqlite::open::Flags flags) -> status::Code;
    inline auto open(c::const_stringz filename, connection::Shell &fill, sqlite::open::Flags flags, c::const_stringz vfs) -> status::Code;
    template<typename CHAR, typename TRAITS, typename ALLOC> inline auto open(std::basic_string<CHAR, TRAITS, ALLOC> const &filename, connection::Shell &) -> status::Code;
    inline auto open(sqlite::open::Name location, connection::Shell &fill) -> status::Code;
    inline auto open(sqlite::open::Name location, connection::Shell &fill, sqlite::open::Flags flags) -> status::Code;
    inline auto open(sqlite::open::Name location, connection::Shell &fill, sqlite::open::Flags flags, c::const_stringz vfs) -> status::Code;

    inline auto close(connection::Shell &) -> status::Code;
  }
}
#endiv
#divert <ipp>
#include <sqlite3.h>
#import sqlite.api.unguarded

auto sqlite::api::initialize(void) -> status::Code {
  return (status::Code)::sqlite3_initialize();
}

auto sqlite::api::shutdown(void) -> status::Code {
  return (status::Code)::sqlite3_shutdown();
}

auto sqlite::api::open(c::const_stringz filename, connection::Shell &fill) -> status::Code {
  return unguarded::open(filename, fill.unguarded());
}

auto sqlite::api::open(c::const_stringz filename, connection::Shell &fill, sqlite::open::Flags flags) -> status::Code {
  return unguarded::open(filename, fill.unguarded(), flags);
}

auto sqlite::api::open(c::const_stringz filename, connection::Shell &fill, sqlite::open::Flags flags, c::const_stringz vfs) -> status::Code {
  return unguarded::open(filename, fill.unguarded(), flags, vfs);
}

template<typename CHAR, typename TRAITS, typename ALLOC> auto sqlite::api::open(std::basic_string<CHAR, TRAITS, ALLOC> const &filename, connection::Shell &fill) -> status::Code {
  return unguarded::open(filename, fill.unguarded());
}

auto sqlite::api::open(sqlite::open::Name location, connection::Shell &fill) -> status::Code {
  return unguarded::open(location, fill.unguarded());
}

auto sqlite::api::open(sqlite::open::Name location, connection::Shell &fill, sqlite::open::Flags flags) -> status::Code {
  return unguarded::open(location, fill.unguarded(), flags);
}

auto sqlite::api::open(sqlite::open::Name location, connection::Shell &fill, sqlite::open::Flags flags, c::const_stringz vfs) -> status::Code {
  return unguarded::open(location, fill.unguarded(), flags, vfs);
}

auto sqlite::api::close(connection::Shell &connection) -> status::Code {
  return unguarded::close(connection.safe());
}
#endiv

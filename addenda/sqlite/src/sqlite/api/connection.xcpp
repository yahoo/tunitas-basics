// -*- c++ -*- in the stylings of SCOLD 
#divert <hpp>
#forward sqlite
#import c.const_stringz
#import sqlite.status.Code
#import std.numeric_limits
#import std.basic_string
#import std.string

#import sqlite.connection.Shell
#import sqlite.statement.Shell
#import sqlite.prepared.Result
#import sqlite.prepared.BasicResult
namespace sqlite {
  namespace api {
    inline auto extended_result_codes(connection::Shell &, bool onoff) -> status::Code;
    inline auto last_insert_rowid(connection::Shell &) -> int64;

    inline auto errcode(connection::Shell &) -> status::Code;
    inline auto extended_errcode(connection::Shell &) -> status::Code;
    inline auto errmsg(connection::Shell &) -> std::string;

    // ATTACH filename AS name; 
    inline auto attach(connection::Shell &, c::const_stringz filename, c::const_stringz name) -> status::Code;
    // DETACH name;
    inline auto detach(connection::Shell &, c::const_stringz name) -> status::Code;

    // Multi-statement exec, but without the callback machinery
    inline auto exec(connection::Shell &, c::const_stringz statement) -> status::Code;

    // Support the original scheme in the API to "walk down a very large '\0'-terminated buffer"
    // STATEMENT is { sqlite::Statement | sqlite::statement::Shell }
    template<typename STATEMENT> inline auto prepare(connection::Shell &, char const *sql_syntax, std::size_t limit = std::numeric_limits<std::size_t>::max()) -> prepared::Result<STATEMENT>;
    // Support other "string-like" data types
    template<typename STATEMENT> inline auto prepare(connection::Shell &, c::const_stringz sql_syntax, std::size_t limit = std::numeric_limits<std::size_t>::max()) -> prepared::Result<STATEMENT>;
    // Even unto SQL syntax in UTF16
    template<typename STATEMENT, typename CHAR, typename TRAITS, typename ALLOC> inline auto prepare(connection::Shell &, std::basic_string<CHAR, TRAITS, ALLOC> const &sql_syntax, std::size_t limit = std::numeric_limits<std::size_t>::max())-> prepared::BasicResult<STATEMENT, CHAR const *>;

  }
}
#endiv
#divert <ipp>
#include <sqlite3.h>
#import sqlite.api.unguarded

auto sqlite::api::extended_result_codes(connection::Shell &connection, bool onoff) -> status::Code {
  return unguarded::extended_result_codes(connection.safe(), onoff);
}

auto sqlite::api::last_insert_rowid(connection::Shell &connection) -> int64 {
  return unguarded::last_insert_rowid(connection.safe());
}

auto sqlite::api::errcode(connection::Shell &connection) -> status::Code {
  return unguarded::errcode(connection.safe());
}

auto sqlite::api::extended_errcode(connection::Shell &connection) -> status::Code {
  return unguarded::extended_errcode(connection.safe());
}

auto sqlite::api::errmsg(connection::Shell &connection) -> std::string {
  return unguarded::errmsg(connection.safe());
}

auto sqlite::api::attach(connection::Shell &connection, c::const_stringz filename, c::const_stringz name) -> status::Code {
  return unguarded::attach(connection.safe(), filename.data(), name.data());
}

auto sqlite::api::detach(connection::Shell &connection, c::const_stringz name) -> status::Code {
  return unguarded::detach(connection.safe(), name.data());
}

auto sqlite::api::exec(connection::Shell &connection, c::const_stringz statement) -> status::Code {
  return unguarded::exec(connection.safe(), statement.data());
}

#import std.move
#import sqlite.prepared.Result
template<typename STATEMENT> auto sqlite::api::prepare(connection::Shell &connection, char const *sql_syntax, std::size_t limit) -> prepared::Result<STATEMENT> {
  using result_type = prepared::Result<STATEMENT>;
  auto ung = unguarded::prepare<char const *>(connection.safe(), sql_syntax, limit);
  STATEMENT restate(prepared::value(ung)); // n.b. this is a "move"-type accessor and constructor.
  auto adl = typename result_type::adl_type();
  result_type ret(adl, code(ung), std::move(restate), prepared::remaining(ung));
  // WATCHOUT - do NOT depend upon RVO here to "move" the return value out
  //            Under RVO, the ret will destruct and kill the Statement with it.
  return ret;
}

#import std.move
template<typename STATEMENT> auto sqlite::api::prepare(connection::Shell &connection, c::const_stringz sql_syntax, std::size_t limit) -> prepared::Result<STATEMENT> {
  // WATCHOUT - don't let RVO do a copy-and-destruct here; we want to slide the result upwards without destruction
  return std::move(prepare<STATEMENT>(connection, sql_syntax.data(), limit));
}

#import std.move
#import sqlite.prepared.BasicResult
template<typename STATEMENT, typename CHAR, typename TRAITS, typename ALLOC> auto sqlite::api::prepare(connection::Shell &connection, std::basic_string<CHAR, TRAITS, ALLOC> const &sql_syntax, std::size_t limit) -> prepared::BasicResult<STATEMENT, CHAR const *> {
  using result_type = prepared::BasicResult<STATEMENT, CHAR const *>;
  auto ung = unguarded::prepare<CHAR const *>(connection.safe(), sql_syntax, limit);
  STATEMENT restate(prepared::value(ung));
  // FIXME ... the remaining(ung) is a 'CHAR const *' but we're working with std::basic_string
  // so it will be inconvenient to take the remaining as a continuation for the subsequent call.
  auto adl = typename result_type::adl_type();
  result_type ret(adl, code(ung), std::move(restate), remaining(ung));
  // WATCHOUT - do NOT depend upon RVO here to "move" the return value out
  //            Under RVO, the ret will destruct and kill the Statement with it.
  return ret;
}
#endiv

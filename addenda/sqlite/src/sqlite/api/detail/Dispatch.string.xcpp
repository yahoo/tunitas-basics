// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sqlite.api.detail.Dispatch.basic_string
#import std.string
namespace sqlite {
  namespace api {
    namespace detail {
      template<> struct Dispatch<std::string>;
    } 
  }
}
#endiv
#divert <hpp>
template<> struct sqlite::api::detail::Dispatch<std::string> {
  using value_type = std::string;
  inline auto bind(unguarded::Statement *, bind_index, Bind<value_type>::argument_type value) -> Bind<value_type>::result_type;
  inline auto column(unguarded::Statement *, column_index) -> Column<value_type>::result_type;
  inline auto result(unguarded::Function *, typename Result<value_type>::argument_type) -> typename Result<value_type>::result_type;
  inline auto parameter(unguarded::Value *) -> typename Parameter<value_type>::result_type;
};
#endiv
#divert <ipp>
#include <sqlite3.h>
#import sqlite.api.unguarded

auto sqlite::api::detail::Dispatch<std::string>::bind(unguarded::Statement *statement, bind_index idx, Bind<std::string>::argument_type value) -> Bind<std::string>::result_type {
  Bind<value_type>::destructor gozer;
  return (status::Code)::sqlite3_bind_text(statement, idx, value.data(), value.size(), gozer.target());
}

#import sqlite.api.lob.Getter
auto sqlite::api::detail::Dispatch<std::string>::column(unguarded::Statement *statement, column_index idx) -> Column<std::string>::result_type {
  lob::Getter<unguarded::Statement, char, c89::utf8> const get(::sqlite3_column_text, ::sqlite3_column_bytes);
  auto got = get(statement, idx);
  // Copy the character data out of SQLite and into "our" space
  std::string ret(data(got), size(got));
  return ret;
}

#import std.is_same
auto sqlite::api::detail::Dispatch<std::string>::result(unguarded::Function *function, typename Result<value_type>::argument_type value) -> typename Result<value_type>::result_type {
  static_assert(std::is_same<void, Result<value_type>::result_type>::value, "not void");
  static_assert(std::is_same<void, decltype(::sqlite3_result_text(function, nullptr, 0, nullptr))>::value, "not void");
  Result<value_type>::destructor gozer; 
  ::sqlite3_result_text(function, value.data(), value.size(), gozer.target());
}

auto sqlite::api::detail::Dispatch<std::string>::parameter(unguarded::Value *value) -> typename Parameter<value_type>::result_type {
  lob::Getter<unguarded::Value, char, c89::utf8> const get(::sqlite3_value_text, ::sqlite3_value_bytes);
  auto got = get(value);
  // Copy the character data out of SQLite and into "our" space
  std::string ret(data(got), size(got));
  return ret;
}
#endiv

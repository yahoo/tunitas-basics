// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sqlite.api.detail.Dispatch.Value
#import sqlite.Value
namespace sqlite {
  namespace api {
    namespace detail {
      template<> struct Dispatch<Value<PROTECTED>>;
    } 
  }
}
#endiv
#divert <hpp>
#import sqlite.Value.PROTECTED
#import sqlite.api.detail.PartialDispatchOfValue
template<> struct sqlite::api::detail::Dispatch<sqlite::Value<sqlite::PROTECTED>> : public PartialDispatchOfValue<Value<PROTECTED>> {
  //
  // Reminder (these are already available) from the Ancestor:
  //
  //    value_type
  //    auto bind(... Value<PROTECTED> ...) -> status::Code
  //    auto result(... Value<PROTECTED> ...) -> void
  //
  inline auto parameter(unguarded::Value *) -> Parameter<value_type>::result_type;
  //
  // not available at all
  //     auto column(...) -> Value<PROTECTED>
};
#endiv
#divert <ipp>
auto sqlite::api::detail::Dispatch<sqlite::Value<sqlite::PROTECTED>>::parameter(unguarded::Value *value) -> Parameter<value_type>::result_type {
  // This won't even throw if the value is inappropriately unprotected or is nullptr
  value_type ret(value);
  return ret;
}
#endiv

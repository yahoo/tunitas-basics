// -*- c++ -*- in the stylings of SCOLD 
#divert <fpp>
#forward sqlite.api.detail.Parameter
#import std.vector
namespace sqlite {
  namespace api {
    namespace detail {
      template<typename CHAR, typename ALLOC> struct Parameter<std::vector<CHAR, ALLOC>>;
    } 
  }
}
#endiv
#divert <hpp>
#import sqlite.api.detail.Parameter
#import sqlite.detail
#import sqlite.detail.ResultSFINAE
template<typename CHAR, typename ALLOC> struct sqlite::api::detail::Parameter<std::vector<CHAR, ALLOC>>
  // You have to use the specializations against the "standard" string types: std::string, std::wstring
  : private sqlite::detail::ResultSFINAE<std::vector<CHAR, ALLOC>>
  , public sqlite::detail::specialization_is_invalid
{ };
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#forward sqlite.api.detail.Dispatch
#import std.basic_string
namespace sqlite {
  namespace api {
    namespace detail {
      template<typename CHAR, typename TRAITS, typename ALLOC> struct Dispatch<std::basic_string<CHAR, TRAITS, ALLOC>>;
    } 
  }
}
#entail sqlite.api.detail.Dispatch.string
#entail sqlite.api.detail.Dispatch.wstring
#endiv
#divert <hpp>
#import sqlite.api.detail.Dispatch
#import sqlite.api.detail.Bind
#import sqlite.api.detail.Column
#import sqlite.api.detail.Result
#import sqlite.api.detail.Parameter
template<typename CHAR, typename TRAITS, typename ALLOC> struct sqlite::api::detail::Dispatch<std::basic_string<CHAR, TRAITS, ALLOC>> {
  using value_type = std::basic_string<CHAR, TRAITS, ALLOC>;
  inline auto bind(unguarded::Statement *, bind_index, typename Bind<value_type>::argument_type value) -> typename Bind<value_type>::result_type;
  inline auto column(unguarded::Statement *, column_index) -> typename Column<value_type>::result_type;
  inline auto result(unguarded::Function *, typename Result<value_type>::argument_type) -> typename Result<value_type>::result_type;
  inline auto parameter(unguarded::Value *) -> typename Parameter<value_type>::result_type;
};
#endiv
#divert <ipp>
#import sqlite.detail

template<typename CHAR, typename TRAITS, typename ALLOC> auto sqlite::api::detail::Dispatch<std::basic_string<CHAR, TRAITS, ALLOC>>::bind(unguarded::Statement *, bind_index, typename Bind<value_type>::argument_type) -> typename Bind<value_type>::result_type {
  static_assert(Bind<value_type>::is_valid, "only specializations, only the specialization of the 'usual' string types");
  static_assert(sqlite::detail::never_allowed<value_type>::value, "only specializations, only the specialization of the 'usual' string types");
}

template<typename CHAR, typename TRAITS, typename ALLOC> auto sqlite::api::detail::Dispatch<std::basic_string<CHAR, TRAITS, ALLOC>>::column(unguarded::Statement *, column_index) -> typename Column<value_type>::result_type {
  static_assert(Column<value_type>::is_valid, "only specializations, only the specialization of the 'usual' string types");
  static_assert(sqlite::detail::never_allowed<value_type>::value, "only specializations, only the specialization of the 'usual' string types");
}

template<typename CHAR, typename TRAITS, typename ALLOC> auto sqlite::api::detail::Dispatch<std::basic_string<CHAR, TRAITS, ALLOC>>::result(unguarded::Function *, typename Result<value_type>::argument_type) -> typename Result<value_type>::result_type {
  static_assert(Result<value_type>::is_valid, "only specializations, only the specialization of the 'usual' string types");
  static_assert(sqlite::detail::never_allowed<value_type>::value, "only specializations, only the specialization of the 'usual' string types");
}

template<typename CHAR, typename TRAITS, typename ALLOC> auto sqlite::api::detail::Dispatch<std::basic_string<CHAR, TRAITS, ALLOC>>::parameter(unguarded::Value *) -> typename Parameter<value_type>::result_type {
  static_assert(Parameter<value_type>::is_valid, "only specializations, only the specialization of the 'usual' string types");
  static_assert(sqlite::detail::never_allowed<value_type>::value, "only specializations, only the specialization of the 'usual' string types");
}
#endiv

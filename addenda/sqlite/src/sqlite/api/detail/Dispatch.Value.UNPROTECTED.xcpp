// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sqlite.api.detail.Dispatch.Value
#import sqlite.Value
namespace sqlite {
  namespace api {
    namespace detail {
      template<> struct Dispatch<Value<UNPROTECTED>>;
    } 
  }
}
#endiv
#divert <hpp>
#import sqlite.Value.UNPROTECTED
#import sqlite.api.detail.PartialDispatchOfValue
template<> struct sqlite::api::detail::Dispatch<sqlite::Value<sqlite::UNPROTECTED>> : public PartialDispatchOfValue<Value<UNPROTECTED>> {
  //
  // Reminder (these are already available) from the Ancestor:
  //
  //    value_type
  //    auto bind(... Value<UNPROTECTED> ...) -> status::Code
  //    auto result(... Value<UNPROTECTED> ...) -> void
  //
  inline auto column(unguarded::Statement *, column_index) -> typename Column<value_type>::result_type;
  //
  // not available at all
  //     auto parameter(...) -> Value<UNPROTECTED>
  //
};
#endiv
#divert <ipp>
#include <sqlite3.h>
auto sqlite::api::detail::Dispatch<sqlite::Value<sqlite::UNPROTECTED>>::column(unguarded::Statement *statement, column_index idx) -> Column<value_type>::result_type {
  auto raw = ::sqlite3_column_value(statement, idx);
  value_type ret(raw);
  return ret;
}
#endiv

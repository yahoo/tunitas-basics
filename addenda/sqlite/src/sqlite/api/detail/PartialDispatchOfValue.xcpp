// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sqlite {
  namespace api {
    namespace detail {
      //
      // The expectation is that VALUE is one of
      //     Value<PROTECTED>
      //     Value<UNPROTECTED>
      //
      template<typename VALUE> struct PartialDispatchOfValue;
      //
      // Reminders:
      //
      //     bind(...) -> status::Code             allows either Value<UNPROTECTED> or Value<PROTECTED>
      //     result(...) -> void                   allows either Value<UNPROTECTED> or Value<PROTECTED>
      //
      //     column(...) -> Value<UNPROTECTED>     requires Value<UNPROTECTED>
      //     parameter(...) -> Value<PROTECTED>    requires Value<PROTECTED>
      //
    } 
  }
}
#endiv
#divert <hpp>
#import sqlite.api.unguarded
#import sqlite.api.detail.Bind
#import sqlite.api.detail.Result
template<typename VALUE> struct sqlite::api::detail::PartialDispatchOfValue {
  using value_type = VALUE;
  inline auto bind(unguarded::Statement *, bind_index, typename Bind<value_type>::argument_type value) -> typename Bind<value_type>::result_type;
  // only available in the descendant specialized against Value<UNPROTECTED>
  //     auto column(...) -> Value<UNPROTECTED>
  inline auto result(unguarded::Function *, typename Result<value_type>::argument_type) -> typename Result<value_type>::result_type;
  // only available in the descendant specialized against Value<PROTECTED>
  //     auto parameter(...) -> Value<PROTECTED>
};
#endiv
#divert <ipp>
#include <sqlite3.h>
template<typename VALUE> auto sqlite::api::detail::PartialDispatchOfValue<VALUE>::bind(unguarded::Statement *statement, bind_index idx, typename Bind<value_type>::argument_type value) -> typename Bind<value_type>::result_type {
  return ::sqlite3_bind_value(statement, idx, value.safe());
}

#import std.is_same
template<typename VALUE> auto sqlite::api::detail::PartialDispatchOfValue<VALUE>::result(unguarded::Function *function, typename Result<value_type>::argument_type value) -> typename Result<value_type>::result_type {
  static_assert(std::is_same<void, typename Result<value_type>::result_type>::value, "not void");
  static_assert(std::is_same<void, decltype(::sqlite3_result_value(function, nullptr))>::value, "not void");
  ::sqlite3_result_value(function, value.safe());
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#forward sqlite.api.detail.Column
#import sqlite.Value
namespace sqlite {
  namespace api {
    namespace detail {
      template<typename PROTECTION> struct Column<Value<PROTECTION>>;
    } 
  }
}
#endiv
#divert <hpp>
#import sqlite.api.detail.Column
#import sqlite.detail
#import sqlite.detail.ResultSFINAE
template<typename PROTECTION> struct sqlite::api::detail::Column<sqlite::Value<PROTECTION>>
  // This is private, result-type being irrelevant, so the general Column<Value<PROTECTION>> is useless
  // The specialization for Value<UNPROTECTED> is useful, is not invalid.
  : private sqlite::detail::ResultSFINAE<Value<PROTECTION>>
  , public sqlite::detail::specialization_is_invalid
{ };
#endiv

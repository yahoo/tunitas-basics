// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sqlite {
  namespace api {
    namespace detail {
      template<typename VALUE> struct Dispatch;
    } 
  }
}
// "unboxed" types
#entail sqlite.api.detail.Dispatch.bool
#entail sqlite.api.detail.Dispatch.double
#entail sqlite.api.detail.Dispatch.int32
#entail sqlite.api.detail.Dispatch.int64

// "C" buffer management
#entail sqlite.api.detail.Dispatch.const_buffer
#entail sqlite.api.detail.Dispatch.const_stringn
#entail sqlite.api.detail.Dispatch.const_stringz

// STL types
#entail sqlite.api.detail.Dispatch.basic_string
#entail sqlite.api.detail.Dispatch.string
#entail sqlite.api.detail.Dispatch.wstring

#entail sqlite.api.detail.Dispatch.vector
#entail sqlite.api.detail.Dispatch.vector.char

// SQLite data types
#entail sqlite.api.detail.Dispatch.Null
#entail sqlite.api.detail.Dispatch.Value
#entail sqlite.api.detail.Dispatch.Value.PROTECTED
#entail sqlite.api.detail.Dispatch.Value.UNPROTECTED
#entail sqlite.api.detail.Dispatch.Zeroblob
#endiv
#divert <hpp>
#forward sqlite // for column_index
#forward sqlite.api.unguarded // for api::Statement
#import sqlite.api.detail.Bind
#import sqlite.api.detail.Column
#import sqlite.api.detail.Parameter
#import sqlite.api.detail.Result
template<typename VALUE> struct sqlite::api::detail::Dispatch {
  using value_type = VALUE;
  inline auto bind(unguarded::Statement *, bind_index, typename Bind<value_type>::argument_type) -> typename Bind<value_type>::result_type;
  inline auto column(unguarded::Statement *, column_index) -> typename Column<value_type>::result_type;
  inline auto result(unguarded::Function *, typename Result<value_type>::argument_type) -> typename Result<value_type>::result_type;
  inline auto parameter(unguarded::Value *) -> typename Parameter<value_type>::result_type;
};
#endiv
#divert <ipp>
template<typename VALUE> auto sqlite::api::detail::Dispatch<VALUE>::bind(unguarded::Statement *, bind_index, typename Bind<value_type>::argument_type) -> typename Bind<value_type>::result_type {
  static_assert(Bind<value_type>::is_valid, "specialization is required");
  static_assert(sqlite::detail::never_allowed<value_type>::value, "only specializations");
}

template<typename VALUE> auto sqlite::api::detail::Dispatch<VALUE>::column(unguarded::Statement *, column_index) -> typename Column<value_type>::result_type {
  static_assert(Column<value_type>::is_valid, "specialization is required");
  static_assert(sqlite::detail::never_allowed<value_type>::value, "only specializations");
}

template<typename VALUE> auto sqlite::api::detail::Dispatch<VALUE>::result(unguarded::Function *, typename Result<value_type>::argument_type) -> typename Result<value_type>::result_type {
  static_assert(Result<value_type>::is_valid, "specialization is required");
  static_assert(sqlite::detail::never_allowed<value_type>::value, "only specializations");
}

template<typename VALUE> auto sqlite::api::detail::Dispatch<VALUE>::parameter(unguarded::Value *) -> typename Parameter<value_type>::result_type {
  static_assert(Parameter<value_type>::is_valid, "specialization is required");
  static_assert(sqlite::detail::never_allowed<value_type>::value, "only specializations");
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sqlite.api.detail.Dispatch
#import sqlite.Zeroblob
namespace sqlite {
  namespace api {
    namespace detail {
      template<> class Dispatch<Zeroblob>;
    }
  }
}
#endiv
#divert <hpp>
#forward sqlite.api.unguarded
template<> struct sqlite::api::detail::Dispatch<sqlite::Zeroblob> {
  using value_type = Zeroblob;
  inline auto bind(unguarded::Statement *, bind_index, Bind<value_type>::argument_type) -> Bind<value_type>::result_type;
  // NONSENSICAL auto Dispatch<Zeroblob>::column(...)
  inline auto result(unguarded::Function *function, typename Result<value_type>::argument_type value) -> typename Result<value_type>::result_type;
  // NONSENSICAL auto Dispatch<Zeroblob>::parameter(...)
};
#endiv
#divert <ipp>
#include <sqlite3.h>

auto sqlite::api::detail::Dispatch<sqlite::Zeroblob>::bind(unguarded::Statement *statement, bind_index idx, Zeroblob value) -> Bind<Zeroblob>::result_type {
  return (status::Code)::sqlite3_bind_zeroblob(statement, idx, value.count());
}

#import std.is_same
auto sqlite::api::detail::Dispatch<sqlite::Zeroblob>::result(unguarded::Function *function, typename Result<value_type>::argument_type value) -> typename Result<value_type>::result_type {
  static_assert(std::is_same<void, Result<value_type>::result_type>::value, "not void");
  static_assert(std::is_same<void, decltype(::sqlite3_result_zeroblob(function, 0))>::value, "not void");
  ::sqlite3_result_zeroblob(function, value.count());
}
#endiv

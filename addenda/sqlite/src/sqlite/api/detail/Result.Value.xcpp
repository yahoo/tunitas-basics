// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#forward sqlite.api.detail.Result
#import sqlite.Value
namespace sqlite {
  namespace api {
    namespace detail {
      template<typename PROTECTION> struct Result<Value<PROTECTION>>;
    } 
  }
}
#endiv
#divert <hpp>
#import sqlite.api.detail.Result
#import sqlite.detail
#import sqlite.detail.ResultSFINAE
template<typename PROTECTION> struct sqlite::api::detail::Result<sqlite::Value<PROTECTION>>
  // ^A [protected sqlite3_value] object may always be used where an
  // [unprotected sqlite3_value] object is required, so either kind of
  // [sqlite3_value] object can be used with the [sqlite3_result] interface.
  //
  // and we have to pass Value<PROTECTION> by non-const reference
  // or equivalently, pass-by-value as the Value shell just copies the managed pointer
  : public sqlite::detail::ResultSFINAE<void>
  , public sqlite::detail::pass_by_reference<Value<PROTECTION>>
  , public sqlite::detail::specialization_is_invalid
{ };
#endiv

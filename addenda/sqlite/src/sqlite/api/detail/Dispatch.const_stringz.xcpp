// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#forward sqlite.api.detail.Dispatch
#import c.const_stringz
namespace sqlite {
  namespace api {
    namespace detail {
      template<> struct Dispatch<c::const_stringz>;
    }
  }
}
#endiv
#divert <hpp>
#import sqlite.api.unguarded
template<> struct sqlite::api::detail::Dispatch<c::const_stringz> {
  using value_type = c::const_stringz;
  inline auto bind(unguarded::Statement *, bind_index, typename Bind<value_type>::argument_type) -> typename Bind<value_type>::result_type;
  // NO SUCH ... ill-posed ... auto column(unguarded::Statement *, column_index) -> typename Column<value_type>::result_type;
  inline auto result(unguarded::Function *, typename Result<value_type>::argument_type) -> typename Result<value_type>::result_type;
  // NO SUCH ... ill-posed ... auto parameter(unguarded::Value *) -> typename Parameter<value_type>::result_type;
};
#endiv
#divert <ipp>
#include <sqlite3.h>
#import sqlite.api.unguarded

auto sqlite::api::detail::Dispatch<c::const_stringz>::bind(unguarded::Statement *statement, bind_index idx, c::const_stringz value) -> Bind<value_type>::result_type {
  Bind<value_type>::destructor gozer;
  return (status::Code)::sqlite3_bind_text(statement, idx, value.data(), value.size(), gozer.target());
}

#import sqlite.api.lob.Getter
#if 0
#import c.const_stringn
// WATCHOUT - this implementation is ill-posed because trying to extract out a '\0'-terminated datum is invalid
auto sqlite::api::detail::Dispatch<c::const_stringz>::column(unguarded::Statement *statement, column_index idx) -> Column<value_type>::result_type {
  lob::Getter<unguarded::Statement, char, c89::utf8> const get(::sqlite3_column_text, ::sqlite3_column_bytes);
  auto got = get(statement, idx);
  // WATCHOUT - the data is NOT copied out of SQLite space, the pointers continue to point across the boundary
  // and no need to access size(got) because stringz computes its own size on-site (internally, depending on the '\0' sentinel)
  c::const_stringz ret(data(got));
  // WATCHOUT - there is no implicit '\0' terminator here. DO. NOT. USE.
  return ret;
}
#endif

#import std.is_same
auto sqlite::api::detail::Dispatch<c::const_stringz>::result(unguarded::Function *function, typename Result<value_type>::argument_type value) -> typename Result<value_type>::result_type {
  static_assert(std::is_same<void, Result<value_type>::result_type>::value, "not void");
  static_assert(std::is_same<void, decltype(::sqlite3_result_text(function, nullptr, 0, nullptr))>::value, "not void");
  Result<value_type>::destructor gozer;
  return ::sqlite3_result_text(function, value.data(), value.size(), gozer.target());
}

#if 0
// WATCHOUT - this implementation is ill-posed because trying to extract out a '\0'-terminated datum is invalid
auto sqlite::api::detail::Dispatch<c::const_stringz>::parameter(unguarded::Value *value) -> typename Parameter<value_type>::result_type {
  lob::Getter<unguarded::Value, char, c89::utf8> const get(::sqlite3_value_text, ::sqlite3_value_bytes);
  auto got = get(value);
  // WATCHOUT - the data is NOT copied out of SQLite space, the pointers continue to point across the boundary
  // and no need to access size(got) because stringz computes its own size on-site (internally, depending on the '\0' sentinel)
  c::const_stringz ret(data(got));
  return ret;
}
#endif
#endiv

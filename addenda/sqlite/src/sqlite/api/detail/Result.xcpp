// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sqlite {
  namespace api {
    namespace detail {
      // The traits for the "function result" the "sqlite3_result" family
      template<typename VALUE> struct Result;
    } 
  }
}
// builtins
#entail sqlite.api.detail.Result.bool
#entail sqlite.api.detail.Result.double
#entail sqlite.api.detail.Result.int32
#entail sqlite.api.detail.Result.int64
// recall: no 'int unsigned' variants because SQLite does not support such.

// "C" data types
#entail sqlite.api.detail.Result.const_buffer
#entail sqlite.api.detail.Result.const_stringn
#entail sqlite.api.detail.Result.const_stringz

// STL data types
#entail sqlite.api.detail.Result.basic_string
#entail sqlite.api.detail.Result.string
#entail sqlite.api.detail.Result.wstring
#entail sqlite.api.detail.Result.vector
#entail sqlite.api.detail.Result.vector.char

// SQLite data types
#entail sqlite.api.detail.Result.Null
#entail sqlite.api.detail.Result.Value
#entail sqlite.api.detail.Result.Zeroblob
#endiv
#divert <hpp>
#import sqlite.detail
#import sqlite.detail.ResultSFINAE
template<typename VALUE> struct sqlite::api::detail::Result
  : private sqlite::detail::ResultSFINAE<void> // private, so the unspecialized template is useless
  , public sqlite::detail::pass_by_value<VALUE>
  , public sqlite::detail::specialization_is_invalid
{ };
#endiv

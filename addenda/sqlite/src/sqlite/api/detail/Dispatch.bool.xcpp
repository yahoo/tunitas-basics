// -*- c++ -*- in the stylings of SCOLD 
#divert <hpp>
#import sqlite.api.detail.Dispatch
#import std.is_same
namespace sqlite {
  namespace api {
    namespace detail {
      static_assert(std::is_same<bool, Dispatch<bool>::value_type>::value, "not a bool?!");
      template<> inline auto Dispatch<bool>::bind(unguarded::Statement *, bind_index, Bind<value_type>::argument_type) -> Bind<value_type>::result_type;
      template<> inline auto Dispatch<bool>::column(unguarded::Statement *, column_index) -> Column<value_type>::result_type;
      template<> inline auto Dispatch<bool>::result(unguarded::Function *, typename Result<value_type>::argument_type) -> typename Result<value_type>::result_type;
      template<> inline auto Dispatch<bool>::parameter(unguarded::Value *) -> typename Parameter<value_type>::result_type;
    }
  }
}
#endiv
#divert <ipp>
#include <sqlite3.h>
template<> auto sqlite::api::detail::Dispatch<bool>::bind(unguarded::Statement *statement, bind_index idx, Bind<value_type>::argument_type value) -> Bind<value_type>::result_type {
  return (status::Code)::sqlite3_bind_int(statement, idx, value);
}

template<> auto sqlite::api::detail::Dispatch<bool>::column(unguarded::Statement *statement, column_index idx) -> Column<value_type>::result_type {
  return 0 != ::sqlite3_column_int(statement, idx);
}

#import std.is_same
#include <type_traits>
template<> auto sqlite::api::detail::Dispatch<bool>::result(unguarded::Function *function, Result<value_type>::argument_type value) -> Result<value_type>::result_type {
  static_assert(std::is_same<void, Result<value_type>::result_type>::value, "not void");
  static_assert(std::is_same<void, decltype(::sqlite3_result_int(function, 0))>::value, "not void");
  ::sqlite3_result_int(function, value);
}

template<> auto sqlite::api::detail::Dispatch<bool>::parameter(unguarded::Value *value) -> Parameter<value_type>::result_type {
  return ::sqlite3_value_int(value);
}
#endiv

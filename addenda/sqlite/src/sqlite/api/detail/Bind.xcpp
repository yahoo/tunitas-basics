// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sqlite {
  namespace api {
    namespace detail {
      template<typename VALUE> struct Bind;
    } 
  }
}
// "unboxed" data types
#entail sqlite.api.detail.Bind.bool
#entail sqlite.api.detail.Bind.double
#entail sqlite.api.detail.Bind.int32
#entail sqlite.api.detail.Bind.int64

// "C" buffer management
#entail sqlite.api.detail.Bind.const_buffer
#entail sqlite.api.detail.Bind.const_stringn
#entail sqlite.api.detail.Bind.const_stringz

// STL data types
#entail sqlite.api.detail.Bind.basic_string
#entail sqlite.api.detail.Bind.string
#entail sqlite.api.detail.Bind.wstring
#entail sqlite.api.detail.Bind.vector
#entail sqlite.api.detail.Bind.vector.char

// SQLite data types
#entail sqlite.api.detail.Bind.Null
#entail sqlite.api.detail.Bind.Value
#entail sqlite.api.detail.Bind.Value.UNPROTECTED
#entail sqlite.api.detail.Bind.Zeroblob
#endiv
#divert <hpp>
#import sqlite.status.Code
#import sqlite.detail // pass_by_value, specialization_is_invalid
#import sqlite.detail.ResultSFINAE
template<typename VALUE> struct sqlite::api::detail::Bind
  : private sqlite::detail::ResultSFINAE<status::Code> // so by default Bind<VALUE> is not valid and is not useful
  , public sqlite::detail::pass_by_value<VALUE>
  , public sqlite::detail::specialization_is_invalid
{ };
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.tuple
#import sqlite.status.Code
#import std.string
namespace sqlite {
  namespace detail {
    namespace eval {
      enum class Lookup { ADL };
      using Result = std::tuple<Lookup, status::Code, /*message*/ std::string, /*sql_syntax*/ std::string>;
    }
  }
}
#endiv
#divert <hpp>
#import sqlite.statement.Shell
namespace sqlite {
  namespace detail {
    namespace eval {
      // the SQL is ony extracted from the statement if !ok(Code)
      inline auto make(status::Code, statement::Shell const &) -> Result;
      inline auto make(status::Code, std::string const &message, std::string const &unprepared_sql_syntax) -> Result;
      inline auto make(status::Code, std::string &&message, std::string &&unprepared_sql_syntax) -> Result;

      inline auto ok(Result const &) -> bool;
      inline auto check(Result const &) -> void;
      inline auto check(Result const &, std::string const &message) -> void;

      inline auto code(Result const &) -> status::Code;
      inline auto message(Result const &) -> std::string const &;
      inline auto message(Result &&) -> std::string;

      // the SQL will only be populated if !ok(Code)
      inline auto sql(Result const &) -> std::string const &;
      inline auto sql(Result &&) -> std::string;
    }
  }
}
#endiv
#divert <ipp>
#import sqlite.error.string
auto sqlite::detail::eval::make(status::Code code, statement::Shell const &shell) -> Result {
  if (ok(code)) {
    // reminder: no messaging is supplied upon success
    return Result(Lookup(), code, "success", "");
  } else {
    return Result(Lookup(), code, error::string(code), shell.sql());
  }
}

auto sqlite::detail::eval::make(status::Code code, std::string const &message, std::string const &unprepared_sql_syntax) -> Result {
  return Result(Lookup(), code, message, unprepared_sql_syntax);
}

#import std.forward
auto sqlite::detail::eval::make(status::Code code, std::string &&message, std::string &&unprepared_sql_syntax) -> Result {
  return Result(Lookup(), code, std::forward<std::string>(message), std::forward<std::string>(unprepared_sql_syntax));
}

#import std.get
auto sqlite::detail::eval::ok(Result const &r) -> bool {
  return ok(code(r));
}

auto sqlite::detail::eval::check(Result const &r) -> void {
  check(r, "eval failed");
}

#import sqlite.exception.Statement
#import sqlite.prepared.Result
#import sqlite.Statement
auto sqlite::detail::eval::check(Result const &r, std::string const &message) -> void {
  if (!ok(r)) {
    auto failed = prepared::make(code(r), sqlite::Statement(), (char const *)(nullptr));
    throw exception::Statement(std::move(failed), message, sql(r));
  }
}

auto sqlite::detail::eval::code(Result const &r) -> status::Code {
  return std::get<1>(r);
}

auto sqlite::detail::eval::message(Result const &r) -> std::string const & {
  return std::get<2>(r);
}

#import std.forward
auto sqlite::detail::eval::message(Result &&anon) -> std::string {
  return std::get<2>(std::forward<Result>(anon));
}

auto sqlite::detail::eval::sql(Result const &r) -> std::string const & {
  return std::get<3>(r);
}

#import std.forward
auto sqlite::detail::eval::sql(Result &&anon) -> std::string {
  return std::get<3>(std::forward<Result>(anon));
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import c.const_stringz
#import sqlite.prepared.Result
#import sqlite.connection.Shell
#import sqlite.statement.Shell
#import sqlite.detail.eval.Result
#import std.function
namespace sqlite {
  namespace detail {
    namespace eval {
      //
      // "eval" a SQL program - quit on the first error.
      // like "exec" but ... merely different ... a "native to C++" implementation of exec(...)
      //
      // All implementation details ...
      // These throw when convenient and return when convenient. 
      // The calling sqlite::eval(...) cleans up the result according to the interface
      //
      auto process(connection::Shell &, c::const_stringz sql_statements) -> Result;
      auto process(connection::Shell &, c::const_stringz sql_statements, std::function<Result (prepared::Result<statement::Shell> &)>) -> Result;
      auto process(connection::Shell &, c::const_stringz sql_statements, std::function<Result (statement::Shell &)>) -> Result;
    }
  }
}
#endiv
#divert <cpp>
#import sqlite.detail.eval.Result // make(...)
#import sqlite.prepared.Result
#import std.max
#import std.move
auto sqlite::detail::eval::process(connection::Shell &shell, c::const_stringz sql_statements) -> Result {
  auto foreach_row = [](prepared::Result<statement::Shell> &bundle) -> Result {
    statement::Shell steppable = std::move(prepared::value(bundle));
    status::Code last;
    while (row(last = steppable.step())) {
      // once per row until "done"
      continue;
    }
    // not allowed to return DONE, only OK or an actual error
    auto summary = std::max(ok_if_done(last), status::Code::OK);
    return detail::eval::make(summary, steppable);
  };
  return process(shell, sql_statements, foreach_row);
}

#import sqlite.exception.Status
auto sqlite::detail::eval::process(connection::Shell &shell, c::const_stringz sql_statements, std::function<Result (statement::Shell &)> thunk) -> Result {
  auto foreach_statement = [&thunk](prepared::Result<statement::Shell> &bundle) -> Result {
    statement::Shell steppable = std::move(prepared::value(bundle));
    status::Code last;
    while (row(last = steppable.step())) {
      // once per row until "done"
      // the handler must return OK, the handler must not return DONE
      auto thunked = thunk(steppable);
      if (!ok(thunked)) {
        auto cod = code(thunked);
        if (done(cod)) {
          // the handler is not allowed to return DONE, it was to have been mapped to OK.
          // This feels like it is a programmer error ... the handler should not have returned DONE
          throw sqlite::exception::Status(cod, "handler returns DONE, inappropriately");
        }
        last = cod;
        break;
      }
    }
    auto summary = std::max(ok_if_done(last), status::Code::OK);
    return detail::eval::make(summary, steppable);
  };
  return process(shell, sql_statements, foreach_statement);
}

#import sqlite.Statement
#import sqlite.status.Code
#import sqlite.status.Exception
#import sqlite.prepared.abstract
#import std.cerr
auto sqlite::detail::eval::process(connection::Shell &shell, c::const_stringz sql_statements, std::function<Result (prepared::Result<statement::Shell> &)> thunk) -> Result {
  auto position = sql_statements.data();
  status::Code last;
  std::string failing_reason, failing_sql_syntax;
  do {
    // sqlite::Statement here so that we own & destruct the statement.
    auto prepared = shell.prepare<Statement>(position);
    last = code(prepared);
    // Check for errors first
    if (!ok(prepared)) {
      failing_reason = "prepare failed";
      auto start = position;
      auto finish = remaining(prepared);
      if (nullptr == finish || finish <= start) {
        failing_sql_syntax = start;  // n.b. this is a pointer to the "rest" of the program ... it may be big.
      } else {
        failing_sql_syntax = std::string(start, finish);
      }
      break;
    }
    // Check for vacuousness second (vacuousness is not an error)
    if (end(prepared)) {
      failing_sql_syntax.clear();
      break;
    }
    // Tricky ... if we give sqlite::Statement to the handler then it will destruct the statement/
    // We do not want this. So instead we conjure up a result with statement::Shell instead
    auto abstracted = abstract(prepared);
    auto thunked = thunk(abstracted);
    if (!ok(thunked)) {
      auto cod = code(thunked);
      if (done(cod)) {
        // the handler is not allowed to return DONE, it was to have been mapped to OK.
        throw sqlite::exception::Status(cod, "handler returns DONE, inappropriately");
      }
      last = cod;
      failing_reason = message(thunked);
      failing_sql_syntax = sql(thunked);
      break;
    }
    position = remaining(prepared);
  } while ('\0' != *position);
  auto summary = std::max(last, status::Code::OK);
  return detail::eval::make(summary, failing_reason, failing_sql_syntax);
}
#endiv

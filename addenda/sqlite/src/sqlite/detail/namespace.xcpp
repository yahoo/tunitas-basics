// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sqlite {
  namespace detail {

    template<typename TYPE> struct never_allowed;

    template<typename VALUE> struct pass_by_value;
    template<typename VALUE> struct pass_by_reference;;
    template<typename VALUE> struct pass_by_const_reference;;

    struct specialization_is_valid;
    struct specialization_is_invalid;

  }
}
#endiv
#divert <hpp>
namespace sqlite {
  namespace detail {
    // Throws on nullptr
    // templatized to support consty and mutable variants, throws on nullptr
    template<typename POINTER> inline auto ensure_not_null(POINTER) -> POINTER;
    // throws on SHELL::empty()
    template<typename SHELL> inline auto ensure_not_empty(SHELL const &, char const *name = nullptr) -> void;
  }
}

#import std.false_type
// TODO ... move this into some sort of type traits utility library
template<typename TYPE> struct sqlite::detail::never_allowed : public std::false_type {
  //
  // concept:
  //   disallow the instantiation of a particular function template
  // usage:
  //   template<typename SOMETHING> auto function(SOMETHING) -> return_type {
  //       static_assert(never_allowed<SOMETHING>::value, "never allowed, only specializations");
  //   }
  //
};

template<typename VALUE> struct sqlite::detail::pass_by_value {
  using value_type = VALUE;
  using argument_type = value_type;
};

template<typename VALUE> struct sqlite::detail::pass_by_reference {
  using value_type = VALUE;
  using argument_type = value_type &;
};

template<typename VALUE> struct sqlite::detail::pass_by_const_reference {
  using value_type = VALUE;
  using argument_type = value_type const &;
};

struct sqlite::detail::specialization_is_invalid {
  constexpr static bool const is_valid = false;
};

struct sqlite::detail::specialization_is_valid {
  constexpr static bool const is_valid = true;
};
#endiv
#divert <ipp>
#import std.runtime_error
template<typename POINTER> auto sqlite::detail::ensure_not_null(POINTER unguardable) -> POINTER {
  if (nullptr == unguardable) {
    throw std::runtime_error("nullptr");
  }
  return unguardable;
}

#import std.string
#import std.runtime_error
template<typename SHELL> auto sqlite::detail::ensure_not_empty(SHELL const &shell, char const *name) -> void {
  if (shell.empty()) {
    if (nullptr == name) {
      throw std::runtime_error("empty");
    } else {
      std::string buf(name);
      buf += " is empty";
      throw std::runtime_error(buf);
    }
  }
}
#endiv

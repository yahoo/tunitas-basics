// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sqlite {
  class Column;
}
#endiv
#divert <hpp>
#import sqlite.column.Shell
// The column has the lifetime of the statement whence it came
class sqlite::Column : public sqlite::column::Shell {
  using Ancestor = sqlite::column::Shell;
public:
  // This gives us the constructors and assigns which take the unguarded pointer.
  // BUT it DOES give us the synthetic constructors & assignments, especially the conversions from column::Shell
  using Ancestor::Shell;
  using Ancestor::operator=;
  Column() = default;
  inline Column(column::Shell &&) throw();
  inline auto operator=(column::Shell &&) throw() -> Column &;
  // n.b. because of the explicit destructor, the synthetic move constructor disappears
  inline Column(Column &&) throw();
  inline auto operator=(Column &&) throw() -> Column &;
  // nothing to do on detruction (drop the pointer)
  ~Column() = default;
};
#endiv
#divert <ipp>
#import std.forward

sqlite::Column::Column(Column &&anon) throw()
  : Ancestor(std::forward<Ancestor>(anon)) {
  ;
}

sqlite::Column::Column(column::Shell &&anon) throw()
  : Ancestor(std::forward<Ancestor>(anon)) {
  ;
}

auto sqlite::Column::operator=(Column &&anon) throw() -> Column & {
  Ancestor::operator=(std::forward<Ancestor>(anon));
  return *this;
}

auto sqlite::Column::operator=(column::Shell &&anon) throw() -> Column & {
  Ancestor::operator=(std::forward<Ancestor>(anon));
  return *this;
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#forward sqlite.Value
namespace sqlite {
  enum class UNPROTECTED { VALUE };
  template<> class Value<UNPROTECTED>;
}
#endiv
#divert <hpp>
//
// From <sqlite3.h> which is dense and turgid in this matter.
//
//     ^A [protected sqlite3_value] object may always be used where an
//     [unprotected sqlite3_value] object is required
// 
// "unprotected" access is produced by
//     'column' family for accessing SQL row results
// "unprotected" access is only useable in the function families
//     'bind' for binding into an SQL statement
//     'result' for establishing the result of an SQL function
//

#import sqlite.value.Shell
#import sqlite.Value.PROTECTED
template<> class sqlite::Value<sqlite::UNPROTECTED> : public value::Shell {
  using Ancestor = value::Shell;
public:
  using Ancestor::Shell;
  // Given an unprotected value, there is an implicit cast to an protected one
  // as such you can use an protected value anywhere you can use an unprotected one.
  inline operator Value<PROTECTED>();
};
#endiv
#divert <ipp>
sqlite::Value<sqlite::UNPROTECTED>::operator Value<PROTECTED>() {
  Value<PROTECTED> ret(this->unguarded());
  return ret;
}

#endiv

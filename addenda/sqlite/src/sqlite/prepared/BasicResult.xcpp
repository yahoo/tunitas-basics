// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace sqlite {
  namespace prepared {
    enum class Lookup { ADL };
    //
    // CONTINUATION is { char const *                | wchar_t const *
    //                   std::string::const_iterator | std::wstring::const_iterator }
    // STATEMENT is { sqlite::Statement| sqlite::statement::Shell | sqlite::api::unguarded::Statement * }
    //
    template<typename STATEMENT, typename CONTINUATION> struct BasicResult;
  }
}
#entail sqlite.prepared.Result
#endiv
#divert <hpp>
#import sqlite.status.Code
#forward sqlite.connection.Shell
#forward sqlite.api.unguarded
#import sqlite.prepared.Traits
namespace sqlite {
  namespace prepared {
    template<typename STATEMENT, typename CONTINUATION> inline auto make(status::Code, STATEMENT &&, CONTINUATION) -> BasicResult<STATEMENT, CONTINUATION>;

    template<typename STATEMENT, typename CONTINUATION> inline auto ok(BasicResult<STATEMENT, CONTINUATION> const &) -> bool;

    // Same as sqlite::status::check(...) - throws the subject if not ok.
    // Different than status::check(...) because if thrown, then the failed BasicResult is *moved* into the exception.
    template<typename STATEMENT, typename CONTINUATION> inline auto check(BasicResult<STATEMENT, CONTINUATION> &) -> void;
    template<typename STATEMENT, typename CONTINUATION> inline auto check(BasicResult<STATEMENT, CONTINUATION> &, std::string const &explanation) -> void;
    // beware that computing the unprepared sql statement prior to check has a cost for the common case (the success case).
    template<typename STATEMENT, typename CONTINUATION> inline auto check(BasicResult<STATEMENT, CONTINUATION> &, std::string const &explanation, std::string const &unprepared_sql_statement) -> void;
    template<typename STATEMENT, typename CONTINUATION> inline auto check(BasicResult<STATEMENT, CONTINUATION> &, std::string &&explanation, std::string &&unprepared_sql_statement) -> void;

    // At the end of the remaining input.
    // The condition: parsing was ok, but no statement was returned, and there is no more input to parse
    template<typename STATEMENT, typename CONTINUATION> auto end(BasicResult<STATEMENT, CONTINUATION> const &subject) -> bool;

    template<typename STATEMENT, typename CONTINUATION> inline auto code(BasicResult<STATEMENT, CONTINUATION> const &) -> typename BasicResult<STATEMENT, CONTINUATION>::code_type;

    template<typename STATEMENT, typename CONTINUATION> inline auto value(BasicResult<STATEMENT, CONTINUATION> const &) -> typename BasicResult<STATEMENT, CONTINUATION>::statement_type const &;
    template<typename STATEMENT, typename CONTINUATION> inline auto value(BasicResult<STATEMENT, CONTINUATION> &) -> typename BasicResult<STATEMENT, CONTINUATION>::statement_type &;
    template<typename STATEMENT, typename CONTINUATION> inline auto value(BasicResult<STATEMENT, CONTINUATION> &&) -> typename BasicResult<STATEMENT, CONTINUATION>::statement_type;

    template<typename STATEMENT, typename CONTINUATION> inline auto remaining(BasicResult<STATEMENT, CONTINUATION> const &) -> typename BasicResult<STATEMENT, CONTINUATION>::continuation_type;
  }
}

#import std.tuple
#import std.tuple_element
#import std.enable_if
// We need an actual type here, not a typedef.  That so that ADL "works"
template<typename STATEMENT, typename CONTINUATION> class sqlite::prepared::BasicResult
  : public std::enable_if<Traits<STATEMENT, CONTINUATION>::value, std::tuple<Lookup, sqlite::status::Code, STATEMENT, CONTINUATION>>::type {
  using Ancestor = std::tuple<Lookup, sqlite::status::Code, STATEMENT, CONTINUATION>;
 public:
  // get all the constructors & assigns, including the move- and copy- ones
  using Ancestor::tuple;
  using Ancestor::operator=;
  using adl_type = typename std::tuple_element<0, Ancestor>::type;
  using code_type = typename std::tuple_element<1, Ancestor>::type;
  using statement_type = typename std::tuple_element<2, Ancestor>::type;
  using continuation_type = typename std::tuple_element<3, Ancestor>::type;
  // the vanilla accessors
  inline auto code() const -> code_type;
  // the "value()" series is non-const; the value()" series is "like a cast" in the sense of std::move or std::forward, so they are not member functions
  inline auto remaining() const -> continuation_type;;
  // complicated predicates
  // The result is OK as stated by prepare(...)
  inline auto ok() const -> bool;
  // An actual statement prepared was returned; can have ok() && !is_prepared(); yes, this is unfortunately nonconst
  inline auto is_prepared() const -> bool;
  // At the end of the input, the input SQL syntax is exhausted
  inline auto is_exhausted() const -> bool;
  // At the end of the input really really, with the triple condition
  inline auto end() -> bool;
};
#entail sqlite.prepared.BasicResult.unguarded.Statement.char
#entail sqlite.prepared.BasicResult.unguarded.Statement.wchar_t
#endiv
#divert <ipp>
template<typename STATEMENT, typename CONTINUATION> auto sqlite::prepared::make(status::Code code, STATEMENT &&anon, CONTINUATION continuation) -> BasicResult<STATEMENT, CONTINUATION> {
  return BasicResult<STATEMENT, CONTINUATION>(Lookup(), code, std::forward<STATEMENT>(anon), continuation);
}

template<typename STATEMENT, typename CONTINUATION> auto sqlite::prepared::BasicResult<STATEMENT, CONTINUATION>::ok() const -> bool {
  return status::Code::OK == this->code();
}

template<typename STATEMENT, typename CONTINUATION> auto sqlite::prepared::BasicResult<STATEMENT, CONTINUATION>::is_prepared() const -> bool {
  // Separately, there are specializations for the pointer types that signal "is_prepared" with nullptr.
  return std::get<2>(*this).is_prepared();
}

#import std.char_traits
#import std.remove_const
#import std.remove_pointer
template<typename STATEMENT, typename CONTINUATION> auto sqlite::prepared::BasicResult<STATEMENT, CONTINUATION>::is_exhausted() const -> bool {
  using char_type = std::char_traits<typename std::remove_const<typename std::remove_pointer<CONTINUATION>::type>::type>;
  auto zero = char_type::to_char_type(0);
  auto position = this->remaining();
  return zero == *position;
}

template<typename STATEMENT, typename CONTINUATION> auto sqlite::prepared::BasicResult<STATEMENT, CONTINUATION>::end() -> bool {
  // prepare(...) returned OK, but no statement, and there is nothing remaining to prepare/parse
  return this->ok() && !this->is_prepared() && this->is_exhausted();
}

template<typename STATEMENT, typename CONTINUATION> auto sqlite::prepared::BasicResult<STATEMENT, CONTINUATION>::code() const -> code_type {
  return std::get<1>(*this);
}

template<typename STATEMENT, typename CONTINUATION> auto sqlite::prepared::BasicResult<STATEMENT, CONTINUATION>::remaining() const -> continuation_type {
  return std::get<3>(*this);
}

template<typename STATEMENT, typename CONTINUATION> auto sqlite::prepared::ok(BasicResult<STATEMENT, CONTINUATION> const &subject) -> bool {
  return subject.ok();
}

template<typename STATEMENT, typename CONTINUATION> auto sqlite::prepared::end(BasicResult<STATEMENT, CONTINUATION> &subject) -> bool {
  return subject.end();
}

#import std.get
template<typename STATEMENT, typename CONTINUATION> auto sqlite::prepared::code(BasicResult<STATEMENT, CONTINUATION> const &subject) -> typename BasicResult<STATEMENT, CONTINUATION>::code_type {
  return subject.code();
}

template<typename STATEMENT, typename CONTINUATION> auto sqlite::prepared::value(BasicResult<STATEMENT, CONTINUATION> const &subject) -> typename BasicResult<STATEMENT, CONTINUATION>::statement_type const & {
  return std::get<2>(subject);
}

template<typename STATEMENT, typename CONTINUATION> auto sqlite::prepared::value(BasicResult<STATEMENT, CONTINUATION> &subject) -> typename BasicResult<STATEMENT, CONTINUATION>::statement_type & {
  return std::get<2>(subject);
}

#import std.forward
template<typename STATEMENT, typename CONTINUATION> auto sqlite::prepared::value(BasicResult<STATEMENT, CONTINUATION> &&subject) -> typename BasicResult<STATEMENT, CONTINUATION>::statement_type {
  return std::get<2>(std::forward<BasicResult<STATEMENT, CONTINUATION>>(subject));
}

template<typename STATEMENT, typename CONTINUATION> auto sqlite::prepared::remaining(BasicResult<STATEMENT, CONTINUATION> const &subject) -> typename BasicResult<STATEMENT, CONTINUATION>::continuation_type {
  return subject.remaining();
}

#import sqlite.status.string
template<typename STATEMENT, typename CONTINUATION> auto sqlite::prepared::check(BasicResult<STATEMENT, CONTINUATION> &subject) -> void {
  // What else can we say here but "failed"?
  check(subject, "failed because " + string(code(subject)));
}

#import sqlite.prepared.detail.throw_exception // break the inlining cycle sqlite.prepared.BasicResult <--> sqlite.exception.Prepared
template<typename STATEMENT, typename CONTINUATION> auto sqlite::prepared::check(BasicResult<STATEMENT, CONTINUATION> &subject, std::string const &explanation) -> void {
  if (!ok(subject)) {
    detail::throw_exception_Prepared(subject, explanation); // This call must be outlined to break the header file cycle
  }
}

template<typename STATEMENT, typename CONTINUATION> inline auto sqlite::prepared::check(BasicResult<STATEMENT, CONTINUATION> &subject, std::string const &explanation, std::string const &unprepared_sql_statement) -> void {
  if (!ok(subject)) {
    detail::throw_exception_Prepared(subject, explanation, unprepared_sql_statement); // Ibidem.
  }
}

#import std.forward
template<typename STATEMENT, typename CONTINUATION> inline auto sqlite::prepared::check(BasicResult<STATEMENT, CONTINUATION> &subject, std::string &&explanation, std::string &&unprepared_sql_statement) -> void {
  if (!ok(subject)) {
    detail::throw_exception_Prepared(subject, std::forward<std::string>(explanation), std::forward<std::string>(unprepared_sql_statement)); // Ibidem.
  }
}
#endiv

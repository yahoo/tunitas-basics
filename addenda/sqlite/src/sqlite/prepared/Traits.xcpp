// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
// Use #forward here to avoid circular dependencies
#forward sqlite.Statement
#forward sqlite.statement.Shell
#forward sqlite.api.unguarded
#import std.string
#import std.wstring
namespace sqlite {
  namespace prepared {
    // CHAR is { char | wchar_t }
    // STATEMENT is { sqlite::Statement| sqlite::statement::Shell | sqlite::api::unguarded::Statement * }
    template<typename STATEMENT, typename CONTINUATION> struct Traits;
    namespace traits {
      template<typename CONTINUATION> struct Continuation;
      template<> struct Continuation<char const *>;
      template<> struct Continuation<wchar_t const *>;
      template<> struct Continuation<std::string::const_iterator>;
      template<> struct Continuation<std::wstring::const_iterator>;
      template<typename STATEMENT> struct Statement;
      template<> struct Statement<sqlite::Statement>;
      template<> struct Statement<sqlite::statement::Shell>;
      template<> struct Statement<sqlite::api::unguarded::Statement *>;
    }
  }
}
#endiv
#divert <hpp>
namespace sqlite {
  namespace prepared {
    namespace traits {
      template<typename CONTINUATION> struct Continuation : public std::false_type { };
      template<> struct Continuation<char const *> : public std::true_type { };
      template<> struct Continuation<wchar_t const *> : public std::true_type { };
      template<> struct Continuation<std::string::const_iterator> : public std::true_type { };
      template<> struct Continuation<std::wstring::const_iterator> : public std::true_type { };

      template<typename STATEMENT> struct Statement : public std::false_type { };
      template<> struct Statement<sqlite::Statement> : public std::true_type { };
      template<> struct Statement<sqlite::statement::Shell> : public std::true_type { };
      template<> struct Statement<sqlite::api::unguarded::Statement *> : public std::true_type { };

    }
  }
}

template<typename STATEMENT, typename CONTINUATION> struct sqlite::prepared::Traits {
  using statement_traits = traits::Statement<STATEMENT>;
  using continuation_traits = traits::Continuation<CONTINUATION>;
  static constexpr bool const value = statement_traits::value && continuation_traits::value;
};

static_assert(sqlite::prepared::Traits<sqlite::Statement, char const *>::value, "not prepared");
static_assert(sqlite::prepared::Traits<sqlite::Statement, wchar_t const *>::value, "not prepared");
static_assert(sqlite::prepared::Traits<sqlite::Statement, std::string::const_iterator>::value, "not prepared");
static_assert(sqlite::prepared::Traits<sqlite::Statement, std::wstring::const_iterator>::value, "not prepared");

static_assert(sqlite::prepared::Traits<sqlite::statement::Shell, char const *>::value, "not prepared");
static_assert(sqlite::prepared::Traits<sqlite::statement::Shell, wchar_t const *>::value, "not prepared");
static_assert(sqlite::prepared::Traits<sqlite::statement::Shell, std::string::const_iterator>::value, "not prepared");
static_assert(sqlite::prepared::Traits<sqlite::statement::Shell, std::wstring::const_iterator>::value, "not prepared");

static_assert(sqlite::prepared::Traits<sqlite::api::unguarded::Statement *, char const *>::value, "not prepared");
static_assert(sqlite::prepared::Traits<sqlite::api::unguarded::Statement *, wchar_t const *>::value, "not prepared");
static_assert(sqlite::prepared::Traits<sqlite::api::unguarded::Statement *, std::string::const_iterator>::value, "not prepared");
static_assert(sqlite::prepared::Traits<sqlite::api::unguarded::Statement *, std::wstring::const_iterator>::value, "not prepared");
#endiv

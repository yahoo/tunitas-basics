// -*- c++ -*- in the stylings of SCOLD 
#divert <hpp>
#import std.size_t
namespace sqlite {
  namespace prepared {
    //
    // WATCHOUT - we do not subscribe to signalling values in-band
    // Thus we do not use "negative values" to imply "infinity"
    // Instead we use the maximum representable value as "infinity"
    //
    // WATCHOUT - the SQLite C-level API specifies parsing limits in terms of 31-bit integers
    // (a.k.a. signed 32-bit integers).  Thus, there is a natural limit of "2GB" in the API.
    // Hey ... "2GB ought to be big enough for anyone", right?
    //
    // Instead of allowing the compiler to silently truncate, we handle the problem right here.
    // If limit can fit, then it is returned; else out_of_range is thrown.
    //
    // From <sqlite3.h>, the in-band signallig protocol for "unbounded parsing"
    //
    //   ^If the nByte argument is less than zero, then zSql is read up to the
    //   first zero terminator. ^If nByte is non-negative, then it is the maximum
    //   number of  bytes read from zSql.  ^When nByte is non-negative, the
    //   zSql string ends at either the first '\000' or '\u0000' character or
    //   the nByte-th byte, whichever comes first. If the caller knows
    //   that the supplied string is nul-terminated, then there is a small
    //   performance advantage to be gained by passing an nByte parameter that
    //   is equal to the number of bytes in the input string <i>including</i>
    //   the nul-terminator bytes as this saves SQLite from having to
    //   make a copy of the input string.
    //  
    //   ^If pzTail is not NULL then *pzTail is made to point to the first byte
    //   past the end of the first SQL statement in zSql.  These routines only
    //   compile the first statement in zSql, so *pzTail is left pointing to
    //   what remains uncompiled.
    //
    int signed const UNBOUNDED_PARSING_UNTIL_THE_NULCHAR = -1;
    inline auto manage_limit_truncation(std::size_t limit) -> int signed;
  }
}
#endiv
#divert <ipp>
#import std.out_of_range
#import std.numeric_limits
#include <cassert>
auto sqlite::prepared::manage_limit_truncation(std::size_t limit) -> int signed {
  static_assert(std::numeric_limits<std::size_t>::max() == std::numeric_limits<decltype(limit)>::max(), "inconsistent max values");
  //
  // The nByte parameter to sqlite3_prepare has special and delicate semantics.
  //
  // 0. Negative values mean "unbounded parsing" with limits specified by the '\0'-terminator sentinel in the string
  //
  // 1. It is a '(signed) int' (oops).  That means that the SQLite API is limited to 31-bit sizes.
  //
  // 2. It is imbued with the semantic that "zero means unlimited"/ but also with the semantic
  // "zero means undeclared, but no longer than the string."
  //
  // 3. And finally that if the value is non-zero then that is the declared length of the string.
  //
  // Thus "zero" (0) MUST be used to signal the unbounded nature of the underlying string.
  //
  int signed definitely_not_truncated_and_imbued_with_the_unbounded_semantic;
  if (limit == std::numeric_limits<decltype(limit)>::max()) {
    definitely_not_truncated_and_imbued_with_the_unbounded_semantic = UNBOUNDED_PARSING_UNTIL_THE_NULCHAR;
  } else if (limit > std::numeric_limits<int>::max()) {
    throw std::out_of_range("limit is too big for the 31-bit API");
  } else {
    // Now we know that this conversion won't truncate the limit.
    definitely_not_truncated_and_imbued_with_the_unbounded_semantic = limit;
    assert(limit == std::size_t(definitely_not_truncated_and_imbued_with_the_unbounded_semantic));
  }
  return definitely_not_truncated_and_imbued_with_the_unbounded_semantic;
}
#endiv

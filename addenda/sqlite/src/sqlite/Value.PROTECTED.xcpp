// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#forward sqlite.Value
namespace sqlite {
  enum class PROTECTED { VALUE };
  template<> class Value<PROTECTED>;
}
#endiv
#divert <hpp>
#import sqlite.Type
#import sqlite.api.detail.Parameter
namespace sqlite {
  inline auto type(Value<PROTECTED> &) -> Type;
  inline auto numeric_coercion(Value<PROTECTED> &) -> Type;
  template<typename VALUE> inline auto parameter(Value<PROTECTED> &) -> typename api::detail::Parameter<VALUE>::result_type; // a.k.a. "sqlite3_value"
}
//
// From <sqlite3.h> which is dense and turgid in this matter.
//
//     ^A [protected sqlite3_value] object may always be used where an
//     [unprotected sqlite3_value] object is required
//
// This is not accomplished with inheritance so much as with an implicit cast.
// See nearby Value<UNPROTECTED>::operator Value<PROTECTED>()
//
// "protected" access is produced by
//      SQLite and supplied to the application for accessing SQL UDF functions
// "protected" access is consumed by the function families
//     'parameter' for accessing the actual parameters of an SQL UDF function
//                 (a.k.a the "sqlite3_value" family, ahem, renamed here for sanity)
//
#import sqlite.value.Shell
template<> class sqlite::Value<sqlite::PROTECTED> : public value::Shell {
  using Ancestor = value::Shell;
public:
  using Ancestor::Shell;
};
#entail sqlite.type
#entail sqlite.numeric_coercion
#entail sqlite.parameter
#endiv


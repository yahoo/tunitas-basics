// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import sqlite // for the namespace and the C header <Sqlite3.h>
namespace sqlite::error {
  enum class Condition
    { OK = SQLITE_OK,                   // 0   - Successful result
      //beginning-of-error-codes; the not-successful codes
      ERROR = SQLITE_ERROR,             // 1   - SQL error or missing database
      INTERNAL = SQLITE_INTERNAL,       // 2   - Internal logic error in SQLite
      PERM = SQLITE_PERM,               // 3   - Access permission denied
      ABORT = SQLITE_ABORT,             // 4   - Callback routine requested an abort
      BUSY = SQLITE_BUSY,               // 5   - The database file is locked
      LOCKED = SQLITE_LOCKED,           // 6   - A table in the database is locked
      NOMEM = SQLITE_NOMEM,             // 7   - A malloc() failed
      READONLY = SQLITE_READONLY,       // 8   - Attempt to write a readonly database
      INTERRUPT = SQLITE_INTERRUPT,     // 9   - Operation terminated by sqlite3_interrupt()*/
      IOERR = SQLITE_IOERR,             // 10  - Some kind of disk I/O error occurred
      CORRUPT = SQLITE_CORRUPT,         // 11  - The database disk image is malformed
      NOTFOUND = SQLITE_NOTFOUND,       // 12  - Unknown opcode in sqlite3_file_control()
      FULL = SQLITE_FULL,               // 13  - Insertion failed because database is full
      CANTOPEN = SQLITE_CANTOPEN,       // 14  - Unable to open the database file
      PROTOCOL = SQLITE_PROTOCOL,       // 15  - Database lock protocol error
      EMPTY = SQLITE_EMPTY,             // 16  - Database is empty
      SCHEMA = SQLITE_SCHEMA,           // 17  - The database schema changed
      TOOBIG = SQLITE_TOOBIG,           // 18  - String or BLOB exceeds size limit
      CONSTRAINT = SQLITE_CONSTRAINT,   // 19  - Abort due to constraint violation
      MISMATCH = SQLITE_MISMATCH,       // 20  - Data type mismatch
      MISUSE = SQLITE_MISUSE,           // 21  - Library used incorrectly
      NOLFS = SQLITE_NOLFS,             // 22  - Uses OS features not supported on host
      AUTH = SQLITE_AUTH,               // 23  - Authorization denied
      FORMAT = SQLITE_FORMAT,           // 24  - Auxiliary database format error
      RANGE = SQLITE_RANGE,             // 25  - 2nd parameter to sqlite3_bind out of range
      NOTADB = SQLITE_NOTADB,           // 26  - File opened that is not a database file
      NOTICE = SQLITE_NOTICE,           // 27  - Notifications from sqlite3_log()
      WARNING = SQLITE_WARNING,         // 28  - Warnings from sqlite3_log()
      // end-of-error-codes; the not-successful codes
      // dubious ... signalling non-failure and completion (but not "ok")
      ROW = SQLITE_ROW,                 // 100 - sqlite3_step() has another row ready
      DONE = SQLITE_DONE,               // 101 - sqlite3_step() has finished executing
    };
}

#import std.is_error_condition_enum
namespace std {
  template<> struct is_error_condition_enum<sqlite::error::Condition>;
}
#endiv
#divert <hpp>
#import std.string
namespace sqlite::error {
  inline auto ok(Condition) -> bool;

  // not OK and not DONE (DONE is not a failure indication)
  inline auto failure(Condition) -> bool;

  // OK or DONE (which is also OK)
  inline auto okdone(Condition) -> bool;
  // map s/DONE/OK/ .... so you get OK if the argument is OK or DONE
  inline auto ok_if_done(Condition) -> Condition;

  // Throws the code if not OK or DONE
  inline auto check(Condition) -> void;
  inline auto check(Condition, std::string const &explanation) -> void;

  //
  // Useful for interacting with step
  //
  //   while (row(statement.step())) {
  //       ...process...
  //   }
  //   if (!done(statement.step())){
  //       ...some error...
  //   }
  //
  inline auto row(Condition) -> bool;
  inline auto done(Condition) -> bool;

  // Like std::min, std::max, but on Condition
  // wherein OK is lower than every other code
  inline auto max(Condition, Condition) -> Condition;
  inline auto min(Condition, Condition) -> Condition;

  inline auto make_error_condition(Condition) -> std::error_condition;
}

#import std.min
#import std.max
#import sqlite.status.Code
namespace std {
  using sqlite::status::min;
  using sqlite::status::max;
}

#import std.true_type
template<> struct std::is_error_condition_enum<sqlite::error::Condition> : public std::true_type { };

namespace sqlite::error {
  constexpr auto const OK = Condition::OK;
  constexpr auto const ERROR = Condition::ERROR;
  constexpr auto const INTERNAL = Condition::INTERNAL;
  constexpr auto const PERM = Condition::PERM;
  constexpr auto const ABORT = Condition::ABORT;
  constexpr auto const BUSY = Condition::BUSY;
  constexpr auto const LOCKED = Condition::LOCKED;
  constexpr auto const NOMEM = Condition::NOMEM;
  constexpr auto const READONLY = Condition::READONLY;
  constexpr auto const INTERRUPT = Condition::INTERRUPT;
  constexpr auto const IOERR = Condition::IOERR;
  constexpr auto const CORRUPT = Condition::CORRUPT;
  constexpr auto const NOTFOUND = Condition::NOTFOUND;
  constexpr auto const FULL = Condition::FULL;
  constexpr auto const CANTOPEN = Condition::CANTOPEN;
  constexpr auto const PROTOCOL = Condition::PROTOCOL;
  constexpr auto const EMPTY = Condition::EMPTY;
  constexpr auto const SCHEMA = Condition::SCHEMA;
  constexpr auto const TOOBIG = Condition::TOOBIG;
  constexpr auto const CONSTRAINT = Condition::CONSTRAINT;
  constexpr auto const MISMATCH = Condition::MISMATCH;
  constexpr auto const MISUSE = Condition::MISUSE;
  constexpr auto const NOLFS = Condition::NOLFS;
  constexpr auto const AUTH = Condition::AUTH;
  constexpr auto const FORMAT = Condition::FORMAT;
  constexpr auto const RANGE = Condition::RANGE;
  constexpr auto const NOTADB = Condition::NOTADB;
  constexpr auto const NOTICE = Condition::NOTICE;
  constexpr auto const WARNING = Condition::WARNING;
  constexpr auto const ROW = Condition::ROW;
  constexpr auto const DONE = Condition::DONE;
}
#endiv
#divert <ipp>
auto sqlite::error::ok(Condition c) -> bool {
  return Condition::OK == c;
}

auto sqlite::error::failure(Condition c) -> bool {
  return !ok(c) && !done(c) && !row(c);
}

auto sqlite::error::okdone(Condition c) -> bool {
  return Condition::OK == c || Condition::DONE == c;
}

auto sqlite::error::ok_if_done(Condition c) -> Condition {
  return Condition::DONE == c ? Condition::OK : c;
}

auto sqlite::error::row(Condition c) -> bool {
  return Condition::ROW == c;
}

auto sqlite::error::done(Condition c) -> bool {
  return Condition::DONE == c;
}

auto sqlite::error::check(Condition c) -> void {
  // What else can we say here, but "failed"?
  check(c, "failed");
}

#import sqlite.exception.Status
#import sqlite.status.Code
auto sqlite::error::check(Condition c, std::string const &explanation) -> void {
  if (!ok(c) && !done(c)) {
    auto  recode = status::Code( (int)(c) );
    throw exception::Status(recode, explanation);
  }
}

auto sqlite::error::max(Condition a, Condition b) -> Condition {
  return (int)(a) > (int)(b) ? a : b;
}

auto sqlite::error::min(Condition a, Condition b) -> Condition {
  return (int)(a) < (int)(b) ? a : b;
}

#import sqlite.error.category
auto sqlite::error::make_error_condition(Condition cond) -> std::error_condition {
  return std::error_condition((int)(cond), sqlite::error::category());
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#include <sqlite3.h>
#import std.int32_t
#import std.int64_t
namespace sqlite {
  namespace detail { }
  //
  // Reminder: There are no unsigned types because SQLite doesn't support such.
  //
  // WATCHOUT - the std namespace uses a trailing "_t" as is the historic C-culture/Unix convention.
  //            yet SQLite does not establish this convention for "int64"
  //            We follow the SQLite-culture conventions, if reasonable & possible.
  //
  using int32 = std::int32_t;    // i.e. sqlite::int32 but NOT "sqlite::int32_t"
  using int64 = ::sqlite3_int64;

  using rowid = int64;           // and not "rowid_type" as is used in some other cultures

  // The 'bind index' type alias is wholly our invention
  //
  // ^The second argument is the index of the SQL parameter to be set.
  // ^The leftmost SQL parameter has an index of 1.
  // ^The number of SQL parameters is recovered with [sqlite3_bind_parameter_count()]
  //  with caveats about "holes" in the list when numeric parameters are used & some omitted.
  using bind_index = unsigned;

  // The 'column index' type alias is wholly our invention
  //
  // ^The leftmost column of the result set has the index 0.
  // ^The number of columns in the result is via [sqlite3_column_count()].
  using column_index = unsigned;

  // TODO/. ... move this somewhere?
  namespace methods {
    // TODO ... move these down into the unguarded namespace
    using memory = ::sqlite3_mem_methods;
    using mutex = ::sqlite3_mutex_methods;
    using pcache2 = ::sqlite3_pcache_methods2;
    namespace obsolete {
      using pcache1 = ::sqlite3_pcache_methods;
    }
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace words {
    namespace detail {
      struct Formatter;
    }
  }
}
#endiv
#divert <hpp>
#import std.string
namespace tests {
  namespace words {
    namespace detail {
      template<typename TYPE> auto operator<<(Formatter &&, TYPE const &) -> Formatter &&;
      template<typename TYPE, std::size_t N> auto operator<<(Formatter &&, TYPE const (&)[N]) -> Formatter &&;
      inline auto finalize(Formatter &&) -> std::string;
    }
  }
}

#import std.unique_ptr
#import std.ostringstream
struct tests::words::detail::Formatter {
  inline Formatter();
  // ho copy semantic
  Formatter(Formatter const &) = delete;
  auto operator=(Formatter const &) -> Formatter & = delete;
  // only move semantic
  inline Formatter(Formatter &&);
  inline auto operator=(Formatter &&) -> Formatter &;
  std::unique_ptr<std::ostringstream> buf;
};
#endiv
#divert <ipp>
#import std.forward
template<typename TYPE> auto tests::words::detail::operator<<(Formatter &&f, TYPE const &v) -> Formatter && {
  *f.buf << v;
  return std::forward<Formatter>(f);
}

#import std.forward
template<typename TYPE, std::size_t N> auto tests::words::detail::operator<<(Formatter &&f, TYPE const (&v)[N]) -> Formatter && {
  *f.buf << v;
  return std::forward<Formatter>(f);
}

#import std.forward
auto tests::words::detail::finalize(Formatter &&f) -> std::string {
  return f.buf->str();
}

tests::words::detail::Formatter::Formatter()
  : buf(new std::ostringstream()) {
  ;
}

#import std.forward
tests::words::detail::Formatter::Formatter(Formatter &&anon)
  : buf(std::forward<std::unique_ptr<std::ostringstream>>(anon.buf)) {
  ;
}

#import std.swap
auto tests::words::detail::Formatter::operator=(Formatter &&anon) -> Formatter & {
  Formatter tmp(std::forward<Formatter>(anon));
  std::swap(tmp, *this);
  return *this;
}
#endiv

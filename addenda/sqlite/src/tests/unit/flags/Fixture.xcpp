// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace flags {
      class Fixture;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sqlite.open.Flags
#import std.vector
class tests::unit::flags::Fixture : public cppunit::test::Fixture {
public:
  auto setUp() -> void;
  auto tearDown() -> void;

  std::vector<sqlite::open::Flag> some_flag_series;
  sqlite::open::Flags no_flags;
  sqlite::open::Flags all_flags;

  auto test_flag_universe() -> void;
  auto test_flags_universe() -> void;

  auto test_and_ss() -> void;
  auto test_and_s1() -> void;
  auto test_and_1s() -> void;
  auto test_and_11() -> void;
  auto test_and_assign() -> void;
  auto test_decumulate_and_assign() -> void;
  auto test_decumulate_via_rhs() -> void;

  auto test_or_ss() -> void;
  auto test_or_s1() -> void;
  auto test_or_1s() -> void;
  auto test_or_11() -> void;
  auto test_or_assign() -> void;
  auto test_accumulate_or_assign() -> void;
  auto test_accumulate_via_rhs() -> void;

  auto test_contains() -> void;
  auto test_flags() -> void;
  auto test_flag() -> void;
  auto test_is_flag() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import sqlite.open.Flags

#import unit.rigging.lhs
using unit::rigging::lhs;
#import unit.rigging.clear
using unit::rigging::clear;

using sqlite::open::Flag;
using sqlite::open::Flags;

auto tests::unit::flags::Fixture::setUp() -> void {
  using v = std::vector<Flag>;
  lhs(some_flag_series) = v{Flag::READONLY, 
                            Flag::READWRITE, 
                            Flag::CREATE, 
                            Flag::DELETEONCLOSE, 
                            Flag::EXCLUSIVE, 
                            Flag::AUTOPROXY, 
                            Flag::URI, 
                            Flag::MEMORY, 
                            Flag::MAIN_DB, 
                            Flag::TEMP_DB, 
                            Flag::TRANSIENT_DB, 
                            Flag::MAIN_JOURNAL, 
                            Flag::TEMP_JOURNAL, 
                            Flag::SUBJOURNAL, 
                            Flag::MASTER_JOURNAL, 
                            Flag::NOMUTEX, 
                            Flag::FULLMUTEX, 
                            Flag::SHAREDCACHE, 
                            Flag::PRIVATECACHE, 
                            Flag::WAL}, // each::RESERVED -- is NOT a flag ... not really ...
  lhs(no_flags) = Flags();
  // Latent constant acquired from reading <sqlite3.h> sqlite-3.8.3-1.fc19.i686
  // recall that Flag::RESERVED isn't used ... it is reserved
  lhs(all_flags) = ~sqlite::open::each::RESERVED & Flags(0x00Ffffff);

  CPPUNIT_ASSERT(0 != some_flag_series.size());
  CPPUNIT_ASSERT(0 == (int)no_flags);
  CPPUNIT_ASSERT(0 != (int)all_flags);
}

auto tests::unit::flags::Fixture::tearDown() -> void {
  lhs(some_flag_series) = clear;
  lhs(no_flags) = clear;
  lhs(all_flags) = clear;
}

auto tests::unit::flags::Fixture::test_flag_universe() -> void {
  unsigned count = 0;
  for (auto f : some_flag_series) {
    CPPUNIT_ASSERT((int) f != 0);
    count++;
  }
  CPPUNIT_ASSERT(0 < count);
}

auto tests::unit::flags::Fixture::test_flags_universe() -> void {
  unsigned count = 0;
  Flags accumulate = Flags();
  for (auto f : some_flag_series) {
    CPPUNIT_ASSERT((int) f != 0);
    accumulate |= f;
    CPPUNIT_ASSERT((int) accumulate != 0);
    CPPUNIT_ASSERT((Flags)f == (f & accumulate));
    count++;
  }
  CPPUNIT_ASSERT(0 < count);
}

auto tests::unit::flags::Fixture::test_and_ss() -> void {
  for (auto f : some_flag_series) {
    Flags fs = Flags(f);
    CPPUNIT_ASSERT(fs == (all_flags & fs));
    CPPUNIT_ASSERT(fs == (fs & fs));
  }
}

auto tests::unit::flags::Fixture::test_and_s1() -> void {
  for (auto f : some_flag_series) {
    CPPUNIT_ASSERT(Flags(f) == (all_flags & f));
  }
}

auto tests::unit::flags::Fixture::test_and_1s() -> void {
  for (auto f : some_flag_series) {
    CPPUNIT_ASSERT(Flags(f) == (f & all_flags));
  }
}

auto tests::unit::flags::Fixture::test_and_11() -> void {
  for (auto f : some_flag_series) {
    CPPUNIT_ASSERT(Flags(f) == (f & f));
  }
}

auto tests::unit::flags::Fixture::test_and_assign() -> void {
  for (auto f : some_flag_series) {
    Flags fs = all_flags;
    fs &= f;
    CPPUNIT_ASSERT(Flags(f) == fs);
  }
}

auto tests::unit::flags::Fixture::test_decumulate_and_assign() -> void {
  Flags decumulator = all_flags;
  for (auto f : some_flag_series) {
    decumulator &= ~f;
  }
  CPPUNIT_ASSERT(0 == (int)Flags());
  CPPUNIT_ASSERT(decumulator == Flags());
}

auto tests::unit::flags::Fixture::test_decumulate_via_rhs() -> void {
  Flags decumulator = all_flags;
  for (auto f : some_flag_series) {
    decumulator = decumulator & ~f;
  }
  CPPUNIT_ASSERT(0 == (int)Flags());
  CPPUNIT_ASSERT(decumulator == Flags());
}

auto tests::unit::flags::Fixture::test_or_ss() -> void {
  for (auto f : some_flag_series) {
    Flags fs = Flags(f);
    CPPUNIT_ASSERT(all_flags == (all_flags | fs));
    CPPUNIT_ASSERT(fs == (Flags() | fs));
    CPPUNIT_ASSERT(fs == (fs | fs));
  }
}

auto tests::unit::flags::Fixture::test_or_s1() -> void {
  for (auto f : some_flag_series) {
    CPPUNIT_ASSERT(all_flags == (all_flags | f));
    CPPUNIT_ASSERT(Flags(f) == (Flags() | f));
  }
}

auto tests::unit::flags::Fixture::test_or_1s() -> void {
  for (auto f : some_flag_series) {
    CPPUNIT_ASSERT(all_flags == (f | all_flags));
    CPPUNIT_ASSERT(Flags(f) == (f | Flags()));
  }
}

auto tests::unit::flags::Fixture::test_or_11() -> void {
  for (auto f : some_flag_series) {
    CPPUNIT_ASSERT(Flags(f) == (f | f));
    CPPUNIT_ASSERT(Flags(f) == (Flags() | f));
    CPPUNIT_ASSERT(Flags(f) == (f | Flags()));
  }
}

auto tests::unit::flags::Fixture::test_or_assign() -> void {
  for (auto f : some_flag_series) {
    Flags fs = Flags();
    fs |= f;
    CPPUNIT_ASSERT(Flags(f) == fs);
  }
}

auto tests::unit::flags::Fixture::test_accumulate_or_assign() -> void {
  Flags accumulator = no_flags;
  for (auto f : some_flag_series) {
    accumulator |= f;
  }
  CPPUNIT_ASSERT(0 != (int)all_flags);
  CPPUNIT_ASSERT(accumulator == all_flags);
}

auto tests::unit::flags::Fixture::test_accumulate_via_rhs() -> void {
  Flags accumulator = no_flags;
  for (auto f : some_flag_series) {
    accumulator = accumulator | f;
  }
  CPPUNIT_ASSERT(0 != (int)all_flags);
  CPPUNIT_ASSERT(accumulator == all_flags);
}

auto tests::unit::flags::Fixture::test_contains() -> void {
  for (auto f : some_flag_series) {
    CPPUNIT_ASSERT(contains(all_flags, f));
    CPPUNIT_ASSERT(!contains(no_flags, f));
    CPPUNIT_ASSERT(!contains(all_flags & ~f, f));
    CPPUNIT_ASSERT(!contains(no_flags & ~f, f));
  }
}

namespace {
  // ICK - ADL fails
  // the tester's namespace tests::unit::flags occludes the identifier in namespace sqlite::open
  // so prove that ADL "works" in a separate step
  inline auto adl_flags(sqlite::open::Flags s) -> sqlite::open::Flags {
    return flags(s); // found by ADL
  }
  inline auto adl_flags(sqlite::open::Flag f) -> sqlite::open::Flags {
    return flags(f); // found by ADL
  }
}

auto tests::unit::flags::Fixture::test_flags() -> void {
  for (auto item : some_flag_series) {
    Flags fs1 = adl_flags(item);
    Flags fs2 = adl_flags(fs1);
    CPPUNIT_ASSERT(fs2 == fs1);
    CPPUNIT_ASSERT(adl_flags(fs2) == adl_flags(fs1));
  }
}

auto tests::unit::flags::Fixture::test_flag() -> void {
  for (auto item : some_flag_series) {
    Flags fs = adl_flags(item);
    Flag f = flag(item); // <---- test t his
    CPPUNIT_ASSERT(item == f);
    CPPUNIT_ASSERT(flag(fs) == flag(f));
  }
}

auto tests::unit::flags::Fixture::test_is_flag() -> void {
  CPPUNIT_ASSERT(!is_flag(all_flags));
  CPPUNIT_ASSERT(is_flag(some_flag_series.front()));
  CPPUNIT_ASSERT(is_flag(some_flag_series.back()));
  CPPUNIT_ASSERT(!is_flag(no_flags));
  for (auto item : some_flag_series) {
    Flag f = item;
    CPPUNIT_ASSERT(is_flag(f)); // <---- is_flag(Flag)
    Flags fs = adl_flags(f);
    CPPUNIT_ASSERT(is_flag(fs)); // <--- is_flag(Flags)
  }
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::flags::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("flags");
  s << call("flag_universe", &Fixture::test_flag_universe)
    << call("flags_universe", &Fixture::test_flags_universe)
    << call("and_ss", &Fixture::test_and_ss)
    << call("and_s1", &Fixture::test_and_s1)
    << call("and_1s", &Fixture::test_and_1s)
    << call("and_11", &Fixture::test_and_11)
    << call("and_assign", &Fixture::test_and_assign)
    << call("decumulate_and_assign", &Fixture::test_decumulate_and_assign)
    << call("decumulate_via_rhs", &Fixture::test_decumulate_via_rhs)
    << call("or_ss", &Fixture::test_or_ss)
    << call("or_s1", &Fixture::test_or_s1)
    << call("or_1s", &Fixture::test_or_1s)
    << call("or_11", &Fixture::test_or_11)
    << call("or_assign", &Fixture::test_or_assign)
    << call("accumulate_or_assign", &Fixture::test_accumulate_or_assign)
    << call("accumulate_via_rhs", &Fixture::test_accumulate_via_rhs)
    << call("contains", &Fixture::test_contains)
    << call("flags", &Fixture::test_flags)
    << call("flag", &Fixture::test_flag)
    << call("is_flag", &Fixture::test_is_flag)
    ;
  return s.release();
}
#endiv

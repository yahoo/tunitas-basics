// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace query {
      //
      // This is the recipe shown in sqlite::query::Select
      //
      enum LOOKUP { };
      class Lookup;
    }
  }
}
#endiv
#divert <hpp>
#import sqlite.query.Rows
#import sqlite.query.Row
#import sqlite.query.Cursor
#import sqlite.query.Select
#import std.string
#import tests.unit.query.lookup.Traits
class tests::unit::query::Lookup : public sqlite::query::Select {
  using Ancestor = sqlite::query::Select;
public:
  inline explicit Lookup(connection_type &);
  //
  // must say 'double' in C++ because sqlite 'double' and 'float' are the same thing
  // src/tests/unit/query/Lookup.xcpp:56:11:   required from here
  // src/sqlite/detail/ResultSFINAE.xcpp:19:29: error: 'using result_type = float' is inaccessible
  //
  using rows_type = sqlite::query::Rows<LOOKUP, bool, int, double, std::string>;
  using cursor_type = sqlite::query::Cursor<LOOKUP, bool, int, double, std::string>;
  using row_type = sqlite::query::Row<LOOKUP, bool, int, double, std::string>;
  //
  // COLUMN is an unsigned integer
  //    0 -> LOOKUP
  //    1 -> rowid
  //    2 -> bool b1
  //    3 -> int i1
  //    4 -> double f1
  //    5 -> std::string s1
  //
  inline auto operator()(sqlite::int64 rowid) -> row_type;
  template<unsigned COLUMN> inline auto column(sqlite::int64 rowid) -> typename lookup::Traits<COLUMN>::type;
  inline static auto format() -> std::string;
};
#endiv
#divert <ipp>
tests::unit::query::Lookup::Lookup(connection_type &conn)
  : Ancestor(conn, format()) {
  ;
}

#import cppunit.test.Assert
auto tests::unit::query::Lookup::operator()(sqlite::int64 rowid) -> row_type {
  this->bind(rowid);
  rows_type rows(this->prepared);
  cursor_type start(rows.begin());
  cursor_type finish(rows.end());
  CPPUNIT_ASSERT(start != finish);
  return *start;
}

#import cppunit.test.Assert
template<unsigned COLUMN> auto tests::unit::query::Lookup::column(sqlite::int64 rowid) -> typename lookup::Traits<COLUMN>::type {
  return std::get<COLUMN>(operator()(rowid));
}

auto tests::unit::query::Lookup::format() -> std::string {
  return R"sql(select * from t99 where ? = rowid)sql";
}
#endiv

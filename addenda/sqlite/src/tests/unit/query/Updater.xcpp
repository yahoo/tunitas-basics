// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace query {
      //
      // This is the recipe shown in sqlite.query.Update
      //
      class Updater;
    }
  }
}
#endiv
#divert <hpp>
#import sqlite.query.Update
class tests::unit::query::Updater : public sqlite::query::Update {
  using Ancestor = sqlite::query::Update;
public:
  explicit Updater(connection_type &);
  auto operator()(sqlite::int64, bool, int, double, std::string) -> status_type;
  auto format() -> std::string;
};
#endiv
#divert <cpp>
tests::unit::query::Updater::Updater(connection_type &conn)
  : Ancestor(conn, format()) {
  ;
}

auto tests::unit::query::Updater::operator()(sqlite::int64 id, bool bvalue, int ivalue, double fvalue, std::string svalue) -> status_type {
  this->bind(bvalue, ivalue, fvalue, svalue, id);
  return this->prepared.step();
}

auto tests::unit::query::Updater::format() -> std::string {
  // see query::Database for the schema of the table t99
  return (R"sql(update t99)sql" "\n"
          R"sql(set)sql" "\n"
          R"sql(b1 = ?)sql" ",\n"
          R"sql(i1 = ?)sql" ",\n"
          R"sql(f1 = ?)sql" ",\n"
          R"sql(s1 = ?)sql" "\n"
          R"sql(where)sql" "\n"
          R"sql(? = rowid;)sql");
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace exception {
      class Status;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::exception::Status : public cppunit::test::Fixture {
public:
  auto test_construction() -> void;
  auto test_throwing() -> void;
  auto test_code() -> void;
  auto test_what() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import sqlite.status.Exception
#import std.string

auto tests::unit::exception::Status::test_construction() -> void {
  sqlite::status::Exception ok(sqlite::status::Code::OK, std::string("not okay"));
  CPPUNIT_ASSERT(sqlite::status::Code::OK == ok.code());

  sqlite::status::Exception internal(sqlite::status::Code::INTERNAL, std::string("an internal problem"));
  CPPUNIT_ASSERT(sqlite::status::Code::INTERNAL == internal.code());
}

#import sqlite.status.Exception
#import sqlite.exception.Generic
#import std.runtime_error
#import std.exception
#import std.cout
auto tests::unit::exception::Status::test_throwing() -> void {
  try {
    sqlite::status::Exception perm(sqlite::status::Code::PERM, "Permission denied!");
    throw perm;
  } catch (sqlite::status::Exception const &e) {
    std::cout << "good: " << e.what() << '\n';
    CPPUNIT_ASSERT(true); 
    CPPUNIT_ASSERT(sqlite::status::Code::PERM == e.code());
  } catch (sqlite::exception::Generic const &) {
    CPPUNIT_ASSERT(false);
  } catch (std::runtime_error const &) {
    CPPUNIT_ASSERT(false);
  } catch (std::exception const &) {
    CPPUNIT_ASSERT(false);
  } catch (...) {
    CPPUNIT_ASSERT(false);
  }
}

#import std.vector
auto tests::unit::exception::Status::test_code() -> void {
  using sqlite::status::Code;
  using v = std::vector<Code>;
  auto list_of_codes = v{Code::OK, Code::ERROR, Code::INTERNAL, Code::PERM, Code::ABORT, Code::BUSY, Code::LOCKED, Code::NOMEM, Code::READONLY, Code::INTERRUPT, Code::IOERR, Code::CORRUPT, Code::NOTFOUND, Code::FULL, Code::CANTOPEN, Code::PROTOCOL, Code::EMPTY, Code::SCHEMA, Code::TOOBIG, Code::CONSTRAINT, Code::MISMATCH, Code::MISUSE, Code::NOLFS, Code::AUTH, Code::FORMAT, Code::RANGE, Code::NOTADB, Code::NOTICE, Code::WARNING, Code::ROW, Code::DONE};
  for (auto const code : list_of_codes) {
    sqlite::status::Exception dodo(code, "bad, very bad");
    CPPUNIT_ASSERT(code == dodo.code());
    try {
      sqlite::status::Exception redo(code, "again, very bad");
      throw redo;
    } catch (sqlite::status::Exception const &caught) {
      CPPUNIT_ASSERT(code == caught.code()); 
    }
  }
}

#import std.string
auto tests::unit::exception::Status::test_what() -> void {
  auto message = "YOU are NOT Authorized (this infraction will be reported)";
  try {
    sqlite::status::Exception auth(sqlite::status::Code::AUTH, message);
    throw auth;
  } catch (sqlite::status::Exception const &e) {
    std::cout << "recovered " << e.what() << '\n';
    CPPUNIT_ASSERT(sqlite::status::Code::AUTH == e.code());
    CPPUNIT_ASSERT(std::string(message) == e.what());
  }
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
auto tests::unit::exception::Status::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("Status");
  s << call("construction", &Status::test_construction)
    << call("throwing", &Status::test_throwing)
    << call("code", &Status::test_code)
    << call("what", &Status::test_what)
    ;
  return s.release();
}
#endiv

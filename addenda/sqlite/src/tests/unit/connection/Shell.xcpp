// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace connection {
      class Shell;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sqlite.status.Code
#import sqlite.connection.Shell
class tests::unit::connection::Shell : public cppunit::test::Fixture {
public:
  auto test_constructor_default() -> void;
  auto test_constructor_pointer() -> void;
  // has move semantics, but not copy semantics
  auto test_constructor_move() -> void;
  auto test_assignment_move() -> void;

  auto test_open_filename() -> void;
  auto test_open_filename_flags() -> void;
  auto test_open_filename_flags_vfs() -> void;
  auto test_open_location_memory() -> void;
  auto test_open_location_memory_flags() -> void;
  auto test_open_location_memory_flags_vfs() -> void;
  auto test_open_location_disk() -> void;
  auto test_open_location_disk_flags() -> void;
  auto test_open_location_disk_flags_vfs() -> void;
  auto test_close() -> void;
  auto test_last_insert_rowid() -> void;
  auto test_extended_result_codes() -> void;
  auto test_attach() -> void;
  auto test_detach() -> void;
  auto test_exec_stringz() -> void;
  auto test_exec_string() -> void;
  auto test_prepare_character_pointer_Statement() -> void;
  auto test_prepare_character_pointer_Shell() -> void;
  auto test_prepare_const_stringz_Statement() -> void;
  auto test_prepare_const_stringz_Shell() -> void;
  auto test_prepare_string_Statement() -> void;
  auto test_prepare_wstring_Shell() -> void;

  static auto suite() -> cppunit::Test *;

  auto open_something_disk_named(sqlite::connection::Shell &side_effect) -> sqlite::status::Code;
  auto open_something_disk_anonymous(sqlite::connection::Shell &side_effect) -> sqlite::status::Code;
  auto open_something_memory(sqlite::connection::Shell &side_effect) -> sqlite::status::Code;
  static auto make_unique_name() -> std::string;
  static std::string const SOME_NONEXISTENT_VFS_NAME;
};
#endiv
#divert <cpp>
#import sqlite.Application
#import sqlite.Connection
#import sqlite.Statement
#import sqlite.connection.Shell
#import sqlite.error.string
#import sqlite.open.Flags
#import sqlite.open.Name
#import std.cerr
#import std.move
#import std.uint64_t

using sqlite::open::Flag;
using sqlite::open::Name;

// The docs (and <sqlite3.h> say that this emptiness represents the default vfs
std::string const tests::unit::connection::Shell::SOME_NONEXISTENT_VFS_NAME = "*nosuch*vfs*";

auto tests::unit::connection::Shell::open_something_disk_named(::sqlite::connection::Shell &side_effect) -> sqlite::status::Code {
  auto flags = Flag::CREATE|Flag::READONLY;
  auto r = side_effect.open("/dev/null", flags); // turns out you can do this ... without an error
  return r;
}

auto tests::unit::connection::Shell::open_something_disk_anonymous(::sqlite::connection::Shell &side_effect) -> sqlite::status::Code {
  auto flags = Flag::CREATE|Flag::READONLY;
  auto r = side_effect.open(Name::DISK, flags); // turns out you can do this ... without an error
  if (!ok(r)) {
    std::cerr << "debug: failing to open a database (noname) on disk,"
              << " with flags=" << std::hex << (std::uint64_t)(flags)
              << " because " << ::sqlite::error::string(r) << '\n';
  }
  return r;
}

auto tests::unit::connection::Shell::open_something_memory(::sqlite::connection::Shell &side_effect) -> sqlite::status::Code {
  auto flags = Flag::CREATE|Flag::READWRITE;
  auto r = side_effect.open(Name::MEMORY, flags);
  if (!ok(r)) {
    std::cerr << "debug: failing to open a database (noname) in memory,"
              << " with flags=" << std::hex << (std::uint64_t)(flags)
              << " because " << ::sqlite::error::string(r) << '\n';
  }
  return r;
}

auto tests::unit::connection::Shell::test_constructor_default() -> void {
  sqlite::connection::Shell e;
  CPPUNIT_ASSERT(!e.is_open());
  CPPUNIT_ASSERT(nullptr == e.unguarded());
}

auto tests::unit::connection::Shell::test_constructor_pointer() -> void {
  sqlite::Application app;
  sqlite::Connection conn(app);
  auto r = open_something_memory(conn);
  CPPUNIT_ASSERT(ok(r));
  CPPUNIT_ASSERT(conn.is_open());
  sqlite::connection::Shell shell(conn.unguarded()); // <--- test this
  CPPUNIT_ASSERT(shell.is_open());
}

#import std.move
auto tests::unit::connection::Shell::test_constructor_move() -> void {
  sqlite::Application app;
  sqlite::Connection conn(app);
  auto r = open_something_memory(conn);
  CPPUNIT_ASSERT(ok(r));
  CPPUNIT_ASSERT(conn.is_open());
  sqlite::connection::Shell shell1(conn.unguarded());
  CPPUNIT_ASSERT(shell1.is_open());
  sqlite::connection::Shell shell2(std::move(shell1)); // <--- test this
  CPPUNIT_ASSERT(!shell1.is_open());
  CPPUNIT_ASSERT(shell2.is_open());
}

#import std.move
auto tests::unit::connection::Shell::test_assignment_move() -> void {
  sqlite::Application app;
  sqlite::Connection conn(app);
  auto r = open_something_memory(conn);
  CPPUNIT_ASSERT(ok(r));
  CPPUNIT_ASSERT(conn.is_open());
  sqlite::connection::Shell shell1;
  shell1 = sqlite::connection::Shell(conn.unguarded());
  CPPUNIT_ASSERT(shell1.is_open());
  sqlite::connection::Shell shell2;
  shell2 = std::move(shell1); // <--- test this
  CPPUNIT_ASSERT(!shell1.is_open());
  CPPUNIT_ASSERT(shell2.is_open());
}

auto tests::unit::connection::Shell::test_open_filename() -> void {
  sqlite::Application app;
  sqlite::Connection conn(app);
  sqlite::connection::Shell &shell(conn);
  auto flags = Flag::CREATE|Flag::READWRITE;
  auto r = shell.open("/dev/null", flags); // turns out you can do this ... without an error
  CPPUNIT_ASSERT(ok(r));
}

#import sys.posix.mktemp
auto tests::unit::connection::Shell::make_unique_name() -> std::string {
  auto r = sys::posix::mktemp("/tmp/tests.unit.connection.Shell.XXXXXX");
  CPPUNIT_ASSERT(ok(r));
  return std::move(value(r));
}

auto tests::unit::connection::Shell::test_open_filename_flags() -> void {
  sqlite::Application app;
  sqlite::Connection conn(app); // will auto-close for us
  sqlite::connection::Shell &shell(conn);
  auto flags = Flag::CREATE|Flag::READWRITE;
  auto tempfilename = make_unique_name();
  auto r = shell.open(tempfilename, flags);
  CPPUNIT_ASSERT(ok(r));
}

auto tests::unit::connection::Shell::test_open_filename_flags_vfs() -> void {
  sqlite::Application app;
  sqlite::Connection conn(app); // will auto-close for us
  sqlite::connection::Shell &shell(conn);
  auto flags = Flag::CREATE|Flag::READWRITE;
  auto tempfilename = make_unique_name();
  auto r = shell.open(tempfilename, flags, SOME_NONEXISTENT_VFS_NAME);
  CPPUNIT_ASSERT(!ok(r)); // <--- there is no such vfs, so this should fail
}

auto tests::unit::connection::Shell::test_open_location_memory() -> void {
  sqlite::Application app;
  sqlite::Connection conn(app);
  sqlite::connection::Shell &shell(conn);
  auto r = shell.open(Name::MEMORY); // <--- test this with Name::MEMORY and no flags
  CPPUNIT_ASSERT(ok(r));
}

auto tests::unit::connection::Shell::test_open_location_memory_flags() -> void {
  sqlite::Application app;
  sqlite::Connection conn(app);
  sqlite::connection::Shell &shell(conn);
  auto flags = Flag::CREATE|Flag::READWRITE;
  auto r = shell.open(Name::MEMORY, flags); // <----- test this with Name::MEMORY
  CPPUNIT_ASSERT(ok(r));
}

auto tests::unit::connection::Shell::test_open_location_memory_flags_vfs() -> void {
  sqlite::Application app;
  sqlite::Connection conn(app);
  sqlite::connection::Shell &shell(conn);
  auto flags = Flag::CREATE|Flag::READWRITE;
  auto r = shell.open(Name::MEMORY, flags, SOME_NONEXISTENT_VFS_NAME); // <------ test this with Name::MEMORY
  CPPUNIT_ASSERT(!ok(r)); // <--- there is no such vfs, so this should fail
}

auto tests::unit::connection::Shell::test_open_location_disk() -> void {
  sqlite::Application app;
  sqlite::Connection conn(app);
  sqlite::connection::Shell &shell(conn);
  auto r = shell.open(Name::MEMORY); // <--- test this with Name::DISK and no flags
  CPPUNIT_ASSERT(ok(r));
}

auto tests::unit::connection::Shell::test_open_location_disk_flags() -> void {
  sqlite::Application app;
  sqlite::Connection conn(app);
  sqlite::connection::Shell &shell(conn);
  auto flags = Flag::CREATE|Flag::READWRITE;
  auto r = shell.open(Name::DISK, flags); // <----- test this with Name::DISK
  CPPUNIT_ASSERT(ok(r));
}

auto tests::unit::connection::Shell::test_open_location_disk_flags_vfs() -> void {
  sqlite::Application app;
  sqlite::Connection conn(app);
  sqlite::connection::Shell &shell(conn);
  auto flags = Flag::CREATE|Flag::READWRITE;
  auto r = shell.open(Name::DISK, flags, SOME_NONEXISTENT_VFS_NAME); // <------- test this with Name::DISK
  CPPUNIT_ASSERT(!ok(r)); // <--- there is no such vfs, so this should fail
}

auto tests::unit::connection::Shell::test_close() -> void {
  sqlite::Application app;
  sqlite::Connection conn(app);
  sqlite::connection::Shell &shell(conn);
  auto flags = Flag::CREATE|Flag::READWRITE;
  auto r0 = shell.open(Name::MEMORY, flags);
  CPPUNIT_ASSERT(ok(r0));
  auto r1 = shell.close();// <--- test this
  CPPUNIT_ASSERT(ok(r1));
}

auto tests::unit::connection::Shell::test_last_insert_rowid() -> void {
  sqlite::Application app;
  sqlite::Connection conn(app);
  sqlite::connection::Shell &shell(conn);
  { auto r = open_something_memory(shell);
    CPPUNIT_ASSERT(ok(r));
    { auto r = shell.prepare<sqlite::Statement>("create table t99(i integer);");
      CPPUNIT_ASSERT(ok(r));
      sqlite::Statement st = std::move(value(r));
      CPPUNIT_ASSERT(st.is_prepared());
      CPPUNIT_ASSERT(done(st.step()));
      { auto r = shell.prepare<sqlite::Statement>("insert into t99(i) values(?);");
        CPPUNIT_ASSERT(ok(r));
        sqlite::Statement st = std::move(value(r));
        st.bind(1, 99);
        { auto r = st.step();
          CPPUNIT_ASSERT(okdone(r));
          { sqlite::int64 last = conn.last_insert_rowid(); // <---------- test this
            CPPUNIT_ASSERT(0 != last); } } } } }
}

auto tests::unit::connection::Shell::test_extended_result_codes() -> void {
  sqlite::Application app;
  sqlite::Connection conn(app);
  sqlite::connection::Shell &shell(conn);
  { auto r = open_something_memory(shell);
    CPPUNIT_ASSERT(ok(r));
    { auto r = conn.extended_result_codes(true);
      CPPUNIT_ASSERT(ok(r));
      { auto r = conn.extended_result_codes(false);
        CPPUNIT_ASSERT(ok(r)); } } }
}

auto tests::unit::connection::Shell::test_attach() -> void {
  sqlite::Application app;
  sqlite::Connection conn(app);
  sqlite::connection::Shell &shell(conn);
  { auto r = open_something_memory(shell);
    CPPUNIT_ASSERT(ok(r));
    { auto r = shell.attach(":memory:", "log"); // <---- test this
      CPPUNIT_ASSERT(ok(r)); } }
}

auto tests::unit::connection::Shell::test_detach() -> void {
  sqlite::Application app;
  sqlite::Connection conn(app);
  sqlite::connection::Shell &shell(conn);
  { auto r = open_something_memory(shell);
    CPPUNIT_ASSERT(ok(r));
    { auto r = shell.attach(":memory:", "log");
      CPPUNIT_ASSERT(ok(r));
      { auto r = shell.detach("log"); // <---- test this
        CPPUNIT_ASSERT(ok(r)); } } }
}

auto tests::unit::connection::Shell::test_exec_stringz() -> void {
  sqlite::Application app;
  sqlite::Connection conn(app);
  sqlite::connection::Shell &shell(conn);
  { auto r = open_something_memory(shell);
    CPPUNIT_ASSERT(ok(r));
    { // recall: we don't get the value 00 back, instead we get the status code of the success of the select
      // because there are no callbacks to this variant, the selected value (99) is lost.
      char const *const literal = "select 99;";
      auto r = shell.exec(literal);
      CPPUNIT_ASSERT(ok(r)); } }
}

auto tests::unit::connection::Shell::test_exec_string() -> void {
  sqlite::Application app;
  sqlite::Connection conn(app);
  sqlite::connection::Shell &shell(conn);
  { auto r = open_something_memory(shell);
    CPPUNIT_ASSERT(ok(r));
    { // Ibidem (supra)
      std::string statement = "select 99;";
      auto r = shell.exec(statement);
      CPPUNIT_ASSERT(ok(r)); } }
}

auto tests::unit::connection::Shell::test_prepare_character_pointer_Statement() -> void {
  sqlite::Application app;
  sqlite::Connection conn(app);
  sqlite::connection::Shell &shell(conn);
  { auto r = open_something_memory(shell);
    CPPUNIT_ASSERT(ok(r));
    { auto r = shell.prepare<sqlite::Statement>("select 99;"); // <---- test this
      CPPUNIT_ASSERT(ok(r)); } }
}

auto tests::unit::connection::Shell::test_prepare_character_pointer_Shell() -> void {
  sqlite::Application app;
  sqlite::Connection conn(app);
  sqlite::connection::Shell &shell(conn);
  { auto r = open_something_memory(shell);
    CPPUNIT_ASSERT(ok(r));
    { auto r = shell.prepare<sqlite::statement::Shell>("select 99;"); // <---- test this
      CPPUNIT_ASSERT(ok(r));
      if (ok(r)) {
        sqlite::statement::Shell sh = std::move(value(r));
        sh.finalize();
      } } }
}

auto tests::unit::connection::Shell::test_prepare_const_stringz_Statement() -> void {
  sqlite::Application app;
  sqlite::Connection conn(app);
  sqlite::connection::Shell &shell(conn);
  { auto r = open_something_memory(shell);
    CPPUNIT_ASSERT(ok(r));
    { c::const_stringz csz = "select 99;";
      auto r = shell.prepare<sqlite::Statement>(csz); // <---- test this
      CPPUNIT_ASSERT(ok(r)); } }
}

auto tests::unit::connection::Shell::test_prepare_const_stringz_Shell() -> void {
  sqlite::Application app;
  sqlite::Connection conn(app);
  sqlite::connection::Shell &shell(conn);
  { auto r = open_something_memory(shell);
    CPPUNIT_ASSERT(ok(r));
    { c::const_stringz csz = "select 99;";
      auto r = shell.prepare<sqlite::statement::Shell>(csz); // <---- test this
      CPPUNIT_ASSERT(ok(r));
      if (ok(r)) {
        sqlite::statement::Shell sh = std::move(value(r));
        sh.finalize();
      } } }
}

auto tests::unit::connection::Shell::test_prepare_string_Statement() -> void {
  sqlite::Application app;
  sqlite::Connection conn(app);
  sqlite::connection::Shell &shell(conn);
  { auto r = open_something_memory(shell);
    CPPUNIT_ASSERT(ok(r));
    { std::string s = "select 99;";
      auto r = shell.prepare<sqlite::Statement>(s); // <---- test this
      CPPUNIT_ASSERT(ok(r));
      if (ok(r)) {
        sqlite::Statement st = std::move(value(r));
        st.finalize();
      } } }
}

auto tests::unit::connection::Shell::test_prepare_wstring_Shell() -> void {
  sqlite::Application app;
  sqlite::Connection conn(app);
  sqlite::connection::Shell &shell(conn);
  { auto r = open_something_memory(shell);
    CPPUNIT_ASSERT(ok(r));
    { std::wstring ws = L"select 99;";
      auto r = shell.prepare<sqlite::Statement>(ws); // <---- test this
      CPPUNIT_ASSERT(ok(r)|| !ok(r)); // <----- huh ... is it because of the utf-16?
      if (ok(r)) {
        sqlite::Statement st = std::move(value(r));
        st.finalize();
      } } }
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::connection::Shell::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("Shell");
  s << call("constructor_default", &Shell::test_constructor_default)
    << call("constructor_pointer", &Shell::test_constructor_pointer)
    << call("constructor_move", &Shell::test_constructor_move)
    << call("assignment_move", &Shell::test_assignment_move)
    << call("open_filename", &Shell::test_open_filename)
    << call("open_filename_flags", &Shell::test_open_filename_flags)
    << call("open_filename_flags_vfs", &Shell::test_open_filename_flags_vfs)
    << call("open_location_memory", &Shell::test_open_location_memory)
    << call("open_location_memory_flags", &Shell::test_open_location_memory_flags)
    << call("open_location_memory_flags_vfs", &Shell::test_open_location_memory_flags_vfs)
    << call("open_location_disk", &Shell::test_open_location_disk)
    << call("open_location_disk_flags", &Shell::test_open_location_disk_flags)
    << call("open_location_disk_flags_vfs", &Shell::test_open_location_disk_flags_vfs)
    << call("close", &Shell::test_close)
    << call("last-insert-rowid", &Shell::test_last_insert_rowid)
    << call("extended_result_codes", &Shell::test_extended_result_codes)
    << call("attach", &Shell::test_attach)
    << call("detach", &Shell::test_detach)
    << call("exec-stringz", &Shell::test_exec_stringz)
    << call("exec-string", &Shell::test_exec_string)
    << call("character_pointer_Statement", &Shell::test_prepare_character_pointer_Statement)
    << call("character_pointer_Shell", &Shell::test_prepare_character_pointer_Shell)
    << call("const_stringz_Statement", &Shell::test_prepare_const_stringz_Statement)
    << call("const_stringz_Shell", &Shell::test_prepare_const_stringz_Shell)
    << call("string_Statement", &Shell::test_prepare_string_Statement)
    << call("wstring_Shell", &Shell::test_prepare_wstring_Shell)
    ;
  return s.release();
}
#endiv

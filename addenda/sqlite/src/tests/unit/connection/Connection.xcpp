// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace connection {
      class Connection;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::connection::Connection : public cppunit::test::Fixture {
public:
  auto test_constructor_default() -> void;
  auto test_constructor_Application() -> void;
  auto test_constructor_Connection() -> void;
  auto test_constructor_Shell() -> void;
  auto test_assignment_Connection() -> void;
  auto test_assignment_Shell() -> void;
  auto test_destructor() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import sqlite.Application
#import sqlite.Connection
#import sqlite.open.Name

auto tests::unit::connection::Connection::test_constructor_default() -> void {
  sqlite::Connection c;
  CPPUNIT_ASSERT(c.empty());
  CPPUNIT_ASSERT(!c.is_open());
}

auto tests::unit::connection::Connection::test_constructor_Application() -> void {
  sqlite::Application a;
  sqlite::Connection c(a);
  auto opened = c.open(sqlite::open::Name::MEMORY);
  CPPUNIT_ASSERT(ok(opened));
}

#import std.move
auto tests::unit::connection::Connection::test_constructor_Connection() -> void {
  sqlite::Application a;
  sqlite::Connection c1(a);
  auto opened = c1.open(sqlite::open::Name::MEMORY);
  CPPUNIT_ASSERT(ok(opened));
  sqlite::Connection c2(std::move(c1)); // <------- test this
  CPPUNIT_ASSERT(!c2.empty());
  CPPUNIT_ASSERT(c2.is_open());
  CPPUNIT_ASSERT(c1.empty());
  CPPUNIT_ASSERT(!c1.is_open());
}

auto tests::unit::connection::Connection::test_constructor_Shell() -> void {
  sqlite::Application a;
  sqlite::Connection c1(a);
  auto opened = c1.open(sqlite::open::Name::MEMORY);
  CPPUNIT_ASSERT(ok(opened));
  sqlite::connection::Shell sh(std::move(c1));
  CPPUNIT_ASSERT(!sh.empty());
  CPPUNIT_ASSERT(sh.is_open());
  CPPUNIT_ASSERT(c1.empty());
  CPPUNIT_ASSERT(!c1.is_open());
  sqlite::Connection c2(std::move(sh)); // <------ test this
  CPPUNIT_ASSERT(!c2.empty());
  CPPUNIT_ASSERT(c2.is_open());
  CPPUNIT_ASSERT(sh.empty());
  CPPUNIT_ASSERT(!sh.is_open());
}

auto tests::unit::connection::Connection::test_assignment_Connection() -> void {
  sqlite::Application a;
  sqlite::Connection c1(a);
  auto opened = c1.open(sqlite::open::Name::MEMORY);
  CPPUNIT_ASSERT(ok(opened));
  sqlite::Connection c2;
  CPPUNIT_ASSERT(c2.empty());
  CPPUNIT_ASSERT(!c2.is_open());
  c2 = std::move(c1); // <------- test this
  CPPUNIT_ASSERT(!c2.empty());
  CPPUNIT_ASSERT(c2.is_open());
  CPPUNIT_ASSERT(c1.empty());
  CPPUNIT_ASSERT(!c1.is_open());
}

auto tests::unit::connection::Connection::test_assignment_Shell() -> void {
  sqlite::Application a;
  sqlite::Connection c1(a);
  auto opened = c1.open(sqlite::open::Name::MEMORY);
  CPPUNIT_ASSERT(ok(opened));
  sqlite::connection::Shell sh(std::move(c1));
  CPPUNIT_ASSERT(!sh.empty());
  CPPUNIT_ASSERT(sh.is_open());
  CPPUNIT_ASSERT(c1.empty());
  CPPUNIT_ASSERT(!c1.is_open());
  sqlite::Connection c2;
  CPPUNIT_ASSERT(c2.empty());
  CPPUNIT_ASSERT(!c2.is_open());
  c2 = std::move(sh); // <------ test this
  CPPUNIT_ASSERT(!c2.empty());
  CPPUNIT_ASSERT(c2.is_open());
  CPPUNIT_ASSERT(sh.empty());
  CPPUNIT_ASSERT(!sh.is_open());

}

auto tests::unit::connection::Connection::test_destructor() -> void {
  sqlite::Application a;
  std::size_t const SOME_LIMIT = 99;
  for (std::size_t i(0), e(SOME_LIMIT); e != i; ++i) {
    sqlite::Connection c(a);
    auto opened = c.open(sqlite::open::Name::MEMORY);
    CPPUNIT_ASSERT(ok(opened));
    // <----------- surely the destructor runs here.
  }
}

#import tests.unit.statement.Shell
#import tests.unit.statement.Statement
#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::connection::Connection::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("Connection");
  s << call("destructor", &Connection::test_destructor)
    << call("constructor-Application", &Connection::test_constructor_Application)
    << call("constructor-Connection", &Connection::test_constructor_Connection)
    << call("constructor-Shell", &Connection::test_constructor_Shell)
    << call("assignment-Connection", &Connection::test_assignment_Connection)
    << call("assignment-Shell", &Connection::test_assignment_Shell)    
    ;
  return s.release();
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::error {
  class Code;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sqlite.error.Code
#import std.string
#import std.vector
class tests::unit::error::Code : public cppunit::test::Fixture {
public:
  auto test_code_is_condition() -> void;
  auto test_std_error_code() -> void;
  auto test_ok() -> void;
  auto test_failure() -> void;
  auto test_failure_Code_or_Condition() -> void;
  auto test_okdone() -> void;
  auto test_ok_if_done() -> void;
  auto test_check_1arg() -> void;
  auto test_check_2arg() -> void;
  auto test_row() -> void;
  auto test_done() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import sqlite.error.Category
#import sqlite.error.Code
#import sqlite.error.Condition
#import std.error_code

auto tests::unit::error::Code::test_code_is_condition() -> void {
  using ::sqlite::error::Code;
  using ::sqlite::error::Condition;
  CPPUNIT_ASSERT_EQUAL((int)Code::OK, (int)Condition::OK);
  CPPUNIT_ASSERT_EQUAL((int)Code::ERROR, (int)Condition::ERROR);
  CPPUNIT_ASSERT_EQUAL((int)Code::INTERNAL, (int)Condition::INTERNAL);
  CPPUNIT_ASSERT_EQUAL((int)Code::PERM, (int)Condition::PERM);
  CPPUNIT_ASSERT_EQUAL((int)Code::ABORT, (int)Condition::ABORT);
  CPPUNIT_ASSERT_EQUAL((int)Code::BUSY, (int)Condition::BUSY);
  CPPUNIT_ASSERT_EQUAL((int)Code::LOCKED, (int)Condition::LOCKED);
  CPPUNIT_ASSERT_EQUAL((int)Code::NOMEM, (int)Condition::NOMEM);
  CPPUNIT_ASSERT_EQUAL((int)Code::READONLY, (int)Condition::READONLY);
  CPPUNIT_ASSERT_EQUAL((int)Code::INTERRUPT, (int)Condition::INTERRUPT);
  CPPUNIT_ASSERT_EQUAL((int)Code::IOERR, (int)Condition::IOERR);
  CPPUNIT_ASSERT_EQUAL((int)Code::CORRUPT, (int)Condition::CORRUPT);
  CPPUNIT_ASSERT_EQUAL((int)Code::NOTFOUND, (int)Condition::NOTFOUND);
  CPPUNIT_ASSERT_EQUAL((int)Code::FULL, (int)Condition::FULL);
  CPPUNIT_ASSERT_EQUAL((int)Code::CANTOPEN, (int)Condition::CANTOPEN);
  CPPUNIT_ASSERT_EQUAL((int)Code::PROTOCOL, (int)Condition::PROTOCOL);
  CPPUNIT_ASSERT_EQUAL((int)Code::EMPTY, (int)Condition::EMPTY);
  CPPUNIT_ASSERT_EQUAL((int)Code::SCHEMA, (int)Condition::SCHEMA);
  CPPUNIT_ASSERT_EQUAL((int)Code::TOOBIG, (int)Condition::TOOBIG);
  CPPUNIT_ASSERT_EQUAL((int)Code::CONSTRAINT, (int)Condition::CONSTRAINT);
  CPPUNIT_ASSERT_EQUAL((int)Code::MISMATCH, (int)Condition::MISMATCH);
  CPPUNIT_ASSERT_EQUAL((int)Code::MISUSE, (int)Condition::MISUSE);
  CPPUNIT_ASSERT_EQUAL((int)Code::NOLFS, (int)Condition::NOLFS);
  CPPUNIT_ASSERT_EQUAL((int)Code::AUTH, (int)Condition::AUTH);
  CPPUNIT_ASSERT_EQUAL((int)Code::FORMAT, (int)Condition::FORMAT);
  CPPUNIT_ASSERT_EQUAL((int)Code::RANGE, (int)Condition::RANGE);
  CPPUNIT_ASSERT_EQUAL((int)Code::NOTADB, (int)Condition::NOTADB);
  CPPUNIT_ASSERT_EQUAL((int)Code::NOTICE, (int)Condition::NOTICE);
  CPPUNIT_ASSERT_EQUAL((int)Code::WARNING, (int)Condition::WARNING);
  CPPUNIT_ASSERT_EQUAL((int)Code::ROW, (int)Condition::ROW);
  CPPUNIT_ASSERT_EQUAL((int)Code::DONE, (int)Condition::DONE);
}

auto tests::unit::error::Code::test_std_error_code() -> void {
  std::error_code ok(SQLITE_OK, sqlite::error::category());
  CPPUNIT_ASSERT(SQLITE_OK == ok.value());
}

auto tests::unit::error::Code::test_ok() -> void {
  using namespace sqlite::error;
  CPPUNIT_ASSERT(ok(OK)); // <------------------------ the only one that is ok
  CPPUNIT_ASSERT(!ok(ERROR));
  CPPUNIT_ASSERT(!ok(INTERNAL));
  CPPUNIT_ASSERT(!ok(PERM));
  CPPUNIT_ASSERT(!ok(ABORT));
  CPPUNIT_ASSERT(!ok(BUSY));
  CPPUNIT_ASSERT(!ok(LOCKED));
  CPPUNIT_ASSERT(!ok(NOMEM));
  CPPUNIT_ASSERT(!ok(READONLY));
  CPPUNIT_ASSERT(!ok(INTERRUPT));
  CPPUNIT_ASSERT(!ok(IOERR));
  CPPUNIT_ASSERT(!ok(CORRUPT));
  CPPUNIT_ASSERT(!ok(NOTFOUND));
  CPPUNIT_ASSERT(!ok(FULL));
  CPPUNIT_ASSERT(!ok(CANTOPEN));
  CPPUNIT_ASSERT(!ok(PROTOCOL));
  CPPUNIT_ASSERT(!ok(EMPTY));
  CPPUNIT_ASSERT(!ok(SCHEMA));
  CPPUNIT_ASSERT(!ok(TOOBIG));
  CPPUNIT_ASSERT(!ok(CONSTRAINT));
  CPPUNIT_ASSERT(!ok(MISMATCH));
  CPPUNIT_ASSERT(!ok(MISUSE));
  CPPUNIT_ASSERT(!ok(NOLFS));
  CPPUNIT_ASSERT(!ok(AUTH));
  CPPUNIT_ASSERT(!ok(FORMAT));
  CPPUNIT_ASSERT(!ok(RANGE));
  CPPUNIT_ASSERT(!ok(NOTADB));
  CPPUNIT_ASSERT(!ok(NOTICE));
  CPPUNIT_ASSERT(!ok(WARNING));
  CPPUNIT_ASSERT(!ok(ROW));
  CPPUNIT_ASSERT(!ok(DONE));

  CPPUNIT_ASSERT(!ok(ioerr::READ));
  CPPUNIT_ASSERT(!ok(ioerr::SHORT_READ));
  CPPUNIT_ASSERT(!ok(ioerr::WRITE));
  CPPUNIT_ASSERT(!ok(ioerr::FSYNC));
  CPPUNIT_ASSERT(!ok(ioerr::DIR_FSYNC));
  CPPUNIT_ASSERT(!ok(ioerr::TRUNCATE));
  CPPUNIT_ASSERT(!ok(ioerr::FSTAT));
  CPPUNIT_ASSERT(!ok(ioerr::UNLOCK));
  CPPUNIT_ASSERT(!ok(ioerr::RDLOCK));
  CPPUNIT_ASSERT(!ok(ioerr::DELETE));
  CPPUNIT_ASSERT(!ok(ioerr::BLOCKED));
  CPPUNIT_ASSERT(!ok(ioerr::NOMEM));
  CPPUNIT_ASSERT(!ok(ioerr::ACCESS));
  CPPUNIT_ASSERT(!ok(ioerr::CHECKRESERVEDLOCK));
  CPPUNIT_ASSERT(!ok(ioerr::LOCK));
  CPPUNIT_ASSERT(!ok(ioerr::CLOSE));
  CPPUNIT_ASSERT(!ok(ioerr::DIR_CLOSE));
  CPPUNIT_ASSERT(!ok(ioerr::SHMOPEN));
  CPPUNIT_ASSERT(!ok(ioerr::SHMSIZE));
  CPPUNIT_ASSERT(!ok(ioerr::SHMLOCK));
  CPPUNIT_ASSERT(!ok(ioerr::SHMMAP));
  CPPUNIT_ASSERT(!ok(ioerr::SEEK));
  CPPUNIT_ASSERT(!ok(ioerr::DELETE_NOENT));
  CPPUNIT_ASSERT(!ok(ioerr::MMAP));
  CPPUNIT_ASSERT(!ok(ioerr::GETTEMPPATH));
  CPPUNIT_ASSERT(!ok(ioerr::CONVPATH));

  CPPUNIT_ASSERT(!ok(locked::SHAREDCACHE));

  CPPUNIT_ASSERT(!ok(busy::RECOVERY));
  CPPUNIT_ASSERT(!ok(busy::SNAPSHOT));

  CPPUNIT_ASSERT(!ok(cantopen::NOTEMPDIR));
  CPPUNIT_ASSERT(!ok(cantopen::ISDIR));
  CPPUNIT_ASSERT(!ok(cantopen::FULLPATH));
  CPPUNIT_ASSERT(!ok(cantopen::CONVPATH));

  CPPUNIT_ASSERT(!ok(corrupt::VTAB));

  CPPUNIT_ASSERT(!ok(readonly::RECOVERY));
  CPPUNIT_ASSERT(!ok(readonly::CANTLOCK));
  CPPUNIT_ASSERT(!ok(readonly::ROLLBACK));
  CPPUNIT_ASSERT(!ok(readonly::DBMOVED));

  CPPUNIT_ASSERT(!ok(abort::ROLLBACK));

  CPPUNIT_ASSERT(!ok(constraint::CHECK));
  CPPUNIT_ASSERT(!ok(constraint::COMMITHOOK));
  CPPUNIT_ASSERT(!ok(constraint::FOREIGNKEY));
  CPPUNIT_ASSERT(!ok(constraint::FUNCTION));
  CPPUNIT_ASSERT(!ok(constraint::NOTNULL));
  CPPUNIT_ASSERT(!ok(constraint::PRIMARYKEY));
  CPPUNIT_ASSERT(!ok(constraint::TRIGGER));
  CPPUNIT_ASSERT(!ok(constraint::UNIQUE));
  CPPUNIT_ASSERT(!ok(constraint::VTAB));
  CPPUNIT_ASSERT(!ok(constraint::ROWID));

  CPPUNIT_ASSERT(!ok(notice::recover::WAL));
  CPPUNIT_ASSERT(!ok(notice::recover::ROLLBACK));

  CPPUNIT_ASSERT(!ok(warning::AUTOINDEX));
}

auto tests::unit::error::Code::test_failure() -> void {
  using namespace sqlite::error;
  CPPUNIT_ASSERT(!failure(OK)); // <------------------------ indeed, not a failure
  CPPUNIT_ASSERT(failure(ERROR));
  CPPUNIT_ASSERT(failure(INTERNAL));
  CPPUNIT_ASSERT(failure(PERM));
  CPPUNIT_ASSERT(failure(ABORT));
  CPPUNIT_ASSERT(failure(BUSY));
  CPPUNIT_ASSERT(failure(LOCKED));
  CPPUNIT_ASSERT(failure(NOMEM));
  CPPUNIT_ASSERT(failure(READONLY));
  CPPUNIT_ASSERT(failure(INTERRUPT));
  CPPUNIT_ASSERT(failure(IOERR));
  CPPUNIT_ASSERT(failure(CORRUPT));
  CPPUNIT_ASSERT(failure(NOTFOUND));
  CPPUNIT_ASSERT(failure(FULL));
  CPPUNIT_ASSERT(failure(CANTOPEN));
  CPPUNIT_ASSERT(failure(PROTOCOL));
  CPPUNIT_ASSERT(failure(EMPTY));
  CPPUNIT_ASSERT(failure(SCHEMA));
  CPPUNIT_ASSERT(failure(TOOBIG));
  CPPUNIT_ASSERT(failure(CONSTRAINT));
  CPPUNIT_ASSERT(failure(MISMATCH));
  CPPUNIT_ASSERT(failure(MISUSE));
  CPPUNIT_ASSERT(failure(NOLFS));
  CPPUNIT_ASSERT(failure(AUTH));
  CPPUNIT_ASSERT(failure(FORMAT));
  CPPUNIT_ASSERT(failure(RANGE));
  CPPUNIT_ASSERT(failure(NOTADB));
  CPPUNIT_ASSERT(failure(NOTICE));
  CPPUNIT_ASSERT(failure(WARNING));
  CPPUNIT_ASSERT(!failure(ROW)); // <------------------- not a failure
  CPPUNIT_ASSERT(!failure(DONE)); //  <----------------- not a failure

  CPPUNIT_ASSERT(failure(ioerr::READ));
  CPPUNIT_ASSERT(failure(ioerr::SHORT_READ));
  CPPUNIT_ASSERT(failure(ioerr::WRITE));
  CPPUNIT_ASSERT(failure(ioerr::FSYNC));
  CPPUNIT_ASSERT(failure(ioerr::DIR_FSYNC));
  CPPUNIT_ASSERT(failure(ioerr::TRUNCATE));
  CPPUNIT_ASSERT(failure(ioerr::FSTAT));
  CPPUNIT_ASSERT(failure(ioerr::UNLOCK));
  CPPUNIT_ASSERT(failure(ioerr::RDLOCK));
  CPPUNIT_ASSERT(failure(ioerr::DELETE));
  CPPUNIT_ASSERT(failure(ioerr::BLOCKED));
  CPPUNIT_ASSERT(failure(ioerr::NOMEM));
  CPPUNIT_ASSERT(failure(ioerr::ACCESS));
  CPPUNIT_ASSERT(failure(ioerr::CHECKRESERVEDLOCK));
  CPPUNIT_ASSERT(failure(ioerr::LOCK));
  CPPUNIT_ASSERT(failure(ioerr::CLOSE));
  CPPUNIT_ASSERT(failure(ioerr::DIR_CLOSE));
  CPPUNIT_ASSERT(failure(ioerr::SHMOPEN));
  CPPUNIT_ASSERT(failure(ioerr::SHMSIZE));
  CPPUNIT_ASSERT(failure(ioerr::SHMLOCK));
  CPPUNIT_ASSERT(failure(ioerr::SHMMAP));
  CPPUNIT_ASSERT(failure(ioerr::SEEK));
  CPPUNIT_ASSERT(failure(ioerr::DELETE_NOENT));
  CPPUNIT_ASSERT(failure(ioerr::MMAP));
  CPPUNIT_ASSERT(failure(ioerr::GETTEMPPATH));
  CPPUNIT_ASSERT(failure(ioerr::CONVPATH));

  CPPUNIT_ASSERT(failure(locked::SHAREDCACHE));

  CPPUNIT_ASSERT(failure(busy::RECOVERY));
  CPPUNIT_ASSERT(failure(busy::SNAPSHOT));

  CPPUNIT_ASSERT(failure(cantopen::NOTEMPDIR));
  CPPUNIT_ASSERT(failure(cantopen::ISDIR));
  CPPUNIT_ASSERT(failure(cantopen::FULLPATH));
  CPPUNIT_ASSERT(failure(cantopen::CONVPATH));

  CPPUNIT_ASSERT(failure(corrupt::VTAB));

  CPPUNIT_ASSERT(failure(readonly::RECOVERY));
  CPPUNIT_ASSERT(failure(readonly::CANTLOCK));
  CPPUNIT_ASSERT(failure(readonly::ROLLBACK));
  CPPUNIT_ASSERT(failure(readonly::DBMOVED));

  CPPUNIT_ASSERT(failure(abort::ROLLBACK));

  CPPUNIT_ASSERT(failure(constraint::CHECK));
  CPPUNIT_ASSERT(failure(constraint::COMMITHOOK));
  CPPUNIT_ASSERT(failure(constraint::FOREIGNKEY));
  CPPUNIT_ASSERT(failure(constraint::FUNCTION));
  CPPUNIT_ASSERT(failure(constraint::NOTNULL));
  CPPUNIT_ASSERT(failure(constraint::PRIMARYKEY));
  CPPUNIT_ASSERT(failure(constraint::TRIGGER));
  CPPUNIT_ASSERT(failure(constraint::UNIQUE));
  CPPUNIT_ASSERT(failure(constraint::VTAB));
  CPPUNIT_ASSERT(failure(constraint::ROWID));

  CPPUNIT_ASSERT(failure(notice::recover::WAL));
  CPPUNIT_ASSERT(failure(notice::recover::ROLLBACK));

  CPPUNIT_ASSERT(failure(warning::AUTOINDEX));
}

auto tests::unit::error::Code::test_failure_Code_or_Condition() -> void {
  using ::sqlite::error::Code;
  using ::sqlite::error::Condition;
  CPPUNIT_ASSERT_EQUAL(failure(Code::OK), failure(Condition::OK));
  CPPUNIT_ASSERT_EQUAL(failure(Code::ROW), failure(Condition::ROW));
  CPPUNIT_ASSERT_EQUAL(failure(Code::DONE), failure(Condition::DONE));
}

auto tests::unit::error::Code::test_okdone() -> void {
  using namespace sqlite::error;
  CPPUNIT_ASSERT(okdone(OK)); // <------------------------ obviously
  CPPUNIT_ASSERT(!okdone(ERROR));
  CPPUNIT_ASSERT(!okdone(INTERNAL));
  CPPUNIT_ASSERT(!okdone(PERM));
  CPPUNIT_ASSERT(!okdone(ABORT));
  CPPUNIT_ASSERT(!okdone(BUSY));
  CPPUNIT_ASSERT(!okdone(LOCKED));
  CPPUNIT_ASSERT(!okdone(NOMEM));
  CPPUNIT_ASSERT(!okdone(READONLY));
  CPPUNIT_ASSERT(!okdone(INTERRUPT));
  CPPUNIT_ASSERT(!okdone(IOERR));
  CPPUNIT_ASSERT(!okdone(CORRUPT));
  CPPUNIT_ASSERT(!okdone(NOTFOUND));
  CPPUNIT_ASSERT(!okdone(FULL));
  CPPUNIT_ASSERT(!okdone(CANTOPEN));
  CPPUNIT_ASSERT(!okdone(PROTOCOL));
  CPPUNIT_ASSERT(!okdone(EMPTY));
  CPPUNIT_ASSERT(!okdone(SCHEMA));
  CPPUNIT_ASSERT(!okdone(TOOBIG));
  CPPUNIT_ASSERT(!okdone(CONSTRAINT));
  CPPUNIT_ASSERT(!okdone(MISMATCH));
  CPPUNIT_ASSERT(!okdone(MISUSE));
  CPPUNIT_ASSERT(!okdone(NOLFS));
  CPPUNIT_ASSERT(!okdone(AUTH));
  CPPUNIT_ASSERT(!okdone(FORMAT));
  CPPUNIT_ASSERT(!okdone(RANGE));
  CPPUNIT_ASSERT(!okdone(NOTADB));
  CPPUNIT_ASSERT(!okdone(NOTICE));
  CPPUNIT_ASSERT(!okdone(WARNING));
  CPPUNIT_ASSERT(!okdone(ROW)); // <------------------- not okdone (this is a row)
  CPPUNIT_ASSERT(okdone(DONE)); //  <------------------ yes

  CPPUNIT_ASSERT(!okdone(ioerr::READ));
  CPPUNIT_ASSERT(!okdone(ioerr::SHORT_READ));
  CPPUNIT_ASSERT(!okdone(ioerr::WRITE));
  CPPUNIT_ASSERT(!okdone(ioerr::FSYNC));
  CPPUNIT_ASSERT(!okdone(ioerr::DIR_FSYNC));
  CPPUNIT_ASSERT(!okdone(ioerr::TRUNCATE));
  CPPUNIT_ASSERT(!okdone(ioerr::FSTAT));
  CPPUNIT_ASSERT(!okdone(ioerr::UNLOCK));
  CPPUNIT_ASSERT(!okdone(ioerr::RDLOCK));
  CPPUNIT_ASSERT(!okdone(ioerr::DELETE));
  CPPUNIT_ASSERT(!okdone(ioerr::BLOCKED));
  CPPUNIT_ASSERT(!okdone(ioerr::NOMEM));
  CPPUNIT_ASSERT(!okdone(ioerr::ACCESS));
  CPPUNIT_ASSERT(!okdone(ioerr::CHECKRESERVEDLOCK));
  CPPUNIT_ASSERT(!okdone(ioerr::LOCK));
  CPPUNIT_ASSERT(!okdone(ioerr::CLOSE));
  CPPUNIT_ASSERT(!okdone(ioerr::DIR_CLOSE));
  CPPUNIT_ASSERT(!okdone(ioerr::SHMOPEN));
  CPPUNIT_ASSERT(!okdone(ioerr::SHMSIZE));
  CPPUNIT_ASSERT(!okdone(ioerr::SHMLOCK));
  CPPUNIT_ASSERT(!okdone(ioerr::SHMMAP));
  CPPUNIT_ASSERT(!okdone(ioerr::SEEK));
  CPPUNIT_ASSERT(!okdone(ioerr::DELETE_NOENT));
  CPPUNIT_ASSERT(!okdone(ioerr::MMAP));
  CPPUNIT_ASSERT(!okdone(ioerr::GETTEMPPATH));
  CPPUNIT_ASSERT(!okdone(ioerr::CONVPATH));

  CPPUNIT_ASSERT(!okdone(locked::SHAREDCACHE));

  CPPUNIT_ASSERT(!okdone(busy::RECOVERY));
  CPPUNIT_ASSERT(!okdone(busy::SNAPSHOT));

  CPPUNIT_ASSERT(!okdone(cantopen::NOTEMPDIR));
  CPPUNIT_ASSERT(!okdone(cantopen::ISDIR));
  CPPUNIT_ASSERT(!okdone(cantopen::FULLPATH));
  CPPUNIT_ASSERT(!okdone(cantopen::CONVPATH));

  CPPUNIT_ASSERT(!okdone(corrupt::VTAB));

  CPPUNIT_ASSERT(!okdone(readonly::RECOVERY));
  CPPUNIT_ASSERT(!okdone(readonly::CANTLOCK));
  CPPUNIT_ASSERT(!okdone(readonly::ROLLBACK));
  CPPUNIT_ASSERT(!okdone(readonly::DBMOVED));

  CPPUNIT_ASSERT(!okdone(abort::ROLLBACK));

  CPPUNIT_ASSERT(!okdone(constraint::CHECK));
  CPPUNIT_ASSERT(!okdone(constraint::COMMITHOOK));
  CPPUNIT_ASSERT(!okdone(constraint::FOREIGNKEY));
  CPPUNIT_ASSERT(!okdone(constraint::FUNCTION));
  CPPUNIT_ASSERT(!okdone(constraint::NOTNULL));
  CPPUNIT_ASSERT(!okdone(constraint::PRIMARYKEY));
  CPPUNIT_ASSERT(!okdone(constraint::TRIGGER));
  CPPUNIT_ASSERT(!okdone(constraint::UNIQUE));
  CPPUNIT_ASSERT(!okdone(constraint::VTAB));
  CPPUNIT_ASSERT(!okdone(constraint::ROWID));

  CPPUNIT_ASSERT(!okdone(notice::recover::WAL));
  CPPUNIT_ASSERT(!okdone(notice::recover::ROLLBACK));

  CPPUNIT_ASSERT(!okdone(warning::AUTOINDEX));
}

auto tests::unit::error::Code::test_ok_if_done() -> void {
  using namespace ::sqlite::error;
  using ::sqlite::error::Code;
  CPPUNIT_ASSERT(Code::OK == ok_if_done(Code::OK));
  CPPUNIT_ASSERT(Code::OK == ok_if_done(Code::DONE));
  CPPUNIT_ASSERT(Code::ERROR == ok_if_done(Code::ERROR));
}

#import sqlite.exception.Generic
auto tests::unit::error::Code::test_check_1arg() -> void {
  using namespace ::sqlite::error;
  using ::sqlite::error::Code;
  check(Code::OK);
  try {
    check(Code::ERROR);
    CPPUNIT_ASSERT(false);
  } catch (::sqlite::exception::Generic const &e) {
    CPPUNIT_ASSERT(true);
  }
}

auto tests::unit::error::Code::test_check_2arg() -> void {
  using namespace ::sqlite::error;
  using ::sqlite::error::Code;
  check(Code::OK, "okay");
  try {
    check(Code::ERROR, "this is bad, very bad");
    CPPUNIT_ASSERT(false);
  } catch (::sqlite::exception::Generic const &e) {
    CPPUNIT_ASSERT(true);
  }
}

auto tests::unit::error::Code::test_row() -> void {
  using namespace sqlite::error;
  CPPUNIT_ASSERT(!row(OK));
  CPPUNIT_ASSERT(!row(ERROR));
  CPPUNIT_ASSERT(!row(INTERNAL));
  CPPUNIT_ASSERT(!row(PERM));
  CPPUNIT_ASSERT(!row(ABORT));
  CPPUNIT_ASSERT(!row(BUSY));
  CPPUNIT_ASSERT(!row(LOCKED));
  CPPUNIT_ASSERT(!row(NOMEM));
  CPPUNIT_ASSERT(!row(READONLY));
  CPPUNIT_ASSERT(!row(INTERRUPT));
  CPPUNIT_ASSERT(!row(IOERR));
  CPPUNIT_ASSERT(!row(CORRUPT));
  CPPUNIT_ASSERT(!row(NOTFOUND));
  CPPUNIT_ASSERT(!row(FULL));
  CPPUNIT_ASSERT(!row(CANTOPEN));
  CPPUNIT_ASSERT(!row(PROTOCOL));
  CPPUNIT_ASSERT(!row(EMPTY));
  CPPUNIT_ASSERT(!row(SCHEMA));
  CPPUNIT_ASSERT(!row(TOOBIG));
  CPPUNIT_ASSERT(!row(CONSTRAINT));
  CPPUNIT_ASSERT(!row(MISMATCH));
  CPPUNIT_ASSERT(!row(MISUSE));
  CPPUNIT_ASSERT(!row(NOLFS));
  CPPUNIT_ASSERT(!row(AUTH));
  CPPUNIT_ASSERT(!row(FORMAT));
  CPPUNIT_ASSERT(!row(RANGE));
  CPPUNIT_ASSERT(!row(NOTADB));
  CPPUNIT_ASSERT(!row(NOTICE));
  CPPUNIT_ASSERT(!row(WARNING));
  CPPUNIT_ASSERT(row(ROW)); // <------------------- yes
  CPPUNIT_ASSERT(!row(DONE));

  CPPUNIT_ASSERT(!row(ioerr::READ));
  CPPUNIT_ASSERT(!row(ioerr::SHORT_READ));
  CPPUNIT_ASSERT(!row(ioerr::WRITE));
  CPPUNIT_ASSERT(!row(ioerr::FSYNC));
  CPPUNIT_ASSERT(!row(ioerr::DIR_FSYNC));
  CPPUNIT_ASSERT(!row(ioerr::TRUNCATE));
  CPPUNIT_ASSERT(!row(ioerr::FSTAT));
  CPPUNIT_ASSERT(!row(ioerr::UNLOCK));
  CPPUNIT_ASSERT(!row(ioerr::RDLOCK));
  CPPUNIT_ASSERT(!row(ioerr::DELETE));
  CPPUNIT_ASSERT(!row(ioerr::BLOCKED));
  CPPUNIT_ASSERT(!row(ioerr::NOMEM));
  CPPUNIT_ASSERT(!row(ioerr::ACCESS));
  CPPUNIT_ASSERT(!row(ioerr::CHECKRESERVEDLOCK));
  CPPUNIT_ASSERT(!row(ioerr::LOCK));
  CPPUNIT_ASSERT(!row(ioerr::CLOSE));
  CPPUNIT_ASSERT(!row(ioerr::DIR_CLOSE));
  CPPUNIT_ASSERT(!row(ioerr::SHMOPEN));
  CPPUNIT_ASSERT(!row(ioerr::SHMSIZE));
  CPPUNIT_ASSERT(!row(ioerr::SHMLOCK));
  CPPUNIT_ASSERT(!row(ioerr::SHMMAP));
  CPPUNIT_ASSERT(!row(ioerr::SEEK));
  CPPUNIT_ASSERT(!row(ioerr::DELETE_NOENT));
  CPPUNIT_ASSERT(!row(ioerr::MMAP));
  CPPUNIT_ASSERT(!row(ioerr::GETTEMPPATH));
  CPPUNIT_ASSERT(!row(ioerr::CONVPATH));

  CPPUNIT_ASSERT(!row(locked::SHAREDCACHE));

  CPPUNIT_ASSERT(!row(busy::RECOVERY));
  CPPUNIT_ASSERT(!row(busy::SNAPSHOT));

  CPPUNIT_ASSERT(!row(cantopen::NOTEMPDIR));
  CPPUNIT_ASSERT(!row(cantopen::ISDIR));
  CPPUNIT_ASSERT(!row(cantopen::FULLPATH));
  CPPUNIT_ASSERT(!row(cantopen::CONVPATH));

  CPPUNIT_ASSERT(!row(corrupt::VTAB));

  CPPUNIT_ASSERT(!row(readonly::RECOVERY));
  CPPUNIT_ASSERT(!row(readonly::CANTLOCK));
  CPPUNIT_ASSERT(!row(readonly::ROLLBACK));
  CPPUNIT_ASSERT(!row(readonly::DBMOVED));

  CPPUNIT_ASSERT(!row(abort::ROLLBACK));

  CPPUNIT_ASSERT(!row(constraint::CHECK));
  CPPUNIT_ASSERT(!row(constraint::COMMITHOOK));
  CPPUNIT_ASSERT(!row(constraint::FOREIGNKEY));
  CPPUNIT_ASSERT(!row(constraint::FUNCTION));
  CPPUNIT_ASSERT(!row(constraint::NOTNULL));
  CPPUNIT_ASSERT(!row(constraint::PRIMARYKEY));
  CPPUNIT_ASSERT(!row(constraint::TRIGGER));
  CPPUNIT_ASSERT(!row(constraint::UNIQUE));
  CPPUNIT_ASSERT(!row(constraint::VTAB));
  CPPUNIT_ASSERT(!row(constraint::ROWID));

  CPPUNIT_ASSERT(!row(notice::recover::WAL));
  CPPUNIT_ASSERT(!row(notice::recover::ROLLBACK));

  CPPUNIT_ASSERT(!row(warning::AUTOINDEX));
}

auto tests::unit::error::Code::test_done() -> void {
  using namespace sqlite::error;
  CPPUNIT_ASSERT(!done(OK));
  CPPUNIT_ASSERT(!done(ERROR));
  CPPUNIT_ASSERT(!done(INTERNAL));
  CPPUNIT_ASSERT(!done(PERM));
  CPPUNIT_ASSERT(!done(ABORT));
  CPPUNIT_ASSERT(!done(BUSY));
  CPPUNIT_ASSERT(!done(LOCKED));
  CPPUNIT_ASSERT(!done(NOMEM));
  CPPUNIT_ASSERT(!done(READONLY));
  CPPUNIT_ASSERT(!done(INTERRUPT));
  CPPUNIT_ASSERT(!done(IOERR));
  CPPUNIT_ASSERT(!done(CORRUPT));
  CPPUNIT_ASSERT(!done(NOTFOUND));
  CPPUNIT_ASSERT(!done(FULL));
  CPPUNIT_ASSERT(!done(CANTOPEN));
  CPPUNIT_ASSERT(!done(PROTOCOL));
  CPPUNIT_ASSERT(!done(EMPTY));
  CPPUNIT_ASSERT(!done(SCHEMA));
  CPPUNIT_ASSERT(!done(TOOBIG));
  CPPUNIT_ASSERT(!done(CONSTRAINT));
  CPPUNIT_ASSERT(!done(MISMATCH));
  CPPUNIT_ASSERT(!done(MISUSE));
  CPPUNIT_ASSERT(!done(NOLFS));
  CPPUNIT_ASSERT(!done(AUTH));
  CPPUNIT_ASSERT(!done(FORMAT));
  CPPUNIT_ASSERT(!done(RANGE));
  CPPUNIT_ASSERT(!done(NOTADB));
  CPPUNIT_ASSERT(!done(NOTICE));
  CPPUNIT_ASSERT(!done(WARNING));
  CPPUNIT_ASSERT(!done(ROW));
  CPPUNIT_ASSERT(done(DONE)); // <------------------- yes

  CPPUNIT_ASSERT(!done(ioerr::READ));
  CPPUNIT_ASSERT(!done(ioerr::SHORT_READ));
  CPPUNIT_ASSERT(!done(ioerr::WRITE));
  CPPUNIT_ASSERT(!done(ioerr::FSYNC));
  CPPUNIT_ASSERT(!done(ioerr::DIR_FSYNC));
  CPPUNIT_ASSERT(!done(ioerr::TRUNCATE));
  CPPUNIT_ASSERT(!done(ioerr::FSTAT));
  CPPUNIT_ASSERT(!done(ioerr::UNLOCK));
  CPPUNIT_ASSERT(!done(ioerr::RDLOCK));
  CPPUNIT_ASSERT(!done(ioerr::DELETE));
  CPPUNIT_ASSERT(!done(ioerr::BLOCKED));
  CPPUNIT_ASSERT(!done(ioerr::NOMEM));
  CPPUNIT_ASSERT(!done(ioerr::ACCESS));
  CPPUNIT_ASSERT(!done(ioerr::CHECKRESERVEDLOCK));
  CPPUNIT_ASSERT(!done(ioerr::LOCK));
  CPPUNIT_ASSERT(!done(ioerr::CLOSE));
  CPPUNIT_ASSERT(!done(ioerr::DIR_CLOSE));
  CPPUNIT_ASSERT(!done(ioerr::SHMOPEN));
  CPPUNIT_ASSERT(!done(ioerr::SHMSIZE));
  CPPUNIT_ASSERT(!done(ioerr::SHMLOCK));
  CPPUNIT_ASSERT(!done(ioerr::SHMMAP));
  CPPUNIT_ASSERT(!done(ioerr::SEEK));
  CPPUNIT_ASSERT(!done(ioerr::DELETE_NOENT));
  CPPUNIT_ASSERT(!done(ioerr::MMAP));
  CPPUNIT_ASSERT(!done(ioerr::GETTEMPPATH));
  CPPUNIT_ASSERT(!done(ioerr::CONVPATH));

  CPPUNIT_ASSERT(!done(locked::SHAREDCACHE));

  CPPUNIT_ASSERT(!done(busy::RECOVERY));
  CPPUNIT_ASSERT(!done(busy::SNAPSHOT));

  CPPUNIT_ASSERT(!done(cantopen::NOTEMPDIR));
  CPPUNIT_ASSERT(!done(cantopen::ISDIR));
  CPPUNIT_ASSERT(!done(cantopen::FULLPATH));
  CPPUNIT_ASSERT(!done(cantopen::CONVPATH));

  CPPUNIT_ASSERT(!done(corrupt::VTAB));

  CPPUNIT_ASSERT(!done(readonly::RECOVERY));
  CPPUNIT_ASSERT(!done(readonly::CANTLOCK));
  CPPUNIT_ASSERT(!done(readonly::ROLLBACK));
  CPPUNIT_ASSERT(!done(readonly::DBMOVED));

  CPPUNIT_ASSERT(!done(abort::ROLLBACK));

  CPPUNIT_ASSERT(!done(constraint::CHECK));
  CPPUNIT_ASSERT(!done(constraint::COMMITHOOK));
  CPPUNIT_ASSERT(!done(constraint::FOREIGNKEY));
  CPPUNIT_ASSERT(!done(constraint::FUNCTION));
  CPPUNIT_ASSERT(!done(constraint::NOTNULL));
  CPPUNIT_ASSERT(!done(constraint::PRIMARYKEY));
  CPPUNIT_ASSERT(!done(constraint::TRIGGER));
  CPPUNIT_ASSERT(!done(constraint::UNIQUE));
  CPPUNIT_ASSERT(!done(constraint::VTAB));
  CPPUNIT_ASSERT(!done(constraint::ROWID));

  CPPUNIT_ASSERT(!done(notice::recover::WAL));
  CPPUNIT_ASSERT(!done(notice::recover::ROLLBACK));

  CPPUNIT_ASSERT(!done(warning::AUTOINDEX));
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::error::Code::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("Code");
  s << call("code_is_condition", &Code::test_code_is_condition)
    << call("std_error_code", &Code::test_std_error_code)
    << call("ok", &Code::test_ok)
    << call("failure", &Code::test_failure)
    << call("failure-Code_or_Condition", &Code::test_failure_Code_or_Condition)
    << call("okdone", &Code::test_okdone)
    << call("ok_if_done", &Code::test_ok_if_done)
    << call("check_1arg", &Code::test_check_1arg)
    << call("check_2arg", &Code::test_check_2arg)
    << call("row", &Code::test_row)
    << call("done", &Code::test_done)
    ;
  return s.release();
}
#endiv

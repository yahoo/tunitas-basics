// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::error {
  class Condition;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sqlite.error.Condition
#import std.string
#import std.vector
class tests::unit::error::Condition : public cppunit::test::Fixture {
public:
  auto test_std_error_condition() -> void;
  auto test_ok() -> void;
  auto test_failure() -> void;
  auto test_okdone() -> void;
  auto test_ok_if_done() -> void;
  auto test_check_1arg() -> void;
  auto test_check_2arg() -> void;
  auto test_row() -> void;
  auto test_done() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import sqlite.error.category
#import sqlite.error.Category
#import sqlite.error.Code
#import sqlite.error.Condition
#import std.error_code

auto tests::unit::error::Condition::test_std_error_condition() -> void {
  using ::sqlite::error::Condition;
  std::error_condition ok(Condition::OK);
  CPPUNIT_ASSERT(SQLITE_OK == ok.value());
}

auto tests::unit::error::Condition::test_ok() -> void {
  using namespace sqlite::error;
  CPPUNIT_ASSERT(ok(OK)); // <------------------------ the only one that is ok
  CPPUNIT_ASSERT(!ok(ERROR));
  CPPUNIT_ASSERT(!ok(INTERNAL));
  CPPUNIT_ASSERT(!ok(PERM));
  CPPUNIT_ASSERT(!ok(ABORT));
  CPPUNIT_ASSERT(!ok(BUSY));
  CPPUNIT_ASSERT(!ok(LOCKED));
  CPPUNIT_ASSERT(!ok(NOMEM));
  CPPUNIT_ASSERT(!ok(READONLY));
  CPPUNIT_ASSERT(!ok(INTERRUPT));
  CPPUNIT_ASSERT(!ok(IOERR));
  CPPUNIT_ASSERT(!ok(CORRUPT));
  CPPUNIT_ASSERT(!ok(NOTFOUND));
  CPPUNIT_ASSERT(!ok(FULL));
  CPPUNIT_ASSERT(!ok(CANTOPEN));
  CPPUNIT_ASSERT(!ok(PROTOCOL));
  CPPUNIT_ASSERT(!ok(EMPTY));
  CPPUNIT_ASSERT(!ok(SCHEMA));
  CPPUNIT_ASSERT(!ok(TOOBIG));
  CPPUNIT_ASSERT(!ok(CONSTRAINT));
  CPPUNIT_ASSERT(!ok(MISMATCH));
  CPPUNIT_ASSERT(!ok(MISUSE));
  CPPUNIT_ASSERT(!ok(NOLFS));
  CPPUNIT_ASSERT(!ok(AUTH));
  CPPUNIT_ASSERT(!ok(FORMAT));
  CPPUNIT_ASSERT(!ok(RANGE));
  CPPUNIT_ASSERT(!ok(NOTADB));
  CPPUNIT_ASSERT(!ok(NOTICE));
  CPPUNIT_ASSERT(!ok(WARNING));
  CPPUNIT_ASSERT(!ok(ROW));
  CPPUNIT_ASSERT(!ok(DONE));
}

auto tests::unit::error::Condition::test_failure() -> void {
  using namespace sqlite::error;
  CPPUNIT_ASSERT(!failure(OK)); // <------------------------ indeed, not a failure
  CPPUNIT_ASSERT(failure(ERROR));
  CPPUNIT_ASSERT(failure(INTERNAL));
  CPPUNIT_ASSERT(failure(PERM));
  CPPUNIT_ASSERT(failure(ABORT));
  CPPUNIT_ASSERT(failure(BUSY));
  CPPUNIT_ASSERT(failure(LOCKED));
  CPPUNIT_ASSERT(failure(NOMEM));
  CPPUNIT_ASSERT(failure(READONLY));
  CPPUNIT_ASSERT(failure(INTERRUPT));
  CPPUNIT_ASSERT(failure(IOERR));
  CPPUNIT_ASSERT(failure(CORRUPT));
  CPPUNIT_ASSERT(failure(NOTFOUND));
  CPPUNIT_ASSERT(failure(FULL));
  CPPUNIT_ASSERT(failure(CANTOPEN));
  CPPUNIT_ASSERT(failure(PROTOCOL));
  CPPUNIT_ASSERT(failure(EMPTY));
  CPPUNIT_ASSERT(failure(SCHEMA));
  CPPUNIT_ASSERT(failure(TOOBIG));
  CPPUNIT_ASSERT(failure(CONSTRAINT));
  CPPUNIT_ASSERT(failure(MISMATCH));
  CPPUNIT_ASSERT(failure(MISUSE));
  CPPUNIT_ASSERT(failure(NOLFS));
  CPPUNIT_ASSERT(failure(AUTH));
  CPPUNIT_ASSERT(failure(FORMAT));
  CPPUNIT_ASSERT(failure(RANGE));
  CPPUNIT_ASSERT(failure(NOTADB));
  CPPUNIT_ASSERT(failure(NOTICE));
  CPPUNIT_ASSERT(failure(WARNING));
  CPPUNIT_ASSERT(!failure(ROW)); // <------------------- not a failure
  CPPUNIT_ASSERT(!failure(DONE)); //  <----------------- not a failure
}

auto tests::unit::error::Condition::test_okdone() -> void {
  using namespace sqlite::error;
  CPPUNIT_ASSERT(okdone(OK)); // <------------------------ obviously
  CPPUNIT_ASSERT(!okdone(ERROR));
  CPPUNIT_ASSERT(!okdone(INTERNAL));
  CPPUNIT_ASSERT(!okdone(PERM));
  CPPUNIT_ASSERT(!okdone(ABORT));
  CPPUNIT_ASSERT(!okdone(BUSY));
  CPPUNIT_ASSERT(!okdone(LOCKED));
  CPPUNIT_ASSERT(!okdone(NOMEM));
  CPPUNIT_ASSERT(!okdone(READONLY));
  CPPUNIT_ASSERT(!okdone(INTERRUPT));
  CPPUNIT_ASSERT(!okdone(IOERR));
  CPPUNIT_ASSERT(!okdone(CORRUPT));
  CPPUNIT_ASSERT(!okdone(NOTFOUND));
  CPPUNIT_ASSERT(!okdone(FULL));
  CPPUNIT_ASSERT(!okdone(CANTOPEN));
  CPPUNIT_ASSERT(!okdone(PROTOCOL));
  CPPUNIT_ASSERT(!okdone(EMPTY));
  CPPUNIT_ASSERT(!okdone(SCHEMA));
  CPPUNIT_ASSERT(!okdone(TOOBIG));
  CPPUNIT_ASSERT(!okdone(CONSTRAINT));
  CPPUNIT_ASSERT(!okdone(MISMATCH));
  CPPUNIT_ASSERT(!okdone(MISUSE));
  CPPUNIT_ASSERT(!okdone(NOLFS));
  CPPUNIT_ASSERT(!okdone(AUTH));
  CPPUNIT_ASSERT(!okdone(FORMAT));
  CPPUNIT_ASSERT(!okdone(RANGE));
  CPPUNIT_ASSERT(!okdone(NOTADB));
  CPPUNIT_ASSERT(!okdone(NOTICE));
  CPPUNIT_ASSERT(!okdone(WARNING));
  CPPUNIT_ASSERT(!okdone(ROW)); // <------------------- not okdone (this is a row)
  CPPUNIT_ASSERT(okdone(DONE)); //  <------------------ yes
}

auto tests::unit::error::Condition::test_ok_if_done() -> void {
  using namespace ::sqlite::error;
  using ::sqlite::error::Condition;
  CPPUNIT_ASSERT(Condition::OK == ok_if_done(Condition::OK));
  CPPUNIT_ASSERT(Condition::OK == ok_if_done(Condition::DONE));
  CPPUNIT_ASSERT(Condition::ERROR == ok_if_done(Condition::ERROR));
}

#import sqlite.exception.Generic
auto tests::unit::error::Condition::test_check_1arg() -> void {
  using namespace ::sqlite::error;
  using ::sqlite::error::Condition;
  check(Condition::OK);
  try {
    check(Condition::ERROR);
    CPPUNIT_ASSERT(false);
  } catch (::sqlite::exception::Generic const &e) {
    CPPUNIT_ASSERT(true);
  }
}

auto tests::unit::error::Condition::test_check_2arg() -> void {
  using namespace ::sqlite::error;
  using ::sqlite::error::Condition;
  check(Condition::OK, "okay");
  try {
    check(Condition::ERROR, "this is bad, very bad");
    CPPUNIT_ASSERT(false);
  } catch (::sqlite::exception::Generic const &e) {
    CPPUNIT_ASSERT(true);
  }
}

auto tests::unit::error::Condition::test_row() -> void {
  using namespace sqlite::error;
  CPPUNIT_ASSERT(!row(OK));
  CPPUNIT_ASSERT(!row(ERROR));
  CPPUNIT_ASSERT(!row(INTERNAL));
  CPPUNIT_ASSERT(!row(PERM));
  CPPUNIT_ASSERT(!row(ABORT));
  CPPUNIT_ASSERT(!row(BUSY));
  CPPUNIT_ASSERT(!row(LOCKED));
  CPPUNIT_ASSERT(!row(NOMEM));
  CPPUNIT_ASSERT(!row(READONLY));
  CPPUNIT_ASSERT(!row(INTERRUPT));
  CPPUNIT_ASSERT(!row(IOERR));
  CPPUNIT_ASSERT(!row(CORRUPT));
  CPPUNIT_ASSERT(!row(NOTFOUND));
  CPPUNIT_ASSERT(!row(FULL));
  CPPUNIT_ASSERT(!row(CANTOPEN));
  CPPUNIT_ASSERT(!row(PROTOCOL));
  CPPUNIT_ASSERT(!row(EMPTY));
  CPPUNIT_ASSERT(!row(SCHEMA));
  CPPUNIT_ASSERT(!row(TOOBIG));
  CPPUNIT_ASSERT(!row(CONSTRAINT));
  CPPUNIT_ASSERT(!row(MISMATCH));
  CPPUNIT_ASSERT(!row(MISUSE));
  CPPUNIT_ASSERT(!row(NOLFS));
  CPPUNIT_ASSERT(!row(AUTH));
  CPPUNIT_ASSERT(!row(FORMAT));
  CPPUNIT_ASSERT(!row(RANGE));
  CPPUNIT_ASSERT(!row(NOTADB));
  CPPUNIT_ASSERT(!row(NOTICE));
  CPPUNIT_ASSERT(!row(WARNING));
  CPPUNIT_ASSERT(row(ROW)); // <------------------- yes
  CPPUNIT_ASSERT(!row(DONE));
}

auto tests::unit::error::Condition::test_done() -> void {
  using namespace sqlite::error;
  CPPUNIT_ASSERT(!done(OK));
  CPPUNIT_ASSERT(!done(ERROR));
  CPPUNIT_ASSERT(!done(INTERNAL));
  CPPUNIT_ASSERT(!done(PERM));
  CPPUNIT_ASSERT(!done(ABORT));
  CPPUNIT_ASSERT(!done(BUSY));
  CPPUNIT_ASSERT(!done(LOCKED));
  CPPUNIT_ASSERT(!done(NOMEM));
  CPPUNIT_ASSERT(!done(READONLY));
  CPPUNIT_ASSERT(!done(INTERRUPT));
  CPPUNIT_ASSERT(!done(IOERR));
  CPPUNIT_ASSERT(!done(CORRUPT));
  CPPUNIT_ASSERT(!done(NOTFOUND));
  CPPUNIT_ASSERT(!done(FULL));
  CPPUNIT_ASSERT(!done(CANTOPEN));
  CPPUNIT_ASSERT(!done(PROTOCOL));
  CPPUNIT_ASSERT(!done(EMPTY));
  CPPUNIT_ASSERT(!done(SCHEMA));
  CPPUNIT_ASSERT(!done(TOOBIG));
  CPPUNIT_ASSERT(!done(CONSTRAINT));
  CPPUNIT_ASSERT(!done(MISMATCH));
  CPPUNIT_ASSERT(!done(MISUSE));
  CPPUNIT_ASSERT(!done(NOLFS));
  CPPUNIT_ASSERT(!done(AUTH));
  CPPUNIT_ASSERT(!done(FORMAT));
  CPPUNIT_ASSERT(!done(RANGE));
  CPPUNIT_ASSERT(!done(NOTADB));
  CPPUNIT_ASSERT(!done(NOTICE));
  CPPUNIT_ASSERT(!done(WARNING));
  CPPUNIT_ASSERT(!done(ROW));
  CPPUNIT_ASSERT(done(DONE)); // <------------------- yes
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::error::Condition::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("Condition");
  s << call("std_error_condition", &Condition::test_std_error_condition)
    << call("ok", &Condition::test_ok)
    << call("failure", &Condition::test_failure)
    << call("okdone", &Condition::test_okdone)
    << call("ok_if_done", &Condition::test_ok_if_done)
    << call("check_1arg", &Condition::test_check_1arg)
    << call("check_2arg", &Condition::test_check_2arg)
    << call("row", &Condition::test_row)
    << call("done", &Condition::test_done)
    ;
  return s.release();
}
#endiv

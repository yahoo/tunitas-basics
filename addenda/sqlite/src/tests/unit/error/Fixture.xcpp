// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace error {
      class Fixture;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sqlite.status.Code
#import std.string
#import std.vector
class tests::unit::error::Fixture : public cppunit::test::Fixture {
public:
  auto setUp() -> void;
  auto tearDown() -> void;

  static std::string const NO_SUCH_LOCATION;
  std::vector<sqlite::status::Code> some_codes;

  auto test_message_string() -> void;
  auto test_message_wstring() -> void;
  auto test_string() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
std::string const tests::unit::error::Fixture::NO_SUCH_LOCATION = "/dev/null/this/does/not/exist";

#import unit.rigging.lhs
#import unit.rigging.clear
using namespace unit::rigging;

auto tests::unit::error::Fixture::setUp() -> void {
  using v = std::vector<sqlite::status::Code>;
  using c = sqlite::status::Code;
  lhs(some_codes) = v{c::OK,
                      c::ERROR,
                      c::INTERNAL,
                      c::PERM,
                      c::ABORT,
                      c::BUSY,
                      c::LOCKED,
                      c::NOMEM,
                      c::READONLY,
                      c::INTERRUPT,
                      c::IOERR,
                      c::CORRUPT,
                      c::NOTFOUND,
                      c::FULL,
                      c::CANTOPEN,
                      c::PROTOCOL,
                      c::EMPTY,
                      c::SCHEMA,
                      c::TOOBIG,
                      c::CONSTRAINT,
                      c::MISMATCH,
                      c::MISUSE,
                      c::NOLFS,
                      c::AUTH,
                      c::FORMAT,
                      c::RANGE,
                      c::NOTADB,
                      c::NOTICE,
                      c::WARNING,
                      c::ROW,
                      c::DONE};
}

auto tests::unit::error::Fixture::tearDown() -> void {
  lhs(some_codes) = clear;
}

#import sqlite.Application
#import sqlite.Connection
#import sqlite.error.message
#import sqlite.open.Flags
auto tests::unit::error::Fixture::test_message_string() -> void {
  sqlite::Application app;
  sqlite::Connection conn(app);
  // n.b. you can open /dev/null in readonly OR readwrite mode, without inducing an error (!)
  using sqlite::open::Flag;
  auto flags = Flag::CREATE | Flag::READWRITE;
  auto opened = conn.open(NO_SUCH_LOCATION, flags);
  CPPUNIT_ASSERT( !ok(opened) );
  std::string message = sqlite::error::message<std::string>(conn); // <---------- test this
  // We don't particularly care what it is so long as the call to get it "worked"
  CPPUNIT_ASSERT( !message.empty() );
}

auto tests::unit::error::Fixture::test_message_wstring() -> void {
  sqlite::Application app;
  sqlite::Connection conn(app);
  auto opened = conn.open(NO_SUCH_LOCATION);
  CPPUNIT_ASSERT( !ok(opened) );
  std::wstring message = sqlite::error::message<std::wstring>(conn); // <-------- test this
  // We don't particularly care what it is so long as the call to get it "worked"
  CPPUNIT_ASSERT( !message.empty() );
}

#import sqlite.error.string
auto tests::unit::error::Fixture::test_string() -> void {
  unsigned count = 0;
  for (auto c : some_codes) {
    std::string s = sqlite::error::string(c);
    CPPUNIT_ASSERT(!s.empty());
    CPPUNIT_ASSERT("no message" != s);
    count++;
  }
  CPPUNIT_ASSERT(0 < count);
}

#import tests.unit.error.Category
#import tests.unit.error.Code
#import tests.unit.error.Condition
#import tests.unit.error.Source
#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::error::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("error");
  s << call("message_string", &Fixture::test_message_string)
    << call("message_wstring", &Fixture::test_message_wstring)
    << call("string", &Fixture::test_string)
    << add<Category>()
    << add<Code>()
    << add<Condition>()
    << add<Source>()
    ;
  return s.release();
}
#endiv

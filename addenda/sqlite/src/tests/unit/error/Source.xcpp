// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace error {
      class Source;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import sqlite.status.Code
#import std.vector
class tests::unit::error::Source : public cppunit::test::Fixture {
public:
  auto test_source_scenario_01() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import sqlite.source
#import sqlite.Application
#import sqlite.Connection
#import sqlite.open.Flags
#import sqlite.open.Name
#import sqlite.error.string
#import sqlite.api.connection
#import std.move

auto tests::unit::error::Source::test_source_scenario_01() -> void {
  std::ostream &out(std::cerr);
  sqlite::Application app;
  sqlite::Connection conn(app);
  using namespace sqlite::open;
  auto place = Name::MEMORY;
  auto flags = Flag::CREATE | Flag::READWRITE;
  auto opened = conn.open(place, flags);
  CPPUNIT_ASSERT(ok(opened));

  // Ahem, why would you ever want this off?
  // Well, right now we force it off so that Code::ERROR will be returned
  // Then we can go explicitly (manually) recover the extended error code
  conn.extended_result_codes(false);

  char const *c0 = (R"sql(create table t99(t text, uuid text);)sql");
  char const *c1 = (R"sql(insert into t99(t, uuid) values ("apple", "6651733e-a12b-42ff-8732-2894b34974a0");)sql"
                    R"sql(insert into t99(t, uuid) values ("banana", "8cb73439-3e5b-4620-83d3-b38bda955513");)sql"
                    R"sql(insert into t99(t, uuid) values ("cherry", "fe4888de-c7c6-4016-8103-6e3bd256d529");)sql"
                    R"sql(insert into t99(t, uuid) values ("dog", "3c20e1aa-1f74-4b6f-add8-221e2c6a33db");)sql"
                    R"sql(insert into t99(t, uuid) values ("eagle", "515ec95a-b2ce-4a53-83e5-b09d811f1a90");)sql"
                    R"sql(insert into t99(t, uuid) values ("frog", "4dad7450-45ee-4e8a-9892-bff147f82949");)sql"
                    R"sql(insert into t99(t, uuid) values ("goat", "789f926e-296b-45ea-b411-1166bfee7857");)sql"
                    // error -------------\ (here)
                    //                    |
                    //                    v with one field, but two values
                    R"sql(insert into t99(t) values ("harpie", "f4dea5b8-ad5e-4231-851c-693a80f8f26f");)sql"
                    R"sql(select * from t99;)sql");
  unsigned count = 0;
  auto treat = [&count, &out](sqlite::prepared::Result<sqlite::statement::Shell> &bundle) -> sqlite::status::Code {
    count++;
    out << "treating in source_visiting_the_result count=" << count << "\n";
    CPPUNIT_ASSERT(ok(bundle));
    sqlite::statement::Shell shell = std::move(value(bundle));
    while (row(shell.step())) {
      char const *separator = "row: ";
      for (sqlite::column_index i(0), e(shell.column_count()); e != i; ++i) {
        sqlite::Column value(shell, i);
        out << separator << value;
        separator = ", ";
      }
      out << '\n';
    }
    out << "returning OK\n";
    return sqlite::status::Code::OK;
  };
  auto sourced0 = sqlite::source(conn, c0, treat);
  CPPUNIT_ASSERT(ok(sourced0));
  auto sourced1 = sqlite::source(conn, c1, treat);
  // We expect ERROR
  CPPUNIT_ASSERT(!ok(sourced1));
  if (!ok(sourced1)) {
    out << "There was an error in the SQL, as was expected"
        << "\nbasic errcode=" << (int)(conn.errcode())
        << "\nextended errcode=" << (int)(conn.extended_errcode())
        << "\nmessage=\"" << conn.errmsg() << '"'
        << "\nbasic error string=\"" << sqlite::error::string(conn.errcode()) << '"'
        << "\nextended error string=\"" << sqlite::error::string(conn.extended_errcode()) << '"'
        << '\n';
  }
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::error::Source::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("source");
  s << call("scenario-01", &Source::test_source_scenario_01)
    ;
  return s.release();
}
#endiv

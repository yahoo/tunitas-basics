// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace statement {
      class Fixture;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import std.ostream
#import std.string
#import sqlite.connection.Shell
class tests::unit::statement::Fixture : public cppunit::test::Fixture {
public:
  Fixture();

  bool debug_mode;
  std::ostream &debug_out;

  std::string create_table_of_values;
  std::string select_some_values;

  auto setUp() -> void;
  auto tearDown() -> void;

  auto test_once_initialization_and_shutdown() -> void;
  auto test_repeated_initialization_and_shutdown() -> void;
  auto test_sql() -> void;
  auto test_readonly() -> void;
  auto test_busy() -> void;
  auto test_finalize() -> void;
  auto test_reset() -> void;
  auto test_step() -> void;
  auto test_bind() -> void;
  auto test_column_count() -> void;
  auto test_column() -> void;
  auto test_type() -> void;

  static auto suite() -> cppunit::Test *;
protected:
  auto setup_table_of_values(sqlite::connection::Shell &conn) -> void;  
};
#endiv
#divert <cpp>
#import std.cerr
#import std.cout
#import std.clog
#import sqlite.api.statement
#import sqlite.Application
#import sqlite.Connection
#import sqlite.Statement
#import sqlite.open.Name
#import sqlite.status.Code

#import unit.rigging.lhs
using unit::rigging::lhs;
#import unit.rigging.clear
using unit::rigging::clear;

tests::unit::statement::Fixture::Fixture()
  : debug_mode(false)
  , debug_out(std::clog) {
  ;
}

auto tests::unit::statement::Fixture::setUp() -> void {
  // WATCHOUT - if you are going to use Name::MEMORY for the location
  // then you ALSO have to specify that the tables are "temporary tables"
  // Else parsing will fail. (i.e. prepare(...) will return Code::ERROR with no further explanation)
  create_table_of_values = ("create temporary table t99(i integer);"
                            "\ninsert into t99(i)"
                            "\nvalues"
                            "\n(1),"
                            "\n(8),"
                            "\n(2),"
                            "\n(1);");
  select_some_values = ("select * from t99;");
}

auto tests::unit::statement::Fixture::tearDown() -> void {
  lhs(create_table_of_values) = clear;
  lhs(select_some_values) = clear;
}

auto tests::unit::statement::Fixture::setup_table_of_values(sqlite::connection::Shell &conn) -> void {
  auto flags = sqlite::open::Flag::READWRITE|sqlite::open::Flag::CREATE;
  auto place = sqlite::open::Name::MEMORY;
  CPPUNIT_ASSERT(ok(conn.open(place, flags)));
  CPPUNIT_ASSERT(ok(conn.extended_result_codes(true)));
  char const *position = this->create_table_of_values.data();
  do {
    auto prepared = conn.prepare<sqlite::Statement>(position);
    CPPUNIT_ASSERT(ok(prepared));
    sqlite::Statement stmt = std::move(value(prepared));
    while (row(stmt.step())) {
      CPPUNIT_ASSERT(true);
    }
    position = remaining(prepared);
  } while ('\0' != *position);
}

auto tests::unit::statement::Fixture::test_once_initialization_and_shutdown() -> void {
  bool tested_something = false;
  {
    sqlite::Application app;
    sqlite::Connection conn(app);
    auto flags = sqlite::open::Flag::READWRITE|sqlite::open::Flag::CREATE;
    auto place = sqlite::open::Name::MEMORY; 
    CPPUNIT_ASSERT(ok(conn.open(place, flags)));
    CPPUNIT_ASSERT(ok(conn.extended_result_codes(true)));
    {
      std::string const syntax = "select strftime('%s', 'now');";
      auto prepared = conn.prepare<sqlite::Statement>(syntax);
      CPPUNIT_ASSERT(ok(prepared));
      sqlite::Statement stmt = std::move(value(prepared));
      std::string resyntax = stmt.sql(); // <--- test this
      std::clog << "once finds {" << resyntax << "}\n";
      CPPUNIT_ASSERT(syntax == resyntax);
      CPPUNIT_ASSERT(row(stmt.step()));
      std::cout << "once finds time is "  << stmt.column<sqlite::int64>(0) << '\n';
    } {
      char const *position = create_table_of_values.data();
      do {
        auto prepared = conn.prepare<sqlite::Statement>(position);
        CPPUNIT_ASSERT(ok(prepared));
        sqlite::Statement stmt = std::move(value(prepared));
        while (row(stmt.step())) {
          tested_something = true;
          CPPUNIT_ASSERT(0 < stmt.column_count());
          auto column_count = stmt.column_count();
          char const *separator = " (";
          if (debug_mode) {
            debug_out << "row columns=" << column_count;
          }
          for (sqlite::column_index ci(0), ce(column_count); ce != ci; ++ci) {
            CPPUNIT_ASSERT(sqlite::Type::INTEGER == stmt.type(ci));
            auto value = stmt.column<sqlite::int64>(ci);
            if (debug_mode) {
              debug_out << separator << value;
            }
            separator = ", ";
          }
          if (debug_mode) {
            debug_out << ")\n";
          }
        }
        position = remaining(prepared);
      } while ('\0' != *position);
    } {
      char const *position = select_some_values.data();
      do {
        auto prepared = conn.prepare<sqlite::Statement>(position);
        CPPUNIT_ASSERT(ok(prepared));
        sqlite::Statement stmt = std::move(value(prepared));
        while (row(stmt.step())) {
          tested_something = true;
          CPPUNIT_ASSERT(0 < stmt.column_count());
          auto column_count = stmt.column_count();
          char const *separator = " (";
          if (debug_mode) {
            debug_out << "row columns=" << column_count;
          }
          for (sqlite::column_index ci(0), ce(column_count); ce != ci; ++ci) {
            CPPUNIT_ASSERT(sqlite::Type::INTEGER == stmt.type(ci));
            auto value = stmt.column<sqlite::int64>(ci);
            if (debug_mode) {
              debug_out << separator << value;
            }
            separator = ", ";
          }
          if (debug_mode) {
            debug_out << ")\n";
          }
        }
        position = remaining(prepared);
      } while ('\0' != *position);
    }
  }
  CPPUNIT_ASSERT(tested_something);
}

auto tests::unit::statement::Fixture::test_repeated_initialization_and_shutdown() -> void {
  bool tested_something = false;
  unsigned const INITIALIZATION_AND_SHUTDOWN_REPETITION_COUNT = 100;
  for (unsigned i(0), e(INITIALIZATION_AND_SHUTDOWN_REPETITION_COUNT); e != i; ++i) {
    sqlite::Application app;
    sqlite::Connection conn(app);
    setup_table_of_values(conn);
    {
      char const *position = select_some_values.data();
      do {
        auto prepared = conn.prepare<sqlite::Statement>(position);
        CPPUNIT_ASSERT(ok(prepared));
        sqlite::Statement stmt = std::move(value(prepared));
        while (row(stmt.step())) {
          tested_something = true;
          CPPUNIT_ASSERT(0 < stmt.column_count());
          sqlite::column_index column_count = stmt.column_count();
          if (debug_mode) {
            debug_out << "row columns=" << column_count;
          }
          char const *separator = " (";
          for (sqlite::column_index ci(0), ce(column_count); ce != ci; ++ci) {
            CPPUNIT_ASSERT(sqlite::Type::INTEGER == stmt.type(ci));
            auto value = stmt.column<sqlite::int64>(ci);
            if (debug_mode) {
              debug_out << separator << value;
            }
            separator = ", ";
          }
          if (debug_mode) {
            debug_out << ")\n";
          }
        }
        position = remaining(prepared);
      } while ('\0' != *position);
    }
  }
  CPPUNIT_ASSERT(tested_something);
}

auto tests::unit::statement::Fixture::test_sql() -> void {
  sqlite::Application app;
  sqlite::Connection conn(app);
  auto flags = sqlite::open::Flag::READWRITE|sqlite::open::Flag::CREATE;
  CPPUNIT_ASSERT(ok(conn.open(sqlite::open::Name::MEMORY, flags)));
  std::string const syntax = "select strftime('%s', 'now');";
  auto prepared = conn.prepare<sqlite::Statement>(syntax);
  CPPUNIT_ASSERT(ok(prepared));
  sqlite::Statement stmt = std::move(value(prepared));
  std::string resyntax = stmt.sql(); // <--- test this
  std::clog << "test_sql finds {" << resyntax << "}\n";
  CPPUNIT_ASSERT(syntax == resyntax);
  CPPUNIT_ASSERT(row(stmt.step()));
  std::clog << "test_sql finds time is "  << stmt.column<sqlite::int64>(0) << '\n';
}

auto tests::unit::statement::Fixture::test_readonly() -> void {
  sqlite::Application app;
  sqlite::Connection conn(app);
  auto flags = sqlite::open::Flag::READWRITE|sqlite::open::Flag::CREATE;
  CPPUNIT_ASSERT(ok(conn.open(sqlite::open::Name::MEMORY, flags)));
  std::string const syntax = "select strftime('%s', 'now');";
  auto prepared = conn.prepare<sqlite::Statement>(syntax);
  CPPUNIT_ASSERT(ok(prepared));
  sqlite::Statement stmt = std::move(value(prepared));
  CPPUNIT_ASSERT(stmt.readonly()); // <------- test this
}

auto tests::unit::statement::Fixture::test_busy() -> void {
  bool tested_something = false;
  sqlite::Application app;
  sqlite::Connection conn(app);
  setup_table_of_values(conn);
  {
    char const *position = select_some_values.data();
    do {
      auto prepared = conn.prepare<sqlite::Statement>(position);
      CPPUNIT_ASSERT(ok(prepared));
      sqlite::Statement stmt = std::move(value(prepared));
      while (row(stmt.step())) {
        tested_something = true;
        CPPUNIT_ASSERT(stmt.busy()); // <----------- test this
      }
      position = remaining(prepared);
    } while ('\0' != *position);
  }
  CPPUNIT_ASSERT(tested_something);
}

auto tests::unit::statement::Fixture::test_finalize() -> void {
  bool tested_something = false;
  sqlite::Application app;
  sqlite::Connection conn(app);
  setup_table_of_values(conn);
  {
    char const *position = select_some_values.data();
    do {
      auto prepared = conn.prepare<sqlite::Statement>(position);
      CPPUNIT_ASSERT(ok(prepared));
      sqlite::Statement stmt = std::move(value(prepared));
      while (row(stmt.step())) {
        tested_something = true;
      }
      // explicit finalize instead of ~Statement()
      CPPUNIT_ASSERT(ok(stmt.finalize())); // <----------- test this
      position = remaining(prepared);
    } while ('\0' != *position);
  }
  CPPUNIT_ASSERT(tested_something);
}

auto tests::unit::statement::Fixture::test_reset() -> void {
  bool tested_something = false;
  sqlite::Application app;
  sqlite::Connection conn(app);
  setup_table_of_values(conn);
  {
    char const *position = select_some_values.data();
    do {
      auto prepared = conn.prepare<sqlite::Statement>(position);
      CPPUNIT_ASSERT(ok(prepared));
      sqlite::Statement stmt = std::move(value(prepared));
      unsigned const desired_repetition_count = 10;
      for (unsigned ri(0), re(desired_repetition_count); re != ri; ++ri) {
        CPPUNIT_ASSERT(ok(stmt.reset())); // <----------- test this stmt.reset()
        unsigned row_i = 0;
        while (row(stmt.step())) {  // <----------- test this stmt.step()
          row_i++;
          tested_something = true;
          if (debug_mode) {
            debug_out << "repetition " << ri << " row=" << row_i << " value="  << stmt.column<sqlite::int64>(0) << '\n';
          }
        }
      }
      position = remaining(prepared);
    } while ('\0' != *position);
  }
  CPPUNIT_ASSERT(tested_something);
}

auto tests::unit::statement::Fixture::test_step() -> void {
  bool tested_something = false;
  sqlite::Application app;
  sqlite::Connection conn(app);
  setup_table_of_values(conn);
  {
    char const *position = select_some_values.data();
    do {
      auto prepared = conn.prepare<sqlite::Statement>(position);
      CPPUNIT_ASSERT(ok(prepared));
      sqlite::Statement stmt = std::move(value(prepared));
      while (row(stmt.step())) {  // <----------- test this stmt.step()
        tested_something = true;
        if (debug_mode) {
          debug_out << "step 0th value "  << stmt.column<sqlite::int64>(0) << '\n';
        }
      }
      position = remaining(prepared);
    } while ('\0' != *position);
  }
  CPPUNIT_ASSERT(tested_something);
}

auto tests::unit::statement::Fixture::test_bind() -> void {
  bool tested_something = false;
  sqlite::Application app;
  sqlite::Connection conn(app);
  setup_table_of_values(conn);
  std::size_t const SOME_REPETITIONS = 30;
  {
    auto prepared = conn.prepare<sqlite::Statement>("insert into t99(i) values(?);");
    CPPUNIT_ASSERT(ok(prepared));
    sqlite::Statement stmt = std::move(value(prepared));
    sqlite::int64 const SOME_CONSTANT = 20612152383886l; // yup, a random number
    for (sqlite::column_index i(0), e(SOME_REPETITIONS); e != i; ++i) {
      CPPUNIT_ASSERT(ok(stmt.reset()));
      CPPUNIT_ASSERT(ok(stmt.clear_bindings()));
      // reminder: bind indices start at 1, not zero
      CPPUNIT_ASSERT(ok(stmt.bind(1, SOME_CONSTANT+i)));
      if (done(stmt.step())) {  // <----------- test this stmt.step()
        tested_something = true;
      } 
    }
  } {
    // The expectation is that we'll go through this loop but once
    char const *position = select_some_values.data();
    do {
      auto prepared = conn.prepare<sqlite::Statement>(position);
      CPPUNIT_ASSERT(ok(prepared));
      sqlite::Statement stmt = std::move(value(prepared));
      std::size_t row_count(0);
      while (row(stmt.step())) {  // <----------- test this stmt.step()
        row_count++;
      }
      // There were some rows in the table before we added
      CPPUNIT_ASSERT(SOME_REPETITIONS < row_count);
      position = remaining(prepared);
    } while ('\0' != *position);
  }
  CPPUNIT_ASSERT(tested_something);
}

auto tests::unit::statement::Fixture::test_column_count() -> void {
  bool tested_something = false;
  sqlite::Application app;
  sqlite::Connection conn(app);
  setup_table_of_values(conn);
  {
    char const *position = select_some_values.data();
    do {
      auto prepared = conn.prepare<sqlite::Statement>(position);
      CPPUNIT_ASSERT(ok(prepared));
      sqlite::Statement stmt = std::move(value(prepared));
      while (row(stmt.step())) {  // <----------- test this stmt.step()
        tested_something = true;
        CPPUNIT_ASSERT(0 < stmt.column_count()); // <------ test this
      }
      position = remaining(prepared);
    } while ('\0' != *position);
  }
  CPPUNIT_ASSERT(tested_something);
}

auto tests::unit::statement::Fixture::test_column() -> void {
  bool tested_something = false;
  sqlite::Application app;
  sqlite::Connection conn(app);
  setup_table_of_values(conn);
  {
    char const *position = select_some_values.data();
    do {
      auto prepared = conn.prepare<sqlite::Statement>(position);
      CPPUNIT_ASSERT(ok(prepared));
      sqlite::Statement stmt = std::move(value(prepared));
      while (row(stmt.step())) {  // <----------- test this stmt.step()
        tested_something = true;
        CPPUNIT_ASSERT(0 < stmt.column_count());
        std::cout << "row: ";
        for (sqlite::column_index ci(0), ce(stmt.column_count()); ce != ci; ++ci) {
          CPPUNIT_ASSERT(sqlite::Type::INTEGER == stmt.type(ci));
          auto value = stmt.column<sqlite::int64>(ci); // <------- test this
          std::cout << ' ' << value;
        }
        std::cout << '\n';
      }
      position = remaining(prepared);
    } while ('\0' != *position);
  }
  CPPUNIT_ASSERT(tested_something);
}

auto tests::unit::statement::Fixture::test_type() -> void {
  bool tested_something = false;
  sqlite::Application app;
  sqlite::Connection conn(app);
  setup_table_of_values(conn);
  {
    char const *position = select_some_values.data();
    do {
      auto prepared = conn.prepare<sqlite::Statement>(position);
      CPPUNIT_ASSERT(ok(prepared));
      sqlite::Statement stmt = std::move(value(prepared));
      while (row(stmt.step())) {  // <----------- test this stmt.step()
        tested_something = true;
        CPPUNIT_ASSERT(0 < stmt.column_count());
        for (sqlite::column_index ci(0), ce(stmt.column_count()); ce != ci; ++ci) {
          CPPUNIT_ASSERT(sqlite::Type::INTEGER == stmt.type(ci)); // <------ test this
        }
      }
      position = remaining(prepared);
    } while ('\0' != *position);
  }
  CPPUNIT_ASSERT(tested_something);
}

#import tests.unit.statement.Shell
#import tests.unit.statement.Statement
#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::statement::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("statement");
  s << call("once", &Fixture::test_once_initialization_and_shutdown)
    << call("repeated", &Fixture::test_repeated_initialization_and_shutdown)
    << call("sql", &Fixture::test_sql)
    << call("readonly", &Fixture::test_readonly)
    << call("busy", &Fixture::test_busy)
    << call("finalize", &Fixture::test_finalize)
    << call("reset", &Fixture::test_reset)
    << call("step", &Fixture::test_step)
    << call("bind", &Fixture::test_bind)
    << call("column_count", &Fixture::test_column_count)
    << call("column", &Fixture::test_column)
    << call("type", &Fixture::test_type)
    << add(Statement::suite())
    << add(Shell::suite())
    ;
  return s.release();
}
#endiv

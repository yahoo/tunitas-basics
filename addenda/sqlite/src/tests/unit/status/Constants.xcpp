// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::status {
  class Constants;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import std.vector
#import sqlite.status.Code
class tests::unit::status::Constants : public cppunit::test::Fixture {
public:
  std::vector<sqlite::status::Code> all_codes_except_OK;

  auto setUp() -> void;
  auto tearDown() -> void;

  auto test_ok() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import sqlite.status.Code

#import unit.rigging.lhs
using unit::rigging::lhs;
#import unit.rigging.clear
using unit::rigging::clear;

auto tests::unit::status::Constants::setUp() -> void {
  using namespace sqlite::status;
  using v = std::vector<sqlite::status::Code>;
  // Actually this is the test right here ... the utterance of all the constants
  lhs(all_codes_except_OK) = v{ERROR,
                               INTERNAL,
                               PERM,
                               ABORT,
                               BUSY,
                               LOCKED,
                               NOMEM,
                               READONLY,
                               INTERRUPT,
                               IOERR,
                               CORRUPT,
                               NOTFOUND,
                               FULL,
                               CANTOPEN,
                               PROTOCOL,
                               EMPTY,
                               SCHEMA,
                               TOOBIG,
                               CONSTRAINT,
                               MISMATCH,
                               MISUSE,
                               NOLFS,
                               AUTH,
                               FORMAT,
                               RANGE,
                               NOTADB,
                               NOTICE,
                               WARNING,
                               ROW,
                               DONE,
                               ioerr::READ,
                               ioerr::SHORT_READ,
                               ioerr::WRITE,
                               ioerr::FSYNC,
                               ioerr::DIR_FSYNC,
                               ioerr::TRUNCATE,
                               ioerr::FSTAT,
                               ioerr::UNLOCK,
                               ioerr::RDLOCK,
                               ioerr::DELETE,
                               ioerr::BLOCKED,
                               ioerr::NOMEM,
                               ioerr::ACCESS,
                               ioerr::CHECKRESERVEDLOCK,
                               ioerr::LOCK,
                               ioerr::CLOSE,
                               ioerr::DIR_CLOSE,
                               ioerr::SHMOPEN,
                               ioerr::SHMSIZE,
                               ioerr::SHMLOCK,
                               ioerr::SHMMAP,
                               ioerr::SEEK,
                               ioerr::DELETE_NOENT,
                               ioerr::MMAP,
                               ioerr::GETTEMPPATH,
                               ioerr::CONVPATH,
                               locked::SHAREDCACHE,
                               busy::RECOVERY,
                               busy::SNAPSHOT,
                               cantopen::NOTEMPDIR,
                               cantopen::ISDIR,
                               cantopen::FULLPATH,
                               cantopen::CONVPATH,
                               corrupt::VTAB,
                               readonly::RECOVERY,
                               readonly::CANTLOCK,
                               readonly::ROLLBACK,
                               readonly::DBMOVED,
                               abort::ROLLBACK,
                               constraint::CHECK,
                               constraint::COMMITHOOK,
                               constraint::FOREIGNKEY,
                               constraint::FUNCTION,
                               constraint::NOTNULL,
                               constraint::PRIMARYKEY,
                               constraint::TRIGGER,
                               constraint::UNIQUE,
                               constraint::VTAB,
                               constraint::ROWID,
                               notice::recover::WAL,
                               notice::recover::ROLLBACK,
                               warning::AUTOINDEX };
}

auto tests::unit::status::Constants::tearDown() -> void {
  lhs(all_codes_except_OK) = clear;
}

auto tests::unit::status::Constants::test_ok() -> void {
  for (auto c : all_codes_except_OK) {
    CPPUNIT_ASSERT(!ok(c));
  }
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::status::Constants::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("constants");
  s << call("ok", &Constants::test_ok)
    ;
  return s.release();
}
#endiv

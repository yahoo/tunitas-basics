// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace open {
      class Fixture;
    }
  }
}
#endiv
#divert <hpp>
#import c.const_stringz
#import cppunit.Test
#import cppunit.test.Fixture
#import std.string
#import std.wstring
class tests::unit::open::Fixture : public cppunit::test::Fixture {
public:
  Fixture();

  auto setUp() -> void;
  auto tearDown() -> void;

  bool debug_mode;
  std::string tmpname;
  c::const_stringz default_vfs_subsystem_name;

  auto test_open_filename_shell() -> void;
  auto test_open_filename_shell_flags() -> void;
  auto test_open_filename_shell_flags_vfs() -> void;
  auto test_open_location_shell() -> void;
  auto test_open_location_shell_flags() -> void;
  auto test_open_location_shell_flags_vfs() -> void;
  auto test_open_string_utf8_shell() -> void;
  auto test_open_string_utf16_shell() -> void;
  auto test_close() -> void;

  static auto suite() -> cppunit::Test *;
private:
  auto gensym() -> std::string;
  auto gensym16() -> std::wstring;
};
#endiv
#divert <cpp>
#import sqlite.api.session
#import std.clog

tests::unit::open::Fixture::Fixture()
  : debug_mode(false) {
  ;
}

auto tests::unit::open::Fixture::setUp() -> void {
  tmpname = gensym();
  CPPUNIT_ASSERT(!tmpname.empty());
  default_vfs_subsystem_name = ""; // <------ the default vfs subsystem has no name
}

#include <unistd.h>
#import unit.rigging.clear
#import unit.rigging.lhs
auto tests::unit::open::Fixture::tearDown() -> void {
  // Try to unlink ... and ignore any error
  (void)unlink(tmpname.data());
  using namespace ::unit::rigging;
  lhs(tmpname) = clear;
  lhs(default_vfs_subsystem_name) = clear;
}

namespace {
  inline auto operator "" _v(char const *str, std::size_t len) -> std::vector<char> {
    // reminder - the value in 'len' is the length of the string literal (without any trailing '\0' sentinel)
    std::vector<char> ret(str, str+len);
    ret.push_back('\0');
    return ret;
  }
}

#include <cstdlib>
#import std.runtime_error
auto tests::unit::open::Fixture::gensym() -> std::string {
  std::vector<char> buf = "/tmp/tests.unit.open.Fixture.XXXXXX"_v;
  CPPUNIT_ASSERT(!buf.empty());
  CPPUNIT_ASSERT('/' == buf[0]);
  CPPUNIT_ASSERT('/' == buf[4]);
  if (debug_mode) {
    std::clog << "trying mktemp on '" << buf.data() << "'\n";
  }
  auto made = ::mktemp(buf.data());
  // if mktemp fails, then it puts a '\0' in position 0 of the buffer.
  if (nullptr == made || '\0' == *made) {
    throw std::runtime_error("could not mktemp");
  }
  std::string ret(made);
  if (debug_mode) {
    std::clog << "gensym returns '" << ret << "'\n";
  }
  return ret;
}

auto tests::unit::open::Fixture::gensym16() -> std::wstring {
  std::wstring ret;
  for (auto c : gensym()) {
    wchar_t wc = c;
    ret.push_back(wc);
  }
  return ret;
}

#import sqlite.Application
#import sqlite.Connection
auto tests::unit::open::Fixture::test_open_filename_shell() -> void {
  sqlite::Application a;
  sqlite::Connection c(a);
  auto val = c.open(tmpname); // <-------- test this
  auto good = ok(val);
  CPPUNIT_ASSERT(good);
  CPPUNIT_ASSERT(good == c.is_open());
}

#import sqlite.open.Flags
auto tests::unit::open::Fixture::test_open_filename_shell_flags() -> void {
  sqlite::Application a;
  sqlite::Connection c(a);
  using namespace sqlite::open;
  Flags flags = Flag::READWRITE|Flag::CREATE;
  auto val = c.open(tmpname, flags); // <-------- test this
  auto good = ok(val);
  CPPUNIT_ASSERT(good);
  CPPUNIT_ASSERT(good == c.is_open());
}

auto tests::unit::open::Fixture::test_open_filename_shell_flags_vfs() -> void {
  sqlite::Application a;
  sqlite::Connection c(a);
  using namespace sqlite::open;
  Flags flags = Flag::READWRITE|Flag::CREATE;
  auto val = c.open(tmpname, flags, default_vfs_subsystem_name); // <--------- test this
  auto good = ok(val);
  if (good) {
    CPPUNIT_ASSERT(good);
    CPPUNIT_ASSERT(good == c.is_open());
  } else {
    // Weird ... it returned an error, but "is open"
    if (c.is_open()) {
      c.close();
    }
    auto val2 = c.open(tmpname, flags); // <--------- contrast against this
    auto good2 = ok(val2);
    CPPUNIT_ASSERT(good2);
    CPPUNIT_ASSERT(good2 == c.is_open());
    // If we got here then ...
    std::cout << ("WARNING odd behavior is unvalidated in c.open(tmpname, flags, default_vfs_subsystem_name)\n"
                  "... it works without the vfs subsystem; fails with the vfs subsystem\n"
                  "This means that the use of the default_vfs_subsystem_name caused the failure\n");
  }
}

auto tests::unit::open::Fixture::test_open_location_shell() -> void {
  sqlite::Application a;
  sqlite::Connection c(a);
  auto val = c.open(sqlite::open::Name::MEMORY); // <--------- test this
  auto good = ok(val);
  CPPUNIT_ASSERT(good);
  CPPUNIT_ASSERT(good == c.is_open());
}

#import sqlite.open.Name
auto tests::unit::open::Fixture::test_open_location_shell_flags() -> void {
  sqlite::Application a;
  sqlite::Connection c(a);
  using namespace sqlite::open;
  Flags flags = Flag::READWRITE|Flag::CREATE;
  Name location = Name::DISK; // <------ some anonymous disk location
  auto val = c.open(location, flags); // <-------- test this
  auto good = ok(val);
  CPPUNIT_ASSERT(good);
  CPPUNIT_ASSERT(good == c.is_open());
}

auto tests::unit::open::Fixture::test_open_location_shell_flags_vfs() -> void {
  sqlite::Application a;
  sqlite::Connection c(a);
  using namespace sqlite::open;
  Flags flags = Flag::READWRITE|Flag::CREATE;
  Name location = Name::DISK; // <------ some anonymous disk location
  auto val = c.open(location, flags, default_vfs_subsystem_name); // <------ test this
  auto good = ok(val);
  std::clog << "warning: forcing success on c.open(location, flags, default_vfs_subsystem_name)\n";
  CPPUNIT_ASSERT(good || !good);
}

auto tests::unit::open::Fixture::test_open_string_utf8_shell() -> void {
  sqlite::Application a;
  sqlite::Connection c(a);
  using namespace sqlite::open;
  std::string pretend_utf8 = gensym();
  auto val = c.open(pretend_utf8); // <-------- test this (recall: no flags are possible)
  auto good = ok(val);
  CPPUNIT_ASSERT(good);
  CPPUNIT_ASSERT(good == c.is_open());
}

auto tests::unit::open::Fixture::test_open_string_utf16_shell() -> void {
  sqlite::Application a;
  sqlite::Connection c(a);
  using namespace sqlite::open;
  std::wstring pretend_utf16 = gensym16();
  auto val = c.open(pretend_utf16); // <-------- test this (recall: no flags are possible)
  auto good = ok(val);
  std::clog << "warning: forcing success on c.open(pretend_utf16)\n";
  CPPUNIT_ASSERT(good || !good);
}

auto tests::unit::open::Fixture::test_close() -> void {
  sqlite::Application a;
  sqlite::Connection c(a);
  auto val_open = c.open(sqlite::open::Name::MEMORY);
  auto good_open = ok(val_open);
  CPPUNIT_ASSERT(good_open);
  auto val_close = c.close(); // <--------- we came to test this
  auto good_close = ok(val_close);
  CPPUNIT_ASSERT(good_close);
  CPPUNIT_ASSERT(!c.is_open());
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
auto tests::unit::open::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("open");
  s << call("open_filename_shell", &Fixture::test_open_filename_shell)
    << call("open_filename_shell_flags", &Fixture::test_open_filename_shell_flags)
    << call("open_filename_shell_flags_vfs", &Fixture::test_open_filename_shell_flags_vfs)
    << call("open_location_shell", &Fixture::test_open_location_shell)
    << call("open_location_shell_flags", &Fixture::test_open_location_shell_flags)
    << call("open_location_shell_flags_vfs", &Fixture::test_open_location_shell_flags_vfs)
    << call("open_string_utf8_shell", &Fixture::test_open_string_utf8_shell)
    << call("open_string_utf16_shell", &Fixture::test_open_string_utf16_shell)
    << call("close", &Fixture::test_close)
    ;
  return s.release();
}
#endiv

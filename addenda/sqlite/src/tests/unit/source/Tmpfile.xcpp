// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace source {
      class Tmpfile;
    }
  }
}
#endiv
#divert <hpp>
#import tests.unit.source.Cleanup
#import std.ofstream
#import std.string
class tests::unit::source::Tmpfile : public Cleanup, public std::ofstream {
  using mixin = Cleanup; // must be 1st in the inheritance to set doomed_filename in the constructor
  using Ancestor = std::ofstream;
public:
  inline explicit Tmpfile(std::string const &basename);
  inline auto open(std::string const &basename) -> void;
  inline auto filename() const -> std::string const &;
protected:
  static auto temporary_filename(std::string const &basename) -> std::string;
};
#endiv
#divert <ipp>
#import std.ios

tests::unit::source::Tmpfile::Tmpfile(std::string const &basename)
  : mixin(temporary_filename(basename))
  , Ancestor(doomed_filename, std::ios::out | std::ios::trunc) { 
  ;
}

auto tests::unit::source::Tmpfile::open(std::string const &basename) -> void {
  mixin::doomed_filename = temporary_filename(basename);
  Ancestor::open(mixin::doomed_filename, std::ios::out | std::ios::trunc);
}


auto tests::unit::source::Tmpfile::filename() const -> std::string const & {
  return mixin::doomed_filename;
}
#endiv
#divert <cpp>
#import path.filename.workbench
#import sys.posix.tmpdir
#import sys.posix.mktemp
#import std.system_error
#import std.system_category
auto tests::unit::source::Tmpfile::temporary_filename(std::string const &basename) -> std::string {
  auto pattern = finalize(path::filename::workbench() * sys::posix::tmpdir() / "t99" * basename * "XXXXXX");
  auto made = sys::posix::mktemp(pattern);
  if (!ok(made)) {
    throw std::system_error(error_code(made));
  }
  return value(made);
}
#endiv

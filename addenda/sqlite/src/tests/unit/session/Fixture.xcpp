// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace session {
      class Fixture;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::session::Fixture : public cppunit::test::Fixture {
public:
  auto test_initialize_shutdown() -> void;
  auto test_multiple_initialize_shutdown() -> void;
  auto test_ragged_multiple_initialize_shutdown() -> void;
  auto test_Application() -> void;
  auto test_multiple_Application() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import sqlite.api.session
#import sqlite.Application

auto tests::unit::session::Fixture::test_initialize_shutdown() -> void {
  CPPUNIT_ASSERT(ok(sqlite::api::initialize()));
  CPPUNIT_ASSERT(ok(sqlite::api::shutdown()));
}

auto tests::unit::session::Fixture::test_multiple_initialize_shutdown() -> void {
  int const SOME_LIMIT = 5;
  for (int i(0), e(SOME_LIMIT); e != i; ++i) {
    CPPUNIT_ASSERT(ok(sqlite::api::initialize()));
    CPPUNIT_ASSERT(ok(sqlite::api::shutdown()));
  }
}

auto tests::unit::session::Fixture::test_ragged_multiple_initialize_shutdown() -> void {
  int const INITIALIZE_LIMIT = 5;
  int const SHUTDOWN_LIMIT = 35;
  for (int i(0), e(INITIALIZE_LIMIT); e != i; ++i) {
    CPPUNIT_ASSERT(ok(sqlite::api::initialize()));
  }
  for (int i(0), e(SHUTDOWN_LIMIT); e != i; ++i) {
    CPPUNIT_ASSERT(ok(sqlite::api::shutdown()));
  }
}

auto tests::unit::session::Fixture::test_Application() -> void {
  {
    sqlite::Application a;
    // The destructor does a shutdown as it goes out of scope 
    CPPUNIT_ASSERT(true);
  }
}

auto tests::unit::session::Fixture::test_multiple_Application() -> void {
  int const SOME_LIMIT = 44;
  for (int i(0), e(SOME_LIMIT); e != i; ++i) {
    sqlite::Application a;
    // The destructor does a shutdown as it goes out of scope 
    CPPUNIT_ASSERT(true);
  }
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
auto tests::unit::session::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("session");
  s << call("initialize+shutdown", &Fixture::test_initialize_shutdown)
    << call("multiple_initialize+shutdown", &Fixture::test_multiple_initialize_shutdown)
    << call("ragged_multiple_initialize+shutdown", &Fixture::test_ragged_multiple_initialize_shutdown)
    << call("Application", &Fixture::test_Application)
    << call("multiple_Application", &Fixture::test_multiple_Application)
    ;
  return s.release();
}
#endiv

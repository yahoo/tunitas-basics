// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <cpp>
#import c.str
#import options.argument.constants
#import options.Program
#import options.longish.Getter
#import options.longish.Step
#import options.longish.Specification
#import sqlite
#import sqlite.Application
#import sqlite.Column
#import sqlite.Connection
#import sqlite.Statement
#import sqlite.Value
#import sys.exits.constants
#import tests.execute.Configuration
#import tests.execute.Usage
#import tests.execute.Version
#import std.cout
#import std.cerr
#import std.hex
#import std.deque
#import std.logic_error
#import std.move
#import std.string
#include <cassert>
auto main(int arg_c, char *arg_v[]) -> int {
  try {
    tests::execute::Configuration cfg;
    c::argv pargv(arg_c, arg_v);
    options::Program program(pargv);
    options::longish::Specification spec
    {{"usage", options::argument::NO, options::Code::HELP},
     {"version", options::argument::NO, options::Code::CHR_V},
     {"verbose", options::argument::NO, options::Code::CHR_v},
     {"create", options::argument::NO, options::Code::CHR_c},
     {"readonly", options::argument::NO, options::Code::CHR_r},
     {"readwrite", options::argument::NO, options::Code::CHR_w},
     {"writable", options::argument::NO, options::Code::CHR_w}};
    options::longish::Getter get(spec, pargv);
    options::longish::Step step;
    while ( ! end(step = get()) ) {
      switch (code(step)) {
      case options::Code::HELP:
        throw tests::execute::Usage(program, sys::exits::OK);
      case options::Code::CHR_c:
        cfg.create_mode = true;
        break;
      case options::Code::CHR_s:
        cfg.separator_string = word(step);
        break;
      case options::Code::CHR_r:
        cfg.readonly_mode = true;
        break;
      case options::Code::CHR_v:
        cfg.verbose_mode = true;
        break;
      case options::Code::CHR_V:
        throw tests::execute::Version(program);
      case options::Code::CHR_w:
        cfg.readwrite_mode = true;
        break;
      default:
        throw tests::execute::Usage(program, sys::exits::USAGE);
      }
    }
    std::ostream &verbose_out(std::cerr);
    if (cfg.readonly_mode && cfg.readwrite_mode) {
      std::cerr << program << ": warning, --readonly and --readwrite appear together, --readwrite takes precedence, --readonly is ignored\n";
      cfg.readonly_mode = false;
    }
    if (cfg.create_mode) {
      if (cfg.readonly_mode) {
        std::cerr << program << ": error, --create and --readonly are incompatible, quitting\n";
        throw tests::execute::Usage(program, sys::exits::USAGE);
      }
      if (!cfg.readwrite_mode) {
        if (cfg.verbose_mode) {
          std::cerr << program << ": warning, --create implies --readwrite, which is therefore assumed to have been present\n";
        }
        cfg.readwrite_mode = true;
      }
    }
    std::deque<std::string> series(get.begin(), get.end());
    if (2 != series.size()) {
      throw tests::execute::Usage(program, sys::exits::USAGE);
    }
    std::string sqlite_database_location = series.front();
    series.pop_front();
    std::string sql_syntax = series.front();
    series.pop_front();
    if (!series.empty()) {
      throw std::logic_error("not empty");
    }
    sqlite::Application application;
    sqlite::Connection connection(application);
    auto flags = sqlite::open::Flags();
    flags |= cfg.create_mode ? sqlite::open::Flag::CREATE : sqlite::open::Flag();
    flags |= cfg.readonly_mode ? sqlite::open::Flag::READONLY : sqlite::open::Flag();
    flags |= cfg.readwrite_mode ? sqlite::open::Flag::READWRITE : sqlite::open::Flag();
    if (cfg.verbose_mode) {
      verbose_out << "SQLite database " << sqlite_database_location << '\n'
                  << "SQL statement `" << sql_syntax << "'\n"
                  << "SQLite flags=" << std::hex << flags << '\n';
    }
    auto opened = connection.open(sqlite_database_location, flags);
    if ( !ok(opened) ) {
      throw std::runtime_error("sqlite " + sqlite_database_location);
    }
    char const *position = c::str(sql_syntax);
    do {
      if (cfg.verbose_mode) {
        verbose_out << "statement series {" << position << "}\n";
      }
      auto prepared = connection.prepare<sqlite::Statement>(position);
      if (!ok(prepared)) {
        throw std::runtime_error("sqlite prepare " + connection.errmsg());
      }
      if (end(prepared)) {
        // we're legitimately and properly done with parsing&executing (yay!)
        // This happens when there is trailing whitespace or commentariat in the sql_syntax
        break;
      }
      sqlite::Statement statement = std::move(value(prepared));
      if (cfg.verbose_mode) {
        verbose_out << std::hex
                    << "statement is " << (statement.is_prepared() ? "prepared" : "empty") << '\n'
                    << "prepare returned " << (int)code(prepared) << '\n'
                    << "connection says " << (int)connection.errcode() << '\n'
                    << "interpreted as \"" << connection.errmsg() << "\"\n";
        if (statement.is_prepared()) {
          verbose_out << "found {" << statement.sql() << "}\n";
        }
      }
      // Because you can have 'ok(prepared)' but '!statement.is_prepared()'
      // this occurs when there is no SQL in the prepared (parsed) statement
      // e.g. an empty string or all commentariat.
      if (!statement.is_prepared()) {
        throw std::runtime_error("no SQL found");
      }
      std::ostream &rows_out(std::cout);
      std::size_t row_count(0);
      while (row(statement.step())) {
        std::string sep = "";
        for (sqlite::column_index i(0), e(statement.column_count()); e != i; ++i) {
          rows_out << sep << statement.column<sqlite::Column>(i);
          sep = cfg.separator_string;
        }
        rows_out << '\n';
        row_count++;
      }
      if (cfg.verbose_mode) {
        verbose_out << "done with " << row_count << ' ' << (1 == row_count ? "row" : "rows") << '\n';
      }
      position = remaining(prepared);
    } while ('\0' != *position);
    return sys::exits::OK;
  } catch (tests::execute::Version const &v) {
    std::cout << v.what() << '\n';
    return sys::exits::OK;
  } catch (tests::execute::Usage const &u) {
    u.stream() << u << '\n';
    return u.code();
  } catch (std::exception const &e) {
    // n.b. this code is substantially untestable
    std::cerr << "execute: unexpected error, " << e.what() << '\n';
    return sys::exits::FAIL;
  }
}
#endiv

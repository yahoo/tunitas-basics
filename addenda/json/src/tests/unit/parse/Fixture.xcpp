// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::parse { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::parse::Fixture : public cppunit::test::Fixture {
  using Ancestor = cppunit::test::Fixture;
public:
  auto test_throwing() -> void;
  auto test_returning() -> void;
  auto test_deprecated_thrown() -> void;
  auto test_deprecated_returned() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import json.parse
#import json.to
#import json.failure.constants
auto tests::unit::parse::Fixture::test_throwing() -> void {
  try {
    using namespace ::json;
    auto const INDICATOR = ::json::failure::RETURNING; // <--------------- we are testing this
    auto const document = ::json::to(::json::STRING(), R"json({"a": BAD BAD BAD 1})json"); 
    ::json::parse(INDICATOR, document);
    CPPUNIT_ASSERT(false);
  } catch (std::exception const &e) {
    CPPUNIT_ASSERT(true);
  }
}
auto tests::unit::parse::Fixture::test_returning() -> void {
  try {
    using namespace ::json;
    auto const INDICATOR = ::json::failure::RETURNING; // <--------------- we are testing this
    auto const document = ::json::to(::json::STRING(), R"json(INDICATOR{"a": BAD BAD BAD 1})json"); 
    auto parsed = ::json::parse(INDICATOR, document);
    CPPUNIT_ASSERT(!ok(parsed));
  } catch (std::exception const &e) {
    CPPUNIT_ASSERT(false);
  }
}
auto tests::unit::parse::Fixture::test_deprecated_thrown() -> void {
  try {
    using namespace ::json;
    auto const INDICATOR = ::json::failure::thrown; // <--------------- we are testing this
    auto const document = ::json::to(::json::STRING(), R"json({"a": BAD BAD BAD 1})json"); 
    ::json::parse(INDICATOR, document);
    CPPUNIT_ASSERT(false);
  } catch (std::exception const &e) {
    CPPUNIT_ASSERT(true);
  }
}
#import json.failure.constants
auto tests::unit::parse::Fixture::test_deprecated_returned() -> void {
  try {
    using namespace ::json;
    auto const INDICATOR = ::json::failure::returned; // <--------------- we are testing this
    auto const document = ::json::to(::json::STRING(), R"json(INDICATOR{"a": BAD BAD BAD 1})json"); 
    auto parsed = ::json::parse(INDICATOR, document);
    CPPUNIT_ASSERT(!ok(parsed));
  } catch (std::exception const &e) {
    CPPUNIT_ASSERT(false);
  }
}
#import rigging.suite.io
auto tests::unit::parse::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("parse");
  series << call("throwing", &Fixture::test_throwing)
         << call("returning", &Fixture::test_returning)
    ;
  {
    Stream dep("deprecated");
    dep << call("thrown", &Fixture::test_deprecated_thrown)
        << call("returned", &Fixture::test_deprecated_returned)
      ;
    series << add(std::move(dep));
  }
  return finalize(series);
}
#endiv

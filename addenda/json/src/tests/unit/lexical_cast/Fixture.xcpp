// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace lexical_cast {
      class Fixture;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::lexical_cast::Fixture : public cppunit::test::Fixture {
  using Ancestor = cppunit::test::Fixture;
public:
  auto test_null() -> void;
  auto test_int() -> void;
  auto test_float() -> void;
  auto test_string() -> void;
  auto test_array() -> void;
  auto test_object() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import json.lexical_cast
#import json.Value
auto tests::unit::lexical_cast::Fixture::test_null() -> void {
  ::json::Value value;
  auto stringy = boost::lexical_cast<std::string>(value);
  CPPUNIT_ASSERT(!stringy.empty());
}

auto tests::unit::lexical_cast::Fixture::test_int() -> void {
  ::json::Value value = 99;
  auto stringy = boost::lexical_cast<std::string>(value);
  CPPUNIT_ASSERT(!stringy.empty());
}

auto tests::unit::lexical_cast::Fixture::test_float() -> void {
  ::json::Value value = 99.87654321;
  auto stringy = boost::lexical_cast<std::string>(value);
  CPPUNIT_ASSERT(!stringy.empty());
}

auto tests::unit::lexical_cast::Fixture::test_string() -> void {
  ::json::Value value = "some sort of string";
  auto stringy = boost::lexical_cast<std::string>(value);
  CPPUNIT_ASSERT(!stringy.empty());
}

#import json.value.constants
auto tests::unit::lexical_cast::Fixture::test_array() -> void {
  ::json::Value value(::json::value::ARRAY);
  auto stringy = boost::lexical_cast<std::string>(value);
  CPPUNIT_ASSERT(!stringy.empty());
}

auto tests::unit::lexical_cast::Fixture::test_object() -> void {
  ::json::Value value(::json::value::OBJECT);
  auto stringy = boost::lexical_cast<std::string>(value);
  CPPUNIT_ASSERT(!stringy.empty());
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::lexical_cast::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream series("lexical_cast");
  series << call("null", &Fixture::test_null)
         << call("int", &Fixture::test_int)
         << call("float", &Fixture::test_float)
         << call("string", &Fixture::test_string)
         << call("array", &Fixture::test_array)
         << call("object", &Fixture::test_object)
    ;
  return series.release();
}
#endiv

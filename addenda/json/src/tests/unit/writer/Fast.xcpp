// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::writer { class Fast; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::writer::Fast : public cppunit::test::Fixture {
  using Ancestor = cppunit::test::Fixture;
public:
  auto test_constructor() -> void;
  auto test_write() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#pragma GCC diagnostic ignored "-Wdeprecated-declarations" // we will test deprecated declarations
#import json.writer.Fast
auto tests::unit::writer::Fast::test_constructor() -> void {
  ::json::writer::Fast w;
  // that's it
  CPPUNIT_ASSERT(true);
}
#import tests.unit.Generator
auto tests::unit::writer::Fast::test_write() -> void {
  ::json::writer::Fast w;
  tests::unit::Generator generate;
  auto g = generate();
  auto s = w.write(g);
  CPPUNIT_ASSERT(!s.empty());
}
#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::writer::Fast::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("Fast");
  s << call("constructor", &Fast::test_constructor)
    << call("write", &Fast::test_write)
    ;
  return s.release();
}
#endiv

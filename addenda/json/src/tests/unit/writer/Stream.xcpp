// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace writer {
      class Stream;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::writer::Stream : public cppunit::test::Fixture {
  using Ancestor = cppunit::test::Fixture;
public:
  auto test_write() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import json.writer.Stream
#import json.writer.stream.Builder
#import std.ostringstream
#import std.unique_ptr
#import tests.unit.Generator
auto tests::unit::writer::Stream::test_write() -> void {
  // Whereas json::writer::Stream is an abstract class, an interface,
  // it is up to a descendant to make something meaningful.
  //
  // Recipe for construcing a json::writer::Stream is copied from json/writer.h
  ::json::writer::stream::Builder builder;
  std::unique_ptr<::json::writer::Stream> holder(builder.newStreamWriter());
  ::json::writer::Stream &w(*holder);
  tests::unit::Generator generate;
  auto g = generate();
  std::ostringstream o;
  auto zero = w.write(g, &o);
  CPPUNIT_ASSERT(0 == zero); // always returns zero (even on stream failure)
  auto s = o.str();
  CPPUNIT_ASSERT(!s.empty());
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::writer::Stream::suite() -> cppunit::Test * {
  namespace suite = ::unit::rigging::suite;
  using suite::add;
  using suite::call;
  suite::Stream s("stream");
  s << call("write", &Stream::test_write)
    ;
  return s.release();
}
#endiv

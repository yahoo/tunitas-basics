// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::writer::stream { class Styled; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::writer::stream::Styled : public cppunit::test::Fixture {
  using Ancestor = cppunit::test::Fixture;
public:
  auto test_constructor() -> void;
  auto test_use() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#pragma GCC diagnostic ignored "-Wdeprecated-declarations" // we will test deprecated declarations
#import json.writer.stream.Styled
auto tests::unit::writer::stream::Styled::test_constructor() -> void {
  ::json::writer::stream::Styled w;
  CPPUNIT_ASSERT(true);
}
#import std.ostream
#import std.cerr
#import std.cout
#import std.endl
#import tests.unit.Generator
#import json.Value
auto tests::unit::writer::stream::Styled::test_use() -> void {
  tests::unit::Generator generate;
  ::json::Value v = generate();
  std::ostream &o(std::cout);
  ::json::writer::stream::Styled w;
  w.write(o, v);
  o << std::endl;
  CPPUNIT_ASSERT(true);
}
#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::writer::stream::Styled::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream series("stream.styled");
  series << call("constructor", &Styled::test_constructor)
         << call("use", &Styled::test_use)
    ;
  return series.release();
}
#endiv

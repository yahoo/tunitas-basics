// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace writer {
      namespace stream {
        class Builder;
      }
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::writer::stream::Builder : public cppunit::test::Fixture {
  using Ancestor = cppunit::test::Fixture;
public:
  auto test_constructor() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.ostream
#import std.cerr
#import std.cout
#import std.endl

#import tests.unit.Generator
#import json.writer.stream.Builder
#import std.unique_ptr
auto tests::unit::writer::stream::Builder::test_constructor() -> void {
  tests::unit::Generator generate;
  ::json::Value value = generate();
  ::json::writer::stream::Builder builder; // <----------------------------------------- test this
  builder["commentStyle"] = "None";
  builder["indentation"] = "   ";
  builder["enableYAMLCompatibility"]  = true;
  builder["dropNullPlaceholders"] =  true;
  builder["useSpecialFloats"] = true;
  std::unique_ptr<Json::StreamWriter> writer(builder.newStreamWriter()); // <----------- test this
  std::ostream &o(std::cout);
  writer->write(value, &o);
  o << std::endl;
  CPPUNIT_ASSERT(true);
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::writer::stream::Builder::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("stream.builder");
  s << call("constructor", &Builder::test_constructor)
    ;
  return s.release();
}
#endiv

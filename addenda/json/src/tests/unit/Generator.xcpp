// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    class Generator;
  }
}
#endiv
#divert <hpp>
#import json.Value
#import tests.unit.generator.State
class tests::unit::Generator {
public:
  auto operator()() -> ::json::Value;
private:
  auto generate(generator::State &) -> ::json::Value;
  auto object(generator::State &) -> ::json::Value;
  auto array(generator::State &) -> ::json::Value;
};
#endiv
#divert <cpp>
#import tests.unit.generator.State
#import json.Value
#import std.move
auto tests::unit::Generator::operator()() -> ::json::Value {
  generator::State state;
  ::json::Value o = this->object(state);
  return o;
}

#import tests.unit.generator.Number
#import tests.unit.generator.Symbol
auto tests::unit::Generator::generate(generator::State &state) -> ::json::Value {
  ::json::Value ret;
  int const recursion_limit = 0 < state.height ? 5 : 2;
  generator::Number gen(0, recursion_limit);
  switch (gen(state)) {
  case 0: // null
    // the object remains null
    break;
  case 1: // int
    {
      generator::Number gen(0, 999);;
      ret = gen(state);
    }
    break;
  case 2: // string
    {
      generator::Symbol gen;
      ret = gen.as<std::string>(state);
    }
    break;
  case 3: // floating
    {
      generator::Number numerator(1, std::numeric_limits<int>::max());
      generator::Number denominator(1, std::numeric_limits<int>::max());;
      double n = numerator(state);
      double d = denominator(state);
      double ff = n / d;
      ret = ff;
    }
    break;
  case 4: // array
    ret = this->array(state);
    break;
  case 5: // object
    ret = this->object(state);
    break;
  default:
    throw std::logic_error("random distribution is out of bounds");
  }
  return ret;
}

#import tests.unit.generator.Number
#import tests.unit.generator.Symbol
#import std.move
#import std.uniform_int_distribution
#import json.value.Type
auto tests::unit::Generator::object(generator::State &state) -> ::json::Value {
  generator::Number generate_limit(2, 3); 
  generator::Symbol generate_symbol;
::json::Value ret(::json::value::OBJECT);
  for (unsigned i(0), e(generate_limit(state)); e != i; ++i) {
    auto lhs = generate_symbol.as<std::string>(state);
    generator::State::Decrementer guard(state);
    ::json::Value rhs = this->generate(state);
    ret[lhs] = rhs;
  };
  return ret;
}

auto tests::unit::Generator::array(generator::State &state) -> ::json::Value {
  ::json::Value ret(::json::value::ARRAY);
  generator::Number generate_limit(2, 3);
  for (unsigned i(0), e(generate_limit(state)); e != i; ++i) {
    ret[i] = this->generate(state);
  }
  return ret;
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace value {
      class ToString;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::value::ToString : public cppunit::test::Fixture {
  using Ancestor = cppunit::test::Fixture;
public:
  auto test_native_int32() -> void;
  auto test_native_uint32() -> void;
  auto test_native_int64() -> void;
  auto test_native_uint64() -> void;
  auto test_native_double() -> void;
  auto test_native_bool() -> void;

  auto test_native_char_const_pointer() -> void;
  auto test_const_stringz() -> void;
  auto test_string() -> void;

  auto test_value_null() -> void;
  auto test_value_int() -> void;
  auto test_value_uint() -> void;
  auto test_value_real() -> void;
  auto test_value_string() -> void;
  auto test_value_boolean() -> void;
  auto test_value_array() -> void;

  auto test_value_object_rval() -> void;
  auto test_value_object_lval() -> void;
  auto test_value_object_move() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.int32_t
#import std.uint32_t
#import std.uint64_t
#import std.uint64_t
#import std.size_t
#import c.const_stringz
#import std.string
#import json.Value
#import json.String
#import json.value.Type
#import json.value.toString

auto tests::unit::value::ToString::test_native_int32() -> void {
  std::int32_t val = -99;
  std::string str = ::json::value::toString(val);
  CPPUNIT_ASSERT(!str.empty());

}

auto tests::unit::value::ToString::test_native_uint32() -> void {
  std::uint32_t val = 99u;
  std::string str = ::json::value::toString(val);
  CPPUNIT_ASSERT(!str.empty());
}

auto tests::unit::value::ToString::test_native_int64() -> void {
  std::int64_t val = -88888888888;
  std::string str = ::json::value::toString(val);
  CPPUNIT_ASSERT(!str.empty());
}

auto tests::unit::value::ToString::test_native_uint64() -> void {
  std::uint64_t val = 88888888888u;
  std::string str = ::json::value::toString(val);
  CPPUNIT_ASSERT(!str.empty());
}

auto tests::unit::value::ToString::test_native_double() -> void {
  double val = 7.654321;
  std::string str = ::json::value::toString(val);
  CPPUNIT_ASSERT(!str.empty());
}

auto tests::unit::value::ToString::test_native_bool() -> void {
  bool val = false;
  std::string str = ::json::value::toString(val);
  CPPUNIT_ASSERT(!str.empty());
}

auto tests::unit::value::ToString::test_native_char_const_pointer() -> void {
  char const *val = "a literal";
  std::string str = ::json::value::toString(val);
  CPPUNIT_ASSERT(!str.empty());
}

auto tests::unit::value::ToString::test_const_stringz() -> void {
  c::const_stringz val = "a literal";
  std::string str = ::json::value::toString(val);
  CPPUNIT_ASSERT(!str.empty());
}

auto tests::unit::value::ToString::test_string() -> void {
  std::string val = "a literal";
  std::string str = ::json::value::toString(val);
  CPPUNIT_ASSERT(!str.empty());
}

#import json.value.constants
auto tests::unit::value::ToString::test_value_null() -> void {
  ::json::Value val(::json::value::JSONNULL);
  std::string str = ::json::value::toString(val);
  CPPUNIT_ASSERT(!str.empty());
}

auto tests::unit::value::ToString::test_value_int() -> void {
  ::json::Value val(::json::value::INT);
  std::string str = ::json::value::toString(val);
  CPPUNIT_ASSERT(!str.empty());
}

auto tests::unit::value::ToString::test_value_uint() -> void {
  ::json::Value val(::json::value::UINT);
  std::string str = ::json::value::toString(val);
  CPPUNIT_ASSERT(!str.empty());
}

auto tests::unit::value::ToString::test_value_real() -> void {
  ::json::Value val(::json::value::REAL);
  std::string str = ::json::value::toString(val);
  CPPUNIT_ASSERT(!str.empty());
}

auto tests::unit::value::ToString::test_value_string() -> void {
  ::json::Value val(::json::value::STRING);
  std::string str = ::json::value::toString(val);
  CPPUNIT_ASSERT(!str.empty());
}

auto tests::unit::value::ToString::test_value_boolean() -> void {
  ::json::Value val(::json::value::BOOLEAN);
  std::string str = ::json::value::toString(val);
  CPPUNIT_ASSERT(!str.empty());
}

auto tests::unit::value::ToString::test_value_object_rval() -> void {
  ::json::Value const val(::json::value::OBJECT); // <------------- consty
  std::string str = ::json::value::toString(val);
  CPPUNIT_ASSERT(!str.empty());
}

auto tests::unit::value::ToString::test_value_object_lval() -> void {
  ::json::Value val(::json::value::OBJECT); // <------------------- mutable
  std::string str = ::json::value::toString(val);
  CPPUNIT_ASSERT(!str.empty());
}

#import std.move
auto tests::unit::value::ToString::test_value_object_move() -> void {
  ::json::Value val(::json::value::OBJECT);
  std::string str = ::json::value::toString(std::move(val)); // <------------ Value &&
  CPPUNIT_ASSERT(!str.empty());
}

auto tests::unit::value::ToString::test_value_array() -> void {
  ::json::Value val(::json::value::ARRAY);
  std::string str = ::json::value::toString(val);
  CPPUNIT_ASSERT(!str.empty());
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::value::ToString::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream series("toString");
  {
    Stream nat("native");
    nat << call("int32", &ToString::test_native_int32)
        << call("uint32", &ToString::test_native_uint32)
        << call("int64", &ToString::test_native_int64)
        << call("uint64", &ToString::test_native_uint64)
        << call("double", &ToString::test_native_double)
        << call("bool", &ToString::test_native_bool)
        << call("char const *", &ToString::test_native_char_const_pointer)
      ;
    series << add(nat.release());
  }
  series << call("const_stringz", &ToString::test_const_stringz)
         << call("std::string", &ToString::test_string)
    ;
  {
    Stream val("value");
    val << call("null", &ToString::test_value_null)
        << call("int", &ToString::test_value_int)
        << call("uint", &ToString::test_value_uint)
        << call("real", &ToString::test_value_real)
        << call("string", &ToString::test_value_string)
        << call("boolean", &ToString::test_value_boolean)
        << call("array", &ToString::test_value_array)
      ;
    {
      Stream obj("object");
      obj << call("rval", &ToString::test_value_object_rval)
          << call("lval", &ToString::test_value_object_lval)
          << call("move", &ToString::test_value_object_move)
        ;
      series << add(obj.release());
    }
    series << add(val.release());
  }
  return series.release();
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace to {
      class String;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::to::String : public cppunit::test::Fixture {
  using Ancestor = cppunit::test::Fixture;
public:
  auto test_to_retString_argString_muting() -> void;
  auto test_to_retString_argString_consty() -> void;
  auto test_to_retString_argstring() -> void;
  auto test_to_retString_argchar_pointer() -> void;
  auto test_to_retString_argchar_array() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import json.String
#import json.to
#import json.as

auto tests::unit::to::String::test_to_retString_argString_muting() -> void {
  ::json::String specimen1 = ::json::to(::json::STRING(), "spaghetti");
  ::json::String specimen2 = ::json::to(::json::STRING(), specimen1); // <------- test this
  std::string val = ::json::as<std::string>(specimen2);
  CPPUNIT_ASSERT("spaghetti" == val);
}

auto tests::unit::to::String::test_to_retString_argString_consty() -> void {
  ::json::String specimen1 = ::json::to(::json::STRING(), "spaghetti");
  ::json::String specimen2 = ::json::to(::json::STRING(), const_cast<::json::String const &>(specimen1)); // <------- test this
  std::string val = ::json::as<std::string>(specimen2);
  CPPUNIT_ASSERT("spaghetti" == val);
}

auto tests::unit::to::String::test_to_retString_argstring() -> void {
  std::string const base = "salad";
  ::json::String specimen = ::json::to(::json::STRING(), base);
  std::string val = ::json::as<std::string>(specimen);
  CPPUNIT_ASSERT("salad" == val);
}

auto tests::unit::to::String::test_to_retString_argchar_pointer() -> void {
  char const *const base = "breadsticks";
  ::json::String specimen = ::json::to(::json::STRING(), base);
  std::string val = ::json::as<std::string>(specimen);
  CPPUNIT_ASSERT("breadsticks" == val);
}

auto tests::unit::to::String::test_to_retString_argchar_array() -> void {
  char const base[] = "pesto";
  ::json::String specimen = ::json::to(::json::STRING(), base);
  std::string val = ::json::as<std::string>(specimen);
  CPPUNIT_ASSERT("pesto" == val);
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::to::String::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream series("String");
  {
    Stream str("String");
    {
      Stream ing("String");
      ing << call("muting", &String::test_to_retString_argString_muting)
          << call("consty", &String::test_to_retString_argString_consty)
        ;
      str << add(ing.release());
    }
    str << call("string", &String::test_to_retString_argstring)
        << call("char*", &String::test_to_retString_argchar_pointer)
        << call("char[]", &String::test_to_retString_argchar_array)
      ;
    series << add(str.release());
  }
  return series.release();
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::to { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::to::Fixture : public cppunit::test::Fixture {
  using Ancestor = cppunit::test::Fixture;
public:
  auto test_bool_true() -> void;
  auto test_bool_false() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import json.Value
#import json.String
#import json.to
#import json.as
auto tests::unit::to::Fixture::test_bool_true() -> void {
  ::json::Value specimen = ::json::to(::json::VALUE(), true);
  bool val = ::json::as<bool>(specimen);
  CPPUNIT_ASSERT(true == val);
}
auto tests::unit::to::Fixture::test_bool_false() -> void {
  ::json::Value specimen = ::json::to(::json::VALUE(), false);
  bool val = ::json::as<bool>(specimen);
  CPPUNIT_ASSERT(false == val);
}
#import tests.unit.to.Value
#import tests.unit.to.String
#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::to::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream series("to");
  {
    Stream boo("bool");
    boo << call("true", &Fixture::test_bool_true)
        << call("false", &Fixture::test_bool_false)
      ;
    series << add(std::move(boo));
  }
  series
    << add<String>()
    << add<Value>()
    ;
  return series.release();
}
#endiv

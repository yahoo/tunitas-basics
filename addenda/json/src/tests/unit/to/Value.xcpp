// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::to { class Value; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::to::Value : public cppunit::test::Fixture {
  using Ancestor = cppunit::test::Fixture;
public:
  auto test_to_retValue_argbool() -> void;

  auto test_to_retValue_argfloat() -> void;
  auto test_to_retValue_argdouble() -> void;

  auto test_to_retValue_argint8() -> void;
  auto test_to_retValue_arguint8() -> void;

  auto test_to_retValue_argint16() -> void;
  auto test_to_retValue_arguint16() -> void;

  auto test_to_retValue_argint32() -> void;
  auto test_to_retValue_arguint32() -> void;

  auto test_to_retValue_argint64() -> void;
  auto test_to_retValue_arguint64() -> void;

  auto test_to_retValue_argint() -> void;
  auto test_to_retValue_arguint() -> void;

  auto test_to_retValue_arglint() -> void;
  auto test_to_retValue_argluint() -> void;

  auto test_to_retValue_argllint() -> void;
  auto test_to_retValue_arglluint() -> void;

  static auto suite() -> cppunit::Test *;
protected:
  template<typename TYPE> auto exercise_retValue_argTYPE(TYPE literal) -> void;
};
#endiv
#divert <tpp>
#import json.as
#import json.to
#import json.Value
template<typename TYPE> auto tests::unit::to::Value::exercise_retValue_argTYPE(TYPE literal) -> void {
  ::json::Value specimen = ::json::to(::json::VALUE(), literal);
  TYPE val = ::json::as<TYPE>(specimen);
  CPPUNIT_ASSERT(literal == val);
}
#endiv
#divert <cpp>
#import json.Value
#import json.String
#import json.to
#import json.as

auto tests::unit::to::Value::test_to_retValue_argbool() -> void {
  {
    ::json::Value specimen = ::json::to(::json::VALUE(), true);
    bool val = ::json::as<bool>(specimen);
    CPPUNIT_ASSERT(true == val);
  } {
    ::json::Value specimen = ::json::to(::json::VALUE(), false);
    bool val = ::json::as<bool>(specimen);
    CPPUNIT_ASSERT(false == val);
  }
}

auto tests::unit::to::Value::test_to_retValue_argfloat() -> void { exercise_retValue_argTYPE<float>((float)(1.234)); }
auto tests::unit::to::Value::test_to_retValue_argdouble() -> void { exercise_retValue_argTYPE<double>((double)(4.567)); }

#import std.int8_t
#import std.uint8_t
auto tests::unit::to::Value::test_to_retValue_argint8() -> void { exercise_retValue_argTYPE<std::int8_t>((std::int8_t)(99)); }
auto tests::unit::to::Value::test_to_retValue_arguint8() -> void { exercise_retValue_argTYPE<std::uint8_t>((std::uint8_t)(99)); }

#import std.int16_t
#import std.uint16_t
auto tests::unit::to::Value::test_to_retValue_argint16() -> void { exercise_retValue_argTYPE<std::int16_t>((std::int16_t)(99)); }
auto tests::unit::to::Value::test_to_retValue_arguint16() -> void { exercise_retValue_argTYPE<std::uint16_t>((std::uint16_t)(99)); }

#import std.int32_t
#import std.uint32_t
auto tests::unit::to::Value::test_to_retValue_argint32() -> void { exercise_retValue_argTYPE<std::int32_t>((std::int32_t)(99)); }
auto tests::unit::to::Value::test_to_retValue_arguint32() -> void { exercise_retValue_argTYPE<std::uint32_t>((std::uint32_t)(99)); }

auto tests::unit::to::Value::test_to_retValue_argint() -> void { exercise_retValue_argTYPE<int signed>(99); }
auto tests::unit::to::Value::test_to_retValue_arguint() -> void { exercise_retValue_argTYPE<int unsigned>(99u); }

auto tests::unit::to::Value::test_to_retValue_argllint() -> void { exercise_retValue_argTYPE<int long long signed>(99ll); }
auto tests::unit::to::Value::test_to_retValue_arglluint() -> void { exercise_retValue_argTYPE<int long long unsigned>(99llu); }

//
// NASTY!  - these are ambiguous because json uses 'long long int' but does not support 'long int' directly
//

#import std.int64_t
#import std.uint64_t
auto tests::unit::to::Value::test_to_retValue_argint64() -> void { exercise_retValue_argTYPE<std::int64_t>((std::int64_t)(99)); }
auto tests::unit::to::Value::test_to_retValue_arguint64() -> void { exercise_retValue_argTYPE<std::uint64_t>((std::uint64_t)(99)); }

auto tests::unit::to::Value::test_to_retValue_arglint() -> void { exercise_retValue_argTYPE<int long signed>(99l); }
auto tests::unit::to::Value::test_to_retValue_argluint() -> void { exercise_retValue_argTYPE<int long unsigned>(99lu); }

#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::to::Value::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream series("Value");
  series << call("bool", &Value::test_to_retValue_argbool)
         << call("float", &Value::test_to_retValue_argfloat)
         << call("double", &Value::test_to_retValue_argdouble)
         << call("int8", &Value::test_to_retValue_argint8)
         << call("uint8", &Value::test_to_retValue_arguint8)
         << call("int16", &Value::test_to_retValue_argint16)
         << call("uint16", &Value::test_to_retValue_arguint16)
         << call("int32", &Value::test_to_retValue_argint32)
         << call("uint32", &Value::test_to_retValue_arguint32)
         << call("int64", &Value::test_to_retValue_argint64)
         << call("uint64", &Value::test_to_retValue_arguint64)
         << call("int", &Value::test_to_retValue_argint)
         << call("uint", &Value::test_to_retValue_arguint)
         << call("lint", &Value::test_to_retValue_arglint)
         << call("luint", &Value::test_to_retValue_argluint)
         << call("llint", &Value::test_to_retValue_argllint)
         << call("lluint", &Value::test_to_retValue_arglluint)
    ;
  return series.release();
}
#endiv

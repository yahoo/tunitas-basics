// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace as {
      class Fixture;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::as::Fixture : public cppunit::test::Fixture {
  using Ancestor = cppunit::test::Fixture;
public:
  auto test_as_retValue_argValue_copy() -> void;
  auto test_as_retValue_argValue_move() -> void;
  auto test_as_retString_argValue() -> void;
  auto test_as_retstring_argString() -> void;
  auto test_as_retString_argstring() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import json.as

#import tests.unit.Generator
#import std.move
auto tests::unit::as::Fixture::test_as_retValue_argValue_copy() -> void {
  Generator generate;
  ::json::Value v0 = generate();
  std::cerr << __FILE__ << ':' << __LINE__ << ' ' << v0 << '\n';
  CPPUNIT_ASSERT(!v0.isNull());
  ::json::Value deep(v0); // deep copy?
  std::cerr << __FILE__ << ':' << __LINE__ << " deep copy? " << deep << '\n';
  std::cerr << __FILE__ << ':' << __LINE__ << " start as v0=" << v0 << '\n';
  ::json::Value x1 = json::as<::json::Value>(v0);
  std::cerr << __FILE__ << ':' << __LINE__ << " copied as x1=" << x1 << '\n';
  ::json::Value v1(::json::as<::json::Value>(v0));
  std::cerr << __FILE__ << ':' << __LINE__ << " copied as v1=" << v1 << '\n';
  CPPUNIT_ASSERT(!v1.isNull());
}

auto tests::unit::as::Fixture::test_as_retValue_argValue_move() -> void {
  Generator generate;
  ::json::Value v0 = generate();
  ::json::Value v1 = ::json::as<::json::Value>(std::move(v0));
  CPPUNIT_ASSERT(!v1.isNull());
}

auto tests::unit::as::Fixture::test_as_retString_argValue() -> void {
  {
    Generator generate;
    ::json::Value v0 = generate();
    ::json::String s1 = ::json::as<::json::String>(v0);
    CPPUNIT_ASSERT(!json::as<std::string>(s1).empty());
  } {
    Generator generate;
    ::json::Value v0 = generate();
    ::json::String s1 = ::json::as<::json::String>(std::move(v0));
    CPPUNIT_ASSERT(!json::as<std::string>(s1).empty());
  }
}

#import json.as
#import json.to
#import json.String
#import std.get
auto tests::unit::as::Fixture::test_as_retString_argstring() -> void {
  std::string unwrapped = "a string";
  {
    ::json::String constructed(::json::tag::String(), unwrapped);
    CPPUNIT_ASSERT(!std::get<1>(constructed).empty());
    CPPUNIT_ASSERT("a string" == std::get<1>(constructed));
  } {
    CPPUNIT_ASSERT(!unwrapped.empty());
#if 4 == __GNUC__ && 8 == __GNUC_MINOR__
    ::json::String wrapped = ::json::to(::json::STRING(), const_cast<std::string const &>(unwrapped)); // <--- test this
#else
    // by gcc6 this "just works"
    ::json::String wrapped = ::json::to(::json::STRING(), unwrapped); // <--- test this
#endif
    CPPUNIT_ASSERT(!unwrapped.empty());
    CPPUNIT_ASSERT(!std::get<1>(wrapped).empty());
    CPPUNIT_ASSERT("a string" == std::get<1>(wrapped));
  }
}

auto tests::unit::as::Fixture::test_as_retstring_argString() -> void {
  ::json::String wrapped(::json::tag::String(), "a string");
  std::string unwrapped = ::json::as<std::string>(wrapped);
  CPPUNIT_ASSERT(!unwrapped.empty());
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::as::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream series("as");
  {
    Stream val("Value");
    {
      Stream arg("Value");
      arg << call("copy", &Fixture::test_as_retValue_argValue_copy)
          << call("move", &Fixture::test_as_retValue_argValue_move)
        ;
      val<<< add>(ar();
    }
        series<<< add>(va();
  } {
    Stream str("String");
    str << call("Value", &Fixture::test_as_retString_argValue)
        << call("string", &Fixture::test_as_retString_argstring)
        << call("String", &Fixture::test_as_retstring_argString)
      ;
    series<<< add>(st();
  }
  return series.release();
}
#endiv

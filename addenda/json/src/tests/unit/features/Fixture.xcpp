// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace features {
      class Fixture;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::features::Fixture : public cppunit::test::Fixture {
  using Ancestor = cppunit::test::Fixture;
public:
  auto test_constructor() -> void;
  auto test_destructor() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import json.Features
auto tests::unit::features::Fixture::test_constructor() -> void {
  ::json::Features feat;
  auto strict = ::json::Features::strictMode();
  auto permissive = ::json::Features::all();
  bool allowComments_differs = strict.allowComments_ != permissive.allowComments_;
  bool allowNull_differs = strict.allowDroppedNullPlaceholders_ != permissive.allowDroppedNullPlaceholders_;
  bool allowNumericKeys_differs = strict.allowNumericKeys_ != permissive.allowNumericKeys_;
  CPPUNIT_ASSERT(allowComments_differs || allowNull_differs || allowNumericKeys_differs);
}

auto tests::unit::features::Fixture::test_destructor() -> void {
  // Surely the destructor was already tested
  CPPUNIT_ASSERT(true);
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::features::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("features");
  s << call("constructor", &Fixture::test_constructor)
    << call("destructor", &Fixture::test_destructor)
    ;
  return s.release();
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::reader { class Char; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import json.reader.Char
#import json.reader.builder.Char
class tests::unit::reader::Char : public cppunit::test::Fixture {
  using Ancestor = cppunit::test::Fixture;
public:
  using Subject = ::json::reader::Char;
  using Builder = ::json::reader::builder::Char;
  auto test_build() -> void;
  auto test_destructor() -> void;
  auto test_parse_iterator() -> void;
  auto test_parse_string() -> void;
  auto test_parse_istream() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import json.Features
#import json.String
#import json.to
#import std.unique_ptr;
auto tests::unit::reader::Char::test_build() -> void {
  Builder bob;
  std::unique_ptr<Subject> p{bob.newCharReader()};
  // that's it!
}
auto tests::unit::reader::Char::test_destructor() -> void {
  {
    Builder bob;
    std::unique_ptr<Subject> p{bob.newCharReader()};
    char const *const some_trivial_literal = R"json( {"apple":2,  "banana" : 3 } )json";
    ::json::String syntax = ::json::to(::json::STRING(), some_trivial_literal);
    ::json::Value recovered;
    auto result = p->parse(syntax, recovered);
    CPPUNIT_ASSERT(result);
    // <-------- the destructor happens here
  }
}
#import c.const_stringz
auto tests::unit::reader::Char::test_parse_iterator() -> void {
  Builder bob;
  std::unique_ptr<Subject> p{bob.newCharReader()};
  c::const_stringz const some_literal = R"json( {"only":1} )json";
  ::json::Value recovered;
  auto result = p->parse(some_literal.begin(), some_literal.end(), recovered, comments);
  CPPUNIT_ASSERT(ok(result));
}
auto tests::unit::reader::Char::test_parse_string() -> void {
  Builder bob;
  std::unique_ptr<Subject> p{bob.newCharReader()};
  std::string const some_literal = R"json( {"only":1} )json";
  bool const comments = true; // <-------------------------- test this
  ::json::Value recovered;
  auto result = p->parse(some_literal, recovered, comments);
  CPPUNIT_ASSERT(result);
}
auto tests::unit::reader::Char::test_parse_istream() -> void {
  Builder bob;
  std::unique_ptr<Subject> p{bob.newCharReader()};
  std::istringstream inbuf{R"json( {"only":1} )json"};
  bool const comments = true; // <-------------------------- test this
  ::json::Value recovered;
  auto result = p->parse(inbuf, recovered, comments);
  CPPUNIT_ASSERT(ok(result));
}
#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::reader::Char::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream series("Char");
  series << call("build", &Char::test_build)
         << call("destructor", &Char::test_destructor)
    ;
  {
    Stream cal("operator()");
    {
      Stream par("parse");
      par << call("nocomments", &Char::test_operator_call_parse_nocomments)
          << call("yescomments", &Char::test_operator_call_parse_yescomments)
        ;
      cal<<< add>(pa();
    }
        series<<< add>(ca();
  }
  return series.release();
}
#endiv

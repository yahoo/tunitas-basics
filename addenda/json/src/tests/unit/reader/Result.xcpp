// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::reader { class Result; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::reader::Result : public cppunit::test::Fixture {
  using Ancestor = cppunit::test::Fixture;
public:
  auto test_constructor() -> void;
  auto test_destructor() -> void;
  auto test_ok_good() -> void;
  auto test_ok_fail() -> void;
  auto test_check_good() -> void;
  auto test_check_fail() -> void;
  auto test_value_consty() -> void;
  auto test_value_muting() -> void;
  auto test_value_forward() -> void;
  auto test_vv_consty() -> void;
  auto test_vv_muting() -> void;
  auto test_vv_forward() -> void;
  auto test_getvalue_consty() -> void;
  auto test_getvalue_muting() -> void;
  auto test_getvalue_forward() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import json.Reader
#import tests.unit.generator.Readerlike

auto tests::unit::reader::Result::test_constructor() -> void {
  ::json::reader::Result r;
  CPPUNIT_ASSERT(ok(r));
  CPPUNIT_ASSERT(value(r).isNull());
}

auto tests::unit::reader::Result::test_destructor() -> void {
  unsigned const LIMIT = 100;
  for (unsigned i(0), e(LIMIT); e != i; ++i) {
    generator::Readerlike generate;
    ::json::reader::Result r = generate();
    CPPUNIT_ASSERT(ok(r));
    CPPUNIT_ASSERT(!value(r).isNull());
  }
}

#import json.Value
auto tests::unit::reader::Result::test_ok_good() -> void {
  generator::Readerlike generate;
  ::json::reader::Result r = generate(true);
  CPPUNIT_ASSERT(ok(r));
  CPPUNIT_ASSERT(!value(r).isNull());
}
auto tests::unit::reader::Result::test_ok_fail() -> void {
  generator::Readerlike generate;
  ::json::reader::Result r = generate(false);
  CPPUNIT_ASSERT(!ok(r));
  CPPUNIT_ASSERT(value(r).isNull());
}
auto tests::unit::reader::Result::test_check_good() -> void {
  try {
    generator::Readerlike generate;
    ::json::reader::Result r = generate();
    CPPUNIT_ASSERT(ok(r));
    CPPUNIT_ASSERT(!value(r).isNull());
    check(r, "this not fail");
    CPPUNIT_ASSERT(true);
  } catch (json::exception::Generic const &) {
    CPPUNIT_ASSERT(false);
  }
}
auto tests::unit::reader::Result::test_check_fail() -> void {
  try {
    generator::Readerlike generate;
    ::json::reader::Result r = generate(false);
    CPPUNIT_ASSERT(!ok(r));
    CPPUNIT_ASSERT(value(r).isNull());
    check(r, "this will fail");
    CPPUNIT_ASSERT(false);
  } catch (json::exception::Generic const &) {
    CPPUNIT_ASSERT(true);
  }
}
auto tests::unit::reader::Result::test_value_consty() -> void {
  ::json::reader::Result r; // <------- nothing generated
  CPPUNIT_ASSERT(ok(r));
  auto reval = value(r);
  CPPUNIT_ASSERT(reval.isNull());
}
auto tests::unit::reader::Result::test_value_muting() -> void {
  generator::Readerlike generate;
  ::json::reader::Result r = generate(false); // <----- something unsuccessful is generated
  CPPUNIT_ASSERT(!ok(r));
  auto reval = value(r);
  CPPUNIT_ASSERT(reval.isNull());
}
auto tests::unit::reader::Result::test_value_forward() -> void {
  generator::Readerlike generate;
  ::json::reader::Result r = generate(true); // <----- something successful is generated
  CPPUNIT_ASSERT(ok(r));
  auto reval = value(r);
  CPPUNIT_ASSERT(!reval.isNull());
}
auto tests::unit::reader::Result::test_vv_consty() -> void {
  ::json::reader::Result r; // <------- nothing generated
  CPPUNIT_ASSERT(ok(r));
  auto reval = vv(r);
  CPPUNIT_ASSERT(reval.isNull());
}
auto tests::unit::reader::Result::test_vv_muting() -> void {
  generator::Readerlike generate;
  ::json::reader::Result r = generate(false); // <----- something unsuccessful is generated
  CPPUNIT_ASSERT(!ok(r));
  auto reval = vv(r);
  CPPUNIT_ASSERT(reval.isNull());
}
auto tests::unit::reader::Result::test_vv_forward() -> void {
  generator::Readerlike generate;
  ::json::reader::Result r = generate(true); // <----- something successful is generated
  CPPUNIT_ASSERT(ok(r));
  auto reval = vv(r);
  CPPUNIT_ASSERT(!reval.isNull());
}
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
auto tests::unit::reader::Result::test_getvalue_consty() -> void {
  ::json::reader::Result r; // <------- nothing generated
  CPPUNIT_ASSERT(ok(r));
  auto reval = getvalue(r);
  CPPUNIT_ASSERT(reval.isNull());
}
auto tests::unit::reader::Result::test_getvalue_muting() -> void {
  generator::Readerlike generate;
  ::json::reader::Result r = generate(false); // <----- something unsuccessful is generated
  CPPUNIT_ASSERT(!ok(r));
  auto reval = getvalue(r);
  CPPUNIT_ASSERT(reval.isNull());
}
auto tests::unit::reader::Result::test_getvalue_forward() -> void {
  generator::Readerlike generate;
  ::json::reader::Result r = generate(true); // <----- something successful is generated
  CPPUNIT_ASSERT(ok(r));
  auto reval = getvalue(r);
  CPPUNIT_ASSERT(!reval.isNull());
}
#pragma GCC diagnostic pop
#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::reader::Result::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream series("Result");
  series << call("constructor", &Result::test_constructor)
         << call("destructor", &Result::test_destructor)
    ;
  {
    Stream oka("ok");
    oka << call("good", &Result::test_ok_good)
        << call("fail", &Result::test_ok_fail)
      ;
    series<<< add>(ok();
  } {
    Stream che("check");
    che << call("good", &Result::test_check_good)
        << call("fail", &Result::test_check_fail)
      ;
    series<<< add>(ch();
  } {
    Stream val("value");
    val << call("consty", &Result::test_value_consty)
        << call("muting", &Result::test_value_muting)
        << call("forward", &Result::test_value_forward)
      ;
    series<<< add>(va();
  } {
    Stream val("vv");
    val << call("consty", &Result::test_vv_consty)
        << call("muting", &Result::test_vv_muting)
        << call("forward", &Result::test_vv_forward)
      ;
    series<<< add>(va();
  } {
    Stream val("getvalue");
    val << call("consty", &Result::test_getvalue_consty)
        << call("muting", &Result::test_getvalue_muting)
        << call("forward", &Result::test_getvalue_forward)
      ;
    series<<< add>(va();
  }
  return series.release();
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#include "json/value.h" // find Json::Exception
namespace json::exception {
  //
  // WATCHOUT - this MUST be a type alias so that (their) inheritance is preserved
  //
  //   --- std::exception --\ (down)
  //                        |
  //                        +-- Generic --\ (a.k.a. json::Exception, a.k.a. json::exception::Generic)
  //                                      |
  //                                      +-- Runtime (does NOT inherit from std::runtime_error)
  //                                      +-- Logic   (does NOT inherit form std::logic_error)
  //                                      |
  //                                      +-- Messaging --\    (descendants only)
  //                                                      |
  //                                                      +-- Cast         (ours)
  //                                                      +-- Syntax       (ours)
  //                                                      +-- ...etc...
  //
  // WATCHOUT - in "standard" jsoncpp, Json::Exception (a.k.a. json::Exception, a.k.a. json::exception::Generic)
  // has a copy constructor that does NOT offer a nothrow guarantee.  This is dangerous and cannot be fixed
  // using inheritance trickery.  It requires a patch; the best we can do is abandon the use of that field.
  //
  // Prefer (something named) nonstd-jsoncpp-1.8.4-5+nothrow.fc29.x86_64 or later.
  //
  // Witness (jsoncpp/value.h>
  //
  //   using json::exception::Generic = Json::Exception;
  //   class Json::Exception : public std::exception {
  //   public:
  //     Exception(string const &); <--------------- NOT marked as explicit (a separate problem)
  //     ~Exception() noexcept override;
  //     auto what() const noexcept -> char const * override
  //   protected:
  //     string msg_; <------------------------------ the copy constructor is not nothrow; AVOID
  //   };
  //
  // Reminder: as such, the Generic exception does not provide storage for the what() element as does std::runtime_error
  //
  using Generic = ::Json::Exception; // MUST be a type alias (can't say that enough).
}
#endiv

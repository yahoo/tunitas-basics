// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace json::exception::aspect {
  //
  // A mixin to provide the storage for messaging.
  // Whereas thrown exception classes must have a copy constructor that offers a nothrow guarantee,
  // any stringy message text storage must be established at construction time and copied via nothrow methods
  //
  // Usage:
  //
  //   see Messaging which unities Generic and What
  //
  class What;
}
#endiv
#divert <hpp>
#import std.string
#import std.shared_ptr
class json::exception::aspect::What {
protected:
  virtual ~What() = default;
public:
  inline explicit What(std::string const &explanation);
  inline explicit What(std::string &&explanation);
  virtual auto what() const noexcept -> char const *; // descendants unify with this
  virtual auto message() const noexcept -> std::string const &; // ibidem.
private:
  std::shared_ptr<std::string> storage;
};
#endiv
#divert <ipp>
#import std.make_shared
#import std.forward
namespace json::exception::aspect {
  What::What(std::string const &explanation)
    : storage{std::make_shared<std::string>(explanation)}
  { }
  What::What(std::string &&explanation)
    : storage{std::make_shared<std::string>(std::forward<std::string>(explanation))}
  { }
}
#endiv
#divert <cpp>
namespace json::exception::aspect {
  auto What::what() const noexcept -> char const * {
    return storage->c_str();
  }
  auto What::message() const noexcept -> std::string const & {
    return *storage;
  }
}
#endiv

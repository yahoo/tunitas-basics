// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace json::exception {
  //
  // A message-laden exception, with all MI unifications resolved.
  // Descendants only.
  //
  // Combines the ancestry in std::exception and Generic with What
  // to provide a stringy message and its exception-guaranteed storage.
  //
  // Usage:
  //
  //   class my::Problem: public json::exception::Messaging {
  //    ...etc...
  //   };
  //
  class Messaging;
}
#endiv
#divert <hpp>
#import std.string
#import json.exception.Generic
#import json.exception.aspect.What
class json::exception::Messaging: public Generic, private aspect::What {
  struct Ancestors {
    using Generic = json::exception::Generic;
    using What = aspect::What;
  };
protected:
  ~Messaging() = default;
public:
  inline explicit Messaging(std::string const &explanation);
  inline explicit Messaging(std::string &&explanation);
  auto what() const noexcept -> char const * override;
  using Ancestors::What::message;
  struct tests { struct Suite; };
  friend struct tests::Suite;
};
#endiv
#divert <ipp>
#import std.forward
namespace json::exception {
  Messaging::Messaging(std::string const &explanation)
    : Ancestors::Generic{""} // [[FIXTHIS]] avoid placing anything but a trivial value in Json::Exception::msg_
    , Ancestors::What(explanation)
  { }
  Messaging::Messaging(std::string &&explanation)
    : Ancestors::Generic{""} // [[FIXTHIS]] avoid placing anything but a trivial value in Json::Exception::msg_
    , Ancestors::What(std::forward<std::string>(explanation))
  { }
}
#endiv
#divert <cpp>
namespace json::exception {
  auto Messaging::what() const noexcept -> char const * {
    return Ancestors::What::what();
  }
}
#endiv


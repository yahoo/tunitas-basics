// -*- c++ -*- but in the SCOLD stylings
#divert <hpp>
#import json.String
namespace json {
  //
  // This is essentially a constructor call
  // converting "to" a String "from" the ARGUMENT
  //
  // The overload is on the argument, not the return value
  // Therefore, one does not reasonably specify template type arguments to the call
  //
  // no need ---->    auto r = to<char *>(STRING(), "thing")
  // simpler ---->    auto r = to(STRING(), "thing")
  //
  enum class STRING { };
  template<typename ARGUMENT> inline auto to(STRING, ARGUMENT const &) -> String;
  template<typename ARGUMENT> inline auto to(STRING, ARGUMENT &) -> String;
  template<typename ARGUMENT> inline auto to(STRING, ARGUMENT &&) -> String;

  template<typename ITERATOR> inline auto to(STRING, ITERATOR, ITERATOR) -> String;
}
#entail json.to.String.char_pointer
#entail json.to.String.char_array
#entail json.to.String.String
#endiv
#divert <ipp>
template<typename ARGUMENT> auto json::to(STRING, ARGUMENT const &source) -> String {
  return json::String(tag::String(), source);
}

template<typename ARGUMENT> auto json::to(STRING, ARGUMENT &source) -> String {
  ARGUMENT const &reference(source);
  return json::String(tag::String(), reference);
}

#import std.forward
template<typename ARGUMENT> auto json::to(STRING, ARGUMENT &&anon) -> String {
  return json::String(tag::String(), std::forward<ARGUMENT>(anon));
}

#import std.string
template<typename ITERATOR> auto json::to(STRING, ITERATOR start, ITERATOR finish) -> String {
  return json::String(tag::String(), std::string(start, finish));
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.int8_t
#import std.uint8_t
#import std.int16_t
#import std.uint16_t
#import std.int32_t
#import std.uint32_t
#import std.int64_t
#import std.uint64_t
#import std.string
#import std.tuple
#import json.Value

namespace json {
  namespace detail {
    namespace conversion {
      template<typename TYPE> struct traits;
      template<> struct traits<bool>;
      // NO template<> struct traits<char>;
      //
      // Use native types here not the bitwidth types.
      // jsoncpp has its own definitions this and it is shifted from the system (compiler) definition.
      // We expect to run on a 64-bit machine here.
      template<> struct traits<char signed>;
      template<> struct traits<char unsigned>;
      template<> struct traits<int short signed>;
      template<> struct traits<int short unsigned>;
      template<> struct traits<int signed>;
      template<> struct traits<int unsigned>;
      template<> struct traits<int long signed>;
      template<> struct traits<int long unsigned>;
      template<> struct traits<int long long signed>;
      template<> struct traits<int long long unsigned>;
      template<> struct traits<float>;
      template<> struct traits<double>;
      template<> struct traits<std::string>;
      template<typename KEY, typename TYPE> struct traits<std::tuple<KEY, TYPE>>;
      template<> struct traits<json::Value>;
    }
  }
}
#endiv
#divert <hpp>
template<> struct json::detail::conversion::traits<bool> {
    using asType = asBool;
};

template<> struct json::detail::conversion::traits<char signed> {
    using asType = asInt;
};

template<> struct json::detail::conversion::traits<char unsigned> {
    using asType = asUInt;
};

template<> struct json::detail::conversion::traits<int short signed> {
    using asType = asInt;
};

template<> struct json::detail::conversion::traits<int short unsigned> {
    using asType = asUInt;
};

template<> struct json::detail::conversion::traits<int signed> {
    using asType = asInt;
};

template<> struct json::detail::conversion::traits<int unsigned> {
    using asType = asUInt;
};

// whereas normal JSON is only 32-bit
template<> struct json::detail::conversion::traits<int long signed> {
    using asType = asInt64;
};

template<> struct json::detail::conversion::traits<int long unsigned> {
    using asType = asUInt64;
};

template<> struct json::detail::conversion::traits<int long long signed> {
    using asType = asInt64;
};

template<> struct json::detail::conversion::traits<int long long unsigned> {
    using asType = asUInt64;
};

template<> struct json::detail::conversion::traits<float> {
    using asType = asDouble;
};

template<> struct json::detail::conversion::traits<double> {
    using asType = asDouble;
};

template<> struct json::detail::conversion::traits<std::string> {
    using asType = asString;
};

template<typename KEY, typename TYPE> struct json::detail::conversion::traits<std::tuple<KEY, TYPE>> : public traits<TYPE> { };

template<> struct json::detail::conversion::traits<json::Value> {
  using asType = asValue;
};
#endiv

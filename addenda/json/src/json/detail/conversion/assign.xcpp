// -*- c++ -*- in the SCOLD styling that is so popular these days
#divert <hpp>
#import json.Value
#import std.tuple
namespace json {
  namespace detail {
    namespace conversion {
      template<typename TYPE> inline auto assign(asBool, TYPE &lhs, json::Value const &) -> void;
      template<typename TYPE> inline auto assign(asInt, TYPE &lhs, json::Value const &) -> void;
      template<typename TYPE> inline auto assign(asUInt, TYPE &lhs, json::Value const &) -> void;
      // whereas normal JSON is only 32-bit
      template<typename TYPE> inline auto assign(asInt64, TYPE &lhs, json::Value const &) -> void;
      template<typename TYPE> inline auto assign(asUInt64, TYPE &lhs, json::Value const &) -> void;
      template<typename TYPE> inline auto assign(asDouble, TYPE &lhs, json::Value const &) -> void;
      template<typename TYPE> inline auto assign(asValue, TYPE &lhs, json::Value const &) -> void;

      // (maybe) outline and heavy, will stringify even very large aggregate objects
      template<typename TYPE> auto assign(asString, TYPE &lhs, json::Value const &) -> void;
      template<typename KEY, typename TYPE> inline auto assign(asString, std::tuple<KEY, TYPE> &lhs, json::Value const &) -> void;
    }
  }
}
#endiv
#divert <ipp>
template<typename TYPE> auto json::detail::conversion::assign(asBool, TYPE &lhs, json::Value const &rhs) -> void {
    lhs = rhs.asBool();
}

template<typename TYPE> auto json::detail::conversion::assign(asInt, TYPE &lhs, json::Value const &rhs) -> void {
    lhs = rhs.asInt();
}

template<typename TYPE> auto json::detail::conversion::assign(asUInt, TYPE &lhs, json::Value const &rhs) -> void {
    lhs = rhs.asUInt();
}

template<typename TYPE> auto json::detail::conversion::assign(asInt64, TYPE &lhs, json::Value const &rhs) -> void {
    lhs = rhs.asInt64();
}

template<typename TYPE> auto json::detail::conversion::assign(asUInt64, TYPE &lhs, json::Value const &rhs) -> void {
    lhs = rhs.asUInt64();
}

template<typename TYPE> auto json::detail::conversion::assign(asDouble, TYPE &lhs, json::Value const &rhs) -> void {
    lhs = rhs.asDouble();
}

#import std.is_same
template<typename TYPE> auto json::detail::conversion::assign(asValue, TYPE &lhs, json::Value const &rhs) -> void {
  static_assert(std::is_same<TYPE, json::Value>::value, "lhs is not a json::Value");
  lhs = rhs;
}

#import std.move
#import std.tuple
template<typename KEY, typename TYPE> auto json::detail::conversion::assign(asString, std::tuple<KEY, TYPE> &lhs, json::Value const &rhs) -> void {
  std::string tmp;
  assign(asString(), tmp, rhs);
  lhs = std::tuple<KEY, TYPE>(KEY(), std::move(tmp));
}
#endiv
#divert <tpp>
#import json.writer.Compact
#import json.value.constants
template<typename TYPE> auto json::detail::conversion::assign(asString, TYPE &lhs, json::Value const &rhs) -> void {
  // WATCHOUT - you cannot call asString on OBJECT- (Value::objectValue) or ARRAY- (Value::ArrayValue) typed values
  std::string stringy;
  switch (rhs.type()) {
  case json::value::ARRAY:
  case json::value::OBJECT:
    {
      // WATCHOUT - this can be very (very) big
      json::writer::Compact c;
      lhs = c.write(rhs);
    }
    break;
  default:
    lhs = rhs.asString();
    break;
  }
}
#endiv

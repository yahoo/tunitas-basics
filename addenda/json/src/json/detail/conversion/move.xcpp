// -*- c++ -*- in the SCOLD styling that is so popular these days
#divert <hpp>
#import json.Value
#import std.tuple
namespace json {
  namespace detail {
    namespace conversion {
      // does an "assign" because they are AS indicates a base type (null, boolean, integer, real, etc.)
      template<typename AS, typename TYPE> inline auto move(AS, TYPE &lhs, Value &rhs) -> void;
      template<typename AS, typename TYPE> inline auto move(AS, TYPE &lhs, Value &&) -> void;
      // actually does move rhs into lhs
      inline auto move(asValue, Value &lhs, Value &rhs) -> void;
      inline auto move(asValue, Value &lhs, Value &&) -> void;
    }
  }
}
#endiv
#divert <ipp>
#import json.detail.conversion.assign
template<typename AS, typename TYPE> auto json::detail::conversion::move(AS as, TYPE &lhs, Value &rhs) -> void {
  // for the base types, "move" is the same as "assign"
  assign(as, lhs, rhs);
}

template<typename AS, typename TYPE> auto json::detail::conversion::move(AS as, TYPE &lhs, Value &&anon) -> void {
  // for the base types, "move" is the same as "assign"
  Value const &crhs(anon);
  assign(as, lhs, crhs);
}

#import std.move
auto json::detail::conversion::move(asValue, Value &lhs, Value &rhs) -> void {
  lhs = std::move(rhs);
}

auto json::detail::conversion::move(asValue, Value &lhs, Value &&anon) -> void {
  lhs = std::forward<Value>(anon);
}
#endiv

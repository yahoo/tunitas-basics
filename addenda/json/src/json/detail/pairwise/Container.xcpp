// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace json {
  namespace detail {
    namespace pairwise {
      // JSONVALUE is 'json::Value'
      // JSONVALUE is 'json::Value const'
      template<typename JSONVALUE, typename KEY, typename MAPPED> class Container;
    }
  }
}
#endiv
#divert <hpp>
#import json.detail.pairwise.traits.Iterator
#import json.detail.pairwise.Iterator
#import json.Value
#import std.pair
#import std.is_same

template<typename JSONVALUE, typename KEY, typename VALUE> class json::detail::pairwise::Container {
public:
    static_assert((std::is_same<json::Value, JSONVALUE>::value &&
                   std::is_same<json::Value const, JSONVALUE>::value), "JSONVALUE must be 'json::Value' or 'json::Value const'");
    using json_value_type = JSONVALUE;
    using key_type = KEY;
    using mapped_type = VALUE;
    // Similar to std::map<KEY, VALUE> we have { key_type, mapped_type, value_type }
    using value_type = std::pair<key_type, mapped_type>;
    using subject_type = JSONVALUE;
    inline explicit Container(subject_type &);
    // The magic happens in Iterator<subject_type> via traits::Iterator<subject_type>
    using const_iterator = Iterator<typename traits::Iterator<subject_type>::const_iterator, value_type>;
    inline auto begin() const -> const_iterator;
    inline auto end() const -> const_iterator;
    // May wind up to be the same as const_iterator if subject_type is 'json::Value const'
    using iterator = Iterator<typename traits::Iterator<subject_type>::iterator, value_type>;
    inline auto begin() -> iterator;
    inline auto end() -> iterator;
private:
    subject_type &subject;
public:
    struct tests { struct Suite; };
    friend struct tests::Suite;;
};
#endiv
#divert <ipp>
#import std.runtime_error

template<typename JSONVALUE, typename KEY, typename MAPPED> json::detail::pairwise::Container<JSONVALUE, KEY, MAPPED>::Container(subject_type &the_subject)
  : subject(the_subject) {
  if (!subject.isObject()) {
    // FIXME ... throw one of ours - exception::NotAnObject or such
    throw std::runtime_error("not a JSON object");
  }
}

template<typename JSONVALUE, typename KEY, typename MAPPED> auto json::detail::pairwise::Container<JSONVALUE, KEY, MAPPED>::begin() const -> const_iterator {
  return const_iterator(const_cast<subject_type const &>(subject).begin());
}

template<typename JSONVALUE, typename KEY, typename MAPPED> auto json::detail::pairwise::Container<JSONVALUE, KEY, MAPPED>::end() const -> const_iterator {
  return const_iterator(const_cast<subject_type const &>(subject).end());
}

template<typename JSONVALUE, typename KEY, typename MAPPED> auto json::detail::pairwise::Container<JSONVALUE, KEY, MAPPED>::begin() -> iterator {
  return iterator(subject.begin());
}

template<typename JSONVALUE, typename KEY, typename MAPPED> auto json::detail::pairwise::Container<JSONVALUE, KEY, MAPPED>::end() -> iterator {
  return iterator(subject.end());
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#forward json.detail.as.CharArray
#import json.Value
namespace json {
  namespace detail {
    namespace as {
      struct CharArray<json::Value>;
    }
  }
}
#endiv
#divert <hpp>
template<> struct json::detail::as::CharArray<json::Value> {
  template<std::size_t N> inline auto operator()(char const (&)[N]) -> json::Value;
};
#endiv
#divert <ipp>
#import std.move
#import json.value.constants
template<std::size_t N> auto json::detail::as::CharArray<json::Value>::operator()(char const (&array)[N]) -> json::Value {
  // DO NOT use ---> std::string cooked(&array[0], &array[N])
  // as that adds the \0 at the end fo the array right into the string.
  std::string rough(&array[0]);
  // Construct the container the appropriate type.
  json::Value polished(json::value::STRING);
  // Assign the value into the container.
  polished = rough;
  return std::move(polished);
}
#endiv

// -*- c++ -*- but in the SCOLD stylings
#divert <hpp>
#import json.Features
#import json.failure // Throwing & Returning
#import json.reader.Result
#import json.String
#import json.Value
namespace json {
  // how -> Features::strictModel() means only objects & arrays, no comments
  // how -> Features::all() means any JSON object, and comments
  auto parse(failure::Throwing, String const &, Features how = json::Features::all()) -> Value;
  inline auto parse(failure::Returning, String const &, Features how = json::Features::all()) -> reader::Result;
}
#endiv
#divert <ipp>
#import json.Reader
auto json::parse(failure::Returning, String const &syntax, Features how) -> reader::Result {
  Reader eader(how);
  bool const collectComments = false; // ignored in strictMode anyway
  return eader(syntax, collectComments);
}
#endiv
#divert <cpp>
#import json.exception.Syntax
#import json.failure.constants
#import json.Reader
#import json.reader.Result
#import std.exception
auto json::parse(failure::Throwing, String const &syntax, Features how) -> Value {
  try {
    Reader eader(how);
    bool const collectComments = false; // ignored in strictMode anyway
    auto parsed = eader(syntax, collectComments);
    if ( ! ok(parsed) ) {
      throw exception::Syntax("syntax error", syntax);
    }
    return vv(parsed);
  } catch (exception::Syntax const &) {
    throw;
  } catch (exception::Generic const &e) {
    throw exception::Syntax(e.what(), syntax);
  } catch (std::exception const &e) {
    throw exception::Syntax(e.what(), syntax);
  }
}
#endiv

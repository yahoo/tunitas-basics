// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace json::reader {
  //
  // The Simple Reader
  // Like the (now deprecated) json::Reader, but ... the same.
  //
  // Tricky ... this is somewhat of a shim between the API of jsoncpp-1.6 and jsoncpp-1.8.
  //
  // Usage:
  //
  //   Features features = ...
  //   reader::Simple simple(features);
  //   bool const collectComments = false;
  //   std::string some_json_syntax = ...somehow...
  //   Value recovered;
  //   bool parsed = simple.parse(some_json_syntax, recovered, collectComments);
  //   if (parsed) {
  //     ...use recovered...
  //   }
  //
  class Simple;
}
#endiv
#divert <hpp>
#import json.Features
#import json.Value
#import json.reader.builder.Char
#import std.istream
#import std.string
class json::reader::Simple {
public:
  inline explicit Simple(Features = Features());
  using Iterator = char const *;
  inline auto parse(Iterator start, Iterator finish, [[inout]] Value &, bool collectComments = true) const -> bool;
  inline auto parse(std::string const &, [[inout]] Value &, bool collectComments = true) const -> bool;
  inline auto parse(std::istream &, [[inout]] Value &, bool collectComments = true) const -> bool;
  inline auto getFormattedErrorMessages() const -> std::string const &;
protected:
  Features features;
  mutable std::string saved_error_messages;
private:
  inline auto embue(builder::Char &, bool collectComments) const -> void;
};
#endiv
#divert <ipp>
json::reader::Simple::Simple(Features features)
  : features{features} { }
auto json::reader::Simple::getFormattedErrorMessages() const -> std::string const & {
  return saved_error_messages;
}
#import json.reader.Char
#import std.unique_ptr
auto json::reader::Simple::parse(Iterator start, Iterator finish, Value &fill, bool collectComments) const -> bool {
  // This is very Java-flavored.
  // [[FIXTHIS]] shouldn't there be something to cache the specification & the builder?
  reader::builder::Char bob;
  embue(bob, collectComments);
  std::unique_ptr<reader::Char> r(bob.newCharReader());
  std::string ignore_errors;
  return r->parse(start, finish, &fill, &ignore_errors);
}
auto json::reader::Simple::parse(std::string const &syntax, Value &fill, bool collectComments) const -> bool {
  reader::builder::Char bob;
  embue(bob, collectComments);
  std::unique_ptr<reader::Char> r(bob.newCharReader());
  auto const start = syntax.data();
  auto const finish = start + syntax.size();
  saved_error_messages.clear();
  return r->parse(start, finish, &fill, &saved_error_messages);
}
#import std.istream_iterator
#import std.back_insert_iterator
#import std.copy
auto json::reader::Simple::parse(std::istream &inbound, Value &fill, bool collectComments) const -> bool {
  auto const start = std::istream_iterator<char>{inbound};
  auto const finish = std::istream_iterator<char>{};
  std::string slurped;
  auto const sink = std::back_insert_iterator<std::string>{slurped};
  std::copy(start, finish, sink);
  return parse(slurped, fill, collectComments);
}
auto json::reader::Simple::embue(builder::Char &bob, bool collectComments) const -> void {
  // Copy from the variables of this->features into the string-keyed map of the Builder bob.
  // WATCHOUT - the builder throws if the values are not appropriate syntax (for a bool)
  auto const truthiness = true;
  auto const falsity = false;
  bob["allowComments"] = features.allowComments_ ? truthiness : falsity;
  bob["collectComments"] = collectComments ? truthiness : falsity;
  bob["strictRoot"] = features.strictRoot_ ? truthiness : falsity;
  bob["allowDroppedNullPlaceholders"] = features.allowDroppedNullPlaceholders_ ? truthiness : falsity;
  bob["allowNumericKeys"] = features.allowNumericKeys_ ? truthiness : falsity;
}
#endiv

// -*- c++ -*- but in the SCOLD stylings
#divert <hpp>
#import json.Value
namespace json {
  template<typename RESULT> inline auto as(Value const &) -> RESULT;
  template<typename RESULT> inline auto as(Value &&) -> RESULT;
}
// Ensure that there are variants of every possible type in the json::Value::Value(ARGUMENT) pantheon
// We need to ensure that as<...>(Value const &) does not become a latent constructor call for json::Value
// See the commentariat in disalloed.
#entail json.as.RESULT.disallowed
#entail json.as.String.Value
#entail json.as.Value.Value
#entail json.as.string.Value
#endiv
#divert <ipp>
#import json.detail.conversion.traits
#import json.detail.conversion.assign
#import json.exception.Cast
#import std.forward
// Whereas the core jsoncpp throws unadorned std::runtime_error
#import std.runtime_error
#import std.type_info

template<typename RESULT> auto json::as(Value const &value) -> RESULT {
  using namespace detail::conversion;
  auto asif = typename traits<RESULT>::asType();
  try {
    RESULT result;
    assign(asif, result, value);
    return result;
  } catch (std::runtime_error const &e) {
    throw json::exception::Cast(e.what(), typeid(RESULT));
  }
}

#import json.detail.conversion.traits
#import json.detail.conversion.move
#import std.forward
#import std.move
template<typename RESULT> auto json::as(Value &&anon) -> RESULT {
  using namespace detail::conversion;
  auto asif = typename traits<RESULT>::asType();
  try {
    RESULT result;
    move(asif, result, std::forward<Value>(anon));
    return std::move(result);
  } catch (std::runtime_error const &e) {
    throw json::exception::Cast(e.what(), typeid(RESULT));
  }
}
#endiv

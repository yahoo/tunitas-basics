// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace json {
  namespace detail { }
  namespace failure { }
  namespace tag { }
}
//
// NASTY!    the constructors for json::Value do not support all three large integer rypes
//
//     32-bit  -> Int, Uint        'int'
//     64-bit  -> Int64, Uint64    'int long long'
//
// Yet on 64-bit machines
//     std::int64_t is 'int signed long'
//     std::uint64_t is 'int unsigned long'
//
// To Wit:
//
//     Value(Int value);
//     Value(UInt value);
//     #if defined(JSON_HAS_INT64)
//     Value(Int64 value);
//     Value(UInt64 value);
//     #endif // if defined(JSON_HAS_INT64)
//
// So without reference to the typedef systems, we remediate, we provide all three levels here.
// There is no need for 'int short' variants because they are unambiguously promoted to 'int'
//
#include "json/config.h"
// observed circa jsoncpp-1.7.2
#ifdef JSON_NO_INT64
#error must not have JSON_NO_INT64 enabled, 64-bits is required nowadays
#endif
#ifndef JSON_HAS_INT64
#error must have JSON_HAS_INT64 enabled, 64-bits is required nowadays
#endif
#import std.int32_t
#import std.uint32_t
#import std.int64_t
#import std.uint64_t
namespace json {
  using int32 = ::Json::Int;
  using uint32 = ::Json::UInt;
  using int64 = ::Json::Int64;
  using uint64 = ::Json::UInt64;
}
#import json.failure // [[deprecating]] this was once entailed herein; so we keep it so
#endiv
#divert <hpp>
#import json.failure.constants // [[deprecating]] ibidem.
#endiv


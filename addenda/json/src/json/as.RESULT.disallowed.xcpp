// -*- c++ -*- but in the SCOLD stylings
#divert <hpp>
#import std.size_t
#import std.string
#import json.Value
namespace json {
  //
  // Ensure that the implicit type conversion constructor for json::Value(...)
  // is never available as an argument to Value.
  //
  // These variants are all the reasonable potential overloads of json::Value
  
  template<typename RESULT> inline auto as(::Json::ValueType) -> RESULT;
  template<typename RESULT> inline auto as(bool) -> RESULT;
  template<typename RESULT> inline auto as(char) -> RESULT;
  template<typename RESULT> inline auto as(int short signed) -> RESULT;
  template<typename RESULT> inline auto as(int short unsigned) -> RESULT;
  template<typename RESULT> inline auto as(int signed) -> RESULT;
  template<typename RESULT> inline auto as(int unsigned) -> RESULT;
  template<typename RESULT> inline auto as(int long signed) -> RESULT;
  template<typename RESULT> inline auto as(int long unsigned) -> RESULT;
  template<typename RESULT> inline auto as(int long long signed) -> RESULT;
  template<typename RESULT> inline auto as(int long long unsigned) -> RESULT;
  template<typename RESULT> inline auto as(char const *) -> RESULT;
  template<typename RESULT, std::size_t N> inline auto as(char const (&)[N]) -> RESULT;
}
#entail json.as.RESULT.string
#endiv
#divert <ipp>
template<typename RESULT> auto json::as(::Json::ValueType) -> RESULT {
  static_assert(0 == sizeof (RESULT) && 0 != sizeof (RESULT), "as<...>(...) is ambiguous with json::Value(::Json::ValueType), use to<...>(...) instead");
  return RESULT();
}

template<typename RESULT> auto json::as(bool) -> RESULT {
  static_assert(0 == sizeof (RESULT) && 0 != sizeof (RESULT), "as<...>(...) is ambiguous with json::Value(bool), use to<...>(...) instead");
  return RESULT();
}

template<typename RESULT> auto json::as(char) -> RESULT {
  static_assert(0 == sizeof (RESULT) && 0 != sizeof (RESULT), "as<...>(...) is ambiguous with json::Value(char), use to<...>(...) instead");
  return RESULT();
}

template<typename RESULT> auto json::as(int short signed) -> RESULT {
  static_assert(0 == sizeof (RESULT) && 0 != sizeof (RESULT), "as<...>(...) is ambiguous with json::Value(int short signed), use to<...>(...) instead");
  return RESULT();
}

template<typename RESULT> auto json::as(int short unsigned) -> RESULT {
  static_assert(0 == sizeof (RESULT) && 0 != sizeof (RESULT), "as<...>(...) is ambiguous with json::Value(int short unsigned), use to<...>(...) instead");
  return RESULT();
}

template<typename RESULT> auto json::as(int signed) -> RESULT {
  static_assert(0 == sizeof (RESULT) && 0 != sizeof (RESULT), "as<...>(...) is ambiguous with json::Value(int signed), use to<...>(...) instead");
  return RESULT();
}

template<typename RESULT> auto json::as(int unsigned) -> RESULT {
  static_assert(0 == sizeof (RESULT) && 0 != sizeof (RESULT), "as<...>(...) is ambiguous with json::Value(int unsigned), use to<...>(...) instead");
  return RESULT();
}

template<typename RESULT> auto json::as(int long signed) -> RESULT {
  static_assert(0 == sizeof (RESULT) && 0 != sizeof (RESULT), "as<...>(...) is ambiguous with json::Value(int long signed), use to<...>(...) instead");
  return RESULT();
}

template<typename RESULT> auto json::as(int long unsigned) -> RESULT {
  static_assert(0 == sizeof (RESULT) && 0 != sizeof (RESULT), "as<...>(...) is ambiguous with json::Value(int long unsigned), use to<...>(...) instead");
  return RESULT();
}

template<typename RESULT> inline auto json::as(int long long signed) -> RESULT {
  static_assert(0 == sizeof (RESULT) && 0 != sizeof (RESULT), "as<...>(...) is ambiguous with json::Value(int long long signed), use to<...>(...) instead");
  return RESULT();
}

template<typename RESULT> auto json::as(int long long unsigned) -> RESULT {
  static_assert(0 == sizeof (RESULT) && 0 != sizeof (RESULT), "as<...>(...) is ambiguous with json::Value(int long long unsigned), use to<...>(...) instead");
  return RESULT();
}

template<typename RESULT> auto json::as(char const *) -> RESULT {
  static_assert(0 == sizeof (RESULT) && 0 != sizeof (RESULT), "as<...>(...) is ambiguous with json::Value(char const *), use to<...>(...) instead");
  return RESULT();
}

template<typename RESULT, std::size_t N> auto json::as(char const (&)[N]) -> RESULT {
  static_assert(0 == sizeof (RESULT) && 0 != sizeof (RESULT), "as<...>(...) is ambiguous with json::Value(char const (&)[N]), use to<...>(...) instead");
  return RESULT();
}
#endiv

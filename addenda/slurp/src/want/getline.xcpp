// -*- c++ -*- and wrapped in the SCOLD stylings
#divert <hpp>
#import std.getline
#import std.vector
#import std.basic_istream
namespace want {
  // std::getline for std::string
  using std::getline;

  // and also an overload for std::vector<char>
  template<typename CHAR, typename TRAITS, typename ALLOC> inline auto getline(std::basic_istream<CHAR, TRAITS> &, std::vector<CHAR, ALLOC> &, CHAR delimiter) -> std::basic_istream<CHAR, TRAITS> &;
}
#endiv
#divert <ipp>
template<typename CHAR, typename TRAITS, typename ALLOC> inline auto want::getline(std::basic_istream<CHAR, TRAITS> &in, std::vector<CHAR, ALLOC> &fill, CHAR delimiter) -> std::basic_istream<CHAR, TRAITS> & {
  fill.clear();
  CHAR c;
  // WATCHOUT - we require that noskipws be in place because the delimiter may well be '\n'.
  while (in.get(c)) {
    if (delimiter == c) {
      break;
    } else {
      fill.push_back(c);
    }
  }
  if (in.eof() && !fill.empty()) {
    // We hit eof, but we already found some content.
    // Undo the eof and return success.
    // Allow eof to be rediscovered next time.
    // but if failbit or badbit are already set ... they remain set.
    in.clear(std::ios::eofbit);
  }
  return in;
}
#endiv

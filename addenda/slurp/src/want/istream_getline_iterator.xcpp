// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.char_traits
#import std.ptrdiff_t
namespace want {
  //
  // like std::istream_iterator<TYPE, CHAR, TRAITS, DISTANCE>
  // except get newline-delimited records, in a std:;string
  //
  // The expectation that LINE will be std::string or std::vector<char>
  // The record separator newline character is not within the line; it is implcit.
  //
  template<typename LINE, typename CHAR = char, typename TRAITS = std::char_traits<CHAR>, typename DISTANCE = ptrdiff_t> class istream_getline_iterator;
}
#endiv
#divert <hpp>
namespace want {
  template<typename LINE, typename CHAR, typename TRAITS, typename DISTANCE> inline auto operator==(istream_getline_iterator<LINE, CHAR, TRAITS, DISTANCE> const &, istream_getline_iterator<LINE, CHAR, TRAITS, DISTANCE> const &) -> bool;
  template<typename LINE, typename CHAR, typename TRAITS, typename DISTANCE> inline auto operator!=(istream_getline_iterator<LINE, CHAR, TRAITS, DISTANCE> const &, istream_getline_iterator<LINE, CHAR, TRAITS, DISTANCE> const &) -> bool;
}
#import std.input_iterator_tag
#import std.iterator
#import std.basic_istream
template<typename LINE, typename CHAR, typename TRAITS, typename DISTANCE> class want::istream_getline_iterator : public std::iterator<std::input_iterator_tag, LINE, DISTANCE, LINE const *, LINE const &> {
  using ancestor = std::iterator<std::input_iterator_tag, LINE, DISTANCE, LINE const *, LINE const &>;
public:
  using value_type = LINE;
  using char_type = CHAR;
  using traits_type = TRAITS;
  using istream_type = std::basic_istream<CHAR, TRAITS>;
  inline istream_getline_iterator();
  inline explicit istream_getline_iterator(istream_type &);
  // assignment, copy & move are OK
  inline auto operator++() -> istream_getline_iterator &;
  inline auto operator++(int) -> istream_getline_iterator;
  // copy out
  inline auto operator*() const -> typename ancestor::reference;
  inline auto operator->() const -> typename ancestor::pointer;
  // move out
  inline auto operator*() -> typename ancestor::value_type &&;
protected:
  istream_type *in;
  LINE value;
  auto read() -> void;
  friend auto operator== <>(istream_getline_iterator const &, istream_getline_iterator const &) -> bool;
};
#endiv
#divert <ipp>

template<typename LINE, typename CHAR, typename TRAITS, typename DISTANCE> auto want::operator==(istream_getline_iterator<LINE, CHAR, TRAITS, DISTANCE> const &a, istream_getline_iterator<LINE, CHAR, TRAITS, DISTANCE> const &b) -> bool {
  // see the companion code in istream_getline_operator::operator++
  return a.in == b.in;
}

template<typename LINE, typename CHAR, typename TRAITS, typename DISTANCE> auto want::operator!=(istream_getline_iterator<LINE, CHAR, TRAITS, DISTANCE> const &a, istream_getline_iterator<LINE, CHAR, TRAITS, DISTANCE> const &b) -> bool {
  return !operator==(a, b);
}

template<typename LINE, typename CHAR, typename TRAITS, typename DISTANCE> want::istream_getline_iterator<LINE, CHAR, TRAITS, DISTANCE>::istream_getline_iterator()
  : ancestor()
  , in(nullptr)
  , value() {
  ;
}

template<typename LINE, typename CHAR, typename TRAITS, typename DISTANCE> want::istream_getline_iterator<LINE, CHAR, TRAITS, DISTANCE>::istream_getline_iterator(istream_type &arg_in)
  : ancestor()
  , in(&arg_in)
  , value() {
  read();
}

#import want.getline
template<typename LINE, typename CHAR, typename TRAITS, typename DISTANCE> auto want::istream_getline_iterator<LINE, CHAR, TRAITS, DISTANCE>::operator++() -> istream_getline_iterator & {
  read();
  return *this;
}

template<typename LINE, typename CHAR, typename TRAITS, typename DISTANCE> auto want::istream_getline_iterator<LINE, CHAR, TRAITS, DISTANCE>::operator++(int) -> istream_getline_iterator {
  istream_getline_iterator old(*this);
  operator++();
  return old;
}

template<typename LINE, typename CHAR, typename TRAITS, typename DISTANCE> auto want::istream_getline_iterator<LINE, CHAR, TRAITS, DISTANCE>::operator*() const -> typename ancestor::reference {
  return value;
}

template<typename LINE, typename CHAR, typename TRAITS, typename DISTANCE> auto want::istream_getline_iterator<LINE, CHAR, TRAITS, DISTANCE>::operator->() const -> typename ancestor::pointer {
  return &value;
}

#import std.move
template<typename LINE, typename CHAR, typename TRAITS, typename DISTANCE> auto want::istream_getline_iterator<LINE, CHAR, TRAITS, DISTANCE>::operator*() -> typename ancestor::value_type && {
  return std::move(value);
}

template<typename LINE, typename CHAR, typename TRAITS, typename DISTANCE> auto want::istream_getline_iterator<LINE, CHAR, TRAITS, DISTANCE>::read() -> void {
  if (in) {
    // FIXME - This is substantially the only difference between want::istream_getline_iterator and std::istream_iterator
    if (!want::getline(*in, value, '\n')) {
      value.clear();
      in = nullptr; // this signal is received by operator==; it ensures that a valid iterator ie never equal to an "end" or invalid one.
    }
  }
}
#endiv

// -*- c++ -*- and wrapped in the SCOLD stylings
#divert <hpp>
#import std.reverse_iterator
namespace want {
  template<typename CONTAINER> inline auto rend(CONTAINER &c) -> std::reverse_iterator<decltype (c.begin())>;
  template<typename CONTAINER> inline auto rend(CONTAINER const &c) -> std::reverse_iterator<decltype (c.begin())>;
  template<typename TYPE, size_t N> inline auto rend(TYPE (&)[N]) -> TYPE *;
}
#endiv
#divert <ipp>
template<typename CONTAINER> auto want::rend(CONTAINER &container) -> std::reverse_iterator<decltype(container.begin())> {
  using result_type = std::reverse_iterator<decltype(container.begin())> ;
  return result_type(container.begin());
}

template<typename CONTAINER> auto want::rend(CONTAINER const &container) -> std::reverse_iterator<decltype(container.begin())> {
  using result_type = std::reverse_iterator<decltype(container.begin())> ;
  return result_type(container.begin());
}

template<typename TYPE, size_t N> auto want::rend(TYPE (&array)[N]) -> TYPE * {
  return &array[0];
}
#endiv

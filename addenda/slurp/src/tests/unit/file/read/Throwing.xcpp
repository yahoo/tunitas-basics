// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace file {
      namespace read {
        class Throwing;
      }
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::file::read::Throwing : public cppunit::test::Fixture {
public:
  auto test_slurp_nothing() -> void;
  auto test_slurp_something() -> void;
  auto test_slurp_erroneous() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import slurp.file.read
auto tests::unit::file::read::Throwing::test_slurp_nothing() -> void {
  auto red = ::slurp::file::read<std::string>("/dev/null");
  CPPUNIT_ASSERT(red.empty());
}

auto tests::unit::file::read::Throwing::test_slurp_something() -> void {
  auto red = ::slurp::file::read<std::string>("/etc/group");
  CPPUNIT_ASSERT(!red.empty());
}

auto tests::unit::file::read::Throwing::test_slurp_erroneous() -> void {
  try {
    auto red = ::slurp::file::read<std::string>("/etc/that/does/not/exist/at/all");
    CPPUNIT_ASSERT(false);
  } catch (::slurp::Failure const &) {
    // this was supposed to have thrown
    CPPUNIT_ASSERT(true);
  }
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::file::read::Throwing::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("Throwing");
  s << call("nothing", &Throwing::test_slurp_something)
    << call("something", &Throwing::test_slurp_something)
    << call("erroneous", &Throwing::test_slurp_erroneous)
    ;
  return s.release();
}
#endiv

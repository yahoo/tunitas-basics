// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace file {
      class Fixture;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::file::Fixture : public cppunit::test::Fixture {
public:
  auto test_read_string() -> void;
  auto test_read_vector() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.string
#import slurp.file.read

auto tests::unit::file::Fixture::test_read_string() -> void {
  // just need a file that is guaranteed to exist (and isn't too dubiously sensitive)
  auto red = ::slurp::file::read<std::string>("/etc/group");
  CPPUNIT_ASSERT(10 < red.size()); // at least ten bytes in there
}

#import std.nothrow
auto tests::unit::file::Fixture::test_read_vector() -> void {
  // just need a file that is guaranteed to exist (and isn't too dubiously sensitive)
  auto red = ::slurp::file::read<std::vector<std::string>>(std::nothrow, "/etc/group");
  CPPUNIT_ASSERT(ok(red));
  CPPUNIT_ASSERT(0 <= error_num(red));
  auto const &entries = value(red);
  CPPUNIT_ASSERT(5 < entries.size()); // at least five lines
}

#import tests.unit.file.configuration.Fixture
#import tests.unit.file.read.Fixture
#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::file::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("file");
  s << call("read-string-usage", &Fixture::test_read_string)
    << call("read-vector-usage", &Fixture::test_read_vector)
    << add<configuration::Fixture>()
    << add<read::Fixture>()
    ;
  return s.release();
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::slurp::file { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::slurp::file::Fixture : public cppunit::test::Fixture {
public:
  auto test_usage_slurp_nothing() -> void;
  auto test_usage_slurp_something() -> void;
  auto test_usage_slurp_returnable() -> void;
  auto test_usage_slurp_throwable() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.string
#import slurp.file.read
auto tests::unit::slurp::file::Fixture::test_usage_slurp_nothing() -> void {
  auto body = ::slurp::file::read<std::string>("/dev/null");
  CPPUNIT_ASSERT(body.empty());
}
auto tests::unit::slurp::file::Fixture::test_usage_slurp_something() -> void {
  auto body = ::slurp::file::read<std::string>("/etc/group");
  CPPUNIT_ASSERT(!body.empty());
}
#import slurp.Failure
auto tests::unit::slurp::file::Fixture::test_usage_slurp_throwable() -> void {
  try {
    auto body = ::slurp::file::read<std::string>("/does/not/exist/at/all/will/throw");
    CPPUNIT_ASSERT(false);
  } catch (::slurp::Failure const &) {
    CPPUNIT_ASSERT(true);
  }
}
#import std.nothrow
auto tests::unit::slurp::file::Fixture::test_usage_slurp_returnable() -> void {
  try {
    auto body = ::slurp::file::read<std::string>(std::nothrow, "/does/not/exist/at/all/will/throw");
    CPPUNIT_ASSERT(true);
  } catch (::slurp::Failure const &) {
    // This should not have thrown
    CPPUNIT_ASSERT(false);
  }
}
#import std.byte
#import tests.unit.slurp.file.istream.Iterator
#import tests.unit.slurp.file.read.Throwing
#import tests.unit.slurp.file.read.Returning
#import tests.unit.slurp.file.named.Fixture
#import rigging.suite.io
auto tests::unit::slurp::file::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("file");
  {
    Stream use("usage");
    {
      Stream slu("slurp");
      slu << call("nothing", &Fixture::test_usage_slurp_something)
          << call("something", &Fixture::test_usage_slurp_something)
          << call("throwable", &Fixture::test_usage_slurp_throwable)
          << call("returnable", &Fixture::test_usage_slurp_returnable)
        ;
        use << move(slu);
    }
    series << move(use);
  }
  series << add<named::Fixture>()
    ;
  {
    Stream ist("istream");
    namespace rigging = tests::unit::slurp::file::istream;
    namespace subjecting = ::slurp::file::istream;
    ist << add<rigging::Iterator<subjecting::Iterator<char>>>()
        << add<rigging::Iterator<subjecting::Iterator<unsigned char>>>()
        << add<rigging::Iterator<subjecting::Iterator<signed char>>>()
        << add<rigging::Iterator<subjecting::Iterator<std::byte>>>()
        ;
    series << move(ist);
  } {
    Stream slu("slurp");
    {
      Stream thr("throwing");
      thr << add<read::Throwing<char>>()
          << add<read::Throwing<unsigned char>>()
          << add<read::Throwing<signed char>>()
          << add<read::Throwing<std::byte>>()
        ;
      slu << move(thr);
    } {
      Stream ret("returning");
      ret << add<read::Throwing<char>>()
          << add<read::Throwing<unsigned char>>()
          << add<read::Throwing<signed char>>()
          << add<read::Throwing<std::byte>>()
        ;
      slu << move(ret);
    }
    series << move(slu);
  }
  return finalize(series);
}
#endiv

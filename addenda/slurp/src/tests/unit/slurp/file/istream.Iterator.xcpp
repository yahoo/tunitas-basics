// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd.required.Octet
namespace tests::unit::slurp::file::istream {
  template<typename ITERATOR> class Iterator;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import slurp.file.istream.Iterator
template<typename ITERATOR> class tests::unit::slurp::file::istream::Iterator : public cppunit::test::Fixture {
public:
  using Subject = ITERATOR;
  using Octet = typename Subject::value_type;
  auto test_type_traits() -> void;
  auto test_constructor_default() -> void;
  auto test_constructor_stream() -> void;
  auto test_operator_indirect() -> void;
  auto test_operator_increment_pre() -> void;
  auto test_operator_increment_post() -> void;
  auto test_operator_eq() -> void;
  auto test_operator_ne() -> void;
  auto test_simple_idiom() -> void;
  auto test_copy_idiom() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <tpp>
template<typename _> auto tests::unit::slurp::file::istream::Iterator<_>::test_type_traits() -> void {
  using V = typename Subject::value_type;
  using C = typename Subject::char_type;
  using T = typename Subject::traits_type;
  using S = typename Subject::istream_type;
  CPPUNIT_ASSERT(sizeof(V) + sizeof (C) + sizeof (T) + sizeof (S));
}
template<typename _> auto tests::unit::slurp::file::istream::Iterator<_>::test_constructor_default() -> void {
  Subject s, t;
  CPPUNIT_ASSERT(s == t);
}
#import std.istringstream
template<typename _> auto tests::unit::slurp::file::istream::Iterator<_>::test_constructor_stream() -> void {
  std::istringstream in;
  Subject begin{in};
  Subject end{};
  CPPUNIT_ASSERT(begin == end);
}
template<typename _> auto tests::unit::slurp::file::istream::Iterator<_>::test_operator_indirect() -> void {
  std::istringstream in{"A"};
  Subject pos{in};
  auto A = *pos;
  CPPUNIT_ASSERT(Octet('A') == A);  
}
#import std.next
#import std.invalid_argument
template<typename _> auto tests::unit::slurp::file::istream::Iterator<_>::test_operator_increment_pre() -> void {
  std::istringstream in{"ABCD"};
  Subject pos{in};
  {
    // Wherein gcc (GCC) 9.3.1 20200413
    // gets the analysis wrong here and warns about it.
    //     src/tests/unit/slurp/file/istream.Iterator.xcpp:59:8: warning: ‘*((void*)& pos +8)’ may be used uninitialized in this function [-Wmaybe-uninitialized]
    //     |   auto A = *pos;
    // so we belabor the point and ensure that pos is valid (even though it obviously is from the constructor and its upstream)
    if (Subject{} == pos) { throw std::invalid_argument{"unexpectedly empty"}; }
  }
  auto A = *pos;
  auto B = *++pos;
  auto C = *++pos;
  auto D = *++pos;
  CPPUNIT_ASSERT(Octet('A') == A);
  CPPUNIT_ASSERT(Octet('B') == B);
  CPPUNIT_ASSERT(Octet('C') == C);
  CPPUNIT_ASSERT(Octet('D') == D);
  CPPUNIT_ASSERT(Subject{} == std::next(pos));
}
template<typename _> auto tests::unit::slurp::file::istream::Iterator<_>::test_operator_increment_post() -> void {
  std::istringstream in{"ABCD"};
  Subject pos{in};
  auto A = *pos++;
  auto B = *pos++;
  auto C = *pos++;
  auto D = *pos++;
  CPPUNIT_ASSERT(Octet('A') == A);
  CPPUNIT_ASSERT(Octet('B') == B);
  CPPUNIT_ASSERT(Octet('C') == C);
  CPPUNIT_ASSERT(Octet('D') == D);
  CPPUNIT_ASSERT(Subject{} == pos);
}
#import std.next
template<typename _> auto tests::unit::slurp::file::istream::Iterator<_>::test_operator_eq() -> void {
  std::istringstream in{"ABCD"};
  Subject pos0{in};
  Subject pos1 = std::next(pos0);
  Subject pos2 = std::next(pos1);
  Subject end{};
  // Remember, any valid iterator is equal to any other; only "end" is not equal to a valid iterator
  CPPUNIT_ASSERT( ! (pos2 == end) );
  CPPUNIT_ASSERT( ! (pos1 == end) );
  CPPUNIT_ASSERT( ! (pos0 == end) );
}
template<typename _> auto tests::unit::slurp::file::istream::Iterator<_>::test_operator_ne() -> void {
  std::istringstream in{"ABCD"};
  Subject pos0{in};
  Subject pos1 = std::next(pos0);
  Subject pos2 = std::next(pos1);
  Subject end{};
  // Remember, any valid iterator ... ibidem.  See above.
  CPPUNIT_ASSERT(pos2 != end);
  CPPUNIT_ASSERT(pos1 != end);
  CPPUNIT_ASSERT(pos0 != end);
}
template<typename _> auto tests::unit::slurp::file::istream::Iterator<_>::test_simple_idiom() -> void {
  std::istringstream in{"ABCD"};
  Subject pos{in};
  auto A = *pos++;
  auto B = *pos++;
  auto C = *pos++;
  auto D = *pos++;
  CPPUNIT_ASSERT(Octet('A') == A);  
  CPPUNIT_ASSERT(Octet('B') == B);  
  CPPUNIT_ASSERT(Octet('C') == C);  
  CPPUNIT_ASSERT(Octet('D') == D);  
  CPPUNIT_ASSERT(Subject{} == pos);
}
#import std.vector
template<typename _> auto tests::unit::slurp::file::istream::Iterator<_>::test_copy_idiom() -> void {
  std::istringstream in{"ABCD"};
  Subject begin{in};
  Subject end{};
  std::vector<Octet> copied;
  std::copy(begin, end, std::back_inserter(copied));
  CPPUNIT_ASSERT(Octet('A') == copied[0]);
  CPPUNIT_ASSERT(Octet('B') == copied[1]);
  CPPUNIT_ASSERT(Octet('C') == copied[2]);
  CPPUNIT_ASSERT(Octet('D') == copied[3]);
  CPPUNIT_ASSERT(4 == copied.size());
}
#import rigging.suite.io
template<typename _> auto tests::unit::slurp::file::istream::Iterator<_>::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("Iterator<"s + typeid(Octet).name() + ">"s);
  series << call("type_traits", &Iterator::test_type_traits)
    ;
  {
    Stream con{"constructor"};
    con << call("default", &Iterator::test_constructor_default)
        << call("stream", &Iterator::test_constructor_stream)
      ;
    series << move(con);
  }
  series << call("operator*", &Iterator::test_operator_indirect)
         << call("operator++", &Iterator::test_operator_increment_pre)
         << call("operator++(int)", &Iterator::test_operator_increment_post)
         << call("operator==", &Iterator::test_operator_eq)
         << call("operator!=", &Iterator::test_operator_ne)
    ;
  {
    Stream idi{"idiom"};
    idi << call("simple", &Iterator::test_simple_idiom)
        << call("copy", &Iterator::test_copy_idiom)
      ;
    series << move(idi);
  }
  return finalize(series);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace slurp {
      class Failure;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::slurp::Failure : public cppunit::test::Fixture {
public:
  auto test_construction_disaggregated() -> void;
  auto test_construction_ancestorial() -> void;
  auto test_code() -> void;
  auto test_filename() -> void;
  auto test_throwing() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import slurp.Failure
#import std.error_code
#import std.system_category
#import std.string

auto tests::unit::slurp::Failure::test_construction_disaggregated() -> void {
  std::error_code ec(13, std::system_category());
  ::slurp::Failure f(ec, "because", "/root/secret-stuff");
  std::string what = f.what();
  std::cout << "what=" << what <<  '\n';
  CPPUNIT_ASSERT(std::string::npos != what.find("because"));
}

auto tests::unit::slurp::Failure::test_construction_ancestorial() -> void {
  std::error_code ec(13, std::system_category());
  std::system_error system(ec, "because");
  ::slurp::Failure f(system, "/root/secret-stuff");
  std::string what = f.what();
  std::cout << "what=" << what <<  '\n';
  CPPUNIT_ASSERT(std::string::npos != what.find("because"));
}

auto tests::unit::slurp::Failure::test_code() -> void {
  std::error_code ec(13, std::system_category());
  ::slurp::Failure f(ec, "because", "/root/secret-stuff");
  std::cerr << "constructed message is qq|" << f.code() << "|\n";
  CPPUNIT_ASSERT(0 != f.code().message().size());
}

auto tests::unit::slurp::Failure::test_filename() -> void {
  std::error_code ec(13, std::system_category());
  ::slurp::Failure f(ec, "because", "/root/secret-stuff");
  CPPUNIT_ASSERT(std::string("/root/secret-stuff") == f.filename());
}

auto tests::unit::slurp::Failure::test_throwing() -> void {
  try {
    std::error_code ec(13, std::system_category());
    ::slurp::Failure f(ec, "because", "/root/secret-stuff");
    throw f;
  } catch(::slurp::Failure const &g) {
    std::string what = g.what();
    CPPUNIT_ASSERT(std::string::npos != what.find("because"));
    std::cerr << "thrown message is qq|" << g.code() << "|\n";
    CPPUNIT_ASSERT(0 != g.code().message().size());
    CPPUNIT_ASSERT(std::string("/root/secret-stuff") == g.filename());
  }
}

#import tests.unit.slurp.directory.Fixture
#import tests.unit.slurp.file.Fixture
#import tests.unit.slurp.named.Fixture
#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::slurp::Failure::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("Failure");
  s << call("construction-disaggregated", &Failure::test_construction_disaggregated)
    << call("construction-ancestorial", &Failure::test_construction_ancestorial)
    << call("code", &Failure::test_code)
    << call("filename", &Failure::test_filename)
    << call("throwing", &Failure::test_throwing)
    << add<directory::Fixture>()
    << add<file::Fixture>()
    << add<named::Fixture>()
    ;
  return s.release();
}
#endiv

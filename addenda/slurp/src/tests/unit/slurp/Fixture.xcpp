// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace slurp {
      class Fixture;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::slurp::Fixture : public cppunit::test::Fixture {
public:
  auto test_read_file() -> void;
  auto test_read_directory() -> void;
  auto test_Failure() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.string

#import slurp.file.read
auto tests::unit::slurp::Fixture::test_read_file() -> void {
  // This will throw if it doesn't work out.
  std::string specimen = "src/tests/unit/slurp/Fixture.xcpp";
  auto body = ::slurp::file::read<std::string>(specimen);
  // At least a hundred bytes were read (from this file).
  CPPUNIT_ASSERT(100u < body.size());
}

#import slurp.directory.read
auto tests::unit::slurp::Fixture::test_read_directory() -> void {
  // This will throw if it doesn't work out.
  std::string specimen = "src/tests/unit/slurp";
  auto entries = ::slurp::directory::read<std::vector<std::string>>(specimen);
  // at least four entries in the directory
  CPPUNIT_ASSERT(4u < entries.size());
}

#import std.error_code
#import std.system_category
#import std.system_error
#import slurp.Failure
auto tests::unit::slurp::Fixture::test_Failure() -> void {
  std::string expected = "a.out";
  //
  std::error_code ec(2, std::system_category());
  ::slurp::Failure f1(ec, "bad", "a.out");
  CPPUNIT_ASSERT_EQUAL(expected, f1.filename());
  //
  std::system_error se(ec, "a.out");
  ::slurp::Failure f2(se, "a.out");
  CPPUNIT_ASSERT_EQUAL(expected, f2.filename());
}

#import tests.unit.slurp.Failure
#import tests.unit.slurp.directory.Fixture
#import tests.unit.slurp.file.Fixture
#import tests.unit.slurp.named.Fixture
#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::slurp::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("slurp");
  s << call("read-file", &Fixture::test_read_file)
    << call("read-directory", &Fixture::test_read_directory)
    << call("Failure-usage", &Fixture::test_Failure)
    << add(Failure::suite())
    << add(directory::Fixture::suite())
    << add(file::Fixture::suite())
    << add(named::Fixture::suite())
    ;
  return s.release();
}
#endiv

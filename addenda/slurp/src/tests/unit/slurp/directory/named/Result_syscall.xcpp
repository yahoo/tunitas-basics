// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::slurp::directory::named {
  class Result_syscall;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import std.string
#import std.vector
#import slurp.directory.named.Result.syscall
class tests::unit::slurp::directory::named::Result_syscall : public cppunit::test::Fixture {
public:
  using adl_type = ::slurp::directory::named::ADL;
  using payload_type = ::slurp::directory::named::Result<std::vector<std::string>>;
  using result_type = ::sys::call::result::Value<payload_type>;

  auto test_construction() -> void;
  auto test_name() -> void;
  auto test_entries() -> void;
  auto test_returning() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import slurp.directory.named.Result.syscall
#import std.string
#import std.vector

auto tests::unit::slurp::directory::named::Result_syscall::test_construction() -> void {
  {
    std::string some_directory("/var/tmp/a-directory");
    std::vector<std::string> directory_contents{"apple", "banana", "cherry", "dog", "eagle", "frog", "goat"};
    payload_type pl(adl_type(), some_directory, directory_contents);
    result_type sr(true, 0, pl); // <--------------------------------------- test this
    CPPUNIT_ASSERT(ok(sr));
    CPPUNIT_ASSERT_EQUAL(0, error_num(sr));
    CPPUNIT_ASSERT(some_directory == name(value(sr)));
    CPPUNIT_ASSERT_EQUAL(7lu, entries(value(sr)).size());
  } {
    std::string some_directory("/var/tmp/another-directory");
    std::vector<std::string> directory_contents{"apple", "banana", "cherry"};
    payload_type pl(adl_type(), some_directory, directory_contents);
    result_type sr(false, 2, pl); // <-------------------------------------- test this
    CPPUNIT_ASSERT(!ok(sr));
    CPPUNIT_ASSERT_EQUAL(2, error_num(sr));
    CPPUNIT_ASSERT(some_directory == name(value(sr)));
    CPPUNIT_ASSERT_EQUAL(3lu, entries(value(sr)).size());
  }
}

auto tests::unit::slurp::directory::named::Result_syscall::test_name() -> void {
  std::string some_directory("/var/tmp/a-directory");
  std::vector<std::string> directory_contents{"some-file"};
  payload_type pl(adl_type(), some_directory, directory_contents);
  result_type sr(true, 4, pl);
  CPPUNIT_ASSERT(ok(sr));
  CPPUNIT_ASSERT_EQUAL(4, error_num(sr));
  CPPUNIT_ASSERT(some_directory == name(sr)); // <------------- test this
}

auto tests::unit::slurp::directory::named::Result_syscall::test_entries() -> void {
  std::string some_directory("/var/tmp/a-directory");
  std::vector<std::string> directory_contents{"apple", "banana", "cherry", "dog", "eagle", "frog", "goat", "harpie", "idiot", "jackass", "kangaroo", "llama", "marmot", "narwal", "ocelot", "possum", "quail", "rat", "seal", "turkey", "usufruct", "vole", "whale", "xylotyl", "yak", "zebra"};
  payload_type pl(adl_type(), some_directory, directory_contents);
  result_type sr(false, 9, pl);
  CPPUNIT_ASSERT(!ok(sr));
  CPPUNIT_ASSERT_EQUAL(9, error_num(sr));
  std::vector<std::string> const &recontents(entries(sr)); // <----------------- test this
  CPPUNIT_ASSERT_EQUAL(26lu, recontents.size());
}

#import std.tuple_element
namespace {
  template<typename CONTAINER> auto return_a_Result_CONTAINER() -> ::sys::call::result::Value<::slurp::directory::named::Result<CONTAINER>> {
    std::string some_directory("/var/tmp/a-directory");
    CONTAINER directory_contents{"c", "o", "n", "t", "e", "n", "t", "s"};
    using payload_type = ::slurp::directory::named::Result<CONTAINER>;
    using adl_type = typename std::tuple_element<0, payload_type>::type;
    using result_type = ::sys::call::result::Value<payload_type>;
    payload_type sr_pl(adl_type(), some_directory, CONTAINER(directory_contents));
    result_type sr(false, 19, sr_pl);
    CPPUNIT_ASSERT(!ok(sr));
    CPPUNIT_ASSERT_EQUAL(19, error_num(sr));
    CPPUNIT_ASSERT(some_directory == name(value(sr)));
    CPPUNIT_ASSERT(8 == entries(value(sr)).size());
    return sr;
  }
}

auto tests::unit::slurp::directory::named::Result_syscall::test_returning() -> void {
  auto sr = return_a_Result_CONTAINER<std::vector<std::string>>();
  CPPUNIT_ASSERT(!name(sr).empty());
  CPPUNIT_ASSERT(!entries(sr).empty());
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::slurp::directory::named::Result_syscall::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("Result<CONTAINER>");
  s << call("construction", &Result_syscall::test_construction)
    << call("name", &Result_syscall::test_name)
    << call("entries", &Result_syscall::test_entries)
    << call("returning", &Result_syscall::test_returning)
    ;
  return s.release();
}
#endiv

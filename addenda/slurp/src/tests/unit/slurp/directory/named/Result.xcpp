// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::slurp::directory::named {
  class Result;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import std.string
#import std.vector
#import slurp.directory.named.Result
class tests::unit::slurp::directory::named::Result : public cppunit::test::Fixture {
public:
  using adl_type = ::slurp::directory::named::ADL;
  using result_type = ::slurp::directory::named::Result<std::vector<std::string>>;

  auto test_construction() -> void;
  auto test_name() -> void;
  auto test_entries() -> void;
  auto test_returning() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import slurp.directory.named.Result
#import std.string
#import std.vector

auto tests::unit::slurp::directory::named::Result::test_construction() -> void {
  std::string some_directory("/var/tmp/a-directory");
  std::vector<std::string> some_entries{"apple", "banana", "cherry", "dog", "eagle", "frog", "goat"};
  result_type sr(adl_type(), some_directory, some_entries);
  CPPUNIT_ASSERT(some_directory == name(sr));
  CPPUNIT_ASSERT(7 == entries(sr).size());
  using s = std::string;
  CPPUNIT_ASSERT_EQUAL(s("apple"), entries(sr)[0]);
  CPPUNIT_ASSERT_EQUAL(s("banana"), entries(sr)[1]);
  CPPUNIT_ASSERT_EQUAL(s("cherry"), entries(sr)[2]);
  CPPUNIT_ASSERT_EQUAL(s("dog"), entries(sr)[3]);
  CPPUNIT_ASSERT_EQUAL(s("eagle"), entries(sr)[4]);
}

auto tests::unit::slurp::directory::named::Result::test_name() -> void {
  std::string some_directory("/var/tmp/a-directory");
  std::vector<std::string> empty;
  result_type sr(adl_type(), some_directory, empty);
  CPPUNIT_ASSERT(some_directory == name(sr));
}

auto tests::unit::slurp::directory::named::Result::test_entries() -> void {
  std::string some_directory("/var/tmp/a-directory");
  std::vector<std::string> some_entries{"apple", "banana", "cherry", "dog", "eagle", "frog", "goat"};
  result_type sr(adl_type(), some_directory, some_entries);
  using s = std::string;
  CPPUNIT_ASSERT_EQUAL(s("apple"), entries(sr)[0]);
  CPPUNIT_ASSERT_EQUAL(s("banana"), entries(sr)[1]);
  CPPUNIT_ASSERT_EQUAL(s("cherry"), entries(sr)[2]);
  CPPUNIT_ASSERT_EQUAL(s("dog"), entries(sr)[3]);
  CPPUNIT_ASSERT_EQUAL(s("eagle"), entries(sr)[4]);
}

namespace {
  template<typename CONTAINER> auto return_a_Result_CONTAINER() -> ::slurp::directory::named::Result<CONTAINER> {
    std::string some_directory("/var/tmp/a-directory");
    CONTAINER some_entries{"apple", "banana", "cherry", "dog", "eagle", "frog", "goat", "harpie", "idiot"};
    using adl_type = tests::unit::slurp::directory::named::Result::adl_type;
    using result_type = ::slurp::directory::named::Result<CONTAINER>;
    result_type sr(adl_type(), some_directory, some_entries);
    CPPUNIT_ASSERT_EQUAL(some_directory, name(sr));
    CPPUNIT_ASSERT_EQUAL(9lu, entries(sr).size());
    return sr;
  }
}

auto tests::unit::slurp::directory::named::Result::test_returning() -> void {
  auto vr = return_a_Result_CONTAINER<std::vector<std::string>>();
  CPPUNIT_ASSERT(!name(vr).empty());
  CPPUNIT_ASSERT(!entries(vr).empty());
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::slurp::directory::named::Result::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("Result");
  s << call("construction", &Result::test_construction)
    << call("name", &Result::test_name)
    << call("entries", &Result::test_entries)
    << call("returning", &Result::test_returning)
    ;
  return s.release();
}
#endiv

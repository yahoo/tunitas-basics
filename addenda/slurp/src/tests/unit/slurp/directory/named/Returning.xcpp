// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::slurp::directory::named {
  class Returning;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::slurp::directory::named::Returning : public cppunit::test::Fixture {
public:
  auto test_slurp_tmp() -> void;
  auto test_slurp_something() -> void;
  auto test_slurp_erroneous() -> void;
  auto test_returnable() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.nothrow
#import slurp.directory.named.read
#import std.cerr
#import std.string
#import std.vector

auto tests::unit::slurp::directory::named::Returning::test_slurp_tmp() -> void {
  char const *const subject_directory_by_name = "/tmp";
  auto red = ::slurp::directory::named::read<std::vector<std::string>>(std::nothrow, subject_directory_by_name);
  std::cerr << __FILE__ << ':' << __LINE__ << ", reading " << subject_directory_by_name << " recovered ok=" << ok(red) << ", error_num=" << error_num(red) << '\n';
  CPPUNIT_ASSERT(ok(red));
  // can't look at errno because it can be arbitrary, not necessarily 0==success
  CPPUNIT_ASSERT_EQUAL(std::string(subject_directory_by_name), name(value(red)));
  // /tmp is not empty
  CPPUNIT_ASSERT(!entries(value(red)).empty());
}

auto tests::unit::slurp::directory::named::Returning::test_slurp_something() -> void {
  char const *const subject_directory_by_name = "/etc";
  auto red = ::slurp::directory::named::read<std::vector<std::string>>(std::nothrow, subject_directory_by_name);
  std::cerr << __FILE__ << ':' << __LINE__ << ", reading " << subject_directory_by_name << " recovered ok=" << ok(red) << ", error_num=" << error_num(red) << '\n';
  CPPUNIT_ASSERT(ok(red));
  // Ibidem.
  CPPUNIT_ASSERT_EQUAL(std::string("/etc"), name(value(red)));
  // /etc is not empty
  CPPUNIT_ASSERT(!entries(value(red)).empty());
}

auto tests::unit::slurp::directory::named::Returning::test_slurp_erroneous() -> void {
  auto r = ::slurp::directory::named::read<std::vector<std::string>>(std::nothrow, "/does/not/exist/at/all/no/way");
  CPPUNIT_ASSERT(!ok(r));
  CPPUNIT_ASSERT_EQUAL(ENOENT, error_num(r));
  // we don't check for or care what the payload is...
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::slurp::directory::named::Returning::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("Returning");
  s << call("tmp", &Returning::test_slurp_tmp)
    << call("something", &Returning::test_slurp_something)
    << call("errnoneous", &Returning::test_slurp_erroneous)
    ;
  return s.release();
}
#endiv

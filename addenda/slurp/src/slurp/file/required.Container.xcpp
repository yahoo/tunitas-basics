// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#include <hpp/slurp.file.Configuration>
namespace slurp::file::required {
  //
  // Is this type a suitable container for slurp::file::read<CONTAINER>(...) ?
  // The concept is contingent upon the existence of the Configuration<CONTAINER> specialization.
  //
  template<typename CONTAINER> concept bool Container = requires (CONTAINER container) {
    typename Configuration<CONTAINER>;
    typename CONTAINER::value_type;
    typename Configuration<CONTAINER>::output_iterator;
    { CONTAINER{} };
    { typename Configuration<CONTAINER>::output_iterator{container} };
  };
}
#endiv
#divert <cpp>
// Of course, this is test code.
#import std.string
#import std.vector
namespace slurp::file::required {
  //
  // These, at least, are file::Containers.
  //
  // the file contents as one giant string
  static_assert(Container<std::string>);
  // the file contents a vector of lines (which are strings)
  static_assert(Container<std::vector<std::string>>);
  // the file contents as one giant vector of characters
  static_assert(Container<std::vector<char>>);
  // the file contents is a vector of lines (which are vectors of characters)  
  static_assert(Container<std::vector<std::vector<char>>>);
  // and so on with deque, list, etc.
}
#import std.byte
#import std.list
#import std.forward_list
#import std.deque
namespace slurp::file::required {
  // the file contents as one giant vector of bytes
  static_assert(Container<std::vector<std::byte>>);
  // the file contents is a vector of lines (which are vectors of bytes)  
  static_assert(Container<std::vector<std::vector<std::byte>>>);
  // and so on with deque, list, etc.
  static_assert(Container<std::deque<std::byte>>);
  static_assert(Container<std::list<std::deque<std::byte>>>);
  static_assert(Container<std::forward_list<std::deque<std::byte>>>);
}
#endiv

// -*- c++ -*- and wrapped in the SCOLD stylings
#divert <hpp>
#import slurp.file.named.Result
#import std.string
#import std.nothrow_t
#import sys.call.result.Value
namespace slurp::file::named {
  //
  // Read the file, returning the filename and the CONTAINER
  // Throws slurp::Failure if the file cannot be opened or read.
  //
  // See the ADL-discovered accessors
  //   filename(...)
  //   body(...) <------------- this is the content that was just slurped
  template<typename CONTAINER> inline auto read(std::string &&file_name) -> Result<CONTAINER>;
  template<typename CONTAINER> inline auto read(std::string const &file_name) -> Result<CONTAINER>;

  // Does not throw, does return a "standard" syscall result
  //
  // See the ADL-discovered accessors
  //   filename(...)
  //   body(...) <------------- this is the content that was just slurped if ok(...)
  template<typename CONTAINER> inline auto read(std::nothrow_t, std::string const &file_name) -> sys::call::result::Value<Result<CONTAINER>>;
  template<typename CONTAINER> inline auto read(std::nothrow_t, std::string &&file_name) -> sys::call::result::Value<Result<CONTAINER>>;
}
#endiv
#divert <ipp>
#import want.copy
template<typename CONTAINER> auto slurp::file::named::read(std::string const &file_name) -> Result<CONTAINER> {
  return read<CONTAINER>(want::copy(file_name));
}

#import slurp.file.read
#import std.forward
#import std.move
#import std.tuple_element
template<typename CONTAINER> auto slurp::file::named::read(std::string &&file_name) -> Result<CONTAINER> {
  using result_type = Result<CONTAINER>;
  CONTAINER body = slurp::file::read<CONTAINER>(file_name);
  using adl_type = typename std::tuple_element<0, Result<CONTAINER>>::type;
  return result_type{adl_type(), std::forward<std::string>(file_name), std::move(body)}; 
}

#import want.copy
template<typename CONTAINER> auto slurp::file::named::read(std::nothrow_t no, std::string const &file_name) -> sys::call::result::Value<Result<CONTAINER>> {
  return read<CONTAINER>(no, want::copy(file_name));
}

#import slurp.file.read
#import std.forward
#import std.move
#import std.tuple_element
#include <cerrno>
template<typename CONTAINER> auto slurp::file::named::read(std::nothrow_t no, std::string &&file_name) -> sys::call::result::Value<Result<CONTAINER>> {
  using payload_type = Result<CONTAINER>;
  using result_type = sys::call::result::Value<payload_type>;
  auto subload = slurp::file::read<CONTAINER>(no, file_name);
  // if there was a problem then, capture errno as quickly as possible.
  int error_num = ok(subload) ? 0 : errno;
  // on error, the subload container will be empty.
  using adl_type = typename std::tuple_element<0, Result<CONTAINER>>::type;
  payload_type payload(adl_type(), std::forward<std::string>(file_name), std::move(value(subload)));
  return result_type{ok(subload), error_num, std::move(payload)};
}
#endiv

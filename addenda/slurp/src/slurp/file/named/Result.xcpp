// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.tuple
#import std.string
namespace slurp::file::named {
  enum class ADL { };
  template<typename CONTAINER> using Result = std::tuple<ADL, std::string, CONTAINER>;
}
#entail slurp.file.named.Result.syscall
#endiv
#divert <hpp>
namespace slurp::file::named {
  // basic "const" accessor
  template<typename CONTAINER> inline auto name(Result<CONTAINER> const &) -> std::string const &;
  template<typename CONTAINER> inline auto body(Result<CONTAINER> const &) -> CONTAINER const &;

  // signature like std::forward
  template<typename CONTAINER> inline auto name(Result<CONTAINER> &&) -> std::string;
  template<typename CONTAINER> inline auto body(Result<CONTAINER> &&) -> CONTAINER;

  // Recall: attributes cannot pertain to templates; but they can to the instantiation of the template
  template<typename CONTAINER> 
#if __cplusplus > 201309 // https://gcc.gnu.org/projects/cxx-status.html
  [[deprecated("use 'name' instead of 'filename; else you are bad person")]]
#endif
  inline auto filename(Result<CONTAINER> const &) -> std::string const &;
  template<typename CONTAINER> 
#if __cplusplus > 201309 // greater than C++11 is C++14
  [[deprecated("use 'name' instead of 'filename; else you are bad person")]]
#endif
  inline auto filename(Result<CONTAINER> &&) -> std::string;

#if __cplusplus <= 201309
  // The old way, the gcc way
  template<typename CONTAINER> inline std::string const &filename(Result<CONTAINER> const &) __attribute__((deprecated));
  template<typename CONTAINER> inline std::string filename(Result<CONTAINER> &&) __attribute__((deprecated));
#endif
}
#endiv
#divert <ipp>
#import std.get
template<typename CONTAINER> auto slurp::file::named::filename(Result<CONTAINER> const &res) -> std::string const & {
  return name(res);
}

#import std.forward
template<typename CONTAINER> auto slurp::file::named::filename(Result<CONTAINER> &&anon) -> std::string {
  return name(std::forward<Result<CONTAINER>>(anon));
}

template<typename CONTAINER> auto slurp::file::named::name(Result<CONTAINER> const &res) -> std::string const & {
  return std::get<1>(res);
}

#import std.forward
template<typename CONTAINER> auto slurp::file::named::name(Result<CONTAINER> &&anon) -> std::string {
  return std::get<1>(std::forward<Result<CONTAINER>>(anon));
}

template<typename CONTAINER> auto slurp::file::named::body(Result<CONTAINER> const &res) -> CONTAINER const & {
  return std::get<2>(res);
}

#import std.forward
template<typename CONTAINER> auto slurp::file::named::body(Result<CONTAINER> &&anon) -> CONTAINER {
  return std::get<2>(std::forward<Result<CONTAINER>>(anon));
}
#endiv

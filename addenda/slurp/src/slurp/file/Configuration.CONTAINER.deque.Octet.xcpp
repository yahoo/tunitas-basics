// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#forward slurp.file.Configuration.declaration
#import nonstd.required.Octet
#import nonstd.required.Allocator
#import std.deque
namespace slurp::file {
  template<template<typename, nonstd::required::Allocator> class LINES_CONTAINER,
           nonstd::required::Octet OCTET,
           nonstd::required::Allocator LINE_ALLOC,
           nonstd::required::Allocator LINES_ALLOC>
  struct Configuration<LINES_CONTAINER<std::deque<OCTET, LINE_ALLOC>, LINES_ALLOC>>;
}
#endiv
#divert <hpp>
#import std.back_insert_iterator
#import want.istream_getline_iterator
template<template<typename, nonstd::required::Allocator> class LINES_CONTAINER,
         nonstd::required::Octet OCTET,
         nonstd::required::Allocator LINE_ALLOC,
         nonstd::required::Allocator LINES_ALLOC>
struct slurp::file::Configuration<LINES_CONTAINER<std::deque<OCTET, LINE_ALLOC>, LINES_ALLOC>> {
  // New School
  using Container = LINES_CONTAINER<std::deque<OCTET, LINE_ALLOC>, LINES_ALLOC>;
  using Element = typename Container::value_type;
  using Input = want::istream_getline_iterator<Element>;
  using Output = std::back_insert_iterator<Container>;
  // old_school
  using container_type = Container;
  using element_type = Element;
  using input_iterator = Input;
  using output_iterator = Output;
};
#endiv

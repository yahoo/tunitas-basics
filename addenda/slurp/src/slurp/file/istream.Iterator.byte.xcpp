// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.byte
#import slurp.file.istream.Iterator
namespace slurp::file::istream {
  //
  // The istream iterator, specialized for std::byte
  // because there is not an available operator>> ... the std template does not "just work"
  // See the commentariat near the class template definition Iterator.xcpp
  //
  // The "end" iterator is universal, being default-constructed.
  //
  // Usage: see Iterator.xcpp
  // 
  template<> class Iterator<std::byte>;
}
#endiv
#divert <hpp>
namespace slurp::file::istream {
  inline auto operator==(Iterator<std::byte> const &, Iterator<std::byte> const &) -> bool;
  inline auto operator!=(Iterator<std::byte> const &, Iterator<std::byte> const &) -> bool;
}
#import std.istream
#import std.char_traits
template<> class slurp::file::istream::Iterator<std::byte> {
  // New School
public:
  using Value = std::byte;
  using Character = char;
  using Traits = std::char_traits<char>;
  using Stream = std::istream;
public:
  // old_school
  using value_type = Value;
  using char_type = Character;
  using traits_type = Traits;
  using istream_type = Stream;
public:
  inline Iterator();
  inline explicit Iterator(Stream &);
  inline auto operator*() const -> Value const &;
  inline auto operator++() -> Iterator &;
  inline auto operator++(int) -> Iterator;
private:
  Stream *stream;
  Value value;
  bool ok;
  inline auto read() -> void;
  friend auto istream::operator==(Iterator const &, Iterator const &) -> bool;
};
#import slurp.file.istream.Iterator.byte.iterator_traits
#endiv
#divert <ipp>
namespace slurp::file {
  auto istream::operator==(Iterator<std::byte> const &a, Iterator<std::byte> const &b) -> bool {
    return a.stream == b.stream && a.ok == b.ok;
  }
  auto istream::operator!=(Iterator<std::byte> const &a, Iterator<std::byte> const &b) -> bool { return !operator==(a, b); }
}
#import std.invalid_argument
namespace slurp::file::istream {
  Iterator<std::byte>::Iterator()
    : stream{nullptr}
    , value{Value{}}
    , ok{false}
  { }
  Iterator<std::byte>::Iterator(Stream &stream)
    : stream{&stream}
    , value{Value{}}
    , ok{false} {
    read();
  }
  auto Iterator<std::byte>::operator*() const -> Value const & {
    if (!ok) { throw std::invalid_argument{"exhausted"}; }
    return value;
  }
  auto Iterator<std::byte>::operator++() -> Iterator & {
    if (!ok) {
      throw std::invalid_argument{"exhausted"};
    } else {
      read();
    }
    return *this;
  }
  auto Iterator<std::byte>::operator++(int) -> Iterator {
    Iterator old{*this};
    operator++();
    return old;
  }
  auto Iterator<std::byte>::read() -> void {
    //
    // We came all this way for this single line right here (the call to getc)
    // if we have read EOF here then henceforce value is "invalid"
    //   and the use of operator*
    //   and the use of operator++
    //
    if (nullptr != stream) {
      int got = stream->get();
      ok = Traits::eof() != got;
      if (ok) {
        value = std::byte(got);
      } else {
        stream = nullptr;
      }
    }
  }
}
#endiv

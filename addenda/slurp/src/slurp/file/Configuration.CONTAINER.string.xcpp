// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#forward slurp.file.Configuration.declaration
#import std.basic_string
#import std.vector
#import nonstd.required.Allocator
#import nonstd.required.Character_Traits
namespace slurp::file {
  // e.g. CONTAINER = std::vector
  template<template<typename, nonstd::required::Allocator> class CONTAINER,
           nonstd::required::Character_Traits CHAR_TRAITS,
           nonstd::required::Allocator STRING_ALLOC,
           nonstd::required::Allocator CONTAINER_ALLOC>
  struct Configuration<CONTAINER<std::basic_string<char, CHAR_TRAITS, STRING_ALLOC>, CONTAINER_ALLOC>>;
}
#endiv
#divert <hpp>
#import std.back_insert_iterator
#import want.istream_getline_iterator
namespace slurp::file {
  template<template<typename, nonstd::required::Allocator> class CONTAINER,
           nonstd::required::Character_Traits CHAR_TRAITS,
           nonstd::required::Allocator STRING_ALLOC,
           nonstd::required::Allocator CONTAINER_ALLOC>
  struct Configuration<CONTAINER<std::basic_string<char, CHAR_TRAITS, STRING_ALLOC>, CONTAINER_ALLOC>> {
    // New School
    using Container = CONTAINER<std::basic_string<char, CHAR_TRAITS, STRING_ALLOC>, CONTAINER_ALLOC>;
    using Element = typename Container::value_type;
    using Input = want::istream_getline_iterator<Element>;
    using Output = std::back_insert_iterator<Container>;
    // old_school
    using container_type = Container;
    using element_type = Element;
    using input_iterator = Input;
    using output_iterator = Output;
  };
}
#endiv

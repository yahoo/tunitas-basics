// -*- c++ -*- and wrapped in the SCOLD stylings
#divert <hpp>
#import slurp.directory.Container
#import std.string
#import std.nothrow_t
#import sys.call.argument.Pathname
#import sys.call.result.Value
namespace slurp::directory {
  //
  // Read the directory, returning the directory name and the CONTAINER of directory entries.
  // Only the directory entry names are returned; else see sys::directory::scan<...>(...)
  // Throws slurp::Failure if the directory cannot be opened or read.
  //
  template<Container CONTAINER> auto read(sys::call::argument::Pathname) -> CONTAINER;

  // Does not throw, does return a "standard" syscall result
  //
  template<Container CONTAINER> auto read(std::nothrow_t, sys::call::argument::Pathname) -> sys::call::result::Value<CONTAINER>;
}
#endiv
#divert <ipp>
#endiv
#divert <tpp>
#import slurp.Failure
#import std.back_inserter
#import std.deque
#import std.is_same
#import std.move
#import std.string
#import std.system_error
#import std.transform
#import sys.directory.Entry
#import sys.directory.scan
template<slurp::directory::Container CONTAINER> auto slurp::directory::read(sys::call::argument::Pathname directory_name) -> CONTAINER {
  static_assert(std::is_same<std::string, typename CONTAINER::value_type>::value, "CONTAINER is not a container of std::string");
  try {
    // scan(...) returns a sys-call-result sort of a thing entailing the failure status and (maybe) the success result.
    auto scanned = sys::directory::scan<std::deque<sys::directory::Entry>>(directory_name);
    if (!ok(scanned)) {
      auto ec = error_code(scanned);
      throw Failure(ec, ec.message(), (std::string) directory_name);
    }
    auto extract_name = [](sys::directory::Entry &item) -> std::string {
      return std::move(item.name);
    };
    auto &entries = value(scanned);
    CONTAINER ret;
    std::transform(entries.begin(), entries.end(), std::back_inserter(ret), extract_name);
    return ret;
  } catch (std::system_error const &se) {
    throw Failure(se, (std::string) directory_name);
  }
}
#import std.move
template<slurp::directory::Container CONTAINER> auto slurp::directory::read(std::nothrow_t, sys::call::argument::Pathname directory_name) -> sys::call::result::Value<CONTAINER> {
  static_assert(std::is_same<std::string, typename CONTAINER::value_type>::value, "CONTAINER is not a container of std::string");
  using result_type = sys::call::result::Value<CONTAINER>;
  // scan(...) returns a sys-call-result sort of a thing entailing the failure status and (maybe) the success result.
  auto scanned = sys::directory::scan<std::deque<sys::directory::Entry>>(directory_name);
  bool b = ok(scanned);
  int e;
  CONTAINER payload;
  if (!b) {
    e = error_num(scanned);
  } else {
    e = 0;
    auto extract_name = [](sys::directory::Entry &item) -> std::string {
      return std::move(item.name);
    };
    auto &entries = value(scanned); // nonconst because we move entries over.
    std::transform(entries.begin(), entries.end(), std::back_inserter(payload), extract_name);
  }
  return result_type{b, e, std::move(payload)};
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenace see the LICENSE file at the top of the repository.
#divert <fpp>
#import format.required.Integer
namespace tests::unit::format::integer::careful {
  //
  // The specification of carefulness.
  // The Duty of Care.
  //
  // Configure an iterator to iterate as
  //
  //     jump    ... when far away from zero, far way from the fixed point
  //     succ    ... when near zero, near the fixed point
  //
  // Expectation
  //
  //     -63, -30, -13, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 11, 23, 47, 97
  //     <------jump---><-----------------succ-------------><-----jump----->
  // 
  template<::format::required::Integer VALUE> struct Specification;
}
#endiv
#divert <hpp>
#import nonstd.is_unsigned
namespace tests::unit::format::integer {
  template<::format::required::Integer VALUE> struct careful::Specification {
    using Value = VALUE;
    inline static constexpr auto high() -> Value { return 5; }
    inline static constexpr auto low() -> Value {
      if constexpr (nonstd::is_unsigned<Value>::value) { return 0u; }
      else { return 0 - high(); }
    }
    inline static auto succ(Value value) -> Value { return value + 1; }
    inline static auto jump(Value value) -> Value {
      if constexpr (nonstd::is_signed<Value>::value) {
          // When signed and the value is negative,
          // get smaller in magnitude.
          if (value < 0) {
            return (value-1)/2 - 1;
          }
        }
      // When unsigned or positive
      // get larger, in magnitude
      return 2*(value+1) + 1;
    }
  };
}
#endiv

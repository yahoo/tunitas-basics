// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::format::integer::careful::exception {
  //
  // The iterator has violated a boundary (its own or another iterator's)
  // This frequently occurs during operator== when one iterator "is past" another one
  // yet operator== is being used, but operator< or operator<= should have been
  //
  // Usage:
  //
  //     try {
  //         Iterator i = ...
  //         Iterator e = ...
  //         while (i++ != e) { <--------------------------- operator++
  //             ...do stuff...
  //         }
  //     } catch (exception::Boundary const &) {
  //         ...escape...
  //     }
  //
  class Boundary;
}
#endiv
#divert <hpp>
#import tests.unit.format.integer.careful.exception.Generic
#import format.required.Integer
#import std.string
class tests::unit::format::integer::careful::exception::Boundary : public Generic {
  using ancestor = Generic;
public:
  template<::format::required::Integer INTEGER> inline explicit Boundary(INTEGER offending, INTEGER boundary);
private:
  template<::format::required::Integer INTEGER> static auto format(INTEGER offending, INTEGER boundary) -> std::string;
};
#endiv
#divert <ipp>
namespace tests::unit::format::integer::careful::exception {
  template<::format::required::Integer INTEGER> Boundary::Boundary(INTEGER offending, INTEGER boundary)
    : ancestor(format(offending, boundary)) {
    ;
  }
}
#endiv
#divert <tpp>
#import std.ostringstream
namespace tests::unit::format::integer::careful::exception {
  template<::format::required::Integer INTEGER> auto Boundary::format(INTEGER offending, INTEGER boundary) -> std::string {
    std::ostringstream buf;
    buf << "boundary violation at " << offending << " against boundary " << boundary;
    return buf.str();
  }
}
#endiv

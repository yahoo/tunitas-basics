// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import format.required.Integer
#import tests.unit.format.integer.careful.Specification
namespace tests::unit::format::integer::careful {
  //
  // Tricky ... iterate, sampling across a broad range.
  // Being careful to not get stuck in fixed points along the way.
  // e.g. the increment: i = 2*(i+1)+1
  //      fixed point:   -3 == i
  //
  template<::format::required::Integer VALUE, typename SPEC = Specification<VALUE>> class Iterator;
}
#endiv
#divert <hpp>
#if 10 < __GNUC__
#define __tests_unit_format_integer_operator_careful_Iterator_operator_spaceship__
#endif
namespace tests::unit::format::integer {
  namespace careful {
#ifndef __tests_unit_format_integer_operator_careful_Iterator_operator_spaceship__
    template<::format::required::Integer VALUE, typename SPEC> inline auto operator==(Iterator<VALUE, SPEC> const &, Iterator<VALUE, SPEC> const &) -> bool;
    template<::format::required::Integer VALUE, typename SPEC> inline auto operator!=(Iterator<VALUE, SPEC> const &, Iterator<VALUE, SPEC> const &) -> bool;
#endif
  }
  template<::format::required::Integer VALUE, typename SPEC> class careful::Iterator {
  public:
    using Specification = SPEC;
    using Value = VALUE;
    inline Iterator();
    inline explicit Iterator(Value base);
    inline Iterator(Value base, Value supplement);
    inline Iterator(Value base, Iterator const &guard);
    inline auto operator*() const -> Value;
    inline auto operator++() -> Iterator &;
    inline auto operator++(int) -> Iterator &;
#if __tests_unit_format_integer_operator_careful_Iterator_operator_spaceship__
    // Wow!  That's all we have to do!
    // http://en.cppreference.com/w/cpp/language/default_comparisons
    // [[WRITETHIS]] operator<=> against the guard_value
    inline auto operator<=>(Iterator) -> std::strong_equality;
#endif
  private:
    Value value;
    Value guard_value;
    auto increment_very_carefully() -> void;
    friend auto careful::operator== <>(Iterator const &, Iterator const &) -> bool;
  };
}
#endiv
#divert <ipp>
#import tests.unit.format.integer.careful.exception.Boundary
#ifndef __tests_unit_format_integer_operator_careful_Iterator_operator_spaceship__
namespace tests::unit::format::integer {
  template<::format::required::Integer VALUE, typename SPEC> auto careful::operator==(Iterator<VALUE, SPEC> const &a, Iterator<VALUE, SPEC> const &b) -> bool {
    if (a.value > b.guard_value) {
      throw exception::Boundary(a.value, b.guard_value);
    }
    if (b.value > a.guard_value) {
      throw exception::Boundary(b.value, a.guard_value);
    }
    return a.value == b.value;
  }
  template<::format::required::Integer VALUE, typename SPEC> auto careful::operator!=(Iterator<VALUE, SPEC> const &a, Iterator<VALUE, SPEC> const &b) -> bool {
    return !operator==(a, b);
  }
}
#endif
namespace tests::unit::format::integer::careful {
  template<::format::required::Integer _1, typename _2> Iterator<_1, _2>::Iterator()
    : value(0)
    , guard_value(value) {
    ;
  }
  template<::format::required::Integer _1, typename _2> Iterator<_1, _2>::Iterator(Value base)
    : value(base)
    , guard_value(value) {
    ;
  }   
  template<::format::required::Integer _1, typename _2> Iterator<_1, _2>::Iterator(Value base, Value supplement)
    : value(base + supplement)
    , guard_value(value) {
    ;
  }
  template<::format::required::Integer _1, typename _2> Iterator<_1, _2>::Iterator(Value base, Iterator const &guard)
    : value(base)
    , guard_value(guard.value) {
    ;
  }
  template<::format::required::Integer _1, typename _2> auto Iterator<_1, _2>::operator*() const -> Value {
    return value;
  }
  template<::format::required::Integer _1, typename _2> auto Iterator<_1, _2>::operator++() -> Iterator & {
    increment_very_carefully();
    return *this;
  }
  template<::format::required::Integer _1, typename _2> auto Iterator<_1, _2>::operator++(int) -> Iterator & {
    Iterator old(*this);
    operator++();
    return old;
  }
}
#endiv
#divert <tpp>
#import std.swap
#import tests.unit.format.integer.careful.exception.Fixedpoint
namespace tests::unit::format::integer::careful {
  template<::format::required::Integer _1, typename _2> auto Iterator<_1, _2>::increment_very_carefully() -> void {
    static_assert(Specification::low() <= Specification::high());
    Value proposed(value);
    if (Specification::low() <= value && value < Specification::high()) {
      proposed = Specification::succ(proposed);
    } else {    
      proposed = Specification::jump(proposed);
    }
    if (proposed == value) {
      throw exception::Fixedpoint(proposed);
    }
    if (proposed > guard_value) {
      proposed = guard_value;
    }
    std::swap(value, proposed);
  }
}
#endiv 

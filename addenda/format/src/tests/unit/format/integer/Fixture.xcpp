// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenace see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::format::integer {
  //
  // Testing various things but at least:
  //
  // format::integer(...)
  //
  class Fixture;
}
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
class tests::unit::format::integer::Fixture : public cppunit::test::Fixture {
public:
  auto test_int8_signed() -> void;
  auto test_int8_unsigned() -> void;
  auto test_medium_signed() -> void;
  auto test_medium_unsigned() -> void;
  auto test_int128_signed() -> void;
  auto test_int128_unsigned() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import format.integer
#import format.q
#import nonstd.integers
#import nonstd.numeric_limits
#import std.ostringstream
#import std.string
#import std.string_literals
using namespace std::string_literals;
#import tests.unit.format.integer.careful.Iterator.

auto tests::unit::format::integer::Fixture::test_int8_signed() -> void {
  using namespace nonstd::integers;
  using Subject = int8_t;
  using Limit = std::numeric_limits<Subject>;
  std::ostringstream buf;
  buf << "testify:";
  using Iterator = careful::Iterator<int32_t>;
  for (Iterator e(Limit::max(), 1), i(Limit::min(), e); e != i; ++i) {
    Subject const subject(*i);
    buf << ' ' << ::format::integer(subject);
  }
  auto const actual = buf.str();
  auto const expected = "testify: -128 -65 -34 -18 -10 -6 -4 -3 -2 -1 0 1 2 3 4 5 13 29 61 125"s;
  std::cerr << "int8_t actual: " << ::format::q(actual) << '\n';
  CPPUNIT_ASSERT_EQUAL(expected, actual);
} 

auto tests::unit::format::integer::Fixture::test_int8_unsigned() -> void {
  using namespace nonstd::integers;
  using Subject = uint8_t;
  using Limit = std::numeric_limits<Subject>;
  std::ostringstream buf;
  buf << "testify:";
  using Iterator = careful::Iterator<uint32_t>;
  for (Iterator e(Limit::max(), 1), i(Limit::min(), e); e != i; ++i) {
    Subject const subject(*i);
    buf << ' ' << ::format::integer(subject);
  }
  auto const actual = buf.str();
  auto const expected = "testify: 0 1 2 3 4 5 13 29 61 125 253"s;
  std::cerr << "uint8_t actual: " << ::format::q(actual) << '\n';
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::integer::Fixture::test_medium_signed() -> void {
  using namespace nonstd::integers;
  using Subject = int32_t; // <--------------------------------- signed (just test one case)
  using Limit = std::numeric_limits<Subject>;
  std::ostringstream buf;
  buf << "testify:";
  using Iterator = careful::Iterator<int64_t>;
  for (Iterator e(Limit::max(), 1), i(Limit::min(), e); e != i; ++i) {
    Subject const subject(*i);
    buf << ' ' << ::format::integer(subject);
  }
  auto const actual = buf.str();
  auto const expected = "testify: -2147483648 -1073741825 -536870914 -268435458 -134217730 -67108866 -33554434 -16777218 -8388610 -4194306 -2097154 -1048578 -524290 -262146 -131074 -65538 -32770 -16386 -8194 -4098 -2050 -1026 -514 -258 -130 -66 -34 -18 -10 -6 -4 -3 -2 -1 0 1 2 3 4 5 13 29 61 125 253 509 1021 2045 4093 8189 16381 32765 65533 131069 262141 524285 1048573 2097149 4194301 8388605 16777213 33554429 67108861 134217725 268435453 536870909 1073741821 2147483645"s;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::integer::Fixture::test_medium_unsigned() -> void {
  using namespace nonstd::integers;
  using Subject = uint32_t; // <--------------------------------- unsigned (just test one case)
  using Limit = std::numeric_limits<Subject>;
  std::ostringstream buf;
  buf << "testify:";
  using Iterator = careful::Iterator<uint64_t>;
  for (Iterator e(Limit::max(), 1), i(Limit::min(), e); e != i; ++i) {
    Subject const subject(*i);
    buf << ' ' << ::format::integer(subject);
  }
  auto const actual = buf.str();
  auto const expected = "testify: 0 1 2 3 4 5 13 29 61 125 253 509 1021 2045 4093 8189 16381 32765 65533 131069 262141 524285 1048573 2097149 4194301 8388605 16777213 33554429 67108861 134217725 268435453 536870909 1073741821 2147483645 4294967293"s;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::integer::Fixture::test_int128_signed() -> void {
  using namespace nonstd::integers;
  using Subject = int128_t;
  Subject const specimens[] = {
    -2, -1, 0, 1, 2,
    Subject()+nonstd::numeric_limits<int8_t>::min()-1,
    Subject()+nonstd::numeric_limits<int8_t>::min()-0,
    Subject()+nonstd::numeric_limits<int8_t>::min()+1,

    Subject()+nonstd::numeric_limits<int8_t>::max()-1,
    Subject()+nonstd::numeric_limits<int8_t>::max()-0,
    Subject()+nonstd::numeric_limits<int8_t>::max()+1,

    Subject()+nonstd::numeric_limits<int16_t>::min()-1,
    Subject()+nonstd::numeric_limits<int16_t>::min()-0,
    Subject()+nonstd::numeric_limits<int16_t>::min()+1,

    Subject()+nonstd::numeric_limits<int16_t>::max()-1,
    Subject()+nonstd::numeric_limits<int16_t>::max()-0,
    Subject()+nonstd::numeric_limits<int16_t>::max()+1,

    Subject()+nonstd::numeric_limits<int32_t>::min()-1,
    Subject()+nonstd::numeric_limits<int32_t>::min()-0,
    Subject()+nonstd::numeric_limits<int32_t>::min()+1,

    Subject()+nonstd::numeric_limits<int32_t>::max()-1,
    Subject()+nonstd::numeric_limits<int32_t>::max()-0,
    Subject()+nonstd::numeric_limits<int32_t>::max()+1,

    Subject()+nonstd::numeric_limits<int64_t>::min()-1,
    Subject()+nonstd::numeric_limits<int64_t>::min()-0,
    Subject()+nonstd::numeric_limits<int64_t>::min()+1,

    Subject()+nonstd::numeric_limits<int64_t>::max()-1,
    Subject()+nonstd::numeric_limits<int64_t>::max()-0,
    Subject()+nonstd::numeric_limits<int64_t>::max()+1,

    Subject()+nonstd::numeric_limits<int128_t>::min()-0,
    Subject()+nonstd::numeric_limits<int128_t>::min()+1,

    Subject()+nonstd::numeric_limits<int128_t>::max()-1,
    Subject()+nonstd::numeric_limits<int128_t>::max()-0
  };
  std::ostringstream buf;
  buf << "testify:";
  for (auto subject : specimens) {
    buf << ' ' << ::format::integer(subject);
  }
  auto const actual = buf.str();
  auto const expected = "testify: -2 -1 0 1 2 -129 -128 -127 126 127 128 -32769 -32768 -32767 32766 32767 32768 -2147483649 -2147483648 -2147483647 2147483646 2147483647 2147483648 -9223372036854775809 -9223372036854775808 -9223372036854775807 9223372036854775806 9223372036854775807 9223372036854775808 -170141183460469231731687303715884105728 -170141183460469231731687303715884105727 170141183460469231731687303715884105726 170141183460469231731687303715884105727"s;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
} 

auto tests::unit::format::integer::Fixture::test_int128_unsigned() -> void {
  using namespace nonstd::integers;
  using Subject = uint128_t;
  Subject const specimens[] = {
    0, 1, 2,
    Subject()+nonstd::numeric_limits<int8_t>::max()-1,
    Subject()+nonstd::numeric_limits<int8_t>::max()-0,
    Subject()+nonstd::numeric_limits<int8_t>::max()+1,

    Subject()+nonstd::numeric_limits<int16_t>::max()-1,
    Subject()+nonstd::numeric_limits<int16_t>::max()-0,
    Subject()+nonstd::numeric_limits<int16_t>::max()+1,

    Subject()+nonstd::numeric_limits<int32_t>::max()-1,
    Subject()+nonstd::numeric_limits<int32_t>::max()-0,
    Subject()+nonstd::numeric_limits<int32_t>::max()+1,

    Subject()+nonstd::numeric_limits<int64_t>::max()-1,
    Subject()+nonstd::numeric_limits<int64_t>::max()-0,
    Subject()+nonstd::numeric_limits<int64_t>::max()+1,

    Subject()+nonstd::numeric_limits<int128_t>::max()-1,
    Subject()+nonstd::numeric_limits<int128_t>::max()-0
  };
  std::ostringstream buf;
  buf << "testify:";
  for (auto subject : specimens) {
    buf << ' ' << ::format::integer(subject);
  }
  auto const actual = buf.str();
  auto const expected = "testify: 0 1 2 126 127 128 32766 32767 32768 2147483646 2147483647 2147483648 9223372036854775806 9223372036854775807 9223372036854775808 170141183460469231731687303715884105726 170141183460469231731687303715884105727"s;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}  

#import rigging.suite.io
#import std.move
auto tests::unit::format::integer::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("integer");
  {
    Stream small("int8");
    small << call("signed", &Fixture::test_int8_signed)
          << call("unsigned", &Fixture::test_int8_unsigned)
      ;
    series << add(std::move(small));
  } {
    Stream medium("medium");
    medium << call("signed", &Fixture::test_medium_signed)
           << call("usage2", &Fixture::test_medium_unsigned)
      ;
    series << add(std::move(medium));
  } {
    Stream large("int128");
    large << call("signed", &Fixture::test_int128_signed)
          << call("usage2", &Fixture::test_int128_unsigned)
      ;
    series << add(std::move(large));
  }
  return finalize(series);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenace see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::format::as_empty {
  class Fixture;
}
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
class tests::unit::format::as_empty::Fixture : public cppunit::test::Fixture {
public:
  auto test_char_const_star_null() -> void;
  auto test_char_const_star_value() -> void;
  auto test_string_empty() -> void;
  auto test_string_full() -> void;
  auto test_set_empty() -> void;
  auto test_set_full() -> void;
  auto test_vector_empty() -> void;
  auto test_vector_full() -> void;
  auto test_int() -> void;
  auto test_optional_int_empty() -> void;
  auto test_optional_int_value() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import format.as_empty
#import format.separator
#import std.optional
#import std.ostringstream
#import std.string
#import std.set
#import std.vector

auto tests::unit::format::as_empty::Fixture::test_char_const_star_null() -> void {
  std::ostringstream buf;
  char const *zero = nullptr; // <------------ test this
  using ::format::as_empty;
  buf << as_empty(zero);
  std::string const expected = "(null)";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::as_empty::Fixture::test_char_const_star_value() -> void {
  std::ostringstream buf;
  char const *one = "one"; // <------------ test this
  using ::format::as_empty;
  buf << as_empty(one);
  std::string const expected = "one";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::as_empty::Fixture::test_string_empty() -> void {
  std::ostringstream buf;
  std::string three= ""; // <------------ test this 
  using ::format::as_empty;
  buf << as_empty(three);
  std::string const expected = "(empty)";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::as_empty::Fixture::test_string_full() -> void {
  std::ostringstream buf;
  std::string two = "two"; // <------------ test this 
  using ::format::as_empty;
  buf << as_empty(two);
  std::string const expected = "two";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::as_empty::Fixture::test_set_empty() -> void {
  std::ostringstream buf;
  std::set<std::string> empty; // <------------ test this 
  using ::format::as_empty;
  using ::format::separator;
  buf << as_empty(separator(empty, ' '));
  std::string const expected = "(empty)";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::as_empty::Fixture::test_set_full() -> void {
  std::ostringstream buf;
  std::set<std::string> two{"one","two"}; // <------------ test this 
  using ::format::as_empty;
  using ::format::separator;
  buf << as_empty(separator(two, ' '));
  std::string const expected = "one two";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::as_empty::Fixture::test_vector_empty() -> void {
  std::ostringstream buf;
  std::vector<std::string> empty; // <------------ test this 
  using ::format::as_empty;
  using ::format::separator;
  buf << as_empty(separator(empty, ' '));
  std::string const expected = "(empty)";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::as_empty::Fixture::test_vector_full() -> void {
  std::ostringstream buf;
std::vector<std::string> two{"one","two"}; // <------------ test this 
  using ::format::as_empty;
  using ::format::separator;
  buf << as_empty(separator(two, ' '));
  std::string const expected = "one two";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::as_empty::Fixture::test_int() -> void {
  std::ostringstream buf;
  int four = 4; // <------------ test this 
  using ::format::as_empty;
  buf << as_empty(four);
  std::string const expected = "4";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::as_empty::Fixture::test_optional_int_empty() -> void {
  std::ostringstream buf;
  std::optional<int> missing; // <------------ test this 
  using ::format::as_empty;
  buf << as_empty(missing);
  std::string const expected = "(null)";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::as_empty::Fixture::test_optional_int_value() -> void {
  std::ostringstream buf;
  std::optional<int> four = 4; // <------------ test this 
  using ::format::as_empty;
  buf << as_empty(four);
  std::string const expected = "4";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

#import rigging.suite.io
auto tests::unit::format::as_empty::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("as_empty");
  series << call("char_const_star_null", &Fixture::test_char_const_star_null)
         << call("char_const_star_value", &Fixture::test_char_const_star_value)
         << call("string_empty", &Fixture::test_string_empty)
         << call("string_full", &Fixture::test_string_full)
         << call("set_empty", &Fixture::test_set_empty)
         << call("set_full", &Fixture::test_set_full)
         << call("vector_empty", &Fixture::test_vector_empty)
         << call("vector_full", &Fixture::test_vector_full)
         << call("int", &Fixture::test_int)
         << call("optional_int_empty", &Fixture::test_optional_int_empty)
         << call("optional_int_value", &Fixture::test_optional_int_value)
    ;
  return finalize(series);
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenace see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace format {
      class Fixture;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
class tests::unit::format::Fixture : public cppunit::test::Fixture {
public:
  auto test_braket() -> void;
  auto test_curly() -> void;
  auto test_commalist() -> void;
  auto test_dot() -> void;
  auto test_as_empty() -> void;
  auto test_as_null() -> void;
  auto test_ine() -> void;
  auto test_inn() -> void;
  auto test_integer() -> void;
  auto test_parenthesis() -> void;
  auto test_pipe() -> void;
  auto test_pipes() -> void;
  auto test_q() -> void;
  auto test_qq() -> void;
  auto test_quote() -> void;
  auto test_quote_quote() -> void;
  auto test_square() -> void;
  auto test_tuple() -> void;
  auto test_separator() -> void;

  auto test_json_qq() -> void;

  auto test_optional_curly_null() -> void;
  auto test_optional_curly_full() -> void;
  auto test_optional_quote_null() -> void;
  auto test_optional_quote_full() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.ostringstream
#import std.set
#import std.string
#import std.vector

#import format.braket
auto tests::unit::format::Fixture::test_braket() -> void {
  std::ostringstream buf;
  std::string specimen = "hpp";
  using ::format::braket;
  buf << braket(specimen);
  std::string const expected = "<hpp>";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

#import format.curly
#import format.commalist
auto tests::unit::format::Fixture::test_curly() -> void {
  std::ostringstream buf;
  std::set<std::string> specimen{"apple", "banana", "cherry"};
  using ::format::curly;
  using ::format::commalist;
  buf << curly(commalist(specimen));
  std::string const expected = "{ apple, banana, cherry }";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

#import std.vector
#import format.commalist
auto tests::unit::format::Fixture::test_commalist() -> void {
  std::ostringstream buf;
  std::string specimen = "hpp";
  using ::format::commalist;
  using v = std::vector<int>;
  buf << commalist(v{1, 2, 3, 4, 5});
  std::string const expected = "1, 2, 3, 4, 5";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

#import format.dot
auto tests::unit::format::Fixture::test_dot() -> void {
  std::ostringstream buf;
  std::string specimen = "hpp";
  using ::format::dot;
  buf << dot(specimen);
  std::string const expected = ".hpp";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

#import format.as_empty
auto tests::unit::format::Fixture::test_as_empty() -> void {
  {
    std::ostringstream buf;
    char const *zero = nullptr;
    using ::format::as_empty;
    buf << as_empty(zero);
    std::string const expected = "(null)";
    std::string const actual = buf.str();
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::ostringstream buf;
    char const *one = "one";
    using ::format::as_empty;
    buf << as_empty(one);
    std::string const expected = "one";
    std::string const actual = buf.str();
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::ostringstream buf;
    std::string two = "two";
    using ::format::as_empty;
    buf << as_empty(two);
    std::string const expected = "two";
    std::string const actual = buf.str();
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::ostringstream buf;
    std::string three= "";
    using ::format::as_empty;
    buf << as_empty(three);
    std::string const expected = "(empty)";
    std::string const actual = buf.str();
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::ostringstream buf;
    int four = 4;
    using ::format::as_empty;
    buf << as_empty(four);
    std::string const expected = "4";
    std::string const actual = buf.str();
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
}

#import format.as_null
auto tests::unit::format::Fixture::test_as_null() -> void {
  {
    std::ostringstream buf;
    char const *zero = nullptr;
    using ::format::as_null;
    buf << as_null(zero);
    std::string const expected = "(null)";
    std::string const actual = buf.str();
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::ostringstream buf;
    char const *one = "one";
    using ::format::as_null;
    buf << as_null(one);
    std::string const expected = "one";
    std::string const actual = buf.str();
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::ostringstream buf;
    std::string two = "two";
    using ::format::as_null;
    buf << as_null(two);
    std::string const expected = "two";
    std::string const actual = buf.str();
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::ostringstream buf;
    int three = 3;
    using ::format::as_null;
    buf << as_null(three);
    std::string const expected = "3";
    std::string const actual = buf.str();
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
}

#import format.ine
auto tests::unit::format::Fixture::test_ine() -> void {
  {
    std::ostringstream buf;
    char const *zero = nullptr;
    using ::format::ine;
    buf << ine(zero);
    std::string const expected = "(null)";
    std::string const actual = buf.str();
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::ostringstream buf;
    char const *one = "one";
    using ::format::ine;
    buf << ine(one);
    std::string const expected = "one";
    std::string const actual = buf.str();
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::ostringstream buf;
    std::string two = "two";
    using ::format::ine;
    buf << ine(two);
    std::string const expected = "two";
    std::string const actual = buf.str();
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::ostringstream buf;
    std::string three= "";
    using ::format::ine;
    buf << ine(three);
    std::string const expected = "(empty)";
    std::string const actual = buf.str();
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::ostringstream buf;
    int four = 4;
    using ::format::ine;
    buf << ine(four);
    std::string const expected = "4";
    std::string const actual = buf.str();
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
}

#import format.inn
auto tests::unit::format::Fixture::test_inn() -> void {
  {
    std::ostringstream buf;
    char const *zero = nullptr;
    using ::format::inn;
    buf << inn(zero);
    std::string const expected = "(null)";
    std::string const actual = buf.str();
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::ostringstream buf;
    char const *one = "one";
    using ::format::inn;
    buf << inn(one);
    std::string const expected = "one";
    std::string const actual = buf.str();
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::ostringstream buf;
    std::string two = "two";
    using ::format::inn;
    buf << inn(two);
    std::string const expected = "two";
    std::string const actual = buf.str();
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::ostringstream buf;
    int three = 3;
    using ::format::inn;
    buf << inn(three);
    std::string const expected = "3";
    std::string const actual = buf.str();
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
}

#import nonstd.integers
#import format.integer
#import std.string_literals
auto tests::unit::format::Fixture::test_integer() -> void {
  using namespace std::string_literals;
  using namespace nonstd::integers;
  using ::format::integer;
  {
    std::ostringstream buf;
    buf << integer(uint8_t(1))
        << ' '
        << integer(uint16_t(2))
        << ' '
        << integer(uint32_t(3))
        << ' '
        << integer(uint64_t(4))
        << ' '
        << integer(uint128_t(5))
      ;
    auto const actual = buf.str();
    auto const expected = "1 2 3 4 5"s;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::ostringstream buf;
    buf << integer(int8_t(-1))
        << ' '
        << integer(int16_t(-2))
        << ' '
        << integer(int32_t(-3))
        << ' '
        << integer(int64_t(-4))
        << ' '
        << integer(int128_t(-5))
      ;
    auto const actual = buf.str();
    auto const expected = "-1 -2 -3 -4 -5"s;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
}

#import format.parenthesis
auto tests::unit::format::Fixture::test_parenthesis() -> void {
  std::ostringstream buf;
  std::string specimen = "hpp";
  using ::format::parenthesis;
  buf << parenthesis(specimen);
  std::string const expected = "(hpp)";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

#import format.pipe
auto tests::unit::format::Fixture::test_pipe() -> void {
  std::ostringstream buf;
  std::string specimen = "a";
  using ::format::pipe;
  buf << pipe(specimen);
  std::string const expected = "|a|";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

#import format.pipes
auto tests::unit::format::Fixture::test_pipes() -> void {
  std::ostringstream buf;
  std::string specimen = "a";
  using ::format::pipes;
  buf << pipes(specimen);
  std::string const expected = "||a||";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

#import format.q
auto tests::unit::format::Fixture::test_q() -> void {
  std::ostringstream buf;
  std::string specimen = "hpp";
  using ::format::q;
  buf << q(specimen);
  std::string const expected = "'hpp'";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

#import format.qq
auto tests::unit::format::Fixture::test_qq() -> void {
  std::ostringstream buf;
  std::string specimen = "hpp";
  using ::format::qq;
  buf << qq(specimen);
  std::string const expected = "\"hpp\"";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

#import format.quote
auto tests::unit::format::Fixture::test_quote() -> void {
  std::ostringstream buf;
  std::string specimen = "hpp";
  using ::format::quote;
  buf << quote(specimen);
  std::string const expected = "'hpp'";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

#import format.quote_quote
auto tests::unit::format::Fixture::test_quote_quote() -> void {
  std::ostringstream buf;
  std::string specimen = "hpp";
  using ::format::quote_quote;
  buf << quote_quote(specimen);
  std::string const expected = "\"hpp\"";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

#import format.square
#import format.commalist
auto tests::unit::format::Fixture::test_square() -> void {
  std::ostringstream buf;
  std::set<std::string> specimen{"apple", "banana", "cherry"};
  using ::format::square;
  using ::format::commalist;
  buf << square(commalist(specimen));
  std::string const expected = "[ apple, banana, cherry ]";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

#import std.vector
#import format.separator
auto tests::unit::format::Fixture::test_separator() -> void {
  std::ostringstream buf;
  using ::format::separator;
  using v = std::vector<int>;
  buf << separator(v{1, 2, 3, 4, 5}, "/");
  std::string const expected = "1/2/3/4/5";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

#import format.tuple
auto tests::unit::format::Fixture::test_tuple() -> void {
  std::ostringstream buf;
  using ::format::tuple;
  buf << tuple(1, 2, 3.1, 'a', "wonderful");
  std::string const expected = "(1, 2, 3.1, a, wonderful)";
  std::string const actual = buf.str();
  std::cerr << "expected=qq!" << expected << "!\n"
            << "actual  =qq!" << actual << "!\n";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

#import std.invalid_argument
#import format.curly
auto tests::unit::format::Fixture::test_optional_curly_null() -> void {
  try {
    std::ostringstream buf;
    std::optional<std::string> zero;
    using ::format::curly;
    buf << curly(zero);
    CPPUNIT_ASSERT(false);
  } catch (std::invalid_argument const &e) {
    std::cerr << "caught expected exception saying " << e.what() << '\n';
    CPPUNIT_ASSERT(true);
  }
}

auto tests::unit::format::Fixture::test_optional_curly_full() -> void {
  std::ostringstream buf;
  std::optional<std::string> specimen = "lawn";
  using ::format::curly;
  buf << curly(specimen);
  std::string const expected = "{ lawn }";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

#import std.invalid_argument
#import format.quote
auto tests::unit::format::Fixture::test_optional_quote_null() -> void {
  try {
    std::ostringstream buf;
    std::optional<std::string> zero;
    using ::format::quote;
    buf << quote(zero);
  } catch (std::invalid_argument const &e) {
    std::cerr << "caught expected exception saying " << e.what() << '\n';
    CPPUNIT_ASSERT(true);
  }
}

auto tests::unit::format::Fixture::test_optional_quote_full() -> void {
  std::ostringstream buf;
  std::optional<std::string> specimen = "chair";
  using ::format::quote;
  buf << quote(specimen);
  std::string const expected = "'chair'";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

#import rigging.suite.io
#import std.move
#import tests.unit.format.as_empty.Fixture
#import tests.unit.format.as_null.Fixture
#import tests.unit.format.funcall.Fixture
#import tests.unit.format.ine.Fixture
#import tests.unit.format.inn.Fixture
#import tests.unit.format.integer.Fixture
#import tests.unit.format.json.Fixture
#import tests.unit.format.separator.Fixture
#import tests.unit.format.stream.Fixture
auto tests::unit::format::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream u("usage");
  u << call("braket", &Fixture::test_braket)
    << call("curly", &Fixture::test_curly)
    << call("commalist", &Fixture::test_commalist)
    << call("dot", &Fixture::test_dot)
    << call("as_empty", &Fixture::test_as_empty)
    << call("as_null", &Fixture::test_as_null)
    << call("ine", &Fixture::test_ine)
    << call("inn", &Fixture::test_inn)
    << call("integer", &Fixture::test_integer)
    << call("parenthesis", &Fixture::test_parenthesis)
    << call("pipe", &Fixture::test_pipes)
    << call("pipes", &Fixture::test_pipes)
    << call("q", &Fixture::test_q)
    << call("qq", &Fixture::test_qq)
    << call("quote", &Fixture::test_quote)
    << call("quote_quote", &Fixture::test_quote_quote)
    << call("square", &Fixture::test_square)
    << call("separator", &Fixture::test_separator)
    << call("tuple", &Fixture::test_tuple)
    ;
  Stream on("null");
  on << call("curly", &Fixture::test_optional_curly_null)
     << call("quote", &Fixture::test_optional_quote_null) 
    ;
  Stream of("full");
  of << call("curly", &Fixture::test_optional_curly_full)
     << call("quote", &Fixture::test_optional_quote_full) 
    ;
  Stream o("optional");
  o << add(std::move(on))
    << add(std::move(of))
    ;
  Stream s("format");
  s << add(std::move(u))
    << add(std::move(o))
    << add(as_empty::Fixture::suite())
    << add(as_null::Fixture::suite())
    << add(funcall::Fixture::suite())
    << add(funcall::Fixture::suite())
    << add(ine::Fixture::suite())
    << add(inn::Fixture::suite())
    << add(integer::Fixture::suite())
    << add(json::Fixture::suite())
    << add(separator::Fixture::suite())
    << add(stream::Fixture::suite())
    ;
  return finalize(s);
}
#endiv

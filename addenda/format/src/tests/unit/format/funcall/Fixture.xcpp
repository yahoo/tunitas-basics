// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::format::funcall {
  //
  // Testing various things but at least:
  //
  // format::funcall(...)
  //
  // format::Funcall
  // format::funcall::State
  //
  class Fixture;
}
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
class tests::unit::format::funcall::Fixture : public cppunit::test::Fixture {
public:
  auto test_object_usage1() -> void;
  auto test_object_usage2() -> void;
  auto test_function_usage1() -> void;
  auto test_function_usage2() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import format.Funcall
#import format.funcall
#import format.initialize
#import std.ostringstream
#import std.string

auto tests::unit::format::funcall::Fixture::test_object_usage1() -> void {
  using ::format::Funcall;
  using ::format::initialize;
  Funcall<char const *> spec("f(", ",", ")");
  std::ostringstream buf;
  finalize(initialize(buf, spec) << "apple" << "banana" << "cherry"); // <-------------- test initialize(...)
  std::string const actual = buf.str();
  std::string const expected = "f(apple,banana,cherry)";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}  

auto tests::unit::format::funcall::Fixture::test_object_usage2() -> void {
  using ::format::initialize;
  std::ostringstream buf;
  finalize(initialize(buf, "f(", ",", ")") << "apple" << "banana" << "cherry"); // <---------------- test initialize(...)
  std::string const actual = buf.str();
  std::string const expected = "f(apple,banana,cherry)";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}  

auto tests::unit::format::funcall::Fixture::test_function_usage1() -> void {
  using ::format::funcall;
  std::ostringstream buf;
  buf << funcall("f", "apple", "banana", "cherry");
  std::string const actual = buf.str();
  std::string const expected = "f(apple, banana, cherry)";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}  

auto tests::unit::format::funcall::Fixture::test_function_usage2() -> void {
  using ::format::funcall;
  std::ostringstream buf;
  buf << funcall("f", 1, 2, 3);
  std::string const actual = buf.str();
  std::string const expected = "f(1, 2, 3)";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}  

#import tests.unit.format.funcall.Formatter
#import tests.unit.format.funcall.State
#import rigging.suite.io
auto tests::unit::format::funcall::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream o("object");
  o << call("usage1", &Fixture::test_object_usage1)
    << call("usage2", &Fixture::test_object_usage2)
    ;
  Stream f("function");
  f << call("usage1", &Fixture::test_function_usage1)
    << call("usage2", &Fixture::test_function_usage2)
    ;
  Stream s("funcall");
  s << add(std::move(o))
    << add(std::move(f))
    << add<Formatter>()
    << add<State>()
    ;
  return finalize(s);
}
#endiv

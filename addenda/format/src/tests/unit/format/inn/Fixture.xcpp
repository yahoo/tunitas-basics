// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::format::inn {
  class Fixture;
}
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
class tests::unit::format::inn::Fixture : public cppunit::test::Fixture {
public:
  auto test_char_const_star_null() -> void;
  auto test_char_const_star_value() -> void;

  auto test_stringn_null() -> void;
  auto test_stringn_empty() -> void;
  auto test_stringn_full() -> void;

  auto test_stringz_null() -> void;
  auto test_stringz_empty() -> void;
  auto test_stringz_full() -> void;

  auto test_string_empty() -> void;
  auto test_string_full() -> void;

  auto test_string_view_null() -> void;
  auto test_string_view_empty() -> void;
  auto test_string_view_full() -> void;

  auto test_int() -> void;
  auto test_optional_int_null() -> void;
  auto test_optional_int_full() -> void;

  auto test_optional_string_null() -> void;
  auto test_optional_string_empty() -> void;
  auto test_optional_string_full() -> void;

  auto test_quote_char_const_star_null() -> void;
  auto test_quote_char_const_star_value() -> void;
  auto test_quote_string_empty() -> void;
  auto test_quote_string_full() -> void;
  auto test_quote_optional_string_null() -> void;
  auto test_quote_optional_string_empty() -> void;
  auto test_quote_optional_string_full() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import format.inn
#import format.quote
#import c.const_stringn
#import c.const_stringz
#import std.optional
#import std.ostringstream
#import std.string
#import std.string_view

auto tests::unit::format::inn::Fixture::test_char_const_star_null() -> void {
  std::ostringstream buf;
  char const *zero = nullptr; // <---------------- test this
  using ::format::inn;
  buf << inn(zero);
  std::string const expected = "(null)";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::inn::Fixture::test_char_const_star_value() -> void {
  std::ostringstream buf;
  char const *one = "one"; // <---------------- test this
  using ::format::inn;
  buf << inn(one);
  std::string const expected = "one";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::inn::Fixture::test_stringn_null() -> void {
  std::ostringstream buf;
  // recall: these can never store nullptr, only a pointer to an empty string.
  c::const_stringn zero(nullptr, 0); // <---------------- test this
  using ::format::inn;
  buf << inn(zero);
  std::string const expected = "";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::inn::Fixture::test_stringn_empty() -> void {
  std::ostringstream buf;
  c::const_stringn empty; // <---------------- test this
  using ::format::inn;
  buf << inn(empty);
  std::string const expected = ""; // yes, "" not "(empty)" or "(null")
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::inn::Fixture::test_stringn_full() -> void {
  std::ostringstream buf;
  c::const_stringn two("two", 3); // <---------------- test this
  using ::format::inn;
  buf << inn(two);
  std::string const expected = "two";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::inn::Fixture::test_stringz_null() -> void {
  std::ostringstream buf;
  c::const_stringz zero(nullptr); // <---------------- test this
  using ::format::inn;
  buf << inn(zero);
  std::string const expected = ""; // yes, "" not "(empty)" or "(null")
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::inn::Fixture::test_stringz_empty() -> void {
  std::ostringstream buf;
  c::const_stringz empty; // <---------------- test this
  using ::format::inn;
  buf << inn(empty);
  std::string const expected = ""; // yes, "" not "(empty)" or "(null")
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::inn::Fixture::test_stringz_full() -> void {
  std::ostringstream buf;
  c::const_stringz two("two"); // <---------------- test this
  using ::format::inn;
  buf << inn(two);
  std::string const expected = "two";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::inn::Fixture::test_string_empty() -> void {
  std::ostringstream buf;
  std::string empty; // <---------------- test this
  using ::format::inn;
  buf << inn(empty);
  std::string const expected = ""; // yes, empty, not "(null)" or "(empty)"
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::inn::Fixture::test_string_full() -> void {
  std::ostringstream buf;
  std::string two = "two"; // <---------------- test this
  using ::format::inn;
  buf << inn(two);
  std::string const expected = "two";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::inn::Fixture::test_string_view_null() -> void {
  std::ostringstream buf;
  auto zero = std::string_view{}; // <---------------- test this (nullptr)
  using ::format::inn;
  buf << inn(zero);
  std::string const expected = "(null)";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::inn::Fixture::test_string_view_empty() -> void {
  std::ostringstream buf;
  std::string_view empty; // <---------------- test this
  using ::format::inn;
  buf << inn(empty);
  std::string const expected = "(null)";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::inn::Fixture::test_string_view_full() -> void {
  std::ostringstream buf;
  std::string_view two = "two"; // <---------------- test this
  using ::format::inn;
  buf << inn(two);
  std::string const expected = "two";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::inn::Fixture::test_int() -> void {
  std::ostringstream buf;
  int three = 3; // <---------------- test this
  using ::format::inn;
  buf << inn(three);
  std::string const expected = "3";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::inn::Fixture::test_optional_int_null() -> void {
  std::ostringstream buf;
  std::optional<int> empty; // <---------------- test this
  using ::format::inn;
  buf << inn(empty);
  std::string const expected = "(null)";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::inn::Fixture::test_optional_int_full() -> void {
  std::ostringstream buf;
  std::optional<int> three = 3; // <---------------- test this
  using ::format::inn;
  buf << inn(three);
  std::string const expected = "3";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}


auto tests::unit::format::inn::Fixture::test_optional_string_null() -> void {
  std::ostringstream buf;
  std::optional<std::string> zero; // <---------------- test this
  using ::format::inn;
  buf << inn(zero);
  std::string const expected = "(null)";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::inn::Fixture::test_optional_string_empty() -> void {
  std::ostringstream buf;
  std::optional<std::string> empty = ""; // <---------------- test this
  using ::format::inn;
  buf << inn(empty);
  std::string const expected = ""; // yes, "" and not "(empty)" or "(null)"
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::inn::Fixture::test_optional_string_full() -> void {
  std::ostringstream buf;
  std::optional<std::string> three = "3"; // <---------------- test this
  using ::format::inn;
  buf << inn(three);
  std::string const expected = "3";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::inn::Fixture::test_quote_char_const_star_null() -> void {
  std::ostringstream buf;
  char const *zero = nullptr; // <---------------- test this
  using ::format::inn;
  using ::format::quote;
  buf << inn(zero);
  std::string const expected = "(null)";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::inn::Fixture::test_quote_char_const_star_value() -> void {
  std::ostringstream buf;
  char const *five = "5"; // <---------------- test this
  using ::format::inn;
  using ::format::quote;
  buf << inn(quote(five));
  std::string const expected = "'5'";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::inn::Fixture::test_quote_string_empty() -> void {
  std::ostringstream buf;
  std::string empty; // <---------------- test this
  using ::format::inn;
  using ::format::quote;
  buf << inn(quote(empty));
  std::string const expected = "''"; // yes "''", not "(empty)"
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::inn::Fixture::test_quote_string_full() -> void {
  std::ostringstream buf;
  std::string seven = "7"; // <---------------- test this
  using ::format::inn;
  using ::format::quote;
  buf << inn(quote(seven));
  std::string const expected = "'7'";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::inn::Fixture::test_quote_optional_string_null() -> void {
  std::ostringstream buf;
  std::optional<std::string> zero; // <---------------- test this
  using ::format::inn;
  using ::format::quote;
  buf << inn(quote(zero));
  std::string const expected = "(null)";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::inn::Fixture::test_quote_optional_string_empty() -> void {
  std::ostringstream buf;
  std::optional<std::string> empty = ""; // <---------------- test this
  using ::format::inn;
  using ::format::quote;
  buf << inn(quote(empty));
  std::string const expected = "''"; // yes, "", not "(empty)"
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::inn::Fixture::test_quote_optional_string_full() -> void {
  std::ostringstream buf;
  std::optional<std::string> three = "3"; // <---------------- test this
  using ::format::inn;
  using ::format::quote;
  buf << inn(quote(three));
  std::string const expected = "'3'";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

#import rigging.suite.io
auto tests::unit::format::inn::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("inn");
  series << call("char_const_star_null", &Fixture::test_char_const_star_null)
         << call("char_const_star_value", &Fixture::test_char_const_star_value)
         << call("stringn_null", &Fixture::test_stringn_null)
         << call("stringn_empty", &Fixture::test_stringn_empty)
         << call("stringn_full", &Fixture::test_stringn_full)
         << call("stringz_null", &Fixture::test_stringz_null)
         << call("stringz_empty", &Fixture::test_stringz_empty)
         << call("stringz_full", &Fixture::test_stringz_full)
         << call("string_empty", &Fixture::test_string_empty)
         << call("string_full", &Fixture::test_string_full)
         << call("string_view_null", &Fixture::test_string_view_null)
         << call("string_view_empty", &Fixture::test_string_view_empty)
         << call("string_view_full", &Fixture::test_string_view_full)
         << call("int", &Fixture::test_int)
         << call("optional_int_null", &Fixture::test_optional_int_null)
         << call("optional_int_full", &Fixture::test_optional_int_full)
         << call("optional_string_null", &Fixture::test_optional_string_null)
         << call("optional_string_empty", &Fixture::test_optional_string_empty)
         << call("optional_string_full", &Fixture::test_optional_string_full)
         << call("quote_char_const_star_null", &Fixture::test_quote_char_const_star_null)
         << call("quote_char_const_star_value", &Fixture::test_quote_char_const_star_value)
         << call("quote_string_empty", &Fixture::test_quote_string_empty)
         << call("quote_string_full", &Fixture::test_quote_string_full)
         << call("quote_optional_string_null", &Fixture::test_quote_optional_string_null)
         << call("quote_optional_string_empty", &Fixture::test_quote_optional_string_empty)
         << call("quote_optional_string_full", &Fixture::test_quote_optional_string_full)
    ;
  return finalize(series);
}
#endiv

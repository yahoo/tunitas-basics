// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenace see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::format::as_null {
  class Fixture;
}
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
class tests::unit::format::as_null::Fixture : public cppunit::test::Fixture {
public:
  auto test_char_const_star_null() -> void;
  auto test_char_const_star_value() -> void;
  auto test_string_empty() -> void;
  auto test_string_full() -> void;
  auto test_int() -> void;
  auto test_optional_int_empty() -> void;
  auto test_optional_int_full() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import format.as_null
#import std.optional
#import std.ostringstream
#import std.string

auto tests::unit::format::as_null::Fixture::test_char_const_star_null() -> void {
  std::ostringstream buf;
  char const *zero = nullptr; // <---------------- test this
  using ::format::as_null;
  buf << as_null(zero);
  std::string const expected = "(null)";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::as_null::Fixture::test_char_const_star_value() -> void {
  std::ostringstream buf;
  char const *one = "one"; // <---------------- test this
  using ::format::as_null;
  buf << as_null(one);
  std::string const expected = "one";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::as_null::Fixture::test_string_empty() -> void {
  std::ostringstream buf;
  std::string empty; // <---------------- test this
  using ::format::as_null;
  buf << as_null(empty);
  std::string const expected = "";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::as_null::Fixture::test_string_full() -> void {
  std::ostringstream buf;
  std::string two = "two"; // <---------------- test this
  using ::format::as_null;
  buf << as_null(two);
  std::string const expected = "two";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::as_null::Fixture::test_int() -> void {
  std::ostringstream buf;
  int three = 3; // <---------------- test this
  using ::format::as_null;
  buf << as_null(three);
  std::string const expected = "3";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::as_null::Fixture::test_optional_int_empty() -> void {
  std::ostringstream buf;
  std::optional<int> empty; // <---------------- test this
  using ::format::as_null;
  buf << as_null(empty);
  std::string const expected = "(null)";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::as_null::Fixture::test_optional_int_full() -> void {
  std::ostringstream buf;
  std::optional<int> three = 3; // <---------------- test this
  using ::format::as_null;
  buf << as_null(three);
  std::string const expected = "3";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

#import rigging.suite.io
auto tests::unit::format::as_null::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("as_null");
  series << call("char_const_star_null", &Fixture::test_char_const_star_null)
         << call("char_const_star_value", &Fixture::test_char_const_star_value)
         << call("string_empty", &Fixture::test_string_empty)
         << call("string_full", &Fixture::test_string_full)
         << call("int", &Fixture::test_int)
         << call("optional_int_empty", &Fixture::test_optional_int_empty)
         << call("optional_int_full", &Fixture::test_optional_int_full)
    ;
  return finalize(series);
}
#endiv

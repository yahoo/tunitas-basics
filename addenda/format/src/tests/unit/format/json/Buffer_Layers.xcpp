// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.is_enum
namespace tests::unit::format::json {
  //
  // An array of (string) buffers, indexed by an enum
  //
  namespace required {
    template<typename CONTAINER> concept Container = requires (CONTAINER muting_buffer, CONTAINER const consty_buffer, std::size_t index) {
      typename CONTAINER::value_type;
      { CONTAINER() };
      { muting_buffer[index] } -> convertible_to<typename CONTAINER::value_type>;
      { consty_buffer[index] } -> convertible_to<typename CONTAINER::value_type>;
    };
    template<typename ENUMERATION> concept Symbolic = std::is_enum<ENUMERATION>::value;
  }
  template<required::Container CONTAINER, required::Symbolic INDEX> class Buffer_Layers;
}
#endiv
#divert <hpp>
#import tests.unit.format.json.Enumeration_Limits
#import std.string
#import std.numeric_limits
namespace tests::unit::format {
  template<json::required::Container BUFFER, json::required::Symbolic INDEX> class json::Buffer_Layers {
  public:
    using buffer_type = BUFFER;
    using index_type = INDEX;
    Buffer_Layers() = default;
    inline auto operator[](index_type) -> buffer_type &;
    inline auto operator[](index_type) const -> buffer_type const &;
  protected:
    using limits_type = Enumeration_Limits<index_type>;
    buffer_type storage[limits_type::size()];
  };
}
#endiv
#divert <ipp>
namespace tests::unit::format::json {

  template<required::Container BUFFER, required::Symbolic INDEX> auto Buffer_Layers<BUFFER, INDEX>::operator[](index_type symbolic) -> buffer_type & {
    return storage[limits_type::index(symbolic)];
  }

  template<required::Container BUFFER, required::Symbolic INDEX> auto Buffer_Layers<BUFFER, INDEX>::operator[](index_type symbolic) const -> buffer_type const & {
    return storage[limits_type::index(symbolic)];
  }

}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenace see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::format::json {
  class Literal;
  enum POSITIVE { };
  enum NEGATIVE { };
}
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import std.string
#import cppunit.Test
class tests::unit::format::json::Literal : public cppunit::test::Fixture {
public:
  template<typename TYPE> auto test_generic() -> void;
  template<typename TYPE, TYPE VALUE> auto test_generic_value() -> void;
  template<typename TYPE, typename UNIQUENESS> auto test_uniqueable() -> void;

  auto test_char_string_ab() -> void;
  auto test_char_string_03() -> void;
  auto test_char_string_ff() -> void;

  static auto suite() -> cppunit::Test *;
};

#import std.string
#import std.string_view
#import std.vector
#import c.stringz
#import c.const_stringz
#import c.stringn
#import c.const_stringn
#import std.nullptr_t
namespace tests::unit::format::json {
  template<> auto Literal::test_generic<std::nullptr_t>() -> void;

  template<> auto Literal::test_generic_value<bool, true>() -> void;
  template<> auto Literal::test_generic_value<bool, false>() -> void;

  // These cannot be realized because there are no char literals in JSON
  template<> auto Literal::test_generic_value<char, 'a'>() -> void;
  template<> auto Literal::test_generic_value<char, '\3'>() -> void;
  template<> auto Literal::test_generic_value<char, '\xff'>() -> void;

  static_assert(std::is_same<std::int8_t, char signed>::value, "fail");
  static_assert(std::is_same<std::uint8_t, char unsigned>::value, "fail");
  template<> auto Literal::test_generic_value<char signed, (char signed)'\3'>() -> void;
  template<> auto Literal::test_generic_value<char unsigned, (char unsigned)0xff>() -> void;
  static_assert(std::is_same<std::int16_t, int short signed>::value, "fail");
  static_assert(std::is_same<std::uint16_t, int short unsigned>::value, "fail");
  template<> auto Literal::test_generic_value<int short signed, -1>() -> void;
  template<> auto Literal::test_generic_value<int short unsigned, 1u>() -> void;
  template<> auto Literal::test_generic_value<int signed, -2>() -> void;
  template<> auto Literal::test_generic_value<int unsigned, 2u>() -> void;
  template<> auto Literal::test_generic_value<int long signed, -3l>() -> void;
  template<> auto Literal::test_generic_value<int long unsigned, 3lu>() -> void;
  template<> auto Literal::test_generic_value<int long long signed, -4l>() -> void;
  template<> auto Literal::test_generic_value<int long long unsigned, 4lu>() -> void;

  // Pesky ... can't have floating point values as non-type template parameters
  template<> auto Literal::test_uniqueable<float, POSITIVE>() -> void;
  template<> auto Literal::test_uniqueable<float, NEGATIVE>() -> void;
  template<> auto Literal::test_uniqueable<double, POSITIVE>() -> void;
  template<> auto Literal::test_uniqueable<double, NEGATIVE>() -> void;
  template<> auto Literal::test_uniqueable<long double, POSITIVE>() -> void;
  template<> auto Literal::test_uniqueable<long double, NEGATIVE>() -> void;

  template<> auto Literal::test_generic<char const *>() -> void;
  template<> auto Literal::test_generic<std::string>() -> void;
  template<> auto Literal::test_generic<std::string_view>() -> void;
  template<> auto Literal::test_generic<c::stringz>() -> void;
  template<> auto Literal::test_generic<c::const_stringz>() -> void;
  template<> auto Literal::test_generic<c::stringn>() -> void;
  template<> auto Literal::test_generic<c::const_stringn>() -> void;

}
#endiv
#divert <cpp>
#import format.json.literal
#import std.ostringstream

template<> auto tests::unit::format::json::Literal::test_generic<std::nullptr_t>() -> void {
  std::ostringstream buf;
  using ::format::json::literal;
  buf << literal(nullptr);
  std::string const expected = "null";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

template<> auto tests::unit::format::json::Literal::test_generic_value<bool, true>() -> void {
  std::ostringstream buf;
  using ::format::json::literal;
  buf << literal(true);
  std::string const expected = "true";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

template<> auto tests::unit::format::json::Literal::test_generic_value<bool, false>() -> void {
  std::ostringstream buf;
  using ::format::json::literal;
  buf << literal(false);
  std::string const expected = "false";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

#if 0
// These functions are all marked 'delete' ... they will fail to compile
// All of the overloads for 'char' 'wchar_t' 'char16_t' and 'char32_t' fail to compile
// because there are no character literals in JSON.

template<> auto tests::unit::format::json::Literal::test_generic_value<char, 'a'>() -> void {
  std::ostringstream buf;
  using ::format::json::literal;
  buf << literal('a');
  std::string const expected = R"json("a")json";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

template<> auto tests::unit::format::json::Literal::test_generic_value<char, '\3'>() -> void {
  std::ostringstream buf;
  using ::format::json::literal;
  buf << literal('\3');
  std::string const expected = R"json("\\u0003")json";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

template<> auto tests::unit::format::json::Literal::test_generic_value<char, '\xff'>() -> void {
  std::ostringstream buf;
  using ::format::json::literal;
  buf << literal('\xff');
  std::string const expected = R"json("\\u00ff")json";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
#endif

auto tests::unit::format::json::Literal::test_char_string_ab() -> void {
  std::ostringstream buf;
  using ::format::json::literal;
  buf << literal("abcd");
  std::string const expected = R"json("abcd")json";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::json::Literal::test_char_string_03() -> void {
  std::ostringstream buf;
  using ::format::json::literal;
  buf << literal(c::const_stringn("\0\1\2\3")); // <------------ support embedded '\0', ignoring the trailing '\0'
  std::string const expected = R"json("\u0000\u0001\u0002\u0003")json";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::format::json::Literal::test_char_string_ff() -> void {
  std::ostringstream buf;
  using ::format::json::literal;
  buf << literal("\xfa\xfb\xfc\xfd\xfe\xff");
  std::string const expected = R"json("\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff")json";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

template<> auto tests::unit::format::json::Literal::test_generic_value<char signed, (char signed)'\3'>() -> void {
  std::ostringstream buf;
  using ::format::json::literal;
  buf << literal<char signed>(3);
  std::string const expected = "3";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

template<> auto tests::unit::format::json::Literal::test_generic_value<char unsigned, (char unsigned)(0xffu)>() -> void {
  std::ostringstream buf;
  using ::format::json::literal;
  buf << literal<char unsigned>(255);
  std::string const expected = "255";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

template<> auto tests::unit::format::json::Literal::test_generic_value<int short signed, -1>() -> void {
  std::ostringstream buf;
  using ::format::json::literal;
  buf << literal<int short signed>(-1);
  std::string const expected = "-1";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

template<> auto tests::unit::format::json::Literal::test_generic_value<int short unsigned, 1>() -> void {
  std::ostringstream buf;
  using ::format::json::literal;
  buf << literal<int short unsigned>(1);
  std::string const expected = "1";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

template<> auto tests::unit::format::json::Literal::test_generic_value<int signed, -2>() -> void {
  std::ostringstream buf;
  using ::format::json::literal;
  buf << literal(-2);
  std::string const expected = "-2";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

template<> auto tests::unit::format::json::Literal::test_generic_value<int unsigned, 2u>() -> void {
  std::ostringstream buf;
  using ::format::json::literal;
  buf << literal(2u);
  std::string const expected = "2";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

template<> auto tests::unit::format::json::Literal::test_generic_value<int long signed, -3l>() -> void {
  std::ostringstream buf;
  using ::format::json::literal;
  buf << literal(-3l);
  std::string const expected = "-3";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

template<> auto tests::unit::format::json::Literal::test_generic_value<int long unsigned, 3lu>() -> void {
  std::ostringstream buf;
  using ::format::json::literal;
  buf << literal(3lu);
  std::string const expected = "3";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

template<> auto tests::unit::format::json::Literal::test_generic_value<int long long signed, -4l>() -> void {
  std::ostringstream buf;
  using ::format::json::literal;
  buf << literal(-4l);
  std::string const expected = "-4";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

template<> auto tests::unit::format::json::Literal::test_generic_value<int long long unsigned, 4lu>() -> void {
  std::ostringstream buf;
  using ::format::json::literal;
  buf << literal(4lu);
  std::string const expected = "4";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

template<> auto tests::unit::format::json::Literal::test_uniqueable<float, tests::unit::format::json::POSITIVE>() -> void {
  std::ostringstream buf;
  using ::format::json::literal;
  buf << literal((float)4.5);
  std::string const expected = "4.5";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

template<> auto tests::unit::format::json::Literal::test_uniqueable<float, tests::unit::format::json::NEGATIVE>() -> void {
  std::ostringstream buf;
  using ::format::json::literal;
  buf << literal<float>(-5.6);
  std::string const expected = "-5.6";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

template<> auto tests::unit::format::json::Literal::test_uniqueable<double, tests::unit::format::json::POSITIVE>() -> void {
  std::ostringstream buf;
  using ::format::json::literal;
  buf << literal(6.7);
  std::string const expected = "6.7";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

template<> auto tests::unit::format::json::Literal::test_uniqueable<double, tests::unit::format::json::NEGATIVE>() -> void {
  std::ostringstream buf;
  using ::format::json::literal;
  buf << literal<double>(-7.8);
  std::string const expected = "-7.8";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

template<> auto tests::unit::format::json::Literal::test_uniqueable<long double, tests::unit::format::json::POSITIVE>() -> void {
  std::ostringstream buf;
  using ::format::json::literal;
  buf << literal(8.9l);
  std::string const expected = "8.9";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

template<> auto tests::unit::format::json::Literal::test_uniqueable<long double, tests::unit::format::json::NEGATIVE>() -> void {
  std::ostringstream buf;
  using ::format::json::literal;
  buf << literal<long double>(-9.10);
  std::string const expected = "-9.1";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

template<> auto tests::unit::format::json::Literal::test_generic<char const *>() -> void {
  std::ostringstream buf;
  using ::format::json::literal;
  char const *const specimen = "apple";
  buf << literal(specimen);
  std::string const expected = R"json("apple")json";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

template<> auto tests::unit::format::json::Literal::test_generic<std::string>() -> void {
  std::ostringstream buf;
  using ::format::json::literal;
  std::string const specimen = "apple";
  buf << literal(specimen);
  std::string const expected = R"json("apple")json";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

template<> auto tests::unit::format::json::Literal::test_generic<std::string_view>() -> void {
  std::ostringstream buf;
  using ::format::json::literal;
  std::string_view specimen = "apple";
  buf << literal(specimen);
  std::string const expected = R"json("apple")json";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

template<> auto tests::unit::format::json::Literal::test_generic<c::stringz>() -> void {
  std::ostringstream buf;
  using ::format::json::literal;
  char raw_apple[] = "apple";
  c::stringz specimen(raw_apple);
  buf << literal(specimen);
  std::string const expected = R"json("apple")json";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

template<> auto tests::unit::format::json::Literal::test_generic<c::const_stringz>() -> void {
  std::ostringstream buf;
  using ::format::json::literal;
  c::const_stringz specimen("apple");
  buf << literal(specimen);
  std::string const expected = R"json("apple")json";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

template<> auto tests::unit::format::json::Literal::test_generic<c::stringn>() -> void {
  std::ostringstream buf;
  using ::format::json::literal;
  char /*nonconst*/ raw_apple[] = "apple";
  c::stringn specimen(raw_apple, sizeof (raw_apple)-1);
  buf << literal(specimen);
  std::string const expected = R"json("apple")json";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

template<> auto tests::unit::format::json::Literal::test_generic<c::const_stringn>() -> void {
  std::ostringstream buf;
  using ::format::json::literal;
  char const raw_apple[] = "apple";
  c::const_stringn specimen(raw_apple, sizeof (raw_apple)-1);
  buf << literal(specimen);
  std::string const expected = R"json("apple")json";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

#import rigging.suite.io
auto tests::unit::format::json::Literal::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("literal");
  series << call("null", &Literal::test_generic<std::nullptr_t>)
    // bool
         << call("bool-true", &Literal::test_generic_value<bool, true>)
         << call("bool-false", &Literal::test_generic_value<bool, false>)
#if 0
    //
    // There are no character literals in JSON
    //
    // characters
         << call("char-a", &Literal::test_generic_value<char, 'a'>)
         << call("char-3", &Literal::test_generic_value<char, '\3'>)
         << call("char-ff", &Literal::test_generic_value<char, '\xff'>)
#endif
         << call("char-string-a", &Literal::test_char_string_ab)
         << call("char-string-3", &Literal::test_char_string_03)
         << call("char-string-ff", &Literal::test_char_string_ff)
    // integers
         << call("int8_t", &Literal::test_generic_value<char signed, (char signed)'\3'>)
         << call("uint8_t", &Literal::test_generic_value<char unsigned, (char unsigned)'\xff'>)
         << call("int short signed", &Literal::test_generic_value<int short signed, -1>)
         << call("int short unsigned", &Literal::test_generic_value<int short unsigned, 1>)
         << call("int signed", &Literal::test_generic_value<int signed, -2>)
         << call("int unsigned", &Literal::test_generic_value<int unsigned, 2u>)
         << call("int long signed", &Literal::test_generic_value<int long signed, -3l>)
         << call("int long unsigned", &Literal::test_generic_value<int long unsigned, 3lu>)
         << call("int long long signed", &Literal::test_generic_value<int long long signed, -4ll>)
         << call("int long long unsigned", &Literal::test_generic_value<int long long unsigned, 4llu>)
    // double
         << call("float", &Literal::test_uniqueable<float, POSITIVE>)
         << call("float", &Literal::test_uniqueable<float, NEGATIVE>)
         << call("double", &Literal::test_uniqueable<double, POSITIVE>)
         << call("double", &Literal::test_uniqueable<double, NEGATIVE>)
         << call("long double", &Literal::test_uniqueable<long double, POSITIVE>)
         << call("long double", &Literal::test_uniqueable<long double, NEGATIVE>)
    // strings
         << call("const char *", &Literal::test_generic<char const *>)
         << call("std::string", &Literal::test_generic<std::string>)
         << call("std::string_view", &Literal::test_generic<std::string_view>)
         << call("c::const_stringz", &Literal::test_generic<c::const_stringz>)
         << call("c::stringz", &Literal::test_generic<c::stringz>)
         << call("c::const_stringn", &Literal::test_generic<c::const_stringn>)
         << call("c::stringn", &Literal::test_generic<c::stringn>)
    ;
  return finalize(series);
}
#endiv

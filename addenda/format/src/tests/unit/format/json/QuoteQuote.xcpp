// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::format::json {
  class QuoteQuote;
}
#endiv
#divert <hpp>
#import std.is_integral
#import std.is_floating_point
#import cppunit.test.Fixture
#import cppunit.Test
class tests::unit::format::json::QuoteQuote : public cppunit::test::Fixture {
public:
  template<typename TYPE> auto test_generic() -> void;
  template<typename TYPE> auto test_exhaustively() -> void;

  static auto suite() -> cppunit::Test *;
protected:
  // Generate the representation of TYPE; e.g. "3"
  template<typename TYPE>
  requires (std::is_integral<TYPE>::value ||
            std::is_floating_point<TYPE>::value)
    static auto generate_dog() -> TYPE;
  template<typename TYPE> static auto generate_dog() -> TYPE;
  // Produce the full expected representation within test_generic<TYPE>
  template<typename TYPE> static auto generate_expected() -> std::string;
  template<typename TYPE> 
  requires std::is_floating_point<TYPE>::value
  static auto generate_expected() -> std::string;
};

#import c.stringz
#import c.const_stringz
#import c.stringn
#import c.const_stringn
#import std.nullptr_t
#import std.string
#import std.string_view
namespace tests::unit::format::json {
  template<> auto QuoteQuote::test_exhaustively<std::nullptr_t>() -> void;
  template<> auto QuoteQuote::test_exhaustively<bool>() -> void;
  template<> auto QuoteQuote::test_exhaustively<char>() -> void;

  template<> auto QuoteQuote::generate_dog<char const *>() -> char const *;
  template<> auto QuoteQuote::generate_dog<std::string>() -> std::string;
  template<> auto QuoteQuote::generate_dog<std::string_view>() -> std::string_view;
  template<> auto QuoteQuote::generate_dog<c::stringz>() -> c::stringz;
  template<> auto QuoteQuote::generate_dog<c::const_stringz>() -> c::const_stringz;
  template<> auto QuoteQuote::generate_dog<c::stringn>() -> c::stringn;
  template<> auto QuoteQuote::generate_dog<c::const_stringn>() -> c::const_stringn;
}
#endiv
#divert <tpp>
template<typename TYPE>
requires (std::is_integral<TYPE>::value || std::is_floating_point<TYPE>::value)
auto tests::unit::format::json::QuoteQuote::generate_dog() -> TYPE {
  return TYPE(3);
}

template<typename TYPE> auto tests::unit::format::json::QuoteQuote::generate_expected() -> std::string {
  std::string const item = R"quote("apple" "banana" "cherry" "3" "4.0")quote";
  return item;
}

template<typename TYPE> requires std::is_floating_point<TYPE>::value auto tests::unit::format::json::QuoteQuote::generate_expected() -> std::string {
  std::string const item = R"quote("apple" "banana" "cherry" "3.0" "4.0")quote";
  return item;
}

#import std.ostringstream
#import std.set
#import std.string
#import std.vector
#import format.json.qq
#import std.setprecision
template<typename TYPE> auto tests::unit::format::json::QuoteQuote::test_generic() -> void {
  std::ostringstream buf;
  using ::format::json::qq;
  char const apple[] = "apple"; // recall that operator<< on qq(char) is a deleted function
  std::string const cherry = "cherry";
  TYPE dog = generate_dog<TYPE>();
  double eagle = 4.0;
  buf << std::fixed << std::setprecision(1); // match "4.0" with a digit of precision
  buf << qq(apple) << ' ' << qq("banana") << ' ' << qq(cherry) << ' ' << qq(dog) << ' ' << qq(eagle); // <----- test this
  std::string const expected = generate_expected<TYPE>();
  std::string const actual = buf.str();
  std::cerr << "expected=qq!" << expected << "!\n"
            << "actual  =qq!" << actual << "!\n";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}  
#endiv
#divert <cpp>
template<> auto tests::unit::format::json::QuoteQuote::test_exhaustively<std::nullptr_t>() -> void {
  std::ostringstream buf;
  using ::format::json::qq;
  std::nullptr_t specimen = nullptr;
  buf << qq("left") << ' ' << qq(specimen) << ' ' << qq("right");
  // Yes, the specimen value is quoted, that is the point of qq(...)
  std::string const expected = R"json("left" "null" "right")json";
  std::string const actual = buf.str();
  std::cerr << "expected=qq!" << expected << "!\n"
            << "actual  =qq!" << actual << "!\n";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

template<> auto tests::unit::format::json::QuoteQuote::test_exhaustively<bool>() -> void {
  using ::format::json::qq;
  using v = std::array<bool, 2>;
  for (auto specimen : v{true, false}) {
    std::ostringstream abuf;
    abuf << qq("left") << ' ' << qq(specimen) << ' ' << qq("right");
    std::ostringstream xbuf;
    xbuf << R"json("left" ")json" << (specimen ? "true" : "false") << R"json(" "right")json";
    std::string const expected = xbuf.str();
    std::string const actual = abuf.str();
    std::cerr << "expected=qq!" << expected << "!\n"
              << "actual  =qq!" << actual << "!\n";
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
}


template<> auto tests::unit::format::json::QuoteQuote::generate_dog<char const *>() -> char const * {
  return "3";
}

template<> auto tests::unit::format::json::QuoteQuote::generate_dog<std::string>() -> std::string {
  return "3";
}

template<> auto tests::unit::format::json::QuoteQuote::generate_dog<std::string_view>() -> std::string_view {
  return "3";
}

template<> auto tests::unit::format::json::QuoteQuote::generate_dog<c::stringz>() -> c::stringz {
  static /*nonconst*/ char buf[] = "3";
  c::stringz ret(buf);
  return ret;
}

template<> auto tests::unit::format::json::QuoteQuote::generate_dog<c::const_stringz>() -> c::const_stringz {
  static const char buf[] = "3";
  c::const_stringz ret(buf);
  return ret;
}

template<> auto tests::unit::format::json::QuoteQuote::generate_dog<c::stringn>() -> c::stringn {
  static /*nonconst*/ char buf[] = "3";
  c::stringn ret(buf);
  return ret;
}

template<> auto tests::unit::format::json::QuoteQuote::generate_dog<c::const_stringn>() -> c::const_stringn {
  static const char buf[] = "3";
  c::const_stringn ret(buf);
  return ret;
}

#import rigging.suite.io
auto tests::unit::format::json::QuoteQuote::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("qq");
  series << call("null", &QuoteQuote::test_exhaustively<std::nullptr_t>)
         << call("bool", &QuoteQuote::test_exhaustively<bool>)
         << call("char", &QuoteQuote::test_exhaustively<char>)
         << call("int short signed", &QuoteQuote::test_generic<int short signed>)
         << call("int short unsigned", &QuoteQuote::test_generic<int short unsigned>)
         << call("int signed", &QuoteQuote::test_generic<int signed>)
         << call("int unsigned", &QuoteQuote::test_generic<int unsigned>)
         << call("int long signed", &QuoteQuote::test_generic<int long signed>)
         << call("int long unsigned", &QuoteQuote::test_generic<int long unsigned>)
         << call("int long long signed", &QuoteQuote::test_generic<int long long signed>)
         << call("int long long unsigned", &QuoteQuote::test_generic<int long long unsigned>)
         << call("float", &QuoteQuote::test_generic<float>)
         << call("double", &QuoteQuote::test_generic<double>)
         << call("char const *", &QuoteQuote::test_generic<char const *>)
         << call("std::string", &QuoteQuote::test_generic<std::string>)
         << call("std::string_view", &QuoteQuote::test_generic<std::string_view>)
         << call("c::stringz", &QuoteQuote::test_generic<c::stringz>)
         << call("c::const_stringz", &QuoteQuote::test_generic<c::const_stringz>)
         << call("c::stringn", &QuoteQuote::test_generic<c::stringn>)
         << call("c::const_stringn", &QuoteQuote::test_generic<c::const_stringn>)
    ;
  return finalize(series);
}

// Put this one last because it messes up emacs' regex-based formatting system.
#import std.numeric_limits
#import std.setw
#import std.setfill
template<> auto tests::unit::format::json::QuoteQuote::test_exhaustively<char>() -> void {
  using ::format::json::qq;
  std::ostringstream buf;
  buf << "chars:";
  for (int i(std::numeric_limits<char>::min()), e(std::numeric_limits<char>::max()+1); e != i; ++i) {
    char ch = (char) i;
    buf << '\n' << qq(ch) << '.';
  }
  std::string const expected = (R"json(chars:)json"
                                "\n" R"json("\u0080".)json"
                                "\n" R"json("\u0081".)json"
                                "\n" R"json("\u0082".)json"
                                "\n" R"json("\u0083".)json"
                                "\n" R"json("\u0084".)json"
                                "\n" R"json("\u0085".)json"
                                "\n" R"json("\u0086".)json"
                                "\n" R"json("\u0087".)json"
                                "\n" R"json("\u0088".)json"
                                "\n" R"json("\u0089".)json"
                                "\n" R"json("\u008a".)json"
                                "\n" R"json("\u008b".)json"
                                "\n" R"json("\u008c".)json"
                                "\n" R"json("\u008d".)json"
                                "\n" R"json("\u008e".)json"
                                "\n" R"json("\u008f".)json"
                                "\n" R"json("\u0090".)json"
                                "\n" R"json("\u0091".)json"
                                "\n" R"json("\u0092".)json"
                                "\n" R"json("\u0093".)json"
                                "\n" R"json("\u0094".)json"
                                "\n" R"json("\u0095".)json"
                                "\n" R"json("\u0096".)json"
                                "\n" R"json("\u0097".)json"
                                "\n" R"json("\u0098".)json"
                                "\n" R"json("\u0099".)json"
                                "\n" R"json("\u009a".)json"
                                "\n" R"json("\u009b".)json"
                                "\n" R"json("\u009c".)json"
                                "\n" R"json("\u009d".)json"
                                "\n" R"json("\u009e".)json"
                                "\n" R"json("\u009f".)json"
                                "\n" R"json("\u00a0".)json"
                                "\n" R"json("\u00a1".)json"
                                "\n" R"json("\u00a2".)json"
                                "\n" R"json("\u00a3".)json"
                                "\n" R"json("\u00a4".)json"
                                "\n" R"json("\u00a5".)json"
                                "\n" R"json("\u00a6".)json"
                                "\n" R"json("\u00a7".)json"
                                "\n" R"json("\u00a8".)json"
                                "\n" R"json("\u00a9".)json"
                                "\n" R"json("\u00aa".)json"
                                "\n" R"json("\u00ab".)json"
                                "\n" R"json("\u00ac".)json"
                                "\n" R"json("\u00ad".)json"
                                "\n" R"json("\u00ae".)json"
                                "\n" R"json("\u00af".)json"
                                "\n" R"json("\u00b0".)json"
                                "\n" R"json("\u00b1".)json"
                                "\n" R"json("\u00b2".)json"
                                "\n" R"json("\u00b3".)json"
                                "\n" R"json("\u00b4".)json"
                                "\n" R"json("\u00b5".)json"
                                "\n" R"json("\u00b6".)json"
                                "\n" R"json("\u00b7".)json"
                                "\n" R"json("\u00b8".)json"
                                "\n" R"json("\u00b9".)json"
                                "\n" R"json("\u00ba".)json"
                                "\n" R"json("\u00bb".)json"
                                "\n" R"json("\u00bc".)json"
                                "\n" R"json("\u00bd".)json"
                                "\n" R"json("\u00be".)json"
                                "\n" R"json("\u00bf".)json"
                                "\n" R"json("\u00c0".)json"
                                "\n" R"json("\u00c1".)json"
                                "\n" R"json("\u00c2".)json"
                                "\n" R"json("\u00c3".)json"
                                "\n" R"json("\u00c4".)json"
                                "\n" R"json("\u00c5".)json"
                                "\n" R"json("\u00c6".)json"
                                "\n" R"json("\u00c7".)json"
                                "\n" R"json("\u00c8".)json"
                                "\n" R"json("\u00c9".)json"
                                "\n" R"json("\u00ca".)json"
                                "\n" R"json("\u00cb".)json"
                                "\n" R"json("\u00cc".)json"
                                "\n" R"json("\u00cd".)json"
                                "\n" R"json("\u00ce".)json"
                                "\n" R"json("\u00cf".)json"
                                "\n" R"json("\u00d0".)json"
                                "\n" R"json("\u00d1".)json"
                                "\n" R"json("\u00d2".)json"
                                "\n" R"json("\u00d3".)json"
                                "\n" R"json("\u00d4".)json"
                                "\n" R"json("\u00d5".)json"
                                "\n" R"json("\u00d6".)json"
                                "\n" R"json("\u00d7".)json"
                                "\n" R"json("\u00d8".)json"
                                "\n" R"json("\u00d9".)json"
                                "\n" R"json("\u00da".)json"
                                "\n" R"json("\u00db".)json"
                                "\n" R"json("\u00dc".)json"
                                "\n" R"json("\u00dd".)json"
                                "\n" R"json("\u00de".)json"
                                "\n" R"json("\u00df".)json"
                                "\n" R"json("\u00e0".)json"
                                "\n" R"json("\u00e1".)json"
                                "\n" R"json("\u00e2".)json"
                                "\n" R"json("\u00e3".)json"
                                "\n" R"json("\u00e4".)json"
                                "\n" R"json("\u00e5".)json"
                                "\n" R"json("\u00e6".)json"
                                "\n" R"json("\u00e7".)json"
                                "\n" R"json("\u00e8".)json"
                                "\n" R"json("\u00e9".)json"
                                "\n" R"json("\u00ea".)json"
                                "\n" R"json("\u00eb".)json"
                                "\n" R"json("\u00ec".)json"
                                "\n" R"json("\u00ed".)json"
                                "\n" R"json("\u00ee".)json"
                                "\n" R"json("\u00ef".)json"
                                "\n" R"json("\u00f0".)json"
                                "\n" R"json("\u00f1".)json"
                                "\n" R"json("\u00f2".)json"
                                "\n" R"json("\u00f3".)json"
                                "\n" R"json("\u00f4".)json"
                                "\n" R"json("\u00f5".)json"
                                "\n" R"json("\u00f6".)json"
                                "\n" R"json("\u00f7".)json"
                                "\n" R"json("\u00f8".)json"
                                "\n" R"json("\u00f9".)json"
                                "\n" R"json("\u00fa".)json"
                                "\n" R"json("\u00fb".)json"
                                "\n" R"json("\u00fc".)json"
                                "\n" R"json("\u00fd".)json"
                                "\n" R"json("\u00fe".)json"
                                "\n" R"json("\u00ff".)json"
                                "\n" R"json("\u0000".)json"
                                "\n" R"json("\u0001".)json"
                                "\n" R"json("\u0002".)json"
                                "\n" R"json("\u0003".)json"
                                "\n" R"json("\u0004".)json"
                                "\n" R"json("\u0005".)json"
                                "\n" R"json("\u0006".)json"
                                "\n" R"json("\u0007".)json"
                                "\n" R"json("\b".)json"
                                "\n" R"json("\t".)json"
                                "\n" R"json("\n".)json"
                                "\n" R"json("\u000b".)json"
                                "\n" R"json("\f".)json"
                                "\n" R"json("\u000d".)json"
                                "\n" R"json("\u000e".)json"
                                "\n" R"json("\u000f".)json"
                                "\n" R"json("\u0010".)json"
                                "\n" R"json("\u0011".)json"
                                "\n" R"json("\u0012".)json"
                                "\n" R"json("\u0013".)json"
                                "\n" R"json("\u0014".)json"
                                "\n" R"json("\u0015".)json"
                                "\n" R"json("\u0016".)json"
                                "\n" R"json("\u0017".)json"
                                "\n" R"json("\u0018".)json"
                                "\n" R"json("\u0019".)json"
                                "\n" R"json("\u001a".)json"
                                "\n" R"json("\u001b".)json"
                                "\n" R"json("\u001c".)json"
                                "\n" R"json("\u001d".)json"
                                "\n" R"json("\u001e".)json"
                                "\n" R"json("\u001f".)json"
                                "\n" R"json(" ".)json"
                                "\n" R"json("!".)json"
                                "\n" R"json("\"".)json"
                                "\n" R"json("#".)json"
                                "\n" R"json("$".)json"
                                "\n" R"json("%".)json"
                                "\n" R"json("&".)json"
                                "\n" R"json("'".)json"
                                "\n" R"json("(".)json"
                                "\n" R"json(")".)json"
                                "\n" R"json("*".)json"
                                "\n" R"json("+".)json"
                                "\n" R"json(",".)json"
                                "\n" R"json("-".)json"
                                "\n" R"json(".".)json"
                                "\n" R"json("\/".)json"
                                "\n" R"json("0".)json"
                                "\n" R"json("1".)json"
                                "\n" R"json("2".)json"
                                "\n" R"json("3".)json"
                                "\n" R"json("4".)json"
                                "\n" R"json("5".)json"
                                "\n" R"json("6".)json"
                                "\n" R"json("7".)json"
                                "\n" R"json("8".)json"
                                "\n" R"json("9".)json"
                                "\n" R"json(":".)json"
                                "\n" R"json(";".)json"
                                "\n" R"json("<".)json"
                                "\n" R"json("=".)json"
                                "\n" R"json(">".)json"
                                "\n" R"json("?".)json"
                                "\n" R"json("@".)json"
                                "\n" R"json("A".)json"
                                "\n" R"json("B".)json"
                                "\n" R"json("C".)json"
                                "\n" R"json("D".)json"
                                "\n" R"json("E".)json"
                                "\n" R"json("F".)json"
                                "\n" R"json("G".)json"
                                "\n" R"json("H".)json"
                                "\n" R"json("I".)json"
                                "\n" R"json("J".)json"
                                "\n" R"json("K".)json"
                                "\n" R"json("L".)json"
                                "\n" R"json("M".)json"
                                "\n" R"json("N".)json"
                                "\n" R"json("O".)json"
                                "\n" R"json("P".)json"
                                "\n" R"json("Q".)json"
                                "\n" R"json("R".)json"
                                "\n" R"json("S".)json"
                                "\n" R"json("T".)json"
                                "\n" R"json("U".)json"
                                "\n" R"json("V".)json"
                                "\n" R"json("W".)json"
                                "\n" R"json("X".)json"
                                "\n" R"json("Y".)json"
                                "\n" R"json("Z".)json"
                                "\n" R"json("[".)json"
                                "\n" R"json("\\".)json"
                                "\n" R"json("]".)json"
                                "\n" R"json("^".)json"
                                "\n" R"json("_".)json"
                                "\n" R"json("`".)json"
                                "\n" R"json("a".)json"
                                "\n" R"json("b".)json"
                                "\n" R"json("c".)json"
                                "\n" R"json("d".)json"
                                "\n" R"json("e".)json"
                                "\n" R"json("f".)json"
                                "\n" R"json("g".)json"
                                "\n" R"json("h".)json"
                                "\n" R"json("i".)json"
                                "\n" R"json("j".)json"
                                "\n" R"json("k".)json"
                                "\n" R"json("l".)json"
                                "\n" R"json("m".)json"
                                "\n" R"json("n".)json"
                                "\n" R"json("o".)json"
                                "\n" R"json("p".)json"
                                "\n" R"json("q".)json"
                                "\n" R"json("r".)json"
                                "\n" R"json("s".)json"
                                "\n" R"json("t".)json"
                                "\n" R"json("u".)json"
                                "\n" R"json("v".)json"
                                "\n" R"json("w".)json"
                                "\n" R"json("x".)json"
                                "\n" R"json("y".)json"
                                "\n" R"json("z".)json"
                                "\n" R"json("{".)json"
                                "\n" R"json("|".)json"
                                "\n" R"json("}".)json"
                                "\n" R"json("~".)json"
                                "\n" R"json("\u007f".)json");
  std::string const actual = buf.str();
  std::cerr << "expected=qq!" << expected << "!\n"
            << "actual  =qq!" << actual << "!\n";
  CPPUNIT_ASSERT_EQUAL(expected, actual); 
}
#endiv

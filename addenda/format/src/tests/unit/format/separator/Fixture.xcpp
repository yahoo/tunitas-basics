// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenace see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::unit::format::separator {
  //
  // We're testing
  //     format::detail::separator::Formatter
  //     format::separator
  //
  class Fixture;
}
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import cppunit.Test
class tests::unit::format::separator::Fixture : public cppunit::test::Fixture {
public:
  auto test_char() -> void;
  auto test_char_const_star() -> void;
  auto test_string() -> void;
  auto test_int() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import format.separator
#import std.ostringstream
#import std.string
#import std.vector

auto tests::unit::format::separator::Fixture::test_char() -> void {
  using ::format::separator;
  using v = std::vector<std::string>;
  std::ostringstream buf;
  buf << separator(v{"apple", "banana", "cherry"}, ',');
  std::string const actual(buf.str());
  std::string const expected("apple,banana,cherry");
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}  

auto tests::unit::format::separator::Fixture::test_char_const_star() -> void {
  using ::format::separator;
  using v = std::vector<std::string>;
  std::ostringstream buf;
  buf << separator(v{"apple", "banana", "cherry"}, "::");
  std::string const actual(buf.str());
  std::string const expected("apple::banana::cherry");
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}  

auto tests::unit::format::separator::Fixture::test_string() -> void {
  using ::format::separator;
  using v = std::vector<std::string>;
  std::ostringstream buf;
  buf << separator(v{"apple", "banana", "cherry"}, std::string(":!:"));
  std::string const actual(buf.str());
  std::string const expected("apple:!:banana:!:cherry");
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}  

#import std.string_literals
auto tests::unit::format::separator::Fixture::test_int() -> void {
  using ::format::separator;
  using v = std::vector<int>;
  std::ostringstream buf;
  using namespace std::string_literals;
  buf << separator(v{1, 2, 3}, ":!:"s);
  std::string const actual(buf.str());
  std::string const expected("1:!:2:!:3");
  CPPUNIT_ASSERT_EQUAL(expected, actual);
} 

#import tests.unit.format.separator.State
#import rigging.suite.io
auto tests::unit::format::separator::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("separator");
  series << call("char", &Fixture::test_char)
         << call("char const *", &Fixture::test_char_const_star)
         << call("string", &Fixture::test_string)
         << call("int", &Fixture::test_int)
         << add<State>()
    ;
  return finalize(series);
}
#endiv

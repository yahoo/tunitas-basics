// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import format.detail.Match
#import format.required.Character
#import std.optional
#import std.basic_ostream
namespace format::detail {
  //
  // Format the optional subject surrounded by the matching characters
  // std::optional will be displeased (probably throw an exception) if it is improperly indirected.
  //
  // Whereas indirection on an uncontaining std::optional is undefined
  //     http://en.cppreference.com/w/cpp/utility/optional/operator*
  //     The behavior is undefined if *this does not contain a value.
  //
  // Here, a std::invalid_argument exception is thrown when the std::optional<VALUE> does not contani a value
  //
  // Usage
  //     std::cout << format::detail::Match<std::optional<std::string>>('<', "some string"s, '>');
  //
  //     try {
  //         format::detail::Match<std::optional<std::string>> empty;
  //         std::cout << format::detail::Match<std::optional<std::string>>('<', empty, '>');
  //     } catch (std::invalid_argument const &) {
  //         std::cout << "never mind\n"
  //     }
  //
  // Normall the class template is instantiated by an overloaded function.
  template<required::Character CHAR, typename TRAITS, typename VALUE> inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, Match<CHAR, std::optional<VALUE>> const &) -> std::basic_ostream<CHAR, TRAITS> &;
}
#endiv
#divert <ipp>
template<format::required::Character CHAR, typename TRAITS, typename VALUE> auto format::detail::operator<<(std::basic_ostream<CHAR, TRAITS> &o, Match<CHAR, std::optional<VALUE>> const &d) -> std::basic_ostream<CHAR, TRAITS> & {
  if (!d.value) {
    throw std::invalid_argument("empty optional");
  }
  auto const &redo = *d.value;
  return o << d.fore << redo << d.aft;
}
#endiv

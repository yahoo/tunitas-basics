// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenace see the LICENSE file at the top of the repository.
#divert <fpp>
namespace format::detail {
  //
  // The default usage is to capture the formattable value by const reference
  // Some usage naturally captures the formattable value by value (by copy)
  //
  // Example (natural uses)
  //    Formatter<std::string>                   want to capture by reference (don't copy)
  //    Formatter<char const *, char const *>    ...either way...
  //    Formatter<char, char>                    naturally copy by value, see json::Charcode<...>
  //
  template<typename TYPE, typename CAPTURE = TYPE const &> class Formatter;
}
#entail format.detail.Formatter.tuple
#endiv
#divert <hpp>
template<typename TYPE, typename CAPTURE> class format::detail::Formatter {
public:
  // New School
  using Value = TYPE;
  using Capture = CAPTURE;
  using Argument = Value const &;
  // Old School
  using value_type = Value;
  using capture_type = Capture;
  using argument_type = Argument;
  inline explicit Formatter(Argument);
  capture_type value;
};
#endiv
#divert <ipp>
template<typename TYPE, typename CAPTURE> format::detail::Formatter<TYPE, CAPTURE>::Formatter(Argument arg_value)
  : value(arg_value) {
  ;
}
#endiv

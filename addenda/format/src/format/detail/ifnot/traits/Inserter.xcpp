// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.optional
#import format.required.Character
#import format.required.Container
namespace format::detail::ifnot::traits {
  //
  // How (what) to insert when applying to operator<<
  // Mostly, a no-op, just return a reference to the thing, itself
  // In some cases an indirection must be performed.
  // In some cases the insert operation is denied (via =delete).
  //
  // An Inserter must have
  //     inline static constexpr auto insertable_notnull_nonempty(insertable_type const &subject) -> UNSPECIFIED;
  // which can return ... anything.
  //
  // The inserter will only be called if the sizer declares !is_null && !is_empty
  // That cannot be checked from here.
  //
  template<typename VALUE> struct Inserter;
  template<required::Character CHAR> class Inserter<CHAR *>;
  template<typename TYPE> class Inserter<std::optional<TYPE>>;
  template<required::Container CONTAINER> struct Inserter<CONTAINER>;
}
#endiv
#divert <hpp>
#import std.is_pointer
namespace format::detail::ifnot {
  template<typename VALUE> struct traits::Inserter {
    using insertable_type = VALUE;
    inline static constexpr auto insertable_notnull_nonempty(insertable_type const &subject) -> insertable_type const & { return subject; }
    static_assert(!std::is_pointer<VALUE>::value, "no pointers, CHAR pointers are specialized elsewhere");
  };
}

namespace format::detail::ifnot::traits {
  template<required::Character CHAR> struct Inserter<CHAR *> {
    using insertable_type = CHAR const *; // always add the consty
    // The presumption is that this is '\0'-terminated and is therefore "safe"to throw at operator<<; WATCHOUT that is uncheckable.
    inline static constexpr auto insertable_notnull_nonempty(insertable_type subject) -> insertable_type { return subject; }
  };
  template<typename TYPE> class Inserter<std::optional<TYPE>> : public Inserter<TYPE> { 
    using ancestor = Inserter<TYPE>;
    using subinsertable_type = typename ancestor::insertable_type;
  public:
    using insertable_type = std::optional<TYPE>;
    // indirect to print because we know !is_null && !is_empty
    inline static constexpr auto insertable_notnull_nonempty(insertable_type const &subject) -> subinsertable_type const & { return *subject; }
  };
}

namespace format::detail::ifnot::traits {
  template<required::Container CONTAINER> struct Inserter<CONTAINER> { 
    using insertable_type = CONTAINER;
    //
    // This should not be used because there is no way to "just print" a container
    // If you wanted to print a container, you should have used a formatter
    // Suggest:
    //     format::separator(CONTAINER, spacer)
    //     format::commalist(CONTAINER)
    //
    [[deprecated("do not use, use a separator-formatter, see the commentariat nearby")]]
    inline static constexpr auto insertable_notnull_nonempty(insertable_type const &subject) -> insertable_type const & = delete;
  };
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenace see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.char_traits
namespace format::detail::ifnot::literals {
  //
  // The palette of literals, in various sizes
  // Sure (sic), hardcoded in U.S. English.
  //
  // Because one cannot parameterize the interpretation of string literal widths
  //    "literal"
  //    L"literal"
  //    u"literal"
  //    U"literal"
  //
  template<typename CHAR, typename TRAITS = std::char_traits<CHAR>> struct Palette;
  template<> struct Palette<char>;
  template<> struct Palette<wchar_t>;
  template<> struct Palette<char16_t>;
  template<> struct Palette<char32_t>;
}
#endiv
#divert <hpp>
#import format.detail.ifnot.expected.Palette
namespace format::detail::ifnot {
  template<> struct literals::Palette<char> {
    using char_type = char;
    using value_type = char_type const *;
    inline static constexpr auto null() -> value_type { return "(null)"; }
    inline static constexpr auto empty() -> value_type { return "(empty)"; }
  };
  static_assert(expected::Palette<literals::Palette<char>>, "fail");

  template<> struct literals::Palette<wchar_t> {
    using char_type = wchar_t;
    using value_type = char_type const *;
    inline static constexpr auto null() -> value_type { return L"(null)"; }
    inline static constexpr auto empty() -> value_type { return L"(empty)"; }
  };
  static_assert(expected::Palette<literals::Palette<wchar_t>>, "fail");

  template<> struct literals::Palette<char16_t> {
    using char_type = char16_t;
    using value_type = char_type const *;
    inline static constexpr auto null() -> value_type { return u"(null)"; }
    inline static constexpr auto empty() -> value_type { return u"(empty)"; }
  };
  static_assert(expected::Palette<literals::Palette<char16_t>>, "fail");

  template<> struct literals::Palette<char32_t> {
    using char_type = char32_t;
    using value_type = char_type const *;
    inline static constexpr auto null() -> value_type { return U"(null)"; }
    inline static constexpr auto empty() -> value_type { return U"(empty)"; }
  };
  static_assert(expected::Palette<literals::Palette<char32_t>>, "fail");
}
#endiv

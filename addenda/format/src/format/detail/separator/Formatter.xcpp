// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import format.required.Container
#import format.required.Element
namespace format::detail::separator {
  template<required::Container CONTAINER, required::Element SEPARATOR> class Formatter;
}
#entail format.detail.separator.Formatter.character_array
#entail format.detail.separator.Formatter.character_pointer
#endiv
#divert <hpp>
#import std.basic_ostream
namespace format::detail::separator {
  template<typename CHAR, typename TRAITS, required::Container CONTAINER, required::Element SEPARATOR> inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, Formatter<CONTAINER, SEPARATOR> const &) -> std::ostream &;
}

#import format.detail.separator.State
template<format::required::Container CONTAINER, format::required::Element SEPARATOR> class format::detail::separator::Formatter {
public:
  using container_type = CONTAINER;
  using separator_type = SEPARATOR;
  inline Formatter(container_type const &, separator_type const &);
  inline Formatter(container_type &&, separator_type &&) = delete;
  container_type const &container;
  separator_type const &separator; // <----- by reference, e.g. std:string; but is not suitable for char const * or char const []
  using state_type = State<SEPARATOR>;
};
#endiv
#divert <ipp>
template<typename CHAR, typename TRAITS, format::required::Container CONTAINER, format::required::Element SEPARATOR> auto format::detail::separator::operator<<(std::basic_ostream<CHAR, TRAITS> &o, Formatter<CONTAINER, SEPARATOR> const &s) -> std::ostream & {
  typename Formatter<CONTAINER, SEPARATOR>::state_type sep(s.separator);
  // the 'sep' will keep track of its state (first, ...rest), emitting only on rest...
  for (auto const &item : s.container) {
    o << sep << item;
  }
  return o;
}

template<format::required::Container CONTAINER, format::required::Element SEPARATOR> format::detail::separator::Formatter<CONTAINER, SEPARATOR>::Formatter(container_type const &arg_container, separator_type const &arg_separator)
  : container(arg_container)
  , separator(arg_separator) {
  ;
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace format::detail::tuple {
  //
  // Capture the separator and value tuple.
  // For inheritance only; for descendants only...
  // See Inserter<...>
  //
  template<typename CHAR, typename TRAITS, typename... VALUES> class Emittable;
}
#endiv
#divert <hpp>
#import c.basic_stringn
#import std.tuple
template<typename CHAR, typename TRAITS, typename... VALUES> class format::detail::tuple::Emittable {
public:
  using separator_type = c::basic_stringn<CHAR const>;
  using value_type = std::tuple<VALUES...>; // <---- tuple elements are by value
  // public so that it can be using-used as the public constructor in the descendant
  inline Emittable(separator_type, value_type const &);
protected: 
  ~Emittable() = default;
  separator_type separator;
  value_type const &value; // <--------------------- tuple as a whoel is by reference
};
#endiv
#divert <ipp>
template<typename CHAR, typename TRAITS, typename... VALUES> format::detail::tuple::Emittable<CHAR, TRAITS, VALUES...>::Emittable(separator_type arg_separator, value_type const &arg_value)
  : separator(arg_separator)
  , value(arg_value) {
  ;
}
#endiv

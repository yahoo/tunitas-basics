// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenace see the LICENSE file at the top of the repository.
#divert <fpp>
namespace format::detail::tuple {
  //
  // tuple::Formatter<...> only is defined for tuples
  //    tuples-of-values
  //    tuples-of-const-references
  //
  template<typename VALUE> class Formatter;
}
#entail format.detail.tuple.Formatter.value
#entail format.detail.tuple.Formatter.reference
#endiv
#divert <hpp>
#import std.basic_ostream
namespace format::detail::tuple {
  // Where VALUES can be
  //    VALUES...           pass by value
  //    VALUES const &...   pass by const reference
  template<typename CHAR, typename TRAITS, typename... VALUES> inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, Formatter<std::tuple<VALUES...>> const &) -> std::basic_ostream<CHAR, TRAITS> &;
}

template<typename VALUE> class format::detail::tuple::Formatter {
  //
  // Only allow Formatter<std::tuple<VALUES...>>
  //
  static_assert((0 == sizeof (VALUE) || 0 != sizeof (VALUE)), "only specializations on std::tuple");
};
#endiv
#divert <ipp>
#import format.detail.tuple.Inserter
#import c.const_stringn
template<typename CHAR, typename TRAITS, typename... VALUES> auto format::detail::tuple::operator<<(std::basic_ostream<CHAR, TRAITS> &o, Formatter<std::tuple<VALUES...>> const &d) -> std::basic_ostream<CHAR, TRAITS> & {
  auto const lparen = CHAR('(');
  auto const rparen = CHAR(')');
  constexpr std::size_t const N = std::tuple_size<std::tuple<VALUES...>>::value;
  if constexpr (0 == N) {
    return o << lparen << rparen;
  } else {
  c::const_stringn const comma(", ");
    Inserter<CHAR, TRAITS, 1==N, 1, N, VALUES...> rest(comma, d.value);
    return o << lparen << std::get<0>(d.value) << rest << rparen;
  }
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.size_t
namespace format::detail::tuple {
  template<typename CHAR, typename TRAITS, bool DONE, std::size_t I, std::size_t N, typename... VALUES> struct Inserter;
}
#entail format.detail.tuple.Inserter.true
#entail format.detail.tuple.Inserter.false
#endiv
#divert <hpp>
#import std.basic_ostream
namespace format::detail::tuple {
  template<typename CHAR, typename TRAITS, bool DONE, std::size_t I, std::size_t N, typename... VALUES> inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, Inserter<CHAR, TRAITS, DONE, I, N, VALUES...> const &) -> std::basic_ostream<CHAR, TRAITS> &;
}

template<typename CHAR, typename TRAITS, bool DONE, std::size_t I, std::size_t N, typename... VALUES> struct format::detail::tuple::Inserter {
  static_assert(DONE && !DONE, "specializations only");
};
#endiv
#divert <ipp> 
template<typename CHAR, typename TRAITS, bool DONE, std::size_t I, std::size_t N, typename... VALUES> auto format::detail::tuple::operator<<(std::basic_ostream<CHAR, TRAITS> &out, Inserter<CHAR, TRAITS, DONE, I, N, VALUES...> const &ins) -> std::basic_ostream<CHAR, TRAITS> & {
  ins.emit(out);
  return out;
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenace see the LICENSE file at the top of the repository.
#divert <fpp>
#forward format.detail.Formatter
#import std.tuple
namespace format::detail {
  //
  // The tuple is always captured by reference
  //
  template<typename... VALUES> class Formatter<std::tuple<VALUES const &...>, std::tuple<VALUES const &...> const &>;
}
#endiv
#divert <hpp>
template<typename... VALUES> class format::detail::Formatter<std::tuple<VALUES const &...>, std::tuple<VALUES const &...> const &> {
public:
  //
  // recall that Formatter<tuple<...>> operates solely in service of format::tuple(...)
  //
  // WATCHOUT - using a reference to capture the tuple value will not work.
  // Capture-by-reference fails because format::tuple(...) constructs a tuple which is passed by value.
  // That constructed tuple contains the references; the references are *in* the tuple.
  //
  using value_type = std::tuple<VALUES const &...>;
  using capture_type = value_type; // <----- NOT a reference
  using argument_type = value_type const &;
  inline explicit Formatter(argument_type);
  inline Formatter(value_type &&) = delete;
  capture_type value;
};
#endiv
#divert <ipp>
template<typename... VALUES> format::detail::Formatter<std::tuple<VALUES const &...>>::Formatter(argument_type arg_value)
  : value(arg_value) {
  ;
}
#endiv

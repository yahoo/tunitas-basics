// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenace see the LICENSE file at the top of the repository.
#divert <hpp>
#import format.integral.Formatter
#import format.required.Character
#import format.required.Character_Traits
#import nonstd.int128_t
#import nonstd.uint128_t
#import std.basic_ostream
namespace format::integral {
  //
  // The formatter of large types (in a numeric representation)
  //
  // This is an overload on the operator<< not on the Formatter structure itself.
  template<required::Character CHAR, required::Character_Traits TRAITS> inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, Formatter<nonstd::int128_t> const &) -> std::basic_ostream<CHAR, TRAITS> &;
  template<required::Character CHAR, required::Character_Traits TRAITS> inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, Formatter<nonstd::uint128_t> const &) -> std::basic_ostream<CHAR, TRAITS> &;
}
#endiv
#divert <ipp>
#import nonstd.int128.ostream
namespace format {
  template<required::Character CHAR, required::Character_Traits TRAITS> auto integral::operator<<(std::basic_ostream<CHAR, TRAITS> &o, Formatter<nonstd::int128_t> const &f) -> std::basic_ostream<CHAR, TRAITS> & {
    using nonstd::int128::operator<<;
    return o << f.value;
  }
  template<required::Character CHAR, required::Character_Traits TRAITS> auto integral::operator<<(std::basic_ostream<CHAR, TRAITS> &o, Formatter<nonstd::uint128_t> const &f) -> std::basic_ostream<CHAR, TRAITS> & {
    using nonstd::int128::operator<<;
    return o << f.value;
  }
}
#endiv

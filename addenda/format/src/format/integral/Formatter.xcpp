// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import format.required.Integer
namespace format::integral {
  //
  // The formatter of integral types (in a numeric representation)
  //
  template<required::Integer INTEGER> class Formatter;
}
#endiv
#divert <hpp>
#import std.basic_ostream
#import format.required.Character
#import format.required.Character_Traits
namespace format::integral {
  template<required::Character CHAR, required::Character_Traits TRAITS, required::Integer INTEGER> inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, Formatter<INTEGER> const &) -> std::basic_ostream<CHAR, TRAITS> &;
}
#import format.detail.Formatter
template<format::required::Integer INTEGER> class format::integral::Formatter : public detail::Formatter<INTEGER, INTEGER> {
  using ancestor = detail::Formatter<INTEGER, INTEGER>;
public:
  using ancestor::Formatter;
};
#entail format.integral.Formatter.small
#entail format.integral.Formatter.large
#endiv
#divert <ipp>
namespace format {
  template<required::Character CHAR, required::Character_Traits TRAITS, required::Integer INTEGER> auto integral::operator<<(std::basic_ostream<CHAR, TRAITS> &o, Formatter<INTEGER> const &f) -> std::basic_ostream<CHAR, TRAITS> & {
    // these naturally print "as integers" in the current formatting (bit?, dec, oct, hex);
    return o << f.value;
  }
}
#endiv

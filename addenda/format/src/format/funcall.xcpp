// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenace see the LICENSE file at the top of the repository.
#divert <hpp>
#import format.detail.funcall.Formatter
#import format.required.Element
namespace format {
  //
  // usage:
  //
  //     auto container = std::list<int>{1,2,3,4,5}
  //     std::cout << funcall(container);
  //
  // VALUE may be anything operable with operator<< , but especially a CONTAINER or std::tuple
  //
  // Of course, the reference to the VALUE must last for the lifetime of the formatter object
  template<required::Element NAME, typename... VALUES> inline auto funcall(NAME const &, VALUES const &...) -> detail::funcall::Formatter<NAME, VALUES...>;
}
#endiv
#divert <ipp>
template<format::required::Element NAME, typename... VALUES> auto format::funcall(NAME const &name, VALUES const &...values) -> detail::funcall::Formatter<NAME, VALUES...> {
  return detail::funcall::Formatter<NAME, VALUES...>(name, values...);
}
#endiv

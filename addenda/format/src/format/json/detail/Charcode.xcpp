// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import format.json.required.Character
namespace format::json::detail {
  //
  // usage:
  //    outbound << Charcode<CHAR>('a') << Charcode<CHAR>('\t') << Charcode<CHAR>('\ff')
  //
  template<required::Character VALUE> class Charcode;
}
#endiv
#divert <hpp>
#import std.basic_ostream
namespace format::json::detail {
  template<required::Character CHAR, typename TRAITS> inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, Charcode<CHAR> const &) -> std::basic_ostream<CHAR, TRAITS> &;
}

#import format.detail.Formatter
template<format::json::required::Character VALUE> class format::json::detail::Charcode : public format::detail::Formatter<VALUE, VALUE> {
  // Indeed, capture the formattable character by value.
  using ancestor = format::detail::Formatter<VALUE, VALUE>;
public:
  using ancestor::Formatter;
};
#endiv
#divert <ipp>
#import std.basic_string
#import std.hex
#import std.setw
#import std.setfill
#import std.isprint
#import std.uint64_t
template<format::json::required::Character CHAR, typename TRAITS> auto format::json::detail::operator<<(std::basic_ostream<CHAR, TRAITS> &o, Charcode<CHAR> const &q) -> std::basic_ostream<CHAR, TRAITS> & {
  //
  // See http://json.org
  // We are inverting the parsing recipe
  //
  CHAR const BS('\\');
  CHAR c = CHAR();
  switch (q.value) {
  case CHAR('"'):
  case CHAR('\\'):
  case CHAR('/'):
    c = q.value;
    break;
  case CHAR('\b'):
    c = CHAR('b');
    break;
  case CHAR('\f'):
    c = CHAR('f');
    break;
  case CHAR('\n'):
    c = CHAR('n');
    break;
  case CHAR('\t'):
    c = CHAR('t');
    break;
  default:
    // To the extent that isprint(...) handles unicode (it does not)
    if (std::isprint(q.value)) {
      return o << q.value;
    } else {
      // 1. Expecting the emission of unprintables to be rare,
      //    reset the stream back to decimal when done.
      // 2. Characters are signed, so watchout for sign extension into the 'int'
      // 3. Characters can be 8, 16 & 32 bits, whereas this is a template on CHAR.
      std::uint64_t const MASK = (1<<(sizeof (CHAR)<<3)) - 1;
      auto presentable = q.value & MASK;
      static_assert(sizeof (CHAR) < sizeof (presentable), "fail");
      return o << BS << CHAR('u') << std::setfill(CHAR('0')) << std::setw(4) << std::hex << presentable << std::dec;
    }
  }
  return o << BS << c;
}
#endiv

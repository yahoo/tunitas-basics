// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenace see the LICENSE file at the top of the repository.
#divert <hpp>
#forward format.json.detail.QuoteQuote
#import std.basic_ostream
namespace format::json::detail {
  template<typename CHAR, typename TRAITS> auto operator<<(std::basic_ostream<CHAR, TRAITS> &, QuoteQuote<std::nullptr_t> const &) -> std::basic_ostream<CHAR, TRAITS> &;
}
#endiv
#divert <ipp>
#import format.json.detail.QuoteQuote
#include <cassert>
template<typename CHAR, typename TRAITS> auto format::json::detail::operator<<(std::basic_ostream<CHAR, TRAITS> &o, QuoteQuote<std::nullptr_t> const &q) -> std::basic_ostream<CHAR, TRAITS> & {
  CHAR const QQ('"');
  CHAR const word[] = { CHAR('n'), CHAR('u'), CHAR('l'), CHAR('l'), CHAR('\0') };
  assert(nullptr == q.value);
  // We are emitting a (quoted) string representation of the data type.
  // We are NOT emitting the JSON literal 'null'
  return o << QQ << word << QQ;
}
#endiv

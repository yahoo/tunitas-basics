// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import format.json.required.Stringlike
#import format.json.required.Literally
namespace format::json::detail {
  template<required::Stringlike, required::Literally> class Pair;
}
#endiv
#divert <hpp>
#import std.basic_ostream
#import format.json.detail.QuoteQuote
#import format.json.detail.Literal
template<format::json::required::Stringlike STRING, format::json::required::Literally LITERAL> class format::json::detail::Pair {
public:
  using lhs_type = STRING;
  using rhs_type = LITERAL;
  using bound_lhs_type = QuoteQuote<lhs_type>;
  using bound_rhs_type = Literal<rhs_type>;
  inline Pair(lhs_type const &, rhs_type const &);
protected:
  template<typename C, typename T> friend auto operator<<(std::basic_ostream<C, T> &o, Pair const &p) -> std::basic_ostream<C, T> & {
    return o << p.lhs << ':' << p.rhs;
  }
  bound_lhs_type lhs;
  bound_rhs_type rhs;
};
#endiv
#divert <ipp>
template<format::json::required::Stringlike STRING, format::json::required::Literally LITERAL> format::json::detail::Pair<STRING, LITERAL>::Pair(lhs_type const &arg_lhs, rhs_type const &arg_rhs)
  : lhs(arg_lhs)
  , rhs(arg_rhs) {
  ;
}
#endiv

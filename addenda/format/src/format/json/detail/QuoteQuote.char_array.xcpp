// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenace see the LICENSE file at the top of the repository.
#divert <hpp>
#import format.json.required.Character
#forward format.json.detail.QuoteQuote
#import std.basic_ostream
#import std.size_t
namespace format::json::detail {
  template<typename CHAR, typename TRAITS, std::size_t N> inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, QuoteQuote<CHAR const [N]> const &) -> std::basic_ostream<CHAR, TRAITS> & requires required::Character<CHAR>;
  template<typename CHAR, typename TRAITS, std::size_t N> inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, QuoteQuote<CHAR [N]> const &) -> std::basic_ostream<CHAR, TRAITS> & requires required::Character<CHAR>;
}
#endiv
#divert <ipp>
#import format.json.detail.QuoteQuote
#import format.json.charcode
template<typename CHAR, typename TRAITS, std::size_t N> auto format::json::detail::operator<<(std::basic_ostream<CHAR, TRAITS> &o, QuoteQuote<CHAR const [N]> const &q) -> std::basic_ostream<CHAR, TRAITS> & requires required::Character<CHAR> {
  if (o) {
    CHAR const QQ('"');
    o << QQ;
    for (auto c : q.value) {
      // If you want to emit character buffers containing embedded '\0' characters
      // then use std::string_view, std::string, c::stringn, c::const_stringn
      if (CHAR() == c) { // <------- still respecting the '\0' sentinel from C string conventions
        break;
      }
      o << charcode(c);
    }
    o << QQ;
  }
  return o;
}

template<typename CHAR, typename TRAITS, std::size_t N> auto format::json::detail::operator<<(std::basic_ostream<CHAR, TRAITS> &o, QuoteQuote<CHAR [N]> const &q) -> std::basic_ostream<CHAR, TRAITS> & requires required::Character<CHAR> {
  QuoteQuote<CHAR const [N]> cq(q.value);
  return o << cq;
}
#endiv

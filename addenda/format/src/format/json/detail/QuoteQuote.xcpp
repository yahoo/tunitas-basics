// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace format::json::detail {
  //
  // usage:
  //    outbound << qq(THING)
  //
  template<typename VALUE> class QuoteQuote;
}
#entail format.json.detail.QuoteQuote.null
#entail format.json.detail.QuoteQuote.bool
#entail format.json.detail.QuoteQuote.char
#entail format.json.detail.QuoteQuote.char_array
#entail format.json.detail.QuoteQuote.char_pointer
#entail format.json.detail.QuoteQuote.Numeric
#entail format.json.detail.QuoteQuote.String
#endiv
#divert <hpp>
#import std.basic_ostream
namespace format::json::detail {
  template<typename CHAR, typename TRAITS, typename VALUE> inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, QuoteQuote<VALUE> const &) -> std::basic_ostream<CHAR, TRAITS> &;
}

#import format.detail.Formatter
template<typename VALUE> class format::json::detail::QuoteQuote : public format::detail::Formatter<VALUE> {
  using ancestor = format::detail::Formatter<VALUE>;
public:
  using ancestor::Formatter;
};
#endiv
#divert <ipp>
#import std.basic_string
#import boost.lexical_cast
template<typename CHAR, typename TRAITS, typename VALUE> auto format::json::detail::operator<<(std::basic_ostream<CHAR, TRAITS> &o, QuoteQuote<VALUE> const &q) -> std::basic_ostream<CHAR, TRAITS> & {
  // Get the syntax (which may have embedded " characters in it
  auto manifest = boost::lexical_cast<std::basic_string<CHAR, TRAITS>>(q.value);
  // Quote that manifest syntax
  QuoteQuote<std::basic_string<CHAR, TRAITS>> qqm(manifest);
  return o << manifest;
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.char_traits
namespace format::json::detail {
  template<typename VALUE> class Literal;
}
#endiv
#divert <hpp>
// Import the declarations first so that the class can be friends with the definition, relevant in <ipp>
#import format.json.detail.Literal.bool
#import format.json.detail.Literal.char
#import format.json.detail.Literal.nullptr_t
#import format.json.detail.Literal.Numeric
#import format.json.detail.Literal.Stringlike

template<typename VALUE> class format::json::detail::Literal {
public:
  using value_type = VALUE;
  inline explicit Literal(value_type const &);
protected:
  template<typename C, typename T> friend auto operator<<(std::basic_ostream<C, T> &o, Literal const &l) -> std::basic_ostream<C, T> & {
    return operator_ltlt(o, l.value);
  }
  value_type const &value;
};
#endiv
#divert <ipp>
template<typename VALUE> format::json::detail::Literal<VALUE>::Literal(value_type const &arg_value)
  : value(arg_value) {
  ;
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenace see the LICENSE file at the top of the repository.
#divert <hpp>
#import format.json.required.Literally
#import format.json.required.Stringlike
#import format.json.detail.Pair
namespace format::json {
  //
  // usage:
  //
  //     std::cout << '{' << json::pair("lhs", rhs) << '}';
  //
  // for various values of rhs conforming to required::Literally.  Per JSON, the lhs is always a stringy thingy.
  //
  // Of course
  //   the reference to the STRINGY must last for the lifetime of the formatter object
  //   the reference to the VALUE must last for the lifetime of the formatter object
  template<required::Stringlike STRINGY, required::Literally VALUE> inline auto pair(STRINGY const &, VALUE const &) -> detail::Pair<STRINGY, VALUE>;
}
#endiv
#divert <ipp>
template<format::json::required::Stringlike STRINGY, format::json::required::Literally VALUE> auto format::json::pair(STRINGY const &lhs, VALUE const &rhs) -> detail::Pair<STRINGY, VALUE> {
  return detail::Pair<STRINGY, VALUE>(lhs, rhs);
}
#endiv

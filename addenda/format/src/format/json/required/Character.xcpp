// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenace see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.is_same
namespace format::json::required {
  //
  // A character.
  //
  // recall that 'char signed' (std::int8_t) and 'char unsigned' (std::uint8_t) are conceptually 8-bit integers.
  // ahem... even if they don't print that way.
  //
  template<typename CHARACTER> concept Character = 
    (std::is_same<char, CHARACTER>::value ||
     std::is_same<wchar_t, CHARACTER>::value ||
     std::is_same<char16_t, CHARACTER>::value ||
     std::is_same<char32_t, CHARACTER>::value)
    &&
    !(// pedantically reminding that ...
      std::is_same<char unsigned, CHARACTER>::value ||
      std::is_same<char signed, CHARACTER>::value);
}

namespace format::json::required {
  // whereas 'char unsigned' and 'char signed' are integers
  // ahem, [problem] though they print as characters
  static_assert(Character<char>, "Fail");
  static_assert(Character<wchar_t>, "fail");
  static_assert(Character<char16_t>, "fail");
  static_assert(Character<char32_t>, "fail");
}
#endiv

// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenace see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.is_integral
#import std.is_floating_point
#import std.ostream
namespace format::json::required {
  //
  // A numeric literal
  // They are shaped basically the same for JSON and C++
  // Yet the two languages differ in the precision afforded by the syntax.
  //
  // WATCHOUT - not dealt with here 32-vs-64-vs-128 bits
  // Wherwas JSON is "defined on 32 bits" any use of 64-bit quantities is fraught (i.e. the reader may refuse to accept)
  //
  // WATCHOUT - 'long double' is not defined for JSON (but is allowed here)
  //
  template<typename NUMERIC> concept bool Numeric =
    (std::is_integral<NUMERIC>::value ||
     std::is_floating_point<NUMERIC>::value) && requires(NUMERIC numeric, std::ostream &outbound) {
    outbound << numeric;
  };
}

namespace format::json::required {
  // (non-obviously) char-with-signage is not a character but a small integer
  static_assert(Numeric<char signed>, "fail");
  static_assert(Numeric<char unsigned>, "fail");
  // obviously these are numeric
  static_assert(Numeric<int short signed>, "fail");
  static_assert(Numeric<int short unsigned>, "fail");
  static_assert(Numeric<int signed>, "fail");
  static_assert(Numeric<int unsigned>, "fail");
  static_assert(Numeric<int long signed>, "fail");
  static_assert(Numeric<int long unsigned>, "fail");
  static_assert(Numeric<int long long signed>, "fail");
  static_assert(Numeric<int long long unsigned>, "fail");
  static_assert(Numeric<float>, "fail");
  static_assert(Numeric<double>, "fail");
  static_assert(Numeric<long double>, "fail");
}
#endiv

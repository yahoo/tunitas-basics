// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenace see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.basic_ostream
#import std.char_traits
#import std.conditional
#import std.false_type
#import std.is_same
#import std.remove_const
#import std.true_type
namespace format::required {
  //
  // The minimal statement of an character object necessary for output formatting.
  // Characters are special because the language has literals of '\0'-terminated arrays of such.
  //
  namespace detail_detail::const_cleaned {
    //
    // These require const-clean arguments.  They are an implementation detail
    // Reminder, the outer interface is frequently called with 'char const'
    // by when used against c::const_stringz, c::const_stringn, etc.
    //
    template<typename CHARACTER> struct is_character {
      using char_type = CHARACTER;
      static_assert(!std::is_const<char_type>::value, "is still const, why?");
      static constexpr auto const value = (std::is_same<char, char_type>::value ||
                                           std::is_same<wchar_t, char_type>::value ||
                                           std::is_same<char16_t, char_type>::value ||
                                           std::is_same<char32_t, char_type>::value);
      using type = typename std::conditional<value, std::true_type, std::false_type>::type;
    };
    template<typename CHARACTER> concept Character = requires(CHARACTER character, CHARACTER const *string, std::basic_ostream<CHARACTER, std::char_traits<CHARACTER>> &outbound) {
      requires is_character<CHARACTER>::value;
      { outbound << character };
      { outbound << string };
    };
  }
  template<typename CHARACTER> using is_character = detail_detail::const_cleaned::is_character<typename std::remove_const<CHARACTER>::type>;
  template<typename CHARACTER> concept Character = detail_detail::const_cleaned::Character<typename std::remove_const<CHARACTER>::type>;
  template<typename CHARACTER> concept Not_Character = !Character<CHARACTER>;
}
#endiv

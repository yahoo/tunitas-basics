// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenace see the LICENSE file at the top of the repository.
#divert <fpp>
#import format.required.integer.Signed
#import format.required.integer.Unsigned
namespace format::required {
  //
  // What constitutes an integer?
  // .. for the purpose of formatting.
  //
  //    small:    int8_t, uint8_t, 
  //    medium:   (the usual pantheon of short, medium, long, long long)
  //    large:    nonstd::int128_t, nonstd::uint128_t
  //
  //    signed or unsigned
  //
  template<typename INTEGER> concept bool Integer = integer::Signed<INTEGER> || integer::Unsigned<INTEGER>;
}
#endiv
#divert <cpp>
#import nonstd.integers
namespace format::required {
  using namespace nonstd::integers;
  // signed
  static_assert(Integer<nonstd::int8_t>);
  static_assert(Integer<nonstd::int16_t>);
  static_assert(Integer<nonstd::int32_t>);
  static_assert(Integer<nonstd::int64_t>);
  static_assert(Integer<nonstd::int128_t>);
  // unsigned
  static_assert(Integer<nonstd::uint8_t>);
  static_assert(Integer<nonstd::uint16_t>);
  static_assert(Integer<nonstd::uint32_t>);
  static_assert(Integer<nonstd::uint64_t>);
  static_assert(Integer<nonstd::uint128_t>);
}
#endiv

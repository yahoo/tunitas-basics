// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import format.required.Character
#import std.ostream
namespace format::required {
  //
  // What constitutes a string?  Not what you think
  // .. for the purpose of formatting.
  //
  //    data()            (which must return a pointer, possibly NOT '\0'-terminated)
  //    empty()
  //    operator<< on ostream (and thus on any instantiation of basic_ostream
  //
  // A Stringlike and a Container are different because of data()
  //
  template<typename STRINGLIKE> concept bool Stringlike = requires(STRINGLIKE stringlike, std::ostream &outbound) {
    typename STRINGLIKE::value_type;
    requires Character<typename STRINGLIKE::value_type>;
    { stringlike.data() } -> typename STRINGLIKE::value_type const *; // maybe NOT '\0'-terminated
    { stringlike.empty() } -> bool;
    { outbound << stringlike };
  };
}

#import c.stringn
#import c.const_stringn
#import c.stringz
#import c.const_stringz
#import std.string
#import std.string_view
namespace format {
  // positive examples
  static_assert(required::Stringlike<c::stringn>, "fail");
  static_assert(required::Stringlike<c::const_stringn>, "fail");
  static_assert(required::Stringlike<c::stringz>, "fail");
  static_assert(required::Stringlike<c::const_stringz>, "fail");
  static_assert(required::Stringlike<std::string>, "fail");
  static_assert(required::Stringlike<std::string_view>, "fail");
}
#endiv

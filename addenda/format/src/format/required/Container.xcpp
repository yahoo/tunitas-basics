// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenace see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.ostream
#import std.begin
#import std.empty
#import std.end
#import format.required.Character
#import format.required.Stringlike
namespace format::required {
  //
  // The minimal statement of a container object necessary for output formatting.
  // And how shall we identify the containers?
  // They can iterate their elements
  //
  // Yet, for the purposes here, std:basic_string, std::basic_string_view
  // shall be treated separately because they contain characters, not "objects"
  // [FIXME who cares?  why make this distinction?]
  //
  template<typename CONTAINER> concept bool Container = requires(CONTAINER const &container, std::ostream &outbound) {
    // a container manages some values, iterators over them and can print individual ones
    typename CONTAINER::value_type;
    typename CONTAINER::const_iterator;
    { std::begin(container) } -> typename CONTAINER::const_iterator;
    { std::end(container) } -> typename CONTAINER::const_iterator;
    { std::empty(container) } -> bool;
    { outbound << *container.begin() };
  } && ! requires(CONTAINER const &stringlike, std::ostream &outbound) {
      // but if it manages characters, and the whole can be printed atomically, then it is a "string" not a "container"
      requires Character<typename CONTAINER::value_type>;
      requires Stringlike<CONTAINER>;
      { outbound << stringlike };
    };
}
#endiv
#divert <cpp>
#import c.stringn
#import c.const_stringn
#import c.stringz
#import c.const_stringz
#import std.string
#import std.string_view
#import std.set
#import std.vector
namespace format {
  // test code
  // positive examples
  static_assert(required::Container<std::set<std::string>>, "fail");
  static_assert(required::Container<std::vector<int>>, "fail");
  // negative examples
  static_assert(!required::Container<std::string>, "fail");
  static_assert(!required::Container<std::string_view>, "fail");
  static_assert(!required::Container<c::stringn>, "fail");
  static_assert(!required::Container<c::stringz>, "fail");
}
#endiv

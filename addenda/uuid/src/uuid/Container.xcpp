// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace uuid {
  class Container;
}
#endiv
#divert <hpp>
#import std.ostream
#import std.istream
#import uuid.Type
#import uuid.Variant
#import uuid.detail.Wrapper
namespace uuid {

  inline auto operator==(Container const &, Container const &) -> bool;
  inline auto operator!=(Container const &, Container const &) -> bool;

  inline auto operator<(Container const &, Container const &) -> bool;
  inline auto operator<=(Container const &, Container const &) -> bool;

  inline auto operator>(Container const &, Container const &) -> bool;
  inline auto operator>=(Container const &, Container const &) -> bool;

  inline auto operator<<(std::ostream &, Container const &) -> std::ostream &;
  auto operator>>(std::istream &, Container &fill) -> std::istream &;

}
namespace uuid {
  // ADL expects to find it here.
  inline auto to_string(Container const &) -> std::string;
}

class uuid::Container : public detail::Wrapper {
  using ancestor = detail::Wrapper;
public:
  inline Container();
  inline auto clear() -> void;
  inline auto is_null() const -> bool;
  inline auto type() const -> Type;
  inline auto variant() const -> Variant;
public:
  struct tests { struct Suite; };
  friend struct tests::Suite;
};
#endiv
#divert <ipp>
#import uuid

#import uuid.compare
auto uuid::operator==(Container const &a, Container const &b) -> bool {
  return 0 == compare(a, b);
}

auto uuid::operator!=(Container const &a, Container const &b) -> bool  {
  return 0 != compare(a, b);
}

auto uuid::operator<(Container const &a, Container const &b) -> bool {
  return compare(a, b) < 0;
}

auto uuid::operator<=(Container const &a, Container const &b) -> bool {
  return compare(a, b) <= 0;
}

auto uuid::operator>(Container const &a, Container const &b) -> bool {
  return compare(a, b) > 0;
}

auto uuid::operator>=(Container const &a, Container const &b) -> bool {
  return compare(a, b) >= 0;
}

#import uuid.unparse
auto uuid::operator<<(std::ostream &o, Container const &c) -> std::ostream & {
  char buf[detail::BUFFER_SIZE];
  unparse(c, buf);
  return o << buf;
}
auto uuid::to_string(Container const &c) -> std::string {
  std::string ret;
  uuid::unparse(c, ret);
  return ret;
}
#import uuid.clear
uuid::Container::Container()
  : ancestor() {
  uuid::clear(*this);
}

#import uuid.clear
auto uuid::Container::clear() -> void {
  uuid::clear(*this);
}

#import uuid.is_null
auto uuid::Container::is_null() const -> bool {
  return uuid::is_null(*this);
}

#import uuid.type
auto uuid::Container::type() const -> Type {
  return uuid::type(*this);
}

#import uuid.variant
auto uuid::Container::variant() const -> Variant {
  return uuid::variant(*this);
}
#endiv
#divert <cpp>
#import std.ios
#import std.istream
#import std.streamsize
#import uuid.detail
#import uuid.parse
#import std.cerr
auto uuid::operator>>(std::istream &i, Container &fill) -> std::istream & {
  static_assert(detail::SYNTAX_SIZE + 1 == detail::BUFFER_SIZE, "SYNTAX_SIZE and BUFFER_SIZE don't match");
  std::streamsize before = i.tellg();
  char buf[detail::BUFFER_SIZE];
  if (i.read(buf, detail::SYNTAX_SIZE)) {
    std::streamsize after = i.tellg();
    if (after - before == detail::SYNTAX_SIZE) {
      buf[detail::SYNTAX_SIZE] = '\0';
      if (parse(buf, fill)) {
	// good
	return i;
      }
    }
    // We failed to read or to parse or something went wrong
    i.setstate(std::ios::failbit);
  }
  return i;   
}
#endiv

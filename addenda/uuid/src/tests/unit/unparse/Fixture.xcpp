// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace tests {
  namespace unit {
    namespace unparse {
      class Fixture;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::unparse::Fixture : public cppunit::test::Fixture {
public:
  auto test_char_pointer() -> void;
  auto test_string() -> void;
  auto test_vector() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import uuid.unparse
#import uuid.parse
#import uuid.Container

auto tests::unit::unparse::Fixture::test_char_pointer() -> void {
  uuid::Container thing;
  auto r = uuid::parse("e9c5ab16-7ed5-49e5-82aa-4d18d5fb610b", thing);
  CPPUNIT_ASSERT(r);
  char buf[37];
  uuid::unparse(thing, &buf[0]);
  buf[36] = '\0';
  CPPUNIT_ASSERT(std::string(buf) == "e9c5ab16-7ed5-49e5-82aa-4d18d5fb610b");
}

auto tests::unit::unparse::Fixture::test_string() -> void {
  uuid::Container thing;
  auto r = uuid::parse("a4298745-6c07-414b-a2ae-55de31df4d42", thing);
  CPPUNIT_ASSERT(r);
  std::string buf;
  uuid::unparse(thing, buf);
  CPPUNIT_ASSERT(std::string(buf) == "a4298745-6c07-414b-a2ae-55de31df4d42");
}

auto tests::unit::unparse::Fixture::test_vector() -> void {
  uuid::Container thing;
  auto r = uuid::parse("53fb5994-89fb-4144-88f2-64922864ada4", thing);
  CPPUNIT_ASSERT(r);
  std::vector<char> buf;
  uuid::unparse(thing, buf);
  CPPUNIT_ASSERT(std::string(buf.begin(), buf.end()) == "53fb5994-89fb-4144-88f2-64922864ada4");
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
#import unit.rigging.suite.add
auto tests::unit::unparse::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("unparse");
  s << call("char_pointer", &Fixture::test_char_pointer)
    << call("string", &Fixture::test_string)
    << call("vector", &Fixture::test_vector)
    ;
  return finalize(s);
}
#endiv

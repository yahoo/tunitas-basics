// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <cpp>
#import tests.unit.container.Fixture
#import tests.unit.generate.Fixture
#import tests.unit.parse.Fixture
#import tests.unit.time.Fixture
#import tests.unit.unparse.Fixture
#import tests.unit.unparsing.Fixture

#import unit.rigging.Exit
#import unit.rigging.exit.constants
#import unit.rigging.test.Bench

#import std.string
#import std.cerr
#import std.clog
#import std.exception
#import std.ostream

namespace ur = unit::rigging;
namespace urt = ur::test;
namespace ex = ur::exit;

namespace {
  auto emit_usage(std::ostream &) -> void;
}

auto main(int argc, char **argv) -> int {
  try {
    std::string test_name;
    if (1 == argc) {
      test_name = "";
    } else if (2 == argc) {
      test_name = argv[1];
    } else {
      std::cerr << "Error: only a single test name can be indicated\n";
      throw ex::USAGE;
    }

    urt::Bench bench(std::clog);
    bench.addTest(tests::unit::container::Fixture::suite());
    bench.addTest(tests::unit::generate::Fixture::suite());
    bench.addTest(tests::unit::parse::Fixture::suite());
    bench.addTest(tests::unit::time::Fixture::suite());
    bench.addTest(tests::unit::unparse::Fixture::suite());
    bench.addTest(tests::unit::unparsing::Fixture::suite());

    ur::Exit exit;
    exit &= bench.run(test_name);
    std::clog << exit << '\n';
    return exit;
  } catch (unit::rigging::Exit const &exit) {
    // This was expected
    if (ex::USAGE == exit) {
      emit_usage(std::clog);
    }
    return exit;
  } catch (std::exception const &e) {
    // This was not expected
    std::cerr << "Error: " << e.what() << '\n';
    return ex::SOFTWARE;
  }
}

namespace {

  auto emit_usage(std::ostream &out) -> void {
    out << ("usage: unit { --list | test_name }\n"
            "\n"
            "... if no arguments is indicated then all tests are run\n");
  }

}
#endiv

// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace tests {
  namespace unit {
    namespace container {
      class Fixture;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import std.string
#import uuid.Container
class tests::unit::container::Fixture : public cppunit::test::Fixture {
public:
  auto test_constructor_default() -> void;
  auto test_constructor_initializing0() -> void;
  auto test_constructor_initializing1() -> void;

  auto test_constructor_copy0() -> void;
  auto test_constructor_copy1() -> void;
  auto test_constructor_move0() -> void;
  auto test_constructor_move1() -> void;

  auto test_assignment_copy0() -> void;
  auto test_assignment_copy1() -> void;
  auto test_assignment_move0() -> void;
  auto test_assignment_move1() -> void;

  auto test_generate_constructor() -> void;
  auto test_generate_basic() -> void;
  auto test_generate_random() -> void;
  auto test_generate_time() -> void;
  auto test_generate_time_unsafe() -> void;
  auto test_generate_time_safe() -> void;

  auto test_clear() -> void;
  auto test_is_null() -> void;
  auto test_type() -> void;
  auto test_variant() -> void;

  auto test_operator_eq() -> void;
  auto test_operator_ne() -> void;

  auto test_operator_lt() -> void;
  auto test_operator_le() -> void;

  auto test_operator_gt() -> void;
  auto test_operator_ge() -> void;

  auto test_operator_insert() -> void;
  auto test_operator_extract() -> void;

  auto test_to_string() -> void;

  static auto suite() -> cppunit::Test *;

  static auto all_bits_on() -> ::uuid::Container;
};
#endiv
#divert <cpp>
#import uuid.Container
#import uuid.generate.basic
#import std.cout
#import std.get

#import std.fill_n
auto tests::unit::container::Fixture::all_bits_on() -> ::uuid::Container {
  ::uuid::Container ret;
  using uuid_t_element = char unsigned; // read <uuid/uuid.h> and see
  std::fill_n(&ret.value[0], sizeof (ret.value), (uuid_t_element)(0xff));
  return ret;
}

auto tests::unit::container::Fixture::test_constructor_default() -> void {
  ::uuid::Container a; // <---------- test this
  CPPUNIT_ASSERT(a.is_null());
}

auto tests::unit::container::Fixture::test_constructor_initializing0() -> void {
  ::uuid::Container a = ::uuid::Container(); // <---------- test this
  CPPUNIT_ASSERT(a.is_null());
}

auto tests::unit::container::Fixture::test_constructor_initializing1() -> void {
  ::uuid::Container b = ::uuid::generate::basic(); // <---------- test this
  CPPUNIT_ASSERT(!b.is_null());
}

auto tests::unit::container::Fixture::test_constructor_copy0() -> void {
  ::uuid::Container b = ::uuid::Container();
  CPPUNIT_ASSERT(b.is_null());
  std::cout << "b = " << b << '\n';
  ::uuid::Container c = b; // <---------- test this
  CPPUNIT_ASSERT(c.is_null());
  std::cout << "c = " << c << '\n';
  ::uuid::Container d(c); // <---------- test this
  CPPUNIT_ASSERT(d.is_null());
  CPPUNIT_ASSERT(b == c);
  CPPUNIT_ASSERT(c == d);
}

auto tests::unit::container::Fixture::test_constructor_copy1() -> void {
  ::uuid::Container b = ::uuid::generate::basic();
  CPPUNIT_ASSERT(!b.is_null());
  std::cout << "b = " << b << '\n';
  ::uuid::Container c = b; // <---------- test this
  CPPUNIT_ASSERT(!c.is_null());
  std::cout << "c = " << c << '\n';
  ::uuid::Container d(c); // <---------- test this
  CPPUNIT_ASSERT(!d.is_null());
  CPPUNIT_ASSERT(b == c);
  CPPUNIT_ASSERT(c == d);
}

#import std.move
auto tests::unit::container::Fixture::test_constructor_move0() -> void {
  ::uuid::Container b = ::uuid::Container();
  CPPUNIT_ASSERT(b.is_null());
  std::cout << "b = " << b << '\n';
  ::uuid::Container c = std::move(b); // <---------- test this
  std::cout << "c = " << c << '\n';
  CPPUNIT_ASSERT(c.is_null());
  ::uuid::Container d(std::move(c)); // <---------- test this
  CPPUNIT_ASSERT(d.is_null());
  CPPUNIT_ASSERT(b.is_null());
  CPPUNIT_ASSERT(c == d);
}

auto tests::unit::container::Fixture::test_constructor_move1() -> void {
  ::uuid::Container b = ::uuid::generate::basic();
  CPPUNIT_ASSERT(!b.is_null());
  std::cout << "b = " << b << '\n';
  ::uuid::Container c = std::move(b); // <---------- test this
  std::cout << "c = " << c << '\n';
  CPPUNIT_ASSERT(!c.is_null());
  ::uuid::Container d(std::move(c)); // <---------- test this
  CPPUNIT_ASSERT(!d.is_null());
  CPPUNIT_ASSERT(!b.is_null());
  CPPUNIT_ASSERT(c == d);
}

auto tests::unit::container::Fixture::test_assignment_copy0() -> void {
  ::uuid::Container b = ::uuid::Container();
  CPPUNIT_ASSERT(b.is_null());
  std::cout << "b = " << b << '\n';
  ::uuid::Container c;
  CPPUNIT_ASSERT(c.is_null());
  c = b; // <---------- test this
  CPPUNIT_ASSERT(c.is_null());
  std::cout << "c = " << c << '\n';
  ::uuid::Container d;
  CPPUNIT_ASSERT(d.is_null());
  d = c; // <---------- test this
  CPPUNIT_ASSERT(d.is_null());
  CPPUNIT_ASSERT(b == c);
  CPPUNIT_ASSERT(c == d);
}

auto tests::unit::container::Fixture::test_assignment_copy1() -> void {
  ::uuid::Container b = ::uuid::generate::basic();
  CPPUNIT_ASSERT(!b.is_null());
  std::cout << "b = " << b << '\n';
  ::uuid::Container c;
  CPPUNIT_ASSERT(c.is_null());
  c = b; // <---------- test this
  CPPUNIT_ASSERT(!c.is_null());
  std::cout << "c = " << c << '\n';
  ::uuid::Container d;
  CPPUNIT_ASSERT(d.is_null());
  d = c; // <---------- test this
  CPPUNIT_ASSERT(!d.is_null());
  CPPUNIT_ASSERT(b == c);
  CPPUNIT_ASSERT(c == d);
}

auto tests::unit::container::Fixture::test_assignment_move0() -> void {
  ::uuid::Container b = ::uuid::Container();
  CPPUNIT_ASSERT(b.is_null());
  std::cout << "b = " << b << '\n';
  ::uuid::Container c;
  CPPUNIT_ASSERT(c.is_null());
  c = std::move(b); // <---------- test this
  CPPUNIT_ASSERT(c.is_null());
  std::cout << "c = " << c << '\n';
  ::uuid::Container d;
  CPPUNIT_ASSERT(d.is_null());
  d = std::move(c); // <---------- test this
  CPPUNIT_ASSERT(d.is_null());
  CPPUNIT_ASSERT(b.is_null());
  CPPUNIT_ASSERT(c == d);
}

auto tests::unit::container::Fixture::test_assignment_move1() -> void {
  ::uuid::Container b = ::uuid::Container();
  CPPUNIT_ASSERT(b.is_null());
  std::cout << "b = " << b << '\n';
  ::uuid::Container c;
  CPPUNIT_ASSERT(c.is_null());
  c = std::move(b); // <---------- test this
  CPPUNIT_ASSERT(c.is_null());
  std::cout << "c = " << c << '\n';
  ::uuid::Container d;
  CPPUNIT_ASSERT(d.is_null());
  d = std::move(c); // <---------- test this
  CPPUNIT_ASSERT(d.is_null());
  CPPUNIT_ASSERT(b.is_null());
  CPPUNIT_ASSERT(c == d);
}

auto tests::unit::container::Fixture::test_clear() -> void {
  ::uuid::Container b = ::uuid::Container();
  CPPUNIT_ASSERT(b.is_null());
  b.clear(); // <---------- test this
  CPPUNIT_ASSERT(b.is_null());
}

auto tests::unit::container::Fixture::test_is_null() -> void {
  ::uuid::Container b = ::uuid::Container();
  CPPUNIT_ASSERT(b.is_null()); // <---------- test this
  b.clear();
  CPPUNIT_ASSERT(b.is_null()); // <---------- test this
}

#import uuid.generate.basic
#import uuid.generate.random
#import uuid.generate.time_unsafe
#import uuid.generate.time_safe
auto tests::unit::container::Fixture::test_type() -> void {
  {
    ::uuid::Container u = ::uuid::Container();
    ::uuid::Type t = u.type();
    CPPUNIT_ASSERT(::uuid::Type(99) != t);
  } {
    ::uuid::Container u = ::uuid::generate::basic();
    ::uuid::Type t = u.type();
    CPPUNIT_ASSERT(::uuid::Type(99) != t);
  } {
    ::uuid::Container u = ::uuid::generate::random();
    ::uuid::Type t = u.type();
    CPPUNIT_ASSERT(::uuid::Type(99) != t);
  } {
    ::uuid::Container u = ::uuid::generate::time();
    ::uuid::Type t = u.type();
    CPPUNIT_ASSERT(::uuid::Type(99) != t);
  } {
    auto tup = ::uuid::generate::time_safe();
    ::uuid::Container u = std::get<0>(tup);
    bool safely = std::get<1>(tup);
    CPPUNIT_ASSERT(safely || !safely); // it can legitimately be unsafely done
    ::uuid::Type t = u.type();
    CPPUNIT_ASSERT(::uuid::Type(99) != t);
  }
}

auto tests::unit::container::Fixture::test_variant() -> void {
  {
    ::uuid::Container u = ::uuid::Container();
    ::uuid::Variant v = u.variant();
    CPPUNIT_ASSERT(::uuid::Variant(99) != v);
  } {
    ::uuid::Container u = ::uuid::generate::basic();
    ::uuid::Variant v = u.variant();
    CPPUNIT_ASSERT(::uuid::Variant(99) != v);
  } {
    ::uuid::Container u = ::uuid::generate::random();
    ::uuid::Variant v = u.variant();
    CPPUNIT_ASSERT(::uuid::Variant(99) != v);
  } {
    ::uuid::Container u = ::uuid::generate::time();
    ::uuid::Variant v = u.variant();
    CPPUNIT_ASSERT(::uuid::Variant(99) != v);
  } {
    auto tup = ::uuid::generate::time_safe();
    ::uuid::Container u = std::get<0>(tup);
    bool safely = std::get<1>(tup);
    CPPUNIT_ASSERT(safely || !safely); // it can legitimately be unsafely done
    ::uuid::Variant v = u.variant();
    CPPUNIT_ASSERT(::uuid::Variant(99) != v);
  }
}

auto tests::unit::container::Fixture::test_generate_constructor() -> void {
  ::uuid::Container u = ::uuid::Container();
  ::uuid::Variant v = u.variant();
  CPPUNIT_ASSERT(::uuid::Variant(99) != v);
}

auto tests::unit::container::Fixture::test_generate_basic() -> void {
  ::uuid::Container u = ::uuid::generate::basic();
  ::uuid::Variant v = u.variant();
  CPPUNIT_ASSERT(::uuid::Variant(99) != v);
}

auto tests::unit::container::Fixture::test_generate_random() -> void {
  ::uuid::Container u = ::uuid::generate::random();
  ::uuid::Variant v = u.variant();
  CPPUNIT_ASSERT(::uuid::Variant(99) != v);
}

auto tests::unit::container::Fixture::test_generate_time() -> void {
  ::uuid::Container u = ::uuid::generate::time();
  ::uuid::Variant v = u.variant();
  CPPUNIT_ASSERT(::uuid::Variant(99) != v);
}

auto tests::unit::container::Fixture::test_generate_time_unsafe() -> void {
  ::uuid::Container u = ::uuid::generate::time_unsafe();
  ::uuid::Variant v = u.variant();
  CPPUNIT_ASSERT(::uuid::Variant(99) != v);
}

auto tests::unit::container::Fixture::test_generate_time_safe() -> void {
  auto tup = ::uuid::generate::time_safe();
  ::uuid::Container u = std::get<0>(tup);
  bool safely = std::get<1>(tup);
  CPPUNIT_ASSERT(safely || !safely); // it can legitimately be unafely done, that's the point
  ::uuid::Variant v = u.variant();
  CPPUNIT_ASSERT(::uuid::Variant(99) != v);
}

auto tests::unit::container::Fixture::test_operator_eq() -> void {
  ::uuid::Container u0 = ::uuid::Container();
  ::uuid::Container u1 = ::uuid::generate::time();
  ::uuid::Container u2 = ::uuid::generate::time();
  ::uuid::Container u3 = all_bits_on();
  CPPUNIT_ASSERT(u0 == u0);
  CPPUNIT_ASSERT(u1 == u1);
  CPPUNIT_ASSERT(u2 == u2);
  CPPUNIT_ASSERT(u3 == u3);
  CPPUNIT_ASSERT( ! (u0 == u1) );
  CPPUNIT_ASSERT( ! (u1 == u2) );
  CPPUNIT_ASSERT( ! (u2 == u3) );
  CPPUNIT_ASSERT( ! (u3 == u0) );
}

auto tests::unit::container::Fixture::test_operator_ne() -> void {
  ::uuid::Container u0 = ::uuid::Container();
  ::uuid::Container u1 = ::uuid::generate::time();
  ::uuid::Container u2 = ::uuid::generate::time();
  ::uuid::Container u3 = all_bits_on();
  CPPUNIT_ASSERT( !(u0 != u0) );
  CPPUNIT_ASSERT( !(u1 != u1) );
  CPPUNIT_ASSERT(  (u0 != u1) );
  CPPUNIT_ASSERT(  (u1 != u2) );
  CPPUNIT_ASSERT(  (u2 != u3) );
  CPPUNIT_ASSERT(  (u3 != u0) );
}

auto tests::unit::container::Fixture::test_operator_lt() -> void {
  ::uuid::Container u0 = ::uuid::Container();
  ::uuid::Container u1 = ::uuid::generate::time();
  ::uuid::Container u2 = all_bits_on();
  CPPUNIT_ASSERT( !(u0 < u0) );
  CPPUNIT_ASSERT( !(u1 < u1) );
  CPPUNIT_ASSERT(  (u0 < u1) );
  CPPUNIT_ASSERT(  (u1 < u2) );
  CPPUNIT_ASSERT(  (u0 < u2) );
}

auto tests::unit::container::Fixture::test_operator_le() -> void {
  ::uuid::Container u0 = ::uuid::Container();
  ::uuid::Container u1 = ::uuid::generate::time();
  ::uuid::Container u2 = all_bits_on();
  CPPUNIT_ASSERT(  (u0 <= u0) );
  CPPUNIT_ASSERT(  (u1 <= u1) );
  CPPUNIT_ASSERT(  (u0 <= u1) );
  CPPUNIT_ASSERT(  (u1 <= u2) );
  CPPUNIT_ASSERT(  (u0 <= u2) );
}

auto tests::unit::container::Fixture::test_operator_gt() -> void {
  ::uuid::Container u0 = ::uuid::Container();
  ::uuid::Container u1 = ::uuid::generate::time();
  ::uuid::Container u2 = all_bits_on();
  CPPUNIT_ASSERT( !(u0 > u0) );
  CPPUNIT_ASSERT( !(u1 > u1) );
  CPPUNIT_ASSERT(  (u1 > u0) );
  CPPUNIT_ASSERT(  (u2 > u1) );
  CPPUNIT_ASSERT(  (u2 > u0) );
}

auto tests::unit::container::Fixture::test_operator_ge() -> void {
  ::uuid::Container u0 = ::uuid::Container();
  ::uuid::Container u1 = ::uuid::generate::time();
  ::uuid::Container u2 = all_bits_on();
  CPPUNIT_ASSERT(  (u0 >= u0) );
  CPPUNIT_ASSERT(  (u1 >= u1) );
  CPPUNIT_ASSERT(  (u1 >= u0) );
  CPPUNIT_ASSERT(  (u2 >= u1) );
  CPPUNIT_ASSERT(  (u2 >= u0) );
}

auto tests::unit::container::Fixture::test_operator_insert() -> void {
  ::uuid::Container u0 = ::uuid::Container();
  ::uuid::Container u1 = ::uuid::generate::time();
  ::uuid::Container u2 = all_bits_on();
  std::cout << u0 << '/' << u1 << '/' << u2 << '\n';
}

#import std.stringstream
#import std.ostringstream
auto tests::unit::container::Fixture::test_operator_extract() -> void {
  ::uuid::Container u0 = ::uuid::Container();
  ::uuid::Container u1 = ::uuid::generate::time();
  ::uuid::Container u2 = all_bits_on();
  std::ostringstream obuf;
  char slash1, slash2;
  ::uuid::Container v0, v1, v2;
  obuf << u0 << '/' << u1 << '/' << u2 << '\n';
  std::cout << "obuf = qq!" << obuf.str() << "!\n";
  std::istringstream ibuf(obuf.str());
  ibuf >> v0 >> slash1 >> v1 >> slash2 >> v2;
  CPPUNIT_ASSERT(v0 == u0);
  CPPUNIT_ASSERT('/' == slash1);
  CPPUNIT_ASSERT(v1 == u1);
  CPPUNIT_ASSERT('/' == slash2);
  CPPUNIT_ASSERT(v2 == u2);
}

auto tests::unit::container::Fixture::test_to_string() -> void {
  ::uuid::Container u0 = ::uuid::Container();
  ::uuid::Container u1 = ::uuid::generate::time();
  ::uuid::Container u2 = all_bits_on();
  std::ostringstream obuf;
  obuf << u0 << '/' << u1 << '/' << u2;
  std::string s1 = obuf.str();
  std::string s2;
  s2 += to_string(u0);
  s2 += '/';
  s2 += to_string(u1);
  s2 += '/';
  s2 += to_string(u2);
  CPPUNIT_ASSERT(s1 == s2);
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
#import unit.rigging.suite.add
auto tests::unit::container::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("container");
  s << call("constructor-default", &Fixture::test_constructor_default)
    << call("constructor-initializing-0", &Fixture::test_constructor_initializing0)
    << call("constructor-initializing-1", &Fixture::test_constructor_initializing1)
    << call("constructor-copy-0", &Fixture::test_constructor_copy0)
    << call("constructor-copy-1", &Fixture::test_constructor_copy1)
    << call("constructor-move-0", &Fixture::test_constructor_move0)
    << call("constructor-move-1", &Fixture::test_constructor_move1)
    << call("assignment-copy-0", &Fixture::test_assignment_copy0)
    << call("assignment-copy-1", &Fixture::test_assignment_copy1)
    << call("assignment-move-0", &Fixture::test_assignment_move0)
    << call("assignment-move-1", &Fixture::test_assignment_move1)
    << call("generate-constructor", &Fixture::test_generate_constructor)
    << call("generate-basic", &Fixture::test_generate_basic)
    << call("generate-random", &Fixture::test_generate_random)
    << call("generate-time", &Fixture::test_generate_time)
    << call("generate-time_unsafe", &Fixture::test_generate_time_unsafe)
    << call("generate-time_safe", &Fixture::test_generate_time_safe)
    << call("clear", &Fixture::test_clear)
    << call("is_null", &Fixture::test_is_null)
    << call("type", &Fixture::test_type)
    << call("variant", &Fixture::test_variant)
    << call("operator_eq", &Fixture::test_operator_eq)
    << call("operator_ne", &Fixture::test_operator_ne)
    << call("operator_lt", &Fixture::test_operator_lt)
    << call("operator_le", &Fixture::test_operator_le)
    << call("operator_gt", &Fixture::test_operator_gt)
    << call("operator_ge", &Fixture::test_operator_ge)
    << call("operator_insert", &Fixture::test_operator_insert)
    << call("operator_extract", &Fixture::test_operator_extract)
    << call("to_string", &Fixture::test_to_string)
    ;
  return finalize(s);
}
#endiv

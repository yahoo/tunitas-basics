// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace tests {
  namespace unit {
    namespace time {
      class Fixture;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::time::Fixture : public cppunit::test::Fixture {
public:
  auto test_point() -> void;
  auto test_t() -> void;
  auto test_val() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import uuid.time
#import uuid.Container
#import std.cout
#import std.get
#import sys.time.as

#import uuid.generate.time_unsafe
#import uuid.time.point
auto tests::unit::time::Fixture::test_point() -> void {
  ::uuid::Container a = ::uuid::generate::time();
  std::cout << "a = " << a << '\n';
  sys::time::point p = uuid::time::point(a);
  std::cout << "time point = " << sys::time::as<sys::time::t>(p) << '\n';
}

#import uuid.time.t
auto tests::unit::time::Fixture::test_t() -> void {
  ::uuid::Container a = ::uuid::generate::time();
  std::cout << "a = " << a << '\n';
  sys::time::t t = uuid::time::t(a);
  std::cout << "time t = " << t << '\n';
}

#import uuid.time.val
auto tests::unit::time::Fixture::test_val() -> void {
  ::uuid::Container a = ::uuid::generate::time();
  std::cout << "a = " << a << '\n';
  sys::time::val v = uuid::time::val(a);
  std::cout << "time v = " << sys::time::as<sys::time::t>(v) << '\n';
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
#import unit.rigging.suite.add
auto tests::unit::time::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("time");
  s << call("point", &Fixture::test_point)
    << call("t", &Fixture::test_val)
    << call("val", &Fixture::test_val)
    ;
  return finalize(s);
}
#endiv

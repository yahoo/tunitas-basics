// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace tests {
  namespace unit {
    namespace unparsing {
      class Fixture;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::unparsing::Fixture : public cppunit::test::Fixture {
public:
  auto test_lower_char_pointer() -> void;
  auto test_lower_string() -> void;
  auto test_lower_vector() -> void;
  auto test_upper_char_pointer() -> void;
  auto test_upper_string() -> void;
  auto test_upper_vector() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import uuid.unparsing.lower
#import uuid.unparsing.upper
#import uuid.parse
#import uuid.Container

auto tests::unit::unparsing::Fixture::test_lower_char_pointer() -> void {
  uuid::Container thing;
  auto r = uuid::parse("6cac0b98-3f7b-491c-8027-6d7cb7deb26f", thing);
  CPPUNIT_ASSERT(r);
  char buf[37];
  uuid::unparsing::lower(thing, &buf[0]);
  buf[36] = '\0';
  CPPUNIT_ASSERT(std::string(buf) == "6cac0b98-3f7b-491c-8027-6d7cb7deb26f");
}

auto tests::unit::unparsing::Fixture::test_lower_string() -> void {
  uuid::Container thing;
  auto r = uuid::parse("5dedd97f-ec46-461d-aa8c-202b05eb5a39", thing);
  CPPUNIT_ASSERT(r);
  std::string buf;
  uuid::unparsing::lower(thing, buf);
  CPPUNIT_ASSERT(std::string(buf) == "5dedd97f-ec46-461d-aa8c-202b05eb5a39");
}

auto tests::unit::unparsing::Fixture::test_lower_vector() -> void {
  uuid::Container thing;
  auto r = uuid::parse("23e75449-c970-4560-8cfb-5ea5743ee52c", thing);
  CPPUNIT_ASSERT(r);
  std::vector<char> buf;
  uuid::unparsing::lower(thing, buf);
  CPPUNIT_ASSERT(std::string(buf.begin(), buf.end()) == "23e75449-c970-4560-8cfb-5ea5743ee52c");
}

auto tests::unit::unparsing::Fixture::test_upper_char_pointer() -> void {
  uuid::Container thing;
  auto r = uuid::parse("6cac0b98-3f7b-491c-8027-6d7cb7deb26f", thing);
  CPPUNIT_ASSERT(r);
  char buf[37];
  uuid::unparsing::upper(thing, &buf[0]);
  buf[36] = '\0';
  CPPUNIT_ASSERT(std::string(buf) == "6CAC0B98-3F7B-491C-8027-6D7CB7DEB26F");
}

auto tests::unit::unparsing::Fixture::test_upper_string() -> void {
  uuid::Container thing;
  auto r = uuid::parse("23E75449-C970-4560-8CFB-5EA5743EE52C", thing);
  CPPUNIT_ASSERT(r);
  std::vector<char> buf;
  uuid::unparsing::upper(thing, buf);
  CPPUNIT_ASSERT(std::string(buf.begin(), buf.end()) == "23E75449-C970-4560-8CFB-5EA5743EE52C");
}

auto tests::unit::unparsing::Fixture::test_upper_vector() -> void {
  uuid::Container thing;
  auto r = uuid::parse("23E75449-C970-4560-8CFB-5EA5743EE52C", thing);
  CPPUNIT_ASSERT(r);
  std::vector<char> buf;
  uuid::unparsing::upper(thing, buf);
  CPPUNIT_ASSERT(std::string(buf.begin(), buf.end()) == "23E75449-C970-4560-8CFB-5EA5743EE52C");
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
#import unit.rigging.suite.add
auto tests::unit::unparsing::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("unparsing");
  s << call("lower_char_pointer", &Fixture::test_lower_char_pointer)
    << call("lower_string", &Fixture::test_lower_string)
    << call("lower_vector", &Fixture::test_lower_vector)
    << call("upper_char_pointer", &Fixture::test_upper_char_pointer)
    << call("upper_string", &Fixture::test_upper_string)
    << call("upper_vector", &Fixture::test_upper_vector)
    ;
  return finalize(s);
}
#endiv

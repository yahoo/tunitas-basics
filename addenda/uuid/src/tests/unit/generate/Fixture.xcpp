// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the license file at the top of this repository.
// Also the LICENSE file at https://github.com/yahoo/tunitas-packaging/blob/master/LICENSE (as available)
// Also the LICENSE file at https://git.tunitas.technology/all/components/$PACKAGE/tree/LICENSE (as available)
#divert <fpp>
namespace tests {
  namespace unit {
    namespace generate {
      class Fixture;
    }
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::generate::Fixture : public cppunit::test::Fixture {
public:
  auto test_basic() -> void;
  auto test_random() -> void;
  auto test_time() -> void;
  auto test_time_unsafe() -> void;
  auto test_time_safe() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import uuid.generate
#import uuid.Container
#import std.cout
#import std.get

#import uuid.generate.basic
auto tests::unit::generate::Fixture::test_basic() -> void {
  std::cout << "uuid::generate::basic\n";
  uuid::Container a = ::uuid::generate::basic();
  std::cout << "a = " << a << '\n';
  ::uuid::Container b = ::uuid::generate::basic();
  std::cout << "b = " << b << '\n';
  ::uuid::Container c = b;
  std::cout << "c = " << c << '\n';
  ::uuid::Container d(c);
  std::cout << "d = " << d << '\n';
  ::uuid::Container e;
  e = d;
  std::cout << "e = " << e << '\n';
}

#import uuid.generate.random
auto tests::unit::generate::Fixture::test_random() -> void {
  ::uuid::Container a = ::uuid::generate::random();
  std::cout << "a = " << a << '\n';
  ::uuid::Container b = ::uuid::generate::random();
  std::cout << "b = " << b << '\n';
}

#import uuid.generate.time_unsafe // time() is time_unsafe()
auto tests::unit::generate::Fixture::test_time() -> void {
  ::uuid::Container a = ::uuid::generate::time();
  std::cout << "a = " << a << '\n';
  ::uuid::Container b = ::uuid::generate::time();
  std::cout << "b = " << b << '\n';
}

#import uuid.generate.time_unsafe
auto tests::unit::generate::Fixture::test_time_unsafe() -> void {
  ::uuid::Container a = ::uuid::generate::time_unsafe();
  std::cout << "a = " << a << '\n';
  ::uuid::Container b = ::uuid::generate::time_unsafe();
  std::cout << "b = " << b << '\n';
}

#import uuid.generate.time_safe
auto tests::unit::generate::Fixture::test_time_safe() -> void {
  std::cout << "uuid::generate::time_safe\n";

  ::uuid::Container a = std::get<0>(uuid::generate::time_safe());
  std::cout << "a = " << a << '\n';
  ::uuid::Container b = std::get<0>(uuid::generate::time_safe());
  std::cout << "b = " << b << '\n';
}

#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
#import unit.rigging.suite.add
auto tests::unit::generate::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("generate");
  s << call("basic", &Fixture::test_basic)
    << call("random", &Fixture::test_random)
    << call("time", &Fixture::test_time)
    << call("time-unsafe", &Fixture::test_time_unsafe)
    << call("time-safe", &Fixture::test_time_safe)
    ;
  return finalize(s);
}
#endiv
